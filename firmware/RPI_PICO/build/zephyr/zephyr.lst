
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	200006d8 1000101d 10002c6b 10000fd9     ... ....k,......
	...
1000012c:	10000ea5 00000000 00000000 10000e45     ............E...
1000013c:	10001499                                ....

10000140 <_irq_vector_table>:
10000140:	10000f15 10000f15 10000f15 10000f15     ................
10000150:	10000f15 10000f15 10000f15 10000f15     ................
10000160:	10000f15 10000f15 10000f15 10000f15     ................
10000170:	10000f15 10000f15 10000f15 10000f15     ................
10000180:	10000f15 10000f15 10000f15 10000f15     ................
10000190:	10000f15 10000f15 10000f15 10000f15     ................
100001a0:	10000f15 10000f15                       ........

Disassembly of section text:

100001a8 <__gnu_thumb1_case_sqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5609      	ldrsb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_uqi>:
100001bc:	b402      	push	{r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0049      	lsls	r1, r1, #1
100001c4:	5c09      	ldrb	r1, [r1, r0]
100001c6:	0049      	lsls	r1, r1, #1
100001c8:	448e      	add	lr, r1
100001ca:	bc02      	pop	{r1}
100001cc:	4770      	bx	lr
100001ce:	46c0      	nop			; (mov r8, r8)

100001d0 <__gnu_thumb1_case_shi>:
100001d0:	b403      	push	{r0, r1}
100001d2:	4671      	mov	r1, lr
100001d4:	0849      	lsrs	r1, r1, #1
100001d6:	0040      	lsls	r0, r0, #1
100001d8:	0049      	lsls	r1, r1, #1
100001da:	5e09      	ldrsh	r1, [r1, r0]
100001dc:	0049      	lsls	r1, r1, #1
100001de:	448e      	add	lr, r1
100001e0:	bc03      	pop	{r0, r1}
100001e2:	4770      	bx	lr

100001e4 <__udivsi3>:
100001e4:	2900      	cmp	r1, #0
100001e6:	d034      	beq.n	10000252 <.udivsi3_skip_div0_test+0x6a>

100001e8 <.udivsi3_skip_div0_test>:
100001e8:	2301      	movs	r3, #1
100001ea:	2200      	movs	r2, #0
100001ec:	b410      	push	{r4}
100001ee:	4288      	cmp	r0, r1
100001f0:	d32c      	bcc.n	1000024c <.udivsi3_skip_div0_test+0x64>
100001f2:	2401      	movs	r4, #1
100001f4:	0724      	lsls	r4, r4, #28
100001f6:	42a1      	cmp	r1, r4
100001f8:	d204      	bcs.n	10000204 <.udivsi3_skip_div0_test+0x1c>
100001fa:	4281      	cmp	r1, r0
100001fc:	d202      	bcs.n	10000204 <.udivsi3_skip_div0_test+0x1c>
100001fe:	0109      	lsls	r1, r1, #4
10000200:	011b      	lsls	r3, r3, #4
10000202:	e7f8      	b.n	100001f6 <.udivsi3_skip_div0_test+0xe>
10000204:	00e4      	lsls	r4, r4, #3
10000206:	42a1      	cmp	r1, r4
10000208:	d204      	bcs.n	10000214 <.udivsi3_skip_div0_test+0x2c>
1000020a:	4281      	cmp	r1, r0
1000020c:	d202      	bcs.n	10000214 <.udivsi3_skip_div0_test+0x2c>
1000020e:	0049      	lsls	r1, r1, #1
10000210:	005b      	lsls	r3, r3, #1
10000212:	e7f8      	b.n	10000206 <.udivsi3_skip_div0_test+0x1e>
10000214:	4288      	cmp	r0, r1
10000216:	d301      	bcc.n	1000021c <.udivsi3_skip_div0_test+0x34>
10000218:	1a40      	subs	r0, r0, r1
1000021a:	431a      	orrs	r2, r3
1000021c:	084c      	lsrs	r4, r1, #1
1000021e:	42a0      	cmp	r0, r4
10000220:	d302      	bcc.n	10000228 <.udivsi3_skip_div0_test+0x40>
10000222:	1b00      	subs	r0, r0, r4
10000224:	085c      	lsrs	r4, r3, #1
10000226:	4322      	orrs	r2, r4
10000228:	088c      	lsrs	r4, r1, #2
1000022a:	42a0      	cmp	r0, r4
1000022c:	d302      	bcc.n	10000234 <.udivsi3_skip_div0_test+0x4c>
1000022e:	1b00      	subs	r0, r0, r4
10000230:	089c      	lsrs	r4, r3, #2
10000232:	4322      	orrs	r2, r4
10000234:	08cc      	lsrs	r4, r1, #3
10000236:	42a0      	cmp	r0, r4
10000238:	d302      	bcc.n	10000240 <.udivsi3_skip_div0_test+0x58>
1000023a:	1b00      	subs	r0, r0, r4
1000023c:	08dc      	lsrs	r4, r3, #3
1000023e:	4322      	orrs	r2, r4
10000240:	2800      	cmp	r0, #0
10000242:	d003      	beq.n	1000024c <.udivsi3_skip_div0_test+0x64>
10000244:	091b      	lsrs	r3, r3, #4
10000246:	d001      	beq.n	1000024c <.udivsi3_skip_div0_test+0x64>
10000248:	0909      	lsrs	r1, r1, #4
1000024a:	e7e3      	b.n	10000214 <.udivsi3_skip_div0_test+0x2c>
1000024c:	0010      	movs	r0, r2
1000024e:	bc10      	pop	{r4}
10000250:	4770      	bx	lr
10000252:	b501      	push	{r0, lr}
10000254:	2000      	movs	r0, #0
10000256:	f000 f80b 	bl	10000270 <__aeabi_idiv0>
1000025a:	bd02      	pop	{r1, pc}

1000025c <__aeabi_uidivmod>:
1000025c:	2900      	cmp	r1, #0
1000025e:	d0f8      	beq.n	10000252 <.udivsi3_skip_div0_test+0x6a>
10000260:	b503      	push	{r0, r1, lr}
10000262:	f7ff ffc1 	bl	100001e8 <.udivsi3_skip_div0_test>
10000266:	bc0e      	pop	{r1, r2, r3}
10000268:	4342      	muls	r2, r0
1000026a:	1a89      	subs	r1, r1, r2
1000026c:	4718      	bx	r3
1000026e:	46c0      	nop			; (mov r8, r8)

10000270 <__aeabi_idiv0>:
10000270:	4770      	bx	lr
10000272:	46c0      	nop			; (mov r8, r8)

10000274 <__clzsi2>:
10000274:	211c      	movs	r1, #28
10000276:	2301      	movs	r3, #1
10000278:	041b      	lsls	r3, r3, #16
1000027a:	4298      	cmp	r0, r3
1000027c:	d301      	bcc.n	10000282 <__clzsi2+0xe>
1000027e:	0c00      	lsrs	r0, r0, #16
10000280:	3910      	subs	r1, #16
10000282:	0a1b      	lsrs	r3, r3, #8
10000284:	4298      	cmp	r0, r3
10000286:	d301      	bcc.n	1000028c <__clzsi2+0x18>
10000288:	0a00      	lsrs	r0, r0, #8
1000028a:	3908      	subs	r1, #8
1000028c:	091b      	lsrs	r3, r3, #4
1000028e:	4298      	cmp	r0, r3
10000290:	d301      	bcc.n	10000296 <__clzsi2+0x22>
10000292:	0900      	lsrs	r0, r0, #4
10000294:	3904      	subs	r1, #4
10000296:	a202      	add	r2, pc, #8	; (adr r2, 100002a0 <__clzsi2+0x2c>)
10000298:	5c10      	ldrb	r0, [r2, r0]
1000029a:	1840      	adds	r0, r0, r1
1000029c:	4770      	bx	lr
1000029e:	46c0      	nop			; (mov r8, r8)
100002a0:	02020304 	.word	0x02020304
100002a4:	01010101 	.word	0x01010101
	...

100002b0 <__aeabi_uldivmod>:
100002b0:	2b00      	cmp	r3, #0
100002b2:	d111      	bne.n	100002d8 <__aeabi_uldivmod+0x28>
100002b4:	2a00      	cmp	r2, #0
100002b6:	d10f      	bne.n	100002d8 <__aeabi_uldivmod+0x28>
100002b8:	2900      	cmp	r1, #0
100002ba:	d100      	bne.n	100002be <__aeabi_uldivmod+0xe>
100002bc:	2800      	cmp	r0, #0
100002be:	d002      	beq.n	100002c6 <__aeabi_uldivmod+0x16>
100002c0:	2100      	movs	r1, #0
100002c2:	43c9      	mvns	r1, r1
100002c4:	0008      	movs	r0, r1
100002c6:	b407      	push	{r0, r1, r2}
100002c8:	4802      	ldr	r0, [pc, #8]	; (100002d4 <__aeabi_uldivmod+0x24>)
100002ca:	a102      	add	r1, pc, #8	; (adr r1, 100002d4 <__aeabi_uldivmod+0x24>)
100002cc:	1840      	adds	r0, r0, r1
100002ce:	9002      	str	r0, [sp, #8]
100002d0:	bd03      	pop	{r0, r1, pc}
100002d2:	46c0      	nop			; (mov r8, r8)
100002d4:	ffffff9d 	.word	0xffffff9d
100002d8:	b403      	push	{r0, r1}
100002da:	4668      	mov	r0, sp
100002dc:	b501      	push	{r0, lr}
100002de:	9802      	ldr	r0, [sp, #8]
100002e0:	f000 f84e 	bl	10000380 <__udivmoddi4>
100002e4:	9b01      	ldr	r3, [sp, #4]
100002e6:	469e      	mov	lr, r3
100002e8:	b002      	add	sp, #8
100002ea:	bc0c      	pop	{r2, r3}
100002ec:	4770      	bx	lr
100002ee:	46c0      	nop			; (mov r8, r8)

100002f0 <__aeabi_llsr>:
100002f0:	40d0      	lsrs	r0, r2
100002f2:	000b      	movs	r3, r1
100002f4:	40d1      	lsrs	r1, r2
100002f6:	469c      	mov	ip, r3
100002f8:	3a20      	subs	r2, #32
100002fa:	40d3      	lsrs	r3, r2
100002fc:	4318      	orrs	r0, r3
100002fe:	4252      	negs	r2, r2
10000300:	4663      	mov	r3, ip
10000302:	4093      	lsls	r3, r2
10000304:	4318      	orrs	r0, r3
10000306:	4770      	bx	lr

10000308 <__aeabi_llsl>:
10000308:	4091      	lsls	r1, r2
1000030a:	0003      	movs	r3, r0
1000030c:	4090      	lsls	r0, r2
1000030e:	469c      	mov	ip, r3
10000310:	3a20      	subs	r2, #32
10000312:	4093      	lsls	r3, r2
10000314:	4319      	orrs	r1, r3
10000316:	4252      	negs	r2, r2
10000318:	4663      	mov	r3, ip
1000031a:	40d3      	lsrs	r3, r2
1000031c:	4319      	orrs	r1, r3
1000031e:	4770      	bx	lr

10000320 <__clzdi2>:
10000320:	b510      	push	{r4, lr}
10000322:	2900      	cmp	r1, #0
10000324:	d103      	bne.n	1000032e <__clzdi2+0xe>
10000326:	f7ff ffa5 	bl	10000274 <__clzsi2>
1000032a:	3020      	adds	r0, #32
1000032c:	e002      	b.n	10000334 <__clzdi2+0x14>
1000032e:	0008      	movs	r0, r1
10000330:	f7ff ffa0 	bl	10000274 <__clzsi2>
10000334:	bd10      	pop	{r4, pc}
10000336:	46c0      	nop			; (mov r8, r8)

10000338 <__aeabi_lmul>:
10000338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000033a:	9301      	str	r3, [sp, #4]
1000033c:	b283      	uxth	r3, r0
1000033e:	469c      	mov	ip, r3
10000340:	0006      	movs	r6, r0
10000342:	0c03      	lsrs	r3, r0, #16
10000344:	4660      	mov	r0, ip
10000346:	000d      	movs	r5, r1
10000348:	4661      	mov	r1, ip
1000034a:	b297      	uxth	r7, r2
1000034c:	4378      	muls	r0, r7
1000034e:	0c14      	lsrs	r4, r2, #16
10000350:	435f      	muls	r7, r3
10000352:	4363      	muls	r3, r4
10000354:	434c      	muls	r4, r1
10000356:	0c01      	lsrs	r1, r0, #16
10000358:	468c      	mov	ip, r1
1000035a:	19e4      	adds	r4, r4, r7
1000035c:	4464      	add	r4, ip
1000035e:	42a7      	cmp	r7, r4
10000360:	d902      	bls.n	10000368 <__aeabi_lmul+0x30>
10000362:	2180      	movs	r1, #128	; 0x80
10000364:	0249      	lsls	r1, r1, #9
10000366:	185b      	adds	r3, r3, r1
10000368:	9901      	ldr	r1, [sp, #4]
1000036a:	436a      	muls	r2, r5
1000036c:	4371      	muls	r1, r6
1000036e:	0c27      	lsrs	r7, r4, #16
10000370:	18fb      	adds	r3, r7, r3
10000372:	0424      	lsls	r4, r4, #16
10000374:	18c9      	adds	r1, r1, r3
10000376:	b280      	uxth	r0, r0
10000378:	1820      	adds	r0, r4, r0
1000037a:	1889      	adds	r1, r1, r2
1000037c:	b003      	add	sp, #12
1000037e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000380 <__udivmoddi4>:
10000380:	b5f0      	push	{r4, r5, r6, r7, lr}
10000382:	0006      	movs	r6, r0
10000384:	000f      	movs	r7, r1
10000386:	0015      	movs	r5, r2
10000388:	001c      	movs	r4, r3
1000038a:	b085      	sub	sp, #20
1000038c:	428b      	cmp	r3, r1
1000038e:	d863      	bhi.n	10000458 <__udivmoddi4+0xd8>
10000390:	d101      	bne.n	10000396 <__udivmoddi4+0x16>
10000392:	4282      	cmp	r2, r0
10000394:	d860      	bhi.n	10000458 <__udivmoddi4+0xd8>
10000396:	0021      	movs	r1, r4
10000398:	0028      	movs	r0, r5
1000039a:	f7ff ffc1 	bl	10000320 <__clzdi2>
1000039e:	0039      	movs	r1, r7
100003a0:	9000      	str	r0, [sp, #0]
100003a2:	0030      	movs	r0, r6
100003a4:	f7ff ffbc 	bl	10000320 <__clzdi2>
100003a8:	9b00      	ldr	r3, [sp, #0]
100003aa:	0021      	movs	r1, r4
100003ac:	1a1b      	subs	r3, r3, r0
100003ae:	001a      	movs	r2, r3
100003b0:	0028      	movs	r0, r5
100003b2:	9303      	str	r3, [sp, #12]
100003b4:	f7ff ffa8 	bl	10000308 <__aeabi_llsl>
100003b8:	9000      	str	r0, [sp, #0]
100003ba:	9101      	str	r1, [sp, #4]
100003bc:	42b9      	cmp	r1, r7
100003be:	d845      	bhi.n	1000044c <__udivmoddi4+0xcc>
100003c0:	d101      	bne.n	100003c6 <__udivmoddi4+0x46>
100003c2:	42b0      	cmp	r0, r6
100003c4:	d842      	bhi.n	1000044c <__udivmoddi4+0xcc>
100003c6:	9b00      	ldr	r3, [sp, #0]
100003c8:	9c01      	ldr	r4, [sp, #4]
100003ca:	2001      	movs	r0, #1
100003cc:	2100      	movs	r1, #0
100003ce:	9a03      	ldr	r2, [sp, #12]
100003d0:	1af6      	subs	r6, r6, r3
100003d2:	41a7      	sbcs	r7, r4
100003d4:	f7ff ff98 	bl	10000308 <__aeabi_llsl>
100003d8:	0004      	movs	r4, r0
100003da:	000d      	movs	r5, r1
100003dc:	9b03      	ldr	r3, [sp, #12]
100003de:	2b00      	cmp	r3, #0
100003e0:	d02b      	beq.n	1000043a <__udivmoddi4+0xba>
100003e2:	9b01      	ldr	r3, [sp, #4]
100003e4:	9a00      	ldr	r2, [sp, #0]
100003e6:	07db      	lsls	r3, r3, #31
100003e8:	0850      	lsrs	r0, r2, #1
100003ea:	4318      	orrs	r0, r3
100003ec:	9b01      	ldr	r3, [sp, #4]
100003ee:	0859      	lsrs	r1, r3, #1
100003f0:	9b03      	ldr	r3, [sp, #12]
100003f2:	469c      	mov	ip, r3
100003f4:	42b9      	cmp	r1, r7
100003f6:	d82c      	bhi.n	10000452 <__udivmoddi4+0xd2>
100003f8:	d101      	bne.n	100003fe <__udivmoddi4+0x7e>
100003fa:	42b0      	cmp	r0, r6
100003fc:	d829      	bhi.n	10000452 <__udivmoddi4+0xd2>
100003fe:	0032      	movs	r2, r6
10000400:	003b      	movs	r3, r7
10000402:	1a12      	subs	r2, r2, r0
10000404:	418b      	sbcs	r3, r1
10000406:	2601      	movs	r6, #1
10000408:	1892      	adds	r2, r2, r2
1000040a:	415b      	adcs	r3, r3
1000040c:	2700      	movs	r7, #0
1000040e:	18b6      	adds	r6, r6, r2
10000410:	415f      	adcs	r7, r3
10000412:	2301      	movs	r3, #1
10000414:	425b      	negs	r3, r3
10000416:	449c      	add	ip, r3
10000418:	4663      	mov	r3, ip
1000041a:	2b00      	cmp	r3, #0
1000041c:	d1ea      	bne.n	100003f4 <__udivmoddi4+0x74>
1000041e:	0030      	movs	r0, r6
10000420:	0039      	movs	r1, r7
10000422:	9a03      	ldr	r2, [sp, #12]
10000424:	f7ff ff64 	bl	100002f0 <__aeabi_llsr>
10000428:	9a03      	ldr	r2, [sp, #12]
1000042a:	19a4      	adds	r4, r4, r6
1000042c:	417d      	adcs	r5, r7
1000042e:	0006      	movs	r6, r0
10000430:	000f      	movs	r7, r1
10000432:	f7ff ff69 	bl	10000308 <__aeabi_llsl>
10000436:	1a24      	subs	r4, r4, r0
10000438:	418d      	sbcs	r5, r1
1000043a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000043c:	2b00      	cmp	r3, #0
1000043e:	d001      	beq.n	10000444 <__udivmoddi4+0xc4>
10000440:	601e      	str	r6, [r3, #0]
10000442:	605f      	str	r7, [r3, #4]
10000444:	0020      	movs	r0, r4
10000446:	0029      	movs	r1, r5
10000448:	b005      	add	sp, #20
1000044a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000044c:	2400      	movs	r4, #0
1000044e:	2500      	movs	r5, #0
10000450:	e7c4      	b.n	100003dc <__udivmoddi4+0x5c>
10000452:	19b6      	adds	r6, r6, r6
10000454:	417f      	adcs	r7, r7
10000456:	e7dc      	b.n	10000412 <__udivmoddi4+0x92>
10000458:	2400      	movs	r4, #0
1000045a:	2500      	movs	r5, #0
1000045c:	e7ed      	b.n	1000043a <__udivmoddi4+0xba>
	...

10000460 <main>:
/* Function prototype ------------------------------------------------------------------------------------------------------------------------------------*/
/* Setup -------------------------------------------------------------------------------------------------------------------------------------------------*/
/* -------------------------------------------------------------------------------------------------------------------------------------------------------*/


void main(void) {	
10000460:	b510      	push	{r4, lr}

	motor_uSetup();
10000462:	f000 f821 	bl	100004a8 <motor_uSetup>
	gprs_vSetup();
10000466:	f000 f8a1 	bl	100005ac <gprs_vSetup>
	led_vSetup();
1000046a:	f000 f873 	bl	10000554 <led_vSetup>


	motor_vTurnoff(M1A, M1B);
1000046e:	2101      	movs	r1, #1
10000470:	2000      	movs	r0, #0
10000472:	f000 f84b 	bl	1000050c <motor_vTurnoff>
	motor_vTurnoff(M2A, M2B);
10000476:	2103      	movs	r1, #3
10000478:	2002      	movs	r0, #2
1000047a:	f000 f847 	bl	1000050c <motor_vTurnoff>
	motor_vTurnoff(M3A, M3B);
1000047e:	2105      	movs	r1, #5
10000480:	2004      	movs	r0, #4
10000482:	f000 f843 	bl	1000050c <motor_vTurnoff>
	motor_vTurnoff(M4A, M4B);
10000486:	2107      	movs	r1, #7
10000488:	2006      	movs	r0, #6
1000048a:	f000 f83f 	bl	1000050c <motor_vTurnoff>

	printk("started \r\n");
1000048e:	4804      	ldr	r0, [pc, #16]	; (100004a0 <main+0x40>)
10000490:	f002 fb63 	bl	10002b5a <printk>

	led_vPeriodicPingStart(K_MSEC(1000));
10000494:	2100      	movs	r1, #0
10000496:	4803      	ldr	r0, [pc, #12]	; (100004a4 <main+0x44>)
10000498:	f000 f874 	bl	10000584 <led_vPeriodicPingStart>
}
1000049c:	bd10      	pop	{r4, pc}
1000049e:	46c0      	nop			; (mov r8, r8)
100004a0:	10003a6c 	.word	0x10003a6c
100004a4:	00002710 	.word	0x00002710

100004a8 <motor_uSetup>:
	GPIO_DT_SPEC_GET(M4B_NODE, gpios)
};

/* -------------------------------------------------------------------------------------------------------------------------------------------------------*/

uint8_t motor_uSetup(void){
100004a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100004aa:	4c16      	ldr	r4, [pc, #88]	; (10000504 <motor_uSetup+0x5c>)

	for(uint8_t i = M1A; i<QTY_MOTORS; i++ ){
		if (!device_is_ready(scxMotors[i].port)) return 1;
100004ac:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
100004ae:	f002 ffce 	bl	1000344e <z_device_is_ready>
100004b2:	2800      	cmp	r0, #0
100004b4:	d024      	beq.n	10000500 <motor_uSetup+0x58>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
100004b6:	22c0      	movs	r2, #192	; 0xc0
				  spec->pin,
				  spec->dt_flags | extra_flags);
100004b8:	88e7      	ldrh	r7, [r4, #6]
	return gpio_pin_configure(spec->port,
100004ba:	02d2      	lsls	r2, r2, #11
100004bc:	433a      	orrs	r2, r7
100004be:	6820      	ldr	r0, [r4, #0]
100004c0:	7921      	ldrb	r1, [r4, #4]
100004c2:	9201      	str	r2, [sp, #4]
		data->invert |= (gpio_port_pins_t)BIT(pin);
100004c4:	2601      	movs	r6, #1
	const struct gpio_driver_api *api =
100004c6:	6883      	ldr	r3, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
100004c8:	408e      	lsls	r6, r1
	const struct gpio_driver_api *api =
100004ca:	469c      	mov	ip, r3
	struct gpio_driver_data *data =
100004cc:	6903      	ldr	r3, [r0, #16]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
100004ce:	681d      	ldr	r5, [r3, #0]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
100004d0:	002a      	movs	r2, r5
100004d2:	43b2      	bics	r2, r6
100004d4:	9200      	str	r2, [sp, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
100004d6:	2201      	movs	r2, #1
100004d8:	4217      	tst	r7, r2
100004da:	d001      	beq.n	100004e0 <motor_uSetup+0x38>
		data->invert |= (gpio_port_pins_t)BIT(pin);
100004dc:	432e      	orrs	r6, r5
100004de:	9600      	str	r6, [sp, #0]
100004e0:	9a00      	ldr	r2, [sp, #0]
100004e2:	601a      	str	r2, [r3, #0]
	return api->pin_configure(port, pin, flags);
100004e4:	4663      	mov	r3, ip
100004e6:	9a01      	ldr	r2, [sp, #4]
100004e8:	681b      	ldr	r3, [r3, #0]
100004ea:	4798      	blx	r3
		
		gpio_pin_configure_dt(&scxMotors[i], GPIO_OUTPUT_LOW);
		gpio_pin_set_dt(&scxMotors[i], false);
100004ec:	0020      	movs	r0, r4
100004ee:	2100      	movs	r1, #0
100004f0:	f002 fb03 	bl	10002afa <gpio_pin_set_dt.isra.0>
	for(uint8_t i = M1A; i<QTY_MOTORS; i++ ){
100004f4:	4b04      	ldr	r3, [pc, #16]	; (10000508 <motor_uSetup+0x60>)
100004f6:	3408      	adds	r4, #8
100004f8:	42a3      	cmp	r3, r4
100004fa:	d1d7      	bne.n	100004ac <motor_uSetup+0x4>
	}

	return 0;
100004fc:	2000      	movs	r0, #0
}
100004fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (!device_is_ready(scxMotors[i].port)) return 1;
10000500:	2001      	movs	r0, #1
10000502:	e7fc      	b.n	100004fe <motor_uSetup+0x56>
10000504:	100038e8 	.word	0x100038e8
10000508:	10003928 	.word	0x10003928

1000050c <motor_vTurnoff>:
void motor_vToStop( motors_gpio mxa, motors_gpio mxb ){
	gpio_pin_set_dt(&scxMotors[mxa], true);
	gpio_pin_set_dt(&scxMotors[mxb], true);
}

void motor_vTurnoff( motors_gpio mxa, motors_gpio mxb ){
1000050c:	b570      	push	{r4, r5, r6, lr}
1000050e:	000c      	movs	r4, r1
	gpio_pin_set_dt(&scxMotors[mxa], false);
10000510:	4d05      	ldr	r5, [pc, #20]	; (10000528 <motor_vTurnoff+0x1c>)
10000512:	00c0      	lsls	r0, r0, #3
10000514:	1828      	adds	r0, r5, r0
10000516:	2100      	movs	r1, #0
10000518:	f002 faef 	bl	10002afa <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(&scxMotors[mxb], false);
1000051c:	00e0      	lsls	r0, r4, #3
1000051e:	1828      	adds	r0, r5, r0
10000520:	2100      	movs	r1, #0
10000522:	f002 faea 	bl	10002afa <gpio_pin_set_dt.isra.0>
}
10000526:	bd70      	pop	{r4, r5, r6, pc}
10000528:	100038e8 	.word	0x100038e8

1000052c <ping_work_handler>:
void led_timer_handler(struct k_timer *timer_id) {
	led_vPing();

}

void ping_work_handler( struct k_work *work ){
1000052c:	b510      	push	{r4, lr}
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
1000052e:	4c08      	ldr	r4, [pc, #32]	; (10000550 <ping_work_handler+0x24>)
10000530:	2201      	movs	r2, #1
10000532:	2119      	movs	r1, #25
10000534:	0020      	movs	r0, r4
10000536:	f002 faf7 	bl	10002b28 <gpio_pin_set.isra.0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
1000053a:	2100      	movs	r1, #0
1000053c:	20c8      	movs	r0, #200	; 0xc8
1000053e:	f002 f82d 	bl	1000259c <z_impl_k_sleep>
10000542:	2200      	movs	r2, #0
10000544:	2119      	movs	r1, #25
10000546:	0020      	movs	r0, r4
10000548:	f002 faee 	bl	10002b28 <gpio_pin_set.isra.0>
	gpio_pin_set_dt(&led, true);
	k_sleep(K_MSEC(20));
	gpio_pin_set_dt(&led, false);
}
1000054c:	bd10      	pop	{r4, pc}
1000054e:	46c0      	nop			; (mov r8, r8)
10000550:	100037ac 	.word	0x100037ac

10000554 <led_vSetup>:
void led_vSetup(void){
10000554:	b510      	push	{r4, lr}
10000556:	4c09      	ldr	r4, [pc, #36]	; (1000057c <led_vSetup+0x28>)
10000558:	0020      	movs	r0, r4
1000055a:	f002 ff78 	bl	1000344e <z_device_is_ready>
	if (!device_is_ready(led.port))	 return;
1000055e:	2800      	cmp	r0, #0
10000560:	d00b      	beq.n	1000057a <led_vSetup+0x26>
	struct gpio_driver_data *data =
10000562:	6922      	ldr	r2, [r4, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10000564:	4b06      	ldr	r3, [pc, #24]	; (10000580 <led_vSetup+0x2c>)
10000566:	6810      	ldr	r0, [r2, #0]
	const struct gpio_driver_api *api =
10000568:	68a1      	ldr	r1, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
1000056a:	4003      	ands	r3, r0
1000056c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
1000056e:	22a0      	movs	r2, #160	; 0xa0
10000570:	680b      	ldr	r3, [r1, #0]
10000572:	0020      	movs	r0, r4
10000574:	2119      	movs	r1, #25
10000576:	0312      	lsls	r2, r2, #12
10000578:	4798      	blx	r3
}
1000057a:	bd10      	pop	{r4, pc}
1000057c:	100037ac 	.word	0x100037ac
10000580:	fdffffff 	.word	0xfdffffff

10000584 <led_vPeriodicPingStart>:
void led_vPeriodicPingStart(k_timeout_t timeout){
10000584:	b507      	push	{r0, r1, r2, lr}
		(void) arch_syscall_invoke5(parm0.x, parm1.split.lo, parm1.split.hi, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
10000586:	9000      	str	r0, [sp, #0]
10000588:	2200      	movs	r2, #0
1000058a:	2300      	movs	r3, #0
1000058c:	4802      	ldr	r0, [pc, #8]	; (10000598 <led_vPeriodicPingStart+0x14>)
1000058e:	9101      	str	r1, [sp, #4]
10000590:	f002 fa38 	bl	10002a04 <z_impl_k_timer_start>
}
10000594:	bd07      	pop	{r0, r1, r2, pc}
10000596:	46c0      	nop			; (mov r8, r8)
10000598:	20000040 	.word	0x20000040

1000059c <led_vPing>:
void led_vPing(void){
1000059c:	b510      	push	{r4, lr}
	k_work_submit(&ping_work);
1000059e:	4802      	ldr	r0, [pc, #8]	; (100005a8 <led_vPing+0xc>)
100005a0:	f001 fd4e 	bl	10002040 <k_work_submit>
}
100005a4:	bd10      	pop	{r4, pc}
100005a6:	46c0      	nop			; (mov r8, r8)
100005a8:	20000000 	.word	0x20000000

100005ac <gprs_vSetup>:
/*########################################################################################################################################################*/
/*-------------------------------------------------------------------- Local Functions -------------------------------------------------------------------*/
/*########################################################################################################################################################*/


void gprs_vSetup(void){
100005ac:	b570      	push	{r4, r5, r6, lr}
100005ae:	4c0e      	ldr	r4, [pc, #56]	; (100005e8 <gprs_vSetup+0x3c>)
100005b0:	0020      	movs	r0, r4
100005b2:	f002 ff4c 	bl	1000344e <z_device_is_ready>
	if (!device_is_ready(gprs_reset.port))	return;
100005b6:	2800      	cmp	r0, #0
100005b8:	d013      	beq.n	100005e2 <gprs_vSetup+0x36>
	struct gpio_driver_data *data =
100005ba:	6926      	ldr	r6, [r4, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
100005bc:	4b0b      	ldr	r3, [pc, #44]	; (100005ec <gprs_vSetup+0x40>)
100005be:	6832      	ldr	r2, [r6, #0]
	const struct gpio_driver_api *api =
100005c0:	68a5      	ldr	r5, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
100005c2:	4013      	ands	r3, r2
	return api->pin_configure(port, pin, flags);
100005c4:	22a0      	movs	r2, #160	; 0xa0
100005c6:	211b      	movs	r1, #27
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
100005c8:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
100005ca:	0020      	movs	r0, r4
100005cc:	682b      	ldr	r3, [r5, #0]
100005ce:	0312      	lsls	r2, r2, #12
100005d0:	4798      	blx	r3
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
100005d2:	2180      	movs	r1, #128	; 0x80
100005d4:	6833      	ldr	r3, [r6, #0]
100005d6:	0509      	lsls	r1, r1, #20
100005d8:	420b      	tst	r3, r1
100005da:	d103      	bne.n	100005e4 <gprs_vSetup+0x38>
	return api->port_set_bits_raw(port, pins);
100005dc:	68eb      	ldr	r3, [r5, #12]
	return api->port_clear_bits_raw(port, pins);
100005de:	0020      	movs	r0, r4
100005e0:	4798      	blx	r3
	
	gpio_pin_configure_dt(&gprs_reset, GPIO_OUTPUT_HIGH);

	gpio_pin_set_dt(&gprs_reset, true);
100005e2:	bd70      	pop	{r4, r5, r6, pc}
100005e4:	692b      	ldr	r3, [r5, #16]
100005e6:	e7fa      	b.n	100005de <gprs_vSetup+0x32>
100005e8:	100037ac 	.word	0x100037ac
100005ec:	f7ffffff 	.word	0xf7ffffff

100005f0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
100005f0:	680b      	ldr	r3, [r1, #0]
{
100005f2:	b510      	push	{r4, lr}
	ctx->count++;
100005f4:	3301      	adds	r3, #1
100005f6:	600b      	str	r3, [r1, #0]
	return _char_out(c);
100005f8:	4b01      	ldr	r3, [pc, #4]	; (10000600 <char_out+0x10>)
100005fa:	681b      	ldr	r3, [r3, #0]
100005fc:	4798      	blx	r3
}
100005fe:	bd10      	pop	{r4, pc}
10000600:	20000010 	.word	0x20000010

10000604 <__printk_hook_install>:
	_char_out = fn;
10000604:	4b01      	ldr	r3, [pc, #4]	; (1000060c <__printk_hook_install+0x8>)
10000606:	6018      	str	r0, [r3, #0]
}
10000608:	4770      	bx	lr
1000060a:	46c0      	nop			; (mov r8, r8)
1000060c:	20000010 	.word	0x20000010

10000610 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
10000610:	b507      	push	{r0, r1, r2, lr}
10000612:	000b      	movs	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
10000614:	2100      	movs	r1, #0
{
10000616:	0002      	movs	r2, r0
		struct out_context ctx = { 0 };
10000618:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
1000061a:	4802      	ldr	r0, [pc, #8]	; (10000624 <vprintk+0x14>)
1000061c:	a901      	add	r1, sp, #4
1000061e:	f000 f803 	bl	10000628 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
10000622:	bd07      	pop	{r0, r1, r2, pc}
10000624:	100005f1 	.word	0x100005f1

10000628 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
10000628:	b5f0      	push	{r4, r5, r6, r7, lr}
1000062a:	001e      	movs	r6, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
1000062c:	2700      	movs	r7, #0
{
1000062e:	b097      	sub	sp, #92	; 0x5c
10000630:	9005      	str	r0, [sp, #20]
10000632:	9106      	str	r1, [sp, #24]
10000634:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
10000636:	9b08      	ldr	r3, [sp, #32]
10000638:	7818      	ldrb	r0, [r3, #0]
1000063a:	2800      	cmp	r0, #0
1000063c:	d101      	bne.n	10000642 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
1000063e:	0038      	movs	r0, r7
10000640:	e32d      	b.n	10000c9e <cbvprintf+0x676>
			OUTC(*fp++);
10000642:	9b08      	ldr	r3, [sp, #32]
10000644:	3301      	adds	r3, #1
10000646:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
10000648:	2825      	cmp	r0, #37	; 0x25
1000064a:	d00b      	beq.n	10000664 <cbvprintf+0x3c>
			OUTC(*fp++);
1000064c:	9906      	ldr	r1, [sp, #24]
1000064e:	9b05      	ldr	r3, [sp, #20]
10000650:	4798      	blx	r3
10000652:	2800      	cmp	r0, #0
10000654:	da00      	bge.n	10000658 <cbvprintf+0x30>
10000656:	e322      	b.n	10000c9e <cbvprintf+0x676>
			continue;
10000658:	0034      	movs	r4, r6
			OUTC(*fp++);
1000065a:	3701      	adds	r7, #1
			continue;
1000065c:	9b07      	ldr	r3, [sp, #28]
1000065e:	0026      	movs	r6, r4
10000660:	9308      	str	r3, [sp, #32]
10000662:	e7e8      	b.n	10000636 <cbvprintf+0xe>
		} state = {
10000664:	ac10      	add	r4, sp, #64	; 0x40
10000666:	2218      	movs	r2, #24
10000668:	2100      	movs	r1, #0
1000066a:	0020      	movs	r0, r4
1000066c:	f002 fb1f 	bl	10002cae <memset>
	if (*sp == '%') {
10000670:	9b08      	ldr	r3, [sp, #32]
10000672:	785b      	ldrb	r3, [r3, #1]
10000674:	2b25      	cmp	r3, #37	; 0x25
10000676:	d117      	bne.n	100006a8 <cbvprintf+0x80>
		conv->specifier = *sp++;
10000678:	9a08      	ldr	r2, [sp, #32]
1000067a:	72e3      	strb	r3, [r4, #11]
1000067c:	3202      	adds	r2, #2
1000067e:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
10000680:	2201      	movs	r2, #1
10000682:	ab10      	add	r3, sp, #64	; 0x40
10000684:	7a59      	ldrb	r1, [r3, #9]
10000686:	4211      	tst	r1, r2
10000688:	d100      	bne.n	1000068c <cbvprintf+0x64>
1000068a:	e175      	b.n	10000978 <cbvprintf+0x350>
			width = va_arg(ap, int);
1000068c:	0034      	movs	r4, r6
1000068e:	cc04      	ldmia	r4!, {r2}
10000690:	9203      	str	r2, [sp, #12]
			if (width < 0) {
10000692:	2a00      	cmp	r2, #0
10000694:	db00      	blt.n	10000698 <cbvprintf+0x70>
10000696:	e175      	b.n	10000984 <cbvprintf+0x35c>
				conv->flag_dash = true;
10000698:	2004      	movs	r0, #4
1000069a:	7a1a      	ldrb	r2, [r3, #8]
1000069c:	4302      	orrs	r2, r0
1000069e:	721a      	strb	r2, [r3, #8]
				width = -width;
100006a0:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
100006a2:	425b      	negs	r3, r3
100006a4:	9303      	str	r3, [sp, #12]
100006a6:	e16d      	b.n	10000984 <cbvprintf+0x35c>
100006a8:	2200      	movs	r2, #0
100006aa:	0014      	movs	r4, r2
100006ac:	4694      	mov	ip, r2
100006ae:	0011      	movs	r1, r2
100006b0:	9203      	str	r2, [sp, #12]
		switch (*sp) {
100006b2:	9b07      	ldr	r3, [sp, #28]
100006b4:	781b      	ldrb	r3, [r3, #0]
100006b6:	2b2b      	cmp	r3, #43	; 0x2b
100006b8:	d06f      	beq.n	1000079a <cbvprintf+0x172>
100006ba:	d868      	bhi.n	1000078e <cbvprintf+0x166>
100006bc:	2b20      	cmp	r3, #32
100006be:	d072      	beq.n	100007a6 <cbvprintf+0x17e>
100006c0:	2b23      	cmp	r3, #35	; 0x23
100006c2:	d072      	beq.n	100007aa <cbvprintf+0x182>
100006c4:	2900      	cmp	r1, #0
100006c6:	d004      	beq.n	100006d2 <cbvprintf+0xaa>
100006c8:	2004      	movs	r0, #4
100006ca:	ad10      	add	r5, sp, #64	; 0x40
100006cc:	7a29      	ldrb	r1, [r5, #8]
100006ce:	4301      	orrs	r1, r0
100006d0:	7229      	strb	r1, [r5, #8]
100006d2:	4661      	mov	r1, ip
100006d4:	2900      	cmp	r1, #0
100006d6:	d006      	beq.n	100006e6 <cbvprintf+0xbe>
100006d8:	ad10      	add	r5, sp, #64	; 0x40
100006da:	7a29      	ldrb	r1, [r5, #8]
100006dc:	468c      	mov	ip, r1
100006de:	2108      	movs	r1, #8
100006e0:	4660      	mov	r0, ip
100006e2:	4301      	orrs	r1, r0
100006e4:	7229      	strb	r1, [r5, #8]
100006e6:	2c00      	cmp	r4, #0
100006e8:	d004      	beq.n	100006f4 <cbvprintf+0xcc>
100006ea:	2110      	movs	r1, #16
100006ec:	ac10      	add	r4, sp, #64	; 0x40
100006ee:	7a25      	ldrb	r5, [r4, #8]
100006f0:	4329      	orrs	r1, r5
100006f2:	7221      	strb	r1, [r4, #8]
100006f4:	9903      	ldr	r1, [sp, #12]
100006f6:	2900      	cmp	r1, #0
100006f8:	d004      	beq.n	10000704 <cbvprintf+0xdc>
100006fa:	2120      	movs	r1, #32
100006fc:	a810      	add	r0, sp, #64	; 0x40
100006fe:	7a04      	ldrb	r4, [r0, #8]
10000700:	4321      	orrs	r1, r4
10000702:	7201      	strb	r1, [r0, #8]
10000704:	2a00      	cmp	r2, #0
10000706:	d004      	beq.n	10000712 <cbvprintf+0xea>
10000708:	2240      	movs	r2, #64	; 0x40
1000070a:	a910      	add	r1, sp, #64	; 0x40
1000070c:	7a08      	ldrb	r0, [r1, #8]
1000070e:	4302      	orrs	r2, r0
10000710:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
10000712:	2144      	movs	r1, #68	; 0x44
10000714:	a810      	add	r0, sp, #64	; 0x40
10000716:	7a02      	ldrb	r2, [r0, #8]
10000718:	4011      	ands	r1, r2
1000071a:	2944      	cmp	r1, #68	; 0x44
1000071c:	d102      	bne.n	10000724 <cbvprintf+0xfc>
		conv->flag_zero = false;
1000071e:	2140      	movs	r1, #64	; 0x40
10000720:	438a      	bics	r2, r1
10000722:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
10000724:	2280      	movs	r2, #128	; 0x80
10000726:	7a01      	ldrb	r1, [r0, #8]
10000728:	4252      	negs	r2, r2
1000072a:	430a      	orrs	r2, r1
1000072c:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
1000072e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
10000730:	240a      	movs	r4, #10
10000732:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
10000734:	2b2a      	cmp	r3, #42	; 0x2a
10000736:	d141      	bne.n	100007bc <cbvprintf+0x194>
		conv->width_star = true;
10000738:	7a43      	ldrb	r3, [r0, #9]
1000073a:	3101      	adds	r1, #1
1000073c:	430b      	orrs	r3, r1
			++sp;
1000073e:	3201      	adds	r2, #1
		conv->width_star = true;
10000740:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
10000742:	7814      	ldrb	r4, [r2, #0]
10000744:	2502      	movs	r5, #2
10000746:	0021      	movs	r1, r4
10000748:	392e      	subs	r1, #46	; 0x2e
1000074a:	424b      	negs	r3, r1
1000074c:	4159      	adcs	r1, r3
1000074e:	a810      	add	r0, sp, #64	; 0x40
10000750:	7a43      	ldrb	r3, [r0, #9]
10000752:	0049      	lsls	r1, r1, #1
10000754:	43ab      	bics	r3, r5
10000756:	4319      	orrs	r1, r3
10000758:	7241      	strb	r1, [r0, #9]
	if (!conv->prec_present) {
1000075a:	2c2e      	cmp	r4, #46	; 0x2e
1000075c:	d146      	bne.n	100007ec <cbvprintf+0x1c4>
	if (*sp == '*') {
1000075e:	7853      	ldrb	r3, [r2, #1]
10000760:	2b2a      	cmp	r3, #42	; 0x2a
10000762:	d03e      	beq.n	100007e2 <cbvprintf+0x1ba>
	size_t val = 0;
10000764:	2300      	movs	r3, #0
	++sp;
10000766:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
10000768:	3508      	adds	r5, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
1000076a:	7811      	ldrb	r1, [r2, #0]
1000076c:	1c54      	adds	r4, r2, #1
1000076e:	0008      	movs	r0, r1
10000770:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10000772:	2809      	cmp	r0, #9
10000774:	d961      	bls.n	1000083a <cbvprintf+0x212>
	conv->prec_value = prec;
10000776:	a910      	add	r1, sp, #64	; 0x40
10000778:	9314      	str	r3, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
1000077a:	7a08      	ldrb	r0, [r1, #8]
1000077c:	0784      	lsls	r4, r0, #30
			      || (prec != (size_t)conv->prec_value));
1000077e:	4323      	orrs	r3, r4
	conv->unsupported |= ((conv->prec_value < 0)
10000780:	2402      	movs	r4, #2
10000782:	0fdb      	lsrs	r3, r3, #31
10000784:	005b      	lsls	r3, r3, #1
10000786:	43a0      	bics	r0, r4
10000788:	4303      	orrs	r3, r0
1000078a:	720b      	strb	r3, [r1, #8]
	return sp;
1000078c:	e02e      	b.n	100007ec <cbvprintf+0x1c4>
		switch (*sp) {
1000078e:	2b2d      	cmp	r3, #45	; 0x2d
10000790:	d00e      	beq.n	100007b0 <cbvprintf+0x188>
10000792:	2b30      	cmp	r3, #48	; 0x30
10000794:	d196      	bne.n	100006c4 <cbvprintf+0x9c>
			conv->flag_zero = true;
10000796:	2201      	movs	r2, #1
10000798:	e001      	b.n	1000079e <cbvprintf+0x176>
			conv->flag_plus = true;
1000079a:	2301      	movs	r3, #1
1000079c:	469c      	mov	ip, r3
			++sp;
1000079e:	9b07      	ldr	r3, [sp, #28]
100007a0:	3301      	adds	r3, #1
100007a2:	9307      	str	r3, [sp, #28]
	} while (loop);
100007a4:	e785      	b.n	100006b2 <cbvprintf+0x8a>
			conv->flag_space = true;
100007a6:	2401      	movs	r4, #1
100007a8:	e7f9      	b.n	1000079e <cbvprintf+0x176>
			conv->flag_hash = true;
100007aa:	2301      	movs	r3, #1
100007ac:	9303      	str	r3, [sp, #12]
100007ae:	e7f6      	b.n	1000079e <cbvprintf+0x176>
		switch (*sp) {
100007b0:	2101      	movs	r1, #1
100007b2:	e7f4      	b.n	1000079e <cbvprintf+0x176>
		val = 10U * val + *sp++ - '0';
100007b4:	002a      	movs	r2, r5
100007b6:	4361      	muls	r1, r4
100007b8:	3930      	subs	r1, #48	; 0x30
100007ba:	18c9      	adds	r1, r1, r3
100007bc:	7813      	ldrb	r3, [r2, #0]
100007be:	1c55      	adds	r5, r2, #1
100007c0:	0018      	movs	r0, r3
100007c2:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
100007c4:	2809      	cmp	r0, #9
100007c6:	d9f5      	bls.n	100007b4 <cbvprintf+0x18c>
	if (sp != wp) {
100007c8:	9b07      	ldr	r3, [sp, #28]
100007ca:	4293      	cmp	r3, r2
100007cc:	d0b9      	beq.n	10000742 <cbvprintf+0x11a>
		conv->unsupported |= ((conv->width_value < 0)
100007ce:	2402      	movs	r4, #2
		conv->width_value = width;
100007d0:	ab10      	add	r3, sp, #64	; 0x40
		conv->unsupported |= ((conv->width_value < 0)
100007d2:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
100007d4:	9113      	str	r1, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
100007d6:	0fc9      	lsrs	r1, r1, #31
		conv->unsupported |= ((conv->width_value < 0)
100007d8:	0049      	lsls	r1, r1, #1
100007da:	43a0      	bics	r0, r4
100007dc:	4301      	orrs	r1, r0
100007de:	7219      	strb	r1, [r3, #8]
100007e0:	e7af      	b.n	10000742 <cbvprintf+0x11a>
		conv->prec_star = true;
100007e2:	2104      	movs	r1, #4
100007e4:	7a43      	ldrb	r3, [r0, #9]
		return ++sp;
100007e6:	3202      	adds	r2, #2
		conv->prec_star = true;
100007e8:	430b      	orrs	r3, r1
100007ea:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
100007ec:	7811      	ldrb	r1, [r2, #0]
		if (*++sp == 'h') {
100007ee:	1c50      	adds	r0, r2, #1
100007f0:	ab10      	add	r3, sp, #64	; 0x40
	switch (*sp) {
100007f2:	296c      	cmp	r1, #108	; 0x6c
100007f4:	d041      	beq.n	1000087a <cbvprintf+0x252>
100007f6:	d825      	bhi.n	10000844 <cbvprintf+0x21c>
100007f8:	2968      	cmp	r1, #104	; 0x68
100007fa:	d02d      	beq.n	10000858 <cbvprintf+0x230>
100007fc:	296a      	cmp	r1, #106	; 0x6a
100007fe:	d048      	beq.n	10000892 <cbvprintf+0x26a>
10000800:	294c      	cmp	r1, #76	; 0x4c
10000802:	d052      	beq.n	100008aa <cbvprintf+0x282>
10000804:	0010      	movs	r0, r2
	conv->specifier = *sp++;
10000806:	7802      	ldrb	r2, [r0, #0]
10000808:	1c43      	adds	r3, r0, #1
1000080a:	a910      	add	r1, sp, #64	; 0x40
1000080c:	9307      	str	r3, [sp, #28]
1000080e:	72ca      	strb	r2, [r1, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000810:	7a4b      	ldrb	r3, [r1, #9]
	switch (conv->specifier) {
10000812:	2a78      	cmp	r2, #120	; 0x78
10000814:	d900      	bls.n	10000818 <cbvprintf+0x1f0>
10000816:	e0a8      	b.n	1000096a <cbvprintf+0x342>
10000818:	2a57      	cmp	r2, #87	; 0x57
1000081a:	d84d      	bhi.n	100008b8 <cbvprintf+0x290>
1000081c:	2a41      	cmp	r2, #65	; 0x41
1000081e:	d003      	beq.n	10000828 <cbvprintf+0x200>
10000820:	3a45      	subs	r2, #69	; 0x45
10000822:	2a02      	cmp	r2, #2
10000824:	d900      	bls.n	10000828 <cbvprintf+0x200>
10000826:	e0a0      	b.n	1000096a <cbvprintf+0x342>
		conv->specifier_cat = SPECIFIER_FP;
10000828:	2107      	movs	r1, #7
1000082a:	aa10      	add	r2, sp, #64	; 0x40
1000082c:	7a93      	ldrb	r3, [r2, #10]
1000082e:	438b      	bics	r3, r1
10000830:	3903      	subs	r1, #3
10000832:	430b      	orrs	r3, r1
10000834:	7293      	strb	r3, [r2, #10]
			unsupported = true;
10000836:	2301      	movs	r3, #1
			break;
10000838:	e06a      	b.n	10000910 <cbvprintf+0x2e8>
		val = 10U * val + *sp++ - '0';
1000083a:	436b      	muls	r3, r5
1000083c:	3b30      	subs	r3, #48	; 0x30
1000083e:	0022      	movs	r2, r4
10000840:	18cb      	adds	r3, r1, r3
10000842:	e792      	b.n	1000076a <cbvprintf+0x142>
	switch (*sp) {
10000844:	2974      	cmp	r1, #116	; 0x74
10000846:	d02a      	beq.n	1000089e <cbvprintf+0x276>
10000848:	297a      	cmp	r1, #122	; 0x7a
1000084a:	d1db      	bne.n	10000804 <cbvprintf+0x1dc>
		conv->length_mod = LENGTH_Z;
1000084c:	2178      	movs	r1, #120	; 0x78
1000084e:	7a5a      	ldrb	r2, [r3, #9]
10000850:	438a      	bics	r2, r1
10000852:	0011      	movs	r1, r2
10000854:	2230      	movs	r2, #48	; 0x30
10000856:	e00d      	b.n	10000874 <cbvprintf+0x24c>
		if (*++sp == 'h') {
10000858:	7851      	ldrb	r1, [r2, #1]
1000085a:	2478      	movs	r4, #120	; 0x78
1000085c:	2968      	cmp	r1, #104	; 0x68
1000085e:	d106      	bne.n	1000086e <cbvprintf+0x246>
			conv->length_mod = LENGTH_HH;
10000860:	7a58      	ldrb	r0, [r3, #9]
10000862:	3960      	subs	r1, #96	; 0x60
10000864:	43a0      	bics	r0, r4
			conv->length_mod = LENGTH_LL;
10000866:	4301      	orrs	r1, r0
10000868:	7259      	strb	r1, [r3, #9]
			++sp;
1000086a:	1c90      	adds	r0, r2, #2
1000086c:	e7cb      	b.n	10000806 <cbvprintf+0x1de>
			conv->length_mod = LENGTH_H;
1000086e:	2210      	movs	r2, #16
10000870:	7a59      	ldrb	r1, [r3, #9]
10000872:	43a1      	bics	r1, r4
		conv->length_mod = LENGTH_T;
10000874:	430a      	orrs	r2, r1
10000876:	725a      	strb	r2, [r3, #9]
		break;
10000878:	e7c5      	b.n	10000806 <cbvprintf+0x1de>
		if (*++sp == 'l') {
1000087a:	7851      	ldrb	r1, [r2, #1]
1000087c:	2478      	movs	r4, #120	; 0x78
1000087e:	296c      	cmp	r1, #108	; 0x6c
10000880:	d103      	bne.n	1000088a <cbvprintf+0x262>
			conv->length_mod = LENGTH_LL;
10000882:	7a58      	ldrb	r0, [r3, #9]
10000884:	394c      	subs	r1, #76	; 0x4c
10000886:	43a0      	bics	r0, r4
10000888:	e7ed      	b.n	10000866 <cbvprintf+0x23e>
			conv->length_mod = LENGTH_L;
1000088a:	7a59      	ldrb	r1, [r3, #9]
1000088c:	2218      	movs	r2, #24
1000088e:	43a1      	bics	r1, r4
10000890:	e7f0      	b.n	10000874 <cbvprintf+0x24c>
		conv->length_mod = LENGTH_J;
10000892:	2178      	movs	r1, #120	; 0x78
10000894:	7a5a      	ldrb	r2, [r3, #9]
10000896:	438a      	bics	r2, r1
10000898:	0011      	movs	r1, r2
1000089a:	2228      	movs	r2, #40	; 0x28
1000089c:	e7ea      	b.n	10000874 <cbvprintf+0x24c>
		conv->length_mod = LENGTH_T;
1000089e:	2178      	movs	r1, #120	; 0x78
100008a0:	7a5a      	ldrb	r2, [r3, #9]
100008a2:	438a      	bics	r2, r1
100008a4:	0011      	movs	r1, r2
100008a6:	2238      	movs	r2, #56	; 0x38
100008a8:	e7e4      	b.n	10000874 <cbvprintf+0x24c>
		conv->unsupported = true;
100008aa:	891a      	ldrh	r2, [r3, #8]
100008ac:	49aa      	ldr	r1, [pc, #680]	; (10000b58 <cbvprintf+0x530>)
100008ae:	4011      	ands	r1, r2
100008b0:	4aaa      	ldr	r2, [pc, #680]	; (10000b5c <cbvprintf+0x534>)
100008b2:	430a      	orrs	r2, r1
100008b4:	811a      	strh	r2, [r3, #8]
		break;
100008b6:	e7a6      	b.n	10000806 <cbvprintf+0x1de>
	switch (conv->specifier) {
100008b8:	0010      	movs	r0, r2
100008ba:	3858      	subs	r0, #88	; 0x58
100008bc:	2820      	cmp	r0, #32
100008be:	d854      	bhi.n	1000096a <cbvprintf+0x342>
100008c0:	f7ff fc72 	bl	100001a8 <__gnu_thumb1_case_sqi>
100008c4:	53535333 	.word	0x53535333
100008c8:	53535353 	.word	0x53535353
100008cc:	3353b253 	.word	0x3353b253
100008d0:	b2b2b211 	.word	0xb2b2b211
100008d4:	53531153 	.word	0x53531153
100008d8:	33395353 	.word	0x33395353
100008dc:	47535347 	.word	0x47535347
100008e0:	53533353 	.word	0x53533353
100008e4:	33          	.byte	0x33
100008e5:	00          	.byte	0x00
		conv->specifier_cat = SPECIFIER_SINT;
100008e6:	2407      	movs	r4, #7
100008e8:	7a88      	ldrb	r0, [r1, #10]
100008ea:	43a0      	bics	r0, r4
100008ec:	3c06      	subs	r4, #6
		conv->specifier_cat = SPECIFIER_UINT;
100008ee:	4320      	orrs	r0, r4
100008f0:	7288      	strb	r0, [r1, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100008f2:	2178      	movs	r1, #120	; 0x78
100008f4:	4019      	ands	r1, r3
100008f6:	2940      	cmp	r1, #64	; 0x40
100008f8:	d104      	bne.n	10000904 <cbvprintf+0x2dc>
			conv->invalid = true;
100008fa:	2401      	movs	r4, #1
100008fc:	a810      	add	r0, sp, #64	; 0x40
100008fe:	7a03      	ldrb	r3, [r0, #8]
10000900:	4323      	orrs	r3, r4
10000902:	7203      	strb	r3, [r0, #8]
	bool unsupported = false;
10000904:	2300      	movs	r3, #0
		if (conv->specifier == 'c') {
10000906:	2a63      	cmp	r2, #99	; 0x63
10000908:	d102      	bne.n	10000910 <cbvprintf+0x2e8>
			unsupported = (conv->length_mod != LENGTH_NONE);
1000090a:	1e4a      	subs	r2, r1, #1
1000090c:	4191      	sbcs	r1, r2
1000090e:	b2cb      	uxtb	r3, r1
	conv->unsupported |= unsupported;
10000910:	aa10      	add	r2, sp, #64	; 0x40
10000912:	7a11      	ldrb	r1, [r2, #8]
10000914:	0788      	lsls	r0, r1, #30
10000916:	0fc0      	lsrs	r0, r0, #31
10000918:	4303      	orrs	r3, r0
1000091a:	2001      	movs	r0, #1
1000091c:	4003      	ands	r3, r0
1000091e:	4083      	lsls	r3, r0
10000920:	1800      	adds	r0, r0, r0
10000922:	4381      	bics	r1, r0
10000924:	430b      	orrs	r3, r1
10000926:	7213      	strb	r3, [r2, #8]
	return sp;
10000928:	e6aa      	b.n	10000680 <cbvprintf+0x58>
		conv->specifier_cat = SPECIFIER_UINT;
1000092a:	2407      	movs	r4, #7
1000092c:	7a88      	ldrb	r0, [r1, #10]
1000092e:	43a0      	bics	r0, r4
10000930:	0004      	movs	r4, r0
10000932:	2002      	movs	r0, #2
10000934:	e7db      	b.n	100008ee <cbvprintf+0x2c6>
		conv->specifier_cat = SPECIFIER_PTR;
10000936:	2007      	movs	r0, #7
10000938:	7a8a      	ldrb	r2, [r1, #10]
1000093a:	4382      	bics	r2, r0
1000093c:	0010      	movs	r0, r2
1000093e:	2203      	movs	r2, #3
10000940:	4302      	orrs	r2, r0
10000942:	728a      	strb	r2, [r1, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000944:	2278      	movs	r2, #120	; 0x78
10000946:	4013      	ands	r3, r2
10000948:	3b40      	subs	r3, #64	; 0x40
1000094a:	425a      	negs	r2, r3
1000094c:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
1000094e:	b2db      	uxtb	r3, r3
10000950:	e7de      	b.n	10000910 <cbvprintf+0x2e8>
		conv->specifier_cat = SPECIFIER_PTR;
10000952:	2007      	movs	r0, #7
10000954:	7a8a      	ldrb	r2, [r1, #10]
10000956:	4382      	bics	r2, r0
10000958:	0010      	movs	r0, r2
1000095a:	2203      	movs	r2, #3
1000095c:	4302      	orrs	r2, r0
1000095e:	728a      	strb	r2, [r1, #10]
		if (conv->length_mod != LENGTH_NONE) {
10000960:	2278      	movs	r2, #120	; 0x78
10000962:	4013      	ands	r3, r2
10000964:	1e5a      	subs	r2, r3, #1
10000966:	4193      	sbcs	r3, r2
10000968:	e7f1      	b.n	1000094e <cbvprintf+0x326>
		conv->invalid = true;
1000096a:	2101      	movs	r1, #1
1000096c:	aa10      	add	r2, sp, #64	; 0x40
1000096e:	7a13      	ldrb	r3, [r2, #8]
10000970:	430b      	orrs	r3, r1
10000972:	7213      	strb	r3, [r2, #8]
	bool unsupported = false;
10000974:	2300      	movs	r3, #0
		break;
10000976:	e7cb      	b.n	10000910 <cbvprintf+0x2e8>
		} else if (conv->width_present) {
10000978:	7a1a      	ldrb	r2, [r3, #8]
1000097a:	2a7f      	cmp	r2, #127	; 0x7f
1000097c:	d910      	bls.n	100009a0 <cbvprintf+0x378>
			width = conv->width_value;
1000097e:	0034      	movs	r4, r6
10000980:	68db      	ldr	r3, [r3, #12]
10000982:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
10000984:	2304      	movs	r3, #4
10000986:	aa10      	add	r2, sp, #64	; 0x40
10000988:	4219      	tst	r1, r3
1000098a:	d00c      	beq.n	100009a6 <cbvprintf+0x37e>
			int arg = va_arg(ap, int);
1000098c:	cc40      	ldmia	r4!, {r6}
			if (arg < 0) {
1000098e:	2e00      	cmp	r6, #0
10000990:	da0c      	bge.n	100009ac <cbvprintf+0x384>
				conv->prec_present = false;
10000992:	2102      	movs	r1, #2
10000994:	7a53      	ldrb	r3, [r2, #9]
10000996:	438b      	bics	r3, r1
10000998:	7253      	strb	r3, [r2, #9]
		int precision = -1;
1000099a:	2601      	movs	r6, #1
1000099c:	4276      	negs	r6, r6
1000099e:	e005      	b.n	100009ac <cbvprintf+0x384>
100009a0:	0034      	movs	r4, r6
		int width = -1;
100009a2:	2301      	movs	r3, #1
100009a4:	e67d      	b.n	100006a2 <cbvprintf+0x7a>
		} else if (conv->prec_present) {
100009a6:	078b      	lsls	r3, r1, #30
100009a8:	d5f7      	bpl.n	1000099a <cbvprintf+0x372>
			precision = conv->prec_value;
100009aa:	6916      	ldr	r6, [r2, #16]
		conv->pad0_value = 0;
100009ac:	2500      	movs	r5, #0
100009ae:	aa10      	add	r2, sp, #64	; 0x40
			= (enum length_mod_enum)conv->length_mod;
100009b0:	7a51      	ldrb	r1, [r2, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
100009b2:	7a93      	ldrb	r3, [r2, #10]
			= (enum length_mod_enum)conv->length_mod;
100009b4:	0649      	lsls	r1, r1, #25
			= (enum specifier_cat_enum)conv->specifier_cat;
100009b6:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
100009b8:	0f09      	lsrs	r1, r1, #28
		enum specifier_cat_enum specifier_cat
100009ba:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
100009bc:	9104      	str	r1, [sp, #16]
		conv->pad0_value = 0;
100009be:	60d5      	str	r5, [r2, #12]
		conv->pad0_pre_exp = 0;
100009c0:	6115      	str	r5, [r2, #16]
		if (specifier_cat == SPECIFIER_SINT) {
100009c2:	2b01      	cmp	r3, #1
100009c4:	d13a      	bne.n	10000a3c <cbvprintf+0x414>
			switch (length_mod) {
100009c6:	1ec8      	subs	r0, r1, #3
100009c8:	2804      	cmp	r0, #4
100009ca:	d821      	bhi.n	10000a10 <cbvprintf+0x3e8>
100009cc:	f7ff fbf6 	bl	100001bc <__gnu_thumb1_case_uqi>
100009d0:	20191903 	.word	0x20191903
100009d4:	20          	.byte	0x20
100009d5:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
100009d6:	cc08      	ldmia	r4!, {r3}
100009d8:	6013      	str	r3, [r2, #0]
100009da:	17db      	asrs	r3, r3, #31
100009dc:	6053      	str	r3, [r2, #4]
		if (conv->invalid || conv->unsupported) {
100009de:	aa10      	add	r2, sp, #64	; 0x40
100009e0:	7a13      	ldrb	r3, [r2, #8]
100009e2:	2003      	movs	r0, #3
100009e4:	001d      	movs	r5, r3
100009e6:	4005      	ands	r5, r0
100009e8:	4203      	tst	r3, r0
100009ea:	d069      	beq.n	10000ac0 <cbvprintf+0x498>
			OUTS(sp, fp);
100009ec:	9b07      	ldr	r3, [sp, #28]
100009ee:	9a08      	ldr	r2, [sp, #32]
100009f0:	9906      	ldr	r1, [sp, #24]
100009f2:	9805      	ldr	r0, [sp, #20]
100009f4:	f002 f912 	bl	10002c1c <outs>
100009f8:	2800      	cmp	r0, #0
100009fa:	da00      	bge.n	100009fe <cbvprintf+0x3d6>
100009fc:	e14f      	b.n	10000c9e <cbvprintf+0x676>
100009fe:	183f      	adds	r7, r7, r0
			continue;
10000a00:	e62c      	b.n	1000065c <cbvprintf+0x34>
					(sint_value_type)va_arg(ap, intmax_t);
10000a02:	2307      	movs	r3, #7
10000a04:	3407      	adds	r4, #7
10000a06:	439c      	bics	r4, r3
				value->sint =
10000a08:	cc0c      	ldmia	r4!, {r2, r3}
10000a0a:	9210      	str	r2, [sp, #64]	; 0x40
10000a0c:	9311      	str	r3, [sp, #68]	; 0x44
				break;
10000a0e:	e7e6      	b.n	100009de <cbvprintf+0x3b6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
10000a10:	cc01      	ldmia	r4!, {r0}
10000a12:	ab10      	add	r3, sp, #64	; 0x40
10000a14:	6010      	str	r0, [r2, #0]
10000a16:	17c0      	asrs	r0, r0, #31
10000a18:	6050      	str	r0, [r2, #4]
			if (length_mod == LENGTH_HH) {
10000a1a:	9a04      	ldr	r2, [sp, #16]
10000a1c:	2a01      	cmp	r2, #1
10000a1e:	d105      	bne.n	10000a2c <cbvprintf+0x404>
				value->sint = (char)value->sint;
10000a20:	9a10      	ldr	r2, [sp, #64]	; 0x40
10000a22:	b2d2      	uxtb	r2, r2
10000a24:	9210      	str	r2, [sp, #64]	; 0x40
10000a26:	2200      	movs	r2, #0
				value->sint = (short)value->sint;
10000a28:	605a      	str	r2, [r3, #4]
10000a2a:	e7d8      	b.n	100009de <cbvprintf+0x3b6>
			} else if (length_mod == LENGTH_H) {
10000a2c:	9a04      	ldr	r2, [sp, #16]
10000a2e:	2a02      	cmp	r2, #2
10000a30:	d1d5      	bne.n	100009de <cbvprintf+0x3b6>
				value->sint = (short)value->sint;
10000a32:	2100      	movs	r1, #0
10000a34:	5e5a      	ldrsh	r2, [r3, r1]
10000a36:	601a      	str	r2, [r3, #0]
10000a38:	17d2      	asrs	r2, r2, #31
10000a3a:	e7f5      	b.n	10000a28 <cbvprintf+0x400>
		} else if (specifier_cat == SPECIFIER_UINT) {
10000a3c:	2b02      	cmp	r3, #2
10000a3e:	d12e      	bne.n	10000a9e <cbvprintf+0x476>
			switch (length_mod) {
10000a40:	9b04      	ldr	r3, [sp, #16]
10000a42:	1ed8      	subs	r0, r3, #3
10000a44:	2804      	cmp	r0, #4
10000a46:	d805      	bhi.n	10000a54 <cbvprintf+0x42c>
10000a48:	0015      	movs	r5, r2
10000a4a:	f7ff fbb7 	bl	100001bc <__gnu_thumb1_case_uqi>
10000a4e:	140e      	.short	0x140e
10000a50:	1b14      	.short	0x1b14
10000a52:	1b          	.byte	0x1b
10000a53:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
10000a54:	cc08      	ldmia	r4!, {r3}
10000a56:	c228      	stmia	r2!, {r3, r5}
			if (length_mod == LENGTH_HH) {
10000a58:	9b04      	ldr	r3, [sp, #16]
10000a5a:	2b01      	cmp	r3, #1
10000a5c:	d117      	bne.n	10000a8e <cbvprintf+0x466>
				value->uint = (unsigned char)value->uint;
10000a5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
10000a60:	b2db      	uxtb	r3, r3
				value->uint = (unsigned short)value->uint;
10000a62:	9310      	str	r3, [sp, #64]	; 0x40
10000a64:	2300      	movs	r3, #0
10000a66:	9311      	str	r3, [sp, #68]	; 0x44
10000a68:	e7b9      	b.n	100009de <cbvprintf+0x3b6>
				if ((!WCHAR_IS_SIGNED)
10000a6a:	2300      	movs	r3, #0
					value->uint = va_arg(ap, unsigned long);
10000a6c:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
10000a6e:	1d20      	adds	r0, r4, #4
					value->uint = va_arg(ap, unsigned long);
10000a70:	c50c      	stmia	r5!, {r2, r3}
					(uint_value_type)va_arg(ap, size_t);
10000a72:	0004      	movs	r4, r0
10000a74:	e7b3      	b.n	100009de <cbvprintf+0x3b6>
					(uint_value_type)va_arg(ap,
10000a76:	2307      	movs	r3, #7
10000a78:	1de0      	adds	r0, r4, #7
10000a7a:	4398      	bics	r0, r3
				value->uint =
10000a7c:	c80c      	ldmia	r0!, {r2, r3}
10000a7e:	9210      	str	r2, [sp, #64]	; 0x40
10000a80:	9311      	str	r3, [sp, #68]	; 0x44
				break;
10000a82:	e7f6      	b.n	10000a72 <cbvprintf+0x44a>
					(uint_value_type)va_arg(ap, size_t);
10000a84:	cc08      	ldmia	r4!, {r3}
10000a86:	6013      	str	r3, [r2, #0]
10000a88:	2300      	movs	r3, #0
10000a8a:	6053      	str	r3, [r2, #4]
				break;
10000a8c:	e7e4      	b.n	10000a58 <cbvprintf+0x430>
			} else if (length_mod == LENGTH_H) {
10000a8e:	9b04      	ldr	r3, [sp, #16]
10000a90:	2b02      	cmp	r3, #2
10000a92:	d1a4      	bne.n	100009de <cbvprintf+0x3b6>
				value->uint = (unsigned short)value->uint;
10000a94:	9b10      	ldr	r3, [sp, #64]	; 0x40
10000a96:	9309      	str	r3, [sp, #36]	; 0x24
10000a98:	466b      	mov	r3, sp
10000a9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
10000a9c:	e7e1      	b.n	10000a62 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_FP) {
10000a9e:	2b04      	cmp	r3, #4
10000aa0:	d109      	bne.n	10000ab6 <cbvprintf+0x48e>
					(sint_value_type)va_arg(ap, long long);
10000aa2:	2007      	movs	r0, #7
10000aa4:	1de3      	adds	r3, r4, #7
10000aa6:	4383      	bics	r3, r0
10000aa8:	001c      	movs	r4, r3
				value->dbl = va_arg(ap, double);
10000aaa:	6818      	ldr	r0, [r3, #0]
10000aac:	6859      	ldr	r1, [r3, #4]
					(sint_value_type)va_arg(ap, long long);
10000aae:	3408      	adds	r4, #8
				value->dbl = va_arg(ap, double);
10000ab0:	6010      	str	r0, [r2, #0]
10000ab2:	6051      	str	r1, [r2, #4]
10000ab4:	e793      	b.n	100009de <cbvprintf+0x3b6>
		} else if (specifier_cat == SPECIFIER_PTR) {
10000ab6:	2b03      	cmp	r3, #3
10000ab8:	d191      	bne.n	100009de <cbvprintf+0x3b6>
			value->ptr = va_arg(ap, void *);
10000aba:	cc08      	ldmia	r4!, {r3}
10000abc:	6013      	str	r3, [r2, #0]
10000abe:	e78e      	b.n	100009de <cbvprintf+0x3b6>
		switch (conv->specifier) {
10000ac0:	7ad0      	ldrb	r0, [r2, #11]
10000ac2:	2878      	cmp	r0, #120	; 0x78
10000ac4:	d900      	bls.n	10000ac8 <cbvprintf+0x4a0>
10000ac6:	e5c9      	b.n	1000065c <cbvprintf+0x34>
10000ac8:	2862      	cmp	r0, #98	; 0x62
10000aca:	d821      	bhi.n	10000b10 <cbvprintf+0x4e8>
10000acc:	2825      	cmp	r0, #37	; 0x25
10000ace:	d03b      	beq.n	10000b48 <cbvprintf+0x520>
10000ad0:	2858      	cmp	r0, #88	; 0x58
10000ad2:	d000      	beq.n	10000ad6 <cbvprintf+0x4ae>
10000ad4:	e5c2      	b.n	1000065c <cbvprintf+0x34>
			bps = encode_uint(value->uint, conv, buf, bpe);
10000ad6:	9810      	ldr	r0, [sp, #64]	; 0x40
10000ad8:	9911      	ldr	r1, [sp, #68]	; 0x44
10000ada:	231e      	movs	r3, #30
10000adc:	aa08      	add	r2, sp, #32
10000ade:	189b      	adds	r3, r3, r2
10000ae0:	9300      	str	r3, [sp, #0]
10000ae2:	aa12      	add	r2, sp, #72	; 0x48
10000ae4:	ab0a      	add	r3, sp, #40	; 0x28
10000ae6:	f002 f84d 	bl	10002b84 <encode_uint>
10000aea:	9004      	str	r0, [sp, #16]
			if (precision >= 0) {
10000aec:	231e      	movs	r3, #30
10000aee:	aa08      	add	r2, sp, #32
10000af0:	189b      	adds	r3, r3, r2
10000af2:	9308      	str	r3, [sp, #32]
10000af4:	2e00      	cmp	r6, #0
10000af6:	db3f      	blt.n	10000b78 <cbvprintf+0x550>
				conv->flag_zero = false;
10000af8:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
10000afa:	9a04      	ldr	r2, [sp, #16]
10000afc:	1a9b      	subs	r3, r3, r2
				conv->flag_zero = false;
10000afe:	aa10      	add	r2, sp, #64	; 0x40
10000b00:	7a11      	ldrb	r1, [r2, #8]
10000b02:	4381      	bics	r1, r0
10000b04:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
10000b06:	429e      	cmp	r6, r3
10000b08:	d936      	bls.n	10000b78 <cbvprintf+0x550>
					conv->pad0_value = precision - (int)len;
10000b0a:	1af3      	subs	r3, r6, r3
10000b0c:	9313      	str	r3, [sp, #76]	; 0x4c
10000b0e:	e033      	b.n	10000b78 <cbvprintf+0x550>
		switch (conv->specifier) {
10000b10:	3863      	subs	r0, #99	; 0x63
10000b12:	2815      	cmp	r0, #21
10000b14:	d900      	bls.n	10000b18 <cbvprintf+0x4f0>
10000b16:	e5a1      	b.n	1000065c <cbvprintf+0x34>
10000b18:	f7ff fb5a 	bl	100001d0 <__gnu_thumb1_case_shi>
10000b1c:	006f0065 	.word	0x006f0065
10000b20:	fda0fda0 	.word	0xfda0fda0
10000b24:	fda0fda0 	.word	0xfda0fda0
10000b28:	fda0006f 	.word	0xfda0006f
10000b2c:	fda0fda0 	.word	0xfda0fda0
10000b30:	009cfda0 	.word	0x009cfda0
10000b34:	00860084 	.word	0x00860084
10000b38:	fda0fda0 	.word	0xfda0fda0
10000b3c:	fda00022 	.word	0xfda00022
10000b40:	fda00084 	.word	0xfda00084
10000b44:	0084fda0 	.word	0x0084fda0
			OUTC('%');
10000b48:	9906      	ldr	r1, [sp, #24]
10000b4a:	9b05      	ldr	r3, [sp, #20]
10000b4c:	4798      	blx	r3
10000b4e:	2800      	cmp	r0, #0
10000b50:	da00      	bge.n	10000b54 <cbvprintf+0x52c>
10000b52:	e0a4      	b.n	10000c9e <cbvprintf+0x676>
10000b54:	3701      	adds	r7, #1
			break;
10000b56:	e581      	b.n	1000065c <cbvprintf+0x34>
10000b58:	ffff87fd 	.word	0xffff87fd
10000b5c:	00004002 	.word	0x00004002
			bps = (const char *)value->ptr;
10000b60:	9b10      	ldr	r3, [sp, #64]	; 0x40
10000b62:	9304      	str	r3, [sp, #16]
			if (precision >= 0) {
10000b64:	2e00      	cmp	r6, #0
10000b66:	db3a      	blt.n	10000bde <cbvprintf+0x5b6>
				len = strnlen(bps, precision);
10000b68:	0031      	movs	r1, r6
10000b6a:	0018      	movs	r0, r3
10000b6c:	f002 f88c 	bl	10002c88 <strnlen>
		char sign = 0;
10000b70:	2500      	movs	r5, #0
			bpe = bps + len;
10000b72:	9b04      	ldr	r3, [sp, #16]
10000b74:	181b      	adds	r3, r3, r0
10000b76:	9308      	str	r3, [sp, #32]
		if (bps == NULL) {
10000b78:	9b04      	ldr	r3, [sp, #16]
10000b7a:	2b00      	cmp	r3, #0
10000b7c:	d100      	bne.n	10000b80 <cbvprintf+0x558>
10000b7e:	e56d      	b.n	1000065c <cbvprintf+0x34>
		size_t nj_len = (bpe - bps);
10000b80:	9b08      	ldr	r3, [sp, #32]
10000b82:	9a04      	ldr	r2, [sp, #16]
10000b84:	1a9e      	subs	r6, r3, r2
			nj_len += 1U;
10000b86:	002b      	movs	r3, r5
10000b88:	1e5a      	subs	r2, r3, #1
10000b8a:	4193      	sbcs	r3, r2
10000b8c:	18f6      	adds	r6, r6, r3
		if (conv->altform_0c) {
10000b8e:	ab10      	add	r3, sp, #64	; 0x40
10000b90:	7a9b      	ldrb	r3, [r3, #10]
10000b92:	06da      	lsls	r2, r3, #27
10000b94:	d579      	bpl.n	10000c8a <cbvprintf+0x662>
			nj_len += 2U;
10000b96:	3602      	adds	r6, #2
		nj_len += conv->pad0_value;
10000b98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10000b9a:	9209      	str	r2, [sp, #36]	; 0x24
10000b9c:	18b6      	adds	r6, r6, r2
		if (conv->pad_fp) {
10000b9e:	065b      	lsls	r3, r3, #25
10000ba0:	d501      	bpl.n	10000ba6 <cbvprintf+0x57e>
			nj_len += conv->pad0_pre_exp;
10000ba2:	9b14      	ldr	r3, [sp, #80]	; 0x50
10000ba4:	18f6      	adds	r6, r6, r3
		if (width > 0) {
10000ba6:	9b03      	ldr	r3, [sp, #12]
10000ba8:	2b00      	cmp	r3, #0
10000baa:	dc00      	bgt.n	10000bae <cbvprintf+0x586>
10000bac:	e086      	b.n	10000cbc <cbvprintf+0x694>
			width -= (int)nj_len;
10000bae:	1b9b      	subs	r3, r3, r6
10000bb0:	9309      	str	r3, [sp, #36]	; 0x24
			if (!conv->flag_dash) {
10000bb2:	ab10      	add	r3, sp, #64	; 0x40
10000bb4:	7a1b      	ldrb	r3, [r3, #8]
10000bb6:	075a      	lsls	r2, r3, #29
10000bb8:	0fd6      	lsrs	r6, r2, #31
10000bba:	2a00      	cmp	r2, #0
10000bbc:	da00      	bge.n	10000bc0 <cbvprintf+0x598>
10000bbe:	e0bc      	b.n	10000d3a <cbvprintf+0x712>
				if (conv->flag_zero) {
10000bc0:	065b      	lsls	r3, r3, #25
10000bc2:	d400      	bmi.n	10000bc6 <cbvprintf+0x59e>
10000bc4:	e06d      	b.n	10000ca2 <cbvprintf+0x67a>
					if (sign != 0) {
10000bc6:	2d00      	cmp	r5, #0
10000bc8:	d007      	beq.n	10000bda <cbvprintf+0x5b2>
						OUTC(sign);
10000bca:	0028      	movs	r0, r5
10000bcc:	9906      	ldr	r1, [sp, #24]
10000bce:	9b05      	ldr	r3, [sp, #20]
10000bd0:	4798      	blx	r3
10000bd2:	2800      	cmp	r0, #0
10000bd4:	db63      	blt.n	10000c9e <cbvprintf+0x676>
						sign = 0;
10000bd6:	0035      	movs	r5, r6
						OUTC(sign);
10000bd8:	3701      	adds	r7, #1
					pad = '0';
10000bda:	2630      	movs	r6, #48	; 0x30
10000bdc:	e062      	b.n	10000ca4 <cbvprintf+0x67c>
				len = strlen(bps);
10000bde:	9804      	ldr	r0, [sp, #16]
10000be0:	f002 f84a 	bl	10002c78 <strlen>
10000be4:	e7c4      	b.n	10000b70 <cbvprintf+0x548>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
10000be6:	9b10      	ldr	r3, [sp, #64]	; 0x40
10000be8:	a80a      	add	r0, sp, #40	; 0x28
10000bea:	7003      	strb	r3, [r0, #0]
			bpe = buf + 1;
10000bec:	2309      	movs	r3, #9
			break;
10000bee:	2500      	movs	r5, #0
			bpe = buf + 1;
10000bf0:	aa08      	add	r2, sp, #32
			bps = buf;
10000bf2:	9004      	str	r0, [sp, #16]
			bpe = buf + 1;
10000bf4:	189b      	adds	r3, r3, r2
			bpe = bps + 5;
10000bf6:	9308      	str	r3, [sp, #32]
10000bf8:	e7c2      	b.n	10000b80 <cbvprintf+0x558>
				sign = '+';
10000bfa:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
10000bfc:	071a      	lsls	r2, r3, #28
10000bfe:	d405      	bmi.n	10000c0c <cbvprintf+0x5e4>
			} else if (conv->flag_space) {
10000c00:	2210      	movs	r2, #16
10000c02:	001d      	movs	r5, r3
10000c04:	4015      	ands	r5, r2
10000c06:	4213      	tst	r3, r2
10000c08:	d000      	beq.n	10000c0c <cbvprintf+0x5e4>
				sign = ' ';
10000c0a:	2520      	movs	r5, #32
			sint = value->sint;
10000c0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
10000c0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
			if (sint < 0) {
10000c10:	2b00      	cmp	r3, #0
10000c12:	db00      	blt.n	10000c16 <cbvprintf+0x5ee>
10000c14:	e75f      	b.n	10000ad6 <cbvprintf+0x4ae>
				value->uint = (uint_value_type)-sint;
10000c16:	2100      	movs	r1, #0
10000c18:	4250      	negs	r0, r2
10000c1a:	4199      	sbcs	r1, r3
				sign = '-';
10000c1c:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
10000c1e:	9010      	str	r0, [sp, #64]	; 0x40
10000c20:	9111      	str	r1, [sp, #68]	; 0x44
10000c22:	e758      	b.n	10000ad6 <cbvprintf+0x4ae>
		switch (conv->specifier) {
10000c24:	2500      	movs	r5, #0
10000c26:	e756      	b.n	10000ad6 <cbvprintf+0x4ae>
			if (value->ptr != NULL) {
10000c28:	9810      	ldr	r0, [sp, #64]	; 0x40
10000c2a:	ad10      	add	r5, sp, #64	; 0x40
10000c2c:	2800      	cmp	r0, #0
10000c2e:	d027      	beq.n	10000c80 <cbvprintf+0x658>
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000c30:	231e      	movs	r3, #30
10000c32:	aa08      	add	r2, sp, #32
10000c34:	189b      	adds	r3, r3, r2
10000c36:	9300      	str	r3, [sp, #0]
10000c38:	aa12      	add	r2, sp, #72	; 0x48
10000c3a:	ab0a      	add	r3, sp, #40	; 0x28
10000c3c:	2100      	movs	r1, #0
10000c3e:	f001 ffa1 	bl	10002b84 <encode_uint>
				conv->altform_0c = true;
10000c42:	22ef      	movs	r2, #239	; 0xef
10000c44:	896b      	ldrh	r3, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000c46:	9004      	str	r0, [sp, #16]
				conv->altform_0c = true;
10000c48:	401a      	ands	r2, r3
10000c4a:	4b41      	ldr	r3, [pc, #260]	; (10000d50 <cbvprintf+0x728>)
10000c4c:	4313      	orrs	r3, r2
10000c4e:	816b      	strh	r3, [r5, #10]
		char sign = 0;
10000c50:	2500      	movs	r5, #0
				goto prec_int_pad0;
10000c52:	e74b      	b.n	10000aec <cbvprintf+0x4c4>
				store_count(conv, value->ptr, count);
10000c54:	6813      	ldr	r3, [r2, #0]
	switch ((enum length_mod_enum)conv->length_mod) {
10000c56:	9a04      	ldr	r2, [sp, #16]
10000c58:	2a07      	cmp	r2, #7
10000c5a:	d900      	bls.n	10000c5e <cbvprintf+0x636>
10000c5c:	e4fe      	b.n	1000065c <cbvprintf+0x34>
10000c5e:	0010      	movs	r0, r2
10000c60:	f7ff faac 	bl	100001bc <__gnu_thumb1_case_uqi>
10000c64:	0c06040c 	.word	0x0c06040c
10000c68:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
10000c6c:	701f      	strb	r7, [r3, #0]
		break;
10000c6e:	e4f5      	b.n	1000065c <cbvprintf+0x34>
		*(short *)dp = (short)count;
10000c70:	801f      	strh	r7, [r3, #0]
		break;
10000c72:	e4f3      	b.n	1000065c <cbvprintf+0x34>
		*(intmax_t *)dp = (intmax_t)count;
10000c74:	17fa      	asrs	r2, r7, #31
10000c76:	601f      	str	r7, [r3, #0]
10000c78:	605a      	str	r2, [r3, #4]
		break;
10000c7a:	e4ef      	b.n	1000065c <cbvprintf+0x34>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
10000c7c:	601f      	str	r7, [r3, #0]
		break;
10000c7e:	e4ed      	b.n	1000065c <cbvprintf+0x34>
			bps = "(nil)";
10000c80:	4b34      	ldr	r3, [pc, #208]	; (10000d54 <cbvprintf+0x72c>)
10000c82:	0005      	movs	r5, r0
10000c84:	9304      	str	r3, [sp, #16]
			bpe = bps + 5;
10000c86:	4b34      	ldr	r3, [pc, #208]	; (10000d58 <cbvprintf+0x730>)
10000c88:	e7b5      	b.n	10000bf6 <cbvprintf+0x5ce>
		} else if (conv->altform_0) {
10000c8a:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
10000c8c:	0fd2      	lsrs	r2, r2, #31
10000c8e:	18b6      	adds	r6, r6, r2
10000c90:	e782      	b.n	10000b98 <cbvprintf+0x570>
					OUTC(pad);
10000c92:	0030      	movs	r0, r6
10000c94:	9906      	ldr	r1, [sp, #24]
10000c96:	9b05      	ldr	r3, [sp, #20]
10000c98:	4798      	blx	r3
10000c9a:	2800      	cmp	r0, #0
10000c9c:	da04      	bge.n	10000ca8 <cbvprintf+0x680>
#undef OUTS
#undef OUTC
}
10000c9e:	b017      	add	sp, #92	; 0x5c
10000ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
10000ca2:	2620      	movs	r6, #32
					pad = '0';
10000ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
10000ca6:	9303      	str	r3, [sp, #12]
10000ca8:	9a03      	ldr	r2, [sp, #12]
10000caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
				while (width-- > 0) {
10000cac:	0011      	movs	r1, r2
10000cae:	19db      	adds	r3, r3, r7
10000cb0:	3901      	subs	r1, #1
10000cb2:	1a9b      	subs	r3, r3, r2
10000cb4:	9103      	str	r1, [sp, #12]
10000cb6:	2a00      	cmp	r2, #0
10000cb8:	dceb      	bgt.n	10000c92 <cbvprintf+0x66a>
10000cba:	001f      	movs	r7, r3
		if (sign != 0) {
10000cbc:	2d00      	cmp	r5, #0
10000cbe:	d006      	beq.n	10000cce <cbvprintf+0x6a6>
			OUTC(sign);
10000cc0:	0028      	movs	r0, r5
10000cc2:	9906      	ldr	r1, [sp, #24]
10000cc4:	9b05      	ldr	r3, [sp, #20]
10000cc6:	4798      	blx	r3
10000cc8:	2800      	cmp	r0, #0
10000cca:	dbe8      	blt.n	10000c9e <cbvprintf+0x676>
10000ccc:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
10000cce:	ab10      	add	r3, sp, #64	; 0x40
10000cd0:	7a9b      	ldrb	r3, [r3, #10]
10000cd2:	06da      	lsls	r2, r3, #27
10000cd4:	d401      	bmi.n	10000cda <cbvprintf+0x6b2>
10000cd6:	071b      	lsls	r3, r3, #28
10000cd8:	d506      	bpl.n	10000ce8 <cbvprintf+0x6c0>
				OUTC('0');
10000cda:	2030      	movs	r0, #48	; 0x30
10000cdc:	9906      	ldr	r1, [sp, #24]
10000cde:	9b05      	ldr	r3, [sp, #20]
10000ce0:	4798      	blx	r3
10000ce2:	2800      	cmp	r0, #0
10000ce4:	dbdb      	blt.n	10000c9e <cbvprintf+0x676>
10000ce6:	3701      	adds	r7, #1
			if (conv->altform_0c) {
10000ce8:	ab10      	add	r3, sp, #64	; 0x40
10000cea:	7a9a      	ldrb	r2, [r3, #10]
10000cec:	06d2      	lsls	r2, r2, #27
10000cee:	d506      	bpl.n	10000cfe <cbvprintf+0x6d6>
				OUTC(conv->specifier);
10000cf0:	7ad8      	ldrb	r0, [r3, #11]
10000cf2:	9906      	ldr	r1, [sp, #24]
10000cf4:	9b05      	ldr	r3, [sp, #20]
10000cf6:	4798      	blx	r3
10000cf8:	2800      	cmp	r0, #0
10000cfa:	dbd0      	blt.n	10000c9e <cbvprintf+0x676>
10000cfc:	3701      	adds	r7, #1
			while (pad_len-- > 0) {
10000cfe:	003d      	movs	r5, r7
			pad_len = conv->pad0_value;
10000d00:	9e13      	ldr	r6, [sp, #76]	; 0x4c
			while (pad_len-- > 0) {
10000d02:	19f3      	adds	r3, r6, r7
10000d04:	1b5b      	subs	r3, r3, r5
10000d06:	2b00      	cmp	r3, #0
10000d08:	dc1a      	bgt.n	10000d40 <cbvprintf+0x718>
			OUTS(bps, bpe);
10000d0a:	9b08      	ldr	r3, [sp, #32]
10000d0c:	9a04      	ldr	r2, [sp, #16]
10000d0e:	9906      	ldr	r1, [sp, #24]
10000d10:	9805      	ldr	r0, [sp, #20]
10000d12:	f001 ff83 	bl	10002c1c <outs>
10000d16:	2800      	cmp	r0, #0
10000d18:	dbc1      	blt.n	10000c9e <cbvprintf+0x676>
10000d1a:	1947      	adds	r7, r0, r5
10000d1c:	003d      	movs	r5, r7
		while (width > 0) {
10000d1e:	9b03      	ldr	r3, [sp, #12]
10000d20:	195b      	adds	r3, r3, r5
10000d22:	1bdb      	subs	r3, r3, r7
10000d24:	2b00      	cmp	r3, #0
10000d26:	dc00      	bgt.n	10000d2a <cbvprintf+0x702>
10000d28:	e498      	b.n	1000065c <cbvprintf+0x34>
			OUTC(' ');
10000d2a:	2020      	movs	r0, #32
10000d2c:	9906      	ldr	r1, [sp, #24]
10000d2e:	9b05      	ldr	r3, [sp, #20]
10000d30:	4798      	blx	r3
10000d32:	2800      	cmp	r0, #0
10000d34:	dbb3      	blt.n	10000c9e <cbvprintf+0x676>
10000d36:	3701      	adds	r7, #1
			--width;
10000d38:	e7f1      	b.n	10000d1e <cbvprintf+0x6f6>
			width -= (int)nj_len;
10000d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10000d3c:	9303      	str	r3, [sp, #12]
10000d3e:	e7bd      	b.n	10000cbc <cbvprintf+0x694>
				OUTC('0');
10000d40:	2030      	movs	r0, #48	; 0x30
10000d42:	9906      	ldr	r1, [sp, #24]
10000d44:	9b05      	ldr	r3, [sp, #20]
10000d46:	4798      	blx	r3
10000d48:	2800      	cmp	r0, #0
10000d4a:	dba8      	blt.n	10000c9e <cbvprintf+0x676>
10000d4c:	3501      	adds	r5, #1
10000d4e:	e7d8      	b.n	10000d02 <cbvprintf+0x6da>
10000d50:	00007810 	.word	0x00007810
10000d54:	10003a77 	.word	0x10003a77
10000d58:	10003a7c 	.word	0x10003a7c

10000d5c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10000d5c:	4901      	ldr	r1, [pc, #4]	; (10000d64 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10000d5e:	2210      	movs	r2, #16
	str	r2, [r1]
10000d60:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
10000d62:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
10000d64:	e000ed10 	.word	0xe000ed10

10000d68 <arch_cpu_idle>:

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
10000d68:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
10000d6c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10000d6e:	b662      	cpsie	i
	isb
10000d70:	f3bf 8f6f 	isb	sy

	bx	lr
10000d74:	4770      	bx	lr
10000d76:	46c0      	nop			; (mov r8, r8)

10000d78 <arch_irq_enable>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
10000d78:	0603      	lsls	r3, r0, #24
10000d7a:	d405      	bmi.n	10000d88 <arch_irq_enable+0x10>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10000d7c:	231f      	movs	r3, #31
10000d7e:	4018      	ands	r0, r3
10000d80:	3b1e      	subs	r3, #30
10000d82:	4083      	lsls	r3, r0
10000d84:	4a01      	ldr	r2, [pc, #4]	; (10000d8c <arch_irq_enable+0x14>)
10000d86:	6013      	str	r3, [r2, #0]
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
}
10000d88:	4770      	bx	lr
10000d8a:	46c0      	nop			; (mov r8, r8)
10000d8c:	e000e100 	.word	0xe000e100

10000d90 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
10000d90:	b570      	push	{r4, r5, r6, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000d92:	26ff      	movs	r6, #255	; 0xff
10000d94:	2503      	movs	r5, #3
10000d96:	0032      	movs	r2, r6
10000d98:	4005      	ands	r5, r0
10000d9a:	00ed      	lsls	r5, r5, #3
10000d9c:	40aa      	lsls	r2, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000d9e:	0149      	lsls	r1, r1, #5
10000da0:	4031      	ands	r1, r6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000da2:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000da4:	40a9      	lsls	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
10000da6:	b244      	sxtb	r4, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000da8:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
10000daa:	0600      	lsls	r0, r0, #24
10000dac:	d40a      	bmi.n	10000dc4 <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000dae:	08a3      	lsrs	r3, r4, #2
10000db0:	24c0      	movs	r4, #192	; 0xc0
10000db2:	480a      	ldr	r0, [pc, #40]	; (10000ddc <z_arm_irq_priority_set+0x4c>)
10000db4:	009b      	lsls	r3, r3, #2
10000db6:	181b      	adds	r3, r3, r0
10000db8:	00a4      	lsls	r4, r4, #2
10000dba:	5918      	ldr	r0, [r3, r4]
10000dbc:	4002      	ands	r2, r0
10000dbe:	4311      	orrs	r1, r2
10000dc0:	5119      	str	r1, [r3, r4]
}
10000dc2:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000dc4:	200f      	movs	r0, #15
10000dc6:	4003      	ands	r3, r0
10000dc8:	3b08      	subs	r3, #8
10000dca:	4805      	ldr	r0, [pc, #20]	; (10000de0 <z_arm_irq_priority_set+0x50>)
10000dcc:	089b      	lsrs	r3, r3, #2
10000dce:	009b      	lsls	r3, r3, #2
10000dd0:	181b      	adds	r3, r3, r0
10000dd2:	69d8      	ldr	r0, [r3, #28]
10000dd4:	4002      	ands	r2, r0
10000dd6:	4311      	orrs	r1, r2
10000dd8:	61d9      	str	r1, [r3, #28]
10000dda:	e7f2      	b.n	10000dc2 <z_arm_irq_priority_set+0x32>
10000ddc:	e000e100 	.word	0xe000e100
10000de0:	e000ed00 	.word	0xe000ed00

10000de4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
10000de4:	bf30      	wfi
    b z_SysNmiOnReset
10000de6:	e7fd      	b.n	10000de4 <z_SysNmiOnReset>

10000de8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10000de8:	22ff      	movs	r2, #255	; 0xff
10000dea:	4b08      	ldr	r3, [pc, #32]	; (10000e0c <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
10000dec:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10000dee:	4393      	bics	r3, r2
10000df0:	4a07      	ldr	r2, [pc, #28]	; (10000e10 <z_arm_prep_c+0x28>)
10000df2:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10000df4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10000df8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10000dfc:	f000 fec2 	bl	10001b84 <z_bss_zero>
	z_data_copy();
10000e00:	f001 fc4c 	bl	1000269c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
10000e04:	f000 f8f2 	bl	10000fec <z_arm_interrupt_init>
	z_cstart();
10000e08:	f000 fefc 	bl	10001c04 <z_cstart>
10000e0c:	10000100 	.word	0x10000100
10000e10:	e000ed00 	.word	0xe000ed00

10000e14 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10000e14:	4a08      	ldr	r2, [pc, #32]	; (10000e38 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
10000e16:	4909      	ldr	r1, [pc, #36]	; (10000e3c <arch_swap+0x28>)
	_current->arch.basepri = key;
10000e18:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
10000e1a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
10000e1c:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
10000e1e:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10000e20:	2380      	movs	r3, #128	; 0x80
10000e22:	4907      	ldr	r1, [pc, #28]	; (10000e40 <arch_swap+0x2c>)
10000e24:	055b      	lsls	r3, r3, #21
10000e26:	6848      	ldr	r0, [r1, #4]
10000e28:	4303      	orrs	r3, r0
10000e2a:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
10000e2c:	b662      	cpsie	i
10000e2e:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
10000e32:	6893      	ldr	r3, [r2, #8]
10000e34:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
10000e36:	4770      	bx	lr
10000e38:	20000294 	.word	0x20000294
10000e3c:	10003a68 	.word	0x10003a68
10000e40:	e000ed00 	.word	0xe000ed00

10000e44 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
10000e44:	4913      	ldr	r1, [pc, #76]	; (10000e94 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
10000e46:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
10000e48:	4813      	ldr	r0, [pc, #76]	; (10000e98 <_thread_irq_disabled+0x22>)
    add r0, r2
10000e4a:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
10000e4c:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
10000e50:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
10000e52:	4643      	mov	r3, r8
    mov r4, r9
10000e54:	464c      	mov	r4, r9
    mov r5, r10
10000e56:	4655      	mov	r5, sl
    mov r6, r11
10000e58:	465e      	mov	r6, fp
    mov r7, ip
10000e5a:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
10000e5c:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10000e5e:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
10000e60:	4f0e      	ldr	r7, [pc, #56]	; (10000e9c <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
10000e62:	4e0f      	ldr	r6, [pc, #60]	; (10000ea0 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
10000e64:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
10000e66:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
10000e68:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
10000e6a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
10000e6c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
10000e6e:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
10000e70:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
10000e72:	d100      	bne.n	10000e76 <_thread_irq_disabled>
    cpsie i
10000e74:	b662      	cpsie	i

10000e76 <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
10000e76:	4c08      	ldr	r4, [pc, #32]	; (10000e98 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
10000e78:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
10000e7a:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
10000e7c:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
10000e7e:	4698      	mov	r8, r3
    mov r9, r4
10000e80:	46a1      	mov	r9, r4
    mov r10, r5
10000e82:	46aa      	mov	sl, r5
    mov r11, r6
10000e84:	46b3      	mov	fp, r6
    mov ip, r7
10000e86:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10000e88:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
10000e8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
10000e8c:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10000e90:	4770      	bx	lr
10000e92:	0000      	.short	0x0000
    ldr r1, =_kernel
10000e94:	20000294 	.word	0x20000294
    ldr r0, =_thread_offset_to_callee_saved
10000e98:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
10000e9c:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
10000ea0:	08000000 	.word	0x08000000

10000ea4 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
10000ea4:	2004      	movs	r0, #4
  mov r1, lr
10000ea6:	4671      	mov	r1, lr
  tst r1, r0
10000ea8:	4201      	tst	r1, r0
  beq _stack_frame_msp
10000eaa:	d002      	beq.n	10000eb2 <_stack_frame_msp>
  mrs r0, PSP
10000eac:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
10000eb0:	d101      	bne.n	10000eb6 <_stack_frame_endif>

10000eb2 <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
10000eb2:	f3ef 8008 	mrs	r0, MSP

10000eb6 <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
10000eb6:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
10000eb8:	3902      	subs	r1, #2
    ldrb r1, [r1]
10000eba:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
10000ebc:	2902      	cmp	r1, #2
    beq _oops
10000ebe:	d0ff      	beq.n	10000ec0 <_oops>

10000ec0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10000ec0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
10000ec2:	f001 fec6 	bl	10002c52 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
10000ec6:	bd01      	pop	{r0, pc}

10000ec8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
10000ec8:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
10000eca:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
10000ecc:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
10000ece:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
10000ed0:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
10000ed2:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
10000ed4:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
10000ed6:	4906      	ldr	r1, [pc, #24]	; (10000ef0 <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
10000ed8:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
10000eda:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
10000edc:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
10000ede:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
10000ee0:	2380      	movs	r3, #128	; 0x80
10000ee2:	045b      	lsls	r3, r3, #17
10000ee4:	61d3      	str	r3, [r2, #28]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
10000ee6:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
10000ee8:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
10000eea:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
10000eec:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
10000eee:	bd10      	pop	{r4, pc}
10000ef0:	10002b71 	.word	0x10002b71

10000ef4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
10000ef4:	4b06      	ldr	r3, [pc, #24]	; (10000f10 <arch_switch_to_main_thread+0x1c>)
10000ef6:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
10000ef8:	1c10      	adds	r0, r2, #0
10000efa:	f381 8809 	msr	PSP, r1
10000efe:	2100      	movs	r1, #0
10000f00:	b662      	cpsie	i
10000f02:	f3bf 8f6f 	isb	sy
10000f06:	2200      	movs	r2, #0
10000f08:	2300      	movs	r3, #0
10000f0a:	f001 fe31 	bl	10002b70 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
10000f0e:	46c0      	nop			; (mov r8, r8)
10000f10:	20000294 	.word	0x20000294

10000f14 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
10000f14:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
10000f16:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
10000f1a:	4905      	ldr	r1, [pc, #20]	; (10000f30 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
10000f1c:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
10000f1e:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
10000f20:	4904      	ldr	r1, [pc, #16]	; (10000f34 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
10000f22:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
10000f24:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
10000f26:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
10000f28:	bc09      	pop	{r0, r3}
	mov lr, r3
10000f2a:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
10000f2c:	4902      	ldr	r1, [pc, #8]	; (10000f38 <_isr_wrapper+0x24>)
	bx r1
10000f2e:	4708      	bx	r1
	ldr r1, =16
10000f30:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
10000f34:	100037f4 	.word	0x100037f4
	ldr r1, =z_arm_int_exit
10000f38:	10000f3d 	.word	0x10000f3d

10000f3c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
10000f3c:	4b04      	ldr	r3, [pc, #16]	; (10000f50 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
10000f3e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
10000f40:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
10000f42:	4288      	cmp	r0, r1
	beq _EXIT_EXC
10000f44:	d002      	beq.n	10000f4c <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
10000f46:	4903      	ldr	r1, [pc, #12]	; (10000f54 <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
10000f48:	4a03      	ldr	r2, [pc, #12]	; (10000f58 <_EXIT_EXC+0xc>)
	str r2, [r1]
10000f4a:	600a      	str	r2, [r1, #0]

10000f4c <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
10000f4c:	4770      	bx	lr
10000f4e:	0000      	.short	0x0000
	ldr r3, =_kernel
10000f50:	20000294 	.word	0x20000294
	ldr r1, =_SCS_ICSR
10000f54:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
10000f58:	10000000 	.word	0x10000000

10000f5c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
10000f5c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10000f5e:	4b1b      	ldr	r3, [pc, #108]	; (10000fcc <z_arm_fault+0x70>)
{
10000f60:	000e      	movs	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10000f62:	685b      	ldr	r3, [r3, #4]
{
10000f64:	b088      	sub	sp, #32
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10000f66:	05db      	lsls	r3, r3, #23
10000f68:	0ddb      	lsrs	r3, r3, #23
10000f6a:	b662      	cpsie	i
10000f6c:	f3bf 8f6f 	isb	sy
	*nested_exc = false;
10000f70:	2500      	movs	r5, #0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10000f72:	0e14      	lsrs	r4, r2, #24
		return NULL;
10000f74:	0029      	movs	r1, r5
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10000f76:	2cff      	cmp	r4, #255	; 0xff
10000f78:	d109      	bne.n	10000f8e <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
10000f7a:	3cf3      	subs	r4, #243	; 0xf3
10000f7c:	4014      	ands	r4, r2
10000f7e:	2c08      	cmp	r4, #8
10000f80:	d005      	beq.n	10000f8e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
10000f82:	0001      	movs	r1, r0
			*nested_exc = true;
10000f84:	3501      	adds	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
10000f86:	0712      	lsls	r2, r2, #28
10000f88:	d501      	bpl.n	10000f8e <z_arm_fault+0x32>
			ptr_esf =  (z_arch_esf_t *)psp;
10000f8a:	0031      	movs	r1, r6
	*nested_exc = false;
10000f8c:	2500      	movs	r5, #0
	uint32_t reason = K_ERR_CPU_EXCEPTION;
10000f8e:	2400      	movs	r4, #0
	switch (fault) {
10000f90:	2b03      	cmp	r3, #3
10000f92:	d106      	bne.n	10000fa2 <z_arm_fault+0x46>
	uint16_t fault_insn = *(ret_addr - 1);
10000f94:	698b      	ldr	r3, [r1, #24]
10000f96:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
10000f98:	881a      	ldrh	r2, [r3, #0]
10000f9a:	4b0d      	ldr	r3, [pc, #52]	; (10000fd0 <z_arm_fault+0x74>)
10000f9c:	429a      	cmp	r2, r3
10000f9e:	d100      	bne.n	10000fa2 <z_arm_fault+0x46>
		reason = esf->basic.r0;
10000fa0:	680c      	ldr	r4, [r1, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
10000fa2:	2220      	movs	r2, #32
10000fa4:	4668      	mov	r0, sp
10000fa6:	f001 fe79 	bl	10002c9c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
10000faa:	9b07      	ldr	r3, [sp, #28]
10000fac:	2d00      	cmp	r5, #0
10000fae:	d00a      	beq.n	10000fc6 <z_arm_fault+0x6a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
10000fb0:	05da      	lsls	r2, r3, #23
10000fb2:	d102      	bne.n	10000fba <z_arm_fault+0x5e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
10000fb4:	4a07      	ldr	r2, [pc, #28]	; (10000fd4 <z_arm_fault+0x78>)
10000fb6:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10000fb8:	9307      	str	r3, [sp, #28]
	}

	z_arm_fatal_error(reason, &esf_copy);
10000fba:	4669      	mov	r1, sp
10000fbc:	0020      	movs	r0, r4
10000fbe:	f001 fe44 	bl	10002c4a <z_arm_fatal_error>
}
10000fc2:	b008      	add	sp, #32
10000fc4:	bd70      	pop	{r4, r5, r6, pc}
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10000fc6:	0a5b      	lsrs	r3, r3, #9
10000fc8:	025b      	lsls	r3, r3, #9
10000fca:	e7f5      	b.n	10000fb8 <z_arm_fault+0x5c>
10000fcc:	e000ed00 	.word	0xe000ed00
10000fd0:	0000df02 	.word	0x0000df02
10000fd4:	000001ff 	.word	0x000001ff

10000fd8 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
10000fd8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
10000fdc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
10000fe0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
10000fe2:	4672      	mov	r2, lr
	bl z_arm_fault
10000fe4:	f7ff ffba 	bl	10000f5c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
10000fe8:	bd01      	pop	{r0, pc}
10000fea:	46c0      	nop			; (mov r8, r8)

10000fec <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
10000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000fee:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
10000ff0:	2200      	movs	r2, #0
10000ff2:	2603      	movs	r6, #3
10000ff4:	25ff      	movs	r5, #255	; 0xff
10000ff6:	00a4      	lsls	r4, r4, #2
10000ff8:	0010      	movs	r0, r2
10000ffa:	002f      	movs	r7, r5
10000ffc:	4030      	ands	r0, r6
10000ffe:	00c0      	lsls	r0, r0, #3
10001000:	4087      	lsls	r7, r0
10001002:	4905      	ldr	r1, [pc, #20]	; (10001018 <z_arm_interrupt_init+0x2c>)
10001004:	0893      	lsrs	r3, r2, #2
10001006:	009b      	lsls	r3, r3, #2
10001008:	185b      	adds	r3, r3, r1
1000100a:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
1000100c:	3201      	adds	r2, #1
1000100e:	43b9      	bics	r1, r7
10001010:	5119      	str	r1, [r3, r4]
10001012:	2a1a      	cmp	r2, #26
10001014:	d1f0      	bne.n	10000ff8 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
10001016:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001018:	e000e100 	.word	0xe000e100

1000101c <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
1000101c:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
1000101e:	4807      	ldr	r0, [pc, #28]	; (1000103c <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10001020:	4907      	ldr	r1, [pc, #28]	; (10001040 <__start+0x24>)
    adds r0, r0, r1
10001022:	1840      	adds	r0, r0, r1
    msr PSP, r0
10001024:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
10001028:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
1000102c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
1000102e:	4308      	orrs	r0, r1
    msr CONTROL, r0
10001030:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
10001034:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
10001038:	f7ff fed6 	bl	10000de8 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
1000103c:	200007d8 	.word	0x200007d8
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10001040:	00000800 	.word	0x00000800

10001044 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
10001044:	4b0a      	ldr	r3, [pc, #40]	; (10001070 <z_impl_k_thread_abort+0x2c>)
{
10001046:	b510      	push	{r4, lr}
	if (_current == thread) {
10001048:	689b      	ldr	r3, [r3, #8]
1000104a:	4283      	cmp	r3, r0
1000104c:	d10d      	bne.n	1000106a <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
1000104e:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
10001052:	2b00      	cmp	r3, #0
10001054:	d009      	beq.n	1000106a <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10001056:	2280      	movs	r2, #128	; 0x80
10001058:	4b06      	ldr	r3, [pc, #24]	; (10001074 <z_impl_k_thread_abort+0x30>)
1000105a:	0552      	lsls	r2, r2, #21
1000105c:	6859      	ldr	r1, [r3, #4]
1000105e:	430a      	orrs	r2, r1
10001060:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
10001062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10001064:	4904      	ldr	r1, [pc, #16]	; (10001078 <z_impl_k_thread_abort+0x34>)
10001066:	400a      	ands	r2, r1
10001068:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
1000106a:	f001 fab5 	bl	100025d8 <z_thread_abort>
}
1000106e:	bd10      	pop	{r4, pc}
10001070:	20000294 	.word	0x20000294
10001074:	e000ed00 	.word	0xe000ed00
10001078:	ffff7fff 	.word	0xffff7fff

1000107c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
1000107c:	4b01      	ldr	r3, [pc, #4]	; (10001084 <__stdout_hook_install+0x8>)
1000107e:	6018      	str	r0, [r3, #0]
}
10001080:	4770      	bx	lr
10001082:	46c0      	nop			; (mov r8, r8)
10001084:	20000014 	.word	0x20000014

10001088 <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001088:	4b0e      	ldr	r3, [pc, #56]	; (100010c4 <rp2040_init+0x3c>)
1000108a:	4a0f      	ldr	r2, [pc, #60]	; (100010c8 <rp2040_init+0x40>)
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
1000108c:	b570      	push	{r4, r5, r6, lr}
1000108e:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001090:	4d0e      	ldr	r5, [pc, #56]	; (100010cc <rp2040_init+0x44>)
10001092:	4b0f      	ldr	r3, [pc, #60]	; (100010d0 <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10001094:	4c0f      	ldr	r4, [pc, #60]	; (100010d4 <rp2040_init+0x4c>)
10001096:	602b      	str	r3, [r5, #0]
10001098:	0019      	movs	r1, r3
1000109a:	68a2      	ldr	r2, [r4, #8]
1000109c:	4391      	bics	r1, r2
1000109e:	d1fb      	bne.n	10001098 <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS));

	clocks_init();
100010a0:	f000 fb3a 	bl	10001718 <clocks_init>
100010a4:	4b0c      	ldr	r3, [pc, #48]	; (100010d8 <rp2040_init+0x50>)
100010a6:	602b      	str	r3, [r5, #0]
100010a8:	68a3      	ldr	r3, [r4, #8]
100010aa:	01db      	lsls	r3, r3, #7
100010ac:	3380      	adds	r3, #128	; 0x80
100010ae:	d1fb      	bne.n	100010a8 <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
100010b0:	f3ef 8310 	mrs	r3, PRIMASK
100010b4:	b672      	cpsid	i
	if (key != 0U) {
100010b6:	2b00      	cmp	r3, #0
100010b8:	d102      	bne.n	100010c0 <rp2040_init+0x38>
	__asm__ volatile(
100010ba:	b662      	cpsie	i
100010bc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
100010c0:	2000      	movs	r0, #0
100010c2:	bd70      	pop	{r4, r5, r6, pc}
100010c4:	4000e000 	.word	0x4000e000
100010c8:	ffffcdbf 	.word	0xffffcdbf
100010cc:	4000f000 	.word	0x4000f000
100010d0:	003c7ffe 	.word	0x003c7ffe
100010d4:	4000c000 	.word	0x4000c000
100010d8:	01ffffff 	.word	0x01ffffff

100010dc <uart_console_init>:
{

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
100010dc:	4809      	ldr	r0, [pc, #36]	; (10001104 <uart_console_init+0x28>)
100010de:	4b0a      	ldr	r3, [pc, #40]	; (10001108 <uart_console_init+0x2c>)
{
100010e0:	b510      	push	{r4, lr}
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
100010e2:	6018      	str	r0, [r3, #0]
100010e4:	f002 f9b3 	bl	1000344e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
100010e8:	2800      	cmp	r0, #0
100010ea:	d008      	beq.n	100010fe <uart_console_init+0x22>
	__stdout_hook_install(console_out);
100010ec:	4c07      	ldr	r4, [pc, #28]	; (1000110c <uart_console_init+0x30>)
100010ee:	0020      	movs	r0, r4
100010f0:	f7ff ffc4 	bl	1000107c <__stdout_hook_install>
	__printk_hook_install(console_out);
100010f4:	0020      	movs	r0, r4
100010f6:	f7ff fa85 	bl	10000604 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
100010fa:	2000      	movs	r0, #0
}
100010fc:	bd10      	pop	{r4, pc}
		return -ENODEV;
100010fe:	2013      	movs	r0, #19
10001100:	4240      	negs	r0, r0
10001102:	e7fb      	b.n	100010fc <uart_console_init+0x20>
10001104:	10003794 	.word	0x10003794
10001108:	200001f0 	.word	0x200001f0
1000110c:	10001111 	.word	0x10001111

10001110 <console_out>:
{
10001110:	b570      	push	{r4, r5, r6, lr}
10001112:	0004      	movs	r4, r0
10001114:	4d07      	ldr	r5, [pc, #28]	; (10001134 <console_out+0x24>)
	if ('\n' == c) {
10001116:	280a      	cmp	r0, #10
10001118:	d104      	bne.n	10001124 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
1000111a:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
1000111c:	6883      	ldr	r3, [r0, #8]
1000111e:	210d      	movs	r1, #13
10001120:	685b      	ldr	r3, [r3, #4]
10001122:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
10001124:	6828      	ldr	r0, [r5, #0]
10001126:	6883      	ldr	r3, [r0, #8]
10001128:	b2e1      	uxtb	r1, r4
1000112a:	685b      	ldr	r3, [r3, #4]
1000112c:	4798      	blx	r3
}
1000112e:	0020      	movs	r0, r4
10001130:	bd70      	pop	{r4, r5, r6, pc}
10001132:	46c0      	nop			; (mov r8, r8)
10001134:	200001f0 	.word	0x200001f0

10001138 <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
10001138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000113a:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
1000113c:	2400      	movs	r4, #0
		status_reg = &irq_ctrl_base->ints[pin / 8];
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
1000113e:	270f      	movs	r7, #15
	struct gpio_rpi_data *data = dev->data;
10001140:	6903      	ldr	r3, [r0, #16]
10001142:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
10001144:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10001146:	4a14      	ldr	r2, [pc, #80]	; (10001198 <gpio_rpi_isr+0x60>)
10001148:	3308      	adds	r3, #8
1000114a:	009b      	lsls	r3, r3, #2
1000114c:	589b      	ldr	r3, [r3, r2]
1000114e:	2207      	movs	r2, #7
10001150:	4022      	ands	r2, r4
10001152:	0092      	lsls	r2, r2, #2
10001154:	40d3      	lsrs	r3, r2
		if (events) {
10001156:	423b      	tst	r3, r7
10001158:	d103      	bne.n	10001162 <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
1000115a:	3401      	adds	r4, #1
1000115c:	2c1e      	cmp	r4, #30
1000115e:	d1f1      	bne.n	10001144 <gpio_rpi_isr+0xc>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
10001160:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
10001162:	0039      	movs	r1, r7
10001164:	0020      	movs	r0, r4
10001166:	f000 fc1d 	bl	100019a4 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
1000116a:	9b01      	ldr	r3, [sp, #4]
1000116c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
1000116e:	2900      	cmp	r1, #0
10001170:	d0f3      	beq.n	1000115a <gpio_rpi_isr+0x22>
10001172:	2301      	movs	r3, #1
10001174:	40a3      	lsls	r3, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
10001176:	680d      	ldr	r5, [r1, #0]
10001178:	9300      	str	r3, [sp, #0]
		if (cb->pin_mask & pins) {
1000117a:	688b      	ldr	r3, [r1, #8]
1000117c:	9a00      	ldr	r2, [sp, #0]
1000117e:	9800      	ldr	r0, [sp, #0]
10001180:	401a      	ands	r2, r3
10001182:	4203      	tst	r3, r0
10001184:	d002      	beq.n	1000118c <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
10001186:	0030      	movs	r0, r6
10001188:	684b      	ldr	r3, [r1, #4]
1000118a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
1000118c:	2d00      	cmp	r5, #0
1000118e:	d0e4      	beq.n	1000115a <gpio_rpi_isr+0x22>
10001190:	0029      	movs	r1, r5
10001192:	682d      	ldr	r5, [r5, #0]
10001194:	e7f1      	b.n	1000117a <gpio_rpi_isr+0x42>
10001196:	46c0      	nop			; (mov r8, r8)
10001198:	40014100 	.word	0x40014100

1000119c <i2c_dw_initialize>:
	.slave_unregister = i2c_dw_slave_unregister,
#endif /* CONFIG_I2C_SLAVE */
};

static int i2c_dw_initialize(const struct device *dev)
{
1000119c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct i2c_dw_rom_config * const rom = dev->config;
1000119e:	6847      	ldr	r7, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
100011a0:	6906      	ldr	r6, [r0, #16]
{
100011a2:	0005      	movs	r5, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
100011a4:	2100      	movs	r1, #0
100011a6:	68f8      	ldr	r0, [r7, #12]
100011a8:	aa01      	add	r2, sp, #4
100011aa:	f000 fa31 	bl	10001610 <pinctrl_lookup_state>
100011ae:	1e04      	subs	r4, r0, #0
	if (ret < 0) {
100011b0:	db17      	blt.n	100011e2 <i2c_dw_initialize+0x46>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
100011b2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
100011b4:	2200      	movs	r2, #0
100011b6:	7919      	ldrb	r1, [r3, #4]
100011b8:	6818      	ldr	r0, [r3, #0]
100011ba:	f002 f878 	bl	100032ae <pinctrl_configure_pins>
100011be:	1e04      	subs	r4, r0, #0
	union ic_con_register ic_con;
	int ret = 0;

#if defined(CONFIG_PINCTRL)
	ret = pinctrl_apply_state(rom->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret) {
100011c0:	d10f      	bne.n	100011e2 <i2c_dw_initialize+0x46>
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
100011c2:	2201      	movs	r2, #1
100011c4:	0001      	movs	r1, r0
100011c6:	4252      	negs	r2, r2
100011c8:	0030      	movs	r0, r6
100011ca:	f002 f985 	bl	100034d8 <z_impl_k_sem_init>
	return (uint32_t)DEVICE_MMIO_GET(dev);
100011ce:	686b      	ldr	r3, [r5, #4]
100011d0:	681b      	ldr	r3, [r3, #0]

DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)

DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
DEFINE_MM_REG_READ(comp_type, DW_IC_REG_COMP_TYPE, 32)
100011d2:	001a      	movs	r2, r3
100011d4:	32fc      	adds	r2, #252	; 0xfc
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
100011d6:	6811      	ldr	r1, [r2, #0]

	k_sem_init(&dw->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	uint32_t reg_base = get_regs(dev);

	/* verify that we have a valid DesignWare register first */
	if (read_comp_type(reg_base) != I2C_DW_MAGIC_KEY) {
100011d8:	4a1b      	ldr	r2, [pc, #108]	; (10001248 <i2c_dw_initialize+0xac>)
100011da:	4291      	cmp	r1, r2
100011dc:	d003      	beq.n	100011e6 <i2c_dw_initialize+0x4a>
		LOG_DBG("I2C: DesignWare magic key not found, check base "
			    "address. Stopping initialization");
		return -EIO;
100011de:	2405      	movs	r4, #5
100011e0:	4264      	negs	r4, r4
	}

	dw->state = I2C_DW_STATE_READY;

	return ret;
}
100011e2:	0020      	movs	r0, r4
100011e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
100011e6:	2206      	movs	r2, #6
100011e8:	681b      	ldr	r3, [r3, #0]
	rom->config_func(dev);
100011ea:	0028      	movs	r0, r5
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
100011ec:	4013      	ands	r3, r2
100011ee:	3b06      	subs	r3, #6
100011f0:	425a      	negs	r2, r3
100011f2:	4153      	adcs	r3, r2
100011f4:	0032      	movs	r2, r6
100011f6:	3208      	adds	r2, #8
100011f8:	77d3      	strb	r3, [r2, #31]
	rom->config_func(dev);
100011fa:	687b      	ldr	r3, [r7, #4]
100011fc:	4798      	blx	r3
	dw->app_config = I2C_MODE_MASTER | i2c_map_dt_bitrate(rom->bitrate);
100011fe:	68bb      	ldr	r3, [r7, #8]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
10001200:	4a12      	ldr	r2, [pc, #72]	; (1000124c <i2c_dw_initialize+0xb0>)
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST:
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
10001202:	2106      	movs	r1, #6
	switch (bitrate) {
10001204:	4293      	cmp	r3, r2
10001206:	d009      	beq.n	1000121c <i2c_dw_initialize+0x80>
10001208:	d813      	bhi.n	10001232 <i2c_dw_initialize+0x96>
1000120a:	4a11      	ldr	r2, [pc, #68]	; (10001250 <i2c_dw_initialize+0xb4>)
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
1000120c:	3904      	subs	r1, #4
	switch (bitrate) {
1000120e:	4293      	cmp	r3, r2
10001210:	d004      	beq.n	1000121c <i2c_dw_initialize+0x80>
10001212:	4a10      	ldr	r2, [pc, #64]	; (10001254 <i2c_dw_initialize+0xb8>)
10001214:	1899      	adds	r1, r3, r2
10001216:	424b      	negs	r3, r1
10001218:	4159      	adcs	r1, r3
1000121a:	0089      	lsls	r1, r1, #2
1000121c:	2310      	movs	r3, #16
1000121e:	4319      	orrs	r1, r3
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
10001220:	0028      	movs	r0, r5
	dw->app_config = I2C_MODE_MASTER | i2c_map_dt_bitrate(rom->bitrate);
10001222:	6131      	str	r1, [r6, #16]
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
10001224:	f001 fe11 	bl	10002e4a <i2c_dw_runtime_configure>
10001228:	1e04      	subs	r4, r0, #0
1000122a:	d1d8      	bne.n	100011de <i2c_dw_initialize+0x42>
	dw->state = I2C_DW_STATE_READY;
1000122c:	3605      	adds	r6, #5
1000122e:	77f0      	strb	r0, [r6, #31]
	return ret;
10001230:	e7d7      	b.n	100011e2 <i2c_dw_initialize+0x46>
10001232:	4a09      	ldr	r2, [pc, #36]	; (10001258 <i2c_dw_initialize+0xbc>)
	case I2C_BITRATE_HIGH:
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
10001234:	2108      	movs	r1, #8
	switch (bitrate) {
10001236:	4293      	cmp	r3, r2
10001238:	d0f0      	beq.n	1000121c <i2c_dw_initialize+0x80>
1000123a:	4a08      	ldr	r2, [pc, #32]	; (1000125c <i2c_dw_initialize+0xc0>)
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");

	return 0;
1000123c:	0021      	movs	r1, r4
	switch (bitrate) {
1000123e:	4293      	cmp	r3, r2
10001240:	d1ec      	bne.n	1000121c <i2c_dw_initialize+0x80>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
10001242:	210a      	movs	r1, #10
10001244:	e7ea      	b.n	1000121c <i2c_dw_initialize+0x80>
10001246:	46c0      	nop			; (mov r8, r8)
10001248:	44570140 	.word	0x44570140
1000124c:	000f4240 	.word	0x000f4240
10001250:	000186a0 	.word	0x000186a0
10001254:	fff9e580 	.word	0xfff9e580
10001258:	0033e140 	.word	0x0033e140
1000125c:	004c4b40 	.word	0x004c4b40

10001260 <i2c_dw_transfer>:
{
10001260:	b5f0      	push	{r4, r5, r6, r7, lr}
10001262:	b085      	sub	sp, #20
10001264:	0004      	movs	r4, r0
10001266:	000e      	movs	r6, r1
		return 0;
10001268:	1e10      	subs	r0, r2, #0
{
1000126a:	9201      	str	r2, [sp, #4]
1000126c:	9303      	str	r3, [sp, #12]
	if (!num_msgs) {
1000126e:	d100      	bne.n	10001272 <i2c_dw_transfer+0x12>
10001270:	e0b3      	b.n	100013da <i2c_dw_transfer+0x17a>

static ALWAYS_INLINE int sys_test_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	return temp & (1 << bit);
10001272:	2701      	movs	r7, #1
	return (uint32_t)DEVICE_MMIO_GET(dev);
10001274:	6862      	ldr	r2, [r4, #4]
10001276:	6815      	ldr	r5, [r2, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10001278:	6f2a      	ldr	r2, [r5, #112]	; 0x70
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
1000127a:	423a      	tst	r2, r7
1000127c:	d000      	beq.n	10001280 <i2c_dw_transfer+0x20>
1000127e:	e0c1      	b.n	10001404 <i2c_dw_transfer+0x1a4>
	struct i2c_dw_dev_config * const dw = dev->data;
10001280:	6924      	ldr	r4, [r4, #16]
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
10001282:	2208      	movs	r2, #8
10001284:	1d61      	adds	r1, r4, #5
10001286:	7fc8      	ldrb	r0, [r1, #31]
10001288:	0003      	movs	r3, r0
1000128a:	4013      	ands	r3, r2
1000128c:	469c      	mov	ip, r3
1000128e:	4210      	tst	r0, r2
10001290:	d000      	beq.n	10001294 <i2c_dw_transfer+0x34>
10001292:	e0b7      	b.n	10001404 <i2c_dw_transfer+0x1a4>
DEFINE_MM_REG_WRITE(intr_mask, DW_IC_REG_INTR_MASK, 32)
10001294:	002b      	movs	r3, r5
10001296:	3330      	adds	r3, #48	; 0x30
	dw->state |= I2C_DW_BUSY;
10001298:	7fc8      	ldrb	r0, [r1, #31]
1000129a:	9302      	str	r3, [sp, #8]
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
1000129c:	4663      	mov	r3, ip
1000129e:	4302      	orrs	r2, r0
100012a0:	77ca      	strb	r2, [r1, #31]
	uint32_t temp = *(volatile uint32_t *)addr;
100012a2:	6eea      	ldr	r2, [r5, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
100012a4:	43ba      	bics	r2, r7
100012a6:	66ea      	str	r2, [r5, #108]	; 0x6c
100012a8:	632b      	str	r3, [r5, #48]	; 0x30
	if (I2C_MODE_MASTER & dw->app_config) {
100012aa:	6921      	ldr	r1, [r4, #16]
	return *(volatile uint32_t *)addr;
100012ac:	6c2a      	ldr	r2, [r5, #64]	; 0x40
100012ae:	06cb      	lsls	r3, r1, #27
100012b0:	d50e      	bpl.n	100012d0 <i2c_dw_transfer+0x70>
		ic_con.bits.master_mode = 1U;
100012b2:	2261      	movs	r2, #97	; 0x61
	if (I2C_ADDR_10_BITS & dw->app_config) {
100012b4:	4239      	tst	r1, r7
100012b6:	d000      	beq.n	100012ba <i2c_dw_transfer+0x5a>
		ic_con.bits.addr_slave_10bit = 1U;
100012b8:	3218      	adds	r2, #24
	switch (I2C_SPEED_GET(dw->app_config)) {
100012ba:	2007      	movs	r0, #7
100012bc:	2304      	movs	r3, #4
100012be:	0849      	lsrs	r1, r1, #1
100012c0:	4008      	ands	r0, r1
100012c2:	4219      	tst	r1, r3
100012c4:	d10a      	bne.n	100012dc <i2c_dw_transfer+0x7c>
100012c6:	2706      	movs	r7, #6
100012c8:	4239      	tst	r1, r7
100012ca:	d11c      	bne.n	10001306 <i2c_dw_transfer+0xa6>
100012cc:	2801      	cmp	r0, #1
100012ce:	d012      	beq.n	100012f6 <i2c_dw_transfer+0x96>
		dw->state = I2C_DW_STATE_READY;
100012d0:	2300      	movs	r3, #0
		return ret;
100012d2:	2016      	movs	r0, #22
		dw->state = I2C_DW_STATE_READY;
100012d4:	3405      	adds	r4, #5
100012d6:	77e3      	strb	r3, [r4, #31]
		return -EIO;
100012d8:	4240      	negs	r0, r0
100012da:	e07e      	b.n	100013da <i2c_dw_transfer+0x17a>
	switch (I2C_SPEED_GET(dw->app_config)) {
100012dc:	2804      	cmp	r0, #4
100012de:	d1f7      	bne.n	100012d0 <i2c_dw_transfer+0x70>
		if (!dw->support_hs_mode) {
100012e0:	0021      	movs	r1, r4
100012e2:	3108      	adds	r1, #8
100012e4:	7fc9      	ldrb	r1, [r1, #31]
100012e6:	2900      	cmp	r1, #0
100012e8:	d0f2      	beq.n	100012d0 <i2c_dw_transfer+0x70>
		write_hs_scl_lcnt(dw->lcnt, reg_base);
100012ea:	8c61      	ldrh	r1, [r4, #34]	; 0x22
	*(volatile uint32_t *)addr = data;
100012ec:	62a9      	str	r1, [r5, #40]	; 0x28
		write_hs_scl_hcnt(dw->hcnt, reg_base);
100012ee:	8c21      	ldrh	r1, [r4, #32]
100012f0:	6269      	str	r1, [r5, #36]	; 0x24
		ic_con.bits.speed = I2C_DW_SPEED_HIGH;
100012f2:	2106      	movs	r1, #6
100012f4:	e005      	b.n	10001302 <i2c_dw_transfer+0xa2>
		write_ss_scl_lcnt(dw->lcnt, reg_base);
100012f6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
100012f8:	43ba      	bics	r2, r7
100012fa:	61a9      	str	r1, [r5, #24]
		write_ss_scl_hcnt(dw->hcnt, reg_base);
100012fc:	8c21      	ldrh	r1, [r4, #32]
100012fe:	6169      	str	r1, [r5, #20]
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
10001300:	2102      	movs	r1, #2
		ic_con.bits.speed = I2C_DW_SPEED_HIGH;
10001302:	430a      	orrs	r2, r1
		break;
10001304:	e006      	b.n	10001314 <i2c_dw_transfer+0xb4>
		ic_con.bits.speed = I2C_DW_SPEED_FAST;
10001306:	43ba      	bics	r2, r7
10001308:	4313      	orrs	r3, r2
1000130a:	001a      	movs	r2, r3
		write_fs_scl_lcnt(dw->lcnt, reg_base);
1000130c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
1000130e:	6229      	str	r1, [r5, #32]
		write_fs_scl_hcnt(dw->hcnt, reg_base);
10001310:	8c21      	ldrh	r1, [r4, #32]
10001312:	61e9      	str	r1, [r5, #28]
10001314:	602a      	str	r2, [r5, #0]
10001316:	2200      	movs	r2, #0
10001318:	63aa      	str	r2, [r5, #56]	; 0x38
1000131a:	63ea      	str	r2, [r5, #60]	; 0x3c
	return *(volatile uint32_t *)addr;
1000131c:	686a      	ldr	r2, [r5, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
1000131e:	6829      	ldr	r1, [r5, #0]
	if (test_bit_con_master_mode(reg_base)) {
10001320:	07cb      	lsls	r3, r1, #31
10001322:	d55c      	bpl.n	100013de <i2c_dw_transfer+0x17e>
		ic_tar.bits.ic_tar = slave_address;
10001324:	9b03      	ldr	r3, [sp, #12]
10001326:	0a92      	lsrs	r2, r2, #10
10001328:	059b      	lsls	r3, r3, #22
1000132a:	0d9b      	lsrs	r3, r3, #22
1000132c:	0292      	lsls	r2, r2, #10
1000132e:	431a      	orrs	r2, r3
	if (I2C_MODE_MASTER & dw->app_config) {
10001330:	6923      	ldr	r3, [r4, #16]
10001332:	06d9      	lsls	r1, r3, #27
10001334:	d504      	bpl.n	10001340 <i2c_dw_transfer+0xe0>
		if (I2C_ADDR_10_BITS & dw->app_config) {
10001336:	07db      	lsls	r3, r3, #31
10001338:	d554      	bpl.n	100013e4 <i2c_dw_transfer+0x184>
			ic_tar.bits.ic_10bitaddr_master = 1U;
1000133a:	2380      	movs	r3, #128	; 0x80
1000133c:	015b      	lsls	r3, r3, #5
1000133e:	431a      	orrs	r2, r3
	*(volatile uint32_t *)addr = data;
10001340:	606a      	str	r2, [r5, #4]
	*(volatile uint32_t *)addr = temp | (1 << bit);
10001342:	2201      	movs	r2, #1
	uint32_t temp = *(volatile uint32_t *)addr;
10001344:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp | (1 << bit);
10001346:	4313      	orrs	r3, r2
10001348:	66eb      	str	r3, [r5, #108]	; 0x6c
		dw->rx_pending = 0U;
1000134a:	2700      	movs	r7, #0
		dw->xfr_buf = cur_msg->buf;
1000134c:	6832      	ldr	r2, [r6, #0]
		dw->xfr_len = cur_msg->len;
1000134e:	6871      	ldr	r1, [r6, #4]
		pflags = dw->xfr_flags;
10001350:	1de3      	adds	r3, r4, #7
10001352:	7fd8      	ldrb	r0, [r3, #31]
		dw->xfr_buf = cur_msg->buf;
10001354:	6162      	str	r2, [r4, #20]
		dw->xfr_len = cur_msg->len;
10001356:	61a1      	str	r1, [r4, #24]
		dw->xfr_flags = cur_msg->flags;
10001358:	7a32      	ldrb	r2, [r6, #8]
1000135a:	77da      	strb	r2, [r3, #31]
		    != (dw->xfr_flags & I2C_MSG_RW_MASK)) {
1000135c:	4050      	eors	r0, r2
		dw->rx_pending = 0U;
1000135e:	61e7      	str	r7, [r4, #28]
		if ((pflags & I2C_MSG_RW_MASK)
10001360:	3701      	adds	r7, #1
10001362:	4238      	tst	r0, r7
10001364:	d002      	beq.n	1000136c <i2c_dw_transfer+0x10c>
			dw->xfr_flags |= I2C_MSG_RESTART;
10001366:	2004      	movs	r0, #4
10001368:	4302      	orrs	r2, r0
1000136a:	77da      	strb	r2, [r3, #31]
		if (msg_left == 1U) {
1000136c:	9a01      	ldr	r2, [sp, #4]
1000136e:	2a01      	cmp	r2, #1
10001370:	d103      	bne.n	1000137a <i2c_dw_transfer+0x11a>
			dw->xfr_flags |= I2C_MSG_STOP;
10001372:	7fd8      	ldrb	r0, [r3, #31]
10001374:	3201      	adds	r2, #1
10001376:	4302      	orrs	r2, r0
10001378:	77da      	strb	r2, [r3, #31]
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
1000137a:	2203      	movs	r2, #3
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
1000137c:	2001      	movs	r0, #1
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
1000137e:	1d67      	adds	r7, r4, #5
10001380:	7ffb      	ldrb	r3, [r7, #31]
10001382:	4393      	bics	r3, r2
10001384:	77fb      	strb	r3, [r7, #31]
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
10001386:	1de3      	adds	r3, r4, #7
10001388:	7fdb      	ldrb	r3, [r3, #31]
1000138a:	3a02      	subs	r2, #2
1000138c:	401a      	ands	r2, r3
1000138e:	4203      	tst	r3, r0
10001390:	d12b      	bne.n	100013ea <i2c_dw_transfer+0x18a>
			dw->state |= I2C_DW_CMD_SEND;
10001392:	7ffb      	ldrb	r3, [r7, #31]
10001394:	4303      	orrs	r3, r0
10001396:	77fb      	strb	r3, [r7, #31]
			dw->request_bytes = 0U;
10001398:	1da3      	adds	r3, r4, #6
1000139a:	77da      	strb	r2, [r3, #31]
		if (test_bit_con_master_mode(reg_base)) {
1000139c:	2201      	movs	r2, #1
	uint32_t temp = *(volatile uint32_t *)addr;
1000139e:	682b      	ldr	r3, [r5, #0]
100013a0:	4213      	tst	r3, r2
100013a2:	d029      	beq.n	100013f8 <i2c_dw_transfer+0x198>
100013a4:	4b18      	ldr	r3, [pc, #96]	; (10001408 <i2c_dw_transfer+0x1a8>)
100013a6:	9a02      	ldr	r2, [sp, #8]
100013a8:	6013      	str	r3, [r2, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
100013aa:	2201      	movs	r2, #1
100013ac:	4252      	negs	r2, r2
100013ae:	17d3      	asrs	r3, r2, #31
100013b0:	0020      	movs	r0, r4
100013b2:	f000 fd39 	bl	10001e28 <z_impl_k_sem_take>
		if (dw->state & I2C_DW_CMD_ERROR) {
100013b6:	2204      	movs	r2, #4
100013b8:	7ffb      	ldrb	r3, [r7, #31]
100013ba:	4213      	tst	r3, r2
100013bc:	d11f      	bne.n	100013fe <i2c_dw_transfer+0x19e>
		if (dw->xfr_len > 0) {
100013be:	69a3      	ldr	r3, [r4, #24]
100013c0:	2b00      	cmp	r3, #0
100013c2:	d11c      	bne.n	100013fe <i2c_dw_transfer+0x19e>
		msg_left--;
100013c4:	9a01      	ldr	r2, [sp, #4]
		cur_msg++;
100013c6:	360c      	adds	r6, #12
		msg_left--;
100013c8:	3a01      	subs	r2, #1
100013ca:	b2d3      	uxtb	r3, r2
100013cc:	9301      	str	r3, [sp, #4]
	while (msg_left > 0) {
100013ce:	2b00      	cmp	r3, #0
100013d0:	d1bb      	bne.n	1000134a <i2c_dw_transfer+0xea>
	ret = i2c_dw_setup(dev, slave_address);
100013d2:	0018      	movs	r0, r3
	dw->state = I2C_DW_STATE_READY;
100013d4:	2300      	movs	r3, #0
100013d6:	3405      	adds	r4, #5
100013d8:	77e3      	strb	r3, [r4, #31]
}
100013da:	b005      	add	sp, #20
100013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100013de:	9b03      	ldr	r3, [sp, #12]
100013e0:	60ab      	str	r3, [r5, #8]
DEFINE_MM_REG_READ(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(sar, DW_IC_REG_SAR, 32)
100013e2:	e7a5      	b.n	10001330 <i2c_dw_transfer+0xd0>
			ic_tar.bits.ic_10bitaddr_master = 0U;
100013e4:	4b09      	ldr	r3, [pc, #36]	; (1000140c <i2c_dw_transfer+0x1ac>)
100013e6:	401a      	ands	r2, r3
100013e8:	e7aa      	b.n	10001340 <i2c_dw_transfer+0xe0>
			dw->state |= I2C_DW_CMD_RECV;
100013ea:	2302      	movs	r3, #2
100013ec:	7ffa      	ldrb	r2, [r7, #31]
100013ee:	4313      	orrs	r3, r2
100013f0:	77fb      	strb	r3, [r7, #31]
			dw->request_bytes = dw->xfr_len;
100013f2:	1da3      	adds	r3, r4, #6
100013f4:	77d9      	strb	r1, [r3, #31]
100013f6:	e7d1      	b.n	1000139c <i2c_dw_transfer+0x13c>
100013f8:	2398      	movs	r3, #152	; 0x98
100013fa:	009b      	lsls	r3, r3, #2
100013fc:	e7d3      	b.n	100013a6 <i2c_dw_transfer+0x146>
100013fe:	2005      	movs	r0, #5
10001400:	4240      	negs	r0, r0
10001402:	e7e7      	b.n	100013d4 <i2c_dw_transfer+0x174>
		return -EIO;
10001404:	2005      	movs	r0, #5
10001406:	e767      	b.n	100012d8 <i2c_dw_transfer+0x78>
10001408:	0000025f 	.word	0x0000025f
1000140c:	ffffefff 	.word	0xffffefff

10001410 <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
10001410:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10001412:	4903      	ldr	r1, [pc, #12]	; (10001420 <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
10001414:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10001416:	6b93      	ldr	r3, [r2, #56]	; 0x38
10001418:	400b      	ands	r3, r1
1000141a:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
1000141c:	4770      	bx	lr
1000141e:	46c0      	nop			; (mov r8, r8)
10001420:	fffff83f 	.word	0xfffff83f

10001424 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
10001424:	4b0a      	ldr	r3, [pc, #40]	; (10001450 <elapsed+0x2c>)
{
10001426:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
10001428:	6899      	ldr	r1, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
1000142a:	6818      	ldr	r0, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
1000142c:	4a09      	ldr	r2, [pc, #36]	; (10001454 <elapsed+0x30>)
1000142e:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
10001430:	4d09      	ldr	r5, [pc, #36]	; (10001458 <elapsed+0x34>)
10001432:	03c0      	lsls	r0, r0, #15
10001434:	d401      	bmi.n	1000143a <elapsed+0x16>
	    || (val1 < val2)) {
10001436:	42a1      	cmp	r1, r4
10001438:	d204      	bcs.n	10001444 <elapsed+0x20>
		overflow_cyc += last_load;
1000143a:	6811      	ldr	r1, [r2, #0]
1000143c:	6828      	ldr	r0, [r5, #0]
1000143e:	1809      	adds	r1, r1, r0
10001440:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
10001442:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
10001444:	682b      	ldr	r3, [r5, #0]
10001446:	6810      	ldr	r0, [r2, #0]
10001448:	18c0      	adds	r0, r0, r3
1000144a:	1b00      	subs	r0, r0, r4
}
1000144c:	bd30      	pop	{r4, r5, pc}
1000144e:	46c0      	nop			; (mov r8, r8)
10001450:	e000e010 	.word	0xe000e010
10001454:	20000268 	.word	0x20000268
10001458:	20000264 	.word	0x20000264

1000145c <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
1000145c:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000145e:	4a09      	ldr	r2, [pc, #36]	; (10001484 <sys_clock_driver_init+0x28>)
10001460:	6a13      	ldr	r3, [r2, #32]
10001462:	021b      	lsls	r3, r3, #8
10001464:	0a1b      	lsrs	r3, r3, #8
10001466:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
10001468:	4a07      	ldr	r2, [pc, #28]	; (10001488 <sys_clock_driver_init+0x2c>)
1000146a:	4b08      	ldr	r3, [pc, #32]	; (1000148c <sys_clock_driver_init+0x30>)
1000146c:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
1000146e:	4b08      	ldr	r3, [pc, #32]	; (10001490 <sys_clock_driver_init+0x34>)
10001470:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
10001472:	4b08      	ldr	r3, [pc, #32]	; (10001494 <sys_clock_driver_init+0x38>)
10001474:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10001476:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
10001478:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
1000147a:	6819      	ldr	r1, [r3, #0]
1000147c:	430a      	orrs	r2, r1
1000147e:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
10001480:	4770      	bx	lr
10001482:	46c0      	nop			; (mov r8, r8)
10001484:	e000ed00 	.word	0xe000ed00
10001488:	000030d3 	.word	0x000030d3
1000148c:	20000264 	.word	0x20000264
10001490:	20000268 	.word	0x20000268
10001494:	e000e010 	.word	0xe000e010

10001498 <sys_clock_isr>:
{
10001498:	b570      	push	{r4, r5, r6, lr}
	elapsed();
1000149a:	f7ff ffc3 	bl	10001424 <elapsed>
	cycle_count += overflow_cyc;
1000149e:	4b0b      	ldr	r3, [pc, #44]	; (100014cc <sys_clock_isr+0x34>)
100014a0:	4a0b      	ldr	r2, [pc, #44]	; (100014d0 <sys_clock_isr+0x38>)
100014a2:	6818      	ldr	r0, [r3, #0]
100014a4:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
100014a6:	4c0b      	ldr	r4, [pc, #44]	; (100014d4 <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
100014a8:	1840      	adds	r0, r0, r1
100014aa:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
100014ac:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
100014ae:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
100014b0:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
100014b2:	4909      	ldr	r1, [pc, #36]	; (100014d8 <sys_clock_isr+0x40>)
100014b4:	1b40      	subs	r0, r0, r5
100014b6:	f7fe fe95 	bl	100001e4 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
100014ba:	4b07      	ldr	r3, [pc, #28]	; (100014d8 <sys_clock_isr+0x40>)
100014bc:	4343      	muls	r3, r0
100014be:	195b      	adds	r3, r3, r5
100014c0:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
100014c2:	f001 f9d1 	bl	10002868 <sys_clock_announce>
	z_arm_int_exit();
100014c6:	f7ff fd39 	bl	10000f3c <z_arm_exc_exit>
}
100014ca:	bd70      	pop	{r4, r5, r6, pc}
100014cc:	20000268 	.word	0x20000268
100014d0:	20000260 	.word	0x20000260
100014d4:	2000025c 	.word	0x2000025c
100014d8:	000030d4 	.word	0x000030d4

100014dc <sys_clock_set_timeout>:
{
100014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100014de:	4d35      	ldr	r5, [pc, #212]	; (100015b4 <sys_clock_set_timeout+0xd8>)
100014e0:	4e35      	ldr	r6, [pc, #212]	; (100015b8 <sys_clock_set_timeout+0xdc>)
100014e2:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
100014e4:	2900      	cmp	r1, #0
100014e6:	d00a      	beq.n	100014fe <sys_clock_set_timeout+0x22>
100014e8:	1c43      	adds	r3, r0, #1
100014ea:	d108      	bne.n	100014fe <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
100014ec:	2201      	movs	r2, #1
100014ee:	682b      	ldr	r3, [r5, #0]
100014f0:	4393      	bics	r3, r2
100014f2:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
100014f4:	23ff      	movs	r3, #255	; 0xff
100014f6:	061b      	lsls	r3, r3, #24
100014f8:	6033      	str	r3, [r6, #0]
}
100014fa:	b005      	add	sp, #20
100014fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
100014fe:	6833      	ldr	r3, [r6, #0]
10001500:	9302      	str	r3, [sp, #8]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
10001502:	1c43      	adds	r3, r0, #1
10001504:	d037      	beq.n	10001576 <sys_clock_set_timeout+0x9a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
10001506:	2700      	movs	r7, #0
10001508:	2801      	cmp	r0, #1
1000150a:	dd04      	ble.n	10001516 <sys_clock_set_timeout+0x3a>
1000150c:	4b2b      	ldr	r3, [pc, #172]	; (100015bc <sys_clock_set_timeout+0xe0>)
1000150e:	001f      	movs	r7, r3
10001510:	4298      	cmp	r0, r3
10001512:	dc00      	bgt.n	10001516 <sys_clock_set_timeout+0x3a>
10001514:	1e47      	subs	r7, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
10001516:	f3ef 8310 	mrs	r3, PRIMASK
1000151a:	b672      	cpsid	i
1000151c:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
1000151e:	f7ff ff81 	bl	10001424 <elapsed>
	val1 = SysTick->VAL;
10001522:	68ab      	ldr	r3, [r5, #8]
10001524:	9300      	str	r3, [sp, #0]
	cycle_count += pending;
10001526:	4b26      	ldr	r3, [pc, #152]	; (100015c0 <sys_clock_set_timeout+0xe4>)
10001528:	681a      	ldr	r2, [r3, #0]
1000152a:	1884      	adds	r4, r0, r2
	overflow_cyc = 0U;
1000152c:	2200      	movs	r2, #0
	cycle_count += pending;
1000152e:	601c      	str	r4, [r3, #0]
	overflow_cyc = 0U;
10001530:	4b24      	ldr	r3, [pc, #144]	; (100015c4 <sys_clock_set_timeout+0xe8>)
10001532:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
10001534:	4b24      	ldr	r3, [pc, #144]	; (100015c8 <sys_clock_set_timeout+0xec>)
10001536:	681b      	ldr	r3, [r3, #0]
10001538:	9301      	str	r3, [sp, #4]
1000153a:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
1000153c:	4290      	cmp	r0, r2
1000153e:	da1c      	bge.n	1000157a <sys_clock_set_timeout+0x9e>
		last_load = MIN_DELAY;
10001540:	2380      	movs	r3, #128	; 0x80
10001542:	00db      	lsls	r3, r3, #3
			last_load = MAX_CYCLES;
10001544:	6033      	str	r3, [r6, #0]
	SysTick->LOAD = last_load - 1;
10001546:	6832      	ldr	r2, [r6, #0]
	val2 = SysTick->VAL;
10001548:	68ab      	ldr	r3, [r5, #8]
	SysTick->LOAD = last_load - 1;
1000154a:	3a01      	subs	r2, #1
1000154c:	606a      	str	r2, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
1000154e:	2200      	movs	r2, #0
10001550:	60aa      	str	r2, [r5, #8]
	if (val1 < val2) {
10001552:	9a00      	ldr	r2, [sp, #0]
10001554:	429a      	cmp	r2, r3
10001556:	d228      	bcs.n	100015aa <sys_clock_set_timeout+0xce>
		cycle_count += (val1 + (last_load_ - val2));
10001558:	9900      	ldr	r1, [sp, #0]
1000155a:	9a02      	ldr	r2, [sp, #8]
1000155c:	468c      	mov	ip, r1
1000155e:	4462      	add	r2, ip
10001560:	1ad0      	subs	r0, r2, r3
10001562:	1904      	adds	r4, r0, r4
10001564:	4b16      	ldr	r3, [pc, #88]	; (100015c0 <sys_clock_set_timeout+0xe4>)
10001566:	601c      	str	r4, [r3, #0]
	if (key != 0U) {
10001568:	9b03      	ldr	r3, [sp, #12]
1000156a:	2b00      	cmp	r3, #0
1000156c:	d1c5      	bne.n	100014fa <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
1000156e:	b662      	cpsie	i
10001570:	f3bf 8f6f 	isb	sy
10001574:	e7c1      	b.n	100014fa <sys_clock_set_timeout+0x1e>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
10001576:	4811      	ldr	r0, [pc, #68]	; (100015bc <sys_clock_set_timeout+0xe0>)
10001578:	e7cc      	b.n	10001514 <sys_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
1000157a:	4b14      	ldr	r3, [pc, #80]	; (100015cc <sys_clock_set_timeout+0xf0>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
1000157c:	4913      	ldr	r1, [pc, #76]	; (100015cc <sys_clock_set_timeout+0xf0>)
		delay = ticks * CYC_PER_TICK;
1000157e:	435f      	muls	r7, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10001580:	4b13      	ldr	r3, [pc, #76]	; (100015d0 <sys_clock_set_timeout+0xf4>)
		delay += unannounced;
10001582:	19c0      	adds	r0, r0, r7
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10001584:	18c0      	adds	r0, r0, r3
10001586:	f7fe fe2d 	bl	100001e4 <__udivsi3>
		delay =
1000158a:	4b10      	ldr	r3, [pc, #64]	; (100015cc <sys_clock_set_timeout+0xf0>)
		delay -= unannounced;
1000158c:	9a01      	ldr	r2, [sp, #4]
		delay =
1000158e:	4343      	muls	r3, r0
		delay -= unannounced;
10001590:	1b10      	subs	r0, r2, r4
10001592:	18c0      	adds	r0, r0, r3
		delay = MAX(delay, MIN_DELAY);
10001594:	2380      	movs	r3, #128	; 0x80
10001596:	00db      	lsls	r3, r3, #3
10001598:	4298      	cmp	r0, r3
1000159a:	d904      	bls.n	100015a6 <sys_clock_set_timeout+0xca>
		if (delay > MAX_CYCLES) {
1000159c:	4b0d      	ldr	r3, [pc, #52]	; (100015d4 <sys_clock_set_timeout+0xf8>)
1000159e:	4298      	cmp	r0, r3
100015a0:	d8d0      	bhi.n	10001544 <sys_clock_set_timeout+0x68>
			last_load = delay;
100015a2:	6030      	str	r0, [r6, #0]
100015a4:	e7cf      	b.n	10001546 <sys_clock_set_timeout+0x6a>
		delay = MAX(delay, MIN_DELAY);
100015a6:	0018      	movs	r0, r3
100015a8:	e7fb      	b.n	100015a2 <sys_clock_set_timeout+0xc6>
		cycle_count += (val1 - val2);
100015aa:	9a00      	ldr	r2, [sp, #0]
100015ac:	1ad3      	subs	r3, r2, r3
100015ae:	191c      	adds	r4, r3, r4
100015b0:	e7d8      	b.n	10001564 <sys_clock_set_timeout+0x88>
100015b2:	46c0      	nop			; (mov r8, r8)
100015b4:	e000e010 	.word	0xe000e010
100015b8:	20000264 	.word	0x20000264
100015bc:	0000053d 	.word	0x0000053d
100015c0:	20000260 	.word	0x20000260
100015c4:	20000268 	.word	0x20000268
100015c8:	2000025c 	.word	0x2000025c
100015cc:	000030d4 	.word	0x000030d4
100015d0:	000030d3 	.word	0x000030d3
100015d4:	00ffc684 	.word	0x00ffc684

100015d8 <sys_clock_elapsed>:
{
100015d8:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100015da:	f3ef 8410 	mrs	r4, PRIMASK
100015de:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
100015e0:	f7ff ff20 	bl	10001424 <elapsed>
100015e4:	4b07      	ldr	r3, [pc, #28]	; (10001604 <sys_clock_elapsed+0x2c>)
100015e6:	4a08      	ldr	r2, [pc, #32]	; (10001608 <sys_clock_elapsed+0x30>)
100015e8:	681b      	ldr	r3, [r3, #0]
100015ea:	6812      	ldr	r2, [r2, #0]
100015ec:	1a9b      	subs	r3, r3, r2
100015ee:	1818      	adds	r0, r3, r0
	if (key != 0U) {
100015f0:	2c00      	cmp	r4, #0
100015f2:	d102      	bne.n	100015fa <sys_clock_elapsed+0x22>
	__asm__ volatile(
100015f4:	b662      	cpsie	i
100015f6:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
100015fa:	4904      	ldr	r1, [pc, #16]	; (1000160c <sys_clock_elapsed+0x34>)
100015fc:	f7fe fdf2 	bl	100001e4 <__udivsi3>
}
10001600:	bd10      	pop	{r4, pc}
10001602:	46c0      	nop			; (mov r8, r8)
10001604:	20000260 	.word	0x20000260
10001608:	2000025c 	.word	0x2000025c
1000160c:	000030d4 	.word	0x000030d4

10001610 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
10001610:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
10001612:	6803      	ldr	r3, [r0, #0]
10001614:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
10001616:	7904      	ldrb	r4, [r0, #4]
10001618:	4b09      	ldr	r3, [pc, #36]	; (10001640 <pinctrl_lookup_state+0x30>)
1000161a:	18e4      	adds	r4, r4, r3
1000161c:	00e4      	lsls	r4, r4, #3
1000161e:	6805      	ldr	r5, [r0, #0]
10001620:	6813      	ldr	r3, [r2, #0]
10001622:	192d      	adds	r5, r5, r4
10001624:	42ab      	cmp	r3, r5
10001626:	d902      	bls.n	1000162e <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
10001628:	2002      	movs	r0, #2
1000162a:	4240      	negs	r0, r0
}
1000162c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
1000162e:	795d      	ldrb	r5, [r3, #5]
10001630:	428d      	cmp	r5, r1
10001632:	d002      	beq.n	1000163a <pinctrl_lookup_state+0x2a>
		(*state)++;
10001634:	3308      	adds	r3, #8
10001636:	6013      	str	r3, [r2, #0]
10001638:	e7f1      	b.n	1000161e <pinctrl_lookup_state+0xe>
			return 0;
1000163a:	2000      	movs	r0, #0
1000163c:	e7f6      	b.n	1000162c <pinctrl_lookup_state+0x1c>
1000163e:	46c0      	nop			; (mov r8, r8)
10001640:	1fffffff 	.word	0x1fffffff

10001644 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10001644:	b5f0      	push	{r4, r5, r6, r7, lr}
10001646:	b085      	sub	sp, #20
10001648:	9203      	str	r2, [sp, #12]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
1000164a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
1000164c:	0005      	movs	r5, r0
1000164e:	000f      	movs	r7, r1
        return false;
10001650:	2000      	movs	r0, #0
    if (freq > src_freq)
10001652:	429a      	cmp	r2, r3
10001654:	d840      	bhi.n	100016d8 <clock_configure+0x94>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10001656:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10001658:	0e1a      	lsrs	r2, r3, #24
1000165a:	021b      	lsls	r3, r3, #8
1000165c:	9202      	str	r2, [sp, #8]
1000165e:	9301      	str	r3, [sp, #4]
10001660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10001662:	0003      	movs	r3, r0
10001664:	9902      	ldr	r1, [sp, #8]
10001666:	9801      	ldr	r0, [sp, #4]
10001668:	f7fe fe22 	bl	100002b0 <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
1000166c:	436c      	muls	r4, r5
1000166e:	4b28      	ldr	r3, [pc, #160]	; (10001710 <clock_configure+0xcc>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10001670:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10001672:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10001674:	6863      	ldr	r3, [r4, #4]
10001676:	4283      	cmp	r3, r0
10001678:	d200      	bcs.n	1000167c <clock_configure+0x38>
        clock->div = div;
1000167a:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
1000167c:	1f2b      	subs	r3, r5, #4
1000167e:	b2db      	uxtb	r3, r3
10001680:	9300      	str	r3, [sp, #0]
10001682:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10001684:	9a00      	ldr	r2, [sp, #0]
10001686:	019b      	lsls	r3, r3, #6
10001688:	4323      	orrs	r3, r4
1000168a:	2a01      	cmp	r2, #1
1000168c:	d826      	bhi.n	100016dc <clock_configure+0x98>
1000168e:	2f01      	cmp	r7, #1
10001690:	d124      	bne.n	100016dc <clock_configure+0x98>
10001692:	2203      	movs	r2, #3
10001694:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
10001696:	68a3      	ldr	r3, [r4, #8]
10001698:	423b      	tst	r3, r7
1000169a:	d0fc      	beq.n	10001696 <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
1000169c:	9a03      	ldr	r2, [sp, #12]
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000169e:	6823      	ldr	r3, [r4, #0]
100016a0:	0152      	lsls	r2, r2, #5
100016a2:	405a      	eors	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100016a4:	2180      	movs	r1, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100016a6:	23e0      	movs	r3, #224	; 0xe0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100016a8:	0149      	lsls	r1, r1, #5
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100016aa:	401a      	ands	r2, r3
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
100016ac:	9b00      	ldr	r3, [sp, #0]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100016ae:	4321      	orrs	r1, r4
100016b0:	600a      	str	r2, [r1, #0]
100016b2:	2b01      	cmp	r3, #1
100016b4:	d921      	bls.n	100016fa <clock_configure+0xb6>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100016b6:	2380      	movs	r3, #128	; 0x80
100016b8:	2280      	movs	r2, #128	; 0x80
100016ba:	019b      	lsls	r3, r3, #6
100016bc:	4323      	orrs	r3, r4
100016be:	0112      	lsls	r2, r2, #4
100016c0:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
100016c2:	9801      	ldr	r0, [sp, #4]
100016c4:	2300      	movs	r3, #0
100016c6:	0032      	movs	r2, r6
100016c8:	9902      	ldr	r1, [sp, #8]
    clock->div = div;
100016ca:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
100016cc:	f7fe fdf0 	bl	100002b0 <__aeabi_uldivmod>
100016d0:	4b10      	ldr	r3, [pc, #64]	; (10001714 <clock_configure+0xd0>)
100016d2:	00ad      	lsls	r5, r5, #2
100016d4:	5158      	str	r0, [r3, r5]
100016d6:	2001      	movs	r0, #1

    return true;
}
100016d8:	b005      	add	sp, #20
100016da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100016dc:	2280      	movs	r2, #128	; 0x80
100016de:	0112      	lsls	r2, r2, #4
100016e0:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
100016e2:	4b0c      	ldr	r3, [pc, #48]	; (10001714 <clock_configure+0xd0>)
100016e4:	00aa      	lsls	r2, r5, #2
100016e6:	58d1      	ldr	r1, [r2, r3]
100016e8:	2900      	cmp	r1, #0
100016ea:	d0d7      	beq.n	1000169c <clock_configure+0x58>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100016ec:	6958      	ldr	r0, [r3, #20]
100016ee:	f7fe fd79 	bl	100001e4 <__udivsi3>
100016f2:	3001      	adds	r0, #1
            asm volatile (
100016f4:	3801      	subs	r0, #1
100016f6:	d1fd      	bne.n	100016f4 <clock_configure+0xb0>
100016f8:	e7d0      	b.n	1000169c <clock_configure+0x58>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100016fa:	2203      	movs	r2, #3
100016fc:	6823      	ldr	r3, [r4, #0]
100016fe:	407b      	eors	r3, r7
10001700:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001702:	600b      	str	r3, [r1, #0]
10001704:	2301      	movs	r3, #1
10001706:	40bb      	lsls	r3, r7
        while (!(clock->selected & (1u << src)))
10001708:	68a2      	ldr	r2, [r4, #8]
1000170a:	4213      	tst	r3, r2
1000170c:	d0fc      	beq.n	10001708 <clock_configure+0xc4>
1000170e:	e7d2      	b.n	100016b6 <clock_configure+0x72>
10001710:	40008000 	.word	0x40008000
10001714:	2000026c 	.word	0x2000026c

10001718 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10001718:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
1000171a:	200c      	movs	r0, #12
1000171c:	f000 f8da 	bl	100018d4 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10001720:	f000 f8e0 	bl	100018e4 <running_on_fpga>
10001724:	2800      	cmp	r0, #0
10001726:	d00a      	beq.n	1000173e <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
10001728:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
1000172a:	4a2b      	ldr	r2, [pc, #172]	; (100017d8 <clocks_init+0xc0>)
1000172c:	482b      	ldr	r0, [pc, #172]	; (100017dc <clocks_init+0xc4>)
1000172e:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
10001730:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
10001732:	5088      	str	r0, [r1, r2]
        for (uint i = 0; i < CLK_COUNT; i++) {
10001734:	2b0a      	cmp	r3, #10
10001736:	d1fa      	bne.n	1000172e <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
10001738:	4b29      	ldr	r3, [pc, #164]	; (100017e0 <clocks_init+0xc8>)
1000173a:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
1000173c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
1000173e:	4d29      	ldr	r5, [pc, #164]	; (100017e4 <clocks_init+0xcc>)
10001740:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
10001742:	f000 f8b3 	bl	100018ac <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001746:	2201      	movs	r2, #1
10001748:	4b27      	ldr	r3, [pc, #156]	; (100017e8 <clocks_init+0xd0>)
1000174a:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
1000174c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
1000174e:	2b01      	cmp	r3, #1
10001750:	d1fc      	bne.n	1000174c <clocks_init+0x34>
10001752:	2203      	movs	r2, #3
10001754:	4b25      	ldr	r3, [pc, #148]	; (100017ec <clocks_init+0xd4>)
10001756:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10001758:	6bac      	ldr	r4, [r5, #56]	; 0x38
1000175a:	2c01      	cmp	r4, #1
1000175c:	d1fc      	bne.n	10001758 <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
1000175e:	2502      	movs	r5, #2
10001760:	0021      	movs	r1, r4
10001762:	9500      	str	r5, [sp, #0]
10001764:	2306      	movs	r3, #6
10001766:	4a22      	ldr	r2, [pc, #136]	; (100017f0 <clocks_init+0xd8>)
10001768:	4822      	ldr	r0, [pc, #136]	; (100017f4 <clocks_init+0xdc>)
1000176a:	f000 f853 	bl	10001814 <pll_init>
    pll_init(pll_usb, 1, 480 * PICO_MHZ, 5, 2);
1000176e:	0021      	movs	r1, r4
10001770:	9500      	str	r5, [sp, #0]
10001772:	2305      	movs	r3, #5
10001774:	4a20      	ldr	r2, [pc, #128]	; (100017f8 <clocks_init+0xe0>)
10001776:	4821      	ldr	r0, [pc, #132]	; (100017fc <clocks_init+0xe4>)
10001778:	f000 f84c 	bl	10001814 <pll_init>
    clock_configure(clk_ref,
1000177c:	4b20      	ldr	r3, [pc, #128]	; (10001800 <clocks_init+0xe8>)
1000177e:	0029      	movs	r1, r5
    clock_configure(clk_sys,
10001780:	4d20      	ldr	r5, [pc, #128]	; (10001804 <clocks_init+0xec>)
    clock_configure(clk_ref,
10001782:	9300      	str	r3, [sp, #0]
10001784:	2200      	movs	r2, #0
10001786:	2004      	movs	r0, #4
10001788:	f7ff ff5c 	bl	10001644 <clock_configure>
    clock_configure(clk_sys,
1000178c:	002b      	movs	r3, r5
1000178e:	0021      	movs	r1, r4
10001790:	2200      	movs	r2, #0
10001792:	9500      	str	r5, [sp, #0]
10001794:	2005      	movs	r0, #5
10001796:	f7ff ff55 	bl	10001644 <clock_configure>
    clock_configure(clk_usb,
1000179a:	2200      	movs	r2, #0
1000179c:	4c0f      	ldr	r4, [pc, #60]	; (100017dc <clocks_init+0xc4>)
1000179e:	0011      	movs	r1, r2
100017a0:	0023      	movs	r3, r4
100017a2:	9400      	str	r4, [sp, #0]
100017a4:	2007      	movs	r0, #7
100017a6:	f7ff ff4d 	bl	10001644 <clock_configure>
    clock_configure(clk_adc,
100017aa:	2200      	movs	r2, #0
100017ac:	0023      	movs	r3, r4
100017ae:	0011      	movs	r1, r2
100017b0:	9400      	str	r4, [sp, #0]
100017b2:	2008      	movs	r0, #8
100017b4:	f7ff ff46 	bl	10001644 <clock_configure>
    clock_configure(clk_rtc,
100017b8:	2200      	movs	r2, #0
100017ba:	4b09      	ldr	r3, [pc, #36]	; (100017e0 <clocks_init+0xc8>)
100017bc:	0011      	movs	r1, r2
100017be:	9300      	str	r3, [sp, #0]
100017c0:	2009      	movs	r0, #9
100017c2:	0023      	movs	r3, r4
100017c4:	f7ff ff3e 	bl	10001644 <clock_configure>
    clock_configure(clk_peri,
100017c8:	2200      	movs	r2, #0
100017ca:	002b      	movs	r3, r5
100017cc:	0011      	movs	r1, r2
100017ce:	9500      	str	r5, [sp, #0]
100017d0:	2006      	movs	r0, #6
100017d2:	f7ff ff37 	bl	10001644 <clock_configure>
100017d6:	e7b1      	b.n	1000173c <clocks_init+0x24>
100017d8:	2000026c 	.word	0x2000026c
100017dc:	02dc6c00 	.word	0x02dc6c00
100017e0:	0000b71b 	.word	0x0000b71b
100017e4:	40008000 	.word	0x40008000
100017e8:	4000b03c 	.word	0x4000b03c
100017ec:	4000b030 	.word	0x4000b030
100017f0:	59682f00 	.word	0x59682f00
100017f4:	40028000 	.word	0x40028000
100017f8:	1c9c3800 	.word	0x1c9c3800
100017fc:	4002c000 	.word	0x4002c000
10001800:	00b71b00 	.word	0x00b71b00
10001804:	07735940 	.word	0x07735940

10001808 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10001808:	4b01      	ldr	r3, [pc, #4]	; (10001810 <clock_get_hz+0x8>)
1000180a:	0080      	lsls	r0, r0, #2
1000180c:	58c0      	ldr	r0, [r0, r3]
}
1000180e:	4770      	bx	lr
10001810:	2000026c 	.word	0x2000026c

10001814 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001816:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10001818:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
1000181a:	0017      	movs	r7, r2
1000181c:	001e      	movs	r6, r3
1000181e:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10001820:	f7fe fce0 	bl	100001e4 <__udivsi3>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
10001824:	491c      	ldr	r1, [pc, #112]	; (10001898 <pll_init+0x84>)
10001826:	4341      	muls	r1, r0
10001828:	0038      	movs	r0, r7
1000182a:	f7fe fcdb 	bl	100001e4 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
1000182e:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001830:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10001832:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001834:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10001836:	6822      	ldr	r2, [r4, #0]
10001838:	2a00      	cmp	r2, #0
1000183a:	da0c      	bge.n	10001856 <pll_init+0x42>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
1000183c:	213f      	movs	r1, #63	; 0x3f
1000183e:	6822      	ldr	r2, [r4, #0]
10001840:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10001842:	42aa      	cmp	r2, r5
10001844:	d107      	bne.n	10001856 <pll_init+0x42>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10001846:	68a2      	ldr	r2, [r4, #8]
10001848:	0512      	lsls	r2, r2, #20
1000184a:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
1000184c:	4282      	cmp	r2, r0
1000184e:	d102      	bne.n	10001856 <pll_init+0x42>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS & PLL_PRIM_POSTDIV2_BITS)))) {
10001850:	68e2      	ldr	r2, [r4, #12]
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10001852:	2b00      	cmp	r3, #0
10001854:	d01b      	beq.n	1000188e <pll_init+0x7a>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10001856:	4a11      	ldr	r2, [pc, #68]	; (1000189c <pll_init+0x88>)
10001858:	4294      	cmp	r4, r2
1000185a:	d019      	beq.n	10001890 <pll_init+0x7c>
1000185c:	2280      	movs	r2, #128	; 0x80
1000185e:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001860:	490f      	ldr	r1, [pc, #60]	; (100018a0 <pll_init+0x8c>)
10001862:	4e10      	ldr	r6, [pc, #64]	; (100018a4 <pll_init+0x90>)
10001864:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001866:	4910      	ldr	r1, [pc, #64]	; (100018a8 <pll_init+0x94>)
10001868:	600a      	str	r2, [r1, #0]
1000186a:	0017      	movs	r7, r2
1000186c:	68b1      	ldr	r1, [r6, #8]
1000186e:	438f      	bics	r7, r1
10001870:	d1fb      	bne.n	1000186a <pll_init+0x56>
10001872:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10001874:	1d21      	adds	r1, r4, #4
10001876:	0192      	lsls	r2, r2, #6
10001878:	430a      	orrs	r2, r1
1000187a:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
1000187c:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
1000187e:	60a0      	str	r0, [r4, #8]
10001880:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10001882:	6821      	ldr	r1, [r4, #0]
10001884:	2900      	cmp	r1, #0
10001886:	dafc      	bge.n	10001882 <pll_init+0x6e>

    // Set up post dividers
    pll->prim = pdiv;
10001888:	60e3      	str	r3, [r4, #12]
1000188a:	2308      	movs	r3, #8
1000188c:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
1000188e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10001890:	2280      	movs	r2, #128	; 0x80
10001892:	0192      	lsls	r2, r2, #6
10001894:	e7e4      	b.n	10001860 <pll_init+0x4c>
10001896:	46c0      	nop			; (mov r8, r8)
10001898:	000f4240 	.word	0x000f4240
1000189c:	4002c000 	.word	0x4002c000
100018a0:	4000e000 	.word	0x4000e000
100018a4:	4000c000 	.word	0x4000c000
100018a8:	4000f000 	.word	0x4000f000

100018ac <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
100018ac:	22aa      	movs	r2, #170	; 0xaa
100018ae:	4b06      	ldr	r3, [pc, #24]	; (100018c8 <xosc_init+0x1c>)
100018b0:	0112      	lsls	r2, r2, #4
100018b2:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
100018b4:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100018b6:	4905      	ldr	r1, [pc, #20]	; (100018cc <xosc_init+0x20>)
100018b8:	60da      	str	r2, [r3, #12]
100018ba:	4a05      	ldr	r2, [pc, #20]	; (100018d0 <xosc_init+0x24>)
100018bc:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
100018be:	685a      	ldr	r2, [r3, #4]
100018c0:	2a00      	cmp	r2, #0
100018c2:	dafc      	bge.n	100018be <xosc_init+0x12>
}
100018c4:	4770      	bx	lr
100018c6:	46c0      	nop			; (mov r8, r8)
100018c8:	40024000 	.word	0x40024000
100018cc:	00fab000 	.word	0x00fab000
100018d0:	40026000 	.word	0x40026000

100018d4 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
100018d4:	2380      	movs	r3, #128	; 0x80
100018d6:	4a02      	ldr	r2, [pc, #8]	; (100018e0 <watchdog_start_tick+0xc>)
100018d8:	009b      	lsls	r3, r3, #2
100018da:	4303      	orrs	r3, r0
100018dc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
100018de:	4770      	bx	lr
100018e0:	40058000 	.word	0x40058000

100018e4 <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
100018e4:	4b02      	ldr	r3, [pc, #8]	; (100018f0 <running_on_fpga+0xc>)
100018e6:	6818      	ldr	r0, [r3, #0]
100018e8:	0780      	lsls	r0, r0, #30
100018ea:	0fc0      	lsrs	r0, r0, #31
}
100018ec:	4770      	bx	lr
100018ee:	46c0      	nop			; (mov r8, r8)
100018f0:	4006c000 	.word	0x4006c000

100018f4 <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
100018f4:	4b08      	ldr	r3, [pc, #32]	; (10001918 <gpio_set_function+0x24>)
100018f6:	0082      	lsls	r2, r0, #2
100018f8:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100018fa:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
100018fc:	b510      	push	{r4, lr}
100018fe:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10001900:	00c0      	lsls	r0, r0, #3
10001902:	4063      	eors	r3, r4
10001904:	24c0      	movs	r4, #192	; 0xc0
10001906:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001908:	2480      	movs	r4, #128	; 0x80
1000190a:	0164      	lsls	r4, r4, #5
1000190c:	4322      	orrs	r2, r4
1000190e:	6013      	str	r3, [r2, #0]
10001910:	4b02      	ldr	r3, [pc, #8]	; (1000191c <gpio_set_function+0x28>)
10001912:	18c0      	adds	r0, r0, r3
10001914:	6041      	str	r1, [r0, #4]
}
10001916:	bd10      	pop	{r4, pc}
10001918:	4001c004 	.word	0x4001c004
1000191c:	40014000 	.word	0x40014000

10001920 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
10001920:	4b09      	ldr	r3, [pc, #36]	; (10001948 <gpio_set_pulls+0x28>)
10001922:	0080      	lsls	r0, r0, #2
10001924:	18c0      	adds	r0, r0, r3
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
10001926:	1e4b      	subs	r3, r1, #1
10001928:	4199      	sbcs	r1, r3
1000192a:	1e53      	subs	r3, r2, #1
1000192c:	419a      	sbcs	r2, r3
1000192e:	00c9      	lsls	r1, r1, #3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001930:	6803      	ldr	r3, [r0, #0]
10001932:	0092      	lsls	r2, r2, #2
    hw_write_masked(
10001934:	4311      	orrs	r1, r2
10001936:	4059      	eors	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001938:	2380      	movs	r3, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000193a:	220c      	movs	r2, #12
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000193c:	015b      	lsls	r3, r3, #5
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000193e:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001940:	4318      	orrs	r0, r3
10001942:	6001      	str	r1, [r0, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10001944:	4770      	bx	lr
10001946:	46c0      	nop			; (mov r8, r8)
10001948:	4001c004 	.word	0x4001c004

1000194c <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
1000194c:	4b05      	ldr	r3, [pc, #20]	; (10001964 <gpio_set_input_hysteresis_enabled+0x18>)
1000194e:	0080      	lsls	r0, r0, #2
10001950:	18c0      	adds	r0, r0, r3
10001952:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001954:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10001956:	2900      	cmp	r1, #0
10001958:	d100      	bne.n	1000195c <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000195a:	23c0      	movs	r3, #192	; 0xc0
1000195c:	019b      	lsls	r3, r3, #6
1000195e:	4318      	orrs	r0, r3
10001960:	6002      	str	r2, [r0, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
10001962:	4770      	bx	lr
10001964:	4001c004 	.word	0x4001c004

10001968 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
10001968:	4b05      	ldr	r3, [pc, #20]	; (10001980 <gpio_set_slew_rate+0x18>)
1000196a:	0080      	lsls	r0, r0, #2
1000196c:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000196e:	6803      	ldr	r3, [r0, #0]
10001970:	4059      	eors	r1, r3
10001972:	2301      	movs	r3, #1
10001974:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001976:	2380      	movs	r3, #128	; 0x80
10001978:	015b      	lsls	r3, r3, #5
1000197a:	4318      	orrs	r0, r3
1000197c:	6001      	str	r1, [r0, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
1000197e:	4770      	bx	lr
10001980:	4001c004 	.word	0x4001c004

10001984 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
10001984:	4b06      	ldr	r3, [pc, #24]	; (100019a0 <gpio_set_drive_strength+0x1c>)
10001986:	0080      	lsls	r0, r0, #2
10001988:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000198a:	6803      	ldr	r3, [r0, #0]
1000198c:	0109      	lsls	r1, r1, #4
1000198e:	4059      	eors	r1, r3
10001990:	2330      	movs	r3, #48	; 0x30
10001992:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001994:	2380      	movs	r3, #128	; 0x80
10001996:	015b      	lsls	r3, r3, #5
10001998:	4318      	orrs	r0, r3
1000199a:	6001      	str	r1, [r0, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
1000199c:	4770      	bx	lr
1000199e:	46c0      	nop			; (mov r8, r8)
100019a0:	4001c004 	.word	0x4001c004

100019a4 <gpio_acknowledge_irq>:
    io_irq_ctrl_hw_t *irq_ctrl_base = &iobank0_hw->dormant_wake_irq_ctrl;
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    iobank0_hw->intr[gpio / 8] = events << 4 * (gpio % 8);
100019a4:	2207      	movs	r2, #7
100019a6:	08c3      	lsrs	r3, r0, #3
100019a8:	4010      	ands	r0, r2
100019aa:	0080      	lsls	r0, r0, #2
100019ac:	4081      	lsls	r1, r0
100019ae:	4a02      	ldr	r2, [pc, #8]	; (100019b8 <gpio_acknowledge_irq+0x14>)
100019b0:	333c      	adds	r3, #60	; 0x3c
100019b2:	009b      	lsls	r3, r3, #2
100019b4:	5099      	str	r1, [r3, r2]
}
100019b6:	4770      	bx	lr
100019b8:	40014000 	.word	0x40014000

100019bc <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100019bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
100019be:	23d0      	movs	r3, #208	; 0xd0
100019c0:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
100019c2:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100019c4:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
100019c6:	1e63      	subs	r3, r4, #1
100019c8:	419c      	sbcs	r4, r3
100019ca:	2030      	movs	r0, #48	; 0x30
100019cc:	4b0b      	ldr	r3, [pc, #44]	; (100019fc <gpio_set_irq_enabled+0x40>)
100019ce:	4264      	negs	r4, r4
100019d0:	4004      	ands	r4, r0
    gpio_acknowledge_irq(gpio, events);
100019d2:	0028      	movs	r0, r5
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
100019d4:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100019d6:	000f      	movs	r7, r1
100019d8:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
100019da:	f7ff ffe3 	bl	100019a4 <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
100019de:	2307      	movs	r3, #7
100019e0:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100019e2:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
100019e4:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100019e6:	00ad      	lsls	r5, r5, #2
100019e8:	1965      	adds	r5, r4, r5
    events <<= 4 * (gpio % 8);
100019ea:	409f      	lsls	r7, r3
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100019ec:	2480      	movs	r4, #128	; 0x80
    if (enabled)
100019ee:	2e00      	cmp	r6, #0
100019f0:	d100      	bne.n	100019f4 <gpio_set_irq_enabled+0x38>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100019f2:	24c0      	movs	r4, #192	; 0xc0
100019f4:	01a4      	lsls	r4, r4, #6
100019f6:	4325      	orrs	r5, r4
100019f8:	602f      	str	r7, [r5, #0]
}
100019fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100019fc:	40014100 	.word	0x40014100

10001a00 <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
10001a00:	4b05      	ldr	r3, [pc, #20]	; (10001a18 <gpio_set_input_enabled+0x18>)
10001a02:	0080      	lsls	r0, r0, #2
10001a04:	18c0      	adds	r0, r0, r3
10001a06:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001a08:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10001a0a:	2900      	cmp	r1, #0
10001a0c:	d100      	bne.n	10001a10 <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001a0e:	23c0      	movs	r3, #192	; 0xc0
10001a10:	019b      	lsls	r3, r3, #6
10001a12:	4318      	orrs	r0, r3
10001a14:	6002      	str	r2, [r0, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
10001a16:	4770      	bx	lr
10001a18:	4001c004 	.word	0x4001c004

10001a1c <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10001a1c:	b570      	push	{r4, r5, r6, lr}
10001a1e:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10001a20:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10001a22:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10001a24:	f7ff fef0 	bl	10001808 <clock_get_hz>
10001a28:	0021      	movs	r1, r4
10001a2a:	00c0      	lsls	r0, r0, #3
10001a2c:	f7fe fbda 	bl	100001e4 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
10001a30:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
10001a32:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
10001a34:	d007      	beq.n	10001a46 <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
10001a36:	4b0e      	ldr	r3, [pc, #56]	; (10001a70 <uart_set_baudrate+0x54>)
10001a38:	429d      	cmp	r5, r3
10001a3a:	d815      	bhi.n	10001a68 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
10001a3c:	237f      	movs	r3, #127	; 0x7f
10001a3e:	4018      	ands	r0, r3
10001a40:	1900      	adds	r0, r0, r4
10001a42:	002c      	movs	r4, r5
10001a44:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001a46:	2080      	movs	r0, #128	; 0x80
10001a48:	2300      	movs	r3, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
10001a4a:	6274      	str	r4, [r6, #36]	; 0x24
10001a4c:	0180      	lsls	r0, r0, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
10001a4e:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
10001a50:	362c      	adds	r6, #44	; 0x2c
10001a52:	4306      	orrs	r6, r0
10001a54:	6033      	str	r3, [r6, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
10001a56:	2006      	movs	r0, #6
10001a58:	f7ff fed6 	bl	10001808 <clock_get_hz>
10001a5c:	01a1      	lsls	r1, r4, #6
10001a5e:	1949      	adds	r1, r1, r5
10001a60:	0080      	lsls	r0, r0, #2
10001a62:	f7fe fbbf 	bl	100001e4 <__udivsi3>
}
10001a66:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
10001a68:	2500      	movs	r5, #0
        baud_ibrd = 65535;
10001a6a:	4c02      	ldr	r4, [pc, #8]	; (10001a74 <uart_set_baudrate+0x58>)
10001a6c:	e7eb      	b.n	10001a46 <uart_set_baudrate+0x2a>
10001a6e:	46c0      	nop			; (mov r8, r8)
10001a70:	0000fffe 	.word	0x0000fffe
10001a74:	0000ffff 	.word	0x0000ffff

10001a78 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
10001a78:	b570      	push	{r4, r5, r6, lr}
10001a7a:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
10001a7c:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
10001a7e:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
10001a80:	f7ff fec2 	bl	10001808 <clock_get_hz>
10001a84:	2800      	cmp	r0, #0
10001a86:	d02e      	beq.n	10001ae6 <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10001a88:	4b19      	ldr	r3, [pc, #100]	; (10001af0 <uart_init+0x78>)
10001a8a:	429c      	cmp	r4, r3
10001a8c:	d02c      	beq.n	10001ae8 <uart_init+0x70>
10001a8e:	2380      	movs	r3, #128	; 0x80
10001a90:	03db      	lsls	r3, r3, #15
10001a92:	4a18      	ldr	r2, [pc, #96]	; (10001af4 <uart_init+0x7c>)
10001a94:	4918      	ldr	r1, [pc, #96]	; (10001af8 <uart_init+0x80>)
10001a96:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001a98:	4a18      	ldr	r2, [pc, #96]	; (10001afc <uart_init+0x84>)
10001a9a:	6013      	str	r3, [r2, #0]
10001a9c:	0018      	movs	r0, r3
10001a9e:	688a      	ldr	r2, [r1, #8]
10001aa0:	4390      	bics	r0, r2
10001aa2:	d1fb      	bne.n	10001a9c <uart_init+0x24>
 * \param uart UART instance
 * \return Number of UART, 0 or 1.
 */
static inline uint uart_get_index(uart_inst_t *uart) {
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    return uart == uart1 ? 1 : 0;
10001aa4:	4b16      	ldr	r3, [pc, #88]	; (10001b00 <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10001aa6:	2180      	movs	r1, #128	; 0x80
10001aa8:	18e3      	adds	r3, r4, r3
10001aaa:	425a      	negs	r2, r3
10001aac:	4153      	adcs	r3, r2
10001aae:	4a15      	ldr	r2, [pc, #84]	; (10001b04 <uart_init+0x8c>)
10001ab0:	005b      	lsls	r3, r3, #1
10001ab2:	0049      	lsls	r1, r1, #1
10001ab4:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
10001ab6:	0020      	movs	r0, r4
10001ab8:	0029      	movs	r1, r5
10001aba:	f7ff ffaf 	bl	10001a1c <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001abe:	2360      	movs	r3, #96	; 0x60
10001ac0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 */
static inline void uart_set_format(uart_inst_t *uart, uint data_bits, uint stop_bits, uart_parity_t parity) {
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10001ac2:	0021      	movs	r1, r4
10001ac4:	4053      	eors	r3, r2
10001ac6:	226e      	movs	r2, #110	; 0x6e
10001ac8:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001aca:	2280      	movs	r2, #128	; 0x80
10001acc:	312c      	adds	r1, #44	; 0x2c
10001ace:	0152      	lsls	r2, r2, #5
10001ad0:	430a      	orrs	r2, r1
10001ad2:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
10001ad4:	4b0c      	ldr	r3, [pc, #48]	; (10001b08 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001ad6:	2210      	movs	r2, #16
10001ad8:	6323      	str	r3, [r4, #48]	; 0x30
10001ada:	2380      	movs	r3, #128	; 0x80
10001adc:	019b      	lsls	r3, r3, #6
10001ade:	430b      	orrs	r3, r1
10001ae0:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
10001ae2:	2303      	movs	r3, #3
10001ae4:	64a3      	str	r3, [r4, #72]	; 0x48
}
10001ae6:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10001ae8:	2380      	movs	r3, #128	; 0x80
10001aea:	041b      	lsls	r3, r3, #16
10001aec:	e7d1      	b.n	10001a92 <uart_init+0x1a>
10001aee:	46c0      	nop			; (mov r8, r8)
10001af0:	40038000 	.word	0x40038000
10001af4:	4000e000 	.word	0x4000e000
10001af8:	4000c000 	.word	0x4000c000
10001afc:	4000f000 	.word	0x4000f000
10001b00:	bffc8000 	.word	0xbffc8000
10001b04:	200002d0 	.word	0x200002d0
10001b08:	00000301 	.word	0x00000301

10001b0c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
10001b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10001b0e:	4f0f      	ldr	r7, [pc, #60]	; (10001b4c <z_sys_init_run_level+0x40>)
10001b10:	0083      	lsls	r3, r0, #2
10001b12:	59dd      	ldr	r5, [r3, r7]
10001b14:	3001      	adds	r0, #1
10001b16:	0084      	lsls	r4, r0, #2
10001b18:	593b      	ldr	r3, [r7, r4]
10001b1a:	42ab      	cmp	r3, r5
10001b1c:	d800      	bhi.n	10001b20 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
10001b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
10001b20:	686e      	ldr	r6, [r5, #4]
		int rc = entry->init(dev);
10001b22:	682b      	ldr	r3, [r5, #0]
10001b24:	0030      	movs	r0, r6
10001b26:	4798      	blx	r3
		if (dev != NULL) {
10001b28:	2e00      	cmp	r6, #0
10001b2a:	d00d      	beq.n	10001b48 <z_sys_init_run_level+0x3c>
				dev->state->init_res = rc;
10001b2c:	68f3      	ldr	r3, [r6, #12]
			if (rc != 0) {
10001b2e:	2800      	cmp	r0, #0
10001b30:	d006      	beq.n	10001b40 <z_sys_init_run_level+0x34>
				dev->state->init_res = rc;
10001b32:	17c2      	asrs	r2, r0, #31
10001b34:	1880      	adds	r0, r0, r2
10001b36:	4050      	eors	r0, r2
10001b38:	28ff      	cmp	r0, #255	; 0xff
10001b3a:	dd00      	ble.n	10001b3e <z_sys_init_run_level+0x32>
10001b3c:	20ff      	movs	r0, #255	; 0xff
10001b3e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
10001b40:	2101      	movs	r1, #1
10001b42:	785a      	ldrb	r2, [r3, #1]
10001b44:	430a      	orrs	r2, r1
10001b46:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10001b48:	3508      	adds	r5, #8
10001b4a:	e7e5      	b.n	10001b18 <z_sys_init_run_level+0xc>
10001b4c:	10003a54 	.word	0x10003a54

10001b50 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
10001b50:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
10001b52:	2401      	movs	r4, #1
10001b54:	4b09      	ldr	r3, [pc, #36]	; (10001b7c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
10001b56:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
10001b58:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
10001b5a:	f7ff ffd7 	bl	10001b0c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
10001b5e:	f000 ffa5 	bl	10002aac <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
10001b62:	2003      	movs	r0, #3
10001b64:	f7ff ffd2 	bl	10001b0c <z_sys_init_run_level>

	z_init_static_threads();
10001b68:	f000 f8fa 	bl	10001d60 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
10001b6c:	f7fe fc78 	bl	10000460 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
10001b70:	4a03      	ldr	r2, [pc, #12]	; (10001b80 <bg_thread_main+0x30>)
10001b72:	7b13      	ldrb	r3, [r2, #12]
10001b74:	43a3      	bics	r3, r4
10001b76:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
10001b78:	bd10      	pop	{r4, pc}
10001b7a:	46c0      	nop			; (mov r8, r8)
10001b7c:	200002d4 	.word	0x200002d4
10001b80:	200000e8 	.word	0x200000e8

10001b84 <z_bss_zero>:
{
10001b84:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
10001b86:	4803      	ldr	r0, [pc, #12]	; (10001b94 <z_bss_zero+0x10>)
10001b88:	4a03      	ldr	r2, [pc, #12]	; (10001b98 <z_bss_zero+0x14>)
10001b8a:	2100      	movs	r1, #0
10001b8c:	1a12      	subs	r2, r2, r0
10001b8e:	f001 fc87 	bl	100034a0 <z_early_memset>
}
10001b92:	bd10      	pop	{r4, pc}
10001b94:	20000078 	.word	0x20000078
10001b98:	200002d8 	.word	0x200002d8

10001b9c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
10001b9c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
10001b9e:	2670      	movs	r6, #112	; 0x70
10001ba0:	4346      	muls	r6, r0
10001ba2:	4b13      	ldr	r3, [pc, #76]	; (10001bf0 <z_init_cpu+0x54>)
{
10001ba4:	0004      	movs	r4, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
10001ba6:	4913      	ldr	r1, [pc, #76]	; (10001bf4 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001ba8:	2518      	movs	r5, #24
	struct k_thread *thread = &z_idle_threads[i];
10001baa:	199e      	adds	r6, r3, r6
	k_thread_stack_t *stack = z_idle_stacks[i];
10001bac:	0203      	lsls	r3, r0, #8
10001bae:	1859      	adds	r1, r3, r1
	z_setup_new_thread(thread, stack,
10001bb0:	2300      	movs	r3, #0
10001bb2:	2001      	movs	r0, #1
10001bb4:	2280      	movs	r2, #128	; 0x80
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001bb6:	4365      	muls	r5, r4
{
10001bb8:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
10001bba:	9305      	str	r3, [sp, #20]
10001bbc:	9302      	str	r3, [sp, #8]
10001bbe:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001bc0:	4b0d      	ldr	r3, [pc, #52]	; (10001bf8 <z_init_cpu+0x5c>)
	z_setup_new_thread(thread, stack,
10001bc2:	9004      	str	r0, [sp, #16]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001bc4:	195d      	adds	r5, r3, r5
	z_setup_new_thread(thread, stack,
10001bc6:	300e      	adds	r0, #14
10001bc8:	9003      	str	r0, [sp, #12]
10001bca:	4b0c      	ldr	r3, [pc, #48]	; (10001bfc <z_init_cpu+0x60>)
10001bcc:	0030      	movs	r0, r6
10001bce:	9500      	str	r5, [sp, #0]
10001bd0:	0052      	lsls	r2, r2, #1
10001bd2:	f000 f86f 	bl	10001cb4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
10001bd6:	2204      	movs	r2, #4
10001bd8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10001bda:	4809      	ldr	r0, [pc, #36]	; (10001c00 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
10001bdc:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10001bde:	3401      	adds	r4, #1
10001be0:	02e4      	lsls	r4, r4, #11
10001be2:	4393      	bics	r3, r2
10001be4:	1824      	adds	r4, r4, r0
10001be6:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
10001be8:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
10001bea:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
10001bec:	b006      	add	sp, #24
10001bee:	bd70      	pop	{r4, r5, r6, pc}
10001bf0:	20000078 	.word	0x20000078
10001bf4:	200006d8 	.word	0x200006d8
10001bf8:	20000294 	.word	0x20000294
10001bfc:	100034cb 	.word	0x100034cb
10001c00:	200007d8 	.word	0x200007d8

10001c04 <z_cstart>:
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
10001c04:	2280      	movs	r2, #128	; 0x80
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
10001c06:	b5f0      	push	{r4, r5, r6, r7, lr}
10001c08:	4b22      	ldr	r3, [pc, #136]	; (10001c94 <z_cstart+0x90>)
10001c0a:	0112      	lsls	r2, r2, #4
10001c0c:	b0a3      	sub	sp, #140	; 0x8c
10001c0e:	189b      	adds	r3, r3, r2
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
10001c10:	f383 8808 	msr	MSP, r3
10001c14:	4920      	ldr	r1, [pc, #128]	; (10001c98 <z_cstart+0x94>)
10001c16:	4a21      	ldr	r2, [pc, #132]	; (10001c9c <z_cstart+0x98>)
10001c18:	6a0b      	ldr	r3, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
10001c1a:	2400      	movs	r4, #0
10001c1c:	401a      	ands	r2, r3
10001c1e:	23e0      	movs	r3, #224	; 0xe0
10001c20:	041b      	lsls	r3, r3, #16
10001c22:	4313      	orrs	r3, r2
10001c24:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
10001c26:	f001 f826 	bl	10002c76 <z_arm_fault_init>
	z_arm_cpu_idle_init();
10001c2a:	f7ff f897 	bl	10000d5c <z_arm_cpu_idle_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
10001c2e:	2202      	movs	r2, #2
#endif

	_current_cpu->current = dummy_thread;
10001c30:	4e1b      	ldr	r6, [pc, #108]	; (10001ca0 <z_cstart+0x9c>)
	dummy_thread->base.user_options = K_ESSENTIAL;
10001c32:	ab06      	add	r3, sp, #24
10001c34:	32ff      	adds	r2, #255	; 0xff
10001c36:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
10001c38:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
10001c3a:	941f      	str	r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
10001c3c:	f001 fc06 	bl	1000344c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
10001c40:	0020      	movs	r0, r4
10001c42:	f7ff ff63 	bl	10001b0c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
10001c46:	2001      	movs	r0, #1
10001c48:	f7ff ff60 	bl	10001b0c <z_sys_init_run_level>
	z_sched_init();
10001c4c:	f000 fc10 	bl	10002470 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10001c50:	4d14      	ldr	r5, [pc, #80]	; (10001ca4 <z_cstart+0xa0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10001c52:	4b15      	ldr	r3, [pc, #84]	; (10001ca8 <z_cstart+0xa4>)
	_kernel.ready_q.cache = &z_main_thread;
10001c54:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10001c56:	2280      	movs	r2, #128	; 0x80
10001c58:	9305      	str	r3, [sp, #20]
10001c5a:	2301      	movs	r3, #1
10001c5c:	4f13      	ldr	r7, [pc, #76]	; (10001cac <z_cstart+0xa8>)
10001c5e:	4914      	ldr	r1, [pc, #80]	; (10001cb0 <z_cstart+0xac>)
10001c60:	9304      	str	r3, [sp, #16]
10001c62:	00d2      	lsls	r2, r2, #3
10001c64:	003b      	movs	r3, r7
10001c66:	0028      	movs	r0, r5
10001c68:	9403      	str	r4, [sp, #12]
10001c6a:	9402      	str	r4, [sp, #8]
10001c6c:	9401      	str	r4, [sp, #4]
10001c6e:	9400      	str	r4, [sp, #0]
10001c70:	f000 f820 	bl	10001cb4 <z_setup_new_thread>
10001c74:	2204      	movs	r2, #4
10001c76:	0006      	movs	r6, r0
10001c78:	7b6b      	ldrb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
10001c7a:	0028      	movs	r0, r5
10001c7c:	4393      	bics	r3, r2
10001c7e:	736b      	strb	r3, [r5, #13]
10001c80:	f001 fc9e 	bl	100035c0 <z_ready_thread>
	z_init_cpu(0);
10001c84:	0020      	movs	r0, r4
10001c86:	f7ff ff89 	bl	10001b9c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
10001c8a:	003a      	movs	r2, r7
10001c8c:	0031      	movs	r1, r6
10001c8e:	0028      	movs	r0, r5
10001c90:	f7ff f930 	bl	10000ef4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
10001c94:	200007d8 	.word	0x200007d8
10001c98:	e000ed00 	.word	0xe000ed00
10001c9c:	ff00ffff 	.word	0xff00ffff
10001ca0:	20000294 	.word	0x20000294
10001ca4:	200000e8 	.word	0x200000e8
10001ca8:	10003a9d 	.word	0x10003a9d
10001cac:	10001b51 	.word	0x10001b51
10001cb0:	200002d8 	.word	0x200002d8

10001cb4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
10001cb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
10001cb6:	0004      	movs	r4, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10001cb8:	1dd5      	adds	r5, r2, #7
10001cba:	2207      	movs	r2, #7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
10001cbc:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
10001cbe:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10001cc0:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
10001cc2:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
10001cc4:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
10001cc6:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
10001cc8:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10001cca:	4395      	bics	r5, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
10001cce:	7360      	strb	r0, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001cd0:	9202      	str	r2, [sp, #8]
10001cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24

	thread_base->prio = priority;
10001cd4:	980b      	ldr	r0, [sp, #44]	; 0x2c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001cd6:	9201      	str	r2, [sp, #4]
10001cd8:	9a08      	ldr	r2, [sp, #32]
	stack_ptr = (char *)stack + stack_obj_size;
10001cda:	194d      	adds	r5, r1, r5
	thread_base->prio = priority;
10001cdc:	73a0      	strb	r0, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001cde:	9200      	str	r2, [sp, #0]
10001ce0:	0020      	movs	r0, r4
10001ce2:	002a      	movs	r2, r5
	thread_base->pended_on = NULL;
10001ce4:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
10001ce6:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
10001ce8:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
10001cea:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001cec:	f7ff f8ec 	bl	10000ec8 <arch_new_thread>
	if (!_current) {
10001cf0:	4b04      	ldr	r3, [pc, #16]	; (10001d04 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
10001cf2:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
10001cf4:	689b      	ldr	r3, [r3, #8]
10001cf6:	42b3      	cmp	r3, r6
10001cf8:	d000      	beq.n	10001cfc <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
10001cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
10001cfc:	0028      	movs	r0, r5
10001cfe:	6663      	str	r3, [r4, #100]	; 0x64
10001d00:	b004      	add	sp, #16
10001d02:	bd70      	pop	{r4, r5, r6, pc}
10001d04:	20000294 	.word	0x20000294

10001d08 <z_impl_k_thread_create>:
{
10001d08:	b570      	push	{r4, r5, r6, lr}
10001d0a:	0004      	movs	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10001d0c:	2000      	movs	r0, #0
{
10001d0e:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10001d10:	9005      	str	r0, [sp, #20]
10001d12:	980e      	ldr	r0, [sp, #56]	; 0x38
{
10001d14:	9d11      	ldr	r5, [sp, #68]	; 0x44
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10001d16:	9004      	str	r0, [sp, #16]
10001d18:	980d      	ldr	r0, [sp, #52]	; 0x34
{
10001d1a:	9e10      	ldr	r6, [sp, #64]	; 0x40
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10001d1c:	9003      	str	r0, [sp, #12]
10001d1e:	980c      	ldr	r0, [sp, #48]	; 0x30
10001d20:	9002      	str	r0, [sp, #8]
10001d22:	980b      	ldr	r0, [sp, #44]	; 0x2c
10001d24:	9001      	str	r0, [sp, #4]
10001d26:	980a      	ldr	r0, [sp, #40]	; 0x28
10001d28:	9000      	str	r0, [sp, #0]
10001d2a:	0020      	movs	r0, r4
10001d2c:	f7ff ffc2 	bl	10001cb4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
10001d30:	002b      	movs	r3, r5
10001d32:	1c72      	adds	r2, r6, #1
10001d34:	d101      	bne.n	10001d3a <z_impl_k_thread_create+0x32>
10001d36:	3301      	adds	r3, #1
10001d38:	d005      	beq.n	10001d46 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10001d3a:	002b      	movs	r3, r5
10001d3c:	4333      	orrs	r3, r6
10001d3e:	d105      	bne.n	10001d4c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
10001d40:	0020      	movs	r0, r4
10001d42:	f000 faf1 	bl	10002328 <z_sched_start>
}
10001d46:	0020      	movs	r0, r4
10001d48:	b006      	add	sp, #24
10001d4a:	bd70      	pop	{r4, r5, r6, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10001d4c:	0020      	movs	r0, r4
10001d4e:	0032      	movs	r2, r6
10001d50:	002b      	movs	r3, r5
10001d52:	4902      	ldr	r1, [pc, #8]	; (10001d5c <z_impl_k_thread_create+0x54>)
10001d54:	3018      	adds	r0, #24
10001d56:	f000 fd0f 	bl	10002778 <z_add_timeout>
10001d5a:	e7f4      	b.n	10001d46 <z_impl_k_thread_create+0x3e>
10001d5c:	100035d9 	.word	0x100035d9

10001d60 <z_init_static_threads>:
{
10001d60:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
10001d62:	4c20      	ldr	r4, [pc, #128]	; (10001de4 <z_init_static_threads+0x84>)
{
10001d64:	b086      	sub	sp, #24
10001d66:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
10001d68:	4d1f      	ldr	r5, [pc, #124]	; (10001de8 <z_init_static_threads+0x88>)
10001d6a:	42ac      	cmp	r4, r5
10001d6c:	d308      	bcc.n	10001d80 <z_init_static_threads+0x20>
	k_sched_lock();
10001d6e:	f000 f9f9 	bl	10002164 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
10001d72:	0034      	movs	r4, r6
10001d74:	42ac      	cmp	r4, r5
10001d76:	d319      	bcc.n	10001dac <z_init_static_threads+0x4c>
	k_sched_unlock();
10001d78:	f000 fb64 	bl	10002444 <k_sched_unlock>
}
10001d7c:	b006      	add	sp, #24
10001d7e:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
10001d80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
10001d82:	9305      	str	r3, [sp, #20]
10001d84:	6a23      	ldr	r3, [r4, #32]
10001d86:	9304      	str	r3, [sp, #16]
10001d88:	69e3      	ldr	r3, [r4, #28]
10001d8a:	9303      	str	r3, [sp, #12]
10001d8c:	69a3      	ldr	r3, [r4, #24]
10001d8e:	9302      	str	r3, [sp, #8]
10001d90:	6963      	ldr	r3, [r4, #20]
10001d92:	9301      	str	r3, [sp, #4]
10001d94:	6923      	ldr	r3, [r4, #16]
10001d96:	9300      	str	r3, [sp, #0]
10001d98:	68e3      	ldr	r3, [r4, #12]
10001d9a:	68a2      	ldr	r2, [r4, #8]
10001d9c:	6861      	ldr	r1, [r4, #4]
10001d9e:	6820      	ldr	r0, [r4, #0]
10001da0:	f7ff ff88 	bl	10001cb4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
10001da4:	6823      	ldr	r3, [r4, #0]
10001da6:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
10001da8:	3430      	adds	r4, #48	; 0x30
10001daa:	e7dd      	b.n	10001d68 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10001dac:	6a60      	ldr	r0, [r4, #36]	; 0x24
10001dae:	1c43      	adds	r3, r0, #1
10001db0:	d00f      	beq.n	10001dd2 <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
10001db2:	43c3      	mvns	r3, r0
10001db4:	17db      	asrs	r3, r3, #31
10001db6:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
10001db8:	220a      	movs	r2, #10
10001dba:	2300      	movs	r3, #0
10001dbc:	17c1      	asrs	r1, r0, #31
10001dbe:	f7fe fabb 	bl	10000338 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
10001dc2:	6826      	ldr	r6, [r4, #0]
10001dc4:	000b      	movs	r3, r1
10001dc6:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10001dc8:	4301      	orrs	r1, r0
10001dca:	d104      	bne.n	10001dd6 <z_init_static_threads+0x76>
	z_sched_start(thread);
10001dcc:	0030      	movs	r0, r6
10001dce:	f000 faab 	bl	10002328 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
10001dd2:	3430      	adds	r4, #48	; 0x30
10001dd4:	e7ce      	b.n	10001d74 <z_init_static_threads+0x14>
10001dd6:	0030      	movs	r0, r6
10001dd8:	4904      	ldr	r1, [pc, #16]	; (10001dec <z_init_static_threads+0x8c>)
10001dda:	3018      	adds	r0, #24
10001ddc:	f000 fccc 	bl	10002778 <z_add_timeout>
10001de0:	e7f7      	b.n	10001dd2 <z_init_static_threads+0x72>
10001de2:	46c0      	nop			; (mov r8, r8)
10001de4:	20000040 	.word	0x20000040
10001de8:	20000040 	.word	0x20000040
10001dec:	100035d9 	.word	0x100035d9

10001df0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
10001df0:	b570      	push	{r4, r5, r6, lr}
10001df2:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10001df4:	f3ef 8510 	mrs	r5, PRIMASK
10001df8:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
10001dfa:	f001 fc35 	bl	10003668 <z_unpend_first_thread>

	if (thread != NULL) {
10001dfe:	2800      	cmp	r0, #0
10001e00:	d008      	beq.n	10001e14 <z_impl_k_sem_give+0x24>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
10001e02:	2300      	movs	r3, #0
10001e04:	66c3      	str	r3, [r0, #108]	; 0x6c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
10001e06:	f001 fbdb 	bl	100035c0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
10001e0a:	0029      	movs	r1, r5
10001e0c:	4805      	ldr	r0, [pc, #20]	; (10001e24 <z_impl_k_sem_give+0x34>)
10001e0e:	f000 f993 	bl	10002138 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
10001e12:	bd70      	pop	{r4, r5, r6, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
10001e14:	68a2      	ldr	r2, [r4, #8]
10001e16:	68e3      	ldr	r3, [r4, #12]
10001e18:	1a9b      	subs	r3, r3, r2
10001e1a:	1e59      	subs	r1, r3, #1
10001e1c:	418b      	sbcs	r3, r1
10001e1e:	189b      	adds	r3, r3, r2
10001e20:	60a3      	str	r3, [r4, #8]
}
10001e22:	e7f2      	b.n	10001e0a <z_impl_k_sem_give+0x1a>
10001e24:	200002d5 	.word	0x200002d5

10001e28 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
10001e28:	b513      	push	{r0, r1, r4, lr}
10001e2a:	0001      	movs	r1, r0
10001e2c:	f3ef 8010 	mrs	r0, PRIMASK
10001e30:	b672      	cpsid	i

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
10001e32:	688c      	ldr	r4, [r1, #8]
10001e34:	2c00      	cmp	r4, #0
10001e36:	d007      	beq.n	10001e48 <z_impl_k_sem_take+0x20>
		sem->count--;
10001e38:	3c01      	subs	r4, #1
10001e3a:	608c      	str	r4, [r1, #8]
	if (key != 0U) {
10001e3c:	2800      	cmp	r0, #0
10001e3e:	d115      	bne.n	10001e6c <z_impl_k_sem_take+0x44>
	__asm__ volatile(
10001e40:	b662      	cpsie	i
10001e42:	f3bf 8f6f 	isb	sy

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
10001e46:	bd16      	pop	{r1, r2, r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10001e48:	0014      	movs	r4, r2
10001e4a:	431c      	orrs	r4, r3
10001e4c:	d106      	bne.n	10001e5c <z_impl_k_sem_take+0x34>
	if (key != 0U) {
10001e4e:	2800      	cmp	r0, #0
10001e50:	d10e      	bne.n	10001e70 <z_impl_k_sem_take+0x48>
	__asm__ volatile(
10001e52:	b662      	cpsie	i
10001e54:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
10001e58:	3810      	subs	r0, #16
10001e5a:	e7f4      	b.n	10001e46 <z_impl_k_sem_take+0x1e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
10001e5c:	9200      	str	r2, [sp, #0]
10001e5e:	9301      	str	r3, [sp, #4]
10001e60:	000a      	movs	r2, r1
10001e62:	0001      	movs	r1, r0
10001e64:	4804      	ldr	r0, [pc, #16]	; (10001e78 <z_impl_k_sem_take+0x50>)
10001e66:	f000 faad 	bl	100023c4 <z_pend_curr>
10001e6a:	e7ec      	b.n	10001e46 <z_impl_k_sem_take+0x1e>
		ret = 0;
10001e6c:	2000      	movs	r0, #0
10001e6e:	e7ea      	b.n	10001e46 <z_impl_k_sem_take+0x1e>
		ret = -EBUSY;
10001e70:	2010      	movs	r0, #16
10001e72:	4240      	negs	r0, r0
	return ret;
10001e74:	e7e7      	b.n	10001e46 <z_impl_k_sem_take+0x1e>
10001e76:	46c0      	nop			; (mov r8, r8)
10001e78:	200002d5 	.word	0x200002d5

10001e7c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
10001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001e7e:	0005      	movs	r5, r0
10001e80:	b087      	sub	sp, #28
	__asm__ volatile("mrs %0, PRIMASK;"
10001e82:	f3ef 8710 	mrs	r7, PRIMASK
10001e86:	b672      	cpsid	i
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
10001e88:	002e      	movs	r6, r5
10001e8a:	6f2c      	ldr	r4, [r5, #112]	; 0x70
10001e8c:	3688      	adds	r6, #136	; 0x88
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
10001e8e:	2c00      	cmp	r4, #0
10001e90:	d113      	bne.n	10001eba <work_queue_main+0x3e>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
10001e92:	2102      	movs	r1, #2
10001e94:	0030      	movs	r0, r6
10001e96:	f001 fb2c 	bl	100034f2 <flag_test_and_clear>
10001e9a:	2800      	cmp	r0, #0
10001e9c:	d13f      	bne.n	10001f1e <work_queue_main+0xa2>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
10001e9e:	2300      	movs	r3, #0
10001ea0:	002a      	movs	r2, r5
10001ea2:	9302      	str	r3, [sp, #8]
10001ea4:	2301      	movs	r3, #1
10001ea6:	425b      	negs	r3, r3
10001ea8:	17dc      	asrs	r4, r3, #31
10001eaa:	0039      	movs	r1, r7
10001eac:	9300      	str	r3, [sp, #0]
10001eae:	9401      	str	r4, [sp, #4]
10001eb0:	3278      	adds	r2, #120	; 0x78
10001eb2:	4837      	ldr	r0, [pc, #220]	; (10001f90 <work_queue_main+0x114>)
10001eb4:	f000 fbe0 	bl	10002678 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
10001eb8:	e7e3      	b.n	10001e82 <work_queue_main+0x6>
	return node->next;
10001eba:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
10001ebc:	6f6a      	ldr	r2, [r5, #116]	; 0x74
	list->head = node;
10001ebe:	672b      	str	r3, [r5, #112]	; 0x70
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
10001ec0:	4294      	cmp	r4, r2
10001ec2:	d100      	bne.n	10001ec6 <work_queue_main+0x4a>
	list->tail = node;
10001ec4:	676b      	str	r3, [r5, #116]	; 0x74
	*flagp |= BIT(bit);
10001ec6:	2302      	movs	r3, #2
10001ec8:	6832      	ldr	r2, [r6, #0]
10001eca:	4313      	orrs	r3, r2
10001ecc:	6033      	str	r3, [r6, #0]
	*flagp &= ~BIT(bit);
10001ece:	2304      	movs	r3, #4
10001ed0:	68e2      	ldr	r2, [r4, #12]
10001ed2:	439a      	bics	r2, r3
10001ed4:	3b03      	subs	r3, #3
10001ed6:	4313      	orrs	r3, r2
10001ed8:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
10001eda:	6863      	ldr	r3, [r4, #4]
	if (key != 0U) {
10001edc:	2f00      	cmp	r7, #0
10001ede:	d102      	bne.n	10001ee6 <work_queue_main+0x6a>
	__asm__ volatile(
10001ee0:	b662      	cpsie	i
10001ee2:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
10001ee6:	0020      	movs	r0, r4
10001ee8:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10001eea:	f3ef 8310 	mrs	r3, PRIMASK
10001eee:	b672      	cpsid	i
10001ef0:	9305      	str	r3, [sp, #20]
	*flagp &= ~BIT(bit);
10001ef2:	68e3      	ldr	r3, [r4, #12]
10001ef4:	2101      	movs	r1, #1
10001ef6:	001a      	movs	r2, r3
10001ef8:	438a      	bics	r2, r1
	return (*flagp & BIT(bit)) != 0U;
10001efa:	0850      	lsrs	r0, r2, #1
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10001efc:	4208      	tst	r0, r1
10001efe:	d118      	bne.n	10001f32 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
10001f00:	60e2      	str	r2, [r4, #12]
10001f02:	2202      	movs	r2, #2
10001f04:	6833      	ldr	r3, [r6, #0]
10001f06:	4393      	bics	r3, r2
	if (key != 0U) {
10001f08:	9a05      	ldr	r2, [sp, #20]
10001f0a:	6033      	str	r3, [r6, #0]
	return (*flagp & BIT(bit)) != 0U;
10001f0c:	05db      	lsls	r3, r3, #23
10001f0e:	0fdb      	lsrs	r3, r3, #31
10001f10:	2a00      	cmp	r2, #0
10001f12:	d039      	beq.n	10001f88 <work_queue_main+0x10c>
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
10001f14:	2b00      	cmp	r3, #0
10001f16:	d1b4      	bne.n	10001e82 <work_queue_main+0x6>
	z_impl_k_yield();
10001f18:	f000 fab8 	bl	1000248c <z_impl_k_yield>
}
10001f1c:	e7b1      	b.n	10001e82 <work_queue_main+0x6>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
10001f1e:	002c      	movs	r4, r5
10001f20:	3480      	adds	r4, #128	; 0x80
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
10001f22:	2200      	movs	r2, #0
10001f24:	2101      	movs	r1, #1
10001f26:	0020      	movs	r0, r4
10001f28:	f001 fbb3 	bl	10003692 <z_sched_wake>
10001f2c:	2800      	cmp	r0, #0
10001f2e:	d1f8      	bne.n	10001f22 <work_queue_main+0xa6>
10001f30:	e7b5      	b.n	10001e9e <work_queue_main+0x22>
	*flagp &= ~BIT(bit);
10001f32:	2203      	movs	r2, #3
10001f34:	4393      	bics	r3, r2
10001f36:	60e3      	str	r3, [r4, #12]
	return list->head;
10001f38:	4b16      	ldr	r3, [pc, #88]	; (10001f94 <work_queue_main+0x118>)
10001f3a:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
10001f3c:	2800      	cmp	r0, #0
10001f3e:	d0e0      	beq.n	10001f02 <work_queue_main+0x86>
	return node->next;
10001f40:	2700      	movs	r7, #0
10001f42:	6803      	ldr	r3, [r0, #0]
10001f44:	9304      	str	r3, [sp, #16]
		if (wc->work == work) {
10001f46:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
10001f48:	0003      	movs	r3, r0
		if (wc->work == work) {
10001f4a:	4294      	cmp	r4, r2
10001f4c:	d10e      	bne.n	10001f6c <work_queue_main+0xf0>
10001f4e:	6802      	ldr	r2, [r0, #0]
10001f50:	4b10      	ldr	r3, [pc, #64]	; (10001f94 <work_queue_main+0x118>)
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
10001f52:	2f00      	cmp	r7, #0
10001f54:	d112      	bne.n	10001f7c <work_queue_main+0x100>
10001f56:	6859      	ldr	r1, [r3, #4]
	list->head = node;
10001f58:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
10001f5a:	4281      	cmp	r1, r0
10001f5c:	d100      	bne.n	10001f60 <work_queue_main+0xe4>
	list->tail = node;
10001f5e:	605a      	str	r2, [r3, #4]
	parent->next = child;
10001f60:	2300      	movs	r3, #0
10001f62:	6003      	str	r3, [r0, #0]
			k_sem_give(&wc->sem);
10001f64:	3008      	adds	r0, #8
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
10001f66:	f7ff ff43 	bl	10001df0 <z_impl_k_sem_give>
}
10001f6a:	003b      	movs	r3, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
10001f6c:	9a04      	ldr	r2, [sp, #16]
10001f6e:	2a00      	cmp	r2, #0
10001f70:	d0c7      	beq.n	10001f02 <work_queue_main+0x86>
	return node->next;
10001f72:	001f      	movs	r7, r3
10001f74:	6813      	ldr	r3, [r2, #0]
10001f76:	0010      	movs	r0, r2
10001f78:	9304      	str	r3, [sp, #16]
10001f7a:	e7e4      	b.n	10001f46 <work_queue_main+0xca>
	return list->tail;
10001f7c:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
10001f7e:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
10001f80:	4288      	cmp	r0, r1
10001f82:	d1ed      	bne.n	10001f60 <work_queue_main+0xe4>
	list->tail = node;
10001f84:	605f      	str	r7, [r3, #4]
}
10001f86:	e7eb      	b.n	10001f60 <work_queue_main+0xe4>
	__asm__ volatile(
10001f88:	b662      	cpsie	i
10001f8a:	f3bf 8f6f 	isb	sy
10001f8e:	e7c1      	b.n	10001f14 <work_queue_main+0x98>
10001f90:	200002d5 	.word	0x200002d5
10001f94:	200002b8 	.word	0x200002b8

10001f98 <submit_to_queue_locked>:
{
10001f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
10001f9a:	68c3      	ldr	r3, [r0, #12]
{
10001f9c:	000e      	movs	r6, r1
	return (*flagp & BIT(bit)) != 0U;
10001f9e:	0859      	lsrs	r1, r3, #1
10001fa0:	2201      	movs	r2, #1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10001fa2:	000d      	movs	r5, r1
{
10001fa4:	0004      	movs	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10001fa6:	4015      	ands	r5, r2
10001fa8:	4211      	tst	r1, r2
10001faa:	d126      	bne.n	10001ffa <submit_to_queue_locked+0x62>
	return (*flagp & BIT(bit)) != 0U;
10001fac:	0899      	lsrs	r1, r3, #2
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
10001fae:	4211      	tst	r1, r2
10001fb0:	d125      	bne.n	10001ffe <submit_to_queue_locked+0x66>
		if (*queuep == NULL) {
10001fb2:	6832      	ldr	r2, [r6, #0]
10001fb4:	2a00      	cmp	r2, #0
10001fb6:	d101      	bne.n	10001fbc <submit_to_queue_locked+0x24>
			*queuep = work->queue;
10001fb8:	6882      	ldr	r2, [r0, #8]
10001fba:	6032      	str	r2, [r6, #0]
		ret = 1;
10001fbc:	2501      	movs	r5, #1
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
10001fbe:	422b      	tst	r3, r5
10001fc0:	d002      	beq.n	10001fc8 <submit_to_queue_locked+0x30>
			*queuep = work->queue;
10001fc2:	68a3      	ldr	r3, [r4, #8]
			ret = 2;
10001fc4:	196d      	adds	r5, r5, r5
			*queuep = work->queue;
10001fc6:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
10001fc8:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
10001fca:	2f00      	cmp	r7, #0
10001fcc:	d032      	beq.n	10002034 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
10001fce:	4b1b      	ldr	r3, [pc, #108]	; (1000203c <submit_to_queue_locked+0xa4>)
10001fd0:	2000      	movs	r0, #0
10001fd2:	689b      	ldr	r3, [r3, #8]
10001fd4:	42bb      	cmp	r3, r7
10001fd6:	d104      	bne.n	10001fe2 <submit_to_queue_locked+0x4a>
10001fd8:	f001 fa6a 	bl	100034b0 <k_is_in_isr>
10001fdc:	2301      	movs	r3, #1
10001fde:	4058      	eors	r0, r3
10001fe0:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
10001fe2:	003b      	movs	r3, r7
10001fe4:	2201      	movs	r2, #1
10001fe6:	3388      	adds	r3, #136	; 0x88
10001fe8:	681b      	ldr	r3, [r3, #0]
10001fea:	0899      	lsrs	r1, r3, #2
10001fec:	4011      	ands	r1, r2
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
10001fee:	4213      	tst	r3, r2
10001ff0:	d022      	beq.n	10002038 <submit_to_queue_locked+0xa0>
	} else if (draining && !chained) {
10001ff2:	2900      	cmp	r1, #0
10001ff4:	d006      	beq.n	10002004 <submit_to_queue_locked+0x6c>
10001ff6:	2800      	cmp	r0, #0
10001ff8:	d107      	bne.n	1000200a <submit_to_queue_locked+0x72>
		ret = -EBUSY;
10001ffa:	2510      	movs	r5, #16
		ret = -ENODEV;
10001ffc:	426d      	negs	r5, r5
		*queuep = NULL;
10001ffe:	2300      	movs	r3, #0
10002000:	6033      	str	r3, [r6, #0]
	return ret;
10002002:	e012      	b.n	1000202a <submit_to_queue_locked+0x92>
	return (*flagp & BIT(bit)) != 0U;
10002004:	08db      	lsrs	r3, r3, #3
	} else if (plugged && !draining) {
10002006:	4213      	tst	r3, r2
10002008:	d1f7      	bne.n	10001ffa <submit_to_queue_locked+0x62>
	parent->next = child;
1000200a:	2300      	movs	r3, #0
1000200c:	6023      	str	r3, [r4, #0]
	return list->tail;
1000200e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
Z_GENLIST_APPEND(slist, snode)
10002010:	2b00      	cmp	r3, #0
10002012:	d10c      	bne.n	1000202e <submit_to_queue_locked+0x96>
	list->tail = node;
10002014:	677c      	str	r4, [r7, #116]	; 0x74
	list->head = node;
10002016:	673c      	str	r4, [r7, #112]	; 0x70
		(void)notify_queue_locked(queue);
10002018:	0038      	movs	r0, r7
1000201a:	f001 fa76 	bl	1000350a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
1000201e:	2304      	movs	r3, #4
10002020:	68e2      	ldr	r2, [r4, #12]
10002022:	4313      	orrs	r3, r2
10002024:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
10002026:	6833      	ldr	r3, [r6, #0]
10002028:	60a3      	str	r3, [r4, #8]
}
1000202a:	0028      	movs	r0, r5
1000202c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
1000202e:	601c      	str	r4, [r3, #0]
	list->tail = node;
10002030:	677c      	str	r4, [r7, #116]	; 0x74
}
10002032:	e7f1      	b.n	10002018 <submit_to_queue_locked+0x80>
		return -EINVAL;
10002034:	2516      	movs	r5, #22
10002036:	e7e1      	b.n	10001ffc <submit_to_queue_locked+0x64>
		ret = -ENODEV;
10002038:	2513      	movs	r5, #19
1000203a:	e7df      	b.n	10001ffc <submit_to_queue_locked+0x64>
1000203c:	20000294 	.word	0x20000294

10002040 <k_work_submit>:
{
10002040:	b510      	push	{r4, lr}
10002042:	0001      	movs	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
10002044:	4801      	ldr	r0, [pc, #4]	; (1000204c <k_work_submit+0xc>)
10002046:	f001 fa69 	bl	1000351c <k_work_submit_to_queue>
}
1000204a:	bd10      	pop	{r4, pc}
1000204c:	20000160 	.word	0x20000160

10002050 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
10002050:	b5f0      	push	{r4, r5, r6, r7, lr}
10002052:	0004      	movs	r4, r0
	list->head = NULL;
10002054:	2000      	movs	r0, #0
10002056:	6720      	str	r0, [r4, #112]	; 0x70
	list->tail = NULL;
10002058:	6760      	str	r0, [r4, #116]	; 0x74
1000205a:	0020      	movs	r0, r4
1000205c:	0026      	movs	r6, r4
1000205e:	3078      	adds	r0, #120	; 0x78
10002060:	b089      	sub	sp, #36	; 0x24
	list->head = (sys_dnode_t *)list;
10002062:	67a0      	str	r0, [r4, #120]	; 0x78
	list->tail = (sys_dnode_t *)list;
10002064:	67e0      	str	r0, [r4, #124]	; 0x7c
10002066:	3680      	adds	r6, #128	; 0x80
	list->head = (sys_dnode_t *)list;
10002068:	1d20      	adds	r0, r4, #4
1000206a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
1000206c:	67c6      	str	r6, [r0, #124]	; 0x7c
	list->tail = (sys_dnode_t *)list;
1000206e:	3004      	adds	r0, #4
10002070:	67c6      	str	r6, [r0, #124]	; 0x7c
	__ASSERT_NO_MSG(queue);
	__ASSERT_NO_MSG(stack);
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
	uint32_t flags = K_WORK_QUEUE_STARTED;
10002072:	2001      	movs	r0, #1

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
10002074:	2d00      	cmp	r5, #0
10002076:	d007      	beq.n	10002088 <k_work_queue_start+0x38>
10002078:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
1000207a:	4246      	negs	r6, r0
1000207c:	4170      	adcs	r0, r6
1000207e:	26ff      	movs	r6, #255	; 0xff
10002080:	4240      	negs	r0, r0
10002082:	43b0      	bics	r0, r6
10002084:	3002      	adds	r0, #2
10002086:	30ff      	adds	r0, #255	; 0xff
	*flagp = flags;
10002088:	0026      	movs	r6, r4
1000208a:	3688      	adds	r6, #136	; 0x88
1000208c:	6030      	str	r0, [r6, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
1000208e:	2000      	movs	r0, #0
10002090:	2601      	movs	r6, #1
10002092:	4276      	negs	r6, r6
10002094:	17f7      	asrs	r7, r6, #31
10002096:	9004      	str	r0, [sp, #16]
10002098:	9303      	str	r3, [sp, #12]
1000209a:	9002      	str	r0, [sp, #8]
1000209c:	9001      	str	r0, [sp, #4]
1000209e:	9606      	str	r6, [sp, #24]
100020a0:	9707      	str	r7, [sp, #28]
100020a2:	0020      	movs	r0, r4
100020a4:	4b08      	ldr	r3, [pc, #32]	; (100020c8 <k_work_queue_start+0x78>)
100020a6:	9400      	str	r4, [sp, #0]
100020a8:	f7ff fe2e 	bl	10001d08 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
100020ac:	2d00      	cmp	r5, #0
100020ae:	d005      	beq.n	100020bc <k_work_queue_start+0x6c>
100020b0:	6829      	ldr	r1, [r5, #0]
100020b2:	2900      	cmp	r1, #0
100020b4:	d002      	beq.n	100020bc <k_work_queue_start+0x6c>
	return z_impl_k_thread_name_set(thread, str);
100020b6:	0020      	movs	r0, r4
100020b8:	f001 fa00 	bl	100034bc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
100020bc:	0020      	movs	r0, r4
100020be:	f001 fa00 	bl	100034c2 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
100020c2:	b009      	add	sp, #36	; 0x24
100020c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100020c6:	46c0      	nop			; (mov r8, r8)
100020c8:	10001e7d 	.word	0x10001e7d

100020cc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
100020cc:	b570      	push	{r4, r5, r6, lr}
	int ret = slice_ticks;
100020ce:	4d07      	ldr	r5, [pc, #28]	; (100020ec <z_reset_time_slice+0x20>)
100020d0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
100020d2:	2c00      	cmp	r4, #0
100020d4:	d008      	beq.n	100020e8 <z_reset_time_slice+0x1c>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
100020d6:	f7ff fa7f 	bl	100015d8 <sys_clock_elapsed>
100020da:	4b05      	ldr	r3, [pc, #20]	; (100020f0 <z_reset_time_slice+0x24>)
100020dc:	1824      	adds	r4, r4, r0
		z_set_timeout_expiry(slice_time(curr), false);
100020de:	2100      	movs	r1, #0
100020e0:	6828      	ldr	r0, [r5, #0]
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
100020e2:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
100020e4:	f001 fb07 	bl	100036f6 <z_set_timeout_expiry>
	}
}
100020e8:	bd70      	pop	{r4, r5, r6, pc}
100020ea:	46c0      	nop			; (mov r8, r8)
100020ec:	200002c8 	.word	0x200002c8
100020f0:	20000294 	.word	0x20000294

100020f4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
100020f4:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100020f6:	f3ef 8410 	mrs	r4, PRIMASK
100020fa:	b672      	cpsid	i
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
100020fc:	2300      	movs	r3, #0
100020fe:	4a0b      	ldr	r2, [pc, #44]	; (1000212c <k_sched_time_slice_set+0x38>)
10002100:	4d0b      	ldr	r5, [pc, #44]	; (10002130 <k_sched_time_slice_set+0x3c>)
10002102:	6113      	str	r3, [r2, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
10002104:	330a      	adds	r3, #10
10002106:	4343      	muls	r3, r0
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
10002108:	2800      	cmp	r0, #0
1000210a:	dc0b      	bgt.n	10002124 <k_sched_time_slice_set+0x30>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
1000210c:	602b      	str	r3, [r5, #0]
		}
		slice_max_prio = prio;
1000210e:	4b09      	ldr	r3, [pc, #36]	; (10002134 <k_sched_time_slice_set+0x40>)
		z_reset_time_slice(_current);
10002110:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
10002112:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
10002114:	f7ff ffda 	bl	100020cc <z_reset_time_slice>
	if (key != 0U) {
10002118:	2c00      	cmp	r4, #0
1000211a:	d102      	bne.n	10002122 <k_sched_time_slice_set+0x2e>
	__asm__ volatile(
1000211c:	b662      	cpsie	i
1000211e:	f3bf 8f6f 	isb	sy
	}
}
10002122:	bd70      	pop	{r4, r5, r6, pc}
			slice_ticks = MAX(2, slice_ticks);
10002124:	2b02      	cmp	r3, #2
10002126:	daf1      	bge.n	1000210c <k_sched_time_slice_set+0x18>
10002128:	2302      	movs	r3, #2
1000212a:	e7ef      	b.n	1000210c <k_sched_time_slice_set+0x18>
1000212c:	20000294 	.word	0x20000294
10002130:	200002c8 	.word	0x200002c8
10002134:	200002c4 	.word	0x200002c4

10002138 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
10002138:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
1000213a:	2900      	cmp	r1, #0
1000213c:	d10a      	bne.n	10002154 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
1000213e:	f3ef 8005 	mrs	r0, IPSR
	if (resched(key.key) && need_swap()) {
10002142:	2800      	cmp	r0, #0
10002144:	d107      	bne.n	10002156 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
10002146:	4b06      	ldr	r3, [pc, #24]	; (10002160 <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10002148:	699a      	ldr	r2, [r3, #24]
1000214a:	689b      	ldr	r3, [r3, #8]
1000214c:	429a      	cmp	r2, r3
1000214e:	d002      	beq.n	10002156 <z_reschedule+0x1e>
	ret = arch_swap(key);
10002150:	f7fe fe60 	bl	10000e14 <arch_swap>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
10002154:	bd10      	pop	{r4, pc}
10002156:	b662      	cpsie	i
10002158:	f3bf 8f6f 	isb	sy
1000215c:	e7fa      	b.n	10002154 <z_reschedule+0x1c>
1000215e:	46c0      	nop			; (mov r8, r8)
10002160:	20000294 	.word	0x20000294

10002164 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
10002164:	f3ef 8110 	mrs	r1, PRIMASK
10002168:	b672      	cpsid	i
	--_current->base.sched_locked;
1000216a:	4b05      	ldr	r3, [pc, #20]	; (10002180 <k_sched_lock+0x1c>)
1000216c:	689a      	ldr	r2, [r3, #8]
1000216e:	7bd3      	ldrb	r3, [r2, #15]
10002170:	3b01      	subs	r3, #1
10002172:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10002174:	2900      	cmp	r1, #0
10002176:	d102      	bne.n	1000217e <k_sched_lock+0x1a>
	__asm__ volatile(
10002178:	b662      	cpsie	i
1000217a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
1000217e:	4770      	bx	lr
10002180:	20000294 	.word	0x20000294

10002184 <update_cache>:
{
10002184:	b570      	push	{r4, r5, r6, lr}
10002186:	0006      	movs	r6, r0
	return _priq_run_best(curr_cpu_runq());
10002188:	480d      	ldr	r0, [pc, #52]	; (100021c0 <update_cache+0x3c>)
1000218a:	f001 fa13 	bl	100035b4 <z_priq_dumb_best>
1000218e:	4d0d      	ldr	r5, [pc, #52]	; (100021c4 <update_cache+0x40>)
10002190:	1e04      	subs	r4, r0, #0
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10002192:	d100      	bne.n	10002196 <update_cache+0x12>
10002194:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
10002196:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10002198:	2e00      	cmp	r6, #0
1000219a:	d10a      	bne.n	100021b2 <update_cache+0x2e>
	if (z_is_thread_prevented_from_running(_current)) {
1000219c:	7b5a      	ldrb	r2, [r3, #13]
1000219e:	06d2      	lsls	r2, r2, #27
100021a0:	d107      	bne.n	100021b2 <update_cache+0x2e>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
100021a2:	69a2      	ldr	r2, [r4, #24]
100021a4:	2a00      	cmp	r2, #0
100021a6:	d104      	bne.n	100021b2 <update_cache+0x2e>
	if (is_preempt(_current) || is_metairq(thread)) {
100021a8:	89da      	ldrh	r2, [r3, #14]
100021aa:	2a7f      	cmp	r2, #127	; 0x7f
100021ac:	d901      	bls.n	100021b2 <update_cache+0x2e>
		_kernel.ready_q.cache = _current;
100021ae:	61ab      	str	r3, [r5, #24]
}
100021b0:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
100021b2:	429c      	cmp	r4, r3
100021b4:	d002      	beq.n	100021bc <update_cache+0x38>
			z_reset_time_slice(thread);
100021b6:	0020      	movs	r0, r4
100021b8:	f7ff ff88 	bl	100020cc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
100021bc:	61ac      	str	r4, [r5, #24]
}
100021be:	e7f7      	b.n	100021b0 <update_cache+0x2c>
100021c0:	200002b0 	.word	0x200002b0
100021c4:	20000294 	.word	0x20000294

100021c8 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
100021c8:	220d      	movs	r2, #13
{
100021ca:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
100021cc:	5682      	ldrsb	r2, [r0, r2]
{
100021ce:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
100021d0:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
100021d2:	2a00      	cmp	r2, #0
100021d4:	da04      	bge.n	100021e0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100021d6:	227f      	movs	r2, #127	; 0x7f
100021d8:	4013      	ands	r3, r2
100021da:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
100021dc:	f001 f9b6 	bl	1000354c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
100021e0:	2380      	movs	r3, #128	; 0x80
100021e2:	7b62      	ldrb	r2, [r4, #13]
100021e4:	425b      	negs	r3, r3
100021e6:	4313      	orrs	r3, r2
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
100021e8:	4a13      	ldr	r2, [pc, #76]	; (10002238 <move_thread_to_end_of_prio_q+0x70>)
100021ea:	7363      	strb	r3, [r4, #13]
100021ec:	69d3      	ldr	r3, [r2, #28]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
100021ee:	4d13      	ldr	r5, [pc, #76]	; (1000223c <move_thread_to_end_of_prio_q+0x74>)
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
100021f0:	6a10      	ldr	r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100021f2:	42ab      	cmp	r3, r5
100021f4:	d01b      	beq.n	1000222e <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
100021f6:	2b00      	cmp	r3, #0
100021f8:	d019      	beq.n	1000222e <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
100021fa:	260e      	movs	r6, #14
100021fc:	57a6      	ldrsb	r6, [r4, r6]
	int32_t b2 = thread_2->base.prio;
100021fe:	210e      	movs	r1, #14
10002200:	5659      	ldrsb	r1, [r3, r1]
	if (b1 != b2) {
10002202:	428e      	cmp	r6, r1
10002204:	d00e      	beq.n	10002224 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
10002206:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
10002208:	2900      	cmp	r1, #0
1000220a:	dd0b      	ble.n	10002224 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
1000220c:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
1000220e:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10002210:	6061      	str	r1, [r4, #4]
	prev->next = node;
10002212:	600c      	str	r4, [r1, #0]
	successor->prev = node;
10002214:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
10002216:	6890      	ldr	r0, [r2, #8]
10002218:	1b00      	subs	r0, r0, r4
1000221a:	4243      	negs	r3, r0
1000221c:	4158      	adcs	r0, r3
1000221e:	f7ff ffb1 	bl	10002184 <update_cache>
}
10002222:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10002224:	4283      	cmp	r3, r0
10002226:	d002      	beq.n	1000222e <move_thread_to_end_of_prio_q+0x66>
10002228:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
1000222a:	2b00      	cmp	r3, #0
1000222c:	d1e7      	bne.n	100021fe <move_thread_to_end_of_prio_q+0x36>
	node->next = list;
1000222e:	6025      	str	r5, [r4, #0]
	node->prev = tail;
10002230:	6060      	str	r0, [r4, #4]
	tail->next = node;
10002232:	6004      	str	r4, [r0, #0]
	list->tail = node;
10002234:	6214      	str	r4, [r2, #32]
}
10002236:	e7ee      	b.n	10002216 <move_thread_to_end_of_prio_q+0x4e>
10002238:	20000294 	.word	0x20000294
1000223c:	200002b0 	.word	0x200002b0

10002240 <z_time_slice>:
{
10002240:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002242:	f3ef 8510 	mrs	r5, PRIMASK
10002246:	b672      	cpsid	i
	if (pending_current == _current) {
10002248:	4b17      	ldr	r3, [pc, #92]	; (100022a8 <z_time_slice+0x68>)
1000224a:	4a18      	ldr	r2, [pc, #96]	; (100022ac <z_time_slice+0x6c>)
1000224c:	689c      	ldr	r4, [r3, #8]
1000224e:	6811      	ldr	r1, [r2, #0]
10002250:	428c      	cmp	r4, r1
10002252:	d108      	bne.n	10002266 <z_time_slice+0x26>
	z_reset_time_slice(curr);
10002254:	0020      	movs	r0, r4
10002256:	f7ff ff39 	bl	100020cc <z_reset_time_slice>
	if (key != 0U) {
1000225a:	2d00      	cmp	r5, #0
1000225c:	d102      	bne.n	10002264 <z_time_slice+0x24>
	__asm__ volatile(
1000225e:	b662      	cpsie	i
10002260:	f3bf 8f6f 	isb	sy
}
10002264:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
10002266:	2100      	movs	r1, #0
10002268:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
1000226a:	4a11      	ldr	r2, [pc, #68]	; (100022b0 <z_time_slice+0x70>)
	if (slice_time(_current) && sliceable(_current)) {
1000226c:	6812      	ldr	r2, [r2, #0]
1000226e:	428a      	cmp	r2, r1
10002270:	d018      	beq.n	100022a4 <z_time_slice+0x64>
		&& !z_is_idle_thread_object(thread);
10002272:	89e2      	ldrh	r2, [r4, #14]
10002274:	2a7f      	cmp	r2, #127	; 0x7f
10002276:	d815      	bhi.n	100022a4 <z_time_slice+0x64>
		&& !z_is_thread_prevented_from_running(thread)
10002278:	7b62      	ldrb	r2, [r4, #13]
1000227a:	06d2      	lsls	r2, r2, #27
1000227c:	d112      	bne.n	100022a4 <z_time_slice+0x64>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
1000227e:	210e      	movs	r1, #14
10002280:	4a0c      	ldr	r2, [pc, #48]	; (100022b4 <z_time_slice+0x74>)
10002282:	5661      	ldrsb	r1, [r4, r1]
10002284:	6812      	ldr	r2, [r2, #0]
10002286:	4291      	cmp	r1, r2
10002288:	db0c      	blt.n	100022a4 <z_time_slice+0x64>
	if (slice_time(_current) && sliceable(_current)) {
1000228a:	4a0b      	ldr	r2, [pc, #44]	; (100022b8 <z_time_slice+0x78>)
1000228c:	4294      	cmp	r4, r2
1000228e:	d009      	beq.n	100022a4 <z_time_slice+0x64>
		if (ticks >= _current_cpu->slice_ticks) {
10002290:	691a      	ldr	r2, [r3, #16]
10002292:	4282      	cmp	r2, r0
10002294:	dc03      	bgt.n	1000229e <z_time_slice+0x5e>
		move_thread_to_end_of_prio_q(curr);
10002296:	0020      	movs	r0, r4
10002298:	f7ff ff96 	bl	100021c8 <move_thread_to_end_of_prio_q>
1000229c:	e7da      	b.n	10002254 <z_time_slice+0x14>
			_current_cpu->slice_ticks -= ticks;
1000229e:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
100022a0:	611a      	str	r2, [r3, #16]
100022a2:	e7da      	b.n	1000225a <z_time_slice+0x1a>
100022a4:	2200      	movs	r2, #0
100022a6:	e7fb      	b.n	100022a0 <z_time_slice+0x60>
100022a8:	20000294 	.word	0x20000294
100022ac:	200002c0 	.word	0x200002c0
100022b0:	200002c8 	.word	0x200002c8
100022b4:	200002c4 	.word	0x200002c4
100022b8:	20000078 	.word	0x20000078

100022bc <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
100022bc:	230d      	movs	r3, #13
{
100022be:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
100022c0:	56c3      	ldrsb	r3, [r0, r3]
100022c2:	7b42      	ldrb	r2, [r0, #13]
100022c4:	2b00      	cmp	r3, #0
100022c6:	db20      	blt.n	1000230a <ready_thread+0x4e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
100022c8:	06d3      	lsls	r3, r2, #27
100022ca:	d11e      	bne.n	1000230a <ready_thread+0x4e>
100022cc:	6983      	ldr	r3, [r0, #24]
100022ce:	2b00      	cmp	r3, #0
100022d0:	d11b      	bne.n	1000230a <ready_thread+0x4e>
	thread->base.thread_state |= _THREAD_QUEUED;
100022d2:	3b80      	subs	r3, #128	; 0x80
	return list->head == list;
100022d4:	4912      	ldr	r1, [pc, #72]	; (10002320 <ready_thread+0x64>)
100022d6:	4313      	orrs	r3, r2
100022d8:	7343      	strb	r3, [r0, #13]
100022da:	69cb      	ldr	r3, [r1, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100022dc:	4d11      	ldr	r5, [pc, #68]	; (10002324 <ready_thread+0x68>)
	return (node == list->tail) ? NULL : node->next;
100022de:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100022e0:	42ab      	cmp	r3, r5
100022e2:	d018      	beq.n	10002316 <ready_thread+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
100022e4:	2b00      	cmp	r3, #0
100022e6:	d016      	beq.n	10002316 <ready_thread+0x5a>
	int32_t b1 = thread_1->base.prio;
100022e8:	260e      	movs	r6, #14
100022ea:	5786      	ldrsb	r6, [r0, r6]
	int32_t b2 = thread_2->base.prio;
100022ec:	220e      	movs	r2, #14
100022ee:	569a      	ldrsb	r2, [r3, r2]
	if (b1 != b2) {
100022f0:	4296      	cmp	r6, r2
100022f2:	d00b      	beq.n	1000230c <ready_thread+0x50>
		return b2 - b1;
100022f4:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
100022f6:	2a00      	cmp	r2, #0
100022f8:	dd08      	ble.n	1000230c <ready_thread+0x50>
	sys_dnode_t *const prev = successor->prev;
100022fa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
100022fc:	6003      	str	r3, [r0, #0]
	node->prev = prev;
100022fe:	6042      	str	r2, [r0, #4]
	prev->next = node;
10002300:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10002302:	6058      	str	r0, [r3, #4]
		update_cache(0);
10002304:	2000      	movs	r0, #0
10002306:	f7ff ff3d 	bl	10002184 <update_cache>
}
1000230a:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
1000230c:	42a3      	cmp	r3, r4
1000230e:	d002      	beq.n	10002316 <ready_thread+0x5a>
10002310:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002312:	2b00      	cmp	r3, #0
10002314:	d1ea      	bne.n	100022ec <ready_thread+0x30>
	node->next = list;
10002316:	6005      	str	r5, [r0, #0]
	node->prev = tail;
10002318:	6044      	str	r4, [r0, #4]
	tail->next = node;
1000231a:	6020      	str	r0, [r4, #0]
	list->tail = node;
1000231c:	6208      	str	r0, [r1, #32]
}
1000231e:	e7f1      	b.n	10002304 <ready_thread+0x48>
10002320:	20000294 	.word	0x20000294
10002324:	200002b0 	.word	0x200002b0

10002328 <z_sched_start>:
{
10002328:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000232a:	f3ef 8410 	mrs	r4, PRIMASK
1000232e:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10002330:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10002332:	7b43      	ldrb	r3, [r0, #13]
10002334:	4213      	tst	r3, r2
10002336:	d105      	bne.n	10002344 <z_sched_start+0x1c>
	if (key != 0U) {
10002338:	2c00      	cmp	r4, #0
1000233a:	d102      	bne.n	10002342 <z_sched_start+0x1a>
	__asm__ volatile(
1000233c:	b662      	cpsie	i
1000233e:	f3bf 8f6f 	isb	sy
}
10002342:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10002344:	4393      	bics	r3, r2
10002346:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
10002348:	f7ff ffb8 	bl	100022bc <ready_thread>
	z_reschedule(&sched_spinlock, key);
1000234c:	0021      	movs	r1, r4
1000234e:	4802      	ldr	r0, [pc, #8]	; (10002358 <z_sched_start+0x30>)
10002350:	f7ff fef2 	bl	10002138 <z_reschedule>
10002354:	e7f5      	b.n	10002342 <z_sched_start+0x1a>
10002356:	46c0      	nop			; (mov r8, r8)
10002358:	200002d5 	.word	0x200002d5

1000235c <unready_thread>:
	if (z_is_thread_queued(thread)) {
1000235c:	220d      	movs	r2, #13
{
1000235e:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
10002360:	5682      	ldrsb	r2, [r0, r2]
{
10002362:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10002364:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10002366:	2a00      	cmp	r2, #0
10002368:	da04      	bge.n	10002374 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
1000236a:	227f      	movs	r2, #127	; 0x7f
1000236c:	4013      	ands	r3, r2
1000236e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10002370:	f001 f8ec 	bl	1000354c <sys_dlist_remove>
	update_cache(thread == _current);
10002374:	4b03      	ldr	r3, [pc, #12]	; (10002384 <unready_thread+0x28>)
10002376:	6898      	ldr	r0, [r3, #8]
10002378:	1b00      	subs	r0, r0, r4
1000237a:	4243      	negs	r3, r0
1000237c:	4158      	adcs	r0, r3
1000237e:	f7ff ff01 	bl	10002184 <update_cache>
}
10002382:	bd10      	pop	{r4, pc}
10002384:	20000294 	.word	0x20000294

10002388 <pend>:
{
10002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000238a:	0004      	movs	r4, r0
1000238c:	0016      	movs	r6, r2
1000238e:	001d      	movs	r5, r3
	__asm__ volatile("mrs %0, PRIMASK;"
10002390:	f3ef 8710 	mrs	r7, PRIMASK
10002394:	b672      	cpsid	i
		add_to_waitq_locked(thread, wait_q);
10002396:	f001 f93b 	bl	10003610 <add_to_waitq_locked>
	if (key != 0U) {
1000239a:	2f00      	cmp	r7, #0
1000239c:	d102      	bne.n	100023a4 <pend+0x1c>
	__asm__ volatile(
1000239e:	b662      	cpsie	i
100023a0:	f3bf 8f6f 	isb	sy
	add_thread_timeout(thread, timeout);
100023a4:	002b      	movs	r3, r5
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
100023a6:	1c72      	adds	r2, r6, #1
100023a8:	d101      	bne.n	100023ae <pend+0x26>
100023aa:	3301      	adds	r3, #1
100023ac:	d006      	beq.n	100023bc <pend+0x34>
100023ae:	0020      	movs	r0, r4
100023b0:	0032      	movs	r2, r6
100023b2:	002b      	movs	r3, r5
100023b4:	4902      	ldr	r1, [pc, #8]	; (100023c0 <pend+0x38>)
100023b6:	3018      	adds	r0, #24
100023b8:	f000 f9de 	bl	10002778 <z_add_timeout>
}
100023bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100023be:	46c0      	nop			; (mov r8, r8)
100023c0:	100035d9 	.word	0x100035d9

100023c4 <z_pend_curr>:
{
100023c4:	b510      	push	{r4, lr}
100023c6:	000c      	movs	r4, r1
	pending_current = _current;
100023c8:	4b06      	ldr	r3, [pc, #24]	; (100023e4 <z_pend_curr+0x20>)
{
100023ca:	0011      	movs	r1, r2
	pending_current = _current;
100023cc:	6898      	ldr	r0, [r3, #8]
100023ce:	4b06      	ldr	r3, [pc, #24]	; (100023e8 <z_pend_curr+0x24>)
100023d0:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
100023d2:	9a02      	ldr	r2, [sp, #8]
100023d4:	9b03      	ldr	r3, [sp, #12]
100023d6:	f7ff ffd7 	bl	10002388 <pend>
100023da:	0020      	movs	r0, r4
100023dc:	f7fe fd1a 	bl	10000e14 <arch_swap>
}
100023e0:	bd10      	pop	{r4, pc}
100023e2:	46c0      	nop			; (mov r8, r8)
100023e4:	20000294 	.word	0x20000294
100023e8:	200002c0 	.word	0x200002c0

100023ec <z_impl_k_thread_suspend>:
{
100023ec:	b570      	push	{r4, r5, r6, lr}
100023ee:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
100023f0:	3018      	adds	r0, #24
100023f2:	f001 f96d 	bl	100036d0 <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
100023f6:	f3ef 8610 	mrs	r6, PRIMASK
100023fa:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
100023fc:	220d      	movs	r2, #13
100023fe:	56a2      	ldrsb	r2, [r4, r2]
10002400:	7b63      	ldrb	r3, [r4, #13]
10002402:	2a00      	cmp	r2, #0
10002404:	da05      	bge.n	10002412 <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002406:	227f      	movs	r2, #127	; 0x7f
10002408:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
1000240a:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
1000240c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
1000240e:	f001 f89d 	bl	1000354c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10002412:	2310      	movs	r3, #16
10002414:	7b62      	ldrb	r2, [r4, #13]
		update_cache(thread == _current);
10002416:	4d0a      	ldr	r5, [pc, #40]	; (10002440 <z_impl_k_thread_suspend+0x54>)
10002418:	4313      	orrs	r3, r2
1000241a:	7363      	strb	r3, [r4, #13]
1000241c:	68ab      	ldr	r3, [r5, #8]
1000241e:	1b18      	subs	r0, r3, r4
10002420:	4243      	negs	r3, r0
10002422:	4158      	adcs	r0, r3
10002424:	f7ff feae 	bl	10002184 <update_cache>
	if (key != 0U) {
10002428:	2e00      	cmp	r6, #0
1000242a:	d102      	bne.n	10002432 <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
1000242c:	b662      	cpsie	i
1000242e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
10002432:	68ab      	ldr	r3, [r5, #8]
10002434:	42a3      	cmp	r3, r4
10002436:	d101      	bne.n	1000243c <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
10002438:	f001 f8b5 	bl	100035a6 <z_reschedule_unlocked>
}
1000243c:	bd70      	pop	{r4, r5, r6, pc}
1000243e:	46c0      	nop			; (mov r8, r8)
10002440:	20000294 	.word	0x20000294

10002444 <k_sched_unlock>:
{
10002444:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002446:	f3ef 8410 	mrs	r4, PRIMASK
1000244a:	b672      	cpsid	i
		++_current->base.sched_locked;
1000244c:	4b07      	ldr	r3, [pc, #28]	; (1000246c <k_sched_unlock+0x28>)
		update_cache(0);
1000244e:	2000      	movs	r0, #0
		++_current->base.sched_locked;
10002450:	689a      	ldr	r2, [r3, #8]
10002452:	7bd3      	ldrb	r3, [r2, #15]
10002454:	3301      	adds	r3, #1
10002456:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
10002458:	f7ff fe94 	bl	10002184 <update_cache>
	if (key != 0U) {
1000245c:	2c00      	cmp	r4, #0
1000245e:	d102      	bne.n	10002466 <k_sched_unlock+0x22>
	__asm__ volatile(
10002460:	b662      	cpsie	i
10002462:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
10002466:	f001 f89e 	bl	100035a6 <z_reschedule_unlocked>
}
1000246a:	bd10      	pop	{r4, pc}
1000246c:	20000294 	.word	0x20000294

10002470 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10002470:	2100      	movs	r1, #0
{
10002472:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
10002474:	4b03      	ldr	r3, [pc, #12]	; (10002484 <z_sched_init+0x14>)
10002476:	4a04      	ldr	r2, [pc, #16]	; (10002488 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10002478:	0008      	movs	r0, r1
1000247a:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
1000247c:	621a      	str	r2, [r3, #32]
1000247e:	f7ff fe39 	bl	100020f4 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
10002482:	bd10      	pop	{r4, pc}
10002484:	20000294 	.word	0x20000294
10002488:	200002b0 	.word	0x200002b0

1000248c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
1000248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000248e:	f3ef 8510 	mrs	r5, PRIMASK
10002492:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002494:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
10002496:	4c1a      	ldr	r4, [pc, #104]	; (10002500 <z_impl_k_yield+0x74>)
10002498:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
1000249a:	7b43      	ldrb	r3, [r0, #13]
1000249c:	4013      	ands	r3, r2
1000249e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
100024a0:	f001 f854 	bl	1000354c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
100024a4:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
100024a6:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
100024a8:	4252      	negs	r2, r2
100024aa:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100024ac:	4815      	ldr	r0, [pc, #84]	; (10002504 <z_impl_k_yield+0x78>)
100024ae:	430a      	orrs	r2, r1
100024b0:	735a      	strb	r2, [r3, #13]
	return list->head == list;
100024b2:	69e2      	ldr	r2, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100024b4:	4282      	cmp	r2, r0
100024b6:	d01c      	beq.n	100024f2 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
100024b8:	2a00      	cmp	r2, #0
100024ba:	d01a      	beq.n	100024f2 <z_impl_k_yield+0x66>
	int32_t b1 = thread_1->base.prio;
100024bc:	260e      	movs	r6, #14
	return (node == list->tail) ? NULL : node->next;
100024be:	6a27      	ldr	r7, [r4, #32]
100024c0:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
100024c2:	210e      	movs	r1, #14
100024c4:	5651      	ldrsb	r1, [r2, r1]
	if (b1 != b2) {
100024c6:	428e      	cmp	r6, r1
100024c8:	d00e      	beq.n	100024e8 <z_impl_k_yield+0x5c>
		return b2 - b1;
100024ca:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
100024cc:	2900      	cmp	r1, #0
100024ce:	dd0b      	ble.n	100024e8 <z_impl_k_yield+0x5c>
	sys_dnode_t *const prev = successor->prev;
100024d0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
100024d2:	601a      	str	r2, [r3, #0]
	node->prev = prev;
100024d4:	6059      	str	r1, [r3, #4]
	prev->next = node;
100024d6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
100024d8:	6053      	str	r3, [r2, #4]
	update_cache(1);
100024da:	2001      	movs	r0, #1
100024dc:	f7ff fe52 	bl	10002184 <update_cache>
100024e0:	0028      	movs	r0, r5
100024e2:	f7fe fc97 	bl	10000e14 <arch_swap>
	z_swap(&sched_spinlock, key);
}
100024e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
100024e8:	42ba      	cmp	r2, r7
100024ea:	d002      	beq.n	100024f2 <z_impl_k_yield+0x66>
100024ec:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
100024ee:	2a00      	cmp	r2, #0
100024f0:	d1e7      	bne.n	100024c2 <z_impl_k_yield+0x36>
	sys_dnode_t *const tail = list->tail;
100024f2:	6a22      	ldr	r2, [r4, #32]
	node->next = list;
100024f4:	6018      	str	r0, [r3, #0]
	node->prev = tail;
100024f6:	605a      	str	r2, [r3, #4]
	tail->next = node;
100024f8:	6013      	str	r3, [r2, #0]
	list->tail = node;
100024fa:	6223      	str	r3, [r4, #32]
}
100024fc:	e7ed      	b.n	100024da <z_impl_k_yield+0x4e>
100024fe:	46c0      	nop			; (mov r8, r8)
10002500:	20000294 	.word	0x20000294
10002504:	200002b0 	.word	0x200002b0

10002508 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
10002508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
1000250a:	0006      	movs	r6, r0
{
1000250c:	0004      	movs	r4, r0
1000250e:	000d      	movs	r5, r1
	if (ticks == 0) {
10002510:	430e      	orrs	r6, r1
10002512:	d103      	bne.n	1000251c <z_tick_sleep+0x14>
	z_impl_k_yield();
10002514:	f7ff ffba 	bl	1000248c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
10002518:	2000      	movs	r0, #0
1000251a:	e034      	b.n	10002586 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
1000251c:	2202      	movs	r2, #2
1000251e:	4252      	negs	r2, r2
10002520:	17d3      	asrs	r3, r2, #31
10002522:	1b12      	subs	r2, r2, r4
10002524:	41ab      	sbcs	r3, r5
10002526:	2b00      	cmp	r3, #0
10002528:	dc2e      	bgt.n	10002588 <z_tick_sleep+0x80>
1000252a:	d101      	bne.n	10002530 <z_tick_sleep+0x28>
1000252c:	2a00      	cmp	r2, #0
1000252e:	d12b      	bne.n	10002588 <z_tick_sleep+0x80>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
10002530:	f001 f8f7 	bl	10003722 <sys_clock_tick_get_32>
10002534:	1903      	adds	r3, r0, r4
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10002536:	9301      	str	r3, [sp, #4]
10002538:	f3ef 8710 	mrs	r7, PRIMASK
1000253c:	b672      	cpsid	i
	pending_current = _current;
1000253e:	4e14      	ldr	r6, [pc, #80]	; (10002590 <z_tick_sleep+0x88>)
10002540:	4b14      	ldr	r3, [pc, #80]	; (10002594 <z_tick_sleep+0x8c>)
10002542:	68b2      	ldr	r2, [r6, #8]
	unready_thread(_current);
10002544:	0010      	movs	r0, r2
	pending_current = _current;
10002546:	601a      	str	r2, [r3, #0]
	unready_thread(_current);
10002548:	f7ff ff08 	bl	1000235c <unready_thread>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
1000254c:	68b0      	ldr	r0, [r6, #8]
1000254e:	0022      	movs	r2, r4
10002550:	002b      	movs	r3, r5
10002552:	4911      	ldr	r1, [pc, #68]	; (10002598 <z_tick_sleep+0x90>)
10002554:	3018      	adds	r0, #24
10002556:	f000 f90f 	bl	10002778 <z_add_timeout>
1000255a:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
1000255c:	68b2      	ldr	r2, [r6, #8]
1000255e:	0038      	movs	r0, r7
10002560:	7b51      	ldrb	r1, [r2, #13]
10002562:	430b      	orrs	r3, r1
10002564:	7353      	strb	r3, [r2, #13]
10002566:	f7fe fc55 	bl	10000e14 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
1000256a:	f001 f8da 	bl	10003722 <sys_clock_tick_get_32>
1000256e:	2300      	movs	r3, #0
10002570:	0004      	movs	r4, r0
10002572:	001d      	movs	r5, r3
10002574:	9a01      	ldr	r2, [sp, #4]
10002576:	1b12      	subs	r2, r2, r4
10002578:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
1000257a:	42ab      	cmp	r3, r5
1000257c:	dc02      	bgt.n	10002584 <z_tick_sleep+0x7c>
1000257e:	d1cb      	bne.n	10002518 <z_tick_sleep+0x10>
10002580:	42aa      	cmp	r2, r5
10002582:	d0c9      	beq.n	10002518 <z_tick_sleep+0x10>
		return ticks;
10002584:	0010      	movs	r0, r2
}
10002586:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10002588:	2002      	movs	r0, #2
1000258a:	4240      	negs	r0, r0
1000258c:	1b03      	subs	r3, r0, r4
1000258e:	e7d2      	b.n	10002536 <z_tick_sleep+0x2e>
10002590:	20000294 	.word	0x20000294
10002594:	200002c0 	.word	0x200002c0
10002598:	100035d9 	.word	0x100035d9

1000259c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
1000259c:	b510      	push	{r4, lr}
1000259e:	000b      	movs	r3, r1
100025a0:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
100025a2:	1c42      	adds	r2, r0, #1
100025a4:	d107      	bne.n	100025b6 <z_impl_k_sleep+0x1a>
100025a6:	3301      	adds	r3, #1
100025a8:	d105      	bne.n	100025b6 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
100025aa:	4b07      	ldr	r3, [pc, #28]	; (100025c8 <z_impl_k_sleep+0x2c>)
100025ac:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
100025ae:	f7ff ff1d 	bl	100023ec <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
100025b2:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
100025b4:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
100025b6:	0021      	movs	r1, r4
100025b8:	f7ff ffa6 	bl	10002508 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
100025bc:	220a      	movs	r2, #10
100025be:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
100025c0:	17c1      	asrs	r1, r0, #31
100025c2:	f7fd fe75 	bl	100002b0 <__aeabi_uldivmod>
	return ret;
100025c6:	e7f5      	b.n	100025b4 <z_impl_k_sleep+0x18>
100025c8:	20000294 	.word	0x20000294

100025cc <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
100025cc:	4b01      	ldr	r3, [pc, #4]	; (100025d4 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
100025ce:	6898      	ldr	r0, [r3, #8]
}
100025d0:	4770      	bx	lr
100025d2:	46c0      	nop			; (mov r8, r8)
100025d4:	20000294 	.word	0x20000294

100025d8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
100025d8:	b570      	push	{r4, r5, r6, lr}
100025da:	0004      	movs	r4, r0
100025dc:	f3ef 8610 	mrs	r6, PRIMASK
100025e0:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
100025e2:	2308      	movs	r3, #8
100025e4:	7b42      	ldrb	r2, [r0, #13]
100025e6:	421a      	tst	r2, r3
100025e8:	d005      	beq.n	100025f6 <z_thread_abort+0x1e>
	if (key != 0U) {
100025ea:	2e00      	cmp	r6, #0
100025ec:	d102      	bne.n	100025f4 <z_thread_abort+0x1c>
	__asm__ volatile(
100025ee:	b662      	cpsie	i
100025f0:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
100025f4:	bd70      	pop	{r4, r5, r6, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
100025f6:	2120      	movs	r1, #32
100025f8:	0010      	movs	r0, r2
100025fa:	4388      	bics	r0, r1
100025fc:	0001      	movs	r1, r0
100025fe:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
10002600:	b248      	sxtb	r0, r1
10002602:	2800      	cmp	r0, #0
10002604:	db20      	blt.n	10002648 <z_thread_abort+0x70>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10002606:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
10002608:	68a3      	ldr	r3, [r4, #8]
1000260a:	2b00      	cmp	r3, #0
1000260c:	d002      	beq.n	10002614 <z_thread_abort+0x3c>
			unpend_thread_no_timeout(thread);
1000260e:	0020      	movs	r0, r4
10002610:	f000 ffa4 	bl	1000355c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
10002614:	0020      	movs	r0, r4
10002616:	3018      	adds	r0, #24
10002618:	f001 f85a 	bl	100036d0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
1000261c:	0023      	movs	r3, r4
	return list->head == list;
1000261e:	6da5      	ldr	r5, [r4, #88]	; 0x58
10002620:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002622:	429d      	cmp	r5, r3
10002624:	d001      	beq.n	1000262a <z_thread_abort+0x52>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
10002626:	2d00      	cmp	r5, #0
10002628:	d116      	bne.n	10002658 <z_thread_abort+0x80>
		update_cache(1);
1000262a:	2001      	movs	r0, #1
1000262c:	f7ff fdaa 	bl	10002184 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
10002630:	4b10      	ldr	r3, [pc, #64]	; (10002674 <z_thread_abort+0x9c>)
10002632:	689b      	ldr	r3, [r3, #8]
10002634:	42a3      	cmp	r3, r4
10002636:	d1d8      	bne.n	100025ea <z_thread_abort+0x12>
10002638:	f3ef 8305 	mrs	r3, IPSR
1000263c:	2b00      	cmp	r3, #0
1000263e:	d1d4      	bne.n	100025ea <z_thread_abort+0x12>
10002640:	0030      	movs	r0, r6
10002642:	f7fe fbe7 	bl	10000e14 <arch_swap>
	return ret;
10002646:	e7d0      	b.n	100025ea <z_thread_abort+0x12>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002648:	215f      	movs	r1, #95	; 0x5f
1000264a:	400a      	ands	r2, r1
1000264c:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
1000264e:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002650:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10002652:	f000 ff7b 	bl	1000354c <sys_dlist_remove>
}
10002656:	e7d7      	b.n	10002608 <z_thread_abort+0x30>
		unpend_thread_no_timeout(thread);
10002658:	0028      	movs	r0, r5
1000265a:	f000 ff7f 	bl	1000355c <unpend_thread_no_timeout>
1000265e:	0028      	movs	r0, r5
10002660:	3018      	adds	r0, #24
10002662:	f001 f835 	bl	100036d0 <z_abort_timeout>
10002666:	2300      	movs	r3, #0
		ready_thread(thread);
10002668:	0028      	movs	r0, r5
1000266a:	66eb      	str	r3, [r5, #108]	; 0x6c
1000266c:	f7ff fe26 	bl	100022bc <ready_thread>
10002670:	e7d4      	b.n	1000261c <z_thread_abort+0x44>
10002672:	46c0      	nop			; (mov r8, r8)
10002674:	20000294 	.word	0x20000294

10002678 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
10002678:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
1000267a:	9d06      	ldr	r5, [sp, #24]
1000267c:	9e07      	ldr	r6, [sp, #28]
{
1000267e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
10002680:	9500      	str	r5, [sp, #0]
10002682:	9601      	str	r6, [sp, #4]
10002684:	f7ff fe9e 	bl	100023c4 <z_pend_curr>

	if (data != NULL) {
10002688:	2c00      	cmp	r4, #0
1000268a:	d003      	beq.n	10002694 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
1000268c:	4b02      	ldr	r3, [pc, #8]	; (10002698 <z_sched_wait+0x20>)
1000268e:	689b      	ldr	r3, [r3, #8]
10002690:	695b      	ldr	r3, [r3, #20]
10002692:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
10002694:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10002696:	46c0      	nop			; (mov r8, r8)
10002698:	20000294 	.word	0x20000294

1000269c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
1000269c:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
1000269e:	4806      	ldr	r0, [pc, #24]	; (100026b8 <z_data_copy+0x1c>)
100026a0:	4a06      	ldr	r2, [pc, #24]	; (100026bc <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
100026a2:	4907      	ldr	r1, [pc, #28]	; (100026c0 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
100026a4:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
100026a6:	f000 feff 	bl	100034a8 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
100026aa:	4a06      	ldr	r2, [pc, #24]	; (100026c4 <z_data_copy+0x28>)
100026ac:	4906      	ldr	r1, [pc, #24]	; (100026c8 <z_data_copy+0x2c>)
100026ae:	4807      	ldr	r0, [pc, #28]	; (100026cc <z_data_copy+0x30>)
100026b0:	f000 fefa 	bl	100034a8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
100026b4:	bd10      	pop	{r4, pc}
100026b6:	46c0      	nop			; (mov r8, r8)
100026b8:	20000000 	.word	0x20000000
100026bc:	20000078 	.word	0x20000078
100026c0:	10003af4 	.word	0x10003af4
100026c4:	00000000 	.word	0x00000000
100026c8:	10003af4 	.word	0x10003af4
100026cc:	20000000 	.word	0x20000000

100026d0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
100026d0:	2000      	movs	r0, #0
100026d2:	4b04      	ldr	r3, [pc, #16]	; (100026e4 <elapsed+0x14>)
{
100026d4:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
100026d6:	681b      	ldr	r3, [r3, #0]
100026d8:	4283      	cmp	r3, r0
100026da:	d101      	bne.n	100026e0 <elapsed+0x10>
100026dc:	f7fe ff7c 	bl	100015d8 <sys_clock_elapsed>
}
100026e0:	bd10      	pop	{r4, pc}
100026e2:	46c0      	nop			; (mov r8, r8)
100026e4:	200002cc 	.word	0x200002cc

100026e8 <next_timeout>:
	return list->head == list;
100026e8:	4b12      	ldr	r3, [pc, #72]	; (10002734 <next_timeout+0x4c>)

static int32_t next_timeout(void)
{
100026ea:	b510      	push	{r4, lr}
100026ec:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100026ee:	429c      	cmp	r4, r3
100026f0:	d100      	bne.n	100026f4 <next_timeout+0xc>
100026f2:	2400      	movs	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
100026f4:	f7ff ffec 	bl	100026d0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
100026f8:	2c00      	cmp	r4, #0
100026fa:	d019      	beq.n	10002730 <next_timeout+0x48>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
100026fc:	0002      	movs	r2, r0
100026fe:	17c3      	asrs	r3, r0, #31
10002700:	6920      	ldr	r0, [r4, #16]
10002702:	6961      	ldr	r1, [r4, #20]
10002704:	1a80      	subs	r0, r0, r2
10002706:	4199      	sbcs	r1, r3
10002708:	0002      	movs	r2, r0
1000270a:	1e0b      	subs	r3, r1, #0
	if ((to == NULL) ||
1000270c:	dc10      	bgt.n	10002730 <next_timeout+0x48>
1000270e:	2900      	cmp	r1, #0
10002710:	d103      	bne.n	1000271a <next_timeout+0x32>
10002712:	2180      	movs	r1, #128	; 0x80
10002714:	0609      	lsls	r1, r1, #24
10002716:	428a      	cmp	r2, r1
10002718:	d20a      	bcs.n	10002730 <next_timeout+0x48>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
1000271a:	43d8      	mvns	r0, r3
1000271c:	17c0      	asrs	r0, r0, #31
1000271e:	4010      	ands	r0, r2
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
10002720:	4b05      	ldr	r3, [pc, #20]	; (10002738 <next_timeout+0x50>)
10002722:	691b      	ldr	r3, [r3, #16]
10002724:	2b00      	cmp	r3, #0
10002726:	d002      	beq.n	1000272e <next_timeout+0x46>
10002728:	4298      	cmp	r0, r3
1000272a:	dd00      	ble.n	1000272e <next_timeout+0x46>
1000272c:	0018      	movs	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
1000272e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
10002730:	4802      	ldr	r0, [pc, #8]	; (1000273c <next_timeout+0x54>)
10002732:	e7f5      	b.n	10002720 <next_timeout+0x38>
10002734:	20000024 	.word	0x20000024
10002738:	20000294 	.word	0x20000294
1000273c:	7fffffff 	.word	0x7fffffff

10002740 <remove_timeout>:
{
10002740:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
10002742:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10002744:	2800      	cmp	r0, #0
10002746:	d00d      	beq.n	10002764 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
10002748:	4a0a      	ldr	r2, [pc, #40]	; (10002774 <remove_timeout+0x34>)
1000274a:	6852      	ldr	r2, [r2, #4]
1000274c:	4290      	cmp	r0, r2
1000274e:	d009      	beq.n	10002764 <remove_timeout+0x24>
	if (next(t) != NULL) {
10002750:	2b00      	cmp	r3, #0
10002752:	d007      	beq.n	10002764 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
10002754:	691c      	ldr	r4, [r3, #16]
10002756:	695d      	ldr	r5, [r3, #20]
10002758:	6901      	ldr	r1, [r0, #16]
1000275a:	6942      	ldr	r2, [r0, #20]
1000275c:	1864      	adds	r4, r4, r1
1000275e:	4155      	adcs	r5, r2
10002760:	611c      	str	r4, [r3, #16]
10002762:	615d      	str	r5, [r3, #20]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
10002764:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
10002766:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10002768:	605a      	str	r2, [r3, #4]
	node->next = NULL;
1000276a:	2300      	movs	r3, #0
1000276c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
1000276e:	6043      	str	r3, [r0, #4]
}
10002770:	bd30      	pop	{r4, r5, pc}
10002772:	46c0      	nop			; (mov r8, r8)
10002774:	20000024 	.word	0x20000024

10002778 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
10002778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000277a:	0004      	movs	r4, r0
1000277c:	0016      	movs	r6, r2
1000277e:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10002780:	1c53      	adds	r3, r2, #1
10002782:	d101      	bne.n	10002788 <z_add_timeout+0x10>
10002784:	1c7b      	adds	r3, r7, #1
10002786:	d067      	beq.n	10002858 <z_add_timeout+0xe0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
10002788:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
1000278a:	f3ef 8310 	mrs	r3, PRIMASK
1000278e:	b672      	cpsid	i

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
10002790:	2002      	movs	r0, #2
10002792:	4240      	negs	r0, r0
10002794:	17c1      	asrs	r1, r0, #31
10002796:	9301      	str	r3, [sp, #4]
10002798:	0002      	movs	r2, r0
1000279a:	000b      	movs	r3, r1
1000279c:	1b92      	subs	r2, r2, r6
1000279e:	41bb      	sbcs	r3, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
100027a0:	2b00      	cmp	r3, #0
100027a2:	db1b      	blt.n	100027dc <z_add_timeout+0x64>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
100027a4:	4b2d      	ldr	r3, [pc, #180]	; (1000285c <z_add_timeout+0xe4>)
100027a6:	681a      	ldr	r2, [r3, #0]
100027a8:	685b      	ldr	r3, [r3, #4]
100027aa:	1a80      	subs	r0, r0, r2
100027ac:	4199      	sbcs	r1, r3
100027ae:	1b80      	subs	r0, r0, r6
100027b0:	41b9      	sbcs	r1, r7

			to->dticks = MAX(1, ticks);
100027b2:	0002      	movs	r2, r0
100027b4:	1e0b      	subs	r3, r1, #0
100027b6:	dc05      	bgt.n	100027c4 <z_add_timeout+0x4c>
100027b8:	2900      	cmp	r1, #0
100027ba:	d101      	bne.n	100027c0 <z_add_timeout+0x48>
100027bc:	2800      	cmp	r0, #0
100027be:	d101      	bne.n	100027c4 <z_add_timeout+0x4c>
100027c0:	2201      	movs	r2, #1
100027c2:	2300      	movs	r3, #0
100027c4:	6122      	str	r2, [r4, #16]
100027c6:	6163      	str	r3, [r4, #20]
	return list->head == list;
100027c8:	4f25      	ldr	r7, [pc, #148]	; (10002860 <z_add_timeout+0xe8>)
100027ca:	683d      	ldr	r5, [r7, #0]
	sys_dnode_t *const tail = list->tail;
100027cc:	687e      	ldr	r6, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100027ce:	42bd      	cmp	r5, r7
100027d0:	d118      	bne.n	10002804 <z_add_timeout+0x8c>
	node->next = list;
100027d2:	6027      	str	r7, [r4, #0]
	node->prev = tail;
100027d4:	6066      	str	r6, [r4, #4]
	tail->next = node;
100027d6:	6034      	str	r4, [r6, #0]
	list->tail = node;
100027d8:	607c      	str	r4, [r7, #4]
}
100027da:	e027      	b.n	1000282c <z_add_timeout+0xb4>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
100027dc:	f7ff ff78 	bl	100026d0 <elapsed>
100027e0:	2201      	movs	r2, #1
100027e2:	2300      	movs	r3, #0
100027e4:	18b6      	adds	r6, r6, r2
100027e6:	415f      	adcs	r7, r3
100027e8:	0002      	movs	r2, r0
100027ea:	17c3      	asrs	r3, r0, #31
100027ec:	18b6      	adds	r6, r6, r2
100027ee:	415f      	adcs	r7, r3
100027f0:	6126      	str	r6, [r4, #16]
100027f2:	6167      	str	r7, [r4, #20]
100027f4:	e7e8      	b.n	100027c8 <z_add_timeout+0x50>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
100027f6:	1a12      	subs	r2, r2, r0
100027f8:	418b      	sbcs	r3, r1
100027fa:	6122      	str	r2, [r4, #16]
100027fc:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
100027fe:	42ae      	cmp	r6, r5
10002800:	d0e7      	beq.n	100027d2 <z_add_timeout+0x5a>
10002802:	682d      	ldr	r5, [r5, #0]
		for (t = first(); t != NULL; t = next(t)) {
10002804:	2d00      	cmp	r5, #0
10002806:	d0e4      	beq.n	100027d2 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
10002808:	6928      	ldr	r0, [r5, #16]
1000280a:	6969      	ldr	r1, [r5, #20]
1000280c:	6922      	ldr	r2, [r4, #16]
1000280e:	6963      	ldr	r3, [r4, #20]
10002810:	4299      	cmp	r1, r3
10002812:	dc02      	bgt.n	1000281a <z_add_timeout+0xa2>
10002814:	d1ef      	bne.n	100027f6 <z_add_timeout+0x7e>
10002816:	4290      	cmp	r0, r2
10002818:	d9ed      	bls.n	100027f6 <z_add_timeout+0x7e>
				t->dticks -= to->dticks;
1000281a:	1a80      	subs	r0, r0, r2
1000281c:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
1000281e:	686b      	ldr	r3, [r5, #4]
10002820:	6128      	str	r0, [r5, #16]
10002822:	6169      	str	r1, [r5, #20]
	node->prev = prev;
10002824:	6063      	str	r3, [r4, #4]
	node->next = successor;
10002826:	6025      	str	r5, [r4, #0]
	prev->next = node;
10002828:	601c      	str	r4, [r3, #0]
	successor->prev = node;
1000282a:	606c      	str	r4, [r5, #4]
	return list->head == list;
1000282c:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000282e:	42bb      	cmp	r3, r7
10002830:	d00c      	beq.n	1000284c <z_add_timeout+0xd4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
10002832:	429c      	cmp	r4, r3
10002834:	d10a      	bne.n	1000284c <z_add_timeout+0xd4>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
10002836:	f7ff ff57 	bl	100026e8 <next_timeout>

			if (next_time == 0 ||
1000283a:	2800      	cmp	r0, #0
1000283c:	d003      	beq.n	10002846 <z_add_timeout+0xce>
			    _current_cpu->slice_ticks != next_time) {
1000283e:	4b09      	ldr	r3, [pc, #36]	; (10002864 <z_add_timeout+0xec>)
			if (next_time == 0 ||
10002840:	691b      	ldr	r3, [r3, #16]
10002842:	4283      	cmp	r3, r0
10002844:	d002      	beq.n	1000284c <z_add_timeout+0xd4>
				sys_clock_set_timeout(next_time, false);
10002846:	2100      	movs	r1, #0
10002848:	f7fe fe48 	bl	100014dc <sys_clock_set_timeout>
	if (key != 0U) {
1000284c:	9b01      	ldr	r3, [sp, #4]
1000284e:	2b00      	cmp	r3, #0
10002850:	d102      	bne.n	10002858 <z_add_timeout+0xe0>
	__asm__ volatile(
10002852:	b662      	cpsie	i
10002854:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
10002858:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000285a:	46c0      	nop			; (mov r8, r8)
1000285c:	20000158 	.word	0x20000158
10002860:	20000024 	.word	0x20000024
10002864:	20000294 	.word	0x20000294

10002868 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
10002868:	b5f0      	push	{r4, r5, r6, r7, lr}
1000286a:	b08b      	sub	sp, #44	; 0x2c
1000286c:	0004      	movs	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
1000286e:	f7ff fce7 	bl	10002240 <z_time_slice>
	__asm__ volatile("mrs %0, PRIMASK;"
10002872:	f3ef 8310 	mrs	r3, PRIMASK
10002876:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
10002878:	9305      	str	r3, [sp, #20]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
1000287a:	4b32      	ldr	r3, [pc, #200]	; (10002944 <sys_clock_announce+0xdc>)
1000287c:	601c      	str	r4, [r3, #0]
	return list->head == list;
1000287e:	4b32      	ldr	r3, [pc, #200]	; (10002948 <sys_clock_announce+0xe0>)

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
10002880:	4832      	ldr	r0, [pc, #200]	; (1000294c <sys_clock_announce+0xe4>)
	while (first() != NULL && first()->dticks <= announce_remaining) {
10002882:	4d30      	ldr	r5, [pc, #192]	; (10002944 <sys_clock_announce+0xdc>)
10002884:	681c      	ldr	r4, [r3, #0]
		curr_tick += dt;
10002886:	6801      	ldr	r1, [r0, #0]
10002888:	6842      	ldr	r2, [r0, #4]
1000288a:	9106      	str	r1, [sp, #24]
1000288c:	9207      	str	r2, [sp, #28]
	while (first() != NULL && first()->dticks <= announce_remaining) {
1000288e:	6829      	ldr	r1, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002890:	429c      	cmp	r4, r3
10002892:	d019      	beq.n	100028c8 <sys_clock_announce+0x60>
10002894:	2c00      	cmp	r4, #0
10002896:	d017      	beq.n	100028c8 <sys_clock_announce+0x60>
10002898:	6922      	ldr	r2, [r4, #16]
1000289a:	6963      	ldr	r3, [r4, #20]
1000289c:	9200      	str	r2, [sp, #0]
1000289e:	9301      	str	r3, [sp, #4]
100028a0:	9a01      	ldr	r2, [sp, #4]
100028a2:	17cb      	asrs	r3, r1, #31
100028a4:	9102      	str	r1, [sp, #8]
100028a6:	9303      	str	r3, [sp, #12]
100028a8:	429a      	cmp	r2, r3
100028aa:	dc03      	bgt.n	100028b4 <sys_clock_announce+0x4c>
100028ac:	d123      	bne.n	100028f6 <sys_clock_announce+0x8e>
100028ae:	9a00      	ldr	r2, [sp, #0]
100028b0:	428a      	cmp	r2, r1
100028b2:	d920      	bls.n	100028f6 <sys_clock_announce+0x8e>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
100028b4:	9a02      	ldr	r2, [sp, #8]
100028b6:	9b03      	ldr	r3, [sp, #12]
100028b8:	9e00      	ldr	r6, [sp, #0]
100028ba:	9f01      	ldr	r7, [sp, #4]
100028bc:	1ab6      	subs	r6, r6, r2
100028be:	419f      	sbcs	r7, r3
100028c0:	0032      	movs	r2, r6
100028c2:	003b      	movs	r3, r7
100028c4:	6122      	str	r2, [r4, #16]
100028c6:	6163      	str	r3, [r4, #20]
	}

	curr_tick += announce_remaining;
100028c8:	9e06      	ldr	r6, [sp, #24]
100028ca:	9f07      	ldr	r7, [sp, #28]
100028cc:	000a      	movs	r2, r1
100028ce:	17cb      	asrs	r3, r1, #31
100028d0:	18b6      	adds	r6, r6, r2
100028d2:	415f      	adcs	r7, r3
	announce_remaining = 0;
100028d4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
100028d6:	6006      	str	r6, [r0, #0]
100028d8:	6047      	str	r7, [r0, #4]
	announce_remaining = 0;
100028da:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
100028dc:	f7ff ff04 	bl	100026e8 <next_timeout>
100028e0:	0021      	movs	r1, r4
100028e2:	f7fe fdfb 	bl	100014dc <sys_clock_set_timeout>
	if (key != 0U) {
100028e6:	9b05      	ldr	r3, [sp, #20]
100028e8:	42a3      	cmp	r3, r4
100028ea:	d102      	bne.n	100028f2 <sys_clock_announce+0x8a>
	__asm__ volatile(
100028ec:	b662      	cpsie	i
100028ee:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
100028f2:	b00b      	add	sp, #44	; 0x2c
100028f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curr_tick += dt;
100028f6:	9b00      	ldr	r3, [sp, #0]
100028f8:	9e06      	ldr	r6, [sp, #24]
100028fa:	9f07      	ldr	r7, [sp, #28]
100028fc:	9308      	str	r3, [sp, #32]
100028fe:	17db      	asrs	r3, r3, #31
10002900:	9309      	str	r3, [sp, #36]	; 0x24
10002902:	9a08      	ldr	r2, [sp, #32]
10002904:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002906:	18b6      	adds	r6, r6, r2
10002908:	415f      	adcs	r7, r3
1000290a:	4b10      	ldr	r3, [pc, #64]	; (1000294c <sys_clock_announce+0xe4>)
		remove_timeout(t);
1000290c:	0020      	movs	r0, r4
		curr_tick += dt;
1000290e:	601e      	str	r6, [r3, #0]
10002910:	605f      	str	r7, [r3, #4]
		announce_remaining -= dt;
10002912:	9b00      	ldr	r3, [sp, #0]
10002914:	1aca      	subs	r2, r1, r3
10002916:	4b0b      	ldr	r3, [pc, #44]	; (10002944 <sys_clock_announce+0xdc>)
10002918:	601a      	str	r2, [r3, #0]
		t->dticks = 0;
1000291a:	2300      	movs	r3, #0
1000291c:	2200      	movs	r2, #0
1000291e:	6122      	str	r2, [r4, #16]
10002920:	6163      	str	r3, [r4, #20]
		remove_timeout(t);
10002922:	f7ff ff0d 	bl	10002740 <remove_timeout>
	if (key != 0U) {
10002926:	9b05      	ldr	r3, [sp, #20]
10002928:	2b00      	cmp	r3, #0
1000292a:	d102      	bne.n	10002932 <sys_clock_announce+0xca>
	__asm__ volatile(
1000292c:	b662      	cpsie	i
1000292e:	f3bf 8f6f 	isb	sy
		t->fn(t);
10002932:	0020      	movs	r0, r4
10002934:	68a3      	ldr	r3, [r4, #8]
10002936:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10002938:	f3ef 8310 	mrs	r3, PRIMASK
1000293c:	b672      	cpsid	i
1000293e:	9305      	str	r3, [sp, #20]
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
10002940:	e79d      	b.n	1000287e <sys_clock_announce+0x16>
10002942:	46c0      	nop			; (mov r8, r8)
10002944:	200002cc 	.word	0x200002cc
10002948:	20000024 	.word	0x20000024
1000294c:	20000158 	.word	0x20000158

10002950 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
10002950:	b510      	push	{r4, lr}
10002952:	f3ef 8410 	mrs	r4, PRIMASK
10002956:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
10002958:	f7fe fe3e 	bl	100015d8 <sys_clock_elapsed>
1000295c:	2300      	movs	r3, #0
1000295e:	0002      	movs	r2, r0
10002960:	4905      	ldr	r1, [pc, #20]	; (10002978 <sys_clock_tick_get+0x28>)
10002962:	6808      	ldr	r0, [r1, #0]
10002964:	6849      	ldr	r1, [r1, #4]
10002966:	1880      	adds	r0, r0, r2
10002968:	4159      	adcs	r1, r3
	if (key != 0U) {
1000296a:	429c      	cmp	r4, r3
1000296c:	d102      	bne.n	10002974 <sys_clock_tick_get+0x24>
	__asm__ volatile(
1000296e:	b662      	cpsie	i
10002970:	f3bf 8f6f 	isb	sy
	}
	return t;
}
10002974:	bd10      	pop	{r4, pc}
10002976:	46c0      	nop			; (mov r8, r8)
10002978:	20000158 	.word	0x20000158

1000297c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
1000297c:	b570      	push	{r4, r5, r6, lr}
1000297e:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10002980:	f3ef 8510 	mrs	r5, PRIMASK
10002984:	b672      	cpsid	i

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
10002986:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
10002988:	6a80      	ldr	r0, [r0, #40]	; 0x28
1000298a:	2201      	movs	r2, #1
1000298c:	2300      	movs	r3, #0
1000298e:	1812      	adds	r2, r2, r0
10002990:	414b      	adcs	r3, r1
	k.key = arch_irq_lock();
10002992:	002e      	movs	r6, r5
10002994:	2b00      	cmp	r3, #0
10002996:	d101      	bne.n	1000299c <z_timer_expiration_handler+0x20>
10002998:	2a01      	cmp	r2, #1
1000299a:	d905      	bls.n	100029a8 <z_timer_expiration_handler+0x2c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
1000299c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
1000299e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
100029a0:	0020      	movs	r0, r4
100029a2:	4917      	ldr	r1, [pc, #92]	; (10002a00 <z_timer_expiration_handler+0x84>)
100029a4:	f7ff fee8 	bl	10002778 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
100029a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
100029aa:	3301      	adds	r3, #1
100029ac:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
100029ae:	6a23      	ldr	r3, [r4, #32]
100029b0:	2b00      	cmp	r3, #0
100029b2:	d00a      	beq.n	100029ca <z_timer_expiration_handler+0x4e>
	if (key != 0U) {
100029b4:	2d00      	cmp	r5, #0
100029b6:	d102      	bne.n	100029be <z_timer_expiration_handler+0x42>
	__asm__ volatile(
100029b8:	b662      	cpsie	i
100029ba:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
100029be:	0020      	movs	r0, r4
100029c0:	6a23      	ldr	r3, [r4, #32]
100029c2:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
100029c4:	f3ef 8610 	mrs	r6, PRIMASK
100029c8:	b672      	cpsid	i
	return list->head == list;
100029ca:	69a5      	ldr	r5, [r4, #24]
100029cc:	3418      	adds	r4, #24
	return sys_dlist_is_empty(list) ? NULL : list->head;
100029ce:	42a5      	cmp	r5, r4
100029d0:	d001      	beq.n	100029d6 <z_timer_expiration_handler+0x5a>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
100029d2:	2d00      	cmp	r5, #0
100029d4:	d105      	bne.n	100029e2 <z_timer_expiration_handler+0x66>
	if (key != 0U) {
100029d6:	2e00      	cmp	r6, #0
100029d8:	d102      	bne.n	100029e0 <z_timer_expiration_handler+0x64>
	__asm__ volatile(
100029da:	b662      	cpsie	i
100029dc:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
100029e0:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
100029e2:	0028      	movs	r0, r5
100029e4:	f000 fdc5 	bl	10003572 <z_unpend_thread_no_timeout>
100029e8:	2300      	movs	r3, #0
100029ea:	66eb      	str	r3, [r5, #108]	; 0x6c
	if (key != 0U) {
100029ec:	429e      	cmp	r6, r3
100029ee:	d102      	bne.n	100029f6 <z_timer_expiration_handler+0x7a>
	__asm__ volatile(
100029f0:	b662      	cpsie	i
100029f2:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
100029f6:	0028      	movs	r0, r5
100029f8:	f000 fde2 	bl	100035c0 <z_ready_thread>
100029fc:	e7f0      	b.n	100029e0 <z_timer_expiration_handler+0x64>
100029fe:	46c0      	nop			; (mov r8, r8)
10002a00:	1000297d 	.word	0x1000297d

10002a04 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
10002a04:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
10002a06:	0016      	movs	r6, r2
10002a08:	001f      	movs	r7, r3
10002a0a:	0004      	movs	r4, r0
10002a0c:	9808      	ldr	r0, [sp, #32]
10002a0e:	9909      	ldr	r1, [sp, #36]	; 0x24
10002a10:	9600      	str	r6, [sp, #0]
10002a12:	9701      	str	r7, [sp, #4]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
10002a14:	1c53      	adds	r3, r2, #1
10002a16:	d101      	bne.n	10002a1c <z_impl_k_timer_start+0x18>
10002a18:	1c7b      	adds	r3, r7, #1
10002a1a:	d043      	beq.n	10002aa4 <z_impl_k_timer_start+0xa0>
10002a1c:	9002      	str	r0, [sp, #8]
10002a1e:	9103      	str	r1, [sp, #12]
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
10002a20:	1c43      	adds	r3, r0, #1
10002a22:	d101      	bne.n	10002a28 <z_impl_k_timer_start+0x24>
10002a24:	1c4b      	adds	r3, r1, #1
10002a26:	d019      	beq.n	10002a5c <z_impl_k_timer_start+0x58>
10002a28:	0003      	movs	r3, r0
10002a2a:	430b      	orrs	r3, r1
10002a2c:	d016      	beq.n	10002a5c <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
10002a2e:	2202      	movs	r2, #2
10002a30:	4252      	negs	r2, r2
10002a32:	17d3      	asrs	r3, r2, #31
10002a34:	1a12      	subs	r2, r2, r0
10002a36:	418b      	sbcs	r3, r1
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
10002a38:	2b00      	cmp	r3, #0
10002a3a:	da0f      	bge.n	10002a5c <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
10002a3c:	0002      	movs	r2, r0
10002a3e:	1e0b      	subs	r3, r1, #0
10002a40:	db03      	blt.n	10002a4a <z_impl_k_timer_start+0x46>
10002a42:	2900      	cmp	r1, #0
10002a44:	d103      	bne.n	10002a4e <z_impl_k_timer_start+0x4a>
10002a46:	2802      	cmp	r0, #2
10002a48:	d201      	bcs.n	10002a4e <z_impl_k_timer_start+0x4a>
10002a4a:	2202      	movs	r2, #2
10002a4c:	2300      	movs	r3, #0
10002a4e:	2001      	movs	r0, #1
10002a50:	4240      	negs	r0, r0
10002a52:	17c1      	asrs	r1, r0, #31
10002a54:	1812      	adds	r2, r2, r0
10002a56:	414b      	adcs	r3, r1
10002a58:	9202      	str	r2, [sp, #8]
10002a5a:	9303      	str	r3, [sp, #12]
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
10002a5c:	2202      	movs	r2, #2
10002a5e:	4252      	negs	r2, r2
10002a60:	17d3      	asrs	r3, r2, #31
10002a62:	1b92      	subs	r2, r2, r6
10002a64:	41bb      	sbcs	r3, r7
10002a66:	2b00      	cmp	r3, #0
10002a68:	da0d      	bge.n	10002a86 <z_impl_k_timer_start+0x82>
		duration.ticks = MAX(duration.ticks - 1, 0);
10002a6a:	2f00      	cmp	r7, #0
10002a6c:	dc04      	bgt.n	10002a78 <z_impl_k_timer_start+0x74>
10002a6e:	d101      	bne.n	10002a74 <z_impl_k_timer_start+0x70>
10002a70:	2e00      	cmp	r6, #0
10002a72:	d101      	bne.n	10002a78 <z_impl_k_timer_start+0x74>
10002a74:	2601      	movs	r6, #1
10002a76:	2700      	movs	r7, #0
10002a78:	2201      	movs	r2, #1
10002a7a:	4252      	negs	r2, r2
10002a7c:	17d3      	asrs	r3, r2, #31
10002a7e:	18b6      	adds	r6, r6, r2
10002a80:	415f      	adcs	r7, r3
10002a82:	9600      	str	r6, [sp, #0]
10002a84:	9701      	str	r7, [sp, #4]
	}

	(void)z_abort_timeout(&timer->timeout);
10002a86:	0020      	movs	r0, r4
10002a88:	f000 fe22 	bl	100036d0 <z_abort_timeout>
	timer->period = period;
10002a8c:	9a02      	ldr	r2, [sp, #8]
10002a8e:	9b03      	ldr	r3, [sp, #12]
10002a90:	62a2      	str	r2, [r4, #40]	; 0x28
10002a92:	62e3      	str	r3, [r4, #44]	; 0x2c
	timer->status = 0U;
10002a94:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
10002a96:	0020      	movs	r0, r4
	timer->status = 0U;
10002a98:	6323      	str	r3, [r4, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
10002a9a:	4903      	ldr	r1, [pc, #12]	; (10002aa8 <z_impl_k_timer_start+0xa4>)
10002a9c:	9a00      	ldr	r2, [sp, #0]
10002a9e:	9b01      	ldr	r3, [sp, #4]
10002aa0:	f7ff fe6a 	bl	10002778 <z_add_timeout>
		     duration);
}
10002aa4:	bddf      	pop	{r0, r1, r2, r3, r4, r6, r7, pc}
10002aa6:	46c0      	nop			; (mov r8, r8)
10002aa8:	1000297d 	.word	0x1000297d

10002aac <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
10002aac:	b510      	push	{r4, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
10002aae:	4a03      	ldr	r2, [pc, #12]	; (10002abc <boot_banner+0x10>)
10002ab0:	4903      	ldr	r1, [pc, #12]	; (10002ac0 <boot_banner+0x14>)
10002ab2:	4804      	ldr	r0, [pc, #16]	; (10002ac4 <boot_banner+0x18>)
10002ab4:	f000 f851 	bl	10002b5a <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
10002ab8:	bd10      	pop	{r4, pc}
10002aba:	46c0      	nop			; (mov r8, r8)
10002abc:	10003a76 	.word	0x10003a76
10002ac0:	10003aa2 	.word	0x10003aa2
10002ac4:	10003ac3 	.word	0x10003ac3

10002ac8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
10002ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
10002aca:	4b08      	ldr	r3, [pc, #32]	; (10002aec <k_sys_work_q_init+0x24>)
10002acc:	2400      	movs	r4, #0
10002ace:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
10002ad0:	2280      	movs	r2, #128	; 0x80
10002ad2:	2301      	movs	r3, #1
	struct k_work_queue_config cfg = {
10002ad4:	a902      	add	r1, sp, #8
10002ad6:	710c      	strb	r4, [r1, #4]
	k_work_queue_start(&k_sys_work_q,
10002ad8:	4805      	ldr	r0, [pc, #20]	; (10002af0 <k_sys_work_q_init+0x28>)
10002ada:	9100      	str	r1, [sp, #0]
10002adc:	425b      	negs	r3, r3
10002ade:	4905      	ldr	r1, [pc, #20]	; (10002af4 <k_sys_work_q_init+0x2c>)
10002ae0:	00d2      	lsls	r2, r2, #3
10002ae2:	f7ff fab5 	bl	10002050 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
10002ae6:	0020      	movs	r0, r4
10002ae8:	b004      	add	sp, #16
10002aea:	bd10      	pop	{r4, pc}
10002aec:	10003aea 	.word	0x10003aea
10002af0:	20000160 	.word	0x20000160
10002af4:	20000fd8 	.word	0x20000fd8

10002af8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
10002af8:	4770      	bx	lr

10002afa <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
10002afa:	0002      	movs	r2, r0
10002afc:	b510      	push	{r4, lr}
10002afe:	000b      	movs	r3, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10002b00:	7911      	ldrb	r1, [r2, #4]
10002b02:	2201      	movs	r2, #1
10002b04:	0014      	movs	r4, r2
10002b06:	408c      	lsls	r4, r1
10002b08:	0021      	movs	r1, r4
	return gpio_pin_set(spec->port, spec->pin, value);
10002b0a:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10002b0c:	6904      	ldr	r4, [r0, #16]
10002b0e:	6824      	ldr	r4, [r4, #0]
10002b10:	420c      	tst	r4, r1
10002b12:	d000      	beq.n	10002b16 <gpio_pin_set_dt.isra.0+0x1c>
		value = (value != 0) ? 0 : 1;
10002b14:	4053      	eors	r3, r2
	if (value != 0)	{
10002b16:	2b00      	cmp	r3, #0
10002b18:	d003      	beq.n	10002b22 <gpio_pin_set_dt.isra.0+0x28>
	return api->port_set_bits_raw(port, pins);
10002b1a:	6883      	ldr	r3, [r0, #8]
10002b1c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
10002b1e:	4798      	blx	r3
}
10002b20:	bd10      	pop	{r4, pc}
	return api->port_clear_bits_raw(port, pins);
10002b22:	6883      	ldr	r3, [r0, #8]
10002b24:	691b      	ldr	r3, [r3, #16]
10002b26:	e7fa      	b.n	10002b1e <gpio_pin_set_dt.isra.0+0x24>

10002b28 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10002b28:	2301      	movs	r3, #1
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
10002b2a:	b510      	push	{r4, lr}
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10002b2c:	001c      	movs	r4, r3
10002b2e:	408c      	lsls	r4, r1
10002b30:	0021      	movs	r1, r4
10002b32:	6904      	ldr	r4, [r0, #16]
10002b34:	6824      	ldr	r4, [r4, #0]
10002b36:	420c      	tst	r4, r1
10002b38:	d000      	beq.n	10002b3c <gpio_pin_set.isra.0+0x14>
		value = (value != 0) ? 0 : 1;
10002b3a:	405a      	eors	r2, r3
	if (value != 0)	{
10002b3c:	2a00      	cmp	r2, #0
10002b3e:	d003      	beq.n	10002b48 <gpio_pin_set.isra.0+0x20>
	return api->port_set_bits_raw(port, pins);
10002b40:	6883      	ldr	r3, [r0, #8]
10002b42:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
10002b44:	4798      	blx	r3
}
10002b46:	bd10      	pop	{r4, pc}
	return api->port_clear_bits_raw(port, pins);
10002b48:	6883      	ldr	r3, [r0, #8]
10002b4a:	691b      	ldr	r3, [r3, #16]
10002b4c:	e7fa      	b.n	10002b44 <gpio_pin_set.isra.0+0x1c>

10002b4e <led_timer_handler>:
void led_timer_handler(struct k_timer *timer_id) {
10002b4e:	b510      	push	{r4, lr}
	led_vPing();
10002b50:	f7fd fd24 	bl	1000059c <led_vPing>
}
10002b54:	bd10      	pop	{r4, pc}

10002b56 <arch_printk_char_out>:
}
10002b56:	2000      	movs	r0, #0
10002b58:	4770      	bx	lr

10002b5a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
10002b5a:	b40f      	push	{r0, r1, r2, r3}
10002b5c:	b507      	push	{r0, r1, r2, lr}
10002b5e:	a904      	add	r1, sp, #16
10002b60:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
10002b62:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
10002b64:	f7fd fd54 	bl	10000610 <vprintk>

	va_end(ap);
}
10002b68:	b003      	add	sp, #12
10002b6a:	bc08      	pop	{r3}
10002b6c:	b004      	add	sp, #16
10002b6e:	4718      	bx	r3

10002b70 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
10002b70:	b510      	push	{r4, lr}
10002b72:	0004      	movs	r4, r0
10002b74:	0008      	movs	r0, r1
10002b76:	0011      	movs	r1, r2
10002b78:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
10002b7a:	47a0      	blx	r4
	return z_impl_z_current_get();
10002b7c:	f7ff fd26 	bl	100025cc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
10002b80:	f7fe fa60 	bl	10001044 <z_impl_k_thread_abort>

10002b84 <encode_uint>:
{
10002b84:	b5f0      	push	{r4, r5, r6, r7, lr}
10002b86:	b085      	sub	sp, #20
10002b88:	9001      	str	r0, [sp, #4]
10002b8a:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
10002b8c:	78d3      	ldrb	r3, [r2, #3]
{
10002b8e:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
10002b90:	001a      	movs	r2, r3
10002b92:	3a41      	subs	r2, #65	; 0x41
10002b94:	000f      	movs	r7, r1
	switch (specifier) {
10002b96:	2408      	movs	r4, #8
10002b98:	9202      	str	r2, [sp, #8]
10002b9a:	2b6f      	cmp	r3, #111	; 0x6f
10002b9c:	d00a      	beq.n	10002bb4 <encode_uint+0x30>
10002b9e:	d804      	bhi.n	10002baa <encode_uint+0x26>
		return 10;
10002ba0:	3402      	adds	r4, #2
	switch (specifier) {
10002ba2:	2b58      	cmp	r3, #88	; 0x58
10002ba4:	d106      	bne.n	10002bb4 <encode_uint+0x30>
		return 16;
10002ba6:	3406      	adds	r4, #6
10002ba8:	e004      	b.n	10002bb4 <encode_uint+0x30>
	switch (specifier) {
10002baa:	2208      	movs	r2, #8
		return 10;
10002bac:	240a      	movs	r4, #10
	switch (specifier) {
10002bae:	4393      	bics	r3, r2
10002bb0:	2b70      	cmp	r3, #112	; 0x70
10002bb2:	d0f8      	beq.n	10002ba6 <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
10002bb4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
10002bb6:	0022      	movs	r2, r4
10002bb8:	2300      	movs	r3, #0
10002bba:	0039      	movs	r1, r7
10002bbc:	9801      	ldr	r0, [sp, #4]
10002bbe:	f7fd fb77 	bl	100002b0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10002bc2:	0013      	movs	r3, r2
10002bc4:	468c      	mov	ip, r1
10002bc6:	b2d2      	uxtb	r2, r2
10002bc8:	2b09      	cmp	r3, #9
10002bca:	d819      	bhi.n	10002c00 <encode_uint+0x7c>
10002bcc:	0013      	movs	r3, r2
10002bce:	3330      	adds	r3, #48	; 0x30
10002bd0:	b2db      	uxtb	r3, r3
10002bd2:	3e01      	subs	r6, #1
10002bd4:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
10002bd6:	2300      	movs	r3, #0
10002bd8:	42bb      	cmp	r3, r7
10002bda:	d102      	bne.n	10002be2 <encode_uint+0x5e>
10002bdc:	9b01      	ldr	r3, [sp, #4]
10002bde:	429c      	cmp	r4, r3
10002be0:	d802      	bhi.n	10002be8 <encode_uint+0x64>
10002be2:	9b03      	ldr	r3, [sp, #12]
10002be4:	429e      	cmp	r6, r3
10002be6:	d808      	bhi.n	10002bfa <encode_uint+0x76>
	if (conv->flag_hash) {
10002be8:	782b      	ldrb	r3, [r5, #0]
10002bea:	069b      	lsls	r3, r3, #26
10002bec:	d513      	bpl.n	10002c16 <encode_uint+0x92>
		if (radix == 8) {
10002bee:	2c08      	cmp	r4, #8
10002bf0:	d10f      	bne.n	10002c12 <encode_uint+0x8e>
			conv->altform_0c = true;
10002bf2:	78ab      	ldrb	r3, [r5, #2]
10002bf4:	431c      	orrs	r4, r3
10002bf6:	70ac      	strb	r4, [r5, #2]
	return bp;
10002bf8:	e00d      	b.n	10002c16 <encode_uint+0x92>
		value /= radix;
10002bfa:	4667      	mov	r7, ip
10002bfc:	9001      	str	r0, [sp, #4]
10002bfe:	e7da      	b.n	10002bb6 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10002c00:	0013      	movs	r3, r2
10002c02:	9902      	ldr	r1, [sp, #8]
10002c04:	3357      	adds	r3, #87	; 0x57
10002c06:	b2db      	uxtb	r3, r3
10002c08:	2919      	cmp	r1, #25
10002c0a:	d8e2      	bhi.n	10002bd2 <encode_uint+0x4e>
10002c0c:	3237      	adds	r2, #55	; 0x37
10002c0e:	b2d3      	uxtb	r3, r2
10002c10:	e7df      	b.n	10002bd2 <encode_uint+0x4e>
		} else if (radix == 16) {
10002c12:	2c10      	cmp	r4, #16
10002c14:	d0ed      	beq.n	10002bf2 <encode_uint+0x6e>
}
10002c16:	0030      	movs	r0, r6
10002c18:	b005      	add	sp, #20
10002c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002c1c <outs>:
{
10002c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002c1e:	000f      	movs	r7, r1
10002c20:	0015      	movs	r5, r2
10002c22:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10002c24:	0014      	movs	r4, r2
{
10002c26:	9001      	str	r0, [sp, #4]
10002c28:	1b60      	subs	r0, r4, r5
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10002c2a:	42a6      	cmp	r6, r4
10002c2c:	d804      	bhi.n	10002c38 <outs+0x1c>
10002c2e:	2e00      	cmp	r6, #0
10002c30:	d109      	bne.n	10002c46 <outs+0x2a>
10002c32:	7823      	ldrb	r3, [r4, #0]
10002c34:	2b00      	cmp	r3, #0
10002c36:	d006      	beq.n	10002c46 <outs+0x2a>
		int rc = out((int)*sp++, ctx);
10002c38:	7820      	ldrb	r0, [r4, #0]
10002c3a:	0039      	movs	r1, r7
10002c3c:	9b01      	ldr	r3, [sp, #4]
10002c3e:	4798      	blx	r3
		if (rc < 0) {
10002c40:	3401      	adds	r4, #1
10002c42:	2800      	cmp	r0, #0
10002c44:	daf0      	bge.n	10002c28 <outs+0xc>
}
10002c46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10002c48 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
10002c48:	4770      	bx	lr

10002c4a <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10002c4a:	b510      	push	{r4, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
10002c4c:	f000 fc12 	bl	10003474 <z_fatal_error>
}
10002c50:	bd10      	pop	{r4, pc}

10002c52 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
10002c52:	b510      	push	{r4, lr}
10002c54:	0001      	movs	r1, r0
	z_fatal_error(reason, esf);
10002c56:	6800      	ldr	r0, [r0, #0]
10002c58:	f000 fc0c 	bl	10003474 <z_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
10002c5c:	bd10      	pop	{r4, pc}

10002c5e <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
10002c5e:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
10002c60:	2100      	movs	r1, #0
10002c62:	2001      	movs	r0, #1
10002c64:	f7ff fff1 	bl	10002c4a <z_arm_fatal_error>
}
10002c68:	bd10      	pop	{r4, pc}

10002c6a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
10002c6a:	b510      	push	{r4, lr}
	handler();
10002c6c:	f7fe f8ba 	bl	10000de4 <z_SysNmiOnReset>
	z_arm_int_exit();
10002c70:	f7fe f964 	bl	10000f3c <z_arm_exc_exit>
}
10002c74:	bd10      	pop	{r4, pc}

10002c76 <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
10002c76:	4770      	bx	lr

10002c78 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
10002c78:	0003      	movs	r3, r0
	size_t n = 0;
10002c7a:	2000      	movs	r0, #0

	while (*s != '\0') {
10002c7c:	5c1a      	ldrb	r2, [r3, r0]
10002c7e:	2a00      	cmp	r2, #0
10002c80:	d100      	bne.n	10002c84 <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
10002c82:	4770      	bx	lr
		n++;
10002c84:	3001      	adds	r0, #1
10002c86:	e7f9      	b.n	10002c7c <strlen+0x4>

10002c88 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
10002c88:	0003      	movs	r3, r0
	size_t n = 0;
10002c8a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
10002c8c:	5c1a      	ldrb	r2, [r3, r0]
10002c8e:	2a00      	cmp	r2, #0
10002c90:	d001      	beq.n	10002c96 <strnlen+0xe>
10002c92:	4288      	cmp	r0, r1
10002c94:	d100      	bne.n	10002c98 <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
10002c96:	4770      	bx	lr
		n++;
10002c98:	3001      	adds	r0, #1
10002c9a:	e7f7      	b.n	10002c8c <strnlen+0x4>

10002c9c <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
10002c9c:	2300      	movs	r3, #0
{
10002c9e:	b510      	push	{r4, lr}
	while (n > 0) {
10002ca0:	429a      	cmp	r2, r3
10002ca2:	d100      	bne.n	10002ca6 <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
10002ca4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
10002ca6:	5ccc      	ldrb	r4, [r1, r3]
10002ca8:	54c4      	strb	r4, [r0, r3]
		n--;
10002caa:	3301      	adds	r3, #1
10002cac:	e7f8      	b.n	10002ca0 <memcpy+0x4>

10002cae <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
10002cae:	0003      	movs	r3, r0
10002cb0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
10002cb2:	1882      	adds	r2, r0, r2
10002cb4:	4293      	cmp	r3, r2
10002cb6:	d100      	bne.n	10002cba <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
10002cb8:	4770      	bx	lr
		*(d_byte++) = c_byte;
10002cba:	7019      	strb	r1, [r3, #0]
		n--;
10002cbc:	3301      	adds	r3, #1
10002cbe:	e7f9      	b.n	10002cb4 <memset+0x6>

10002cc0 <_stdout_hook_default>:
	return EOF;
10002cc0:	2001      	movs	r0, #1
}
10002cc2:	4240      	negs	r0, r0
10002cc4:	4770      	bx	lr

10002cc6 <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
10002cc6:	23d0      	movs	r3, #208	; 0xd0
10002cc8:	061b      	lsls	r3, r3, #24
10002cca:	685b      	ldr	r3, [r3, #4]
}
10002ccc:	2000      	movs	r0, #0
	*value = gpio_get_all();
10002cce:	600b      	str	r3, [r1, #0]
}
10002cd0:	4770      	bx	lr

10002cd2 <gpio_rpi_port_set_masked_raw>:
 * corresponding bit in \p value, leaving other pins unchanged.
 * Since this uses the TOGL alias, it is concurrency-safe with e.g. an IRQ
 * bashing different pins from the same core.
 */
static inline void gpio_put_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10002cd2:	23d0      	movs	r3, #208	; 0xd0
10002cd4:	061b      	lsls	r3, r3, #24
10002cd6:	6918      	ldr	r0, [r3, #16]
10002cd8:	4042      	eors	r2, r0
10002cda:	4011      	ands	r1, r2
}
10002cdc:	2000      	movs	r0, #0
10002cde:	61d9      	str	r1, [r3, #28]
10002ce0:	4770      	bx	lr

10002ce2 <gpio_rpi_port_set_bits_raw>:
    sio_hw->gpio_set = mask;
10002ce2:	23d0      	movs	r3, #208	; 0xd0
10002ce4:	061b      	lsls	r3, r3, #24
}
10002ce6:	2000      	movs	r0, #0
10002ce8:	6159      	str	r1, [r3, #20]
10002cea:	4770      	bx	lr

10002cec <gpio_rpi_port_clear_bits_raw>:
    sio_hw->gpio_clr = mask;
10002cec:	23d0      	movs	r3, #208	; 0xd0
10002cee:	061b      	lsls	r3, r3, #24
}
10002cf0:	2000      	movs	r0, #0
10002cf2:	6199      	str	r1, [r3, #24]
10002cf4:	4770      	bx	lr

10002cf6 <gpio_rpi_port_toggle_bits>:
    sio_hw->gpio_togl = mask;
10002cf6:	23d0      	movs	r3, #208	; 0xd0
10002cf8:	061b      	lsls	r3, r3, #24
}
10002cfa:	2000      	movs	r0, #0
10002cfc:	61d9      	str	r1, [r3, #28]
10002cfe:	4770      	bx	lr

10002d00 <gpio_rpi_manage_callback>:
	struct gpio_rpi_data *data = dev->data;
10002d00:	6903      	ldr	r3, [r0, #16]
{
10002d02:	b530      	push	{r4, r5, lr}
	return list->head;
10002d04:	6858      	ldr	r0, [r3, #4]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10002d06:	2400      	movs	r4, #0
	if (!sys_slist_is_empty(callbacks)) {
10002d08:	2800      	cmp	r0, #0
10002d0a:	d104      	bne.n	10002d16 <gpio_rpi_manage_callback+0x16>
	if (set) {
10002d0c:	2a00      	cmp	r2, #0
10002d0e:	d11a      	bne.n	10002d46 <gpio_rpi_manage_callback+0x46>
	return 0;
10002d10:	2000      	movs	r0, #0
}
10002d12:	bd30      	pop	{r4, r5, pc}
10002d14:	0028      	movs	r0, r5
10002d16:	4281      	cmp	r1, r0
10002d18:	d10f      	bne.n	10002d3a <gpio_rpi_manage_callback+0x3a>
	return node->next;
10002d1a:	6808      	ldr	r0, [r1, #0]
	return list->tail;
10002d1c:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
10002d1e:	2c00      	cmp	r4, #0
10002d20:	d106      	bne.n	10002d30 <gpio_rpi_manage_callback+0x30>
	list->head = node;
10002d22:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
10002d24:	428d      	cmp	r5, r1
10002d26:	d100      	bne.n	10002d2a <gpio_rpi_manage_callback+0x2a>
	list->tail = node;
10002d28:	6098      	str	r0, [r3, #8]
	parent->next = child;
10002d2a:	2000      	movs	r0, #0
10002d2c:	6008      	str	r0, [r1, #0]
10002d2e:	e7ed      	b.n	10002d0c <gpio_rpi_manage_callback+0xc>
10002d30:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
10002d32:	428d      	cmp	r5, r1
10002d34:	d1f9      	bne.n	10002d2a <gpio_rpi_manage_callback+0x2a>
	list->tail = node;
10002d36:	609c      	str	r4, [r3, #8]
}
10002d38:	e7f7      	b.n	10002d2a <gpio_rpi_manage_callback+0x2a>
	return node->next;
10002d3a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10002d3c:	0004      	movs	r4, r0
10002d3e:	2d00      	cmp	r5, #0
10002d40:	d1e8      	bne.n	10002d14 <gpio_rpi_manage_callback+0x14>
			if (!set) {
10002d42:	2a00      	cmp	r2, #0
10002d44:	d007      	beq.n	10002d56 <gpio_rpi_manage_callback+0x56>
	parent->next = child;
10002d46:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
10002d48:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
10002d4a:	600a      	str	r2, [r1, #0]
	list->head = node;
10002d4c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
10002d4e:	2800      	cmp	r0, #0
10002d50:	d1de      	bne.n	10002d10 <gpio_rpi_manage_callback+0x10>
	list->tail = node;
10002d52:	6099      	str	r1, [r3, #8]
}
10002d54:	e7dd      	b.n	10002d12 <gpio_rpi_manage_callback+0x12>
				return -EINVAL;
10002d56:	2016      	movs	r0, #22
10002d58:	4240      	negs	r0, r0
	return gpio_manage_callback(&data->callbacks, callback, set);
10002d5a:	e7da      	b.n	10002d12 <gpio_rpi_manage_callback+0x12>

10002d5c <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
10002d5c:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
10002d5e:	6843      	ldr	r3, [r0, #4]
10002d60:	685b      	ldr	r3, [r3, #4]
10002d62:	4798      	blx	r3
	return 0;
}
10002d64:	2000      	movs	r0, #0
10002d66:	bd10      	pop	{r4, pc}

10002d68 <gpio_rpi_pin_interrupt_configure>:
{
10002d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002d6a:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
10002d6c:	6907      	ldr	r7, [r0, #16]
{
10002d6e:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10002d70:	210f      	movs	r1, #15
10002d72:	2200      	movs	r2, #0
10002d74:	0028      	movs	r0, r5
{
10002d76:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10002d78:	f7fe fe20 	bl	100019bc <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10002d7c:	2301      	movs	r3, #1
10002d7e:	40ab      	lsls	r3, r5
10002d80:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
10002d82:	2380      	movs	r3, #128	; 0x80
10002d84:	039b      	lsls	r3, r3, #14
10002d86:	429e      	cmp	r6, r3
10002d88:	d01e      	beq.n	10002dc8 <gpio_rpi_pin_interrupt_configure+0x60>
			if (trig & GPIO_INT_LOW_0) {
10002d8a:	2180      	movs	r1, #128	; 0x80
			if (trig & GPIO_INT_HIGH_1) {
10002d8c:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
10002d8e:	0489      	lsls	r1, r1, #18
			if (trig & GPIO_INT_HIGH_1) {
10002d90:	04db      	lsls	r3, r3, #19
			if (trig & GPIO_INT_LOW_0) {
10002d92:	4021      	ands	r1, r4
			if (trig & GPIO_INT_HIGH_1) {
10002d94:	401c      	ands	r4, r3
		if (mode & GPIO_INT_EDGE) {
10002d96:	01f3      	lsls	r3, r6, #7
10002d98:	d50f      	bpl.n	10002dba <gpio_rpi_pin_interrupt_configure+0x52>
			if (trig & GPIO_INT_LOW_0) {
10002d9a:	2900      	cmp	r1, #0
10002d9c:	d000      	beq.n	10002da0 <gpio_rpi_pin_interrupt_configure+0x38>
				events |= GPIO_IRQ_EDGE_FALL;
10002d9e:	2104      	movs	r1, #4
				events |= GPIO_IRQ_EDGE_RISE;
10002da0:	2308      	movs	r3, #8
			if (trig & GPIO_INT_HIGH_1) {
10002da2:	2c00      	cmp	r4, #0
10002da4:	d10e      	bne.n	10002dc4 <gpio_rpi_pin_interrupt_configure+0x5c>
		gpio_set_irq_enabled(pin, events, true);
10002da6:	2201      	movs	r2, #1
10002da8:	0028      	movs	r0, r5
10002daa:	f7fe fe07 	bl	100019bc <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10002dae:	9b01      	ldr	r3, [sp, #4]
10002db0:	68fa      	ldr	r2, [r7, #12]
10002db2:	4313      	orrs	r3, r2
}
10002db4:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10002db6:	60fb      	str	r3, [r7, #12]
}
10002db8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				events |= GPIO_IRQ_LEVEL_LOW;
10002dba:	1e4b      	subs	r3, r1, #1
10002dbc:	4199      	sbcs	r1, r3
			if (trig & GPIO_INT_HIGH_1) {
10002dbe:	2c00      	cmp	r4, #0
10002dc0:	d0f1      	beq.n	10002da6 <gpio_rpi_pin_interrupt_configure+0x3e>
				events |= GPIO_IRQ_LEVEL_HIGH;
10002dc2:	2302      	movs	r3, #2
10002dc4:	4319      	orrs	r1, r3
10002dc6:	e7ee      	b.n	10002da6 <gpio_rpi_pin_interrupt_configure+0x3e>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10002dc8:	68fb      	ldr	r3, [r7, #12]
10002dca:	9a01      	ldr	r2, [sp, #4]
10002dcc:	4393      	bics	r3, r2
10002dce:	e7f1      	b.n	10002db4 <gpio_rpi_pin_interrupt_configure+0x4c>

10002dd0 <gpio_rpi_configure>:
{
10002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flags & GPIO_SINGLE_ENDED) {
10002dd2:	2302      	movs	r3, #2
{
10002dd4:	000e      	movs	r6, r1
10002dd6:	0014      	movs	r4, r2
	if (flags & GPIO_SINGLE_ENDED) {
10002dd8:	421a      	tst	r2, r3
10002dda:	d129      	bne.n	10002e30 <gpio_rpi_configure+0x60>
	gpio_set_function(pin, GPIO_FUNC_SIO);
10002ddc:	2105      	movs	r1, #5
10002dde:	0030      	movs	r0, r6
10002de0:	f7fe fd88 	bl	100018f4 <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
10002de4:	2380      	movs	r3, #128	; 0x80
10002de6:	029b      	lsls	r3, r3, #10
10002de8:	421c      	tst	r4, r3
10002dea:	d011      	beq.n	10002e10 <gpio_rpi_configure+0x40>
 *
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
10002dec:	2301      	movs	r3, #1
    sio_hw->gpio_oe_set = mask;
10002dee:	22d0      	movs	r2, #208	; 0xd0
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
10002df0:	2180      	movs	r1, #128	; 0x80
    uint32_t mask = 1ul << gpio;
10002df2:	40b3      	lsls	r3, r6
10002df4:	0020      	movs	r0, r4
    sio_hw->gpio_oe_set = mask;
10002df6:	0612      	lsls	r2, r2, #24
10002df8:	0309      	lsls	r1, r1, #12
10002dfa:	6253      	str	r3, [r2, #36]	; 0x24
10002dfc:	4008      	ands	r0, r1
10002dfe:	420c      	tst	r4, r1
10002e00:	d002      	beq.n	10002e08 <gpio_rpi_configure+0x38>
    sio_hw->gpio_set = mask;
10002e02:	6153      	str	r3, [r2, #20]
	return 0;
10002e04:	2000      	movs	r0, #0
}
10002e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
10002e08:	0361      	lsls	r1, r4, #13
10002e0a:	d5fb      	bpl.n	10002e04 <gpio_rpi_configure+0x34>
    sio_hw->gpio_clr = mask;
10002e0c:	6193      	str	r3, [r2, #24]
}
10002e0e:	e7fa      	b.n	10002e06 <gpio_rpi_configure+0x36>
	} else if (flags & GPIO_INPUT) {
10002e10:	03e3      	lsls	r3, r4, #15
10002e12:	d5f7      	bpl.n	10002e04 <gpio_rpi_configure+0x34>
    uint32_t mask = 1ul << gpio;
10002e14:	2301      	movs	r3, #1
10002e16:	0019      	movs	r1, r3
    sio_hw->gpio_oe_clr = mask;
10002e18:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
10002e1a:	40b1      	lsls	r1, r6
    sio_hw->gpio_oe_clr = mask;
10002e1c:	0612      	lsls	r2, r2, #24
10002e1e:	6291      	str	r1, [r2, #40]	; 0x28
		gpio_set_pulls(pin,
10002e20:	0962      	lsrs	r2, r4, #5
10002e22:	0921      	lsrs	r1, r4, #4
10002e24:	0030      	movs	r0, r6
10002e26:	401a      	ands	r2, r3
10002e28:	4019      	ands	r1, r3
10002e2a:	f7fe fd79 	bl	10001920 <gpio_set_pulls>
10002e2e:	e7e9      	b.n	10002e04 <gpio_rpi_configure+0x34>
		return -ENOTSUP;
10002e30:	2086      	movs	r0, #134	; 0x86
10002e32:	4240      	negs	r0, r0
10002e34:	e7e7      	b.n	10002e06 <gpio_rpi_configure+0x36>

10002e36 <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
10002e36:	b510      	push	{r4, lr}
10002e38:	2200      	movs	r2, #0
10002e3a:	2103      	movs	r1, #3
10002e3c:	200d      	movs	r0, #13
10002e3e:	f7fd ffa7 	bl	10000d90 <z_arm_irq_priority_set>
10002e42:	200d      	movs	r0, #13
10002e44:	f7fd ff98 	bl	10000d78 <arch_irq_enable>
10002e48:	bd10      	pop	{r4, pc}

10002e4a <i2c_dw_runtime_configure>:
{
10002e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (I2C_SPEED_GET(dw->app_config)) {
10002e4c:	2407      	movs	r4, #7
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002e4e:	6842      	ldr	r2, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10002e50:	6903      	ldr	r3, [r0, #16]
	switch (I2C_SPEED_GET(dw->app_config)) {
10002e52:	084d      	lsrs	r5, r1, #1
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002e54:	6812      	ldr	r2, [r2, #0]
	switch (I2C_SPEED_GET(dw->app_config)) {
10002e56:	402c      	ands	r4, r5
	dw->app_config = config;
10002e58:	6119      	str	r1, [r3, #16]
	switch (I2C_SPEED_GET(dw->app_config)) {
10002e5a:	0768      	lsls	r0, r5, #29
10002e5c:	d409      	bmi.n	10002e72 <i2c_dw_runtime_configure+0x28>
10002e5e:	2606      	movs	r6, #6
10002e60:	0028      	movs	r0, r5
10002e62:	4030      	ands	r0, r6
10002e64:	4235      	tst	r5, r6
10002e66:	d129      	bne.n	10002ebc <i2c_dw_runtime_configure+0x72>
10002e68:	2c01      	cmp	r4, #1
10002e6a:	d00c      	beq.n	10002e86 <i2c_dw_runtime_configure+0x3c>
			rc = -EINVAL;
10002e6c:	2016      	movs	r0, #22
10002e6e:	4240      	negs	r0, r0
10002e70:	e01f      	b.n	10002eb2 <i2c_dw_runtime_configure+0x68>
	switch (I2C_SPEED_GET(dw->app_config)) {
10002e72:	2c04      	cmp	r4, #4
10002e74:	d1fa      	bne.n	10002e6c <i2c_dw_runtime_configure+0x22>
		if (dw->support_hs_mode) {
10002e76:	0018      	movs	r0, r3
10002e78:	3008      	adds	r0, #8
10002e7a:	7fc0      	ldrb	r0, [r0, #31]
10002e7c:	2800      	cmp	r0, #0
10002e7e:	d0f5      	beq.n	10002e6c <i2c_dw_runtime_configure+0x22>
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)
10002e80:	0014      	movs	r4, r2
10002e82:	34a4      	adds	r4, #164	; 0xa4
10002e84:	e01c      	b.n	10002ec0 <i2c_dw_runtime_configure+0x76>
DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
10002e86:	0015      	movs	r5, r2
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
10002e88:	27fa      	movs	r7, #250	; 0xfa
10002e8a:	35a0      	adds	r5, #160	; 0xa0
	return *(volatile uint32_t *)addr;
10002e8c:	682e      	ldr	r6, [r5, #0]
10002e8e:	007f      	lsls	r7, r7, #1
10002e90:	3607      	adds	r6, #7
			value = I2C_STD_LCNT;
10002e92:	003c      	movs	r4, r7
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
10002e94:	42be      	cmp	r6, r7
10002e96:	d301      	bcc.n	10002e9c <i2c_dw_runtime_configure+0x52>
10002e98:	682c      	ldr	r4, [r5, #0]
			value = read_fs_spklen(reg_base) + 8;
10002e9a:	3408      	adds	r4, #8
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
10002e9c:	27c8      	movs	r7, #200	; 0xc8
10002e9e:	682e      	ldr	r6, [r5, #0]
10002ea0:	007f      	lsls	r7, r7, #1
10002ea2:	3605      	adds	r6, #5
		dw->lcnt = value;
10002ea4:	845c      	strh	r4, [r3, #34]	; 0x22
			value = I2C_STD_HCNT;
10002ea6:	003c      	movs	r4, r7
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
10002ea8:	42be      	cmp	r6, r7
10002eaa:	d301      	bcc.n	10002eb0 <i2c_dw_runtime_configure+0x66>
10002eac:	682c      	ldr	r4, [r5, #0]
			value = read_fs_spklen(reg_base) + 6;
10002eae:	3406      	adds	r4, #6
		dw->hcnt = value;
10002eb0:	841c      	strh	r4, [r3, #32]
10002eb2:	6c12      	ldr	r2, [r2, #64]	; 0x40
	dw->app_config |= I2C_MODE_MASTER;
10002eb4:	2210      	movs	r2, #16
10002eb6:	4311      	orrs	r1, r2
10002eb8:	6119      	str	r1, [r3, #16]
}
10002eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002ebc:	0014      	movs	r4, r2
10002ebe:	34a0      	adds	r4, #160	; 0xa0
10002ec0:	6825      	ldr	r5, [r4, #0]
				value = I2C_HS_LCNT;
10002ec2:	2057      	movs	r0, #87	; 0x57
			if (I2C_HS_LCNT <= (read_hs_spklen(reg_base) + 7)) {
10002ec4:	3507      	adds	r5, #7
10002ec6:	2d56      	cmp	r5, #86	; 0x56
10002ec8:	d901      	bls.n	10002ece <i2c_dw_runtime_configure+0x84>
10002eca:	6820      	ldr	r0, [r4, #0]
				value = read_hs_spklen(reg_base) + 8;
10002ecc:	3008      	adds	r0, #8
10002ece:	6825      	ldr	r5, [r4, #0]
			dw->lcnt = value;
10002ed0:	8458      	strh	r0, [r3, #34]	; 0x22
			if (I2C_HS_HCNT <= (read_hs_spklen(reg_base) + 5)) {
10002ed2:	3505      	adds	r5, #5
				value = I2C_HS_HCNT;
10002ed4:	204b      	movs	r0, #75	; 0x4b
			if (I2C_HS_HCNT <= (read_hs_spklen(reg_base) + 5)) {
10002ed6:	2d4a      	cmp	r5, #74	; 0x4a
10002ed8:	d901      	bls.n	10002ede <i2c_dw_runtime_configure+0x94>
10002eda:	6820      	ldr	r0, [r4, #0]
				value = read_hs_spklen(reg_base) + 6;
10002edc:	3006      	adds	r0, #6
			dw->hcnt = value;
10002ede:	8418      	strh	r0, [r3, #32]
	uint32_t	rc = 0U;
10002ee0:	2000      	movs	r0, #0
10002ee2:	e7e6      	b.n	10002eb2 <i2c_dw_runtime_configure+0x68>

10002ee4 <i2c_config_0>:
			      &i2c_##n##_runtime, &i2c_config_dw_##n,         \
			      POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,          \
			      &funcs);                                        \
	I2C_DW_IRQ_CONFIG(n)

DT_INST_FOREACH_STATUS_OKAY(I2C_DEVICE_INIT_DW)
10002ee4:	b510      	push	{r4, lr}
10002ee6:	2200      	movs	r2, #0
10002ee8:	2103      	movs	r1, #3
10002eea:	2017      	movs	r0, #23
10002eec:	f7fd ff50 	bl	10000d90 <z_arm_irq_priority_set>
10002ef0:	2017      	movs	r0, #23
10002ef2:	f7fd ff41 	bl	10000d78 <arch_irq_enable>
10002ef6:	bd10      	pop	{r4, pc}

10002ef8 <i2c_config_1>:
10002ef8:	b510      	push	{r4, lr}
10002efa:	2200      	movs	r2, #0
10002efc:	2103      	movs	r1, #3
10002efe:	2018      	movs	r0, #24
10002f00:	f7fd ff46 	bl	10000d90 <z_arm_irq_priority_set>
10002f04:	2018      	movs	r0, #24
10002f06:	f7fd ff37 	bl	10000d78 <arch_irq_enable>
10002f0a:	bd10      	pop	{r4, pc}

10002f0c <i2c_dw_isr>:
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002f0c:	6843      	ldr	r3, [r0, #4]
{
10002f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002f10:	681b      	ldr	r3, [r3, #0]
{
10002f12:	b085      	sub	sp, #20
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002f14:	469c      	mov	ip, r3
10002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
10002f18:	9001      	str	r0, [sp, #4]
10002f1a:	9302      	str	r3, [sp, #8]
10002f1c:	4663      	mov	r3, ip
10002f1e:	681b      	ldr	r3, [r3, #0]
	if (test_bit_con_master_mode(reg_base)) {
10002f20:	07db      	lsls	r3, r3, #31
10002f22:	d510      	bpl.n	10002f46 <i2c_dw_isr+0x3a>
		     DW_INTR_STAT_RX_OVER | DW_INTR_STAT_RX_UNDER) &
10002f24:	224b      	movs	r2, #75	; 0x4b
	struct i2c_dw_dev_config * const dw = port->data;
10002f26:	6901      	ldr	r1, [r0, #16]
		if ((DW_INTR_STAT_TX_ABRT | DW_INTR_STAT_TX_OVER |
10002f28:	9802      	ldr	r0, [sp, #8]
10002f2a:	2304      	movs	r3, #4
10002f2c:	4210      	tst	r0, r2
10002f2e:	d00c      	beq.n	10002f4a <i2c_dw_isr+0x3e>
			dw->state = I2C_DW_CMD_ERROR;
10002f30:	3105      	adds	r1, #5
10002f32:	77cb      	strb	r3, [r1, #31]
	*(volatile uint32_t *)addr = data;
10002f34:	2200      	movs	r2, #0
	struct i2c_dw_dev_config * const dw = dev->data;
10002f36:	9b01      	ldr	r3, [sp, #4]
10002f38:	6918      	ldr	r0, [r3, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002f3a:	685b      	ldr	r3, [r3, #4]
10002f3c:	681b      	ldr	r3, [r3, #0]
10002f3e:	631a      	str	r2, [r3, #48]	; 0x30
	return *(volatile uint32_t *)addr;
10002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	z_impl_k_sem_give(sem);
10002f42:	f7fe ff55 	bl	10001df0 <z_impl_k_sem_give>
}
10002f46:	b005      	add	sp, #20
10002f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (intr_stat.bits.rx_full) {
10002f4a:	466a      	mov	r2, sp
10002f4c:	9802      	ldr	r0, [sp, #8]
	return temp & (1 << bit);
10002f4e:	2408      	movs	r4, #8
10002f50:	7a12      	ldrb	r2, [r2, #8]
10002f52:	4218      	tst	r0, r3
10002f54:	d124      	bne.n	10002fa0 <i2c_dw_isr+0x94>
		if ((dw->xfr_flags & I2C_MSG_RW_MASK)
10002f56:	1dcb      	adds	r3, r1, #7
10002f58:	7fd8      	ldrb	r0, [r3, #31]
10002f5a:	2301      	movs	r3, #1
10002f5c:	0005      	movs	r5, r0
10002f5e:	401d      	ands	r5, r3
10002f60:	4218      	tst	r0, r3
10002f62:	d005      	beq.n	10002f70 <i2c_dw_isr+0x64>
	uint32_t temp = *(volatile uint32_t *)addr;
10002f64:	4663      	mov	r3, ip
10002f66:	6b18      	ldr	r0, [r3, #48]	; 0x30
	*(volatile uint32_t *)addr = temp | (1 << bit);
10002f68:	2310      	movs	r3, #16
10002f6a:	4303      	orrs	r3, r0
10002f6c:	4660      	mov	r0, ip
10002f6e:	6303      	str	r3, [r0, #48]	; 0x30
		if (intr_stat.bits.tx_empty) {
10002f70:	2310      	movs	r3, #16
10002f72:	421a      	tst	r2, r3
10002f74:	d124      	bne.n	10002fc0 <i2c_dw_isr+0xb4>
		if (intr_stat.bits.stop_det) {
10002f76:	9b02      	ldr	r3, [sp, #8]
10002f78:	059b      	lsls	r3, r3, #22
10002f7a:	d5e4      	bpl.n	10002f46 <i2c_dw_isr+0x3a>
10002f7c:	4663      	mov	r3, ip
10002f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
			goto done;
10002f80:	e7d8      	b.n	10002f34 <i2c_dw_isr+0x28>
10002f82:	4663      	mov	r3, ip
		dw->xfr_buf[0] = (uint8_t)read_cmd_data(reg_base);
10002f84:	6948      	ldr	r0, [r1, #20]
10002f86:	691b      	ldr	r3, [r3, #16]
10002f88:	7003      	strb	r3, [r0, #0]
		dw->xfr_buf++;
10002f8a:	694b      	ldr	r3, [r1, #20]
		dw->rx_pending--;
10002f8c:	69c8      	ldr	r0, [r1, #28]
		dw->xfr_buf++;
10002f8e:	3301      	adds	r3, #1
10002f90:	614b      	str	r3, [r1, #20]
		dw->xfr_len--;
10002f92:	698b      	ldr	r3, [r1, #24]
		dw->rx_pending--;
10002f94:	3801      	subs	r0, #1
		dw->xfr_len--;
10002f96:	3b01      	subs	r3, #1
10002f98:	618b      	str	r3, [r1, #24]
		dw->rx_pending--;
10002f9a:	61c8      	str	r0, [r1, #28]
		if (dw->xfr_len == 0U) {
10002f9c:	2b00      	cmp	r3, #0
10002f9e:	d006      	beq.n	10002fae <i2c_dw_isr+0xa2>
	uint32_t temp = *(volatile uint32_t *)addr;
10002fa0:	4663      	mov	r3, ip
10002fa2:	6f18      	ldr	r0, [r3, #112]	; 0x70
	while (test_bit_status_rfne(reg_base) && (dw->xfr_len > 0)) {
10002fa4:	698b      	ldr	r3, [r1, #24]
10002fa6:	4220      	tst	r0, r4
10002fa8:	d007      	beq.n	10002fba <i2c_dw_isr+0xae>
10002faa:	2b00      	cmp	r3, #0
10002fac:	d1e9      	bne.n	10002f82 <i2c_dw_isr+0x76>
		dw->state &= ~I2C_DW_CMD_RECV;
10002fae:	2402      	movs	r4, #2
10002fb0:	1d48      	adds	r0, r1, #5
10002fb2:	7fc3      	ldrb	r3, [r0, #31]
10002fb4:	43a3      	bics	r3, r4
10002fb6:	77c3      	strb	r3, [r0, #31]
		return;
10002fb8:	e7cd      	b.n	10002f56 <i2c_dw_isr+0x4a>
	if (dw->xfr_len == 0U) {
10002fba:	2b00      	cmp	r3, #0
10002fbc:	d1cb      	bne.n	10002f56 <i2c_dw_isr+0x4a>
10002fbe:	e7f6      	b.n	10002fae <i2c_dw_isr+0xa2>
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002fc0:	9801      	ldr	r0, [sp, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10002fc2:	9a01      	ldr	r2, [sp, #4]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002fc4:	6840      	ldr	r0, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10002fc6:	6912      	ldr	r2, [r2, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002fc8:	6804      	ldr	r4, [r0, #0]
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
10002fca:	2d00      	cmp	r5, #0
10002fcc:	d13f      	bne.n	1000304e <i2c_dw_isr+0x142>
	if (dw->xfr_len == 0U) {
10002fce:	6990      	ldr	r0, [r2, #24]
10002fd0:	2800      	cmp	r0, #0
10002fd2:	d136      	bne.n	10003042 <i2c_dw_isr+0x136>
	uint32_t temp = *(volatile uint32_t *)addr;
10002fd4:	6b20      	ldr	r0, [r4, #48]	; 0x30
		dw->state &= ~I2C_DW_CMD_SEND;
10002fd6:	3205      	adds	r2, #5
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10002fd8:	4398      	bics	r0, r3
10002fda:	6320      	str	r0, [r4, #48]	; 0x30
10002fdc:	2001      	movs	r0, #1
10002fde:	7fd3      	ldrb	r3, [r2, #31]
10002fe0:	4383      	bics	r3, r0
10002fe2:	77d3      	strb	r3, [r2, #31]
			if (((dw->xfr_len == 0U)
10002fe4:	698b      	ldr	r3, [r1, #24]
10002fe6:	2b00      	cmp	r3, #0
10002fe8:	d103      	bne.n	10002ff2 <i2c_dw_isr+0xe6>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
10002fea:	3107      	adds	r1, #7
10002fec:	7fcb      	ldrb	r3, [r1, #31]
10002fee:	079b      	lsls	r3, r3, #30
10002ff0:	d5a0      	bpl.n	10002f34 <i2c_dw_isr+0x28>
			    || (ret != 0)) {
10002ff2:	2d00      	cmp	r5, #0
10002ff4:	d0bf      	beq.n	10002f76 <i2c_dw_isr+0x6a>
10002ff6:	e79d      	b.n	10002f34 <i2c_dw_isr+0x28>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
10002ff8:	6995      	ldr	r5, [r2, #24]
10002ffa:	2d00      	cmp	r5, #0
10002ffc:	d025      	beq.n	1000304a <i2c_dw_isr+0x13e>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10002ffe:	2704      	movs	r7, #4
		data = dw->xfr_buf[0];
10003000:	6953      	ldr	r3, [r2, #20]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10003002:	1dd6      	adds	r6, r2, #7
		data = dw->xfr_buf[0];
10003004:	9303      	str	r3, [sp, #12]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10003006:	7ff0      	ldrb	r0, [r6, #31]
		data = dw->xfr_buf[0];
10003008:	781b      	ldrb	r3, [r3, #0]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
1000300a:	4238      	tst	r0, r7
1000300c:	d005      	beq.n	1000301a <i2c_dw_isr+0x10e>
			data |= IC_DATA_CMD_RESTART;
1000300e:	2780      	movs	r7, #128	; 0x80
10003010:	00ff      	lsls	r7, r7, #3
10003012:	433b      	orrs	r3, r7
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
10003014:	2704      	movs	r7, #4
10003016:	43b8      	bics	r0, r7
10003018:	77f0      	strb	r0, [r6, #31]
		if ((dw->xfr_len == 1U) && (dw->xfr_flags & I2C_MSG_STOP)) {
1000301a:	2d01      	cmp	r5, #1
1000301c:	d107      	bne.n	1000302e <i2c_dw_isr+0x122>
1000301e:	1dd0      	adds	r0, r2, #7
10003020:	7fc0      	ldrb	r0, [r0, #31]
10003022:	3501      	adds	r5, #1
10003024:	4228      	tst	r0, r5
10003026:	d002      	beq.n	1000302e <i2c_dw_isr+0x122>
			data |= IC_DATA_CMD_STOP;
10003028:	2080      	movs	r0, #128	; 0x80
1000302a:	0080      	lsls	r0, r0, #2
1000302c:	4303      	orrs	r3, r0
	*(volatile uint32_t *)addr = data;
1000302e:	6123      	str	r3, [r4, #16]
		dw->xfr_len--;
10003030:	6993      	ldr	r3, [r2, #24]
10003032:	3b01      	subs	r3, #1
10003034:	6193      	str	r3, [r2, #24]
		dw->xfr_buf++;
10003036:	9b03      	ldr	r3, [sp, #12]
10003038:	3301      	adds	r3, #1
1000303a:	6153      	str	r3, [r2, #20]
	uint32_t temp = *(volatile uint32_t *)addr;
1000303c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		if (test_bit_intr_stat_tx_abrt(reg_base)) {
1000303e:	065b      	lsls	r3, r3, #25
10003040:	d456      	bmi.n	100030f0 <i2c_dw_isr+0x1e4>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
10003042:	2002      	movs	r0, #2
10003044:	6f23      	ldr	r3, [r4, #112]	; 0x70
10003046:	4203      	tst	r3, r0
10003048:	d1d6      	bne.n	10002ff8 <i2c_dw_isr+0xec>
	return 0;
1000304a:	2500      	movs	r5, #0
1000304c:	e7ca      	b.n	10002fe4 <i2c_dw_isr+0xd8>
	if (dw->request_bytes == 0U) {
1000304e:	1d90      	adds	r0, r2, #6
10003050:	7fc5      	ldrb	r5, [r0, #31]
10003052:	2d00      	cmp	r5, #0
10003054:	d103      	bne.n	1000305e <i2c_dw_isr+0x152>
	uint32_t temp = *(volatile uint32_t *)addr;
10003056:	6b22      	ldr	r2, [r4, #48]	; 0x30
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10003058:	439a      	bics	r2, r3
1000305a:	6322      	str	r2, [r4, #48]	; 0x30
DEFINE_CLEAR_BIT_OP(intr_mask_tx_empty, DW_IC_REG_INTR_MASK, DW_IC_INTR_MASK_TX_EMPTY_BIT)
1000305c:	e7c2      	b.n	10002fe4 <i2c_dw_isr+0xd8>
DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
1000305e:	0023      	movs	r3, r4
10003060:	33f4      	adds	r3, #244	; 0xf4
	return *(volatile uint32_t *)addr;
10003062:	681b      	ldr	r3, [r3, #0]
10003064:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
10003066:	041e      	lsls	r6, r3, #16
10003068:	0e36      	lsrs	r6, r6, #24
1000306a:	3601      	adds	r6, #1
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
1000306c:	69d7      	ldr	r7, [r2, #28]
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
1000306e:	b2f6      	uxtb	r6, r6
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
10003070:	1a30      	subs	r0, r6, r0
10003072:	1bc0      	subs	r0, r0, r7
10003074:	b247      	sxtb	r7, r0
	if (rx_empty < 0) {
10003076:	0600      	lsls	r0, r0, #24
10003078:	d4e7      	bmi.n	1000304a <i2c_dw_isr+0x13e>
	tx_buffer_depth = ic_comp_param_1.bits.tx_buffer_depth + 1;
1000307a:	021b      	lsls	r3, r3, #8
1000307c:	6f60      	ldr	r0, [r4, #116]	; 0x74
1000307e:	0e1b      	lsrs	r3, r3, #24
10003080:	3301      	adds	r3, #1
	tx_empty = tx_buffer_depth - read_txflr(reg_base);
10003082:	1a1b      	subs	r3, r3, r0
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
10003084:	b2d8      	uxtb	r0, r3
	cnt = MIN(rx_buffer_depth, dw->request_bytes);
10003086:	1c2b      	adds	r3, r5, #0
10003088:	42b5      	cmp	r5, r6
1000308a:	d900      	bls.n	1000308e <i2c_dw_isr+0x182>
1000308c:	1c33      	adds	r3, r6, #0
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
1000308e:	b2dd      	uxtb	r5, r3
10003090:	0003      	movs	r3, r0
10003092:	42a8      	cmp	r0, r5
10003094:	dd00      	ble.n	10003098 <i2c_dw_isr+0x18c>
10003096:	002b      	movs	r3, r5
10003098:	42bb      	cmp	r3, r7
1000309a:	dd00      	ble.n	1000309e <i2c_dw_isr+0x192>
1000309c:	003b      	movs	r3, r7
		if (dw->xfr_flags & I2C_MSG_RESTART) {
1000309e:	2604      	movs	r6, #4
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
100030a0:	b2db      	uxtb	r3, r3
	while (cnt > 0) {
100030a2:	2b00      	cmp	r3, #0
100030a4:	d0d1      	beq.n	1000304a <i2c_dw_isr+0x13e>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
100030a6:	1dd5      	adds	r5, r2, #7
100030a8:	7fe8      	ldrb	r0, [r5, #31]
100030aa:	4230      	tst	r0, r6
100030ac:	d01d      	beq.n	100030ea <i2c_dw_isr+0x1de>
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
100030ae:	43b0      	bics	r0, r6
100030b0:	77e8      	strb	r0, [r5, #31]
			data |= IC_DATA_CMD_RESTART;
100030b2:	20a0      	movs	r0, #160	; 0xa0
100030b4:	00c0      	lsls	r0, r0, #3
		if ((dw->xfr_flags & I2C_MSG_STOP)
100030b6:	2702      	movs	r7, #2
100030b8:	7fed      	ldrb	r5, [r5, #31]
100030ba:	423d      	tst	r5, r7
100030bc:	d006      	beq.n	100030cc <i2c_dw_isr+0x1c0>
		    && (dw->request_bytes == 1U)) {
100030be:	1d95      	adds	r5, r2, #6
100030c0:	7fed      	ldrb	r5, [r5, #31]
100030c2:	2d01      	cmp	r5, #1
100030c4:	d102      	bne.n	100030cc <i2c_dw_isr+0x1c0>
			data |= IC_DATA_CMD_STOP;
100030c6:	2580      	movs	r5, #128	; 0x80
100030c8:	00ad      	lsls	r5, r5, #2
100030ca:	4328      	orrs	r0, r5
100030cc:	2710      	movs	r7, #16
	uint32_t temp = *(volatile uint32_t *)addr;
100030ce:	6b25      	ldr	r5, [r4, #48]	; 0x30
		cnt--;
100030d0:	3b01      	subs	r3, #1
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
100030d2:	43bd      	bics	r5, r7
100030d4:	6325      	str	r5, [r4, #48]	; 0x30
	*(volatile uint32_t *)addr = data;
100030d6:	6120      	str	r0, [r4, #16]
		dw->rx_pending++;
100030d8:	69d0      	ldr	r0, [r2, #28]
		dw->request_bytes--;
100030da:	1d95      	adds	r5, r2, #6
		dw->rx_pending++;
100030dc:	3001      	adds	r0, #1
100030de:	61d0      	str	r0, [r2, #28]
		dw->request_bytes--;
100030e0:	7fe8      	ldrb	r0, [r5, #31]
		cnt--;
100030e2:	b2db      	uxtb	r3, r3
		dw->request_bytes--;
100030e4:	3801      	subs	r0, #1
100030e6:	77e8      	strb	r0, [r5, #31]
		cnt--;
100030e8:	e7db      	b.n	100030a2 <i2c_dw_isr+0x196>
		data = IC_DATA_CMD_CMD;
100030ea:	2080      	movs	r0, #128	; 0x80
100030ec:	0040      	lsls	r0, r0, #1
100030ee:	e7e2      	b.n	100030b6 <i2c_dw_isr+0x1aa>
			return -EIO;
100030f0:	2505      	movs	r5, #5
100030f2:	426d      	negs	r5, r5
100030f4:	e776      	b.n	10002fe4 <i2c_dw_isr+0xd8>

100030f6 <uart_rpi_poll_in>:
	uart_hw_t * const uart_hw = config->uart_regs;
100030f6:	6843      	ldr	r3, [r0, #4]
{
100030f8:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
100030fa:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
100030fc:	2210      	movs	r2, #16
100030fe:	699c      	ldr	r4, [r3, #24]
10003100:	0020      	movs	r0, r4
10003102:	4010      	ands	r0, r2
10003104:	4214      	tst	r4, r2
10003106:	d102      	bne.n	1000310e <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
10003108:	681b      	ldr	r3, [r3, #0]
1000310a:	700b      	strb	r3, [r1, #0]
}
1000310c:	bd10      	pop	{r4, pc}
		return -1;
1000310e:	2001      	movs	r0, #1
10003110:	4240      	negs	r0, r0
10003112:	e7fb      	b.n	1000310c <uart_rpi_poll_in+0x16>

10003114 <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10003114:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10003116:	6843      	ldr	r3, [r0, #4]
10003118:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
1000311a:	6998      	ldr	r0, [r3, #24]
1000311c:	4210      	tst	r0, r2
1000311e:	d1fc      	bne.n	1000311a <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
10003120:	6019      	str	r1, [r3, #0]
}
10003122:	4770      	bx	lr

10003124 <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
10003124:	6843      	ldr	r3, [r0, #4]
10003126:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
10003128:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
1000312a:	0518      	lsls	r0, r3, #20
1000312c:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
1000312e:	055a      	lsls	r2, r3, #21
10003130:	d501      	bpl.n	10003136 <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
10003132:	2208      	movs	r2, #8
10003134:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
10003136:	059a      	lsls	r2, r3, #22
10003138:	d501      	bpl.n	1000313e <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
1000313a:	2202      	movs	r2, #2
1000313c:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
1000313e:	05db      	lsls	r3, r3, #23
10003140:	d501      	bpl.n	10003146 <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
10003142:	2304      	movs	r3, #4
10003144:	4318      	orrs	r0, r3
}
10003146:	4770      	bx	lr

10003148 <uart_rpi_fifo_fill>:
	uart_hw_t * const uart_hw = config->uart_regs;
10003148:	6843      	ldr	r3, [r0, #4]
{
1000314a:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
1000314c:	2000      	movs	r0, #0
1000314e:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10003150:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10003152:	699c      	ldr	r4, [r3, #24]
10003154:	422c      	tst	r4, r5
10003156:	d102      	bne.n	1000315e <uart_rpi_fifo_fill+0x16>
10003158:	1a14      	subs	r4, r2, r0
1000315a:	2c00      	cmp	r4, #0
1000315c:	dc00      	bgt.n	10003160 <uart_rpi_fifo_fill+0x18>
}
1000315e:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
10003160:	5c0c      	ldrb	r4, [r1, r0]
10003162:	3001      	adds	r0, #1
10003164:	601c      	str	r4, [r3, #0]
10003166:	e7f4      	b.n	10003152 <uart_rpi_fifo_fill+0xa>

10003168 <uart_rpi_fifo_read>:
	uart_hw_t * const uart_hw = config->uart_regs;
10003168:	6843      	ldr	r3, [r0, #4]
{
1000316a:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
1000316c:	2000      	movs	r0, #0
1000316e:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10003170:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10003172:	699c      	ldr	r4, [r3, #24]
10003174:	422c      	tst	r4, r5
10003176:	d102      	bne.n	1000317e <uart_rpi_fifo_read+0x16>
10003178:	1a14      	subs	r4, r2, r0
1000317a:	2c00      	cmp	r4, #0
1000317c:	dc00      	bgt.n	10003180 <uart_rpi_fifo_read+0x18>
}
1000317e:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
10003180:	681c      	ldr	r4, [r3, #0]
10003182:	540c      	strb	r4, [r1, r0]
10003184:	3001      	adds	r0, #1
10003186:	e7f4      	b.n	10003172 <uart_rpi_fifo_read+0xa>

10003188 <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10003188:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
1000318a:	6843      	ldr	r3, [r0, #4]
1000318c:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
1000318e:	6b99      	ldr	r1, [r3, #56]	; 0x38
10003190:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10003192:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10003194:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10003196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10003198:	438a      	bics	r2, r1
1000319a:	635a      	str	r2, [r3, #52]	; 0x34
}
1000319c:	4770      	bx	lr

1000319e <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
1000319e:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100031a0:	6843      	ldr	r3, [r0, #4]
100031a2:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
100031a4:	6b93      	ldr	r3, [r2, #56]	; 0x38
100031a6:	438b      	bics	r3, r1
100031a8:	6393      	str	r3, [r2, #56]	; 0x38
}
100031aa:	4770      	bx	lr

100031ac <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
100031ac:	6843      	ldr	r3, [r0, #4]
100031ae:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
100031b0:	6c18      	ldr	r0, [r3, #64]	; 0x40
100031b2:	0680      	lsls	r0, r0, #26
100031b4:	0fc0      	lsrs	r0, r0, #31
}
100031b6:	4770      	bx	lr

100031b8 <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100031b8:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100031ba:	6843      	ldr	r3, [r0, #4]
100031bc:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100031be:	6b99      	ldr	r1, [r3, #56]	; 0x38
100031c0:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
100031c2:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100031c4:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
100031c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100031c8:	438a      	bics	r2, r1
100031ca:	635a      	str	r2, [r3, #52]	; 0x34
}
100031cc:	4770      	bx	lr

100031ce <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
100031ce:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100031d0:	6843      	ldr	r3, [r0, #4]
100031d2:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
100031d4:	6b93      	ldr	r3, [r2, #56]	; 0x38
100031d6:	438b      	bics	r3, r1
100031d8:	6393      	str	r3, [r2, #56]	; 0x38
}
100031da:	4770      	bx	lr

100031dc <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
100031dc:	6843      	ldr	r3, [r0, #4]
100031de:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
100031e0:	6998      	ldr	r0, [r3, #24]
100031e2:	0600      	lsls	r0, r0, #24
100031e4:	0fc0      	lsrs	r0, r0, #31
}
100031e6:	4770      	bx	lr

100031e8 <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
100031e8:	6843      	ldr	r3, [r0, #4]
100031ea:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
100031ec:	6c18      	ldr	r0, [r3, #64]	; 0x40
100031ee:	06c0      	lsls	r0, r0, #27
100031f0:	0fc0      	lsrs	r0, r0, #31
}
100031f2:	4770      	bx	lr

100031f4 <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
100031f4:	6843      	ldr	r3, [r0, #4]
100031f6:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
100031f8:	23f8      	movs	r3, #248	; 0xf8
100031fa:	6b91      	ldr	r1, [r2, #56]	; 0x38
100031fc:	00db      	lsls	r3, r3, #3
100031fe:	430b      	orrs	r3, r1
10003200:	6393      	str	r3, [r2, #56]	; 0x38
}
10003202:	4770      	bx	lr

10003204 <uart_rpi_irq_update>:
}

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
10003204:	2001      	movs	r0, #1
10003206:	4770      	bx	lr

10003208 <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
10003208:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
1000320a:	6059      	str	r1, [r3, #4]
	data->irq_cb_data = cb_data;
1000320c:	609a      	str	r2, [r3, #8]
}
1000320e:	4770      	bx	lr

10003210 <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
	struct uart_rpi_data * const data = dev->data;
10003210:	6902      	ldr	r2, [r0, #16]
{
10003212:	b510      	push	{r4, lr}

	if (data->irq_cb) {
10003214:	6853      	ldr	r3, [r2, #4]
10003216:	2b00      	cmp	r3, #0
10003218:	d001      	beq.n	1000321e <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
1000321a:	6891      	ldr	r1, [r2, #8]
1000321c:	4798      	blx	r3
	}
}
1000321e:	bd10      	pop	{r4, pc}

10003220 <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
10003220:	b510      	push	{r4, lr}
10003222:	2200      	movs	r2, #0
10003224:	2103      	movs	r1, #3
10003226:	2014      	movs	r0, #20
10003228:	f7fd fdb2 	bl	10000d90 <z_arm_irq_priority_set>
1000322c:	2014      	movs	r0, #20
1000322e:	f7fd fda3 	bl	10000d78 <arch_irq_enable>
10003232:	bd10      	pop	{r4, pc}

10003234 <uart_rpi_irq_is_pending>:
{
10003234:	b510      	push	{r4, lr}
10003236:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10003238:	f7ff ffd6 	bl	100031e8 <uart_rpi_irq_rx_ready>
1000323c:	0003      	movs	r3, r0
1000323e:	2001      	movs	r0, #1
10003240:	2b00      	cmp	r3, #0
10003242:	d104      	bne.n	1000324e <uart_rpi_irq_is_pending+0x1a>
10003244:	0020      	movs	r0, r4
10003246:	f7ff ffb1 	bl	100031ac <uart_rpi_irq_tx_ready>
1000324a:	1e43      	subs	r3, r0, #1
1000324c:	4198      	sbcs	r0, r3
}
1000324e:	bd10      	pop	{r4, pc}

10003250 <uart_rpi_init>:
{
10003250:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
10003252:	6845      	ldr	r5, [r0, #4]
{
10003254:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
10003256:	682b      	ldr	r3, [r5, #0]
{
10003258:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
1000325a:	6907      	ldr	r7, [r0, #16]
	ret = pinctrl_lookup_state(config, id, &state);
1000325c:	2100      	movs	r1, #0
1000325e:	68a8      	ldr	r0, [r5, #8]
10003260:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
10003262:	686e      	ldr	r6, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
10003264:	9301      	str	r3, [sp, #4]
10003266:	f7fe f9d3 	bl	10001610 <pinctrl_lookup_state>
	if (ret < 0) {
1000326a:	2800      	cmp	r0, #0
1000326c:	db1a      	blt.n	100032a4 <uart_rpi_init+0x54>
	return pinctrl_apply_state_direct(config, state);
1000326e:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10003270:	2200      	movs	r2, #0
10003272:	7919      	ldrb	r1, [r3, #4]
10003274:	6818      	ldr	r0, [r3, #0]
10003276:	f000 f81a 	bl	100032ae <pinctrl_configure_pins>
	if (ret < 0) {
1000327a:	2800      	cmp	r0, #0
1000327c:	db12      	blt.n	100032a4 <uart_rpi_init+0x54>
	baudrate = uart_init(uart_inst, data->baudrate);
1000327e:	6839      	ldr	r1, [r7, #0]
10003280:	9801      	ldr	r0, [sp, #4]
10003282:	f7fe fbf9 	bl	10001a78 <uart_init>
	if (baudrate <= 0) {
10003286:	2800      	cmp	r0, #0
10003288:	dd0e      	ble.n	100032a8 <uart_rpi_init+0x58>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
1000328a:	0032      	movs	r2, r6
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000328c:	23c0      	movs	r3, #192	; 0xc0
1000328e:	322c      	adds	r2, #44	; 0x2c
10003290:	019b      	lsls	r3, r3, #6
10003292:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
10003294:	2700      	movs	r7, #0
10003296:	2210      	movs	r2, #16
	config->irq_config_func(dev);
10003298:	0020      	movs	r0, r4
1000329a:	601a      	str	r2, [r3, #0]
1000329c:	696b      	ldr	r3, [r5, #20]
	uart_hw->dr = 0U;
1000329e:	6037      	str	r7, [r6, #0]
	config->irq_config_func(dev);
100032a0:	4798      	blx	r3
	return 0;
100032a2:	0038      	movs	r0, r7
}
100032a4:	b005      	add	sp, #20
100032a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
100032a8:	2016      	movs	r0, #22
100032aa:	4240      	negs	r0, r0
100032ac:	e7fa      	b.n	100032a4 <uart_rpi_init+0x54>

100032ae <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
100032ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100032b0:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
100032b2:	2601      	movs	r6, #1
100032b4:	008d      	lsls	r5, r1, #2
100032b6:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
100032b8:	42ac      	cmp	r4, r5
100032ba:	d101      	bne.n	100032c0 <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
100032bc:	2000      	movs	r0, #0
100032be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
100032c0:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
100032c2:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
100032c4:	06c0      	lsls	r0, r0, #27
100032c6:	0ec0      	lsrs	r0, r0, #27
100032c8:	f000 f8b5 	bl	10003436 <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
100032cc:	8821      	ldrh	r1, [r4, #0]
100032ce:	7820      	ldrb	r0, [r4, #0]
100032d0:	05c9      	lsls	r1, r1, #23
100032d2:	06c0      	lsls	r0, r0, #27
100032d4:	0f09      	lsrs	r1, r1, #28
100032d6:	0ec0      	lsrs	r0, r0, #27
100032d8:	f7fe fb0c 	bl	100018f4 <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
100032dc:	7861      	ldrb	r1, [r4, #1]
100032de:	7820      	ldrb	r0, [r4, #0]
100032e0:	09ca      	lsrs	r2, r1, #7
100032e2:	06c0      	lsls	r0, r0, #27
100032e4:	0649      	lsls	r1, r1, #25
100032e6:	0fc9      	lsrs	r1, r1, #31
100032e8:	0ec0      	lsrs	r0, r0, #27
100032ea:	f7fe fb19 	bl	10001920 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
100032ee:	7861      	ldrb	r1, [r4, #1]
100032f0:	7820      	ldrb	r0, [r4, #0]
100032f2:	06c9      	lsls	r1, r1, #27
100032f4:	06c0      	lsls	r0, r0, #27
100032f6:	0f09      	lsrs	r1, r1, #28
100032f8:	0ec0      	lsrs	r0, r0, #27
100032fa:	f7fe fb43 	bl	10001984 <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
100032fe:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10003300:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10003302:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10003304:	06c0      	lsls	r0, r0, #27
10003306:	4031      	ands	r1, r6
10003308:	0ec0      	lsrs	r0, r0, #27
1000330a:	f7fe fb2d 	bl	10001968 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
1000330e:	78a1      	ldrb	r1, [r4, #2]
10003310:	7820      	ldrb	r0, [r4, #0]
10003312:	0789      	lsls	r1, r1, #30
10003314:	06c0      	lsls	r0, r0, #27
10003316:	0fc9      	lsrs	r1, r1, #31
10003318:	0ec0      	lsrs	r0, r0, #27
1000331a:	f7fe fb17 	bl	1000194c <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
1000331e:	78a1      	ldrb	r1, [r4, #2]
10003320:	7820      	ldrb	r0, [r4, #0]
10003322:	07c9      	lsls	r1, r1, #31
10003324:	06c0      	lsls	r0, r0, #27
10003326:	0fc9      	lsrs	r1, r1, #31
10003328:	0ec0      	lsrs	r0, r0, #27
1000332a:	f7fe fb69 	bl	10001a00 <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
1000332e:	003c      	movs	r4, r7
10003330:	e7c2      	b.n	100032b8 <pinctrl_configure_pins+0xa>

10003332 <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
10003332:	2000      	movs	r0, #0
10003334:	4770      	bx	lr

10003336 <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
10003336:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
10003338:	7900      	ldrb	r0, [r0, #4]
1000333a:	2802      	cmp	r0, #2
1000333c:	d008      	beq.n	10003350 <reset_rpi_read_register.isra.0+0x1a>
1000333e:	2804      	cmp	r0, #4
10003340:	d009      	beq.n	10003356 <reset_rpi_read_register.isra.0+0x20>
10003342:	2801      	cmp	r0, #1
10003344:	d10a      	bne.n	1000335c <reset_rpi_read_register.isra.0+0x26>
		*value = sys_read8(base_address + offset);
10003346:	18c9      	adds	r1, r1, r3
	return *(volatile uint8_t *)addr;
10003348:	780b      	ldrb	r3, [r1, #0]
	return 0;
1000334a:	2000      	movs	r0, #0
		*value = sys_read32(base_address + offset);
1000334c:	6013      	str	r3, [r2, #0]
}
1000334e:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
10003350:	18c9      	adds	r1, r1, r3
	return *(volatile uint16_t *)addr;
10003352:	880b      	ldrh	r3, [r1, #0]
10003354:	e7f9      	b.n	1000334a <reset_rpi_read_register.isra.0+0x14>
		*value = sys_read32(base_address + offset);
10003356:	18c9      	adds	r1, r1, r3
	return *(volatile uint32_t *)addr;
10003358:	680b      	ldr	r3, [r1, #0]
1000335a:	e7f6      	b.n	1000334a <reset_rpi_read_register.isra.0+0x14>
	switch (config->reg_width) {
1000335c:	2016      	movs	r0, #22
1000335e:	4240      	negs	r0, r0
10003360:	e7f5      	b.n	1000334e <reset_rpi_read_register.isra.0+0x18>

10003362 <reset_rpi_update.isra.0>:
static int reset_rpi_update(const struct device *dev, uint32_t id, uint8_t assert)
10003362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003364:	0005      	movs	r5, r0
10003366:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10003368:	7929      	ldrb	r1, [r5, #4]
static int reset_rpi_update(const struct device *dev, uint32_t id, uint8_t assert)
1000336a:	0016      	movs	r6, r2
	offset = id / (config->reg_width * CHAR_BIT);
1000336c:	00c9      	lsls	r1, r1, #3
1000336e:	f7fc ff75 	bl	1000025c <__aeabi_uidivmod>
10003372:	aa01      	add	r2, sp, #4
10003374:	0004      	movs	r4, r0
10003376:	000f      	movs	r7, r1
	ret = reset_rpi_read_register(dev, offset, &value);
10003378:	b281      	uxth	r1, r0
1000337a:	0028      	movs	r0, r5
1000337c:	f7ff ffdb 	bl	10003336 <reset_rpi_read_register.isra.0>
	if (ret) {
10003380:	2800      	cmp	r0, #0
10003382:	d116      	bne.n	100033b2 <reset_rpi_update.isra.0+0x50>
		value |= BIT(regbit);
10003384:	2201      	movs	r2, #1
10003386:	9901      	ldr	r1, [sp, #4]
10003388:	b2ff      	uxtb	r7, r7
1000338a:	40ba      	lsls	r2, r7
		value &= ~BIT(regbit);
1000338c:	000b      	movs	r3, r1
	if (assert ^ config->active_low) {
1000338e:	796f      	ldrb	r7, [r5, #5]
		value &= ~BIT(regbit);
10003390:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
10003392:	42b7      	cmp	r7, r6
10003394:	d001      	beq.n	1000339a <reset_rpi_update.isra.0+0x38>
		value |= BIT(regbit);
10003396:	0013      	movs	r3, r2
10003398:	430b      	orrs	r3, r1
	switch (config->reg_width) {
1000339a:	7929      	ldrb	r1, [r5, #4]
	uint32_t base_address = config->base_address;
1000339c:	68aa      	ldr	r2, [r5, #8]
	switch (config->reg_width) {
1000339e:	2902      	cmp	r1, #2
100033a0:	d008      	beq.n	100033b4 <reset_rpi_update.isra.0+0x52>
100033a2:	2904      	cmp	r1, #4
100033a4:	d00b      	beq.n	100033be <reset_rpi_update.isra.0+0x5c>
100033a6:	2901      	cmp	r1, #1
100033a8:	d10d      	bne.n	100033c6 <reset_rpi_update.isra.0+0x64>
		sys_write8(value, base_address + offset);
100033aa:	b2a4      	uxth	r4, r4
100033ac:	b2db      	uxtb	r3, r3
100033ae:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
100033b0:	7023      	strb	r3, [r4, #0]
}
100033b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
100033b4:	b2a4      	uxth	r4, r4
100033b6:	b29b      	uxth	r3, r3
100033b8:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
100033ba:	8023      	strh	r3, [r4, #0]
}
100033bc:	e7f9      	b.n	100033b2 <reset_rpi_update.isra.0+0x50>
		sys_write32(value, base_address + offset);
100033be:	b2a4      	uxth	r4, r4
100033c0:	18a4      	adds	r4, r4, r2
	*(volatile uint32_t *)addr = data;
100033c2:	6023      	str	r3, [r4, #0]
}
100033c4:	e7f5      	b.n	100033b2 <reset_rpi_update.isra.0+0x50>
	switch (config->reg_width) {
100033c6:	2016      	movs	r0, #22
100033c8:	4240      	negs	r0, r0
100033ca:	e7f2      	b.n	100033b2 <reset_rpi_update.isra.0+0x50>

100033cc <reset_rpi_deassert>:
{
100033cc:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
100033ce:	2200      	movs	r2, #0
100033d0:	6840      	ldr	r0, [r0, #4]
100033d2:	f7ff ffc6 	bl	10003362 <reset_rpi_update.isra.0>
}
100033d6:	bd10      	pop	{r4, pc}

100033d8 <reset_rpi_assert>:
{
100033d8:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
100033da:	2201      	movs	r2, #1
100033dc:	6840      	ldr	r0, [r0, #4]
100033de:	f7ff ffc0 	bl	10003362 <reset_rpi_update.isra.0>
}
100033e2:	bd10      	pop	{r4, pc}

100033e4 <reset_rpi_toggle>:
{
100033e4:	b570      	push	{r4, r5, r6, lr}
100033e6:	0004      	movs	r4, r0
100033e8:	000d      	movs	r5, r1
	ret = reset_rpi_assert(dev, id);
100033ea:	f7ff fff5 	bl	100033d8 <reset_rpi_assert>
	if (ret) {
100033ee:	2800      	cmp	r0, #0
100033f0:	d103      	bne.n	100033fa <reset_rpi_toggle+0x16>
	return reset_rpi_deassert(dev, id);
100033f2:	0029      	movs	r1, r5
100033f4:	0020      	movs	r0, r4
100033f6:	f7ff ffe9 	bl	100033cc <reset_rpi_deassert>
}
100033fa:	bd70      	pop	{r4, r5, r6, pc}

100033fc <reset_rpi_status>:
{
100033fc:	0003      	movs	r3, r0
100033fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
10003400:	685e      	ldr	r6, [r3, #4]
{
10003402:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10003404:	7931      	ldrb	r1, [r6, #4]
{
10003406:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
10003408:	00c9      	lsls	r1, r1, #3
1000340a:	f7fc ff27 	bl	1000025c <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
1000340e:	aa01      	add	r2, sp, #4
10003410:	000d      	movs	r5, r1
10003412:	b281      	uxth	r1, r0
10003414:	0030      	movs	r0, r6
10003416:	f7ff ff8e 	bl	10003336 <reset_rpi_read_register.isra.0>
	if (ret) {
1000341a:	2800      	cmp	r0, #0
1000341c:	d10a      	bne.n	10003434 <reset_rpi_status+0x38>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
1000341e:	9a01      	ldr	r2, [sp, #4]
10003420:	b2ed      	uxtb	r5, r5
10003422:	40ea      	lsrs	r2, r5
10003424:	2301      	movs	r3, #1
10003426:	4393      	bics	r3, r2
10003428:	001a      	movs	r2, r3
1000342a:	7973      	ldrb	r3, [r6, #5]
1000342c:	4259      	negs	r1, r3
1000342e:	414b      	adcs	r3, r1
10003430:	4053      	eors	r3, r2
10003432:	7023      	strb	r3, [r4, #0]
}
10003434:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

10003436 <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10003436:	2301      	movs	r3, #1
10003438:	22d0      	movs	r2, #208	; 0xd0
1000343a:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
1000343c:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
1000343e:	0612      	lsls	r2, r2, #24
10003440:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10003442:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
10003444:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10003446:	f7fe fa55 	bl	100018f4 <gpio_set_function>
}
1000344a:	bd10      	pop	{r4, pc}

1000344c <z_device_state_init>:
}
1000344c:	4770      	bx	lr

1000344e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
1000344e:	2800      	cmp	r0, #0
10003450:	d008      	beq.n	10003464 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
10003452:	68c3      	ldr	r3, [r0, #12]
10003454:	8818      	ldrh	r0, [r3, #0]
10003456:	05c0      	lsls	r0, r0, #23
10003458:	0dc0      	lsrs	r0, r0, #23
1000345a:	3801      	subs	r0, #1
1000345c:	38ff      	subs	r0, #255	; 0xff
1000345e:	4243      	negs	r3, r0
10003460:	4158      	adcs	r0, r3
10003462:	b2c0      	uxtb	r0, r0
}
10003464:	4770      	bx	lr

10003466 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
10003466:	f3ef 8310 	mrs	r3, PRIMASK
1000346a:	b672      	cpsid	i
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
1000346c:	e7fe      	b.n	1000346c <arch_system_halt+0x6>

1000346e <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
1000346e:	b510      	push	{r4, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
10003470:	f7ff fff9 	bl	10003466 <arch_system_halt>

10003474 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003476:	0005      	movs	r5, r0
10003478:	000e      	movs	r6, r1
1000347a:	f3ef 8710 	mrs	r7, PRIMASK
1000347e:	b672      	cpsid	i
	return z_impl_z_current_get();
10003480:	f7ff f8a4 	bl	100025cc <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
10003484:	0031      	movs	r1, r6
10003486:	0004      	movs	r4, r0
10003488:	0028      	movs	r0, r5
1000348a:	f7ff fff0 	bl	1000346e <k_sys_fatal_error_handler>
	if (key != 0U) {
1000348e:	2f00      	cmp	r7, #0
10003490:	d102      	bne.n	10003498 <z_fatal_error+0x24>
	__asm__ volatile(
10003492:	b662      	cpsie	i
10003494:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
10003498:	0020      	movs	r0, r4
1000349a:	f7fd fdd3 	bl	10001044 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
1000349e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100034a0 <z_early_memset>:
{
100034a0:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
100034a2:	f7ff fc04 	bl	10002cae <memset>
}
100034a6:	bd10      	pop	{r4, pc}

100034a8 <z_early_memcpy>:
{
100034a8:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
100034aa:	f7ff fbf7 	bl	10002c9c <memcpy>
}
100034ae:	bd10      	pop	{r4, pc}

100034b0 <k_is_in_isr>:
100034b0:	f3ef 8005 	mrs	r0, IPSR
 * The current executing vector is found in the IPSR register. All
 * IRQs and system exceptions are considered as interrupt context.
 */
static ALWAYS_INLINE bool arch_is_in_isr(void)
{
	return (__get_IPSR()) ? (true) : (false);
100034b4:	1e43      	subs	r3, r0, #1
100034b6:	4198      	sbcs	r0, r3
	return arch_is_in_isr();
100034b8:	b2c0      	uxtb	r0, r0
}
100034ba:	4770      	bx	lr

100034bc <z_impl_k_thread_name_set>:
	return -ENOSYS;
100034bc:	2058      	movs	r0, #88	; 0x58
}
100034be:	4240      	negs	r0, r0
100034c0:	4770      	bx	lr

100034c2 <z_impl_k_thread_start>:
{
100034c2:	b510      	push	{r4, lr}
	z_sched_start(thread);
100034c4:	f7fe ff30 	bl	10002328 <z_sched_start>
}
100034c8:	bd10      	pop	{r4, pc}

100034ca <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
100034ca:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100034cc:	f3ef 8310 	mrs	r3, PRIMASK
100034d0:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
100034d2:	f7fd fc49 	bl	10000d68 <arch_cpu_idle>
100034d6:	e7f9      	b.n	100034cc <idle+0x2>

100034d8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
100034d8:	2a00      	cmp	r2, #0
100034da:	d007      	beq.n	100034ec <z_impl_k_sem_init+0x14>
100034dc:	428a      	cmp	r2, r1
100034de:	d305      	bcc.n	100034ec <z_impl_k_sem_init+0x14>
	sem->count = initial_count;
100034e0:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
100034e2:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
100034e4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
100034e6:	6040      	str	r0, [r0, #4]
	return 0;
100034e8:	2000      	movs	r0, #0
}
100034ea:	4770      	bx	lr
		return -EINVAL;
100034ec:	2016      	movs	r0, #22
100034ee:	4240      	negs	r0, r0
100034f0:	e7fb      	b.n	100034ea <z_impl_k_sem_init+0x12>

100034f2 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
100034f2:	2201      	movs	r2, #1
{
100034f4:	b530      	push	{r4, r5, lr}
	*flagp &= ~BIT(bit);
100034f6:	0014      	movs	r4, r2
	return (*flagp & BIT(bit)) != 0U;
100034f8:	6803      	ldr	r3, [r0, #0]
	*flagp &= ~BIT(bit);
100034fa:	408c      	lsls	r4, r1
100034fc:	001d      	movs	r5, r3
	return (*flagp & BIT(bit)) != 0U;
100034fe:	40cb      	lsrs	r3, r1
	*flagp &= ~BIT(bit);
10003500:	43a5      	bics	r5, r4
	return ret;
10003502:	4013      	ands	r3, r2
	*flagp &= ~BIT(bit);
10003504:	6005      	str	r5, [r0, #0]
	return ret;
10003506:	0018      	movs	r0, r3
}
10003508:	bd30      	pop	{r4, r5, pc}

1000350a <notify_queue_locked.isra.0>:
static inline bool notify_queue_locked(struct k_work_q *queue)
1000350a:	b510      	push	{r4, lr}
	if (queue != NULL) {
1000350c:	2800      	cmp	r0, #0
1000350e:	d004      	beq.n	1000351a <notify_queue_locked.isra.0+0x10>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
10003510:	2200      	movs	r2, #0
10003512:	3078      	adds	r0, #120	; 0x78
10003514:	0011      	movs	r1, r2
10003516:	f000 f8bc 	bl	10003692 <z_sched_wake>
}
1000351a:	bd10      	pop	{r4, pc}

1000351c <k_work_submit_to_queue>:
{
1000351c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000351e:	9001      	str	r0, [sp, #4]
10003520:	0008      	movs	r0, r1
10003522:	f3ef 8510 	mrs	r5, PRIMASK
10003526:	b672      	cpsid	i
	int ret = submit_to_queue_locked(work, &queue);
10003528:	a901      	add	r1, sp, #4
1000352a:	f7fe fd35 	bl	10001f98 <submit_to_queue_locked>
1000352e:	0004      	movs	r4, r0
	if (key != 0U) {
10003530:	2d00      	cmp	r5, #0
10003532:	d102      	bne.n	1000353a <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
10003534:	b662      	cpsie	i
10003536:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
1000353a:	2c00      	cmp	r4, #0
1000353c:	dd04      	ble.n	10003548 <k_work_submit_to_queue+0x2c>
	__asm__ volatile("mrs %0, PRIMASK;"
1000353e:	f3ef 8010 	mrs	r0, PRIMASK
10003542:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10003544:	f000 f821 	bl	1000358a <z_reschedule_irqlock>
}
10003548:	0020      	movs	r0, r4
1000354a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

1000354c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
1000354c:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
1000354e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10003550:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10003552:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10003554:	2300      	movs	r3, #0
10003556:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10003558:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
1000355a:	4770      	bx	lr

1000355c <unpend_thread_no_timeout>:
{
1000355c:	b510      	push	{r4, lr}
1000355e:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
10003560:	f7ff fff4 	bl	1000354c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
10003564:	2202      	movs	r2, #2
10003566:	7b63      	ldrb	r3, [r4, #13]
10003568:	4393      	bics	r3, r2
1000356a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
1000356c:	2300      	movs	r3, #0
1000356e:	60a3      	str	r3, [r4, #8]
}
10003570:	bd10      	pop	{r4, pc}

10003572 <z_unpend_thread_no_timeout>:
{
10003572:	b510      	push	{r4, lr}
10003574:	f3ef 8410 	mrs	r4, PRIMASK
10003578:	b672      	cpsid	i
		unpend_thread_no_timeout(thread);
1000357a:	f7ff ffef 	bl	1000355c <unpend_thread_no_timeout>
	if (key != 0U) {
1000357e:	2c00      	cmp	r4, #0
10003580:	d102      	bne.n	10003588 <z_unpend_thread_no_timeout+0x16>
	__asm__ volatile(
10003582:	b662      	cpsie	i
10003584:	f3bf 8f6f 	isb	sy
}
10003588:	bd10      	pop	{r4, pc}

1000358a <z_reschedule_irqlock>:
{
1000358a:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
1000358c:	2800      	cmp	r0, #0
1000358e:	d105      	bne.n	1000359c <z_reschedule_irqlock+0x12>
10003590:	f3ef 8005 	mrs	r0, IPSR
	if (resched(key)) {
10003594:	2800      	cmp	r0, #0
10003596:	d102      	bne.n	1000359e <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
10003598:	f7fd fc3c 	bl	10000e14 <arch_swap>
}
1000359c:	bd10      	pop	{r4, pc}
1000359e:	b662      	cpsie	i
100035a0:	f3bf 8f6f 	isb	sy
100035a4:	e7fa      	b.n	1000359c <z_reschedule_irqlock+0x12>

100035a6 <z_reschedule_unlocked>:
{
100035a6:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100035a8:	f3ef 8010 	mrs	r0, PRIMASK
100035ac:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
100035ae:	f7ff ffec 	bl	1000358a <z_reschedule_irqlock>
}
100035b2:	bd10      	pop	{r4, pc}

100035b4 <z_priq_dumb_best>:
{
100035b4:	0003      	movs	r3, r0
	return list->head == list;
100035b6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100035b8:	4283      	cmp	r3, r0
100035ba:	d100      	bne.n	100035be <z_priq_dumb_best+0xa>
	struct k_thread *thread = NULL;
100035bc:	2000      	movs	r0, #0
}
100035be:	4770      	bx	lr

100035c0 <z_ready_thread>:
{
100035c0:	b510      	push	{r4, lr}
100035c2:	f3ef 8410 	mrs	r4, PRIMASK
100035c6:	b672      	cpsid	i
			ready_thread(thread);
100035c8:	f7fe fe78 	bl	100022bc <ready_thread>
	if (key != 0U) {
100035cc:	2c00      	cmp	r4, #0
100035ce:	d102      	bne.n	100035d6 <z_ready_thread+0x16>
	__asm__ volatile(
100035d0:	b662      	cpsie	i
100035d2:	f3bf 8f6f 	isb	sy
}
100035d6:	bd10      	pop	{r4, pc}

100035d8 <z_thread_timeout>:
	struct k_thread *thread = CONTAINER_OF(timeout,
100035d8:	3818      	subs	r0, #24
{
100035da:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = CONTAINER_OF(timeout,
100035dc:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
100035de:	f3ef 8510 	mrs	r5, PRIMASK
100035e2:	b672      	cpsid	i
		if (!killed) {
100035e4:	2328      	movs	r3, #40	; 0x28
100035e6:	7b42      	ldrb	r2, [r0, #13]
100035e8:	421a      	tst	r2, r3
100035ea:	d10b      	bne.n	10003604 <z_thread_timeout+0x2c>
			if (thread->base.pended_on != NULL) {
100035ec:	6883      	ldr	r3, [r0, #8]
100035ee:	2b00      	cmp	r3, #0
100035f0:	d001      	beq.n	100035f6 <z_thread_timeout+0x1e>
				unpend_thread_no_timeout(thread);
100035f2:	f7ff ffb3 	bl	1000355c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
100035f6:	2214      	movs	r2, #20
100035f8:	7b63      	ldrb	r3, [r4, #13]
			ready_thread(thread);
100035fa:	0020      	movs	r0, r4
100035fc:	4393      	bics	r3, r2
100035fe:	7363      	strb	r3, [r4, #13]
10003600:	f7fe fe5c 	bl	100022bc <ready_thread>
	if (key != 0U) {
10003604:	2d00      	cmp	r5, #0
10003606:	d102      	bne.n	1000360e <z_thread_timeout+0x36>
	__asm__ volatile(
10003608:	b662      	cpsie	i
1000360a:	f3bf 8f6f 	isb	sy
}
1000360e:	bd70      	pop	{r4, r5, r6, pc}

10003610 <add_to_waitq_locked>:
{
10003610:	b570      	push	{r4, r5, r6, lr}
10003612:	0004      	movs	r4, r0
10003614:	000d      	movs	r5, r1
	unready_thread(thread);
10003616:	f7fe fea1 	bl	1000235c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
1000361a:	2302      	movs	r3, #2
1000361c:	7b62      	ldrb	r2, [r4, #13]
1000361e:	4313      	orrs	r3, r2
10003620:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
10003622:	2d00      	cmp	r5, #0
10003624:	d013      	beq.n	1000364e <add_to_waitq_locked+0x3e>
	return list->head == list;
10003626:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
10003628:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000362a:	429d      	cmp	r5, r3
1000362c:	d016      	beq.n	1000365c <add_to_waitq_locked+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
1000362e:	2b00      	cmp	r3, #0
10003630:	d014      	beq.n	1000365c <add_to_waitq_locked+0x4c>
	int32_t b1 = thread_1->base.prio;
10003632:	210e      	movs	r1, #14
10003634:	5661      	ldrsb	r1, [r4, r1]
	int32_t b2 = thread_2->base.prio;
10003636:	220e      	movs	r2, #14
10003638:	569a      	ldrsb	r2, [r3, r2]
	if (b1 != b2) {
1000363a:	4291      	cmp	r1, r2
1000363c:	d008      	beq.n	10003650 <add_to_waitq_locked+0x40>
		return b2 - b1;
1000363e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
10003640:	2a00      	cmp	r2, #0
10003642:	dd05      	ble.n	10003650 <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
10003644:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10003646:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10003648:	6062      	str	r2, [r4, #4]
	prev->next = node;
1000364a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
1000364c:	605c      	str	r4, [r3, #4]
}
1000364e:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10003650:	686a      	ldr	r2, [r5, #4]
10003652:	4293      	cmp	r3, r2
10003654:	d002      	beq.n	1000365c <add_to_waitq_locked+0x4c>
10003656:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003658:	2b00      	cmp	r3, #0
1000365a:	d1ec      	bne.n	10003636 <add_to_waitq_locked+0x26>
	sys_dnode_t *const tail = list->tail;
1000365c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
1000365e:	6025      	str	r5, [r4, #0]
	node->prev = tail;
10003660:	6063      	str	r3, [r4, #4]
	tail->next = node;
10003662:	601c      	str	r4, [r3, #0]
	list->tail = node;
10003664:	606c      	str	r4, [r5, #4]
}
10003666:	e7f2      	b.n	1000364e <add_to_waitq_locked+0x3e>

10003668 <z_unpend_first_thread>:
{
10003668:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000366a:	f3ef 8510 	mrs	r5, PRIMASK
1000366e:	b672      	cpsid	i
		thread = _priq_wait_best(&wait_q->waitq);
10003670:	f7ff ffa0 	bl	100035b4 <z_priq_dumb_best>
10003674:	1e04      	subs	r4, r0, #0
		if (thread != NULL) {
10003676:	d005      	beq.n	10003684 <z_unpend_first_thread+0x1c>
			unpend_thread_no_timeout(thread);
10003678:	f7ff ff70 	bl	1000355c <unpend_thread_no_timeout>
1000367c:	0020      	movs	r0, r4
1000367e:	3018      	adds	r0, #24
10003680:	f000 f826 	bl	100036d0 <z_abort_timeout>
	if (key != 0U) {
10003684:	2d00      	cmp	r5, #0
10003686:	d102      	bne.n	1000368e <z_unpend_first_thread+0x26>
	__asm__ volatile(
10003688:	b662      	cpsie	i
1000368a:	f3bf 8f6f 	isb	sy
}
1000368e:	0020      	movs	r0, r4
10003690:	bd70      	pop	{r4, r5, r6, pc}

10003692 <z_sched_wake>:
{
10003692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003694:	000e      	movs	r6, r1
10003696:	0015      	movs	r5, r2
	__asm__ volatile("mrs %0, PRIMASK;"
10003698:	f3ef 8710 	mrs	r7, PRIMASK
1000369c:	b672      	cpsid	i
		thread = _priq_wait_best(&wait_q->waitq);
1000369e:	f7ff ff89 	bl	100035b4 <z_priq_dumb_best>
100036a2:	0004      	movs	r4, r0
	bool ret = false;
100036a4:	2000      	movs	r0, #0
		if (thread != NULL) {
100036a6:	4284      	cmp	r4, r0
100036a8:	d00c      	beq.n	100036c4 <z_sched_wake+0x32>
			unpend_thread_no_timeout(thread);
100036aa:	0020      	movs	r0, r4
100036ac:	66e6      	str	r6, [r4, #108]	; 0x6c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
100036ae:	6165      	str	r5, [r4, #20]
100036b0:	f7ff ff54 	bl	1000355c <unpend_thread_no_timeout>
100036b4:	0020      	movs	r0, r4
100036b6:	3018      	adds	r0, #24
100036b8:	f000 f80a 	bl	100036d0 <z_abort_timeout>
			ready_thread(thread);
100036bc:	0020      	movs	r0, r4
100036be:	f7fe fdfd 	bl	100022bc <ready_thread>
			ret = true;
100036c2:	2001      	movs	r0, #1
	if (key != 0U) {
100036c4:	2f00      	cmp	r7, #0
100036c6:	d102      	bne.n	100036ce <z_sched_wake+0x3c>
	__asm__ volatile(
100036c8:	b662      	cpsie	i
100036ca:	f3bf 8f6f 	isb	sy
}
100036ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100036d0 <z_abort_timeout>:
{
100036d0:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100036d2:	f3ef 8410 	mrs	r4, PRIMASK
100036d6:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
100036d8:	6803      	ldr	r3, [r0, #0]
100036da:	2b00      	cmp	r3, #0
100036dc:	d008      	beq.n	100036f0 <z_abort_timeout+0x20>
			remove_timeout(to);
100036de:	f7ff f82f 	bl	10002740 <remove_timeout>
			ret = 0;
100036e2:	2000      	movs	r0, #0
	if (key != 0U) {
100036e4:	2c00      	cmp	r4, #0
100036e6:	d102      	bne.n	100036ee <z_abort_timeout+0x1e>
	__asm__ volatile(
100036e8:	b662      	cpsie	i
100036ea:	f3bf 8f6f 	isb	sy
}
100036ee:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
100036f0:	2016      	movs	r0, #22
100036f2:	4240      	negs	r0, r0
100036f4:	e7f6      	b.n	100036e4 <z_abort_timeout+0x14>

100036f6 <z_set_timeout_expiry>:
{
100036f6:	b570      	push	{r4, r5, r6, lr}
100036f8:	0004      	movs	r4, r0
100036fa:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
100036fc:	f3ef 8610 	mrs	r6, PRIMASK
10003700:	b672      	cpsid	i
		int next_to = next_timeout();
10003702:	f7fe fff1 	bl	100026e8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
10003706:	2801      	cmp	r0, #1
10003708:	dd05      	ble.n	10003716 <z_set_timeout_expiry+0x20>
1000370a:	42a0      	cmp	r0, r4
1000370c:	db03      	blt.n	10003716 <z_set_timeout_expiry+0x20>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
1000370e:	0029      	movs	r1, r5
10003710:	0020      	movs	r0, r4
10003712:	f7fd fee3 	bl	100014dc <sys_clock_set_timeout>
	if (key != 0U) {
10003716:	2e00      	cmp	r6, #0
10003718:	d102      	bne.n	10003720 <z_set_timeout_expiry+0x2a>
	__asm__ volatile(
1000371a:	b662      	cpsie	i
1000371c:	f3bf 8f6f 	isb	sy
}
10003720:	bd70      	pop	{r4, r5, r6, pc}

10003722 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
10003722:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
10003724:	f7ff f914 	bl	10002950 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
10003728:	bd10      	pop	{r4, pc}
