
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	200008c8 10002931 10004c31 100028ed     ... 1)..1L...(..
	...
1000012c:	100027b9 00000000 00000000 10002759     .'..........Y'..
1000013c:	10002fe1                                ./..

10000140 <_irq_vector_table>:
10000140:	10002829 10002829 10002829 10002829     )(..)(..)(..)(..
10000150:	10002829 10002829 10002829 10002829     )(..)(..)(..)(..
10000160:	10002829 10002829 10002829 10002829     )(..)(..)(..)(..
10000170:	10002829 10002829 10002829 10002829     )(..)(..)(..)(..
10000180:	10002829 10002829 10002829 10002829     )(..)(..)(..)(..
10000190:	10002829 10002829 10002829 10002829     )(..)(..)(..)(..
100001a0:	10002829 10002829                       )(..)(..

Disassembly of section text:

100001a8 <__gnu_thumb1_case_sqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5609      	ldrsb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_uqi>:
100001bc:	b402      	push	{r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0049      	lsls	r1, r1, #1
100001c4:	5c09      	ldrb	r1, [r1, r0]
100001c6:	0049      	lsls	r1, r1, #1
100001c8:	448e      	add	lr, r1
100001ca:	bc02      	pop	{r1}
100001cc:	4770      	bx	lr
100001ce:	46c0      	nop			; (mov r8, r8)

100001d0 <__gnu_thumb1_case_shi>:
100001d0:	b403      	push	{r0, r1}
100001d2:	4671      	mov	r1, lr
100001d4:	0849      	lsrs	r1, r1, #1
100001d6:	0040      	lsls	r0, r0, #1
100001d8:	0049      	lsls	r1, r1, #1
100001da:	5e09      	ldrsh	r1, [r1, r0]
100001dc:	0049      	lsls	r1, r1, #1
100001de:	448e      	add	lr, r1
100001e0:	bc03      	pop	{r0, r1}
100001e2:	4770      	bx	lr

100001e4 <__udivsi3>:
100001e4:	2900      	cmp	r1, #0
100001e6:	d034      	beq.n	10000252 <.udivsi3_skip_div0_test+0x6a>

100001e8 <.udivsi3_skip_div0_test>:
100001e8:	2301      	movs	r3, #1
100001ea:	2200      	movs	r2, #0
100001ec:	b410      	push	{r4}
100001ee:	4288      	cmp	r0, r1
100001f0:	d32c      	bcc.n	1000024c <.udivsi3_skip_div0_test+0x64>
100001f2:	2401      	movs	r4, #1
100001f4:	0724      	lsls	r4, r4, #28
100001f6:	42a1      	cmp	r1, r4
100001f8:	d204      	bcs.n	10000204 <.udivsi3_skip_div0_test+0x1c>
100001fa:	4281      	cmp	r1, r0
100001fc:	d202      	bcs.n	10000204 <.udivsi3_skip_div0_test+0x1c>
100001fe:	0109      	lsls	r1, r1, #4
10000200:	011b      	lsls	r3, r3, #4
10000202:	e7f8      	b.n	100001f6 <.udivsi3_skip_div0_test+0xe>
10000204:	00e4      	lsls	r4, r4, #3
10000206:	42a1      	cmp	r1, r4
10000208:	d204      	bcs.n	10000214 <.udivsi3_skip_div0_test+0x2c>
1000020a:	4281      	cmp	r1, r0
1000020c:	d202      	bcs.n	10000214 <.udivsi3_skip_div0_test+0x2c>
1000020e:	0049      	lsls	r1, r1, #1
10000210:	005b      	lsls	r3, r3, #1
10000212:	e7f8      	b.n	10000206 <.udivsi3_skip_div0_test+0x1e>
10000214:	4288      	cmp	r0, r1
10000216:	d301      	bcc.n	1000021c <.udivsi3_skip_div0_test+0x34>
10000218:	1a40      	subs	r0, r0, r1
1000021a:	431a      	orrs	r2, r3
1000021c:	084c      	lsrs	r4, r1, #1
1000021e:	42a0      	cmp	r0, r4
10000220:	d302      	bcc.n	10000228 <.udivsi3_skip_div0_test+0x40>
10000222:	1b00      	subs	r0, r0, r4
10000224:	085c      	lsrs	r4, r3, #1
10000226:	4322      	orrs	r2, r4
10000228:	088c      	lsrs	r4, r1, #2
1000022a:	42a0      	cmp	r0, r4
1000022c:	d302      	bcc.n	10000234 <.udivsi3_skip_div0_test+0x4c>
1000022e:	1b00      	subs	r0, r0, r4
10000230:	089c      	lsrs	r4, r3, #2
10000232:	4322      	orrs	r2, r4
10000234:	08cc      	lsrs	r4, r1, #3
10000236:	42a0      	cmp	r0, r4
10000238:	d302      	bcc.n	10000240 <.udivsi3_skip_div0_test+0x58>
1000023a:	1b00      	subs	r0, r0, r4
1000023c:	08dc      	lsrs	r4, r3, #3
1000023e:	4322      	orrs	r2, r4
10000240:	2800      	cmp	r0, #0
10000242:	d003      	beq.n	1000024c <.udivsi3_skip_div0_test+0x64>
10000244:	091b      	lsrs	r3, r3, #4
10000246:	d001      	beq.n	1000024c <.udivsi3_skip_div0_test+0x64>
10000248:	0909      	lsrs	r1, r1, #4
1000024a:	e7e3      	b.n	10000214 <.udivsi3_skip_div0_test+0x2c>
1000024c:	0010      	movs	r0, r2
1000024e:	bc10      	pop	{r4}
10000250:	4770      	bx	lr
10000252:	b501      	push	{r0, lr}
10000254:	2000      	movs	r0, #0
10000256:	f000 f80b 	bl	10000270 <__aeabi_idiv0>
1000025a:	bd02      	pop	{r1, pc}

1000025c <__aeabi_uidivmod>:
1000025c:	2900      	cmp	r1, #0
1000025e:	d0f8      	beq.n	10000252 <.udivsi3_skip_div0_test+0x6a>
10000260:	b503      	push	{r0, r1, lr}
10000262:	f7ff ffc1 	bl	100001e8 <.udivsi3_skip_div0_test>
10000266:	bc0e      	pop	{r1, r2, r3}
10000268:	4342      	muls	r2, r0
1000026a:	1a89      	subs	r1, r1, r2
1000026c:	4718      	bx	r3
1000026e:	46c0      	nop			; (mov r8, r8)

10000270 <__aeabi_idiv0>:
10000270:	4770      	bx	lr
10000272:	46c0      	nop			; (mov r8, r8)

10000274 <__aeabi_cdrcmple>:
10000274:	4684      	mov	ip, r0
10000276:	0010      	movs	r0, r2
10000278:	4662      	mov	r2, ip
1000027a:	468c      	mov	ip, r1
1000027c:	0019      	movs	r1, r3
1000027e:	4663      	mov	r3, ip
10000280:	e000      	b.n	10000284 <__aeabi_cdcmpeq>
10000282:	46c0      	nop			; (mov r8, r8)

10000284 <__aeabi_cdcmpeq>:
10000284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10000286:	f000 fd19 	bl	10000cbc <__ledf2>
1000028a:	2800      	cmp	r0, #0
1000028c:	d401      	bmi.n	10000292 <__aeabi_cdcmpeq+0xe>
1000028e:	2100      	movs	r1, #0
10000290:	42c8      	cmn	r0, r1
10000292:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10000294 <__aeabi_dcmpeq>:
10000294:	b510      	push	{r4, lr}
10000296:	f000 fc7b 	bl	10000b90 <__eqdf2>
1000029a:	4240      	negs	r0, r0
1000029c:	3001      	adds	r0, #1
1000029e:	bd10      	pop	{r4, pc}

100002a0 <__aeabi_dcmplt>:
100002a0:	b510      	push	{r4, lr}
100002a2:	f000 fd0b 	bl	10000cbc <__ledf2>
100002a6:	2800      	cmp	r0, #0
100002a8:	db01      	blt.n	100002ae <__aeabi_dcmplt+0xe>
100002aa:	2000      	movs	r0, #0
100002ac:	bd10      	pop	{r4, pc}
100002ae:	2001      	movs	r0, #1
100002b0:	bd10      	pop	{r4, pc}
100002b2:	46c0      	nop			; (mov r8, r8)

100002b4 <__aeabi_dcmple>:
100002b4:	b510      	push	{r4, lr}
100002b6:	f000 fd01 	bl	10000cbc <__ledf2>
100002ba:	2800      	cmp	r0, #0
100002bc:	dd01      	ble.n	100002c2 <__aeabi_dcmple+0xe>
100002be:	2000      	movs	r0, #0
100002c0:	bd10      	pop	{r4, pc}
100002c2:	2001      	movs	r0, #1
100002c4:	bd10      	pop	{r4, pc}
100002c6:	46c0      	nop			; (mov r8, r8)

100002c8 <__aeabi_dcmpgt>:
100002c8:	b510      	push	{r4, lr}
100002ca:	f000 fc9b 	bl	10000c04 <__gedf2>
100002ce:	2800      	cmp	r0, #0
100002d0:	dc01      	bgt.n	100002d6 <__aeabi_dcmpgt+0xe>
100002d2:	2000      	movs	r0, #0
100002d4:	bd10      	pop	{r4, pc}
100002d6:	2001      	movs	r0, #1
100002d8:	bd10      	pop	{r4, pc}
100002da:	46c0      	nop			; (mov r8, r8)

100002dc <__aeabi_dcmpge>:
100002dc:	b510      	push	{r4, lr}
100002de:	f000 fc91 	bl	10000c04 <__gedf2>
100002e2:	2800      	cmp	r0, #0
100002e4:	da01      	bge.n	100002ea <__aeabi_dcmpge+0xe>
100002e6:	2000      	movs	r0, #0
100002e8:	bd10      	pop	{r4, pc}
100002ea:	2001      	movs	r0, #1
100002ec:	bd10      	pop	{r4, pc}
100002ee:	46c0      	nop			; (mov r8, r8)

100002f0 <__clzsi2>:
100002f0:	211c      	movs	r1, #28
100002f2:	2301      	movs	r3, #1
100002f4:	041b      	lsls	r3, r3, #16
100002f6:	4298      	cmp	r0, r3
100002f8:	d301      	bcc.n	100002fe <__clzsi2+0xe>
100002fa:	0c00      	lsrs	r0, r0, #16
100002fc:	3910      	subs	r1, #16
100002fe:	0a1b      	lsrs	r3, r3, #8
10000300:	4298      	cmp	r0, r3
10000302:	d301      	bcc.n	10000308 <__clzsi2+0x18>
10000304:	0a00      	lsrs	r0, r0, #8
10000306:	3908      	subs	r1, #8
10000308:	091b      	lsrs	r3, r3, #4
1000030a:	4298      	cmp	r0, r3
1000030c:	d301      	bcc.n	10000312 <__clzsi2+0x22>
1000030e:	0900      	lsrs	r0, r0, #4
10000310:	3904      	subs	r1, #4
10000312:	a202      	add	r2, pc, #8	; (adr r2, 1000031c <__clzsi2+0x2c>)
10000314:	5c10      	ldrb	r0, [r2, r0]
10000316:	1840      	adds	r0, r0, r1
10000318:	4770      	bx	lr
1000031a:	46c0      	nop			; (mov r8, r8)
1000031c:	02020304 	.word	0x02020304
10000320:	01010101 	.word	0x01010101
	...

1000032c <__aeabi_uldivmod>:
1000032c:	2b00      	cmp	r3, #0
1000032e:	d111      	bne.n	10000354 <__aeabi_uldivmod+0x28>
10000330:	2a00      	cmp	r2, #0
10000332:	d10f      	bne.n	10000354 <__aeabi_uldivmod+0x28>
10000334:	2900      	cmp	r1, #0
10000336:	d100      	bne.n	1000033a <__aeabi_uldivmod+0xe>
10000338:	2800      	cmp	r0, #0
1000033a:	d002      	beq.n	10000342 <__aeabi_uldivmod+0x16>
1000033c:	2100      	movs	r1, #0
1000033e:	43c9      	mvns	r1, r1
10000340:	0008      	movs	r0, r1
10000342:	b407      	push	{r0, r1, r2}
10000344:	4802      	ldr	r0, [pc, #8]	; (10000350 <__aeabi_uldivmod+0x24>)
10000346:	a102      	add	r1, pc, #8	; (adr r1, 10000350 <__aeabi_uldivmod+0x24>)
10000348:	1840      	adds	r0, r0, r1
1000034a:	9002      	str	r0, [sp, #8]
1000034c:	bd03      	pop	{r0, r1, pc}
1000034e:	46c0      	nop			; (mov r8, r8)
10000350:	ffffff21 	.word	0xffffff21
10000354:	b403      	push	{r0, r1}
10000356:	4668      	mov	r0, sp
10000358:	b501      	push	{r0, lr}
1000035a:	9802      	ldr	r0, [sp, #8]
1000035c:	f001 fb7e 	bl	10001a5c <__udivmoddi4>
10000360:	9b01      	ldr	r3, [sp, #4]
10000362:	469e      	mov	lr, r3
10000364:	b002      	add	sp, #8
10000366:	bc0c      	pop	{r2, r3}
10000368:	4770      	bx	lr
1000036a:	46c0      	nop			; (mov r8, r8)

1000036c <__aeabi_f2ulz>:
1000036c:	b5d0      	push	{r4, r6, r7, lr}
1000036e:	f001 fa0f 	bl	10001790 <__aeabi_f2d>
10000372:	2200      	movs	r2, #0
10000374:	4b0b      	ldr	r3, [pc, #44]	; (100003a4 <__aeabi_f2ulz+0x38>)
10000376:	0006      	movs	r6, r0
10000378:	000f      	movs	r7, r1
1000037a:	f000 fcfb 	bl	10000d74 <__aeabi_dmul>
1000037e:	f001 fafb 	bl	10001978 <__aeabi_d2uiz>
10000382:	0004      	movs	r4, r0
10000384:	f001 f9e4 	bl	10001750 <__aeabi_ui2d>
10000388:	2200      	movs	r2, #0
1000038a:	4b07      	ldr	r3, [pc, #28]	; (100003a8 <__aeabi_f2ulz+0x3c>)
1000038c:	f000 fcf2 	bl	10000d74 <__aeabi_dmul>
10000390:	0002      	movs	r2, r0
10000392:	000b      	movs	r3, r1
10000394:	0030      	movs	r0, r6
10000396:	0039      	movs	r1, r7
10000398:	f000 ff04 	bl	100011a4 <__aeabi_dsub>
1000039c:	f001 faec 	bl	10001978 <__aeabi_d2uiz>
100003a0:	0021      	movs	r1, r4
100003a2:	bdd0      	pop	{r4, r6, r7, pc}
100003a4:	3df00000 	.word	0x3df00000
100003a8:	41f00000 	.word	0x41f00000

100003ac <__aeabi_fdiv>:
100003ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100003ae:	0fc3      	lsrs	r3, r0, #31
100003b0:	b085      	sub	sp, #20
100003b2:	0244      	lsls	r4, r0, #9
100003b4:	0045      	lsls	r5, r0, #1
100003b6:	1c0f      	adds	r7, r1, #0
100003b8:	0a64      	lsrs	r4, r4, #9
100003ba:	0e2d      	lsrs	r5, r5, #24
100003bc:	9303      	str	r3, [sp, #12]
100003be:	9302      	str	r3, [sp, #8]
100003c0:	d00a      	beq.n	100003d8 <__aeabi_fdiv+0x2c>
100003c2:	2dff      	cmp	r5, #255	; 0xff
100003c4:	d03b      	beq.n	1000043e <__aeabi_fdiv+0x92>
100003c6:	2380      	movs	r3, #128	; 0x80
100003c8:	00e4      	lsls	r4, r4, #3
100003ca:	04db      	lsls	r3, r3, #19
100003cc:	431c      	orrs	r4, r3
100003ce:	2300      	movs	r3, #0
100003d0:	3d7f      	subs	r5, #127	; 0x7f
100003d2:	9501      	str	r5, [sp, #4]
100003d4:	9300      	str	r3, [sp, #0]
100003d6:	e00e      	b.n	100003f6 <__aeabi_fdiv+0x4a>
100003d8:	2301      	movs	r3, #1
100003da:	9401      	str	r4, [sp, #4]
100003dc:	9300      	str	r3, [sp, #0]
100003de:	2c00      	cmp	r4, #0
100003e0:	d009      	beq.n	100003f6 <__aeabi_fdiv+0x4a>
100003e2:	0020      	movs	r0, r4
100003e4:	f7ff ff84 	bl	100002f0 <__clzsi2>
100003e8:	1f43      	subs	r3, r0, #5
100003ea:	409c      	lsls	r4, r3
100003ec:	2376      	movs	r3, #118	; 0x76
100003ee:	425b      	negs	r3, r3
100003f0:	1a1b      	subs	r3, r3, r0
100003f2:	9301      	str	r3, [sp, #4]
100003f4:	9500      	str	r5, [sp, #0]
100003f6:	027d      	lsls	r5, r7, #9
100003f8:	007e      	lsls	r6, r7, #1
100003fa:	0a6d      	lsrs	r5, r5, #9
100003fc:	0e36      	lsrs	r6, r6, #24
100003fe:	0fff      	lsrs	r7, r7, #31
10000400:	2e00      	cmp	r6, #0
10000402:	d023      	beq.n	1000044c <__aeabi_fdiv+0xa0>
10000404:	2eff      	cmp	r6, #255	; 0xff
10000406:	d02e      	beq.n	10000466 <__aeabi_fdiv+0xba>
10000408:	2380      	movs	r3, #128	; 0x80
1000040a:	00ed      	lsls	r5, r5, #3
1000040c:	04db      	lsls	r3, r3, #19
1000040e:	431d      	orrs	r5, r3
10000410:	0033      	movs	r3, r6
10000412:	3b7f      	subs	r3, #127	; 0x7f
10000414:	2200      	movs	r2, #0
10000416:	9801      	ldr	r0, [sp, #4]
10000418:	9903      	ldr	r1, [sp, #12]
1000041a:	1ac3      	subs	r3, r0, r3
1000041c:	9800      	ldr	r0, [sp, #0]
1000041e:	4079      	eors	r1, r7
10000420:	0080      	lsls	r0, r0, #2
10000422:	4310      	orrs	r0, r2
10000424:	3801      	subs	r0, #1
10000426:	280e      	cmp	r0, #14
10000428:	d831      	bhi.n	1000048e <__aeabi_fdiv+0xe2>
1000042a:	f7ff fec7 	bl	100001bc <__gnu_thumb1_case_uqi>
1000042e:	9d5b      	.short	0x9d5b
10000430:	9d989d6f 	.word	0x9d989d6f
10000434:	985b5b6f 	.word	0x985b5b6f
10000438:	2222226f 	.word	0x2222226f
1000043c:	61          	.byte	0x61
1000043d:	00          	.byte	0x00
1000043e:	2302      	movs	r3, #2
10000440:	9501      	str	r5, [sp, #4]
10000442:	9300      	str	r3, [sp, #0]
10000444:	2c00      	cmp	r4, #0
10000446:	d0d6      	beq.n	100003f6 <__aeabi_fdiv+0x4a>
10000448:	3301      	adds	r3, #1
1000044a:	e7c3      	b.n	100003d4 <__aeabi_fdiv+0x28>
1000044c:	002b      	movs	r3, r5
1000044e:	2201      	movs	r2, #1
10000450:	2d00      	cmp	r5, #0
10000452:	d0e0      	beq.n	10000416 <__aeabi_fdiv+0x6a>
10000454:	0028      	movs	r0, r5
10000456:	f7ff ff4b 	bl	100002f0 <__clzsi2>
1000045a:	1f43      	subs	r3, r0, #5
1000045c:	409d      	lsls	r5, r3
1000045e:	2376      	movs	r3, #118	; 0x76
10000460:	425b      	negs	r3, r3
10000462:	1a1b      	subs	r3, r3, r0
10000464:	e7d6      	b.n	10000414 <__aeabi_fdiv+0x68>
10000466:	0033      	movs	r3, r6
10000468:	2202      	movs	r2, #2
1000046a:	2d00      	cmp	r5, #0
1000046c:	d0d3      	beq.n	10000416 <__aeabi_fdiv+0x6a>
1000046e:	3201      	adds	r2, #1
10000470:	e7d1      	b.n	10000416 <__aeabi_fdiv+0x6a>
10000472:	9903      	ldr	r1, [sp, #12]
10000474:	9a00      	ldr	r2, [sp, #0]
10000476:	2000      	movs	r0, #0
10000478:	0005      	movs	r5, r0
1000047a:	2a01      	cmp	r2, #1
1000047c:	d064      	beq.n	10000548 <__aeabi_fdiv+0x19c>
1000047e:	4282      	cmp	r2, r0
10000480:	d01c      	beq.n	100004bc <__aeabi_fdiv+0x110>
10000482:	2a02      	cmp	r2, #2
10000484:	d02e      	beq.n	100004e4 <__aeabi_fdiv+0x138>
10000486:	2a03      	cmp	r2, #3
10000488:	d118      	bne.n	100004bc <__aeabi_fdiv+0x110>
1000048a:	9102      	str	r1, [sp, #8]
1000048c:	e038      	b.n	10000500 <__aeabi_fdiv+0x154>
1000048e:	0164      	lsls	r4, r4, #5
10000490:	016d      	lsls	r5, r5, #5
10000492:	42ac      	cmp	r4, r5
10000494:	d328      	bcc.n	100004e8 <__aeabi_fdiv+0x13c>
10000496:	201a      	movs	r0, #26
10000498:	2201      	movs	r2, #1
1000049a:	1b64      	subs	r4, r4, r5
1000049c:	2601      	movs	r6, #1
1000049e:	0027      	movs	r7, r4
100004a0:	0052      	lsls	r2, r2, #1
100004a2:	0064      	lsls	r4, r4, #1
100004a4:	2f00      	cmp	r7, #0
100004a6:	db01      	blt.n	100004ac <__aeabi_fdiv+0x100>
100004a8:	42a5      	cmp	r5, r4
100004aa:	d801      	bhi.n	100004b0 <__aeabi_fdiv+0x104>
100004ac:	1b64      	subs	r4, r4, r5
100004ae:	4332      	orrs	r2, r6
100004b0:	3801      	subs	r0, #1
100004b2:	2800      	cmp	r0, #0
100004b4:	d1f3      	bne.n	1000049e <__aeabi_fdiv+0xf2>
100004b6:	1e60      	subs	r0, r4, #1
100004b8:	4184      	sbcs	r4, r0
100004ba:	4314      	orrs	r4, r2
100004bc:	001d      	movs	r5, r3
100004be:	357f      	adds	r5, #127	; 0x7f
100004c0:	2d00      	cmp	r5, #0
100004c2:	dd26      	ble.n	10000512 <__aeabi_fdiv+0x166>
100004c4:	0762      	lsls	r2, r4, #29
100004c6:	d004      	beq.n	100004d2 <__aeabi_fdiv+0x126>
100004c8:	220f      	movs	r2, #15
100004ca:	4022      	ands	r2, r4
100004cc:	2a04      	cmp	r2, #4
100004ce:	d000      	beq.n	100004d2 <__aeabi_fdiv+0x126>
100004d0:	3404      	adds	r4, #4
100004d2:	0122      	lsls	r2, r4, #4
100004d4:	d503      	bpl.n	100004de <__aeabi_fdiv+0x132>
100004d6:	3380      	adds	r3, #128	; 0x80
100004d8:	001d      	movs	r5, r3
100004da:	4a26      	ldr	r2, [pc, #152]	; (10000574 <__aeabi_fdiv+0x1c8>)
100004dc:	4014      	ands	r4, r2
100004de:	08e0      	lsrs	r0, r4, #3
100004e0:	2dfe      	cmp	r5, #254	; 0xfe
100004e2:	dd31      	ble.n	10000548 <__aeabi_fdiv+0x19c>
100004e4:	2000      	movs	r0, #0
100004e6:	e00f      	b.n	10000508 <__aeabi_fdiv+0x15c>
100004e8:	201b      	movs	r0, #27
100004ea:	2200      	movs	r2, #0
100004ec:	3b01      	subs	r3, #1
100004ee:	e7d5      	b.n	1000049c <__aeabi_fdiv+0xf0>
100004f0:	2380      	movs	r3, #128	; 0x80
100004f2:	03db      	lsls	r3, r3, #15
100004f4:	421c      	tst	r4, r3
100004f6:	d003      	beq.n	10000500 <__aeabi_fdiv+0x154>
100004f8:	421d      	tst	r5, r3
100004fa:	d101      	bne.n	10000500 <__aeabi_fdiv+0x154>
100004fc:	002c      	movs	r4, r5
100004fe:	9702      	str	r7, [sp, #8]
10000500:	2080      	movs	r0, #128	; 0x80
10000502:	9902      	ldr	r1, [sp, #8]
10000504:	03c0      	lsls	r0, r0, #15
10000506:	4320      	orrs	r0, r4
10000508:	25ff      	movs	r5, #255	; 0xff
1000050a:	e01d      	b.n	10000548 <__aeabi_fdiv+0x19c>
1000050c:	002c      	movs	r4, r5
1000050e:	0039      	movs	r1, r7
10000510:	e7b1      	b.n	10000476 <__aeabi_fdiv+0xca>
10000512:	2201      	movs	r2, #1
10000514:	2000      	movs	r0, #0
10000516:	1b52      	subs	r2, r2, r5
10000518:	0005      	movs	r5, r0
1000051a:	2a1b      	cmp	r2, #27
1000051c:	dc14      	bgt.n	10000548 <__aeabi_fdiv+0x19c>
1000051e:	339e      	adds	r3, #158	; 0x9e
10000520:	0020      	movs	r0, r4
10000522:	409c      	lsls	r4, r3
10000524:	40d0      	lsrs	r0, r2
10000526:	1e63      	subs	r3, r4, #1
10000528:	419c      	sbcs	r4, r3
1000052a:	4320      	orrs	r0, r4
1000052c:	0743      	lsls	r3, r0, #29
1000052e:	d004      	beq.n	1000053a <__aeabi_fdiv+0x18e>
10000530:	230f      	movs	r3, #15
10000532:	4003      	ands	r3, r0
10000534:	2b04      	cmp	r3, #4
10000536:	d000      	beq.n	1000053a <__aeabi_fdiv+0x18e>
10000538:	3004      	adds	r0, #4
1000053a:	2380      	movs	r3, #128	; 0x80
1000053c:	0005      	movs	r5, r0
1000053e:	04db      	lsls	r3, r3, #19
10000540:	401d      	ands	r5, r3
10000542:	4218      	tst	r0, r3
10000544:	d113      	bne.n	1000056e <__aeabi_fdiv+0x1c2>
10000546:	08c0      	lsrs	r0, r0, #3
10000548:	23ff      	movs	r3, #255	; 0xff
1000054a:	05ed      	lsls	r5, r5, #23
1000054c:	05db      	lsls	r3, r3, #23
1000054e:	0240      	lsls	r0, r0, #9
10000550:	401d      	ands	r5, r3
10000552:	0a40      	lsrs	r0, r0, #9
10000554:	4328      	orrs	r0, r5
10000556:	07c9      	lsls	r1, r1, #31
10000558:	4308      	orrs	r0, r1
1000055a:	b005      	add	sp, #20
1000055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000055e:	2480      	movs	r4, #128	; 0x80
10000560:	2300      	movs	r3, #0
10000562:	03e4      	lsls	r4, r4, #15
10000564:	9302      	str	r3, [sp, #8]
10000566:	e7cb      	b.n	10000500 <__aeabi_fdiv+0x154>
10000568:	2000      	movs	r0, #0
1000056a:	0005      	movs	r5, r0
1000056c:	e7ec      	b.n	10000548 <__aeabi_fdiv+0x19c>
1000056e:	2000      	movs	r0, #0
10000570:	2501      	movs	r5, #1
10000572:	e7e9      	b.n	10000548 <__aeabi_fdiv+0x19c>
10000574:	f7ffffff 	.word	0xf7ffffff

10000578 <__aeabi_ui2f>:
10000578:	2300      	movs	r3, #0
1000057a:	b570      	push	{r4, r5, r6, lr}
1000057c:	0004      	movs	r4, r0
1000057e:	4298      	cmp	r0, r3
10000580:	d00a      	beq.n	10000598 <__aeabi_ui2f+0x20>
10000582:	f7ff feb5 	bl	100002f0 <__clzsi2>
10000586:	239e      	movs	r3, #158	; 0x9e
10000588:	0002      	movs	r2, r0
1000058a:	1a1b      	subs	r3, r3, r0
1000058c:	2b96      	cmp	r3, #150	; 0x96
1000058e:	dc08      	bgt.n	100005a2 <__aeabi_ui2f+0x2a>
10000590:	2808      	cmp	r0, #8
10000592:	dd01      	ble.n	10000598 <__aeabi_ui2f+0x20>
10000594:	3a08      	subs	r2, #8
10000596:	4094      	lsls	r4, r2
10000598:	0264      	lsls	r4, r4, #9
1000059a:	05db      	lsls	r3, r3, #23
1000059c:	0a60      	lsrs	r0, r4, #9
1000059e:	4318      	orrs	r0, r3
100005a0:	bd70      	pop	{r4, r5, r6, pc}
100005a2:	2b99      	cmp	r3, #153	; 0x99
100005a4:	dd0a      	ble.n	100005bc <__aeabi_ui2f+0x44>
100005a6:	0001      	movs	r1, r0
100005a8:	0020      	movs	r0, r4
100005aa:	311b      	adds	r1, #27
100005ac:	4088      	lsls	r0, r1
100005ae:	0001      	movs	r1, r0
100005b0:	1e48      	subs	r0, r1, #1
100005b2:	4181      	sbcs	r1, r0
100005b4:	2005      	movs	r0, #5
100005b6:	1a80      	subs	r0, r0, r2
100005b8:	40c4      	lsrs	r4, r0
100005ba:	430c      	orrs	r4, r1
100005bc:	2a05      	cmp	r2, #5
100005be:	dd01      	ble.n	100005c4 <__aeabi_ui2f+0x4c>
100005c0:	1f51      	subs	r1, r2, #5
100005c2:	408c      	lsls	r4, r1
100005c4:	0021      	movs	r1, r4
100005c6:	4d08      	ldr	r5, [pc, #32]	; (100005e8 <__aeabi_ui2f+0x70>)
100005c8:	4029      	ands	r1, r5
100005ca:	0760      	lsls	r0, r4, #29
100005cc:	d004      	beq.n	100005d8 <__aeabi_ui2f+0x60>
100005ce:	200f      	movs	r0, #15
100005d0:	4004      	ands	r4, r0
100005d2:	2c04      	cmp	r4, #4
100005d4:	d000      	beq.n	100005d8 <__aeabi_ui2f+0x60>
100005d6:	3104      	adds	r1, #4
100005d8:	0148      	lsls	r0, r1, #5
100005da:	d502      	bpl.n	100005e2 <__aeabi_ui2f+0x6a>
100005dc:	239f      	movs	r3, #159	; 0x9f
100005de:	4029      	ands	r1, r5
100005e0:	1a9b      	subs	r3, r3, r2
100005e2:	08cc      	lsrs	r4, r1, #3
100005e4:	e7d8      	b.n	10000598 <__aeabi_ui2f+0x20>
100005e6:	46c0      	nop			; (mov r8, r8)
100005e8:	fbffffff 	.word	0xfbffffff

100005ec <__aeabi_dadd>:
100005ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100005ee:	0006      	movs	r6, r0
100005f0:	001d      	movs	r5, r3
100005f2:	0008      	movs	r0, r1
100005f4:	0011      	movs	r1, r2
100005f6:	0303      	lsls	r3, r0, #12
100005f8:	0fc2      	lsrs	r2, r0, #31
100005fa:	0044      	lsls	r4, r0, #1
100005fc:	006f      	lsls	r7, r5, #1
100005fe:	0328      	lsls	r0, r5, #12
10000600:	0fed      	lsrs	r5, r5, #31
10000602:	46ac      	mov	ip, r5
10000604:	9200      	str	r2, [sp, #0]
10000606:	0f4d      	lsrs	r5, r1, #29
10000608:	0a40      	lsrs	r0, r0, #9
1000060a:	4328      	orrs	r0, r5
1000060c:	9d00      	ldr	r5, [sp, #0]
1000060e:	0f72      	lsrs	r2, r6, #29
10000610:	0d64      	lsrs	r4, r4, #21
10000612:	0a5b      	lsrs	r3, r3, #9
10000614:	0d7f      	lsrs	r7, r7, #21
10000616:	4313      	orrs	r3, r2
10000618:	00c9      	lsls	r1, r1, #3
1000061a:	00f2      	lsls	r2, r6, #3
1000061c:	1be6      	subs	r6, r4, r7
1000061e:	4565      	cmp	r5, ip
10000620:	d000      	beq.n	10000624 <__aeabi_dadd+0x38>
10000622:	e12b      	b.n	1000087c <__aeabi_dadd+0x290>
10000624:	2e00      	cmp	r6, #0
10000626:	dd61      	ble.n	100006ec <__aeabi_dadd+0x100>
10000628:	2f00      	cmp	r7, #0
1000062a:	d114      	bne.n	10000656 <__aeabi_dadd+0x6a>
1000062c:	0005      	movs	r5, r0
1000062e:	430d      	orrs	r5, r1
10000630:	d100      	bne.n	10000634 <__aeabi_dadd+0x48>
10000632:	e294      	b.n	10000b5e <__aeabi_dadd+0x572>
10000634:	1e75      	subs	r5, r6, #1
10000636:	2e01      	cmp	r6, #1
10000638:	d108      	bne.n	1000064c <__aeabi_dadd+0x60>
1000063a:	1851      	adds	r1, r2, r1
1000063c:	4291      	cmp	r1, r2
1000063e:	4192      	sbcs	r2, r2
10000640:	181b      	adds	r3, r3, r0
10000642:	4252      	negs	r2, r2
10000644:	189b      	adds	r3, r3, r2
10000646:	000a      	movs	r2, r1
10000648:	2401      	movs	r4, #1
1000064a:	e027      	b.n	1000069c <__aeabi_dadd+0xb0>
1000064c:	4fb8      	ldr	r7, [pc, #736]	; (10000930 <__aeabi_dadd+0x344>)
1000064e:	42be      	cmp	r6, r7
10000650:	d109      	bne.n	10000666 <__aeabi_dadd+0x7a>
10000652:	4cb7      	ldr	r4, [pc, #732]	; (10000930 <__aeabi_dadd+0x344>)
10000654:	e0b7      	b.n	100007c6 <__aeabi_dadd+0x1da>
10000656:	4db6      	ldr	r5, [pc, #728]	; (10000930 <__aeabi_dadd+0x344>)
10000658:	42ac      	cmp	r4, r5
1000065a:	d100      	bne.n	1000065e <__aeabi_dadd+0x72>
1000065c:	e0b3      	b.n	100007c6 <__aeabi_dadd+0x1da>
1000065e:	2580      	movs	r5, #128	; 0x80
10000660:	042d      	lsls	r5, r5, #16
10000662:	4328      	orrs	r0, r5
10000664:	0035      	movs	r5, r6
10000666:	2d38      	cmp	r5, #56	; 0x38
10000668:	dc3b      	bgt.n	100006e2 <__aeabi_dadd+0xf6>
1000066a:	2d1f      	cmp	r5, #31
1000066c:	dc28      	bgt.n	100006c0 <__aeabi_dadd+0xd4>
1000066e:	2620      	movs	r6, #32
10000670:	0007      	movs	r7, r0
10000672:	1b76      	subs	r6, r6, r5
10000674:	40b7      	lsls	r7, r6
10000676:	46bc      	mov	ip, r7
10000678:	000f      	movs	r7, r1
1000067a:	9601      	str	r6, [sp, #4]
1000067c:	40ef      	lsrs	r7, r5
1000067e:	4666      	mov	r6, ip
10000680:	4337      	orrs	r7, r6
10000682:	9e01      	ldr	r6, [sp, #4]
10000684:	40e8      	lsrs	r0, r5
10000686:	40b1      	lsls	r1, r6
10000688:	1e4e      	subs	r6, r1, #1
1000068a:	41b1      	sbcs	r1, r6
1000068c:	430f      	orrs	r7, r1
1000068e:	18bf      	adds	r7, r7, r2
10000690:	18c0      	adds	r0, r0, r3
10000692:	4297      	cmp	r7, r2
10000694:	419b      	sbcs	r3, r3
10000696:	003a      	movs	r2, r7
10000698:	425b      	negs	r3, r3
1000069a:	18c3      	adds	r3, r0, r3
1000069c:	0219      	lsls	r1, r3, #8
1000069e:	d400      	bmi.n	100006a2 <__aeabi_dadd+0xb6>
100006a0:	e091      	b.n	100007c6 <__aeabi_dadd+0x1da>
100006a2:	49a3      	ldr	r1, [pc, #652]	; (10000930 <__aeabi_dadd+0x344>)
100006a4:	3401      	adds	r4, #1
100006a6:	428c      	cmp	r4, r1
100006a8:	d100      	bne.n	100006ac <__aeabi_dadd+0xc0>
100006aa:	e255      	b.n	10000b58 <__aeabi_dadd+0x56c>
100006ac:	2001      	movs	r0, #1
100006ae:	49a1      	ldr	r1, [pc, #644]	; (10000934 <__aeabi_dadd+0x348>)
100006b0:	400b      	ands	r3, r1
100006b2:	0851      	lsrs	r1, r2, #1
100006b4:	4002      	ands	r2, r0
100006b6:	430a      	orrs	r2, r1
100006b8:	07d9      	lsls	r1, r3, #31
100006ba:	430a      	orrs	r2, r1
100006bc:	40c3      	lsrs	r3, r0
100006be:	e082      	b.n	100007c6 <__aeabi_dadd+0x1da>
100006c0:	002e      	movs	r6, r5
100006c2:	0007      	movs	r7, r0
100006c4:	3e20      	subs	r6, #32
100006c6:	40f7      	lsrs	r7, r6
100006c8:	2600      	movs	r6, #0
100006ca:	2d20      	cmp	r5, #32
100006cc:	d003      	beq.n	100006d6 <__aeabi_dadd+0xea>
100006ce:	3640      	adds	r6, #64	; 0x40
100006d0:	1b75      	subs	r5, r6, r5
100006d2:	40a8      	lsls	r0, r5
100006d4:	0006      	movs	r6, r0
100006d6:	4331      	orrs	r1, r6
100006d8:	1e48      	subs	r0, r1, #1
100006da:	4181      	sbcs	r1, r0
100006dc:	430f      	orrs	r7, r1
100006de:	2000      	movs	r0, #0
100006e0:	e7d5      	b.n	1000068e <__aeabi_dadd+0xa2>
100006e2:	4308      	orrs	r0, r1
100006e4:	0007      	movs	r7, r0
100006e6:	1e79      	subs	r1, r7, #1
100006e8:	418f      	sbcs	r7, r1
100006ea:	e7f8      	b.n	100006de <__aeabi_dadd+0xf2>
100006ec:	2e00      	cmp	r6, #0
100006ee:	d04e      	beq.n	1000078e <__aeabi_dadd+0x1a2>
100006f0:	1b3d      	subs	r5, r7, r4
100006f2:	2c00      	cmp	r4, #0
100006f4:	d113      	bne.n	1000071e <__aeabi_dadd+0x132>
100006f6:	001c      	movs	r4, r3
100006f8:	4314      	orrs	r4, r2
100006fa:	d100      	bne.n	100006fe <__aeabi_dadd+0x112>
100006fc:	e225      	b.n	10000b4a <__aeabi_dadd+0x55e>
100006fe:	1e6c      	subs	r4, r5, #1
10000700:	2d01      	cmp	r5, #1
10000702:	d106      	bne.n	10000712 <__aeabi_dadd+0x126>
10000704:	1852      	adds	r2, r2, r1
10000706:	428a      	cmp	r2, r1
10000708:	4189      	sbcs	r1, r1
1000070a:	181b      	adds	r3, r3, r0
1000070c:	4249      	negs	r1, r1
1000070e:	185b      	adds	r3, r3, r1
10000710:	e79a      	b.n	10000648 <__aeabi_dadd+0x5c>
10000712:	4e87      	ldr	r6, [pc, #540]	; (10000930 <__aeabi_dadd+0x344>)
10000714:	42b5      	cmp	r5, r6
10000716:	d109      	bne.n	1000072c <__aeabi_dadd+0x140>
10000718:	0003      	movs	r3, r0
1000071a:	000a      	movs	r2, r1
1000071c:	e799      	b.n	10000652 <__aeabi_dadd+0x66>
1000071e:	4c84      	ldr	r4, [pc, #528]	; (10000930 <__aeabi_dadd+0x344>)
10000720:	42a7      	cmp	r7, r4
10000722:	d0f9      	beq.n	10000718 <__aeabi_dadd+0x12c>
10000724:	2480      	movs	r4, #128	; 0x80
10000726:	0424      	lsls	r4, r4, #16
10000728:	4323      	orrs	r3, r4
1000072a:	002c      	movs	r4, r5
1000072c:	2c38      	cmp	r4, #56	; 0x38
1000072e:	dc2a      	bgt.n	10000786 <__aeabi_dadd+0x19a>
10000730:	2c1f      	cmp	r4, #31
10000732:	dc17      	bgt.n	10000764 <__aeabi_dadd+0x178>
10000734:	2520      	movs	r5, #32
10000736:	001e      	movs	r6, r3
10000738:	1b2d      	subs	r5, r5, r4
1000073a:	40ae      	lsls	r6, r5
1000073c:	46b4      	mov	ip, r6
1000073e:	0016      	movs	r6, r2
10000740:	9501      	str	r5, [sp, #4]
10000742:	40e6      	lsrs	r6, r4
10000744:	4665      	mov	r5, ip
10000746:	432e      	orrs	r6, r5
10000748:	9d01      	ldr	r5, [sp, #4]
1000074a:	40e3      	lsrs	r3, r4
1000074c:	40aa      	lsls	r2, r5
1000074e:	1e55      	subs	r5, r2, #1
10000750:	41aa      	sbcs	r2, r5
10000752:	4332      	orrs	r2, r6
10000754:	1852      	adds	r2, r2, r1
10000756:	428a      	cmp	r2, r1
10000758:	4189      	sbcs	r1, r1
1000075a:	181b      	adds	r3, r3, r0
1000075c:	4249      	negs	r1, r1
1000075e:	003c      	movs	r4, r7
10000760:	185b      	adds	r3, r3, r1
10000762:	e79b      	b.n	1000069c <__aeabi_dadd+0xb0>
10000764:	0025      	movs	r5, r4
10000766:	001e      	movs	r6, r3
10000768:	3d20      	subs	r5, #32
1000076a:	40ee      	lsrs	r6, r5
1000076c:	2500      	movs	r5, #0
1000076e:	2c20      	cmp	r4, #32
10000770:	d003      	beq.n	1000077a <__aeabi_dadd+0x18e>
10000772:	3540      	adds	r5, #64	; 0x40
10000774:	1b2c      	subs	r4, r5, r4
10000776:	40a3      	lsls	r3, r4
10000778:	001d      	movs	r5, r3
1000077a:	432a      	orrs	r2, r5
1000077c:	1e53      	subs	r3, r2, #1
1000077e:	419a      	sbcs	r2, r3
10000780:	4332      	orrs	r2, r6
10000782:	2300      	movs	r3, #0
10000784:	e7e6      	b.n	10000754 <__aeabi_dadd+0x168>
10000786:	431a      	orrs	r2, r3
10000788:	1e53      	subs	r3, r2, #1
1000078a:	419a      	sbcs	r2, r3
1000078c:	e7f9      	b.n	10000782 <__aeabi_dadd+0x196>
1000078e:	4f6a      	ldr	r7, [pc, #424]	; (10000938 <__aeabi_dadd+0x34c>)
10000790:	1c65      	adds	r5, r4, #1
10000792:	423d      	tst	r5, r7
10000794:	d162      	bne.n	1000085c <__aeabi_dadd+0x270>
10000796:	001d      	movs	r5, r3
10000798:	4315      	orrs	r5, r2
1000079a:	2c00      	cmp	r4, #0
1000079c:	d143      	bne.n	10000826 <__aeabi_dadd+0x23a>
1000079e:	2d00      	cmp	r5, #0
100007a0:	d100      	bne.n	100007a4 <__aeabi_dadd+0x1b8>
100007a2:	e1d5      	b.n	10000b50 <__aeabi_dadd+0x564>
100007a4:	0005      	movs	r5, r0
100007a6:	430d      	orrs	r5, r1
100007a8:	d00d      	beq.n	100007c6 <__aeabi_dadd+0x1da>
100007aa:	1851      	adds	r1, r2, r1
100007ac:	4291      	cmp	r1, r2
100007ae:	4192      	sbcs	r2, r2
100007b0:	181b      	adds	r3, r3, r0
100007b2:	4252      	negs	r2, r2
100007b4:	189b      	adds	r3, r3, r2
100007b6:	000a      	movs	r2, r1
100007b8:	2180      	movs	r1, #128	; 0x80
100007ba:	0409      	lsls	r1, r1, #16
100007bc:	420b      	tst	r3, r1
100007be:	d002      	beq.n	100007c6 <__aeabi_dadd+0x1da>
100007c0:	495c      	ldr	r1, [pc, #368]	; (10000934 <__aeabi_dadd+0x348>)
100007c2:	3401      	adds	r4, #1
100007c4:	400b      	ands	r3, r1
100007c6:	0751      	lsls	r1, r2, #29
100007c8:	d009      	beq.n	100007de <__aeabi_dadd+0x1f2>
100007ca:	210f      	movs	r1, #15
100007cc:	4011      	ands	r1, r2
100007ce:	2904      	cmp	r1, #4
100007d0:	d005      	beq.n	100007de <__aeabi_dadd+0x1f2>
100007d2:	1d11      	adds	r1, r2, #4
100007d4:	4291      	cmp	r1, r2
100007d6:	4192      	sbcs	r2, r2
100007d8:	4252      	negs	r2, r2
100007da:	189b      	adds	r3, r3, r2
100007dc:	000a      	movs	r2, r1
100007de:	0219      	lsls	r1, r3, #8
100007e0:	d506      	bpl.n	100007f0 <__aeabi_dadd+0x204>
100007e2:	4953      	ldr	r1, [pc, #332]	; (10000930 <__aeabi_dadd+0x344>)
100007e4:	3401      	adds	r4, #1
100007e6:	428c      	cmp	r4, r1
100007e8:	d100      	bne.n	100007ec <__aeabi_dadd+0x200>
100007ea:	e1c6      	b.n	10000b7a <__aeabi_dadd+0x58e>
100007ec:	4951      	ldr	r1, [pc, #324]	; (10000934 <__aeabi_dadd+0x348>)
100007ee:	400b      	ands	r3, r1
100007f0:	0759      	lsls	r1, r3, #29
100007f2:	08d2      	lsrs	r2, r2, #3
100007f4:	430a      	orrs	r2, r1
100007f6:	494e      	ldr	r1, [pc, #312]	; (10000930 <__aeabi_dadd+0x344>)
100007f8:	08db      	lsrs	r3, r3, #3
100007fa:	428c      	cmp	r4, r1
100007fc:	d106      	bne.n	1000080c <__aeabi_dadd+0x220>
100007fe:	0011      	movs	r1, r2
10000800:	4319      	orrs	r1, r3
10000802:	d100      	bne.n	10000806 <__aeabi_dadd+0x21a>
10000804:	e1bc      	b.n	10000b80 <__aeabi_dadd+0x594>
10000806:	2180      	movs	r1, #128	; 0x80
10000808:	0309      	lsls	r1, r1, #12
1000080a:	430b      	orrs	r3, r1
1000080c:	0010      	movs	r0, r2
1000080e:	4a4b      	ldr	r2, [pc, #300]	; (1000093c <__aeabi_dadd+0x350>)
10000810:	0524      	lsls	r4, r4, #20
10000812:	031b      	lsls	r3, r3, #12
10000814:	4014      	ands	r4, r2
10000816:	0b1b      	lsrs	r3, r3, #12
10000818:	431c      	orrs	r4, r3
1000081a:	9b00      	ldr	r3, [sp, #0]
1000081c:	07db      	lsls	r3, r3, #31
1000081e:	431c      	orrs	r4, r3
10000820:	0021      	movs	r1, r4
10000822:	b003      	add	sp, #12
10000824:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000826:	2d00      	cmp	r5, #0
10000828:	d100      	bne.n	1000082c <__aeabi_dadd+0x240>
1000082a:	e775      	b.n	10000718 <__aeabi_dadd+0x12c>
1000082c:	0005      	movs	r5, r0
1000082e:	4c40      	ldr	r4, [pc, #256]	; (10000930 <__aeabi_dadd+0x344>)
10000830:	430d      	orrs	r5, r1
10000832:	d0c8      	beq.n	100007c6 <__aeabi_dadd+0x1da>
10000834:	075c      	lsls	r4, r3, #29
10000836:	08d2      	lsrs	r2, r2, #3
10000838:	4322      	orrs	r2, r4
1000083a:	2480      	movs	r4, #128	; 0x80
1000083c:	08db      	lsrs	r3, r3, #3
1000083e:	0324      	lsls	r4, r4, #12
10000840:	4223      	tst	r3, r4
10000842:	d006      	beq.n	10000852 <__aeabi_dadd+0x266>
10000844:	08c5      	lsrs	r5, r0, #3
10000846:	4225      	tst	r5, r4
10000848:	d103      	bne.n	10000852 <__aeabi_dadd+0x266>
1000084a:	002b      	movs	r3, r5
1000084c:	08ca      	lsrs	r2, r1, #3
1000084e:	0740      	lsls	r0, r0, #29
10000850:	4302      	orrs	r2, r0
10000852:	0f51      	lsrs	r1, r2, #29
10000854:	00db      	lsls	r3, r3, #3
10000856:	430b      	orrs	r3, r1
10000858:	00d2      	lsls	r2, r2, #3
1000085a:	e6fa      	b.n	10000652 <__aeabi_dadd+0x66>
1000085c:	4c34      	ldr	r4, [pc, #208]	; (10000930 <__aeabi_dadd+0x344>)
1000085e:	42a5      	cmp	r5, r4
10000860:	d100      	bne.n	10000864 <__aeabi_dadd+0x278>
10000862:	e178      	b.n	10000b56 <__aeabi_dadd+0x56a>
10000864:	1851      	adds	r1, r2, r1
10000866:	4291      	cmp	r1, r2
10000868:	4192      	sbcs	r2, r2
1000086a:	181b      	adds	r3, r3, r0
1000086c:	4252      	negs	r2, r2
1000086e:	189b      	adds	r3, r3, r2
10000870:	07da      	lsls	r2, r3, #31
10000872:	0849      	lsrs	r1, r1, #1
10000874:	430a      	orrs	r2, r1
10000876:	085b      	lsrs	r3, r3, #1
10000878:	002c      	movs	r4, r5
1000087a:	e7a4      	b.n	100007c6 <__aeabi_dadd+0x1da>
1000087c:	2e00      	cmp	r6, #0
1000087e:	dd5f      	ble.n	10000940 <__aeabi_dadd+0x354>
10000880:	2f00      	cmp	r7, #0
10000882:	d135      	bne.n	100008f0 <__aeabi_dadd+0x304>
10000884:	0005      	movs	r5, r0
10000886:	430d      	orrs	r5, r1
10000888:	d100      	bne.n	1000088c <__aeabi_dadd+0x2a0>
1000088a:	e168      	b.n	10000b5e <__aeabi_dadd+0x572>
1000088c:	1e75      	subs	r5, r6, #1
1000088e:	2e01      	cmp	r6, #1
10000890:	d108      	bne.n	100008a4 <__aeabi_dadd+0x2b8>
10000892:	1a51      	subs	r1, r2, r1
10000894:	428a      	cmp	r2, r1
10000896:	4192      	sbcs	r2, r2
10000898:	1a1b      	subs	r3, r3, r0
1000089a:	4252      	negs	r2, r2
1000089c:	1a9b      	subs	r3, r3, r2
1000089e:	000a      	movs	r2, r1
100008a0:	2401      	movs	r4, #1
100008a2:	e01e      	b.n	100008e2 <__aeabi_dadd+0x2f6>
100008a4:	4f22      	ldr	r7, [pc, #136]	; (10000930 <__aeabi_dadd+0x344>)
100008a6:	42be      	cmp	r6, r7
100008a8:	d100      	bne.n	100008ac <__aeabi_dadd+0x2c0>
100008aa:	e6d2      	b.n	10000652 <__aeabi_dadd+0x66>
100008ac:	2d38      	cmp	r5, #56	; 0x38
100008ae:	dc39      	bgt.n	10000924 <__aeabi_dadd+0x338>
100008b0:	2d1f      	cmp	r5, #31
100008b2:	dc26      	bgt.n	10000902 <__aeabi_dadd+0x316>
100008b4:	2620      	movs	r6, #32
100008b6:	0007      	movs	r7, r0
100008b8:	1b76      	subs	r6, r6, r5
100008ba:	40b7      	lsls	r7, r6
100008bc:	46bc      	mov	ip, r7
100008be:	000f      	movs	r7, r1
100008c0:	9601      	str	r6, [sp, #4]
100008c2:	40ef      	lsrs	r7, r5
100008c4:	4666      	mov	r6, ip
100008c6:	4337      	orrs	r7, r6
100008c8:	9e01      	ldr	r6, [sp, #4]
100008ca:	40e8      	lsrs	r0, r5
100008cc:	40b1      	lsls	r1, r6
100008ce:	1e4e      	subs	r6, r1, #1
100008d0:	41b1      	sbcs	r1, r6
100008d2:	430f      	orrs	r7, r1
100008d4:	1bd7      	subs	r7, r2, r7
100008d6:	1a18      	subs	r0, r3, r0
100008d8:	42ba      	cmp	r2, r7
100008da:	419b      	sbcs	r3, r3
100008dc:	003a      	movs	r2, r7
100008de:	425b      	negs	r3, r3
100008e0:	1ac3      	subs	r3, r0, r3
100008e2:	0219      	lsls	r1, r3, #8
100008e4:	d400      	bmi.n	100008e8 <__aeabi_dadd+0x2fc>
100008e6:	e76e      	b.n	100007c6 <__aeabi_dadd+0x1da>
100008e8:	025b      	lsls	r3, r3, #9
100008ea:	0016      	movs	r6, r2
100008ec:	0a5d      	lsrs	r5, r3, #9
100008ee:	e0e2      	b.n	10000ab6 <__aeabi_dadd+0x4ca>
100008f0:	4d0f      	ldr	r5, [pc, #60]	; (10000930 <__aeabi_dadd+0x344>)
100008f2:	42ac      	cmp	r4, r5
100008f4:	d100      	bne.n	100008f8 <__aeabi_dadd+0x30c>
100008f6:	e766      	b.n	100007c6 <__aeabi_dadd+0x1da>
100008f8:	2580      	movs	r5, #128	; 0x80
100008fa:	042d      	lsls	r5, r5, #16
100008fc:	4328      	orrs	r0, r5
100008fe:	0035      	movs	r5, r6
10000900:	e7d4      	b.n	100008ac <__aeabi_dadd+0x2c0>
10000902:	002e      	movs	r6, r5
10000904:	0007      	movs	r7, r0
10000906:	3e20      	subs	r6, #32
10000908:	40f7      	lsrs	r7, r6
1000090a:	2600      	movs	r6, #0
1000090c:	2d20      	cmp	r5, #32
1000090e:	d003      	beq.n	10000918 <__aeabi_dadd+0x32c>
10000910:	3640      	adds	r6, #64	; 0x40
10000912:	1b75      	subs	r5, r6, r5
10000914:	40a8      	lsls	r0, r5
10000916:	0006      	movs	r6, r0
10000918:	4331      	orrs	r1, r6
1000091a:	1e48      	subs	r0, r1, #1
1000091c:	4181      	sbcs	r1, r0
1000091e:	430f      	orrs	r7, r1
10000920:	2000      	movs	r0, #0
10000922:	e7d7      	b.n	100008d4 <__aeabi_dadd+0x2e8>
10000924:	4308      	orrs	r0, r1
10000926:	0007      	movs	r7, r0
10000928:	1e79      	subs	r1, r7, #1
1000092a:	418f      	sbcs	r7, r1
1000092c:	e7f8      	b.n	10000920 <__aeabi_dadd+0x334>
1000092e:	46c0      	nop			; (mov r8, r8)
10000930:	000007ff 	.word	0x000007ff
10000934:	ff7fffff 	.word	0xff7fffff
10000938:	000007fe 	.word	0x000007fe
1000093c:	7ff00000 	.word	0x7ff00000
10000940:	2e00      	cmp	r6, #0
10000942:	d052      	beq.n	100009ea <__aeabi_dadd+0x3fe>
10000944:	1b3d      	subs	r5, r7, r4
10000946:	2c00      	cmp	r4, #0
10000948:	d116      	bne.n	10000978 <__aeabi_dadd+0x38c>
1000094a:	001c      	movs	r4, r3
1000094c:	4314      	orrs	r4, r2
1000094e:	d100      	bne.n	10000952 <__aeabi_dadd+0x366>
10000950:	e107      	b.n	10000b62 <__aeabi_dadd+0x576>
10000952:	1e6c      	subs	r4, r5, #1
10000954:	2d01      	cmp	r5, #1
10000956:	d108      	bne.n	1000096a <__aeabi_dadd+0x37e>
10000958:	1a8a      	subs	r2, r1, r2
1000095a:	4291      	cmp	r1, r2
1000095c:	4189      	sbcs	r1, r1
1000095e:	1ac3      	subs	r3, r0, r3
10000960:	4249      	negs	r1, r1
10000962:	1a5b      	subs	r3, r3, r1
10000964:	4661      	mov	r1, ip
10000966:	9100      	str	r1, [sp, #0]
10000968:	e79a      	b.n	100008a0 <__aeabi_dadd+0x2b4>
1000096a:	4e86      	ldr	r6, [pc, #536]	; (10000b84 <__aeabi_dadd+0x598>)
1000096c:	42b5      	cmp	r5, r6
1000096e:	d10a      	bne.n	10000986 <__aeabi_dadd+0x39a>
10000970:	0003      	movs	r3, r0
10000972:	000a      	movs	r2, r1
10000974:	4c83      	ldr	r4, [pc, #524]	; (10000b84 <__aeabi_dadd+0x598>)
10000976:	e04c      	b.n	10000a12 <__aeabi_dadd+0x426>
10000978:	4c82      	ldr	r4, [pc, #520]	; (10000b84 <__aeabi_dadd+0x598>)
1000097a:	42a7      	cmp	r7, r4
1000097c:	d0f8      	beq.n	10000970 <__aeabi_dadd+0x384>
1000097e:	2480      	movs	r4, #128	; 0x80
10000980:	0424      	lsls	r4, r4, #16
10000982:	4323      	orrs	r3, r4
10000984:	002c      	movs	r4, r5
10000986:	2c38      	cmp	r4, #56	; 0x38
10000988:	dc2b      	bgt.n	100009e2 <__aeabi_dadd+0x3f6>
1000098a:	2c1f      	cmp	r4, #31
1000098c:	dc18      	bgt.n	100009c0 <__aeabi_dadd+0x3d4>
1000098e:	2520      	movs	r5, #32
10000990:	001e      	movs	r6, r3
10000992:	1b2d      	subs	r5, r5, r4
10000994:	40ae      	lsls	r6, r5
10000996:	9500      	str	r5, [sp, #0]
10000998:	0035      	movs	r5, r6
1000099a:	0016      	movs	r6, r2
1000099c:	40e6      	lsrs	r6, r4
1000099e:	432e      	orrs	r6, r5
100009a0:	9d00      	ldr	r5, [sp, #0]
100009a2:	40e3      	lsrs	r3, r4
100009a4:	40aa      	lsls	r2, r5
100009a6:	1e55      	subs	r5, r2, #1
100009a8:	41aa      	sbcs	r2, r5
100009aa:	4332      	orrs	r2, r6
100009ac:	1a8a      	subs	r2, r1, r2
100009ae:	4291      	cmp	r1, r2
100009b0:	4189      	sbcs	r1, r1
100009b2:	1ac3      	subs	r3, r0, r3
100009b4:	4249      	negs	r1, r1
100009b6:	1a5b      	subs	r3, r3, r1
100009b8:	4661      	mov	r1, ip
100009ba:	003c      	movs	r4, r7
100009bc:	9100      	str	r1, [sp, #0]
100009be:	e790      	b.n	100008e2 <__aeabi_dadd+0x2f6>
100009c0:	0025      	movs	r5, r4
100009c2:	001e      	movs	r6, r3
100009c4:	3d20      	subs	r5, #32
100009c6:	40ee      	lsrs	r6, r5
100009c8:	2500      	movs	r5, #0
100009ca:	2c20      	cmp	r4, #32
100009cc:	d003      	beq.n	100009d6 <__aeabi_dadd+0x3ea>
100009ce:	3540      	adds	r5, #64	; 0x40
100009d0:	1b2c      	subs	r4, r5, r4
100009d2:	40a3      	lsls	r3, r4
100009d4:	001d      	movs	r5, r3
100009d6:	432a      	orrs	r2, r5
100009d8:	1e53      	subs	r3, r2, #1
100009da:	419a      	sbcs	r2, r3
100009dc:	4332      	orrs	r2, r6
100009de:	2300      	movs	r3, #0
100009e0:	e7e4      	b.n	100009ac <__aeabi_dadd+0x3c0>
100009e2:	431a      	orrs	r2, r3
100009e4:	1e53      	subs	r3, r2, #1
100009e6:	419a      	sbcs	r2, r3
100009e8:	e7f9      	b.n	100009de <__aeabi_dadd+0x3f2>
100009ea:	4e67      	ldr	r6, [pc, #412]	; (10000b88 <__aeabi_dadd+0x59c>)
100009ec:	1c65      	adds	r5, r4, #1
100009ee:	4235      	tst	r5, r6
100009f0:	d14f      	bne.n	10000a92 <__aeabi_dadd+0x4a6>
100009f2:	001e      	movs	r6, r3
100009f4:	0005      	movs	r5, r0
100009f6:	4316      	orrs	r6, r2
100009f8:	430d      	orrs	r5, r1
100009fa:	2c00      	cmp	r4, #0
100009fc:	d127      	bne.n	10000a4e <__aeabi_dadd+0x462>
100009fe:	2e00      	cmp	r6, #0
10000a00:	d10a      	bne.n	10000a18 <__aeabi_dadd+0x42c>
10000a02:	0023      	movs	r3, r4
10000a04:	0022      	movs	r2, r4
10000a06:	9400      	str	r4, [sp, #0]
10000a08:	2d00      	cmp	r5, #0
10000a0a:	d100      	bne.n	10000a0e <__aeabi_dadd+0x422>
10000a0c:	e6db      	b.n	100007c6 <__aeabi_dadd+0x1da>
10000a0e:	0003      	movs	r3, r0
10000a10:	000a      	movs	r2, r1
10000a12:	4661      	mov	r1, ip
10000a14:	9100      	str	r1, [sp, #0]
10000a16:	e6d6      	b.n	100007c6 <__aeabi_dadd+0x1da>
10000a18:	2d00      	cmp	r5, #0
10000a1a:	d100      	bne.n	10000a1e <__aeabi_dadd+0x432>
10000a1c:	e6d3      	b.n	100007c6 <__aeabi_dadd+0x1da>
10000a1e:	1a56      	subs	r6, r2, r1
10000a20:	42b2      	cmp	r2, r6
10000a22:	41bf      	sbcs	r7, r7
10000a24:	1a1d      	subs	r5, r3, r0
10000a26:	427f      	negs	r7, r7
10000a28:	1bed      	subs	r5, r5, r7
10000a2a:	2780      	movs	r7, #128	; 0x80
10000a2c:	043f      	lsls	r7, r7, #16
10000a2e:	423d      	tst	r5, r7
10000a30:	d006      	beq.n	10000a40 <__aeabi_dadd+0x454>
10000a32:	1a8a      	subs	r2, r1, r2
10000a34:	4291      	cmp	r1, r2
10000a36:	4189      	sbcs	r1, r1
10000a38:	1ac3      	subs	r3, r0, r3
10000a3a:	4249      	negs	r1, r1
10000a3c:	1a5b      	subs	r3, r3, r1
10000a3e:	e7e8      	b.n	10000a12 <__aeabi_dadd+0x426>
10000a40:	0032      	movs	r2, r6
10000a42:	432a      	orrs	r2, r5
10000a44:	d100      	bne.n	10000a48 <__aeabi_dadd+0x45c>
10000a46:	e090      	b.n	10000b6a <__aeabi_dadd+0x57e>
10000a48:	002b      	movs	r3, r5
10000a4a:	0032      	movs	r2, r6
10000a4c:	e6bb      	b.n	100007c6 <__aeabi_dadd+0x1da>
10000a4e:	2e00      	cmp	r6, #0
10000a50:	d107      	bne.n	10000a62 <__aeabi_dadd+0x476>
10000a52:	2d00      	cmp	r5, #0
10000a54:	d100      	bne.n	10000a58 <__aeabi_dadd+0x46c>
10000a56:	e08b      	b.n	10000b70 <__aeabi_dadd+0x584>
10000a58:	000a      	movs	r2, r1
10000a5a:	4661      	mov	r1, ip
10000a5c:	0003      	movs	r3, r0
10000a5e:	9100      	str	r1, [sp, #0]
10000a60:	e5f7      	b.n	10000652 <__aeabi_dadd+0x66>
10000a62:	4c48      	ldr	r4, [pc, #288]	; (10000b84 <__aeabi_dadd+0x598>)
10000a64:	2d00      	cmp	r5, #0
10000a66:	d100      	bne.n	10000a6a <__aeabi_dadd+0x47e>
10000a68:	e6ad      	b.n	100007c6 <__aeabi_dadd+0x1da>
10000a6a:	075c      	lsls	r4, r3, #29
10000a6c:	08d2      	lsrs	r2, r2, #3
10000a6e:	4322      	orrs	r2, r4
10000a70:	2480      	movs	r4, #128	; 0x80
10000a72:	08db      	lsrs	r3, r3, #3
10000a74:	0324      	lsls	r4, r4, #12
10000a76:	4223      	tst	r3, r4
10000a78:	d100      	bne.n	10000a7c <__aeabi_dadd+0x490>
10000a7a:	e6ea      	b.n	10000852 <__aeabi_dadd+0x266>
10000a7c:	08c5      	lsrs	r5, r0, #3
10000a7e:	4225      	tst	r5, r4
10000a80:	d000      	beq.n	10000a84 <__aeabi_dadd+0x498>
10000a82:	e6e6      	b.n	10000852 <__aeabi_dadd+0x266>
10000a84:	08ca      	lsrs	r2, r1, #3
10000a86:	4661      	mov	r1, ip
10000a88:	0740      	lsls	r0, r0, #29
10000a8a:	002b      	movs	r3, r5
10000a8c:	4302      	orrs	r2, r0
10000a8e:	9100      	str	r1, [sp, #0]
10000a90:	e6df      	b.n	10000852 <__aeabi_dadd+0x266>
10000a92:	1a56      	subs	r6, r2, r1
10000a94:	42b2      	cmp	r2, r6
10000a96:	41bf      	sbcs	r7, r7
10000a98:	1a1d      	subs	r5, r3, r0
10000a9a:	427f      	negs	r7, r7
10000a9c:	1bed      	subs	r5, r5, r7
10000a9e:	2780      	movs	r7, #128	; 0x80
10000aa0:	043f      	lsls	r7, r7, #16
10000aa2:	423d      	tst	r5, r7
10000aa4:	d02d      	beq.n	10000b02 <__aeabi_dadd+0x516>
10000aa6:	1a8e      	subs	r6, r1, r2
10000aa8:	42b1      	cmp	r1, r6
10000aaa:	41ad      	sbcs	r5, r5
10000aac:	1ac3      	subs	r3, r0, r3
10000aae:	426d      	negs	r5, r5
10000ab0:	1b5d      	subs	r5, r3, r5
10000ab2:	4663      	mov	r3, ip
10000ab4:	9300      	str	r3, [sp, #0]
10000ab6:	2d00      	cmp	r5, #0
10000ab8:	d029      	beq.n	10000b0e <__aeabi_dadd+0x522>
10000aba:	0028      	movs	r0, r5
10000abc:	f7ff fc18 	bl	100002f0 <__clzsi2>
10000ac0:	0001      	movs	r1, r0
10000ac2:	3908      	subs	r1, #8
10000ac4:	291f      	cmp	r1, #31
10000ac6:	dc27      	bgt.n	10000b18 <__aeabi_dadd+0x52c>
10000ac8:	2320      	movs	r3, #32
10000aca:	0032      	movs	r2, r6
10000acc:	1a5b      	subs	r3, r3, r1
10000ace:	40da      	lsrs	r2, r3
10000ad0:	408d      	lsls	r5, r1
10000ad2:	4315      	orrs	r5, r2
10000ad4:	0032      	movs	r2, r6
10000ad6:	408a      	lsls	r2, r1
10000ad8:	428c      	cmp	r4, r1
10000ada:	dc32      	bgt.n	10000b42 <__aeabi_dadd+0x556>
10000adc:	1b09      	subs	r1, r1, r4
10000ade:	1c4b      	adds	r3, r1, #1
10000ae0:	2b1f      	cmp	r3, #31
10000ae2:	dc1e      	bgt.n	10000b22 <__aeabi_dadd+0x536>
10000ae4:	2120      	movs	r1, #32
10000ae6:	002c      	movs	r4, r5
10000ae8:	1ac9      	subs	r1, r1, r3
10000aea:	0010      	movs	r0, r2
10000aec:	408a      	lsls	r2, r1
10000aee:	40dd      	lsrs	r5, r3
10000af0:	408c      	lsls	r4, r1
10000af2:	40d8      	lsrs	r0, r3
10000af4:	1e51      	subs	r1, r2, #1
10000af6:	418a      	sbcs	r2, r1
10000af8:	002b      	movs	r3, r5
10000afa:	4320      	orrs	r0, r4
10000afc:	4302      	orrs	r2, r0
10000afe:	2400      	movs	r4, #0
10000b00:	e661      	b.n	100007c6 <__aeabi_dadd+0x1da>
10000b02:	0032      	movs	r2, r6
10000b04:	432a      	orrs	r2, r5
10000b06:	d1d6      	bne.n	10000ab6 <__aeabi_dadd+0x4ca>
10000b08:	0013      	movs	r3, r2
10000b0a:	0014      	movs	r4, r2
10000b0c:	e02e      	b.n	10000b6c <__aeabi_dadd+0x580>
10000b0e:	0030      	movs	r0, r6
10000b10:	f7ff fbee 	bl	100002f0 <__clzsi2>
10000b14:	3020      	adds	r0, #32
10000b16:	e7d3      	b.n	10000ac0 <__aeabi_dadd+0x4d4>
10000b18:	0035      	movs	r5, r6
10000b1a:	3828      	subs	r0, #40	; 0x28
10000b1c:	4085      	lsls	r5, r0
10000b1e:	2200      	movs	r2, #0
10000b20:	e7da      	b.n	10000ad8 <__aeabi_dadd+0x4ec>
10000b22:	0028      	movs	r0, r5
10000b24:	391f      	subs	r1, #31
10000b26:	40c8      	lsrs	r0, r1
10000b28:	2100      	movs	r1, #0
10000b2a:	2b20      	cmp	r3, #32
10000b2c:	d003      	beq.n	10000b36 <__aeabi_dadd+0x54a>
10000b2e:	3140      	adds	r1, #64	; 0x40
10000b30:	1acb      	subs	r3, r1, r3
10000b32:	0029      	movs	r1, r5
10000b34:	4099      	lsls	r1, r3
10000b36:	430a      	orrs	r2, r1
10000b38:	1e53      	subs	r3, r2, #1
10000b3a:	419a      	sbcs	r2, r3
10000b3c:	2300      	movs	r3, #0
10000b3e:	4302      	orrs	r2, r0
10000b40:	e7dd      	b.n	10000afe <__aeabi_dadd+0x512>
10000b42:	4b12      	ldr	r3, [pc, #72]	; (10000b8c <__aeabi_dadd+0x5a0>)
10000b44:	1a64      	subs	r4, r4, r1
10000b46:	402b      	ands	r3, r5
10000b48:	e63d      	b.n	100007c6 <__aeabi_dadd+0x1da>
10000b4a:	0003      	movs	r3, r0
10000b4c:	000a      	movs	r2, r1
10000b4e:	e693      	b.n	10000878 <__aeabi_dadd+0x28c>
10000b50:	0003      	movs	r3, r0
10000b52:	000a      	movs	r2, r1
10000b54:	e637      	b.n	100007c6 <__aeabi_dadd+0x1da>
10000b56:	4c0b      	ldr	r4, [pc, #44]	; (10000b84 <__aeabi_dadd+0x598>)
10000b58:	2300      	movs	r3, #0
10000b5a:	001a      	movs	r2, r3
10000b5c:	e633      	b.n	100007c6 <__aeabi_dadd+0x1da>
10000b5e:	0034      	movs	r4, r6
10000b60:	e631      	b.n	100007c6 <__aeabi_dadd+0x1da>
10000b62:	0003      	movs	r3, r0
10000b64:	000a      	movs	r2, r1
10000b66:	002c      	movs	r4, r5
10000b68:	e753      	b.n	10000a12 <__aeabi_dadd+0x426>
10000b6a:	0013      	movs	r3, r2
10000b6c:	9200      	str	r2, [sp, #0]
10000b6e:	e62a      	b.n	100007c6 <__aeabi_dadd+0x1da>
10000b70:	2380      	movs	r3, #128	; 0x80
10000b72:	002a      	movs	r2, r5
10000b74:	9500      	str	r5, [sp, #0]
10000b76:	03db      	lsls	r3, r3, #15
10000b78:	e56b      	b.n	10000652 <__aeabi_dadd+0x66>
10000b7a:	2300      	movs	r3, #0
10000b7c:	001a      	movs	r2, r3
10000b7e:	e637      	b.n	100007f0 <__aeabi_dadd+0x204>
10000b80:	000b      	movs	r3, r1
10000b82:	e643      	b.n	1000080c <__aeabi_dadd+0x220>
10000b84:	000007ff 	.word	0x000007ff
10000b88:	000007fe 	.word	0x000007fe
10000b8c:	ff7fffff 	.word	0xff7fffff

10000b90 <__eqdf2>:
10000b90:	b5f0      	push	{r4, r5, r6, r7, lr}
10000b92:	0006      	movs	r6, r0
10000b94:	0008      	movs	r0, r1
10000b96:	0019      	movs	r1, r3
10000b98:	0017      	movs	r7, r2
10000b9a:	b085      	sub	sp, #20
10000b9c:	0fc2      	lsrs	r2, r0, #31
10000b9e:	0304      	lsls	r4, r0, #12
10000ba0:	0043      	lsls	r3, r0, #1
10000ba2:	4817      	ldr	r0, [pc, #92]	; (10000c00 <__eqdf2+0x70>)
10000ba4:	030d      	lsls	r5, r1, #12
10000ba6:	9201      	str	r2, [sp, #4]
10000ba8:	004a      	lsls	r2, r1, #1
10000baa:	0fc9      	lsrs	r1, r1, #31
10000bac:	0b24      	lsrs	r4, r4, #12
10000bae:	0d5b      	lsrs	r3, r3, #21
10000bb0:	9703      	str	r7, [sp, #12]
10000bb2:	0b2d      	lsrs	r5, r5, #12
10000bb4:	0d52      	lsrs	r2, r2, #21
10000bb6:	9102      	str	r1, [sp, #8]
10000bb8:	4283      	cmp	r3, r0
10000bba:	d106      	bne.n	10000bca <__eqdf2+0x3a>
10000bbc:	0021      	movs	r1, r4
10000bbe:	2001      	movs	r0, #1
10000bc0:	4331      	orrs	r1, r6
10000bc2:	d119      	bne.n	10000bf8 <__eqdf2+0x68>
10000bc4:	429a      	cmp	r2, r3
10000bc6:	d117      	bne.n	10000bf8 <__eqdf2+0x68>
10000bc8:	e001      	b.n	10000bce <__eqdf2+0x3e>
10000bca:	4282      	cmp	r2, r0
10000bcc:	d102      	bne.n	10000bd4 <__eqdf2+0x44>
10000bce:	2001      	movs	r0, #1
10000bd0:	432f      	orrs	r7, r5
10000bd2:	d111      	bne.n	10000bf8 <__eqdf2+0x68>
10000bd4:	2001      	movs	r0, #1
10000bd6:	4293      	cmp	r3, r2
10000bd8:	d10e      	bne.n	10000bf8 <__eqdf2+0x68>
10000bda:	42ac      	cmp	r4, r5
10000bdc:	d10c      	bne.n	10000bf8 <__eqdf2+0x68>
10000bde:	9903      	ldr	r1, [sp, #12]
10000be0:	428e      	cmp	r6, r1
10000be2:	d109      	bne.n	10000bf8 <__eqdf2+0x68>
10000be4:	9a01      	ldr	r2, [sp, #4]
10000be6:	9902      	ldr	r1, [sp, #8]
10000be8:	428a      	cmp	r2, r1
10000bea:	d007      	beq.n	10000bfc <__eqdf2+0x6c>
10000bec:	2b00      	cmp	r3, #0
10000bee:	d103      	bne.n	10000bf8 <__eqdf2+0x68>
10000bf0:	0020      	movs	r0, r4
10000bf2:	4330      	orrs	r0, r6
10000bf4:	1e43      	subs	r3, r0, #1
10000bf6:	4198      	sbcs	r0, r3
10000bf8:	b005      	add	sp, #20
10000bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000bfc:	2000      	movs	r0, #0
10000bfe:	e7fb      	b.n	10000bf8 <__eqdf2+0x68>
10000c00:	000007ff 	.word	0x000007ff

10000c04 <__gedf2>:
10000c04:	b5f0      	push	{r4, r5, r6, r7, lr}
10000c06:	001e      	movs	r6, r3
10000c08:	000d      	movs	r5, r1
10000c0a:	0017      	movs	r7, r2
10000c0c:	b085      	sub	sp, #20
10000c0e:	0ff6      	lsrs	r6, r6, #31
10000c10:	9601      	str	r6, [sp, #4]
10000c12:	4e29      	ldr	r6, [pc, #164]	; (10000cb8 <__gedf2+0xb4>)
10000c14:	032a      	lsls	r2, r5, #12
10000c16:	006c      	lsls	r4, r5, #1
10000c18:	0001      	movs	r1, r0
10000c1a:	9002      	str	r0, [sp, #8]
10000c1c:	0fe8      	lsrs	r0, r5, #31
10000c1e:	031d      	lsls	r5, r3, #12
10000c20:	005b      	lsls	r3, r3, #1
10000c22:	0b12      	lsrs	r2, r2, #12
10000c24:	0d64      	lsrs	r4, r4, #21
10000c26:	9703      	str	r7, [sp, #12]
10000c28:	0b2d      	lsrs	r5, r5, #12
10000c2a:	0d5b      	lsrs	r3, r3, #21
10000c2c:	42b4      	cmp	r4, r6
10000c2e:	d105      	bne.n	10000c3c <__gedf2+0x38>
10000c30:	0016      	movs	r6, r2
10000c32:	430e      	orrs	r6, r1
10000c34:	d03a      	beq.n	10000cac <__gedf2+0xa8>
10000c36:	2002      	movs	r0, #2
10000c38:	4240      	negs	r0, r0
10000c3a:	e022      	b.n	10000c82 <__gedf2+0x7e>
10000c3c:	42b3      	cmp	r3, r6
10000c3e:	d102      	bne.n	10000c46 <__gedf2+0x42>
10000c40:	002e      	movs	r6, r5
10000c42:	433e      	orrs	r6, r7
10000c44:	d1f7      	bne.n	10000c36 <__gedf2+0x32>
10000c46:	2c00      	cmp	r4, #0
10000c48:	d132      	bne.n	10000cb0 <__gedf2+0xac>
10000c4a:	4311      	orrs	r1, r2
10000c4c:	000e      	movs	r6, r1
10000c4e:	4271      	negs	r1, r6
10000c50:	4171      	adcs	r1, r6
10000c52:	2b00      	cmp	r3, #0
10000c54:	d101      	bne.n	10000c5a <__gedf2+0x56>
10000c56:	432f      	orrs	r7, r5
10000c58:	d022      	beq.n	10000ca0 <__gedf2+0x9c>
10000c5a:	2900      	cmp	r1, #0
10000c5c:	d108      	bne.n	10000c70 <__gedf2+0x6c>
10000c5e:	9901      	ldr	r1, [sp, #4]
10000c60:	4288      	cmp	r0, r1
10000c62:	d101      	bne.n	10000c68 <__gedf2+0x64>
10000c64:	429c      	cmp	r4, r3
10000c66:	dd08      	ble.n	10000c7a <__gedf2+0x76>
10000c68:	2800      	cmp	r0, #0
10000c6a:	d104      	bne.n	10000c76 <__gedf2+0x72>
10000c6c:	2001      	movs	r0, #1
10000c6e:	e008      	b.n	10000c82 <__gedf2+0x7e>
10000c70:	9b01      	ldr	r3, [sp, #4]
10000c72:	1e18      	subs	r0, r3, #0
10000c74:	d105      	bne.n	10000c82 <__gedf2+0x7e>
10000c76:	2001      	movs	r0, #1
10000c78:	e7de      	b.n	10000c38 <__gedf2+0x34>
10000c7a:	429c      	cmp	r4, r3
10000c7c:	da03      	bge.n	10000c86 <__gedf2+0x82>
10000c7e:	2800      	cmp	r0, #0
10000c80:	d0f9      	beq.n	10000c76 <__gedf2+0x72>
10000c82:	b005      	add	sp, #20
10000c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000c86:	42aa      	cmp	r2, r5
10000c88:	d8ee      	bhi.n	10000c68 <__gedf2+0x64>
10000c8a:	d10c      	bne.n	10000ca6 <__gedf2+0xa2>
10000c8c:	9b02      	ldr	r3, [sp, #8]
10000c8e:	9a03      	ldr	r2, [sp, #12]
10000c90:	4293      	cmp	r3, r2
10000c92:	d8e9      	bhi.n	10000c68 <__gedf2+0x64>
10000c94:	9b02      	ldr	r3, [sp, #8]
10000c96:	9a03      	ldr	r2, [sp, #12]
10000c98:	4293      	cmp	r3, r2
10000c9a:	d3f0      	bcc.n	10000c7e <__gedf2+0x7a>
10000c9c:	2000      	movs	r0, #0
10000c9e:	e7f0      	b.n	10000c82 <__gedf2+0x7e>
10000ca0:	2900      	cmp	r1, #0
10000ca2:	d1fb      	bne.n	10000c9c <__gedf2+0x98>
10000ca4:	e7e0      	b.n	10000c68 <__gedf2+0x64>
10000ca6:	42aa      	cmp	r2, r5
10000ca8:	d3e9      	bcc.n	10000c7e <__gedf2+0x7a>
10000caa:	e7f7      	b.n	10000c9c <__gedf2+0x98>
10000cac:	42a3      	cmp	r3, r4
10000cae:	d0c7      	beq.n	10000c40 <__gedf2+0x3c>
10000cb0:	2b00      	cmp	r3, #0
10000cb2:	d1d4      	bne.n	10000c5e <__gedf2+0x5a>
10000cb4:	0019      	movs	r1, r3
10000cb6:	e7ce      	b.n	10000c56 <__gedf2+0x52>
10000cb8:	000007ff 	.word	0x000007ff

10000cbc <__ledf2>:
10000cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10000cbe:	001e      	movs	r6, r3
10000cc0:	000d      	movs	r5, r1
10000cc2:	0017      	movs	r7, r2
10000cc4:	b085      	sub	sp, #20
10000cc6:	0ff6      	lsrs	r6, r6, #31
10000cc8:	9601      	str	r6, [sp, #4]
10000cca:	4e29      	ldr	r6, [pc, #164]	; (10000d70 <__ledf2+0xb4>)
10000ccc:	032a      	lsls	r2, r5, #12
10000cce:	006c      	lsls	r4, r5, #1
10000cd0:	0001      	movs	r1, r0
10000cd2:	9002      	str	r0, [sp, #8]
10000cd4:	0fe8      	lsrs	r0, r5, #31
10000cd6:	031d      	lsls	r5, r3, #12
10000cd8:	005b      	lsls	r3, r3, #1
10000cda:	0b12      	lsrs	r2, r2, #12
10000cdc:	0d64      	lsrs	r4, r4, #21
10000cde:	9703      	str	r7, [sp, #12]
10000ce0:	0b2d      	lsrs	r5, r5, #12
10000ce2:	0d5b      	lsrs	r3, r3, #21
10000ce4:	42b4      	cmp	r4, r6
10000ce6:	d104      	bne.n	10000cf2 <__ledf2+0x36>
10000ce8:	0016      	movs	r6, r2
10000cea:	430e      	orrs	r6, r1
10000cec:	d03a      	beq.n	10000d64 <__ledf2+0xa8>
10000cee:	2002      	movs	r0, #2
10000cf0:	e023      	b.n	10000d3a <__ledf2+0x7e>
10000cf2:	42b3      	cmp	r3, r6
10000cf4:	d102      	bne.n	10000cfc <__ledf2+0x40>
10000cf6:	002e      	movs	r6, r5
10000cf8:	433e      	orrs	r6, r7
10000cfa:	d1f8      	bne.n	10000cee <__ledf2+0x32>
10000cfc:	2c00      	cmp	r4, #0
10000cfe:	d133      	bne.n	10000d68 <__ledf2+0xac>
10000d00:	4311      	orrs	r1, r2
10000d02:	000e      	movs	r6, r1
10000d04:	4271      	negs	r1, r6
10000d06:	4171      	adcs	r1, r6
10000d08:	2b00      	cmp	r3, #0
10000d0a:	d101      	bne.n	10000d10 <__ledf2+0x54>
10000d0c:	432f      	orrs	r7, r5
10000d0e:	d023      	beq.n	10000d58 <__ledf2+0x9c>
10000d10:	2900      	cmp	r1, #0
10000d12:	d108      	bne.n	10000d26 <__ledf2+0x6a>
10000d14:	9901      	ldr	r1, [sp, #4]
10000d16:	4288      	cmp	r0, r1
10000d18:	d101      	bne.n	10000d1e <__ledf2+0x62>
10000d1a:	429c      	cmp	r4, r3
10000d1c:	dd09      	ble.n	10000d32 <__ledf2+0x76>
10000d1e:	2800      	cmp	r0, #0
10000d20:	d104      	bne.n	10000d2c <__ledf2+0x70>
10000d22:	2001      	movs	r0, #1
10000d24:	e009      	b.n	10000d3a <__ledf2+0x7e>
10000d26:	9b01      	ldr	r3, [sp, #4]
10000d28:	1e18      	subs	r0, r3, #0
10000d2a:	d106      	bne.n	10000d3a <__ledf2+0x7e>
10000d2c:	2001      	movs	r0, #1
10000d2e:	4240      	negs	r0, r0
10000d30:	e003      	b.n	10000d3a <__ledf2+0x7e>
10000d32:	429c      	cmp	r4, r3
10000d34:	da03      	bge.n	10000d3e <__ledf2+0x82>
10000d36:	2800      	cmp	r0, #0
10000d38:	d0f8      	beq.n	10000d2c <__ledf2+0x70>
10000d3a:	b005      	add	sp, #20
10000d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000d3e:	42aa      	cmp	r2, r5
10000d40:	d8ed      	bhi.n	10000d1e <__ledf2+0x62>
10000d42:	d10c      	bne.n	10000d5e <__ledf2+0xa2>
10000d44:	9b02      	ldr	r3, [sp, #8]
10000d46:	9a03      	ldr	r2, [sp, #12]
10000d48:	4293      	cmp	r3, r2
10000d4a:	d8e8      	bhi.n	10000d1e <__ledf2+0x62>
10000d4c:	9b02      	ldr	r3, [sp, #8]
10000d4e:	9a03      	ldr	r2, [sp, #12]
10000d50:	4293      	cmp	r3, r2
10000d52:	d3f0      	bcc.n	10000d36 <__ledf2+0x7a>
10000d54:	2000      	movs	r0, #0
10000d56:	e7f0      	b.n	10000d3a <__ledf2+0x7e>
10000d58:	2900      	cmp	r1, #0
10000d5a:	d1fb      	bne.n	10000d54 <__ledf2+0x98>
10000d5c:	e7df      	b.n	10000d1e <__ledf2+0x62>
10000d5e:	42aa      	cmp	r2, r5
10000d60:	d3e9      	bcc.n	10000d36 <__ledf2+0x7a>
10000d62:	e7f7      	b.n	10000d54 <__ledf2+0x98>
10000d64:	42a3      	cmp	r3, r4
10000d66:	d0c6      	beq.n	10000cf6 <__ledf2+0x3a>
10000d68:	2b00      	cmp	r3, #0
10000d6a:	d1d3      	bne.n	10000d14 <__ledf2+0x58>
10000d6c:	0019      	movs	r1, r3
10000d6e:	e7cd      	b.n	10000d0c <__ledf2+0x50>
10000d70:	000007ff 	.word	0x000007ff

10000d74 <__aeabi_dmul>:
10000d74:	b5f0      	push	{r4, r5, r6, r7, lr}
10000d76:	b08b      	sub	sp, #44	; 0x2c
10000d78:	0017      	movs	r7, r2
10000d7a:	9302      	str	r3, [sp, #8]
10000d7c:	0fca      	lsrs	r2, r1, #31
10000d7e:	030e      	lsls	r6, r1, #12
10000d80:	004b      	lsls	r3, r1, #1
10000d82:	0004      	movs	r4, r0
10000d84:	0b36      	lsrs	r6, r6, #12
10000d86:	0d5b      	lsrs	r3, r3, #21
10000d88:	9204      	str	r2, [sp, #16]
10000d8a:	9203      	str	r2, [sp, #12]
10000d8c:	d046      	beq.n	10000e1c <__aeabi_dmul+0xa8>
10000d8e:	4ac8      	ldr	r2, [pc, #800]	; (100010b0 <__aeabi_dmul+0x33c>)
10000d90:	4293      	cmp	r3, r2
10000d92:	d066      	beq.n	10000e62 <__aeabi_dmul+0xee>
10000d94:	00f6      	lsls	r6, r6, #3
10000d96:	0f42      	lsrs	r2, r0, #29
10000d98:	4332      	orrs	r2, r6
10000d9a:	2680      	movs	r6, #128	; 0x80
10000d9c:	0436      	lsls	r6, r6, #16
10000d9e:	4316      	orrs	r6, r2
10000da0:	4ac4      	ldr	r2, [pc, #784]	; (100010b4 <__aeabi_dmul+0x340>)
10000da2:	00c5      	lsls	r5, r0, #3
10000da4:	189b      	adds	r3, r3, r2
10000da6:	9301      	str	r3, [sp, #4]
10000da8:	2300      	movs	r3, #0
10000daa:	9300      	str	r3, [sp, #0]
10000dac:	9b02      	ldr	r3, [sp, #8]
10000dae:	0038      	movs	r0, r7
10000db0:	031c      	lsls	r4, r3, #12
10000db2:	005a      	lsls	r2, r3, #1
10000db4:	0fdb      	lsrs	r3, r3, #31
10000db6:	0b24      	lsrs	r4, r4, #12
10000db8:	0d52      	lsrs	r2, r2, #21
10000dba:	9305      	str	r3, [sp, #20]
10000dbc:	d060      	beq.n	10000e80 <__aeabi_dmul+0x10c>
10000dbe:	4bbc      	ldr	r3, [pc, #752]	; (100010b0 <__aeabi_dmul+0x33c>)
10000dc0:	429a      	cmp	r2, r3
10000dc2:	d100      	bne.n	10000dc6 <__aeabi_dmul+0x52>
10000dc4:	e07f      	b.n	10000ec6 <__aeabi_dmul+0x152>
10000dc6:	0f7b      	lsrs	r3, r7, #29
10000dc8:	00e4      	lsls	r4, r4, #3
10000dca:	431c      	orrs	r4, r3
10000dcc:	2380      	movs	r3, #128	; 0x80
10000dce:	49b9      	ldr	r1, [pc, #740]	; (100010b4 <__aeabi_dmul+0x340>)
10000dd0:	041b      	lsls	r3, r3, #16
10000dd2:	431c      	orrs	r4, r3
10000dd4:	1850      	adds	r0, r2, r1
10000dd6:	00fb      	lsls	r3, r7, #3
10000dd8:	2200      	movs	r2, #0
10000dda:	9904      	ldr	r1, [sp, #16]
10000ddc:	9f05      	ldr	r7, [sp, #20]
10000dde:	4079      	eors	r1, r7
10000de0:	9102      	str	r1, [sp, #8]
10000de2:	9901      	ldr	r1, [sp, #4]
10000de4:	1841      	adds	r1, r0, r1
10000de6:	9106      	str	r1, [sp, #24]
10000de8:	3101      	adds	r1, #1
10000dea:	9101      	str	r1, [sp, #4]
10000dec:	9900      	ldr	r1, [sp, #0]
10000dee:	0088      	lsls	r0, r1, #2
10000df0:	4310      	orrs	r0, r2
10000df2:	3801      	subs	r0, #1
10000df4:	280e      	cmp	r0, #14
10000df6:	d900      	bls.n	10000dfa <__aeabi_dmul+0x86>
10000df8:	e084      	b.n	10000f04 <__aeabi_dmul+0x190>
10000dfa:	f000 fd8f 	bl	1000191c <__gnu_thumb1_case_uhi>
10000dfe:	0076      	.short	0x0076
10000e00:	01760076 	.word	0x01760076
10000e04:	00730073 	.word	0x00730073
10000e08:	017601bb 	.word	0x017601bb
10000e0c:	01bb0073 	.word	0x01bb0073
10000e10:	01760073 	.word	0x01760073
10000e14:	01710171 	.word	0x01710171
10000e18:	01670171 	.word	0x01670171
10000e1c:	0035      	movs	r5, r6
10000e1e:	4305      	orrs	r5, r0
10000e20:	d026      	beq.n	10000e70 <__aeabi_dmul+0xfc>
10000e22:	2e00      	cmp	r6, #0
10000e24:	d013      	beq.n	10000e4e <__aeabi_dmul+0xda>
10000e26:	0030      	movs	r0, r6
10000e28:	f7ff fa62 	bl	100002f0 <__clzsi2>
10000e2c:	0005      	movs	r5, r0
10000e2e:	3d0b      	subs	r5, #11
10000e30:	2d1c      	cmp	r5, #28
10000e32:	dc10      	bgt.n	10000e56 <__aeabi_dmul+0xe2>
10000e34:	0002      	movs	r2, r0
10000e36:	231d      	movs	r3, #29
10000e38:	0021      	movs	r1, r4
10000e3a:	3a08      	subs	r2, #8
10000e3c:	4094      	lsls	r4, r2
10000e3e:	1b5b      	subs	r3, r3, r5
10000e40:	4096      	lsls	r6, r2
10000e42:	40d9      	lsrs	r1, r3
10000e44:	0025      	movs	r5, r4
10000e46:	430e      	orrs	r6, r1
10000e48:	4b9b      	ldr	r3, [pc, #620]	; (100010b8 <__aeabi_dmul+0x344>)
10000e4a:	1a1b      	subs	r3, r3, r0
10000e4c:	e7ab      	b.n	10000da6 <__aeabi_dmul+0x32>
10000e4e:	f7ff fa4f 	bl	100002f0 <__clzsi2>
10000e52:	3020      	adds	r0, #32
10000e54:	e7ea      	b.n	10000e2c <__aeabi_dmul+0xb8>
10000e56:	0003      	movs	r3, r0
10000e58:	3b28      	subs	r3, #40	; 0x28
10000e5a:	409c      	lsls	r4, r3
10000e5c:	2500      	movs	r5, #0
10000e5e:	0026      	movs	r6, r4
10000e60:	e7f2      	b.n	10000e48 <__aeabi_dmul+0xd4>
10000e62:	4334      	orrs	r4, r6
10000e64:	1e25      	subs	r5, r4, #0
10000e66:	d007      	beq.n	10000e78 <__aeabi_dmul+0x104>
10000e68:	9301      	str	r3, [sp, #4]
10000e6a:	0005      	movs	r5, r0
10000e6c:	2303      	movs	r3, #3
10000e6e:	e79c      	b.n	10000daa <__aeabi_dmul+0x36>
10000e70:	002e      	movs	r6, r5
10000e72:	2301      	movs	r3, #1
10000e74:	9501      	str	r5, [sp, #4]
10000e76:	e798      	b.n	10000daa <__aeabi_dmul+0x36>
10000e78:	9301      	str	r3, [sp, #4]
10000e7a:	0026      	movs	r6, r4
10000e7c:	2302      	movs	r3, #2
10000e7e:	e794      	b.n	10000daa <__aeabi_dmul+0x36>
10000e80:	0023      	movs	r3, r4
10000e82:	433b      	orrs	r3, r7
10000e84:	d026      	beq.n	10000ed4 <__aeabi_dmul+0x160>
10000e86:	2c00      	cmp	r4, #0
10000e88:	d013      	beq.n	10000eb2 <__aeabi_dmul+0x13e>
10000e8a:	0020      	movs	r0, r4
10000e8c:	f7ff fa30 	bl	100002f0 <__clzsi2>
10000e90:	0001      	movs	r1, r0
10000e92:	390b      	subs	r1, #11
10000e94:	291c      	cmp	r1, #28
10000e96:	dc10      	bgt.n	10000eba <__aeabi_dmul+0x146>
10000e98:	231d      	movs	r3, #29
10000e9a:	1a5b      	subs	r3, r3, r1
10000e9c:	0039      	movs	r1, r7
10000e9e:	0002      	movs	r2, r0
10000ea0:	40d9      	lsrs	r1, r3
10000ea2:	003b      	movs	r3, r7
10000ea4:	3a08      	subs	r2, #8
10000ea6:	4094      	lsls	r4, r2
10000ea8:	4093      	lsls	r3, r2
10000eaa:	430c      	orrs	r4, r1
10000eac:	4a82      	ldr	r2, [pc, #520]	; (100010b8 <__aeabi_dmul+0x344>)
10000eae:	1a10      	subs	r0, r2, r0
10000eb0:	e792      	b.n	10000dd8 <__aeabi_dmul+0x64>
10000eb2:	f7ff fa1d 	bl	100002f0 <__clzsi2>
10000eb6:	3020      	adds	r0, #32
10000eb8:	e7ea      	b.n	10000e90 <__aeabi_dmul+0x11c>
10000eba:	0003      	movs	r3, r0
10000ebc:	003c      	movs	r4, r7
10000ebe:	3b28      	subs	r3, #40	; 0x28
10000ec0:	409c      	lsls	r4, r3
10000ec2:	2300      	movs	r3, #0
10000ec4:	e7f2      	b.n	10000eac <__aeabi_dmul+0x138>
10000ec6:	003b      	movs	r3, r7
10000ec8:	4323      	orrs	r3, r4
10000eca:	d007      	beq.n	10000edc <__aeabi_dmul+0x168>
10000ecc:	0010      	movs	r0, r2
10000ece:	003b      	movs	r3, r7
10000ed0:	2203      	movs	r2, #3
10000ed2:	e782      	b.n	10000dda <__aeabi_dmul+0x66>
10000ed4:	001c      	movs	r4, r3
10000ed6:	0018      	movs	r0, r3
10000ed8:	2201      	movs	r2, #1
10000eda:	e77e      	b.n	10000dda <__aeabi_dmul+0x66>
10000edc:	0010      	movs	r0, r2
10000ede:	001c      	movs	r4, r3
10000ee0:	2202      	movs	r2, #2
10000ee2:	e77a      	b.n	10000dda <__aeabi_dmul+0x66>
10000ee4:	0034      	movs	r4, r6
10000ee6:	002b      	movs	r3, r5
10000ee8:	9a00      	ldr	r2, [sp, #0]
10000eea:	2a02      	cmp	r2, #2
10000eec:	d100      	bne.n	10000ef0 <__aeabi_dmul+0x17c>
10000eee:	e150      	b.n	10001192 <__aeabi_dmul+0x41e>
10000ef0:	2a03      	cmp	r2, #3
10000ef2:	d100      	bne.n	10000ef6 <__aeabi_dmul+0x182>
10000ef4:	e14a      	b.n	1000118c <__aeabi_dmul+0x418>
10000ef6:	2a01      	cmp	r2, #1
10000ef8:	d000      	beq.n	10000efc <__aeabi_dmul+0x188>
10000efa:	e0aa      	b.n	10001052 <__aeabi_dmul+0x2de>
10000efc:	2300      	movs	r3, #0
10000efe:	001d      	movs	r5, r3
10000f00:	001a      	movs	r2, r3
10000f02:	e0c8      	b.n	10001096 <__aeabi_dmul+0x322>
10000f04:	0c19      	lsrs	r1, r3, #16
10000f06:	b29b      	uxth	r3, r3
10000f08:	001f      	movs	r7, r3
10000f0a:	0c2a      	lsrs	r2, r5, #16
10000f0c:	b2ad      	uxth	r5, r5
10000f0e:	0028      	movs	r0, r5
10000f10:	9100      	str	r1, [sp, #0]
10000f12:	4351      	muls	r1, r2
10000f14:	9104      	str	r1, [sp, #16]
10000f16:	9900      	ldr	r1, [sp, #0]
10000f18:	4357      	muls	r7, r2
10000f1a:	4369      	muls	r1, r5
10000f1c:	19c9      	adds	r1, r1, r7
10000f1e:	4358      	muls	r0, r3
10000f20:	9303      	str	r3, [sp, #12]
10000f22:	000b      	movs	r3, r1
10000f24:	0c01      	lsrs	r1, r0, #16
10000f26:	18c9      	adds	r1, r1, r3
10000f28:	428f      	cmp	r7, r1
10000f2a:	d905      	bls.n	10000f38 <__aeabi_dmul+0x1c4>
10000f2c:	2780      	movs	r7, #128	; 0x80
10000f2e:	027f      	lsls	r7, r7, #9
10000f30:	46bc      	mov	ip, r7
10000f32:	9b04      	ldr	r3, [sp, #16]
10000f34:	4463      	add	r3, ip
10000f36:	9304      	str	r3, [sp, #16]
10000f38:	0c0b      	lsrs	r3, r1, #16
10000f3a:	0c27      	lsrs	r7, r4, #16
10000f3c:	0409      	lsls	r1, r1, #16
10000f3e:	b280      	uxth	r0, r0
10000f40:	b2a4      	uxth	r4, r4
10000f42:	469c      	mov	ip, r3
10000f44:	180b      	adds	r3, r1, r0
10000f46:	0029      	movs	r1, r5
10000f48:	0020      	movs	r0, r4
10000f4a:	4361      	muls	r1, r4
10000f4c:	4350      	muls	r0, r2
10000f4e:	437d      	muls	r5, r7
10000f50:	9308      	str	r3, [sp, #32]
10000f52:	182d      	adds	r5, r5, r0
10000f54:	0c0b      	lsrs	r3, r1, #16
10000f56:	195d      	adds	r5, r3, r5
10000f58:	437a      	muls	r2, r7
10000f5a:	42a8      	cmp	r0, r5
10000f5c:	d902      	bls.n	10000f64 <__aeabi_dmul+0x1f0>
10000f5e:	2380      	movs	r3, #128	; 0x80
10000f60:	025b      	lsls	r3, r3, #9
10000f62:	18d2      	adds	r2, r2, r3
10000f64:	0c28      	lsrs	r0, r5, #16
10000f66:	1883      	adds	r3, r0, r2
10000f68:	042d      	lsls	r5, r5, #16
10000f6a:	b289      	uxth	r1, r1
10000f6c:	9305      	str	r3, [sp, #20]
10000f6e:	186b      	adds	r3, r5, r1
10000f70:	9307      	str	r3, [sp, #28]
10000f72:	9a07      	ldr	r2, [sp, #28]
10000f74:	4663      	mov	r3, ip
10000f76:	4694      	mov	ip, r2
10000f78:	9a00      	ldr	r2, [sp, #0]
10000f7a:	b2b0      	uxth	r0, r6
10000f7c:	4342      	muls	r2, r0
10000f7e:	0005      	movs	r5, r0
10000f80:	4463      	add	r3, ip
10000f82:	4694      	mov	ip, r2
10000f84:	9309      	str	r3, [sp, #36]	; 0x24
10000f86:	9b03      	ldr	r3, [sp, #12]
10000f88:	0c31      	lsrs	r1, r6, #16
10000f8a:	435d      	muls	r5, r3
10000f8c:	434b      	muls	r3, r1
10000f8e:	9e00      	ldr	r6, [sp, #0]
10000f90:	449c      	add	ip, r3
10000f92:	0c2a      	lsrs	r2, r5, #16
10000f94:	4462      	add	r2, ip
10000f96:	434e      	muls	r6, r1
10000f98:	4293      	cmp	r3, r2
10000f9a:	d902      	bls.n	10000fa2 <__aeabi_dmul+0x22e>
10000f9c:	2380      	movs	r3, #128	; 0x80
10000f9e:	025b      	lsls	r3, r3, #9
10000fa0:	18f6      	adds	r6, r6, r3
10000fa2:	0c13      	lsrs	r3, r2, #16
10000fa4:	199b      	adds	r3, r3, r6
10000fa6:	9303      	str	r3, [sp, #12]
10000fa8:	0003      	movs	r3, r0
10000faa:	4378      	muls	r0, r7
10000fac:	4363      	muls	r3, r4
10000fae:	434c      	muls	r4, r1
10000fb0:	4379      	muls	r1, r7
10000fb2:	1900      	adds	r0, r0, r4
10000fb4:	0c1e      	lsrs	r6, r3, #16
10000fb6:	0412      	lsls	r2, r2, #16
10000fb8:	b2ad      	uxth	r5, r5
10000fba:	1836      	adds	r6, r6, r0
10000fbc:	1955      	adds	r5, r2, r5
10000fbe:	9100      	str	r1, [sp, #0]
10000fc0:	42b4      	cmp	r4, r6
10000fc2:	d903      	bls.n	10000fcc <__aeabi_dmul+0x258>
10000fc4:	2280      	movs	r2, #128	; 0x80
10000fc6:	0252      	lsls	r2, r2, #9
10000fc8:	188a      	adds	r2, r1, r2
10000fca:	9200      	str	r2, [sp, #0]
10000fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
10000fce:	9a04      	ldr	r2, [sp, #16]
10000fd0:	4684      	mov	ip, r0
10000fd2:	4462      	add	r2, ip
10000fd4:	0017      	movs	r7, r2
10000fd6:	9a07      	ldr	r2, [sp, #28]
10000fd8:	b29b      	uxth	r3, r3
10000fda:	4297      	cmp	r7, r2
10000fdc:	4180      	sbcs	r0, r0
10000fde:	0432      	lsls	r2, r6, #16
10000fe0:	18d2      	adds	r2, r2, r3
10000fe2:	9b05      	ldr	r3, [sp, #20]
10000fe4:	4240      	negs	r0, r0
10000fe6:	18d3      	adds	r3, r2, r3
10000fe8:	181c      	adds	r4, r3, r0
10000fea:	0019      	movs	r1, r3
10000fec:	9b03      	ldr	r3, [sp, #12]
10000fee:	9a05      	ldr	r2, [sp, #20]
10000ff0:	469c      	mov	ip, r3
10000ff2:	197f      	adds	r7, r7, r5
10000ff4:	4291      	cmp	r1, r2
10000ff6:	4192      	sbcs	r2, r2
10000ff8:	4284      	cmp	r4, r0
10000ffa:	4180      	sbcs	r0, r0
10000ffc:	44a4      	add	ip, r4
10000ffe:	42af      	cmp	r7, r5
10001000:	41ad      	sbcs	r5, r5
10001002:	4663      	mov	r3, ip
10001004:	4240      	negs	r0, r0
10001006:	4252      	negs	r2, r2
10001008:	426d      	negs	r5, r5
1000100a:	4302      	orrs	r2, r0
1000100c:	9803      	ldr	r0, [sp, #12]
1000100e:	195b      	adds	r3, r3, r5
10001010:	0c36      	lsrs	r6, r6, #16
10001012:	42ab      	cmp	r3, r5
10001014:	41ad      	sbcs	r5, r5
10001016:	1992      	adds	r2, r2, r6
10001018:	4584      	cmp	ip, r0
1000101a:	41b6      	sbcs	r6, r6
1000101c:	4268      	negs	r0, r5
1000101e:	4276      	negs	r6, r6
10001020:	9900      	ldr	r1, [sp, #0]
10001022:	4330      	orrs	r0, r6
10001024:	1812      	adds	r2, r2, r0
10001026:	1852      	adds	r2, r2, r1
10001028:	9908      	ldr	r1, [sp, #32]
1000102a:	0278      	lsls	r0, r7, #9
1000102c:	4308      	orrs	r0, r1
1000102e:	1e41      	subs	r1, r0, #1
10001030:	4188      	sbcs	r0, r1
10001032:	0dff      	lsrs	r7, r7, #23
10001034:	0ddc      	lsrs	r4, r3, #23
10001036:	0252      	lsls	r2, r2, #9
10001038:	4307      	orrs	r7, r0
1000103a:	025b      	lsls	r3, r3, #9
1000103c:	4314      	orrs	r4, r2
1000103e:	433b      	orrs	r3, r7
10001040:	01d2      	lsls	r2, r2, #7
10001042:	d555      	bpl.n	100010f0 <__aeabi_dmul+0x37c>
10001044:	2101      	movs	r1, #1
10001046:	085a      	lsrs	r2, r3, #1
10001048:	400b      	ands	r3, r1
1000104a:	4313      	orrs	r3, r2
1000104c:	07e2      	lsls	r2, r4, #31
1000104e:	40cc      	lsrs	r4, r1
10001050:	4313      	orrs	r3, r2
10001052:	9a01      	ldr	r2, [sp, #4]
10001054:	4919      	ldr	r1, [pc, #100]	; (100010bc <__aeabi_dmul+0x348>)
10001056:	1852      	adds	r2, r2, r1
10001058:	2a00      	cmp	r2, #0
1000105a:	dd4c      	ble.n	100010f6 <__aeabi_dmul+0x382>
1000105c:	0759      	lsls	r1, r3, #29
1000105e:	d009      	beq.n	10001074 <__aeabi_dmul+0x300>
10001060:	210f      	movs	r1, #15
10001062:	4019      	ands	r1, r3
10001064:	2904      	cmp	r1, #4
10001066:	d005      	beq.n	10001074 <__aeabi_dmul+0x300>
10001068:	1d19      	adds	r1, r3, #4
1000106a:	4299      	cmp	r1, r3
1000106c:	419b      	sbcs	r3, r3
1000106e:	425b      	negs	r3, r3
10001070:	18e4      	adds	r4, r4, r3
10001072:	000b      	movs	r3, r1
10001074:	01e1      	lsls	r1, r4, #7
10001076:	d506      	bpl.n	10001086 <__aeabi_dmul+0x312>
10001078:	2180      	movs	r1, #128	; 0x80
1000107a:	00c9      	lsls	r1, r1, #3
1000107c:	468c      	mov	ip, r1
1000107e:	4a10      	ldr	r2, [pc, #64]	; (100010c0 <__aeabi_dmul+0x34c>)
10001080:	4014      	ands	r4, r2
10001082:	9a01      	ldr	r2, [sp, #4]
10001084:	4462      	add	r2, ip
10001086:	490f      	ldr	r1, [pc, #60]	; (100010c4 <__aeabi_dmul+0x350>)
10001088:	428a      	cmp	r2, r1
1000108a:	dd00      	ble.n	1000108e <__aeabi_dmul+0x31a>
1000108c:	e081      	b.n	10001192 <__aeabi_dmul+0x41e>
1000108e:	08db      	lsrs	r3, r3, #3
10001090:	0765      	lsls	r5, r4, #29
10001092:	431d      	orrs	r5, r3
10001094:	08e3      	lsrs	r3, r4, #3
10001096:	0514      	lsls	r4, r2, #20
10001098:	4a0b      	ldr	r2, [pc, #44]	; (100010c8 <__aeabi_dmul+0x354>)
1000109a:	031b      	lsls	r3, r3, #12
1000109c:	4014      	ands	r4, r2
1000109e:	0b1b      	lsrs	r3, r3, #12
100010a0:	431c      	orrs	r4, r3
100010a2:	9b02      	ldr	r3, [sp, #8]
100010a4:	0028      	movs	r0, r5
100010a6:	07db      	lsls	r3, r3, #31
100010a8:	431c      	orrs	r4, r3
100010aa:	0021      	movs	r1, r4
100010ac:	b00b      	add	sp, #44	; 0x2c
100010ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
100010b0:	000007ff 	.word	0x000007ff
100010b4:	fffffc01 	.word	0xfffffc01
100010b8:	fffffc0d 	.word	0xfffffc0d
100010bc:	000003ff 	.word	0x000003ff
100010c0:	feffffff 	.word	0xfeffffff
100010c4:	000007fe 	.word	0x000007fe
100010c8:	7ff00000 	.word	0x7ff00000
100010cc:	2280      	movs	r2, #128	; 0x80
100010ce:	0312      	lsls	r2, r2, #12
100010d0:	4216      	tst	r6, r2
100010d2:	d054      	beq.n	1000117e <__aeabi_dmul+0x40a>
100010d4:	4214      	tst	r4, r2
100010d6:	d152      	bne.n	1000117e <__aeabi_dmul+0x40a>
100010d8:	0026      	movs	r6, r4
100010da:	9a05      	ldr	r2, [sp, #20]
100010dc:	9203      	str	r2, [sp, #12]
100010de:	e04d      	b.n	1000117c <__aeabi_dmul+0x408>
100010e0:	9a04      	ldr	r2, [sp, #16]
100010e2:	0034      	movs	r4, r6
100010e4:	002b      	movs	r3, r5
100010e6:	9202      	str	r2, [sp, #8]
100010e8:	e6fe      	b.n	10000ee8 <__aeabi_dmul+0x174>
100010ea:	9905      	ldr	r1, [sp, #20]
100010ec:	9102      	str	r1, [sp, #8]
100010ee:	e6fc      	b.n	10000eea <__aeabi_dmul+0x176>
100010f0:	9a06      	ldr	r2, [sp, #24]
100010f2:	9201      	str	r2, [sp, #4]
100010f4:	e7ad      	b.n	10001052 <__aeabi_dmul+0x2de>
100010f6:	2101      	movs	r1, #1
100010f8:	1a89      	subs	r1, r1, r2
100010fa:	2938      	cmp	r1, #56	; 0x38
100010fc:	dd00      	ble.n	10001100 <__aeabi_dmul+0x38c>
100010fe:	e6fd      	b.n	10000efc <__aeabi_dmul+0x188>
10001100:	291f      	cmp	r1, #31
10001102:	dc23      	bgt.n	1000114c <__aeabi_dmul+0x3d8>
10001104:	4824      	ldr	r0, [pc, #144]	; (10001198 <__aeabi_dmul+0x424>)
10001106:	9a01      	ldr	r2, [sp, #4]
10001108:	4684      	mov	ip, r0
1000110a:	0025      	movs	r5, r4
1000110c:	4462      	add	r2, ip
1000110e:	0018      	movs	r0, r3
10001110:	4093      	lsls	r3, r2
10001112:	4095      	lsls	r5, r2
10001114:	40c8      	lsrs	r0, r1
10001116:	1e5a      	subs	r2, r3, #1
10001118:	4193      	sbcs	r3, r2
1000111a:	40cc      	lsrs	r4, r1
1000111c:	4305      	orrs	r5, r0
1000111e:	432b      	orrs	r3, r5
10001120:	075a      	lsls	r2, r3, #29
10001122:	d009      	beq.n	10001138 <__aeabi_dmul+0x3c4>
10001124:	220f      	movs	r2, #15
10001126:	401a      	ands	r2, r3
10001128:	2a04      	cmp	r2, #4
1000112a:	d005      	beq.n	10001138 <__aeabi_dmul+0x3c4>
1000112c:	1d1a      	adds	r2, r3, #4
1000112e:	429a      	cmp	r2, r3
10001130:	41ad      	sbcs	r5, r5
10001132:	0013      	movs	r3, r2
10001134:	426d      	negs	r5, r5
10001136:	1964      	adds	r4, r4, r5
10001138:	2080      	movs	r0, #128	; 0x80
1000113a:	0022      	movs	r2, r4
1000113c:	0400      	lsls	r0, r0, #16
1000113e:	4002      	ands	r2, r0
10001140:	4204      	tst	r4, r0
10001142:	d0a4      	beq.n	1000108e <__aeabi_dmul+0x31a>
10001144:	2300      	movs	r3, #0
10001146:	2201      	movs	r2, #1
10001148:	001d      	movs	r5, r3
1000114a:	e7a4      	b.n	10001096 <__aeabi_dmul+0x322>
1000114c:	201f      	movs	r0, #31
1000114e:	0025      	movs	r5, r4
10001150:	4240      	negs	r0, r0
10001152:	1a82      	subs	r2, r0, r2
10001154:	40d5      	lsrs	r5, r2
10001156:	2200      	movs	r2, #0
10001158:	2920      	cmp	r1, #32
1000115a:	d005      	beq.n	10001168 <__aeabi_dmul+0x3f4>
1000115c:	490f      	ldr	r1, [pc, #60]	; (1000119c <__aeabi_dmul+0x428>)
1000115e:	9a01      	ldr	r2, [sp, #4]
10001160:	468c      	mov	ip, r1
10001162:	4462      	add	r2, ip
10001164:	4094      	lsls	r4, r2
10001166:	0022      	movs	r2, r4
10001168:	4313      	orrs	r3, r2
1000116a:	1e5a      	subs	r2, r3, #1
1000116c:	4193      	sbcs	r3, r2
1000116e:	2400      	movs	r4, #0
10001170:	432b      	orrs	r3, r5
10001172:	e7d5      	b.n	10001120 <__aeabi_dmul+0x3ac>
10001174:	2680      	movs	r6, #128	; 0x80
10001176:	2300      	movs	r3, #0
10001178:	0336      	lsls	r6, r6, #12
1000117a:	9303      	str	r3, [sp, #12]
1000117c:	001d      	movs	r5, r3
1000117e:	2380      	movs	r3, #128	; 0x80
10001180:	9a03      	ldr	r2, [sp, #12]
10001182:	031b      	lsls	r3, r3, #12
10001184:	4333      	orrs	r3, r6
10001186:	9202      	str	r2, [sp, #8]
10001188:	4a05      	ldr	r2, [pc, #20]	; (100011a0 <__aeabi_dmul+0x42c>)
1000118a:	e784      	b.n	10001096 <__aeabi_dmul+0x322>
1000118c:	0026      	movs	r6, r4
1000118e:	9a02      	ldr	r2, [sp, #8]
10001190:	e7a4      	b.n	100010dc <__aeabi_dmul+0x368>
10001192:	2300      	movs	r3, #0
10001194:	001d      	movs	r5, r3
10001196:	e7f7      	b.n	10001188 <__aeabi_dmul+0x414>
10001198:	0000041e 	.word	0x0000041e
1000119c:	0000043e 	.word	0x0000043e
100011a0:	000007ff 	.word	0x000007ff

100011a4 <__aeabi_dsub>:
100011a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100011a6:	0005      	movs	r5, r0
100011a8:	001e      	movs	r6, r3
100011aa:	0008      	movs	r0, r1
100011ac:	0011      	movs	r1, r2
100011ae:	0303      	lsls	r3, r0, #12
100011b0:	0fc2      	lsrs	r2, r0, #31
100011b2:	0044      	lsls	r4, r0, #1
100011b4:	0330      	lsls	r0, r6, #12
100011b6:	0f4f      	lsrs	r7, r1, #29
100011b8:	0a40      	lsrs	r0, r0, #9
100011ba:	9200      	str	r2, [sp, #0]
100011bc:	0a5b      	lsrs	r3, r3, #9
100011be:	0f6a      	lsrs	r2, r5, #29
100011c0:	4338      	orrs	r0, r7
100011c2:	4fc0      	ldr	r7, [pc, #768]	; (100014c4 <__aeabi_dsub+0x320>)
100011c4:	4313      	orrs	r3, r2
100011c6:	00ea      	lsls	r2, r5, #3
100011c8:	0075      	lsls	r5, r6, #1
100011ca:	0d64      	lsrs	r4, r4, #21
100011cc:	0d6d      	lsrs	r5, r5, #21
100011ce:	0ff6      	lsrs	r6, r6, #31
100011d0:	00c9      	lsls	r1, r1, #3
100011d2:	42bd      	cmp	r5, r7
100011d4:	d103      	bne.n	100011de <__aeabi_dsub+0x3a>
100011d6:	0007      	movs	r7, r0
100011d8:	46b4      	mov	ip, r6
100011da:	430f      	orrs	r7, r1
100011dc:	d102      	bne.n	100011e4 <__aeabi_dsub+0x40>
100011de:	2701      	movs	r7, #1
100011e0:	4077      	eors	r7, r6
100011e2:	46bc      	mov	ip, r7
100011e4:	9f00      	ldr	r7, [sp, #0]
100011e6:	1b66      	subs	r6, r4, r5
100011e8:	45bc      	cmp	ip, r7
100011ea:	d000      	beq.n	100011ee <__aeabi_dsub+0x4a>
100011ec:	e128      	b.n	10001440 <__aeabi_dsub+0x29c>
100011ee:	2e00      	cmp	r6, #0
100011f0:	dc00      	bgt.n	100011f4 <__aeabi_dsub+0x50>
100011f2:	e08a      	b.n	1000130a <__aeabi_dsub+0x166>
100011f4:	2d00      	cmp	r5, #0
100011f6:	d150      	bne.n	1000129a <__aeabi_dsub+0xf6>
100011f8:	0005      	movs	r5, r0
100011fa:	430d      	orrs	r5, r1
100011fc:	d01d      	beq.n	1000123a <__aeabi_dsub+0x96>
100011fe:	1e66      	subs	r6, r4, #1
10001200:	2c01      	cmp	r4, #1
10001202:	d117      	bne.n	10001234 <__aeabi_dsub+0x90>
10001204:	1851      	adds	r1, r2, r1
10001206:	4291      	cmp	r1, r2
10001208:	4192      	sbcs	r2, r2
1000120a:	181b      	adds	r3, r3, r0
1000120c:	4252      	negs	r2, r2
1000120e:	189b      	adds	r3, r3, r2
10001210:	000a      	movs	r2, r1
10001212:	0219      	lsls	r1, r3, #8
10001214:	d511      	bpl.n	1000123a <__aeabi_dsub+0x96>
10001216:	49ab      	ldr	r1, [pc, #684]	; (100014c4 <__aeabi_dsub+0x320>)
10001218:	3401      	adds	r4, #1
1000121a:	428c      	cmp	r4, r1
1000121c:	d100      	bne.n	10001220 <__aeabi_dsub+0x7c>
1000121e:	e27c      	b.n	1000171a <__aeabi_dsub+0x576>
10001220:	2001      	movs	r0, #1
10001222:	49a9      	ldr	r1, [pc, #676]	; (100014c8 <__aeabi_dsub+0x324>)
10001224:	400b      	ands	r3, r1
10001226:	0851      	lsrs	r1, r2, #1
10001228:	4002      	ands	r2, r0
1000122a:	430a      	orrs	r2, r1
1000122c:	07d9      	lsls	r1, r3, #31
1000122e:	430a      	orrs	r2, r1
10001230:	40c3      	lsrs	r3, r0
10001232:	e002      	b.n	1000123a <__aeabi_dsub+0x96>
10001234:	4da3      	ldr	r5, [pc, #652]	; (100014c4 <__aeabi_dsub+0x320>)
10001236:	42ac      	cmp	r4, r5
10001238:	d135      	bne.n	100012a6 <__aeabi_dsub+0x102>
1000123a:	0751      	lsls	r1, r2, #29
1000123c:	d009      	beq.n	10001252 <__aeabi_dsub+0xae>
1000123e:	210f      	movs	r1, #15
10001240:	4011      	ands	r1, r2
10001242:	2904      	cmp	r1, #4
10001244:	d005      	beq.n	10001252 <__aeabi_dsub+0xae>
10001246:	1d11      	adds	r1, r2, #4
10001248:	4291      	cmp	r1, r2
1000124a:	4192      	sbcs	r2, r2
1000124c:	4252      	negs	r2, r2
1000124e:	189b      	adds	r3, r3, r2
10001250:	000a      	movs	r2, r1
10001252:	0219      	lsls	r1, r3, #8
10001254:	d506      	bpl.n	10001264 <__aeabi_dsub+0xc0>
10001256:	499b      	ldr	r1, [pc, #620]	; (100014c4 <__aeabi_dsub+0x320>)
10001258:	3401      	adds	r4, #1
1000125a:	428c      	cmp	r4, r1
1000125c:	d100      	bne.n	10001260 <__aeabi_dsub+0xbc>
1000125e:	e26b      	b.n	10001738 <__aeabi_dsub+0x594>
10001260:	4999      	ldr	r1, [pc, #612]	; (100014c8 <__aeabi_dsub+0x324>)
10001262:	400b      	ands	r3, r1
10001264:	0759      	lsls	r1, r3, #29
10001266:	08d2      	lsrs	r2, r2, #3
10001268:	430a      	orrs	r2, r1
1000126a:	4996      	ldr	r1, [pc, #600]	; (100014c4 <__aeabi_dsub+0x320>)
1000126c:	08db      	lsrs	r3, r3, #3
1000126e:	428c      	cmp	r4, r1
10001270:	d106      	bne.n	10001280 <__aeabi_dsub+0xdc>
10001272:	0011      	movs	r1, r2
10001274:	4319      	orrs	r1, r3
10001276:	d100      	bne.n	1000127a <__aeabi_dsub+0xd6>
10001278:	e261      	b.n	1000173e <__aeabi_dsub+0x59a>
1000127a:	2180      	movs	r1, #128	; 0x80
1000127c:	0309      	lsls	r1, r1, #12
1000127e:	430b      	orrs	r3, r1
10001280:	0010      	movs	r0, r2
10001282:	4a92      	ldr	r2, [pc, #584]	; (100014cc <__aeabi_dsub+0x328>)
10001284:	0524      	lsls	r4, r4, #20
10001286:	031b      	lsls	r3, r3, #12
10001288:	4014      	ands	r4, r2
1000128a:	0b1b      	lsrs	r3, r3, #12
1000128c:	431c      	orrs	r4, r3
1000128e:	9b00      	ldr	r3, [sp, #0]
10001290:	07db      	lsls	r3, r3, #31
10001292:	431c      	orrs	r4, r3
10001294:	0021      	movs	r1, r4
10001296:	b003      	add	sp, #12
10001298:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000129a:	4d8a      	ldr	r5, [pc, #552]	; (100014c4 <__aeabi_dsub+0x320>)
1000129c:	42ac      	cmp	r4, r5
1000129e:	d0cc      	beq.n	1000123a <__aeabi_dsub+0x96>
100012a0:	2580      	movs	r5, #128	; 0x80
100012a2:	042d      	lsls	r5, r5, #16
100012a4:	4328      	orrs	r0, r5
100012a6:	2e38      	cmp	r6, #56	; 0x38
100012a8:	dc2a      	bgt.n	10001300 <__aeabi_dsub+0x15c>
100012aa:	2e1f      	cmp	r6, #31
100012ac:	dc17      	bgt.n	100012de <__aeabi_dsub+0x13a>
100012ae:	2520      	movs	r5, #32
100012b0:	0007      	movs	r7, r0
100012b2:	1bad      	subs	r5, r5, r6
100012b4:	40af      	lsls	r7, r5
100012b6:	46bc      	mov	ip, r7
100012b8:	000f      	movs	r7, r1
100012ba:	9501      	str	r5, [sp, #4]
100012bc:	40f7      	lsrs	r7, r6
100012be:	4665      	mov	r5, ip
100012c0:	432f      	orrs	r7, r5
100012c2:	9d01      	ldr	r5, [sp, #4]
100012c4:	40f0      	lsrs	r0, r6
100012c6:	40a9      	lsls	r1, r5
100012c8:	1e4d      	subs	r5, r1, #1
100012ca:	41a9      	sbcs	r1, r5
100012cc:	430f      	orrs	r7, r1
100012ce:	18bf      	adds	r7, r7, r2
100012d0:	18c0      	adds	r0, r0, r3
100012d2:	4297      	cmp	r7, r2
100012d4:	419b      	sbcs	r3, r3
100012d6:	425b      	negs	r3, r3
100012d8:	003a      	movs	r2, r7
100012da:	18c3      	adds	r3, r0, r3
100012dc:	e799      	b.n	10001212 <__aeabi_dsub+0x6e>
100012de:	0035      	movs	r5, r6
100012e0:	0007      	movs	r7, r0
100012e2:	3d20      	subs	r5, #32
100012e4:	40ef      	lsrs	r7, r5
100012e6:	2500      	movs	r5, #0
100012e8:	2e20      	cmp	r6, #32
100012ea:	d003      	beq.n	100012f4 <__aeabi_dsub+0x150>
100012ec:	3540      	adds	r5, #64	; 0x40
100012ee:	1bad      	subs	r5, r5, r6
100012f0:	40a8      	lsls	r0, r5
100012f2:	0005      	movs	r5, r0
100012f4:	4329      	orrs	r1, r5
100012f6:	1e48      	subs	r0, r1, #1
100012f8:	4181      	sbcs	r1, r0
100012fa:	430f      	orrs	r7, r1
100012fc:	2000      	movs	r0, #0
100012fe:	e7e6      	b.n	100012ce <__aeabi_dsub+0x12a>
10001300:	4308      	orrs	r0, r1
10001302:	0007      	movs	r7, r0
10001304:	1e79      	subs	r1, r7, #1
10001306:	418f      	sbcs	r7, r1
10001308:	e7f8      	b.n	100012fc <__aeabi_dsub+0x158>
1000130a:	2e00      	cmp	r6, #0
1000130c:	d04f      	beq.n	100013ae <__aeabi_dsub+0x20a>
1000130e:	1b2e      	subs	r6, r5, r4
10001310:	2c00      	cmp	r4, #0
10001312:	d114      	bne.n	1000133e <__aeabi_dsub+0x19a>
10001314:	001c      	movs	r4, r3
10001316:	4314      	orrs	r4, r2
10001318:	d100      	bne.n	1000131c <__aeabi_dsub+0x178>
1000131a:	e1f6      	b.n	1000170a <__aeabi_dsub+0x566>
1000131c:	1e74      	subs	r4, r6, #1
1000131e:	2e01      	cmp	r6, #1
10001320:	d107      	bne.n	10001332 <__aeabi_dsub+0x18e>
10001322:	1852      	adds	r2, r2, r1
10001324:	428a      	cmp	r2, r1
10001326:	4189      	sbcs	r1, r1
10001328:	181b      	adds	r3, r3, r0
1000132a:	4249      	negs	r1, r1
1000132c:	2401      	movs	r4, #1
1000132e:	185b      	adds	r3, r3, r1
10001330:	e76f      	b.n	10001212 <__aeabi_dsub+0x6e>
10001332:	4f64      	ldr	r7, [pc, #400]	; (100014c4 <__aeabi_dsub+0x320>)
10001334:	42be      	cmp	r6, r7
10001336:	d109      	bne.n	1000134c <__aeabi_dsub+0x1a8>
10001338:	0003      	movs	r3, r0
1000133a:	000a      	movs	r2, r1
1000133c:	e171      	b.n	10001622 <__aeabi_dsub+0x47e>
1000133e:	4c61      	ldr	r4, [pc, #388]	; (100014c4 <__aeabi_dsub+0x320>)
10001340:	42a5      	cmp	r5, r4
10001342:	d0f9      	beq.n	10001338 <__aeabi_dsub+0x194>
10001344:	2480      	movs	r4, #128	; 0x80
10001346:	0424      	lsls	r4, r4, #16
10001348:	4323      	orrs	r3, r4
1000134a:	0034      	movs	r4, r6
1000134c:	2c38      	cmp	r4, #56	; 0x38
1000134e:	dc2a      	bgt.n	100013a6 <__aeabi_dsub+0x202>
10001350:	2c1f      	cmp	r4, #31
10001352:	dc17      	bgt.n	10001384 <__aeabi_dsub+0x1e0>
10001354:	2620      	movs	r6, #32
10001356:	001f      	movs	r7, r3
10001358:	1b36      	subs	r6, r6, r4
1000135a:	40b7      	lsls	r7, r6
1000135c:	46bc      	mov	ip, r7
1000135e:	0017      	movs	r7, r2
10001360:	9601      	str	r6, [sp, #4]
10001362:	40e7      	lsrs	r7, r4
10001364:	4666      	mov	r6, ip
10001366:	4337      	orrs	r7, r6
10001368:	9e01      	ldr	r6, [sp, #4]
1000136a:	40e3      	lsrs	r3, r4
1000136c:	40b2      	lsls	r2, r6
1000136e:	1e56      	subs	r6, r2, #1
10001370:	41b2      	sbcs	r2, r6
10001372:	433a      	orrs	r2, r7
10001374:	1852      	adds	r2, r2, r1
10001376:	428a      	cmp	r2, r1
10001378:	4189      	sbcs	r1, r1
1000137a:	181b      	adds	r3, r3, r0
1000137c:	4249      	negs	r1, r1
1000137e:	002c      	movs	r4, r5
10001380:	185b      	adds	r3, r3, r1
10001382:	e746      	b.n	10001212 <__aeabi_dsub+0x6e>
10001384:	0026      	movs	r6, r4
10001386:	001f      	movs	r7, r3
10001388:	3e20      	subs	r6, #32
1000138a:	40f7      	lsrs	r7, r6
1000138c:	2600      	movs	r6, #0
1000138e:	2c20      	cmp	r4, #32
10001390:	d003      	beq.n	1000139a <__aeabi_dsub+0x1f6>
10001392:	3640      	adds	r6, #64	; 0x40
10001394:	1b34      	subs	r4, r6, r4
10001396:	40a3      	lsls	r3, r4
10001398:	001e      	movs	r6, r3
1000139a:	4332      	orrs	r2, r6
1000139c:	1e53      	subs	r3, r2, #1
1000139e:	419a      	sbcs	r2, r3
100013a0:	433a      	orrs	r2, r7
100013a2:	2300      	movs	r3, #0
100013a4:	e7e6      	b.n	10001374 <__aeabi_dsub+0x1d0>
100013a6:	431a      	orrs	r2, r3
100013a8:	1e53      	subs	r3, r2, #1
100013aa:	419a      	sbcs	r2, r3
100013ac:	e7f9      	b.n	100013a2 <__aeabi_dsub+0x1fe>
100013ae:	4f48      	ldr	r7, [pc, #288]	; (100014d0 <__aeabi_dsub+0x32c>)
100013b0:	1c65      	adds	r5, r4, #1
100013b2:	423d      	tst	r5, r7
100013b4:	d134      	bne.n	10001420 <__aeabi_dsub+0x27c>
100013b6:	001d      	movs	r5, r3
100013b8:	4315      	orrs	r5, r2
100013ba:	2c00      	cmp	r4, #0
100013bc:	d116      	bne.n	100013ec <__aeabi_dsub+0x248>
100013be:	2d00      	cmp	r5, #0
100013c0:	d100      	bne.n	100013c4 <__aeabi_dsub+0x220>
100013c2:	e1a6      	b.n	10001712 <__aeabi_dsub+0x56e>
100013c4:	0005      	movs	r5, r0
100013c6:	430d      	orrs	r5, r1
100013c8:	d100      	bne.n	100013cc <__aeabi_dsub+0x228>
100013ca:	e736      	b.n	1000123a <__aeabi_dsub+0x96>
100013cc:	1851      	adds	r1, r2, r1
100013ce:	4291      	cmp	r1, r2
100013d0:	4192      	sbcs	r2, r2
100013d2:	181b      	adds	r3, r3, r0
100013d4:	4252      	negs	r2, r2
100013d6:	189b      	adds	r3, r3, r2
100013d8:	000a      	movs	r2, r1
100013da:	2180      	movs	r1, #128	; 0x80
100013dc:	0409      	lsls	r1, r1, #16
100013de:	420b      	tst	r3, r1
100013e0:	d100      	bne.n	100013e4 <__aeabi_dsub+0x240>
100013e2:	e72a      	b.n	1000123a <__aeabi_dsub+0x96>
100013e4:	4938      	ldr	r1, [pc, #224]	; (100014c8 <__aeabi_dsub+0x324>)
100013e6:	3401      	adds	r4, #1
100013e8:	400b      	ands	r3, r1
100013ea:	e726      	b.n	1000123a <__aeabi_dsub+0x96>
100013ec:	2d00      	cmp	r5, #0
100013ee:	d0a3      	beq.n	10001338 <__aeabi_dsub+0x194>
100013f0:	0004      	movs	r4, r0
100013f2:	430c      	orrs	r4, r1
100013f4:	d100      	bne.n	100013f8 <__aeabi_dsub+0x254>
100013f6:	e114      	b.n	10001622 <__aeabi_dsub+0x47e>
100013f8:	075c      	lsls	r4, r3, #29
100013fa:	08d2      	lsrs	r2, r2, #3
100013fc:	4322      	orrs	r2, r4
100013fe:	2480      	movs	r4, #128	; 0x80
10001400:	08db      	lsrs	r3, r3, #3
10001402:	0324      	lsls	r4, r4, #12
10001404:	4223      	tst	r3, r4
10001406:	d006      	beq.n	10001416 <__aeabi_dsub+0x272>
10001408:	08c5      	lsrs	r5, r0, #3
1000140a:	4225      	tst	r5, r4
1000140c:	d103      	bne.n	10001416 <__aeabi_dsub+0x272>
1000140e:	002b      	movs	r3, r5
10001410:	08ca      	lsrs	r2, r1, #3
10001412:	0740      	lsls	r0, r0, #29
10001414:	4302      	orrs	r2, r0
10001416:	0f51      	lsrs	r1, r2, #29
10001418:	00db      	lsls	r3, r3, #3
1000141a:	430b      	orrs	r3, r1
1000141c:	00d2      	lsls	r2, r2, #3
1000141e:	e100      	b.n	10001622 <__aeabi_dsub+0x47e>
10001420:	4c28      	ldr	r4, [pc, #160]	; (100014c4 <__aeabi_dsub+0x320>)
10001422:	42a5      	cmp	r5, r4
10001424:	d100      	bne.n	10001428 <__aeabi_dsub+0x284>
10001426:	e177      	b.n	10001718 <__aeabi_dsub+0x574>
10001428:	1851      	adds	r1, r2, r1
1000142a:	4291      	cmp	r1, r2
1000142c:	4192      	sbcs	r2, r2
1000142e:	181b      	adds	r3, r3, r0
10001430:	4252      	negs	r2, r2
10001432:	189b      	adds	r3, r3, r2
10001434:	07da      	lsls	r2, r3, #31
10001436:	0849      	lsrs	r1, r1, #1
10001438:	002c      	movs	r4, r5
1000143a:	430a      	orrs	r2, r1
1000143c:	085b      	lsrs	r3, r3, #1
1000143e:	e6fc      	b.n	1000123a <__aeabi_dsub+0x96>
10001440:	2e00      	cmp	r6, #0
10001442:	dd5d      	ble.n	10001500 <__aeabi_dsub+0x35c>
10001444:	2d00      	cmp	r5, #0
10001446:	d134      	bne.n	100014b2 <__aeabi_dsub+0x30e>
10001448:	0005      	movs	r5, r0
1000144a:	430d      	orrs	r5, r1
1000144c:	d100      	bne.n	10001450 <__aeabi_dsub+0x2ac>
1000144e:	e6f4      	b.n	1000123a <__aeabi_dsub+0x96>
10001450:	1e66      	subs	r6, r4, #1
10001452:	2c01      	cmp	r4, #1
10001454:	d10d      	bne.n	10001472 <__aeabi_dsub+0x2ce>
10001456:	1a51      	subs	r1, r2, r1
10001458:	428a      	cmp	r2, r1
1000145a:	4192      	sbcs	r2, r2
1000145c:	1a1b      	subs	r3, r3, r0
1000145e:	4252      	negs	r2, r2
10001460:	1a9b      	subs	r3, r3, r2
10001462:	000a      	movs	r2, r1
10001464:	0219      	lsls	r1, r3, #8
10001466:	d400      	bmi.n	1000146a <__aeabi_dsub+0x2c6>
10001468:	e6e7      	b.n	1000123a <__aeabi_dsub+0x96>
1000146a:	025b      	lsls	r3, r3, #9
1000146c:	0016      	movs	r6, r2
1000146e:	0a5d      	lsrs	r5, r3, #9
10001470:	e101      	b.n	10001676 <__aeabi_dsub+0x4d2>
10001472:	4d14      	ldr	r5, [pc, #80]	; (100014c4 <__aeabi_dsub+0x320>)
10001474:	42ac      	cmp	r4, r5
10001476:	d100      	bne.n	1000147a <__aeabi_dsub+0x2d6>
10001478:	e6df      	b.n	1000123a <__aeabi_dsub+0x96>
1000147a:	2e38      	cmp	r6, #56	; 0x38
1000147c:	dc3b      	bgt.n	100014f6 <__aeabi_dsub+0x352>
1000147e:	2e1f      	cmp	r6, #31
10001480:	dc28      	bgt.n	100014d4 <__aeabi_dsub+0x330>
10001482:	2520      	movs	r5, #32
10001484:	0007      	movs	r7, r0
10001486:	1bad      	subs	r5, r5, r6
10001488:	40af      	lsls	r7, r5
1000148a:	46bc      	mov	ip, r7
1000148c:	000f      	movs	r7, r1
1000148e:	9501      	str	r5, [sp, #4]
10001490:	40f7      	lsrs	r7, r6
10001492:	4665      	mov	r5, ip
10001494:	432f      	orrs	r7, r5
10001496:	9d01      	ldr	r5, [sp, #4]
10001498:	40f0      	lsrs	r0, r6
1000149a:	40a9      	lsls	r1, r5
1000149c:	1e4d      	subs	r5, r1, #1
1000149e:	41a9      	sbcs	r1, r5
100014a0:	430f      	orrs	r7, r1
100014a2:	1bd7      	subs	r7, r2, r7
100014a4:	1a18      	subs	r0, r3, r0
100014a6:	42ba      	cmp	r2, r7
100014a8:	419b      	sbcs	r3, r3
100014aa:	425b      	negs	r3, r3
100014ac:	003a      	movs	r2, r7
100014ae:	1ac3      	subs	r3, r0, r3
100014b0:	e7d8      	b.n	10001464 <__aeabi_dsub+0x2c0>
100014b2:	4d04      	ldr	r5, [pc, #16]	; (100014c4 <__aeabi_dsub+0x320>)
100014b4:	42ac      	cmp	r4, r5
100014b6:	d100      	bne.n	100014ba <__aeabi_dsub+0x316>
100014b8:	e6bf      	b.n	1000123a <__aeabi_dsub+0x96>
100014ba:	2580      	movs	r5, #128	; 0x80
100014bc:	042d      	lsls	r5, r5, #16
100014be:	4328      	orrs	r0, r5
100014c0:	e7db      	b.n	1000147a <__aeabi_dsub+0x2d6>
100014c2:	46c0      	nop			; (mov r8, r8)
100014c4:	000007ff 	.word	0x000007ff
100014c8:	ff7fffff 	.word	0xff7fffff
100014cc:	7ff00000 	.word	0x7ff00000
100014d0:	000007fe 	.word	0x000007fe
100014d4:	0035      	movs	r5, r6
100014d6:	0007      	movs	r7, r0
100014d8:	3d20      	subs	r5, #32
100014da:	40ef      	lsrs	r7, r5
100014dc:	2500      	movs	r5, #0
100014de:	2e20      	cmp	r6, #32
100014e0:	d003      	beq.n	100014ea <__aeabi_dsub+0x346>
100014e2:	3540      	adds	r5, #64	; 0x40
100014e4:	1bad      	subs	r5, r5, r6
100014e6:	40a8      	lsls	r0, r5
100014e8:	0005      	movs	r5, r0
100014ea:	4329      	orrs	r1, r5
100014ec:	1e48      	subs	r0, r1, #1
100014ee:	4181      	sbcs	r1, r0
100014f0:	430f      	orrs	r7, r1
100014f2:	2000      	movs	r0, #0
100014f4:	e7d5      	b.n	100014a2 <__aeabi_dsub+0x2fe>
100014f6:	4308      	orrs	r0, r1
100014f8:	0007      	movs	r7, r0
100014fa:	1e79      	subs	r1, r7, #1
100014fc:	418f      	sbcs	r7, r1
100014fe:	e7f8      	b.n	100014f2 <__aeabi_dsub+0x34e>
10001500:	2e00      	cmp	r6, #0
10001502:	d053      	beq.n	100015ac <__aeabi_dsub+0x408>
10001504:	1b2e      	subs	r6, r5, r4
10001506:	2c00      	cmp	r4, #0
10001508:	d117      	bne.n	1000153a <__aeabi_dsub+0x396>
1000150a:	001c      	movs	r4, r3
1000150c:	4314      	orrs	r4, r2
1000150e:	d100      	bne.n	10001512 <__aeabi_dsub+0x36e>
10001510:	e106      	b.n	10001720 <__aeabi_dsub+0x57c>
10001512:	1e74      	subs	r4, r6, #1
10001514:	2e01      	cmp	r6, #1
10001516:	d109      	bne.n	1000152c <__aeabi_dsub+0x388>
10001518:	1a8a      	subs	r2, r1, r2
1000151a:	4291      	cmp	r1, r2
1000151c:	4189      	sbcs	r1, r1
1000151e:	1ac3      	subs	r3, r0, r3
10001520:	4249      	negs	r1, r1
10001522:	1a5b      	subs	r3, r3, r1
10001524:	4661      	mov	r1, ip
10001526:	2401      	movs	r4, #1
10001528:	9100      	str	r1, [sp, #0]
1000152a:	e79b      	b.n	10001464 <__aeabi_dsub+0x2c0>
1000152c:	4f85      	ldr	r7, [pc, #532]	; (10001744 <__aeabi_dsub+0x5a0>)
1000152e:	42be      	cmp	r6, r7
10001530:	d10a      	bne.n	10001548 <__aeabi_dsub+0x3a4>
10001532:	0003      	movs	r3, r0
10001534:	000a      	movs	r2, r1
10001536:	4c83      	ldr	r4, [pc, #524]	; (10001744 <__aeabi_dsub+0x5a0>)
10001538:	e04c      	b.n	100015d4 <__aeabi_dsub+0x430>
1000153a:	4c82      	ldr	r4, [pc, #520]	; (10001744 <__aeabi_dsub+0x5a0>)
1000153c:	42a5      	cmp	r5, r4
1000153e:	d0f8      	beq.n	10001532 <__aeabi_dsub+0x38e>
10001540:	2480      	movs	r4, #128	; 0x80
10001542:	0424      	lsls	r4, r4, #16
10001544:	4323      	orrs	r3, r4
10001546:	0034      	movs	r4, r6
10001548:	2c38      	cmp	r4, #56	; 0x38
1000154a:	dc2b      	bgt.n	100015a4 <__aeabi_dsub+0x400>
1000154c:	2c1f      	cmp	r4, #31
1000154e:	dc18      	bgt.n	10001582 <__aeabi_dsub+0x3de>
10001550:	2620      	movs	r6, #32
10001552:	001f      	movs	r7, r3
10001554:	1b36      	subs	r6, r6, r4
10001556:	40b7      	lsls	r7, r6
10001558:	9600      	str	r6, [sp, #0]
1000155a:	003e      	movs	r6, r7
1000155c:	0017      	movs	r7, r2
1000155e:	40e7      	lsrs	r7, r4
10001560:	4337      	orrs	r7, r6
10001562:	9e00      	ldr	r6, [sp, #0]
10001564:	40e3      	lsrs	r3, r4
10001566:	40b2      	lsls	r2, r6
10001568:	1e56      	subs	r6, r2, #1
1000156a:	41b2      	sbcs	r2, r6
1000156c:	433a      	orrs	r2, r7
1000156e:	1a8a      	subs	r2, r1, r2
10001570:	4291      	cmp	r1, r2
10001572:	4189      	sbcs	r1, r1
10001574:	1ac3      	subs	r3, r0, r3
10001576:	4249      	negs	r1, r1
10001578:	1a5b      	subs	r3, r3, r1
1000157a:	4661      	mov	r1, ip
1000157c:	002c      	movs	r4, r5
1000157e:	9100      	str	r1, [sp, #0]
10001580:	e770      	b.n	10001464 <__aeabi_dsub+0x2c0>
10001582:	0026      	movs	r6, r4
10001584:	001f      	movs	r7, r3
10001586:	3e20      	subs	r6, #32
10001588:	40f7      	lsrs	r7, r6
1000158a:	2600      	movs	r6, #0
1000158c:	2c20      	cmp	r4, #32
1000158e:	d003      	beq.n	10001598 <__aeabi_dsub+0x3f4>
10001590:	3640      	adds	r6, #64	; 0x40
10001592:	1b34      	subs	r4, r6, r4
10001594:	40a3      	lsls	r3, r4
10001596:	001e      	movs	r6, r3
10001598:	4332      	orrs	r2, r6
1000159a:	1e53      	subs	r3, r2, #1
1000159c:	419a      	sbcs	r2, r3
1000159e:	433a      	orrs	r2, r7
100015a0:	2300      	movs	r3, #0
100015a2:	e7e4      	b.n	1000156e <__aeabi_dsub+0x3ca>
100015a4:	431a      	orrs	r2, r3
100015a6:	1e53      	subs	r3, r2, #1
100015a8:	419a      	sbcs	r2, r3
100015aa:	e7f9      	b.n	100015a0 <__aeabi_dsub+0x3fc>
100015ac:	4e66      	ldr	r6, [pc, #408]	; (10001748 <__aeabi_dsub+0x5a4>)
100015ae:	1c65      	adds	r5, r4, #1
100015b0:	4235      	tst	r5, r6
100015b2:	d14e      	bne.n	10001652 <__aeabi_dsub+0x4ae>
100015b4:	0005      	movs	r5, r0
100015b6:	001e      	movs	r6, r3
100015b8:	430d      	orrs	r5, r1
100015ba:	4316      	orrs	r6, r2
100015bc:	2c00      	cmp	r4, #0
100015be:	d127      	bne.n	10001610 <__aeabi_dsub+0x46c>
100015c0:	2e00      	cmp	r6, #0
100015c2:	d10a      	bne.n	100015da <__aeabi_dsub+0x436>
100015c4:	0023      	movs	r3, r4
100015c6:	0022      	movs	r2, r4
100015c8:	9400      	str	r4, [sp, #0]
100015ca:	2d00      	cmp	r5, #0
100015cc:	d100      	bne.n	100015d0 <__aeabi_dsub+0x42c>
100015ce:	e634      	b.n	1000123a <__aeabi_dsub+0x96>
100015d0:	0003      	movs	r3, r0
100015d2:	000a      	movs	r2, r1
100015d4:	4661      	mov	r1, ip
100015d6:	9100      	str	r1, [sp, #0]
100015d8:	e62f      	b.n	1000123a <__aeabi_dsub+0x96>
100015da:	2d00      	cmp	r5, #0
100015dc:	d100      	bne.n	100015e0 <__aeabi_dsub+0x43c>
100015de:	e62c      	b.n	1000123a <__aeabi_dsub+0x96>
100015e0:	1a56      	subs	r6, r2, r1
100015e2:	42b2      	cmp	r2, r6
100015e4:	41bf      	sbcs	r7, r7
100015e6:	1a1d      	subs	r5, r3, r0
100015e8:	427f      	negs	r7, r7
100015ea:	1bed      	subs	r5, r5, r7
100015ec:	2780      	movs	r7, #128	; 0x80
100015ee:	043f      	lsls	r7, r7, #16
100015f0:	423d      	tst	r5, r7
100015f2:	d006      	beq.n	10001602 <__aeabi_dsub+0x45e>
100015f4:	1a8a      	subs	r2, r1, r2
100015f6:	4291      	cmp	r1, r2
100015f8:	4189      	sbcs	r1, r1
100015fa:	1ac3      	subs	r3, r0, r3
100015fc:	4249      	negs	r1, r1
100015fe:	1a5b      	subs	r3, r3, r1
10001600:	e7e8      	b.n	100015d4 <__aeabi_dsub+0x430>
10001602:	0032      	movs	r2, r6
10001604:	432a      	orrs	r2, r5
10001606:	d100      	bne.n	1000160a <__aeabi_dsub+0x466>
10001608:	e08e      	b.n	10001728 <__aeabi_dsub+0x584>
1000160a:	002b      	movs	r3, r5
1000160c:	0032      	movs	r2, r6
1000160e:	e614      	b.n	1000123a <__aeabi_dsub+0x96>
10001610:	2e00      	cmp	r6, #0
10001612:	d108      	bne.n	10001626 <__aeabi_dsub+0x482>
10001614:	2d00      	cmp	r5, #0
10001616:	d100      	bne.n	1000161a <__aeabi_dsub+0x476>
10001618:	e089      	b.n	1000172e <__aeabi_dsub+0x58a>
1000161a:	000a      	movs	r2, r1
1000161c:	4661      	mov	r1, ip
1000161e:	0003      	movs	r3, r0
10001620:	9100      	str	r1, [sp, #0]
10001622:	4c48      	ldr	r4, [pc, #288]	; (10001744 <__aeabi_dsub+0x5a0>)
10001624:	e609      	b.n	1000123a <__aeabi_dsub+0x96>
10001626:	2d00      	cmp	r5, #0
10001628:	d0fb      	beq.n	10001622 <__aeabi_dsub+0x47e>
1000162a:	075c      	lsls	r4, r3, #29
1000162c:	08d2      	lsrs	r2, r2, #3
1000162e:	4322      	orrs	r2, r4
10001630:	2480      	movs	r4, #128	; 0x80
10001632:	08db      	lsrs	r3, r3, #3
10001634:	0324      	lsls	r4, r4, #12
10001636:	4223      	tst	r3, r4
10001638:	d100      	bne.n	1000163c <__aeabi_dsub+0x498>
1000163a:	e6ec      	b.n	10001416 <__aeabi_dsub+0x272>
1000163c:	08c5      	lsrs	r5, r0, #3
1000163e:	4225      	tst	r5, r4
10001640:	d000      	beq.n	10001644 <__aeabi_dsub+0x4a0>
10001642:	e6e8      	b.n	10001416 <__aeabi_dsub+0x272>
10001644:	08ca      	lsrs	r2, r1, #3
10001646:	4661      	mov	r1, ip
10001648:	0740      	lsls	r0, r0, #29
1000164a:	002b      	movs	r3, r5
1000164c:	4302      	orrs	r2, r0
1000164e:	9100      	str	r1, [sp, #0]
10001650:	e6e1      	b.n	10001416 <__aeabi_dsub+0x272>
10001652:	1a56      	subs	r6, r2, r1
10001654:	42b2      	cmp	r2, r6
10001656:	41bf      	sbcs	r7, r7
10001658:	1a1d      	subs	r5, r3, r0
1000165a:	427f      	negs	r7, r7
1000165c:	1bed      	subs	r5, r5, r7
1000165e:	2780      	movs	r7, #128	; 0x80
10001660:	043f      	lsls	r7, r7, #16
10001662:	423d      	tst	r5, r7
10001664:	d02d      	beq.n	100016c2 <__aeabi_dsub+0x51e>
10001666:	1a8e      	subs	r6, r1, r2
10001668:	42b1      	cmp	r1, r6
1000166a:	41ad      	sbcs	r5, r5
1000166c:	1ac3      	subs	r3, r0, r3
1000166e:	426d      	negs	r5, r5
10001670:	1b5d      	subs	r5, r3, r5
10001672:	4663      	mov	r3, ip
10001674:	9300      	str	r3, [sp, #0]
10001676:	2d00      	cmp	r5, #0
10001678:	d029      	beq.n	100016ce <__aeabi_dsub+0x52a>
1000167a:	0028      	movs	r0, r5
1000167c:	f7fe fe38 	bl	100002f0 <__clzsi2>
10001680:	0001      	movs	r1, r0
10001682:	3908      	subs	r1, #8
10001684:	291f      	cmp	r1, #31
10001686:	dc27      	bgt.n	100016d8 <__aeabi_dsub+0x534>
10001688:	2320      	movs	r3, #32
1000168a:	0032      	movs	r2, r6
1000168c:	1a5b      	subs	r3, r3, r1
1000168e:	40da      	lsrs	r2, r3
10001690:	408d      	lsls	r5, r1
10001692:	4315      	orrs	r5, r2
10001694:	0032      	movs	r2, r6
10001696:	408a      	lsls	r2, r1
10001698:	428c      	cmp	r4, r1
1000169a:	dc32      	bgt.n	10001702 <__aeabi_dsub+0x55e>
1000169c:	1b09      	subs	r1, r1, r4
1000169e:	1c4b      	adds	r3, r1, #1
100016a0:	2b1f      	cmp	r3, #31
100016a2:	dc1e      	bgt.n	100016e2 <__aeabi_dsub+0x53e>
100016a4:	2120      	movs	r1, #32
100016a6:	002c      	movs	r4, r5
100016a8:	1ac9      	subs	r1, r1, r3
100016aa:	0010      	movs	r0, r2
100016ac:	408a      	lsls	r2, r1
100016ae:	40dd      	lsrs	r5, r3
100016b0:	408c      	lsls	r4, r1
100016b2:	40d8      	lsrs	r0, r3
100016b4:	1e51      	subs	r1, r2, #1
100016b6:	418a      	sbcs	r2, r1
100016b8:	002b      	movs	r3, r5
100016ba:	4320      	orrs	r0, r4
100016bc:	4302      	orrs	r2, r0
100016be:	2400      	movs	r4, #0
100016c0:	e5bb      	b.n	1000123a <__aeabi_dsub+0x96>
100016c2:	0032      	movs	r2, r6
100016c4:	432a      	orrs	r2, r5
100016c6:	d1d6      	bne.n	10001676 <__aeabi_dsub+0x4d2>
100016c8:	0013      	movs	r3, r2
100016ca:	0014      	movs	r4, r2
100016cc:	e02d      	b.n	1000172a <__aeabi_dsub+0x586>
100016ce:	0030      	movs	r0, r6
100016d0:	f7fe fe0e 	bl	100002f0 <__clzsi2>
100016d4:	3020      	adds	r0, #32
100016d6:	e7d3      	b.n	10001680 <__aeabi_dsub+0x4dc>
100016d8:	0035      	movs	r5, r6
100016da:	3828      	subs	r0, #40	; 0x28
100016dc:	4085      	lsls	r5, r0
100016de:	2200      	movs	r2, #0
100016e0:	e7da      	b.n	10001698 <__aeabi_dsub+0x4f4>
100016e2:	0028      	movs	r0, r5
100016e4:	391f      	subs	r1, #31
100016e6:	40c8      	lsrs	r0, r1
100016e8:	2100      	movs	r1, #0
100016ea:	2b20      	cmp	r3, #32
100016ec:	d003      	beq.n	100016f6 <__aeabi_dsub+0x552>
100016ee:	3140      	adds	r1, #64	; 0x40
100016f0:	1acb      	subs	r3, r1, r3
100016f2:	0029      	movs	r1, r5
100016f4:	4099      	lsls	r1, r3
100016f6:	430a      	orrs	r2, r1
100016f8:	1e53      	subs	r3, r2, #1
100016fa:	419a      	sbcs	r2, r3
100016fc:	2300      	movs	r3, #0
100016fe:	4302      	orrs	r2, r0
10001700:	e7dd      	b.n	100016be <__aeabi_dsub+0x51a>
10001702:	4b12      	ldr	r3, [pc, #72]	; (1000174c <__aeabi_dsub+0x5a8>)
10001704:	1a64      	subs	r4, r4, r1
10001706:	402b      	ands	r3, r5
10001708:	e597      	b.n	1000123a <__aeabi_dsub+0x96>
1000170a:	0003      	movs	r3, r0
1000170c:	000a      	movs	r2, r1
1000170e:	0034      	movs	r4, r6
10001710:	e593      	b.n	1000123a <__aeabi_dsub+0x96>
10001712:	0003      	movs	r3, r0
10001714:	000a      	movs	r2, r1
10001716:	e590      	b.n	1000123a <__aeabi_dsub+0x96>
10001718:	4c0a      	ldr	r4, [pc, #40]	; (10001744 <__aeabi_dsub+0x5a0>)
1000171a:	2300      	movs	r3, #0
1000171c:	001a      	movs	r2, r3
1000171e:	e58c      	b.n	1000123a <__aeabi_dsub+0x96>
10001720:	0003      	movs	r3, r0
10001722:	000a      	movs	r2, r1
10001724:	0034      	movs	r4, r6
10001726:	e755      	b.n	100015d4 <__aeabi_dsub+0x430>
10001728:	0013      	movs	r3, r2
1000172a:	9200      	str	r2, [sp, #0]
1000172c:	e585      	b.n	1000123a <__aeabi_dsub+0x96>
1000172e:	2380      	movs	r3, #128	; 0x80
10001730:	002a      	movs	r2, r5
10001732:	9500      	str	r5, [sp, #0]
10001734:	03db      	lsls	r3, r3, #15
10001736:	e774      	b.n	10001622 <__aeabi_dsub+0x47e>
10001738:	2300      	movs	r3, #0
1000173a:	001a      	movs	r2, r3
1000173c:	e592      	b.n	10001264 <__aeabi_dsub+0xc0>
1000173e:	000b      	movs	r3, r1
10001740:	e59e      	b.n	10001280 <__aeabi_dsub+0xdc>
10001742:	46c0      	nop			; (mov r8, r8)
10001744:	000007ff 	.word	0x000007ff
10001748:	000007fe 	.word	0x000007fe
1000174c:	ff7fffff 	.word	0xff7fffff

10001750 <__aeabi_ui2d>:
10001750:	b510      	push	{r4, lr}
10001752:	0003      	movs	r3, r0
10001754:	0004      	movs	r4, r0
10001756:	1e02      	subs	r2, r0, #0
10001758:	d00c      	beq.n	10001774 <__aeabi_ui2d+0x24>
1000175a:	f7fe fdc9 	bl	100002f0 <__clzsi2>
1000175e:	4a0b      	ldr	r2, [pc, #44]	; (1000178c <__aeabi_ui2d+0x3c>)
10001760:	1a12      	subs	r2, r2, r0
10001762:	280a      	cmp	r0, #10
10001764:	dc0d      	bgt.n	10001782 <__aeabi_ui2d+0x32>
10001766:	230b      	movs	r3, #11
10001768:	0021      	movs	r1, r4
1000176a:	1a1b      	subs	r3, r3, r0
1000176c:	40d9      	lsrs	r1, r3
1000176e:	3015      	adds	r0, #21
10001770:	000b      	movs	r3, r1
10001772:	4084      	lsls	r4, r0
10001774:	031b      	lsls	r3, r3, #12
10001776:	0b1b      	lsrs	r3, r3, #12
10001778:	0512      	lsls	r2, r2, #20
1000177a:	431a      	orrs	r2, r3
1000177c:	0020      	movs	r0, r4
1000177e:	0011      	movs	r1, r2
10001780:	bd10      	pop	{r4, pc}
10001782:	0023      	movs	r3, r4
10001784:	380b      	subs	r0, #11
10001786:	4083      	lsls	r3, r0
10001788:	2400      	movs	r4, #0
1000178a:	e7f3      	b.n	10001774 <__aeabi_ui2d+0x24>
1000178c:	0000041e 	.word	0x0000041e

10001790 <__aeabi_f2d>:
10001790:	22fe      	movs	r2, #254	; 0xfe
10001792:	b570      	push	{r4, r5, r6, lr}
10001794:	0044      	lsls	r4, r0, #1
10001796:	0e24      	lsrs	r4, r4, #24
10001798:	0243      	lsls	r3, r0, #9
1000179a:	1c61      	adds	r1, r4, #1
1000179c:	0a5d      	lsrs	r5, r3, #9
1000179e:	0fc6      	lsrs	r6, r0, #31
100017a0:	4211      	tst	r1, r2
100017a2:	d00d      	beq.n	100017c0 <__aeabi_f2d+0x30>
100017a4:	22e0      	movs	r2, #224	; 0xe0
100017a6:	0092      	lsls	r2, r2, #2
100017a8:	18a4      	adds	r4, r4, r2
100017aa:	0b1b      	lsrs	r3, r3, #12
100017ac:	076d      	lsls	r5, r5, #29
100017ae:	031b      	lsls	r3, r3, #12
100017b0:	0b1b      	lsrs	r3, r3, #12
100017b2:	0524      	lsls	r4, r4, #20
100017b4:	07f6      	lsls	r6, r6, #31
100017b6:	431c      	orrs	r4, r3
100017b8:	4334      	orrs	r4, r6
100017ba:	0028      	movs	r0, r5
100017bc:	0021      	movs	r1, r4
100017be:	bd70      	pop	{r4, r5, r6, pc}
100017c0:	2c00      	cmp	r4, #0
100017c2:	d118      	bne.n	100017f6 <__aeabi_f2d+0x66>
100017c4:	0023      	movs	r3, r4
100017c6:	2d00      	cmp	r5, #0
100017c8:	d0f1      	beq.n	100017ae <__aeabi_f2d+0x1e>
100017ca:	0028      	movs	r0, r5
100017cc:	f7fe fd90 	bl	100002f0 <__clzsi2>
100017d0:	280a      	cmp	r0, #10
100017d2:	dc0a      	bgt.n	100017ea <__aeabi_f2d+0x5a>
100017d4:	230b      	movs	r3, #11
100017d6:	002a      	movs	r2, r5
100017d8:	1a1b      	subs	r3, r3, r0
100017da:	40da      	lsrs	r2, r3
100017dc:	0013      	movs	r3, r2
100017de:	0002      	movs	r2, r0
100017e0:	3215      	adds	r2, #21
100017e2:	4095      	lsls	r5, r2
100017e4:	4c09      	ldr	r4, [pc, #36]	; (1000180c <__aeabi_f2d+0x7c>)
100017e6:	1a24      	subs	r4, r4, r0
100017e8:	e7e1      	b.n	100017ae <__aeabi_f2d+0x1e>
100017ea:	0003      	movs	r3, r0
100017ec:	3b0b      	subs	r3, #11
100017ee:	409d      	lsls	r5, r3
100017f0:	002b      	movs	r3, r5
100017f2:	0025      	movs	r5, r4
100017f4:	e7f6      	b.n	100017e4 <__aeabi_f2d+0x54>
100017f6:	2d00      	cmp	r5, #0
100017f8:	d006      	beq.n	10001808 <__aeabi_f2d+0x78>
100017fa:	2480      	movs	r4, #128	; 0x80
100017fc:	0b1b      	lsrs	r3, r3, #12
100017fe:	0324      	lsls	r4, r4, #12
10001800:	076d      	lsls	r5, r5, #29
10001802:	4323      	orrs	r3, r4
10001804:	4c02      	ldr	r4, [pc, #8]	; (10001810 <__aeabi_f2d+0x80>)
10001806:	e7d2      	b.n	100017ae <__aeabi_f2d+0x1e>
10001808:	002b      	movs	r3, r5
1000180a:	e7fb      	b.n	10001804 <__aeabi_f2d+0x74>
1000180c:	00000389 	.word	0x00000389
10001810:	000007ff 	.word	0x000007ff

10001814 <__aeabi_d2f>:
10001814:	b570      	push	{r4, r5, r6, lr}
10001816:	0005      	movs	r5, r0
10001818:	000a      	movs	r2, r1
1000181a:	0308      	lsls	r0, r1, #12
1000181c:	0049      	lsls	r1, r1, #1
1000181e:	0d49      	lsrs	r1, r1, #21
10001820:	4c39      	ldr	r4, [pc, #228]	; (10001908 <__aeabi_d2f+0xf4>)
10001822:	0f6b      	lsrs	r3, r5, #29
10001824:	0a40      	lsrs	r0, r0, #9
10001826:	1c4e      	adds	r6, r1, #1
10001828:	4318      	orrs	r0, r3
1000182a:	0fd2      	lsrs	r2, r2, #31
1000182c:	00eb      	lsls	r3, r5, #3
1000182e:	4226      	tst	r6, r4
10001830:	d054      	beq.n	100018dc <__aeabi_d2f+0xc8>
10001832:	4c36      	ldr	r4, [pc, #216]	; (1000190c <__aeabi_d2f+0xf8>)
10001834:	190c      	adds	r4, r1, r4
10001836:	2cfe      	cmp	r4, #254	; 0xfe
10001838:	dc5e      	bgt.n	100018f8 <__aeabi_d2f+0xe4>
1000183a:	2c00      	cmp	r4, #0
1000183c:	dc45      	bgt.n	100018ca <__aeabi_d2f+0xb6>
1000183e:	0025      	movs	r5, r4
10001840:	3517      	adds	r5, #23
10001842:	db5c      	blt.n	100018fe <__aeabi_d2f+0xea>
10001844:	2580      	movs	r5, #128	; 0x80
10001846:	042d      	lsls	r5, r5, #16
10001848:	4328      	orrs	r0, r5
1000184a:	251e      	movs	r5, #30
1000184c:	1b2d      	subs	r5, r5, r4
1000184e:	2d1f      	cmp	r5, #31
10001850:	dc2a      	bgt.n	100018a8 <__aeabi_d2f+0x94>
10001852:	4c2f      	ldr	r4, [pc, #188]	; (10001910 <__aeabi_d2f+0xfc>)
10001854:	1909      	adds	r1, r1, r4
10001856:	001c      	movs	r4, r3
10001858:	408b      	lsls	r3, r1
1000185a:	40ec      	lsrs	r4, r5
1000185c:	4088      	lsls	r0, r1
1000185e:	1e5d      	subs	r5, r3, #1
10001860:	41ab      	sbcs	r3, r5
10001862:	4303      	orrs	r3, r0
10001864:	4323      	orrs	r3, r4
10001866:	2100      	movs	r1, #0
10001868:	0758      	lsls	r0, r3, #29
1000186a:	d004      	beq.n	10001876 <__aeabi_d2f+0x62>
1000186c:	200f      	movs	r0, #15
1000186e:	4018      	ands	r0, r3
10001870:	2804      	cmp	r0, #4
10001872:	d000      	beq.n	10001876 <__aeabi_d2f+0x62>
10001874:	3304      	adds	r3, #4
10001876:	0158      	lsls	r0, r3, #5
10001878:	d504      	bpl.n	10001884 <__aeabi_d2f+0x70>
1000187a:	3101      	adds	r1, #1
1000187c:	29ff      	cmp	r1, #255	; 0xff
1000187e:	d041      	beq.n	10001904 <__aeabi_d2f+0xf0>
10001880:	4824      	ldr	r0, [pc, #144]	; (10001914 <__aeabi_d2f+0x100>)
10001882:	4003      	ands	r3, r0
10001884:	08db      	lsrs	r3, r3, #3
10001886:	29ff      	cmp	r1, #255	; 0xff
10001888:	d104      	bne.n	10001894 <__aeabi_d2f+0x80>
1000188a:	2b00      	cmp	r3, #0
1000188c:	d002      	beq.n	10001894 <__aeabi_d2f+0x80>
1000188e:	2080      	movs	r0, #128	; 0x80
10001890:	03c0      	lsls	r0, r0, #15
10001892:	4303      	orrs	r3, r0
10001894:	05c8      	lsls	r0, r1, #23
10001896:	21ff      	movs	r1, #255	; 0xff
10001898:	05c9      	lsls	r1, r1, #23
1000189a:	025b      	lsls	r3, r3, #9
1000189c:	4008      	ands	r0, r1
1000189e:	0a5b      	lsrs	r3, r3, #9
100018a0:	4303      	orrs	r3, r0
100018a2:	07d0      	lsls	r0, r2, #31
100018a4:	4318      	orrs	r0, r3
100018a6:	bd70      	pop	{r4, r5, r6, pc}
100018a8:	2602      	movs	r6, #2
100018aa:	4276      	negs	r6, r6
100018ac:	1b34      	subs	r4, r6, r4
100018ae:	0006      	movs	r6, r0
100018b0:	40e6      	lsrs	r6, r4
100018b2:	2400      	movs	r4, #0
100018b4:	2d20      	cmp	r5, #32
100018b6:	d003      	beq.n	100018c0 <__aeabi_d2f+0xac>
100018b8:	4c17      	ldr	r4, [pc, #92]	; (10001918 <__aeabi_d2f+0x104>)
100018ba:	1909      	adds	r1, r1, r4
100018bc:	4088      	lsls	r0, r1
100018be:	0004      	movs	r4, r0
100018c0:	4323      	orrs	r3, r4
100018c2:	1e59      	subs	r1, r3, #1
100018c4:	418b      	sbcs	r3, r1
100018c6:	4333      	orrs	r3, r6
100018c8:	e7cd      	b.n	10001866 <__aeabi_d2f+0x52>
100018ca:	0f59      	lsrs	r1, r3, #29
100018cc:	01ab      	lsls	r3, r5, #6
100018ce:	1e5d      	subs	r5, r3, #1
100018d0:	41ab      	sbcs	r3, r5
100018d2:	00c0      	lsls	r0, r0, #3
100018d4:	4303      	orrs	r3, r0
100018d6:	430b      	orrs	r3, r1
100018d8:	0021      	movs	r1, r4
100018da:	e7c5      	b.n	10001868 <__aeabi_d2f+0x54>
100018dc:	4303      	orrs	r3, r0
100018de:	2900      	cmp	r1, #0
100018e0:	d102      	bne.n	100018e8 <__aeabi_d2f+0xd4>
100018e2:	1e58      	subs	r0, r3, #1
100018e4:	4183      	sbcs	r3, r0
100018e6:	e7bf      	b.n	10001868 <__aeabi_d2f+0x54>
100018e8:	21ff      	movs	r1, #255	; 0xff
100018ea:	2b00      	cmp	r3, #0
100018ec:	d0bc      	beq.n	10001868 <__aeabi_d2f+0x54>
100018ee:	2380      	movs	r3, #128	; 0x80
100018f0:	00c0      	lsls	r0, r0, #3
100018f2:	049b      	lsls	r3, r3, #18
100018f4:	4303      	orrs	r3, r0
100018f6:	e7b7      	b.n	10001868 <__aeabi_d2f+0x54>
100018f8:	21ff      	movs	r1, #255	; 0xff
100018fa:	2300      	movs	r3, #0
100018fc:	e7b4      	b.n	10001868 <__aeabi_d2f+0x54>
100018fe:	2100      	movs	r1, #0
10001900:	2301      	movs	r3, #1
10001902:	e7b1      	b.n	10001868 <__aeabi_d2f+0x54>
10001904:	2300      	movs	r3, #0
10001906:	e7bd      	b.n	10001884 <__aeabi_d2f+0x70>
10001908:	000007fe 	.word	0x000007fe
1000190c:	fffffc80 	.word	0xfffffc80
10001910:	fffffc82 	.word	0xfffffc82
10001914:	fbffffff 	.word	0xfbffffff
10001918:	fffffca2 	.word	0xfffffca2

1000191c <__gnu_thumb1_case_uhi>:
1000191c:	b403      	push	{r0, r1}
1000191e:	4671      	mov	r1, lr
10001920:	0849      	lsrs	r1, r1, #1
10001922:	0040      	lsls	r0, r0, #1
10001924:	0049      	lsls	r1, r1, #1
10001926:	5a09      	ldrh	r1, [r1, r0]
10001928:	0049      	lsls	r1, r1, #1
1000192a:	448e      	add	lr, r1
1000192c:	bc03      	pop	{r0, r1}
1000192e:	4770      	bx	lr

10001930 <__aeabi_llsr>:
10001930:	40d0      	lsrs	r0, r2
10001932:	000b      	movs	r3, r1
10001934:	40d1      	lsrs	r1, r2
10001936:	469c      	mov	ip, r3
10001938:	3a20      	subs	r2, #32
1000193a:	40d3      	lsrs	r3, r2
1000193c:	4318      	orrs	r0, r3
1000193e:	4252      	negs	r2, r2
10001940:	4663      	mov	r3, ip
10001942:	4093      	lsls	r3, r2
10001944:	4318      	orrs	r0, r3
10001946:	4770      	bx	lr

10001948 <__aeabi_llsl>:
10001948:	4091      	lsls	r1, r2
1000194a:	0003      	movs	r3, r0
1000194c:	4090      	lsls	r0, r2
1000194e:	469c      	mov	ip, r3
10001950:	3a20      	subs	r2, #32
10001952:	4093      	lsls	r3, r2
10001954:	4319      	orrs	r1, r3
10001956:	4252      	negs	r2, r2
10001958:	4663      	mov	r3, ip
1000195a:	40d3      	lsrs	r3, r2
1000195c:	4319      	orrs	r1, r3
1000195e:	4770      	bx	lr

10001960 <__clzdi2>:
10001960:	b510      	push	{r4, lr}
10001962:	2900      	cmp	r1, #0
10001964:	d103      	bne.n	1000196e <__clzdi2+0xe>
10001966:	f7fe fcc3 	bl	100002f0 <__clzsi2>
1000196a:	3020      	adds	r0, #32
1000196c:	e002      	b.n	10001974 <__clzdi2+0x14>
1000196e:	0008      	movs	r0, r1
10001970:	f7fe fcbe 	bl	100002f0 <__clzsi2>
10001974:	bd10      	pop	{r4, pc}
10001976:	46c0      	nop			; (mov r8, r8)

10001978 <__aeabi_d2uiz>:
10001978:	b570      	push	{r4, r5, r6, lr}
1000197a:	2200      	movs	r2, #0
1000197c:	4b0b      	ldr	r3, [pc, #44]	; (100019ac <__aeabi_d2uiz+0x34>)
1000197e:	0004      	movs	r4, r0
10001980:	000d      	movs	r5, r1
10001982:	f7fe fcab 	bl	100002dc <__aeabi_dcmpge>
10001986:	2800      	cmp	r0, #0
10001988:	d00b      	beq.n	100019a2 <__aeabi_d2uiz+0x2a>
1000198a:	4b08      	ldr	r3, [pc, #32]	; (100019ac <__aeabi_d2uiz+0x34>)
1000198c:	2200      	movs	r2, #0
1000198e:	0020      	movs	r0, r4
10001990:	0029      	movs	r1, r5
10001992:	f7ff fc07 	bl	100011a4 <__aeabi_dsub>
10001996:	f000 f80b 	bl	100019b0 <__aeabi_d2iz>
1000199a:	2380      	movs	r3, #128	; 0x80
1000199c:	061b      	lsls	r3, r3, #24
1000199e:	18c0      	adds	r0, r0, r3
100019a0:	bd70      	pop	{r4, r5, r6, pc}
100019a2:	0020      	movs	r0, r4
100019a4:	0029      	movs	r1, r5
100019a6:	f000 f803 	bl	100019b0 <__aeabi_d2iz>
100019aa:	e7f9      	b.n	100019a0 <__aeabi_d2uiz+0x28>
100019ac:	41e00000 	.word	0x41e00000

100019b0 <__aeabi_d2iz>:
100019b0:	000a      	movs	r2, r1
100019b2:	b530      	push	{r4, r5, lr}
100019b4:	4d11      	ldr	r5, [pc, #68]	; (100019fc <__aeabi_d2iz+0x4c>)
100019b6:	0053      	lsls	r3, r2, #1
100019b8:	0309      	lsls	r1, r1, #12
100019ba:	0004      	movs	r4, r0
100019bc:	0b09      	lsrs	r1, r1, #12
100019be:	2000      	movs	r0, #0
100019c0:	0d5b      	lsrs	r3, r3, #21
100019c2:	0fd2      	lsrs	r2, r2, #31
100019c4:	42ab      	cmp	r3, r5
100019c6:	dd04      	ble.n	100019d2 <__aeabi_d2iz+0x22>
100019c8:	480d      	ldr	r0, [pc, #52]	; (10001a00 <__aeabi_d2iz+0x50>)
100019ca:	4283      	cmp	r3, r0
100019cc:	dd02      	ble.n	100019d4 <__aeabi_d2iz+0x24>
100019ce:	4b0d      	ldr	r3, [pc, #52]	; (10001a04 <__aeabi_d2iz+0x54>)
100019d0:	18d0      	adds	r0, r2, r3
100019d2:	bd30      	pop	{r4, r5, pc}
100019d4:	2080      	movs	r0, #128	; 0x80
100019d6:	0340      	lsls	r0, r0, #13
100019d8:	4308      	orrs	r0, r1
100019da:	490b      	ldr	r1, [pc, #44]	; (10001a08 <__aeabi_d2iz+0x58>)
100019dc:	1ac9      	subs	r1, r1, r3
100019de:	291f      	cmp	r1, #31
100019e0:	dc08      	bgt.n	100019f4 <__aeabi_d2iz+0x44>
100019e2:	4d0a      	ldr	r5, [pc, #40]	; (10001a0c <__aeabi_d2iz+0x5c>)
100019e4:	40cc      	lsrs	r4, r1
100019e6:	195b      	adds	r3, r3, r5
100019e8:	4098      	lsls	r0, r3
100019ea:	4320      	orrs	r0, r4
100019ec:	2a00      	cmp	r2, #0
100019ee:	d0f0      	beq.n	100019d2 <__aeabi_d2iz+0x22>
100019f0:	4240      	negs	r0, r0
100019f2:	e7ee      	b.n	100019d2 <__aeabi_d2iz+0x22>
100019f4:	4906      	ldr	r1, [pc, #24]	; (10001a10 <__aeabi_d2iz+0x60>)
100019f6:	1acb      	subs	r3, r1, r3
100019f8:	40d8      	lsrs	r0, r3
100019fa:	e7f7      	b.n	100019ec <__aeabi_d2iz+0x3c>
100019fc:	000003fe 	.word	0x000003fe
10001a00:	0000041d 	.word	0x0000041d
10001a04:	7fffffff 	.word	0x7fffffff
10001a08:	00000433 	.word	0x00000433
10001a0c:	fffffbed 	.word	0xfffffbed
10001a10:	00000413 	.word	0x00000413

10001a14 <__aeabi_lmul>:
10001a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001a16:	9301      	str	r3, [sp, #4]
10001a18:	b283      	uxth	r3, r0
10001a1a:	469c      	mov	ip, r3
10001a1c:	0006      	movs	r6, r0
10001a1e:	0c03      	lsrs	r3, r0, #16
10001a20:	4660      	mov	r0, ip
10001a22:	000d      	movs	r5, r1
10001a24:	4661      	mov	r1, ip
10001a26:	b297      	uxth	r7, r2
10001a28:	4378      	muls	r0, r7
10001a2a:	0c14      	lsrs	r4, r2, #16
10001a2c:	435f      	muls	r7, r3
10001a2e:	4363      	muls	r3, r4
10001a30:	434c      	muls	r4, r1
10001a32:	0c01      	lsrs	r1, r0, #16
10001a34:	468c      	mov	ip, r1
10001a36:	19e4      	adds	r4, r4, r7
10001a38:	4464      	add	r4, ip
10001a3a:	42a7      	cmp	r7, r4
10001a3c:	d902      	bls.n	10001a44 <__aeabi_lmul+0x30>
10001a3e:	2180      	movs	r1, #128	; 0x80
10001a40:	0249      	lsls	r1, r1, #9
10001a42:	185b      	adds	r3, r3, r1
10001a44:	9901      	ldr	r1, [sp, #4]
10001a46:	436a      	muls	r2, r5
10001a48:	4371      	muls	r1, r6
10001a4a:	0c27      	lsrs	r7, r4, #16
10001a4c:	18fb      	adds	r3, r7, r3
10001a4e:	0424      	lsls	r4, r4, #16
10001a50:	18c9      	adds	r1, r1, r3
10001a52:	b280      	uxth	r0, r0
10001a54:	1820      	adds	r0, r4, r0
10001a56:	1889      	adds	r1, r1, r2
10001a58:	b003      	add	sp, #12
10001a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001a5c <__udivmoddi4>:
10001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001a5e:	0006      	movs	r6, r0
10001a60:	000f      	movs	r7, r1
10001a62:	0015      	movs	r5, r2
10001a64:	001c      	movs	r4, r3
10001a66:	b085      	sub	sp, #20
10001a68:	428b      	cmp	r3, r1
10001a6a:	d863      	bhi.n	10001b34 <__udivmoddi4+0xd8>
10001a6c:	d101      	bne.n	10001a72 <__udivmoddi4+0x16>
10001a6e:	4282      	cmp	r2, r0
10001a70:	d860      	bhi.n	10001b34 <__udivmoddi4+0xd8>
10001a72:	0021      	movs	r1, r4
10001a74:	0028      	movs	r0, r5
10001a76:	f7ff ff73 	bl	10001960 <__clzdi2>
10001a7a:	0039      	movs	r1, r7
10001a7c:	9000      	str	r0, [sp, #0]
10001a7e:	0030      	movs	r0, r6
10001a80:	f7ff ff6e 	bl	10001960 <__clzdi2>
10001a84:	9b00      	ldr	r3, [sp, #0]
10001a86:	0021      	movs	r1, r4
10001a88:	1a1b      	subs	r3, r3, r0
10001a8a:	001a      	movs	r2, r3
10001a8c:	0028      	movs	r0, r5
10001a8e:	9303      	str	r3, [sp, #12]
10001a90:	f7ff ff5a 	bl	10001948 <__aeabi_llsl>
10001a94:	9000      	str	r0, [sp, #0]
10001a96:	9101      	str	r1, [sp, #4]
10001a98:	42b9      	cmp	r1, r7
10001a9a:	d845      	bhi.n	10001b28 <__udivmoddi4+0xcc>
10001a9c:	d101      	bne.n	10001aa2 <__udivmoddi4+0x46>
10001a9e:	42b0      	cmp	r0, r6
10001aa0:	d842      	bhi.n	10001b28 <__udivmoddi4+0xcc>
10001aa2:	9b00      	ldr	r3, [sp, #0]
10001aa4:	9c01      	ldr	r4, [sp, #4]
10001aa6:	2001      	movs	r0, #1
10001aa8:	2100      	movs	r1, #0
10001aaa:	9a03      	ldr	r2, [sp, #12]
10001aac:	1af6      	subs	r6, r6, r3
10001aae:	41a7      	sbcs	r7, r4
10001ab0:	f7ff ff4a 	bl	10001948 <__aeabi_llsl>
10001ab4:	0004      	movs	r4, r0
10001ab6:	000d      	movs	r5, r1
10001ab8:	9b03      	ldr	r3, [sp, #12]
10001aba:	2b00      	cmp	r3, #0
10001abc:	d02b      	beq.n	10001b16 <__udivmoddi4+0xba>
10001abe:	9b01      	ldr	r3, [sp, #4]
10001ac0:	9a00      	ldr	r2, [sp, #0]
10001ac2:	07db      	lsls	r3, r3, #31
10001ac4:	0850      	lsrs	r0, r2, #1
10001ac6:	4318      	orrs	r0, r3
10001ac8:	9b01      	ldr	r3, [sp, #4]
10001aca:	0859      	lsrs	r1, r3, #1
10001acc:	9b03      	ldr	r3, [sp, #12]
10001ace:	469c      	mov	ip, r3
10001ad0:	42b9      	cmp	r1, r7
10001ad2:	d82c      	bhi.n	10001b2e <__udivmoddi4+0xd2>
10001ad4:	d101      	bne.n	10001ada <__udivmoddi4+0x7e>
10001ad6:	42b0      	cmp	r0, r6
10001ad8:	d829      	bhi.n	10001b2e <__udivmoddi4+0xd2>
10001ada:	0032      	movs	r2, r6
10001adc:	003b      	movs	r3, r7
10001ade:	1a12      	subs	r2, r2, r0
10001ae0:	418b      	sbcs	r3, r1
10001ae2:	2601      	movs	r6, #1
10001ae4:	1892      	adds	r2, r2, r2
10001ae6:	415b      	adcs	r3, r3
10001ae8:	2700      	movs	r7, #0
10001aea:	18b6      	adds	r6, r6, r2
10001aec:	415f      	adcs	r7, r3
10001aee:	2301      	movs	r3, #1
10001af0:	425b      	negs	r3, r3
10001af2:	449c      	add	ip, r3
10001af4:	4663      	mov	r3, ip
10001af6:	2b00      	cmp	r3, #0
10001af8:	d1ea      	bne.n	10001ad0 <__udivmoddi4+0x74>
10001afa:	0030      	movs	r0, r6
10001afc:	0039      	movs	r1, r7
10001afe:	9a03      	ldr	r2, [sp, #12]
10001b00:	f7ff ff16 	bl	10001930 <__aeabi_llsr>
10001b04:	9a03      	ldr	r2, [sp, #12]
10001b06:	19a4      	adds	r4, r4, r6
10001b08:	417d      	adcs	r5, r7
10001b0a:	0006      	movs	r6, r0
10001b0c:	000f      	movs	r7, r1
10001b0e:	f7ff ff1b 	bl	10001948 <__aeabi_llsl>
10001b12:	1a24      	subs	r4, r4, r0
10001b14:	418d      	sbcs	r5, r1
10001b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001b18:	2b00      	cmp	r3, #0
10001b1a:	d001      	beq.n	10001b20 <__udivmoddi4+0xc4>
10001b1c:	601e      	str	r6, [r3, #0]
10001b1e:	605f      	str	r7, [r3, #4]
10001b20:	0020      	movs	r0, r4
10001b22:	0029      	movs	r1, r5
10001b24:	b005      	add	sp, #20
10001b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001b28:	2400      	movs	r4, #0
10001b2a:	2500      	movs	r5, #0
10001b2c:	e7c4      	b.n	10001ab8 <__udivmoddi4+0x5c>
10001b2e:	19b6      	adds	r6, r6, r6
10001b30:	417f      	adcs	r7, r7
10001b32:	e7dc      	b.n	10001aee <__udivmoddi4+0x92>
10001b34:	2400      	movs	r4, #0
10001b36:	2500      	movs	r5, #0
10001b38:	e7ed      	b.n	10001b16 <__udivmoddi4+0xba>
	...

10001b3c <main>:
/* Function prototype ------------------------------------------------------------------------------------------------------------------------------------*/
/* Setup -------------------------------------------------------------------------------------------------------------------------------------------------*/
/* -------------------------------------------------------------------------------------------------------------------------------------------------------*/


void main(void) {	
10001b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001b3e:	b0b5      	sub	sp, #212	; 0xd4
	
	motor_uSetup();
10001b40:	f000 f894 	bl	10001c6c <motor_uSetup>
	gprs_vSetup();
10001b44:	f000 f9c8 	bl	10001ed8 <gprs_vSetup>
	led_vSetup();
10001b48:	f000 f906 	bl	10001d58 <led_vSetup>
	comm_vSetup();
10001b4c:	f000 f96e 	bl	10001e2c <comm_vSetup>

	motor_vTurnoff(M1A, M1B);
10001b50:	2101      	movs	r1, #1
10001b52:	2000      	movs	r0, #0
10001b54:	f000 f8dc 	bl	10001d10 <motor_vTurnoff>
	motor_vTurnoff(M2A, M2B);
10001b58:	2103      	movs	r1, #3
10001b5a:	2002      	movs	r0, #2
10001b5c:	f000 f8d8 	bl	10001d10 <motor_vTurnoff>
	motor_vTurnoff(M3A, M3B);
10001b60:	2105      	movs	r1, #5
10001b62:	2004      	movs	r0, #4
10001b64:	f000 f8d4 	bl	10001d10 <motor_vTurnoff>
	motor_vTurnoff(M4A, M4B);
10001b68:	2107      	movs	r1, #7
10001b6a:	2006      	movs	r0, #6
10001b6c:	f000 f8d0 	bl	10001d10 <motor_vTurnoff>

	printk("started \r\n");
10001b70:	4839      	ldr	r0, [pc, #228]	; (10001c58 <main+0x11c>)
10001b72:	f002 fe2b 	bl	100047cc <printk>

	gprs_vDisable();
10001b76:	f002 fe1b 	bl	100047b0 <gprs_vDisable>


	char bff[UART_MESSAGE_SIZE] = "";
10001b7a:	2100      	movs	r1, #0
10001b7c:	22c8      	movs	r2, #200	; 0xc8
10001b7e:	a802      	add	r0, sp, #8
10001b80:	9101      	str	r1, [sp, #4]

	while (true) {

		comm_vGetMessage(UART0, bff, K_FOREVER);
10001b82:	2401      	movs	r4, #1
10001b84:	4264      	negs	r4, r4
10001b86:	17e5      	asrs	r5, r4, #31
	char bff[UART_MESSAGE_SIZE] = "";
10001b88:	f003 f8a1 	bl	10004cce <memset>
		comm_vGetMessage(UART0, bff, K_FOREVER);
10001b8c:	0022      	movs	r2, r4
10001b8e:	002b      	movs	r3, r5
10001b90:	2000      	movs	r0, #0
10001b92:	a901      	add	r1, sp, #4
10001b94:	f000 f900 	bl	10001d98 <comm_vGetMessage>

		comm_uSendStringLn(UART0, bff);
10001b98:	2000      	movs	r0, #0
10001b9a:	a901      	add	r1, sp, #4
10001b9c:	f000 f916 	bl	10001dcc <comm_uSendStringLn>

		if (textp_bFindString(bff, "toFront") ) { 
10001ba0:	492e      	ldr	r1, [pc, #184]	; (10001c5c <main+0x120>)
10001ba2:	a801      	add	r0, sp, #4
10001ba4:	f002 fe09 	bl	100047ba <textp_bFindString>
10001ba8:	1e06      	subs	r6, r0, #0
10001baa:	d010      	beq.n	10001bce <main+0x92>

			motor_vToFront(M1A, M1B);
10001bac:	2101      	movs	r1, #1
10001bae:	2000      	movs	r0, #0
10001bb0:	f000 f88e 	bl	10001cd0 <motor_vToFront>
			motor_vToFront(M2A, M2B);
10001bb4:	2103      	movs	r1, #3
10001bb6:	2002      	movs	r0, #2
10001bb8:	f000 f88a 	bl	10001cd0 <motor_vToFront>
		} else if (textp_bFindString(bff, "turnRight") ) {
		
			motor_vToBack(M1A, M1B);
			motor_vToBack(M2A, M2B);

			motor_vToFront(M3A, M3B);
10001bbc:	2105      	movs	r1, #5
10001bbe:	2004      	movs	r0, #4
10001bc0:	f000 f886 	bl	10001cd0 <motor_vToFront>
			motor_vToFront(M4A, M4B);
10001bc4:	2107      	movs	r1, #7
10001bc6:	2006      	movs	r0, #6
10001bc8:	f000 f882 	bl	10001cd0 <motor_vToFront>
10001bcc:	e7de      	b.n	10001b8c <main+0x50>
		} else if (textp_bFindString(bff, "toBack") ) {
10001bce:	4924      	ldr	r1, [pc, #144]	; (10001c60 <main+0x124>)
10001bd0:	a801      	add	r0, sp, #4
10001bd2:	f002 fdf2 	bl	100047ba <textp_bFindString>
10001bd6:	1e07      	subs	r7, r0, #0
10001bd8:	d010      	beq.n	10001bfc <main+0xc0>
			motor_vToBack(M1A, M1B);
10001bda:	2101      	movs	r1, #1
10001bdc:	0030      	movs	r0, r6
10001bde:	f000 f887 	bl	10001cf0 <motor_vToBack>
			motor_vToBack(M2A, M2B);
10001be2:	2103      	movs	r1, #3
10001be4:	2002      	movs	r0, #2
10001be6:	f000 f883 	bl	10001cf0 <motor_vToBack>
			motor_vToBack(M3A, M3B);
10001bea:	2105      	movs	r1, #5
10001bec:	2004      	movs	r0, #4
10001bee:	f000 f87f 	bl	10001cf0 <motor_vToBack>
			motor_vToBack(M4A, M4B);
10001bf2:	2107      	movs	r1, #7
10001bf4:	2006      	movs	r0, #6
10001bf6:	f000 f87b 	bl	10001cf0 <motor_vToBack>
10001bfa:	e7c7      	b.n	10001b8c <main+0x50>
		} else if (textp_bFindString(bff, "turnLeft") ) {
10001bfc:	4919      	ldr	r1, [pc, #100]	; (10001c64 <main+0x128>)
10001bfe:	a801      	add	r0, sp, #4
10001c00:	f002 fddb 	bl	100047ba <textp_bFindString>
10001c04:	1e06      	subs	r6, r0, #0
10001c06:	d008      	beq.n	10001c1a <main+0xde>
			motor_vToFront(M1A, M1B);
10001c08:	0038      	movs	r0, r7
10001c0a:	2101      	movs	r1, #1
10001c0c:	f000 f860 	bl	10001cd0 <motor_vToFront>
			motor_vToFront(M2A, M2B);
10001c10:	2103      	movs	r1, #3
10001c12:	2002      	movs	r0, #2
10001c14:	f000 f85c 	bl	10001cd0 <motor_vToFront>
10001c18:	e7e7      	b.n	10001bea <main+0xae>
		} else if (textp_bFindString(bff, "turnRight") ) {
10001c1a:	4913      	ldr	r1, [pc, #76]	; (10001c68 <main+0x12c>)
10001c1c:	a801      	add	r0, sp, #4
10001c1e:	f002 fdcc 	bl	100047ba <textp_bFindString>
			motor_vToBack(M1A, M1B);
10001c22:	2101      	movs	r1, #1
		} else if (textp_bFindString(bff, "turnRight") ) {
10001c24:	2800      	cmp	r0, #0
10001c26:	d007      	beq.n	10001c38 <main+0xfc>
			motor_vToBack(M1A, M1B);
10001c28:	0030      	movs	r0, r6
10001c2a:	f000 f861 	bl	10001cf0 <motor_vToBack>
			motor_vToBack(M2A, M2B);
10001c2e:	2103      	movs	r1, #3
10001c30:	2002      	movs	r0, #2
10001c32:	f000 f85d 	bl	10001cf0 <motor_vToBack>
10001c36:	e7c1      	b.n	10001bbc <main+0x80>
		
		} else /*if (textp_bFindString(bff,"turnoff") )*/ {


			motor_vTurnoff(M1A, M1B);
10001c38:	f000 f86a 	bl	10001d10 <motor_vTurnoff>
			motor_vTurnoff(M2A, M2B);
10001c3c:	2103      	movs	r1, #3
10001c3e:	2002      	movs	r0, #2
10001c40:	f000 f866 	bl	10001d10 <motor_vTurnoff>
			motor_vTurnoff(M3A, M3B);
10001c44:	2105      	movs	r1, #5
10001c46:	2004      	movs	r0, #4
10001c48:	f000 f862 	bl	10001d10 <motor_vTurnoff>
			motor_vTurnoff(M4A, M4B);
10001c4c:	2107      	movs	r1, #7
10001c4e:	2006      	movs	r0, #6
10001c50:	f000 f85e 	bl	10001d10 <motor_vTurnoff>
	while (true) {
10001c54:	e79a      	b.n	10001b8c <main+0x50>
10001c56:	46c0      	nop			; (mov r8, r8)
10001c58:	10005da0 	.word	0x10005da0
10001c5c:	10005dab 	.word	0x10005dab
10001c60:	10005db3 	.word	0x10005db3
10001c64:	10005dba 	.word	0x10005dba
10001c68:	10005dc3 	.word	0x10005dc3

10001c6c <motor_uSetup>:
	GPIO_DT_SPEC_GET(M4B_NODE, gpios)
};

/* -------------------------------------------------------------------------------------------------------------------------------------------------------*/

uint8_t motor_uSetup(void){
10001c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001c6e:	4c16      	ldr	r4, [pc, #88]	; (10001cc8 <motor_uSetup+0x5c>)

	for(uint8_t i = M1A; i<QTY_MOTORS; i++ ){
		if (!device_is_ready(scxMotors[i].port)) return 1;
10001c70:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
10001c72:	f003 fc7c 	bl	1000556e <z_device_is_ready>
10001c76:	2800      	cmp	r0, #0
10001c78:	d024      	beq.n	10001cc4 <motor_uSetup+0x58>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
10001c7a:	22c0      	movs	r2, #192	; 0xc0
				  spec->pin,
				  spec->dt_flags | extra_flags);
10001c7c:	88e7      	ldrh	r7, [r4, #6]
	return gpio_pin_configure(spec->port,
10001c7e:	02d2      	lsls	r2, r2, #11
10001c80:	433a      	orrs	r2, r7
10001c82:	6820      	ldr	r0, [r4, #0]
10001c84:	7921      	ldrb	r1, [r4, #4]
10001c86:	9201      	str	r2, [sp, #4]
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001c88:	2601      	movs	r6, #1
	const struct gpio_driver_api *api =
10001c8a:	6883      	ldr	r3, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001c8c:	408e      	lsls	r6, r1
	const struct gpio_driver_api *api =
10001c8e:	469c      	mov	ip, r3
	struct gpio_driver_data *data =
10001c90:	6903      	ldr	r3, [r0, #16]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
10001c92:	681d      	ldr	r5, [r3, #0]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10001c94:	002a      	movs	r2, r5
10001c96:	43b2      	bics	r2, r6
10001c98:	9200      	str	r2, [sp, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
10001c9a:	2201      	movs	r2, #1
10001c9c:	4217      	tst	r7, r2
10001c9e:	d001      	beq.n	10001ca4 <motor_uSetup+0x38>
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001ca0:	432e      	orrs	r6, r5
10001ca2:	9600      	str	r6, [sp, #0]
10001ca4:	9a00      	ldr	r2, [sp, #0]
10001ca6:	601a      	str	r2, [r3, #0]
	return api->pin_configure(port, pin, flags);
10001ca8:	4663      	mov	r3, ip
10001caa:	9a01      	ldr	r2, [sp, #4]
10001cac:	681b      	ldr	r3, [r3, #0]
10001cae:	4798      	blx	r3
		
		gpio_pin_configure_dt(&scxMotors[i], GPIO_OUTPUT_LOW);
		gpio_pin_set_dt(&scxMotors[i], false);
10001cb0:	0020      	movs	r0, r4
10001cb2:	2100      	movs	r1, #0
10001cb4:	f002 fcef 	bl	10004696 <gpio_pin_set_dt.isra.0>
	for(uint8_t i = M1A; i<QTY_MOTORS; i++ ){
10001cb8:	4b04      	ldr	r3, [pc, #16]	; (10001ccc <motor_uSetup+0x60>)
10001cba:	3408      	adds	r4, #8
10001cbc:	42a3      	cmp	r3, r4
10001cbe:	d1d7      	bne.n	10001c70 <motor_uSetup+0x4>
	}

	return 0;
10001cc0:	2000      	movs	r0, #0
}
10001cc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (!device_is_ready(scxMotors[i].port)) return 1;
10001cc4:	2001      	movs	r0, #1
10001cc6:	e7fc      	b.n	10001cc2 <motor_uSetup+0x56>
10001cc8:	10005b64 	.word	0x10005b64
10001ccc:	10005ba4 	.word	0x10005ba4

10001cd0 <motor_vToFront>:



void motor_vToFront( motors_gpio mxa, motors_gpio mxb  ){
10001cd0:	b570      	push	{r4, r5, r6, lr}
10001cd2:	000c      	movs	r4, r1
	gpio_pin_set_dt(&scxMotors[mxa], true);
10001cd4:	4d05      	ldr	r5, [pc, #20]	; (10001cec <motor_vToFront+0x1c>)
10001cd6:	00c0      	lsls	r0, r0, #3
10001cd8:	1828      	adds	r0, r5, r0
10001cda:	2101      	movs	r1, #1
10001cdc:	f002 fcdb 	bl	10004696 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(&scxMotors[mxb], false);
10001ce0:	00e0      	lsls	r0, r4, #3
10001ce2:	1828      	adds	r0, r5, r0
10001ce4:	2100      	movs	r1, #0
10001ce6:	f002 fcd6 	bl	10004696 <gpio_pin_set_dt.isra.0>
}
10001cea:	bd70      	pop	{r4, r5, r6, pc}
10001cec:	10005b64 	.word	0x10005b64

10001cf0 <motor_vToBack>:

void motor_vToBack( motors_gpio mxa, motors_gpio mxb ){
10001cf0:	b570      	push	{r4, r5, r6, lr}
10001cf2:	000c      	movs	r4, r1
	gpio_pin_set_dt(&scxMotors[mxa], false);
10001cf4:	4d05      	ldr	r5, [pc, #20]	; (10001d0c <motor_vToBack+0x1c>)
10001cf6:	00c0      	lsls	r0, r0, #3
10001cf8:	1828      	adds	r0, r5, r0
10001cfa:	2100      	movs	r1, #0
10001cfc:	f002 fccb 	bl	10004696 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(&scxMotors[mxb], true);
10001d00:	00e0      	lsls	r0, r4, #3
10001d02:	1828      	adds	r0, r5, r0
10001d04:	2101      	movs	r1, #1
10001d06:	f002 fcc6 	bl	10004696 <gpio_pin_set_dt.isra.0>
}
10001d0a:	bd70      	pop	{r4, r5, r6, pc}
10001d0c:	10005b64 	.word	0x10005b64

10001d10 <motor_vTurnoff>:
void motor_vToStop( motors_gpio mxa, motors_gpio mxb ){
	gpio_pin_set_dt(&scxMotors[mxa], true);
	gpio_pin_set_dt(&scxMotors[mxb], true);
}

void motor_vTurnoff( motors_gpio mxa, motors_gpio mxb ){
10001d10:	b570      	push	{r4, r5, r6, lr}
10001d12:	000c      	movs	r4, r1
	gpio_pin_set_dt(&scxMotors[mxa], false);
10001d14:	4d05      	ldr	r5, [pc, #20]	; (10001d2c <motor_vTurnoff+0x1c>)
10001d16:	00c0      	lsls	r0, r0, #3
10001d18:	1828      	adds	r0, r5, r0
10001d1a:	2100      	movs	r1, #0
10001d1c:	f002 fcbb 	bl	10004696 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(&scxMotors[mxb], false);
10001d20:	00e0      	lsls	r0, r4, #3
10001d22:	1828      	adds	r0, r5, r0
10001d24:	2100      	movs	r1, #0
10001d26:	f002 fcb6 	bl	10004696 <gpio_pin_set_dt.isra.0>
}
10001d2a:	bd70      	pop	{r4, r5, r6, pc}
10001d2c:	10005b64 	.word	0x10005b64

10001d30 <ping_work_handler>:
void led_timer_handler(struct k_timer *timer_id) {
	led_vPing();

}

void ping_work_handler( struct k_work *work ){
10001d30:	b510      	push	{r4, lr}
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
10001d32:	4c08      	ldr	r4, [pc, #32]	; (10001d54 <ping_work_handler+0x24>)
10001d34:	2201      	movs	r2, #1
10001d36:	2119      	movs	r1, #25
10001d38:	0020      	movs	r0, r4
10001d3a:	f002 fcc3 	bl	100046c4 <gpio_pin_set.isra.0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
10001d3e:	2100      	movs	r1, #0
10001d40:	20c8      	movs	r0, #200	; 0xc8
10001d42:	f002 fa73 	bl	1000422c <z_impl_k_sleep>
10001d46:	2200      	movs	r2, #0
10001d48:	2119      	movs	r1, #25
10001d4a:	0020      	movs	r0, r4
10001d4c:	f002 fcba 	bl	100046c4 <gpio_pin_set.isra.0>
	gpio_pin_set_dt(&led, true);
	k_sleep(K_MSEC(20));
	gpio_pin_set_dt(&led, false);
}
10001d50:	bd10      	pop	{r4, pc}
10001d52:	46c0      	nop			; (mov r8, r8)
10001d54:	100059c0 	.word	0x100059c0

10001d58 <led_vSetup>:
void led_vSetup(void){
10001d58:	b510      	push	{r4, lr}
10001d5a:	4c09      	ldr	r4, [pc, #36]	; (10001d80 <led_vSetup+0x28>)
10001d5c:	0020      	movs	r0, r4
10001d5e:	f003 fc06 	bl	1000556e <z_device_is_ready>
	if (!device_is_ready(led.port))	 return;
10001d62:	2800      	cmp	r0, #0
10001d64:	d00b      	beq.n	10001d7e <led_vSetup+0x26>
	struct gpio_driver_data *data =
10001d66:	6922      	ldr	r2, [r4, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10001d68:	4b06      	ldr	r3, [pc, #24]	; (10001d84 <led_vSetup+0x2c>)
10001d6a:	6810      	ldr	r0, [r2, #0]
	const struct gpio_driver_api *api =
10001d6c:	68a1      	ldr	r1, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10001d6e:	4003      	ands	r3, r0
10001d70:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
10001d72:	22a0      	movs	r2, #160	; 0xa0
10001d74:	680b      	ldr	r3, [r1, #0]
10001d76:	0020      	movs	r0, r4
10001d78:	2119      	movs	r1, #25
10001d7a:	0312      	lsls	r2, r2, #12
10001d7c:	4798      	blx	r3
}
10001d7e:	bd10      	pop	{r4, pc}
10001d80:	100059c0 	.word	0x100059c0
10001d84:	fdffffff 	.word	0xfdffffff

10001d88 <led_vPing>:
void led_vPing(void){
10001d88:	b510      	push	{r4, lr}
	k_work_submit(&ping_work);
10001d8a:	4802      	ldr	r0, [pc, #8]	; (10001d94 <led_vPing+0xc>)
10001d8c:	f001 ffa0 	bl	10003cd0 <k_work_submit>
}
10001d90:	bd10      	pop	{r4, pc}
10001d92:	46c0      	nop			; (mov r8, r8)
10001d94:	20000000 	.word	0x20000000

10001d98 <comm_vGetMessage>:

	uart_irq_callback_user_data_set(uart_d[UART1].dev, uart1_cb, NULL);
	uart_irq_rx_enable(uart_d[UART1].dev);
}

void comm_vGetMessage(uart_device dev, char *msg, k_timeout_t timeout){
10001d98:	b510      	push	{r4, lr}
	k_msgq_get(uart_d[dev].msgq, msg, timeout);
10001d9a:	24d8      	movs	r4, #216	; 0xd8
10001d9c:	4344      	muls	r4, r0
10001d9e:	4803      	ldr	r0, [pc, #12]	; (10001dac <comm_vGetMessage+0x14>)
10001da0:	1900      	adds	r0, r0, r4
10001da2:	30d0      	adds	r0, #208	; 0xd0
10001da4:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
10001da6:	f001 fe15 	bl	100039d4 <z_impl_k_msgq_get>
}
10001daa:	bd10      	pop	{r4, pc}
10001dac:	20000010 	.word	0x20000010

10001db0 <comm_uSendChar>:

void comm_uSendChar( uart_device dev, char c ){
	uart_poll_out(uart_d[dev].dev, c);
10001db0:	23d8      	movs	r3, #216	; 0xd8
10001db2:	4343      	muls	r3, r0
10001db4:	4804      	ldr	r0, [pc, #16]	; (10001dc8 <comm_uSendChar+0x18>)
void comm_uSendChar( uart_device dev, char c ){
10001db6:	b510      	push	{r4, lr}
	uart_poll_out(uart_d[dev].dev, c);
10001db8:	18c0      	adds	r0, r0, r3
10001dba:	30d4      	adds	r0, #212	; 0xd4
10001dbc:	6800      	ldr	r0, [r0, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
10001dbe:	6883      	ldr	r3, [r0, #8]
10001dc0:	685b      	ldr	r3, [r3, #4]
10001dc2:	4798      	blx	r3
}
10001dc4:	bd10      	pop	{r4, pc}
10001dc6:	46c0      	nop			; (mov r8, r8)
10001dc8:	20000010 	.word	0x20000010

10001dcc <comm_uSendStringLn>:
	for (size_t i = 0; i < uSize; i++) {
		comm_uSendChar(dev, str[i]);
	}
}

void comm_uSendStringLn( uart_device dev, const char *str ){
10001dcc:	b510      	push	{r4, lr}
10001dce:	0004      	movs	r4, r0
	comm_uSendString( dev, str );
10001dd0:	f002 fc9c 	bl	1000470c <comm_uSendString>
	comm_uSendString( dev, "\r\n" );
10001dd4:	0020      	movs	r0, r4
10001dd6:	4902      	ldr	r1, [pc, #8]	; (10001de0 <comm_uSendStringLn+0x14>)
10001dd8:	f002 fc98 	bl	1000470c <comm_uSendString>
}
10001ddc:	bd10      	pop	{r4, pc}
10001dde:	46c0      	nop			; (mov r8, r8)
10001de0:	10005da8 	.word	0x10005da8

10001de4 <comm_vMessageSubmit>:
/*-------------------------------------------------------------------- Local Functions -------------------------------------------------------------------*/
/*########################################################################################################################################################*/


void comm_vMessageSubmit(uart_device dev){
	if ( k_msgq_put(uart_d[dev].msgq, uart_d[dev].message, K_NO_WAIT) != 0){
10001de4:	21d8      	movs	r1, #216	; 0xd8
10001de6:	4348      	muls	r0, r1
10001de8:	4907      	ldr	r1, [pc, #28]	; (10001e08 <comm_vMessageSubmit+0x24>)
void comm_vMessageSubmit(uart_device dev){
10001dea:	b510      	push	{r4, lr}
	if ( k_msgq_put(uart_d[dev].msgq, uart_d[dev].message, K_NO_WAIT) != 0){
10001dec:	1809      	adds	r1, r1, r0
10001dee:	000c      	movs	r4, r1
10001df0:	34d0      	adds	r4, #208	; 0xd0
10001df2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
10001df4:	2200      	movs	r2, #0
10001df6:	2300      	movs	r3, #0
10001df8:	f001 fd9e 	bl	10003938 <z_impl_k_msgq_put>
10001dfc:	2800      	cmp	r0, #0
10001dfe:	d002      	beq.n	10001e06 <comm_vMessageSubmit+0x22>
		k_msgq_cleanup(uart_d[dev].msgq);
10001e00:	6820      	ldr	r0, [r4, #0]
10001e02:	f003 fbf9 	bl	100055f8 <k_msgq_cleanup>
	}
}
10001e06:	bd10      	pop	{r4, pc}
10001e08:	20000010 	.word	0x20000010

10001e0c <comm_vCleanMessage>:

void comm_vCleanMessage(uart_device dev){
	uart_d[dev].position = 0;
10001e0c:	23d8      	movs	r3, #216	; 0xd8
10001e0e:	4343      	muls	r3, r0
10001e10:	4805      	ldr	r0, [pc, #20]	; (10001e28 <comm_vCleanMessage+0x1c>)
10001e12:	18c0      	adds	r0, r0, r3
10001e14:	0002      	movs	r2, r0
10001e16:	2300      	movs	r3, #0
10001e18:	32cc      	adds	r2, #204	; 0xcc
10001e1a:	6013      	str	r3, [r2, #0]

	for (size_t i = 0; i < UART_MESSAGE_SIZE; i++){
		uart_d[dev].message[i] = 0x00;
10001e1c:	001a      	movs	r2, r3
10001e1e:	54c2      	strb	r2, [r0, r3]
	for (size_t i = 0; i < UART_MESSAGE_SIZE; i++){
10001e20:	3301      	adds	r3, #1
10001e22:	2bcc      	cmp	r3, #204	; 0xcc
10001e24:	d1fb      	bne.n	10001e1e <comm_vCleanMessage+0x12>
	}
}
10001e26:	4770      	bx	lr
10001e28:	20000010 	.word	0x20000010

10001e2c <comm_vSetup>:
void comm_vSetup(void){
10001e2c:	b570      	push	{r4, r5, r6, lr}
	comm_vCleanMessage(UART0);
10001e2e:	2000      	movs	r0, #0
10001e30:	f7ff ffec 	bl	10001e0c <comm_vCleanMessage>
	comm_vCleanMessage(UART1);
10001e34:	2001      	movs	r0, #1
10001e36:	f7ff ffe9 	bl	10001e0c <comm_vCleanMessage>
	uart_irq_callback_user_data_set(uart_d[UART0].dev, uart0_cb, NULL);
10001e3a:	4c0a      	ldr	r4, [pc, #40]	; (10001e64 <comm_vSetup+0x38>)
10001e3c:	490a      	ldr	r1, [pc, #40]	; (10001e68 <comm_vSetup+0x3c>)
10001e3e:	0025      	movs	r5, r4
10001e40:	35d4      	adds	r5, #212	; 0xd4
10001e42:	6828      	ldr	r0, [r5, #0]
10001e44:	f002 fc58 	bl	100046f8 <uart_irq_callback_user_data_set.constprop.0>
	uart_irq_rx_enable(uart_d[UART0].dev);
10001e48:	6828      	ldr	r0, [r5, #0]
	uart_irq_callback_user_data_set(uart_d[UART1].dev, uart1_cb, NULL);
10001e4a:	25d6      	movs	r5, #214	; 0xd6
10001e4c:	006d      	lsls	r5, r5, #1
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
10001e4e:	f002 fc4c 	bl	100046ea <z_impl_uart_irq_rx_enable>
10001e52:	5960      	ldr	r0, [r4, r5]
10001e54:	4905      	ldr	r1, [pc, #20]	; (10001e6c <comm_vSetup+0x40>)
10001e56:	f002 fc4f 	bl	100046f8 <uart_irq_callback_user_data_set.constprop.0>
	uart_irq_rx_enable(uart_d[UART1].dev);
10001e5a:	5960      	ldr	r0, [r4, r5]
10001e5c:	f002 fc45 	bl	100046ea <z_impl_uart_irq_rx_enable>
}
10001e60:	bd70      	pop	{r4, r5, r6, pc}
10001e62:	46c0      	nop			; (mov r8, r8)
10001e64:	20000010 	.word	0x20000010
10001e68:	1000472d 	.word	0x1000472d
10001e6c:	1000476f 	.word	0x1000476f

10001e70 <uart_vBuildMessage>:

// }

void uart_vBuildMessage(uart_device dev, char data){
	
	uart_d[dev].message[uart_d[dev].position++] = data;
10001e70:	22d8      	movs	r2, #216	; 0xd8
10001e72:	4342      	muls	r2, r0
10001e74:	4b0c      	ldr	r3, [pc, #48]	; (10001ea8 <uart_vBuildMessage+0x38>)
void uart_vBuildMessage(uart_device dev, char data){
10001e76:	b570      	push	{r4, r5, r6, lr}
	uart_d[dev].message[uart_d[dev].position++] = data;
10001e78:	189b      	adds	r3, r3, r2
10001e7a:	001d      	movs	r5, r3
10001e7c:	35cc      	adds	r5, #204	; 0xcc
void uart_vBuildMessage(uart_device dev, char data){
10001e7e:	0004      	movs	r4, r0
	uart_d[dev].message[uart_d[dev].position++] = data;
10001e80:	6828      	ldr	r0, [r5, #0]
10001e82:	1c42      	adds	r2, r0, #1
10001e84:	602a      	str	r2, [r5, #0]
10001e86:	5419      	strb	r1, [r3, r0]



	if( ( uart_d[dev].position >= UART_MESSAGE_SIZE ) || ( data == '\n' ) || ( data == '\r' ) /*|| ( data == UART_END_MESSAGE )*/ ){
10001e88:	2acb      	cmp	r2, #203	; 0xcb
10001e8a:	d803      	bhi.n	10001e94 <uart_vBuildMessage+0x24>
10001e8c:	290a      	cmp	r1, #10
10001e8e:	d001      	beq.n	10001e94 <uart_vBuildMessage+0x24>
10001e90:	290d      	cmp	r1, #13
10001e92:	d107      	bne.n	10001ea4 <uart_vBuildMessage+0x34>

		led_vPing();
10001e94:	f7ff ff78 	bl	10001d88 <led_vPing>

		comm_vMessageSubmit(dev);
10001e98:	0020      	movs	r0, r4
10001e9a:	f7ff ffa3 	bl	10001de4 <comm_vMessageSubmit>

		comm_vCleanMessage(dev);
10001e9e:	0020      	movs	r0, r4
10001ea0:	f7ff ffb4 	bl	10001e0c <comm_vCleanMessage>
		return;
	}
}
10001ea4:	bd70      	pop	{r4, r5, r6, pc}
10001ea6:	46c0      	nop			; (mov r8, r8)
10001ea8:	20000010 	.word	0x20000010

10001eac <gpio_pin_set_dt.constprop.0.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
10001eac:	0003      	movs	r3, r0
	const struct gpio_driver_data *const data =
10001eae:	4809      	ldr	r0, [pc, #36]	; (10001ed4 <gpio_pin_set_dt.constprop.0.isra.0+0x28>)
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
10001eb0:	b510      	push	{r4, lr}
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10001eb2:	6902      	ldr	r2, [r0, #16]
10001eb4:	6812      	ldr	r2, [r2, #0]
10001eb6:	0112      	lsls	r2, r2, #4
10001eb8:	d501      	bpl.n	10001ebe <gpio_pin_set_dt.constprop.0.isra.0+0x12>
		value = (value != 0) ? 0 : 1;
10001eba:	2201      	movs	r2, #1
10001ebc:	4053      	eors	r3, r2
	if (value != 0)	{
10001ebe:	2b00      	cmp	r3, #0
10001ec0:	d005      	beq.n	10001ece <gpio_pin_set_dt.constprop.0.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
10001ec2:	6883      	ldr	r3, [r0, #8]
10001ec4:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
10001ec6:	2180      	movs	r1, #128	; 0x80
10001ec8:	0509      	lsls	r1, r1, #20
10001eca:	4798      	blx	r3
}
10001ecc:	bd10      	pop	{r4, pc}
	return api->port_clear_bits_raw(port, pins);
10001ece:	6883      	ldr	r3, [r0, #8]
10001ed0:	691b      	ldr	r3, [r3, #16]
10001ed2:	e7f8      	b.n	10001ec6 <gpio_pin_set_dt.constprop.0.isra.0+0x1a>
10001ed4:	100059c0 	.word	0x100059c0

10001ed8 <gprs_vSetup>:
/*########################################################################################################################################################*/
/*-------------------------------------------------------------------- Local Functions -------------------------------------------------------------------*/
/*########################################################################################################################################################*/


void gprs_vSetup(void){
10001ed8:	b510      	push	{r4, lr}
10001eda:	4c0b      	ldr	r4, [pc, #44]	; (10001f08 <gprs_vSetup+0x30>)
10001edc:	0020      	movs	r0, r4
10001ede:	f003 fb46 	bl	1000556e <z_device_is_ready>
	if (!device_is_ready(gprs_reset.port))	return;
10001ee2:	2800      	cmp	r0, #0
10001ee4:	d00e      	beq.n	10001f04 <gprs_vSetup+0x2c>
	struct gpio_driver_data *data =
10001ee6:	6922      	ldr	r2, [r4, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10001ee8:	4b08      	ldr	r3, [pc, #32]	; (10001f0c <gprs_vSetup+0x34>)
10001eea:	6810      	ldr	r0, [r2, #0]
	const struct gpio_driver_api *api =
10001eec:	68a1      	ldr	r1, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10001eee:	4003      	ands	r3, r0
10001ef0:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
10001ef2:	22a0      	movs	r2, #160	; 0xa0
10001ef4:	680b      	ldr	r3, [r1, #0]
10001ef6:	0020      	movs	r0, r4
10001ef8:	211b      	movs	r1, #27
10001efa:	0312      	lsls	r2, r2, #12
10001efc:	4798      	blx	r3
	
	gpio_pin_configure_dt(&gprs_reset, GPIO_OUTPUT_HIGH);

	gpio_pin_set_dt(&gprs_reset, true);
10001efe:	2001      	movs	r0, #1
10001f00:	f7ff ffd4 	bl	10001eac <gpio_pin_set_dt.constprop.0.isra.0>
}
10001f04:	bd10      	pop	{r4, pc}
10001f06:	46c0      	nop			; (mov r8, r8)
10001f08:	100059c0 	.word	0x100059c0
10001f0c:	f7ffffff 	.word	0xf7ffffff

10001f10 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
10001f10:	b510      	push	{r4, lr}
	(void) ctx_p;
	return _char_out(c);
10001f12:	4b02      	ldr	r3, [pc, #8]	; (10001f1c <char_out+0xc>)
10001f14:	681b      	ldr	r3, [r3, #0]
10001f16:	4798      	blx	r3
}
10001f18:	bd10      	pop	{r4, pc}
10001f1a:	46c0      	nop			; (mov r8, r8)
10001f1c:	200001c0 	.word	0x200001c0

10001f20 <__printk_hook_install>:
	_char_out = fn;
10001f20:	4b01      	ldr	r3, [pc, #4]	; (10001f28 <__printk_hook_install+0x8>)
10001f22:	6018      	str	r0, [r3, #0]
}
10001f24:	4770      	bx	lr
10001f26:	46c0      	nop			; (mov r8, r8)
10001f28:	200001c0 	.word	0x200001c0

10001f2c <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
10001f2c:	b507      	push	{r0, r1, r2, lr}
10001f2e:	000b      	movs	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
10001f30:	2100      	movs	r1, #0
10001f32:	0002      	movs	r2, r0
10001f34:	9100      	str	r1, [sp, #0]
10001f36:	4802      	ldr	r0, [pc, #8]	; (10001f40 <vprintk+0x14>)
10001f38:	f000 f804 	bl	10001f44 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
10001f3c:	bd07      	pop	{r0, r1, r2, pc}
10001f3e:	46c0      	nop			; (mov r8, r8)
10001f40:	10001f11 	.word	0x10001f11

10001f44 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
10001f44:	b5f0      	push	{r4, r5, r6, r7, lr}
10001f46:	001e      	movs	r6, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
10001f48:	2700      	movs	r7, #0
{
10001f4a:	b097      	sub	sp, #92	; 0x5c
10001f4c:	9005      	str	r0, [sp, #20]
10001f4e:	9106      	str	r1, [sp, #24]
10001f50:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
10001f52:	9b08      	ldr	r3, [sp, #32]
10001f54:	7818      	ldrb	r0, [r3, #0]
10001f56:	2800      	cmp	r0, #0
10001f58:	d101      	bne.n	10001f5e <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
10001f5a:	0038      	movs	r0, r7
10001f5c:	e329      	b.n	100025b2 <z_cbvprintf_impl+0x66e>
			OUTC(*fp++);
10001f5e:	9b08      	ldr	r3, [sp, #32]
10001f60:	3301      	adds	r3, #1
10001f62:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
10001f64:	2825      	cmp	r0, #37	; 0x25
10001f66:	d00b      	beq.n	10001f80 <z_cbvprintf_impl+0x3c>
			OUTC(*fp++);
10001f68:	9906      	ldr	r1, [sp, #24]
10001f6a:	9b05      	ldr	r3, [sp, #20]
10001f6c:	4798      	blx	r3
10001f6e:	2800      	cmp	r0, #0
10001f70:	da00      	bge.n	10001f74 <z_cbvprintf_impl+0x30>
10001f72:	e31e      	b.n	100025b2 <z_cbvprintf_impl+0x66e>
			continue;
10001f74:	0034      	movs	r4, r6
			OUTC(*fp++);
10001f76:	3701      	adds	r7, #1
			continue;
10001f78:	9b07      	ldr	r3, [sp, #28]
10001f7a:	0026      	movs	r6, r4
10001f7c:	9308      	str	r3, [sp, #32]
10001f7e:	e7e8      	b.n	10001f52 <z_cbvprintf_impl+0xe>
		} state = {
10001f80:	ac10      	add	r4, sp, #64	; 0x40
10001f82:	2218      	movs	r2, #24
10001f84:	2100      	movs	r1, #0
10001f86:	0020      	movs	r0, r4
10001f88:	f002 fea1 	bl	10004cce <memset>
	if (*sp == '%') {
10001f8c:	9b08      	ldr	r3, [sp, #32]
10001f8e:	785b      	ldrb	r3, [r3, #1]
10001f90:	2b25      	cmp	r3, #37	; 0x25
10001f92:	d117      	bne.n	10001fc4 <z_cbvprintf_impl+0x80>
		conv->specifier = *sp++;
10001f94:	9a08      	ldr	r2, [sp, #32]
10001f96:	72e3      	strb	r3, [r4, #11]
10001f98:	3202      	adds	r2, #2
10001f9a:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
10001f9c:	2201      	movs	r2, #1
10001f9e:	ab10      	add	r3, sp, #64	; 0x40
10001fa0:	7a59      	ldrb	r1, [r3, #9]
10001fa2:	4211      	tst	r1, r2
10001fa4:	d100      	bne.n	10001fa8 <z_cbvprintf_impl+0x64>
10001fa6:	e175      	b.n	10002294 <z_cbvprintf_impl+0x350>
			width = va_arg(ap, int);
10001fa8:	0034      	movs	r4, r6
10001faa:	cc04      	ldmia	r4!, {r2}
10001fac:	9203      	str	r2, [sp, #12]
			if (width < 0) {
10001fae:	2a00      	cmp	r2, #0
10001fb0:	db00      	blt.n	10001fb4 <z_cbvprintf_impl+0x70>
10001fb2:	e175      	b.n	100022a0 <z_cbvprintf_impl+0x35c>
				conv->flag_dash = true;
10001fb4:	2004      	movs	r0, #4
10001fb6:	7a1a      	ldrb	r2, [r3, #8]
10001fb8:	4302      	orrs	r2, r0
10001fba:	721a      	strb	r2, [r3, #8]
				width = -width;
10001fbc:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
10001fbe:	425b      	negs	r3, r3
10001fc0:	9303      	str	r3, [sp, #12]
10001fc2:	e16d      	b.n	100022a0 <z_cbvprintf_impl+0x35c>
10001fc4:	2200      	movs	r2, #0
10001fc6:	0014      	movs	r4, r2
10001fc8:	4694      	mov	ip, r2
10001fca:	0011      	movs	r1, r2
10001fcc:	9203      	str	r2, [sp, #12]
		switch (*sp) {
10001fce:	9b07      	ldr	r3, [sp, #28]
10001fd0:	781b      	ldrb	r3, [r3, #0]
10001fd2:	2b2b      	cmp	r3, #43	; 0x2b
10001fd4:	d06f      	beq.n	100020b6 <z_cbvprintf_impl+0x172>
10001fd6:	d868      	bhi.n	100020aa <z_cbvprintf_impl+0x166>
10001fd8:	2b20      	cmp	r3, #32
10001fda:	d072      	beq.n	100020c2 <z_cbvprintf_impl+0x17e>
10001fdc:	2b23      	cmp	r3, #35	; 0x23
10001fde:	d072      	beq.n	100020c6 <z_cbvprintf_impl+0x182>
10001fe0:	2900      	cmp	r1, #0
10001fe2:	d004      	beq.n	10001fee <z_cbvprintf_impl+0xaa>
10001fe4:	2004      	movs	r0, #4
10001fe6:	ad10      	add	r5, sp, #64	; 0x40
10001fe8:	7a29      	ldrb	r1, [r5, #8]
10001fea:	4301      	orrs	r1, r0
10001fec:	7229      	strb	r1, [r5, #8]
10001fee:	4661      	mov	r1, ip
10001ff0:	2900      	cmp	r1, #0
10001ff2:	d006      	beq.n	10002002 <z_cbvprintf_impl+0xbe>
10001ff4:	ad10      	add	r5, sp, #64	; 0x40
10001ff6:	7a29      	ldrb	r1, [r5, #8]
10001ff8:	468c      	mov	ip, r1
10001ffa:	2108      	movs	r1, #8
10001ffc:	4660      	mov	r0, ip
10001ffe:	4301      	orrs	r1, r0
10002000:	7229      	strb	r1, [r5, #8]
10002002:	2c00      	cmp	r4, #0
10002004:	d004      	beq.n	10002010 <z_cbvprintf_impl+0xcc>
10002006:	2110      	movs	r1, #16
10002008:	ac10      	add	r4, sp, #64	; 0x40
1000200a:	7a25      	ldrb	r5, [r4, #8]
1000200c:	4329      	orrs	r1, r5
1000200e:	7221      	strb	r1, [r4, #8]
10002010:	9903      	ldr	r1, [sp, #12]
10002012:	2900      	cmp	r1, #0
10002014:	d004      	beq.n	10002020 <z_cbvprintf_impl+0xdc>
10002016:	2120      	movs	r1, #32
10002018:	a810      	add	r0, sp, #64	; 0x40
1000201a:	7a04      	ldrb	r4, [r0, #8]
1000201c:	4321      	orrs	r1, r4
1000201e:	7201      	strb	r1, [r0, #8]
10002020:	2a00      	cmp	r2, #0
10002022:	d004      	beq.n	1000202e <z_cbvprintf_impl+0xea>
10002024:	2240      	movs	r2, #64	; 0x40
10002026:	a910      	add	r1, sp, #64	; 0x40
10002028:	7a08      	ldrb	r0, [r1, #8]
1000202a:	4302      	orrs	r2, r0
1000202c:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
1000202e:	2144      	movs	r1, #68	; 0x44
10002030:	a810      	add	r0, sp, #64	; 0x40
10002032:	7a02      	ldrb	r2, [r0, #8]
10002034:	4011      	ands	r1, r2
10002036:	2944      	cmp	r1, #68	; 0x44
10002038:	d102      	bne.n	10002040 <z_cbvprintf_impl+0xfc>
		conv->flag_zero = false;
1000203a:	2140      	movs	r1, #64	; 0x40
1000203c:	438a      	bics	r2, r1
1000203e:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
10002040:	2280      	movs	r2, #128	; 0x80
10002042:	7a01      	ldrb	r1, [r0, #8]
10002044:	4252      	negs	r2, r2
10002046:	430a      	orrs	r2, r1
10002048:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
1000204a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
1000204c:	240a      	movs	r4, #10
1000204e:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
10002050:	2b2a      	cmp	r3, #42	; 0x2a
10002052:	d141      	bne.n	100020d8 <z_cbvprintf_impl+0x194>
		conv->width_star = true;
10002054:	7a43      	ldrb	r3, [r0, #9]
10002056:	3101      	adds	r1, #1
10002058:	430b      	orrs	r3, r1
			++sp;
1000205a:	3201      	adds	r2, #1
		conv->width_star = true;
1000205c:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
1000205e:	7814      	ldrb	r4, [r2, #0]
10002060:	2502      	movs	r5, #2
10002062:	0021      	movs	r1, r4
10002064:	392e      	subs	r1, #46	; 0x2e
10002066:	424b      	negs	r3, r1
10002068:	4159      	adcs	r1, r3
1000206a:	a810      	add	r0, sp, #64	; 0x40
1000206c:	7a43      	ldrb	r3, [r0, #9]
1000206e:	0049      	lsls	r1, r1, #1
10002070:	43ab      	bics	r3, r5
10002072:	4319      	orrs	r1, r3
10002074:	7241      	strb	r1, [r0, #9]
	if (!conv->prec_present) {
10002076:	2c2e      	cmp	r4, #46	; 0x2e
10002078:	d146      	bne.n	10002108 <z_cbvprintf_impl+0x1c4>
	if (*sp == '*') {
1000207a:	7853      	ldrb	r3, [r2, #1]
1000207c:	2b2a      	cmp	r3, #42	; 0x2a
1000207e:	d03e      	beq.n	100020fe <z_cbvprintf_impl+0x1ba>
	size_t val = 0;
10002080:	2300      	movs	r3, #0
	++sp;
10002082:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
10002084:	3508      	adds	r5, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
10002086:	7811      	ldrb	r1, [r2, #0]
10002088:	1c54      	adds	r4, r2, #1
1000208a:	0008      	movs	r0, r1
1000208c:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
1000208e:	2809      	cmp	r0, #9
10002090:	d961      	bls.n	10002156 <z_cbvprintf_impl+0x212>
	conv->prec_value = prec;
10002092:	a910      	add	r1, sp, #64	; 0x40
10002094:	9314      	str	r3, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
10002096:	7a08      	ldrb	r0, [r1, #8]
10002098:	0784      	lsls	r4, r0, #30
			      || (prec != (size_t)conv->prec_value));
1000209a:	4323      	orrs	r3, r4
	conv->unsupported |= ((conv->prec_value < 0)
1000209c:	2402      	movs	r4, #2
1000209e:	0fdb      	lsrs	r3, r3, #31
100020a0:	005b      	lsls	r3, r3, #1
100020a2:	43a0      	bics	r0, r4
100020a4:	4303      	orrs	r3, r0
100020a6:	720b      	strb	r3, [r1, #8]
	return sp;
100020a8:	e02e      	b.n	10002108 <z_cbvprintf_impl+0x1c4>
		switch (*sp) {
100020aa:	2b2d      	cmp	r3, #45	; 0x2d
100020ac:	d00e      	beq.n	100020cc <z_cbvprintf_impl+0x188>
100020ae:	2b30      	cmp	r3, #48	; 0x30
100020b0:	d196      	bne.n	10001fe0 <z_cbvprintf_impl+0x9c>
			conv->flag_zero = true;
100020b2:	2201      	movs	r2, #1
100020b4:	e001      	b.n	100020ba <z_cbvprintf_impl+0x176>
			conv->flag_plus = true;
100020b6:	2301      	movs	r3, #1
100020b8:	469c      	mov	ip, r3
			++sp;
100020ba:	9b07      	ldr	r3, [sp, #28]
100020bc:	3301      	adds	r3, #1
100020be:	9307      	str	r3, [sp, #28]
	} while (loop);
100020c0:	e785      	b.n	10001fce <z_cbvprintf_impl+0x8a>
			conv->flag_space = true;
100020c2:	2401      	movs	r4, #1
100020c4:	e7f9      	b.n	100020ba <z_cbvprintf_impl+0x176>
			conv->flag_hash = true;
100020c6:	2301      	movs	r3, #1
100020c8:	9303      	str	r3, [sp, #12]
100020ca:	e7f6      	b.n	100020ba <z_cbvprintf_impl+0x176>
		switch (*sp) {
100020cc:	2101      	movs	r1, #1
100020ce:	e7f4      	b.n	100020ba <z_cbvprintf_impl+0x176>
		val = 10U * val + *sp++ - '0';
100020d0:	002a      	movs	r2, r5
100020d2:	4361      	muls	r1, r4
100020d4:	3930      	subs	r1, #48	; 0x30
100020d6:	18c9      	adds	r1, r1, r3
100020d8:	7813      	ldrb	r3, [r2, #0]
100020da:	1c55      	adds	r5, r2, #1
100020dc:	0018      	movs	r0, r3
100020de:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
100020e0:	2809      	cmp	r0, #9
100020e2:	d9f5      	bls.n	100020d0 <z_cbvprintf_impl+0x18c>
	if (sp != wp) {
100020e4:	9b07      	ldr	r3, [sp, #28]
100020e6:	4293      	cmp	r3, r2
100020e8:	d0b9      	beq.n	1000205e <z_cbvprintf_impl+0x11a>
		conv->unsupported |= ((conv->width_value < 0)
100020ea:	2402      	movs	r4, #2
		conv->width_value = width;
100020ec:	ab10      	add	r3, sp, #64	; 0x40
		conv->unsupported |= ((conv->width_value < 0)
100020ee:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
100020f0:	9113      	str	r1, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
100020f2:	0fc9      	lsrs	r1, r1, #31
		conv->unsupported |= ((conv->width_value < 0)
100020f4:	0049      	lsls	r1, r1, #1
100020f6:	43a0      	bics	r0, r4
100020f8:	4301      	orrs	r1, r0
100020fa:	7219      	strb	r1, [r3, #8]
100020fc:	e7af      	b.n	1000205e <z_cbvprintf_impl+0x11a>
		conv->prec_star = true;
100020fe:	2104      	movs	r1, #4
10002100:	7a43      	ldrb	r3, [r0, #9]
		return ++sp;
10002102:	3202      	adds	r2, #2
		conv->prec_star = true;
10002104:	430b      	orrs	r3, r1
10002106:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
10002108:	7811      	ldrb	r1, [r2, #0]
		if (*++sp == 'h') {
1000210a:	1c50      	adds	r0, r2, #1
1000210c:	ab10      	add	r3, sp, #64	; 0x40
	switch (*sp) {
1000210e:	296c      	cmp	r1, #108	; 0x6c
10002110:	d041      	beq.n	10002196 <z_cbvprintf_impl+0x252>
10002112:	d825      	bhi.n	10002160 <z_cbvprintf_impl+0x21c>
10002114:	2968      	cmp	r1, #104	; 0x68
10002116:	d02d      	beq.n	10002174 <z_cbvprintf_impl+0x230>
10002118:	296a      	cmp	r1, #106	; 0x6a
1000211a:	d048      	beq.n	100021ae <z_cbvprintf_impl+0x26a>
1000211c:	294c      	cmp	r1, #76	; 0x4c
1000211e:	d052      	beq.n	100021c6 <z_cbvprintf_impl+0x282>
10002120:	0010      	movs	r0, r2
	conv->specifier = *sp++;
10002122:	7802      	ldrb	r2, [r0, #0]
10002124:	1c43      	adds	r3, r0, #1
10002126:	a910      	add	r1, sp, #64	; 0x40
10002128:	9307      	str	r3, [sp, #28]
1000212a:	72ca      	strb	r2, [r1, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000212c:	7a4b      	ldrb	r3, [r1, #9]
	switch (conv->specifier) {
1000212e:	2a78      	cmp	r2, #120	; 0x78
10002130:	d900      	bls.n	10002134 <z_cbvprintf_impl+0x1f0>
10002132:	e0a8      	b.n	10002286 <z_cbvprintf_impl+0x342>
10002134:	2a57      	cmp	r2, #87	; 0x57
10002136:	d84d      	bhi.n	100021d4 <z_cbvprintf_impl+0x290>
10002138:	2a41      	cmp	r2, #65	; 0x41
1000213a:	d003      	beq.n	10002144 <z_cbvprintf_impl+0x200>
1000213c:	3a45      	subs	r2, #69	; 0x45
1000213e:	2a02      	cmp	r2, #2
10002140:	d900      	bls.n	10002144 <z_cbvprintf_impl+0x200>
10002142:	e0a0      	b.n	10002286 <z_cbvprintf_impl+0x342>
		conv->specifier_cat = SPECIFIER_FP;
10002144:	2107      	movs	r1, #7
10002146:	aa10      	add	r2, sp, #64	; 0x40
10002148:	7a93      	ldrb	r3, [r2, #10]
1000214a:	438b      	bics	r3, r1
1000214c:	3903      	subs	r1, #3
1000214e:	430b      	orrs	r3, r1
10002150:	7293      	strb	r3, [r2, #10]
			unsupported = true;
10002152:	2301      	movs	r3, #1
			break;
10002154:	e06a      	b.n	1000222c <z_cbvprintf_impl+0x2e8>
		val = 10U * val + *sp++ - '0';
10002156:	436b      	muls	r3, r5
10002158:	3b30      	subs	r3, #48	; 0x30
1000215a:	0022      	movs	r2, r4
1000215c:	18cb      	adds	r3, r1, r3
1000215e:	e792      	b.n	10002086 <z_cbvprintf_impl+0x142>
	switch (*sp) {
10002160:	2974      	cmp	r1, #116	; 0x74
10002162:	d02a      	beq.n	100021ba <z_cbvprintf_impl+0x276>
10002164:	297a      	cmp	r1, #122	; 0x7a
10002166:	d1db      	bne.n	10002120 <z_cbvprintf_impl+0x1dc>
		conv->length_mod = LENGTH_Z;
10002168:	2178      	movs	r1, #120	; 0x78
1000216a:	7a5a      	ldrb	r2, [r3, #9]
1000216c:	438a      	bics	r2, r1
1000216e:	0011      	movs	r1, r2
10002170:	2230      	movs	r2, #48	; 0x30
10002172:	e00d      	b.n	10002190 <z_cbvprintf_impl+0x24c>
		if (*++sp == 'h') {
10002174:	7851      	ldrb	r1, [r2, #1]
10002176:	2478      	movs	r4, #120	; 0x78
10002178:	2968      	cmp	r1, #104	; 0x68
1000217a:	d106      	bne.n	1000218a <z_cbvprintf_impl+0x246>
			conv->length_mod = LENGTH_HH;
1000217c:	7a58      	ldrb	r0, [r3, #9]
1000217e:	3960      	subs	r1, #96	; 0x60
10002180:	43a0      	bics	r0, r4
			conv->length_mod = LENGTH_LL;
10002182:	4301      	orrs	r1, r0
10002184:	7259      	strb	r1, [r3, #9]
			++sp;
10002186:	1c90      	adds	r0, r2, #2
10002188:	e7cb      	b.n	10002122 <z_cbvprintf_impl+0x1de>
			conv->length_mod = LENGTH_H;
1000218a:	2210      	movs	r2, #16
1000218c:	7a59      	ldrb	r1, [r3, #9]
1000218e:	43a1      	bics	r1, r4
		conv->length_mod = LENGTH_T;
10002190:	430a      	orrs	r2, r1
10002192:	725a      	strb	r2, [r3, #9]
		break;
10002194:	e7c5      	b.n	10002122 <z_cbvprintf_impl+0x1de>
		if (*++sp == 'l') {
10002196:	7851      	ldrb	r1, [r2, #1]
10002198:	2478      	movs	r4, #120	; 0x78
1000219a:	296c      	cmp	r1, #108	; 0x6c
1000219c:	d103      	bne.n	100021a6 <z_cbvprintf_impl+0x262>
			conv->length_mod = LENGTH_LL;
1000219e:	7a58      	ldrb	r0, [r3, #9]
100021a0:	394c      	subs	r1, #76	; 0x4c
100021a2:	43a0      	bics	r0, r4
100021a4:	e7ed      	b.n	10002182 <z_cbvprintf_impl+0x23e>
			conv->length_mod = LENGTH_L;
100021a6:	7a59      	ldrb	r1, [r3, #9]
100021a8:	2218      	movs	r2, #24
100021aa:	43a1      	bics	r1, r4
100021ac:	e7f0      	b.n	10002190 <z_cbvprintf_impl+0x24c>
		conv->length_mod = LENGTH_J;
100021ae:	2178      	movs	r1, #120	; 0x78
100021b0:	7a5a      	ldrb	r2, [r3, #9]
100021b2:	438a      	bics	r2, r1
100021b4:	0011      	movs	r1, r2
100021b6:	2228      	movs	r2, #40	; 0x28
100021b8:	e7ea      	b.n	10002190 <z_cbvprintf_impl+0x24c>
		conv->length_mod = LENGTH_T;
100021ba:	2178      	movs	r1, #120	; 0x78
100021bc:	7a5a      	ldrb	r2, [r3, #9]
100021be:	438a      	bics	r2, r1
100021c0:	0011      	movs	r1, r2
100021c2:	2238      	movs	r2, #56	; 0x38
100021c4:	e7e4      	b.n	10002190 <z_cbvprintf_impl+0x24c>
		conv->unsupported = true;
100021c6:	891a      	ldrh	r2, [r3, #8]
100021c8:	49a8      	ldr	r1, [pc, #672]	; (1000246c <z_cbvprintf_impl+0x528>)
100021ca:	4011      	ands	r1, r2
100021cc:	4aa8      	ldr	r2, [pc, #672]	; (10002470 <z_cbvprintf_impl+0x52c>)
100021ce:	430a      	orrs	r2, r1
100021d0:	811a      	strh	r2, [r3, #8]
		break;
100021d2:	e7a6      	b.n	10002122 <z_cbvprintf_impl+0x1de>
	switch (conv->specifier) {
100021d4:	0010      	movs	r0, r2
100021d6:	3858      	subs	r0, #88	; 0x58
100021d8:	2820      	cmp	r0, #32
100021da:	d854      	bhi.n	10002286 <z_cbvprintf_impl+0x342>
100021dc:	f7fd ffe4 	bl	100001a8 <__gnu_thumb1_case_sqi>
100021e0:	53535333 	.word	0x53535333
100021e4:	53535353 	.word	0x53535353
100021e8:	3353b253 	.word	0x3353b253
100021ec:	b2b2b211 	.word	0xb2b2b211
100021f0:	53531153 	.word	0x53531153
100021f4:	33395353 	.word	0x33395353
100021f8:	47535347 	.word	0x47535347
100021fc:	53533353 	.word	0x53533353
10002200:	33          	.byte	0x33
10002201:	00          	.byte	0x00
		conv->specifier_cat = SPECIFIER_SINT;
10002202:	2407      	movs	r4, #7
10002204:	7a88      	ldrb	r0, [r1, #10]
10002206:	43a0      	bics	r0, r4
10002208:	3c06      	subs	r4, #6
		conv->specifier_cat = SPECIFIER_UINT;
1000220a:	4320      	orrs	r0, r4
1000220c:	7288      	strb	r0, [r1, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000220e:	2178      	movs	r1, #120	; 0x78
10002210:	4019      	ands	r1, r3
10002212:	2940      	cmp	r1, #64	; 0x40
10002214:	d104      	bne.n	10002220 <z_cbvprintf_impl+0x2dc>
			conv->invalid = true;
10002216:	2401      	movs	r4, #1
10002218:	a810      	add	r0, sp, #64	; 0x40
1000221a:	7a03      	ldrb	r3, [r0, #8]
1000221c:	4323      	orrs	r3, r4
1000221e:	7203      	strb	r3, [r0, #8]
	bool unsupported = false;
10002220:	2300      	movs	r3, #0
		if (conv->specifier == 'c') {
10002222:	2a63      	cmp	r2, #99	; 0x63
10002224:	d102      	bne.n	1000222c <z_cbvprintf_impl+0x2e8>
			unsupported = (conv->length_mod != LENGTH_NONE);
10002226:	1e4a      	subs	r2, r1, #1
10002228:	4191      	sbcs	r1, r2
1000222a:	b2cb      	uxtb	r3, r1
	conv->unsupported |= unsupported;
1000222c:	aa10      	add	r2, sp, #64	; 0x40
1000222e:	7a11      	ldrb	r1, [r2, #8]
10002230:	0788      	lsls	r0, r1, #30
10002232:	0fc0      	lsrs	r0, r0, #31
10002234:	4303      	orrs	r3, r0
10002236:	2001      	movs	r0, #1
10002238:	4003      	ands	r3, r0
1000223a:	4083      	lsls	r3, r0
1000223c:	1800      	adds	r0, r0, r0
1000223e:	4381      	bics	r1, r0
10002240:	430b      	orrs	r3, r1
10002242:	7213      	strb	r3, [r2, #8]
	return sp;
10002244:	e6aa      	b.n	10001f9c <z_cbvprintf_impl+0x58>
		conv->specifier_cat = SPECIFIER_UINT;
10002246:	2407      	movs	r4, #7
10002248:	7a88      	ldrb	r0, [r1, #10]
1000224a:	43a0      	bics	r0, r4
1000224c:	0004      	movs	r4, r0
1000224e:	2002      	movs	r0, #2
10002250:	e7db      	b.n	1000220a <z_cbvprintf_impl+0x2c6>
		conv->specifier_cat = SPECIFIER_PTR;
10002252:	2007      	movs	r0, #7
10002254:	7a8a      	ldrb	r2, [r1, #10]
10002256:	4382      	bics	r2, r0
10002258:	0010      	movs	r0, r2
1000225a:	2203      	movs	r2, #3
1000225c:	4302      	orrs	r2, r0
1000225e:	728a      	strb	r2, [r1, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10002260:	2278      	movs	r2, #120	; 0x78
10002262:	4013      	ands	r3, r2
10002264:	3b40      	subs	r3, #64	; 0x40
10002266:	425a      	negs	r2, r3
10002268:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
1000226a:	b2db      	uxtb	r3, r3
1000226c:	e7de      	b.n	1000222c <z_cbvprintf_impl+0x2e8>
		conv->specifier_cat = SPECIFIER_PTR;
1000226e:	2007      	movs	r0, #7
10002270:	7a8a      	ldrb	r2, [r1, #10]
10002272:	4382      	bics	r2, r0
10002274:	0010      	movs	r0, r2
10002276:	2203      	movs	r2, #3
10002278:	4302      	orrs	r2, r0
1000227a:	728a      	strb	r2, [r1, #10]
		if (conv->length_mod != LENGTH_NONE) {
1000227c:	2278      	movs	r2, #120	; 0x78
1000227e:	4013      	ands	r3, r2
10002280:	1e5a      	subs	r2, r3, #1
10002282:	4193      	sbcs	r3, r2
10002284:	e7f1      	b.n	1000226a <z_cbvprintf_impl+0x326>
		conv->invalid = true;
10002286:	2101      	movs	r1, #1
10002288:	aa10      	add	r2, sp, #64	; 0x40
1000228a:	7a13      	ldrb	r3, [r2, #8]
1000228c:	430b      	orrs	r3, r1
1000228e:	7213      	strb	r3, [r2, #8]
	bool unsupported = false;
10002290:	2300      	movs	r3, #0
		break;
10002292:	e7cb      	b.n	1000222c <z_cbvprintf_impl+0x2e8>
		} else if (conv->width_present) {
10002294:	7a1a      	ldrb	r2, [r3, #8]
10002296:	2a7f      	cmp	r2, #127	; 0x7f
10002298:	d910      	bls.n	100022bc <z_cbvprintf_impl+0x378>
			width = conv->width_value;
1000229a:	0034      	movs	r4, r6
1000229c:	68db      	ldr	r3, [r3, #12]
1000229e:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
100022a0:	2304      	movs	r3, #4
100022a2:	aa10      	add	r2, sp, #64	; 0x40
100022a4:	4219      	tst	r1, r3
100022a6:	d00c      	beq.n	100022c2 <z_cbvprintf_impl+0x37e>
			int arg = va_arg(ap, int);
100022a8:	cc40      	ldmia	r4!, {r6}
			if (arg < 0) {
100022aa:	2e00      	cmp	r6, #0
100022ac:	da0c      	bge.n	100022c8 <z_cbvprintf_impl+0x384>
				conv->prec_present = false;
100022ae:	2102      	movs	r1, #2
100022b0:	7a53      	ldrb	r3, [r2, #9]
100022b2:	438b      	bics	r3, r1
100022b4:	7253      	strb	r3, [r2, #9]
		int precision = -1;
100022b6:	2601      	movs	r6, #1
100022b8:	4276      	negs	r6, r6
100022ba:	e005      	b.n	100022c8 <z_cbvprintf_impl+0x384>
100022bc:	0034      	movs	r4, r6
		int width = -1;
100022be:	2301      	movs	r3, #1
100022c0:	e67d      	b.n	10001fbe <z_cbvprintf_impl+0x7a>
		} else if (conv->prec_present) {
100022c2:	078b      	lsls	r3, r1, #30
100022c4:	d5f7      	bpl.n	100022b6 <z_cbvprintf_impl+0x372>
			precision = conv->prec_value;
100022c6:	6916      	ldr	r6, [r2, #16]
		conv->pad0_value = 0;
100022c8:	2500      	movs	r5, #0
100022ca:	aa10      	add	r2, sp, #64	; 0x40
			= (enum length_mod_enum)conv->length_mod;
100022cc:	7a51      	ldrb	r1, [r2, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
100022ce:	7a93      	ldrb	r3, [r2, #10]
			= (enum length_mod_enum)conv->length_mod;
100022d0:	0649      	lsls	r1, r1, #25
			= (enum specifier_cat_enum)conv->specifier_cat;
100022d2:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
100022d4:	0f09      	lsrs	r1, r1, #28
		enum specifier_cat_enum specifier_cat
100022d6:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
100022d8:	9104      	str	r1, [sp, #16]
		conv->pad0_value = 0;
100022da:	60d5      	str	r5, [r2, #12]
		conv->pad0_pre_exp = 0;
100022dc:	6115      	str	r5, [r2, #16]
		if (specifier_cat == SPECIFIER_SINT) {
100022de:	2b01      	cmp	r3, #1
100022e0:	d136      	bne.n	10002350 <z_cbvprintf_impl+0x40c>
			switch (length_mod) {
100022e2:	1ec8      	subs	r0, r1, #3
100022e4:	2804      	cmp	r0, #4
100022e6:	d81f      	bhi.n	10002328 <z_cbvprintf_impl+0x3e4>
100022e8:	f7fd ff68 	bl	100001bc <__gnu_thumb1_case_uqi>
100022ec:	1e060603 	.word	0x1e060603
100022f0:	1e          	.byte	0x1e
100022f1:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
100022f2:	cc08      	ldmia	r4!, {r3}
				value->sint = (short)value->sint;
100022f4:	6013      	str	r3, [r2, #0]
100022f6:	e022      	b.n	1000233e <z_cbvprintf_impl+0x3fa>
					(sint_value_type)va_arg(ap, intmax_t);
100022f8:	2307      	movs	r3, #7
100022fa:	3407      	adds	r4, #7
100022fc:	439c      	bics	r4, r3
				value->sint =
100022fe:	cc0c      	ldmia	r4!, {r2, r3}
10002300:	9210      	str	r2, [sp, #64]	; 0x40
10002302:	9311      	str	r3, [sp, #68]	; 0x44
		if (conv->invalid || conv->unsupported) {
10002304:	aa10      	add	r2, sp, #64	; 0x40
10002306:	7a13      	ldrb	r3, [r2, #8]
10002308:	2003      	movs	r0, #3
1000230a:	001d      	movs	r5, r3
1000230c:	4005      	ands	r5, r0
1000230e:	4203      	tst	r3, r0
10002310:	d060      	beq.n	100023d4 <z_cbvprintf_impl+0x490>
			OUTS(sp, fp);
10002312:	9b07      	ldr	r3, [sp, #28]
10002314:	9a08      	ldr	r2, [sp, #32]
10002316:	9906      	ldr	r1, [sp, #24]
10002318:	9805      	ldr	r0, [sp, #20]
1000231a:	f002 fc62 	bl	10004be2 <outs>
1000231e:	2800      	cmp	r0, #0
10002320:	da00      	bge.n	10002324 <z_cbvprintf_impl+0x3e0>
10002322:	e146      	b.n	100025b2 <z_cbvprintf_impl+0x66e>
10002324:	183f      	adds	r7, r7, r0
			continue;
10002326:	e627      	b.n	10001f78 <z_cbvprintf_impl+0x34>
					(sint_value_type)va_arg(ap, ptrdiff_t);
10002328:	cc01      	ldmia	r4!, {r0}
			if (length_mod == LENGTH_HH) {
1000232a:	9b04      	ldr	r3, [sp, #16]
					(sint_value_type)va_arg(ap, ptrdiff_t);
1000232c:	6010      	str	r0, [r2, #0]
1000232e:	17c0      	asrs	r0, r0, #31
10002330:	6050      	str	r0, [r2, #4]
			if (length_mod == LENGTH_HH) {
10002332:	aa10      	add	r2, sp, #64	; 0x40
10002334:	2b01      	cmp	r3, #1
10002336:	d105      	bne.n	10002344 <z_cbvprintf_impl+0x400>
				value->sint = (signed char)value->sint;
10002338:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000233a:	b25b      	sxtb	r3, r3
1000233c:	9310      	str	r3, [sp, #64]	; 0x40
1000233e:	17db      	asrs	r3, r3, #31
10002340:	6053      	str	r3, [r2, #4]
10002342:	e7df      	b.n	10002304 <z_cbvprintf_impl+0x3c0>
			} else if (length_mod == LENGTH_H) {
10002344:	9b04      	ldr	r3, [sp, #16]
10002346:	2b02      	cmp	r3, #2
10002348:	d1dc      	bne.n	10002304 <z_cbvprintf_impl+0x3c0>
				value->sint = (short)value->sint;
1000234a:	2100      	movs	r1, #0
1000234c:	5e53      	ldrsh	r3, [r2, r1]
1000234e:	e7d1      	b.n	100022f4 <z_cbvprintf_impl+0x3b0>
		} else if (specifier_cat == SPECIFIER_UINT) {
10002350:	2b02      	cmp	r3, #2
10002352:	d12e      	bne.n	100023b2 <z_cbvprintf_impl+0x46e>
			switch (length_mod) {
10002354:	9b04      	ldr	r3, [sp, #16]
10002356:	1ed8      	subs	r0, r3, #3
10002358:	2804      	cmp	r0, #4
1000235a:	d805      	bhi.n	10002368 <z_cbvprintf_impl+0x424>
1000235c:	0015      	movs	r5, r2
1000235e:	f7fd ff2d 	bl	100001bc <__gnu_thumb1_case_uqi>
10002362:	140e      	.short	0x140e
10002364:	1b14      	.short	0x1b14
10002366:	1b          	.byte	0x1b
10002367:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
10002368:	cc08      	ldmia	r4!, {r3}
1000236a:	c228      	stmia	r2!, {r3, r5}
			if (length_mod == LENGTH_HH) {
1000236c:	9b04      	ldr	r3, [sp, #16]
1000236e:	2b01      	cmp	r3, #1
10002370:	d117      	bne.n	100023a2 <z_cbvprintf_impl+0x45e>
				value->uint = (unsigned char)value->uint;
10002372:	9b10      	ldr	r3, [sp, #64]	; 0x40
10002374:	b2db      	uxtb	r3, r3
				value->uint = (unsigned short)value->uint;
10002376:	9310      	str	r3, [sp, #64]	; 0x40
10002378:	2300      	movs	r3, #0
1000237a:	9311      	str	r3, [sp, #68]	; 0x44
1000237c:	e7c2      	b.n	10002304 <z_cbvprintf_impl+0x3c0>
				if ((!WCHAR_IS_SIGNED)
1000237e:	2300      	movs	r3, #0
					value->uint = va_arg(ap, unsigned long);
10002380:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
10002382:	1d20      	adds	r0, r4, #4
					value->uint = va_arg(ap, unsigned long);
10002384:	c50c      	stmia	r5!, {r2, r3}
					(uint_value_type)va_arg(ap, size_t);
10002386:	0004      	movs	r4, r0
10002388:	e7bc      	b.n	10002304 <z_cbvprintf_impl+0x3c0>
					(uint_value_type)va_arg(ap,
1000238a:	2307      	movs	r3, #7
1000238c:	1de0      	adds	r0, r4, #7
1000238e:	4398      	bics	r0, r3
				value->uint =
10002390:	c80c      	ldmia	r0!, {r2, r3}
10002392:	9210      	str	r2, [sp, #64]	; 0x40
10002394:	9311      	str	r3, [sp, #68]	; 0x44
				break;
10002396:	e7f6      	b.n	10002386 <z_cbvprintf_impl+0x442>
					(uint_value_type)va_arg(ap, size_t);
10002398:	cc08      	ldmia	r4!, {r3}
1000239a:	6013      	str	r3, [r2, #0]
1000239c:	2300      	movs	r3, #0
1000239e:	6053      	str	r3, [r2, #4]
				break;
100023a0:	e7e4      	b.n	1000236c <z_cbvprintf_impl+0x428>
			} else if (length_mod == LENGTH_H) {
100023a2:	9b04      	ldr	r3, [sp, #16]
100023a4:	2b02      	cmp	r3, #2
100023a6:	d1ad      	bne.n	10002304 <z_cbvprintf_impl+0x3c0>
				value->uint = (unsigned short)value->uint;
100023a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
100023aa:	9309      	str	r3, [sp, #36]	; 0x24
100023ac:	466b      	mov	r3, sp
100023ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
100023b0:	e7e1      	b.n	10002376 <z_cbvprintf_impl+0x432>
		} else if (specifier_cat == SPECIFIER_FP) {
100023b2:	2b04      	cmp	r3, #4
100023b4:	d109      	bne.n	100023ca <z_cbvprintf_impl+0x486>
					(sint_value_type)va_arg(ap, long long);
100023b6:	2007      	movs	r0, #7
100023b8:	1de3      	adds	r3, r4, #7
100023ba:	4383      	bics	r3, r0
100023bc:	001c      	movs	r4, r3
				value->dbl = va_arg(ap, double);
100023be:	6818      	ldr	r0, [r3, #0]
100023c0:	6859      	ldr	r1, [r3, #4]
					(sint_value_type)va_arg(ap, long long);
100023c2:	3408      	adds	r4, #8
				value->dbl = va_arg(ap, double);
100023c4:	6010      	str	r0, [r2, #0]
100023c6:	6051      	str	r1, [r2, #4]
100023c8:	e79c      	b.n	10002304 <z_cbvprintf_impl+0x3c0>
		} else if (specifier_cat == SPECIFIER_PTR) {
100023ca:	2b03      	cmp	r3, #3
100023cc:	d19a      	bne.n	10002304 <z_cbvprintf_impl+0x3c0>
			value->ptr = va_arg(ap, void *);
100023ce:	cc08      	ldmia	r4!, {r3}
100023d0:	6013      	str	r3, [r2, #0]
100023d2:	e797      	b.n	10002304 <z_cbvprintf_impl+0x3c0>
		switch (conv->specifier) {
100023d4:	7ad0      	ldrb	r0, [r2, #11]
100023d6:	2878      	cmp	r0, #120	; 0x78
100023d8:	d900      	bls.n	100023dc <z_cbvprintf_impl+0x498>
100023da:	e5cd      	b.n	10001f78 <z_cbvprintf_impl+0x34>
100023dc:	2862      	cmp	r0, #98	; 0x62
100023de:	d821      	bhi.n	10002424 <z_cbvprintf_impl+0x4e0>
100023e0:	2825      	cmp	r0, #37	; 0x25
100023e2:	d03b      	beq.n	1000245c <z_cbvprintf_impl+0x518>
100023e4:	2858      	cmp	r0, #88	; 0x58
100023e6:	d000      	beq.n	100023ea <z_cbvprintf_impl+0x4a6>
100023e8:	e5c6      	b.n	10001f78 <z_cbvprintf_impl+0x34>
			bps = encode_uint(value->uint, conv, buf, bpe);
100023ea:	9810      	ldr	r0, [sp, #64]	; 0x40
100023ec:	9911      	ldr	r1, [sp, #68]	; 0x44
100023ee:	231e      	movs	r3, #30
100023f0:	aa08      	add	r2, sp, #32
100023f2:	189b      	adds	r3, r3, r2
100023f4:	9300      	str	r3, [sp, #0]
100023f6:	aa12      	add	r2, sp, #72	; 0x48
100023f8:	ab0a      	add	r3, sp, #40	; 0x28
100023fa:	f002 fba6 	bl	10004b4a <encode_uint>
100023fe:	9004      	str	r0, [sp, #16]
			if (precision >= 0) {
10002400:	231e      	movs	r3, #30
10002402:	aa08      	add	r2, sp, #32
10002404:	189b      	adds	r3, r3, r2
10002406:	9308      	str	r3, [sp, #32]
10002408:	2e00      	cmp	r6, #0
1000240a:	db3f      	blt.n	1000248c <z_cbvprintf_impl+0x548>
				conv->flag_zero = false;
1000240c:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
1000240e:	9a04      	ldr	r2, [sp, #16]
10002410:	1a9b      	subs	r3, r3, r2
				conv->flag_zero = false;
10002412:	aa10      	add	r2, sp, #64	; 0x40
10002414:	7a11      	ldrb	r1, [r2, #8]
10002416:	4381      	bics	r1, r0
10002418:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
1000241a:	429e      	cmp	r6, r3
1000241c:	d936      	bls.n	1000248c <z_cbvprintf_impl+0x548>
					conv->pad0_value = precision - (int)len;
1000241e:	1af3      	subs	r3, r6, r3
10002420:	9313      	str	r3, [sp, #76]	; 0x4c
10002422:	e033      	b.n	1000248c <z_cbvprintf_impl+0x548>
		switch (conv->specifier) {
10002424:	3863      	subs	r0, #99	; 0x63
10002426:	2815      	cmp	r0, #21
10002428:	d900      	bls.n	1000242c <z_cbvprintf_impl+0x4e8>
1000242a:	e5a5      	b.n	10001f78 <z_cbvprintf_impl+0x34>
1000242c:	f7fd fed0 	bl	100001d0 <__gnu_thumb1_case_shi>
10002430:	006f0065 	.word	0x006f0065
10002434:	fda4fda4 	.word	0xfda4fda4
10002438:	fda4fda4 	.word	0xfda4fda4
1000243c:	fda4006f 	.word	0xfda4006f
10002440:	fda4fda4 	.word	0xfda4fda4
10002444:	009cfda4 	.word	0x009cfda4
10002448:	00860084 	.word	0x00860084
1000244c:	fda4fda4 	.word	0xfda4fda4
10002450:	fda40022 	.word	0xfda40022
10002454:	fda40084 	.word	0xfda40084
10002458:	0084fda4 	.word	0x0084fda4
			OUTC('%');
1000245c:	9906      	ldr	r1, [sp, #24]
1000245e:	9b05      	ldr	r3, [sp, #20]
10002460:	4798      	blx	r3
10002462:	2800      	cmp	r0, #0
10002464:	da00      	bge.n	10002468 <z_cbvprintf_impl+0x524>
10002466:	e0a4      	b.n	100025b2 <z_cbvprintf_impl+0x66e>
10002468:	3701      	adds	r7, #1
			break;
1000246a:	e585      	b.n	10001f78 <z_cbvprintf_impl+0x34>
1000246c:	ffff87fd 	.word	0xffff87fd
10002470:	00004002 	.word	0x00004002
			bps = (const char *)value->ptr;
10002474:	9b10      	ldr	r3, [sp, #64]	; 0x40
10002476:	9304      	str	r3, [sp, #16]
			if (precision >= 0) {
10002478:	2e00      	cmp	r6, #0
1000247a:	db3a      	blt.n	100024f2 <z_cbvprintf_impl+0x5ae>
				len = strnlen(bps, precision);
1000247c:	0031      	movs	r1, r6
1000247e:	0018      	movs	r0, r3
10002480:	f002 fc03 	bl	10004c8a <strnlen>
		char sign = 0;
10002484:	2500      	movs	r5, #0
			bpe = bps + len;
10002486:	9b04      	ldr	r3, [sp, #16]
10002488:	181b      	adds	r3, r3, r0
1000248a:	9308      	str	r3, [sp, #32]
		if (bps == NULL) {
1000248c:	9b04      	ldr	r3, [sp, #16]
1000248e:	2b00      	cmp	r3, #0
10002490:	d100      	bne.n	10002494 <z_cbvprintf_impl+0x550>
10002492:	e571      	b.n	10001f78 <z_cbvprintf_impl+0x34>
		size_t nj_len = (bpe - bps);
10002494:	9b08      	ldr	r3, [sp, #32]
10002496:	9a04      	ldr	r2, [sp, #16]
10002498:	1a9e      	subs	r6, r3, r2
			nj_len += 1U;
1000249a:	002b      	movs	r3, r5
1000249c:	1e5a      	subs	r2, r3, #1
1000249e:	4193      	sbcs	r3, r2
100024a0:	18f6      	adds	r6, r6, r3
		if (conv->altform_0c) {
100024a2:	ab10      	add	r3, sp, #64	; 0x40
100024a4:	7a9b      	ldrb	r3, [r3, #10]
100024a6:	06da      	lsls	r2, r3, #27
100024a8:	d579      	bpl.n	1000259e <z_cbvprintf_impl+0x65a>
			nj_len += 2U;
100024aa:	3602      	adds	r6, #2
		nj_len += conv->pad0_value;
100024ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
100024ae:	9209      	str	r2, [sp, #36]	; 0x24
100024b0:	18b6      	adds	r6, r6, r2
		if (conv->pad_fp) {
100024b2:	065b      	lsls	r3, r3, #25
100024b4:	d501      	bpl.n	100024ba <z_cbvprintf_impl+0x576>
			nj_len += conv->pad0_pre_exp;
100024b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
100024b8:	18f6      	adds	r6, r6, r3
		if (width > 0) {
100024ba:	9b03      	ldr	r3, [sp, #12]
100024bc:	2b00      	cmp	r3, #0
100024be:	dc00      	bgt.n	100024c2 <z_cbvprintf_impl+0x57e>
100024c0:	e086      	b.n	100025d0 <z_cbvprintf_impl+0x68c>
			width -= (int)nj_len;
100024c2:	1b9b      	subs	r3, r3, r6
100024c4:	9309      	str	r3, [sp, #36]	; 0x24
			if (!conv->flag_dash) {
100024c6:	ab10      	add	r3, sp, #64	; 0x40
100024c8:	7a1b      	ldrb	r3, [r3, #8]
100024ca:	075a      	lsls	r2, r3, #29
100024cc:	0fd6      	lsrs	r6, r2, #31
100024ce:	2a00      	cmp	r2, #0
100024d0:	da00      	bge.n	100024d4 <z_cbvprintf_impl+0x590>
100024d2:	e0bc      	b.n	1000264e <z_cbvprintf_impl+0x70a>
				if (conv->flag_zero) {
100024d4:	065b      	lsls	r3, r3, #25
100024d6:	d400      	bmi.n	100024da <z_cbvprintf_impl+0x596>
100024d8:	e06d      	b.n	100025b6 <z_cbvprintf_impl+0x672>
					if (sign != 0) {
100024da:	2d00      	cmp	r5, #0
100024dc:	d007      	beq.n	100024ee <z_cbvprintf_impl+0x5aa>
						OUTC(sign);
100024de:	0028      	movs	r0, r5
100024e0:	9906      	ldr	r1, [sp, #24]
100024e2:	9b05      	ldr	r3, [sp, #20]
100024e4:	4798      	blx	r3
100024e6:	2800      	cmp	r0, #0
100024e8:	db63      	blt.n	100025b2 <z_cbvprintf_impl+0x66e>
						sign = 0;
100024ea:	0035      	movs	r5, r6
						OUTC(sign);
100024ec:	3701      	adds	r7, #1
					pad = '0';
100024ee:	2630      	movs	r6, #48	; 0x30
100024f0:	e062      	b.n	100025b8 <z_cbvprintf_impl+0x674>
				len = strlen(bps);
100024f2:	9804      	ldr	r0, [sp, #16]
100024f4:	f002 fbc1 	bl	10004c7a <strlen>
100024f8:	e7c4      	b.n	10002484 <z_cbvprintf_impl+0x540>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
100024fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
100024fc:	a80a      	add	r0, sp, #40	; 0x28
100024fe:	7003      	strb	r3, [r0, #0]
			bpe = buf + 1;
10002500:	2309      	movs	r3, #9
			break;
10002502:	2500      	movs	r5, #0
			bpe = buf + 1;
10002504:	aa08      	add	r2, sp, #32
			bps = buf;
10002506:	9004      	str	r0, [sp, #16]
			bpe = buf + 1;
10002508:	189b      	adds	r3, r3, r2
			bpe = bps + 5;
1000250a:	9308      	str	r3, [sp, #32]
1000250c:	e7c2      	b.n	10002494 <z_cbvprintf_impl+0x550>
				sign = '+';
1000250e:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
10002510:	071a      	lsls	r2, r3, #28
10002512:	d405      	bmi.n	10002520 <z_cbvprintf_impl+0x5dc>
			} else if (conv->flag_space) {
10002514:	2210      	movs	r2, #16
10002516:	001d      	movs	r5, r3
10002518:	4015      	ands	r5, r2
1000251a:	4213      	tst	r3, r2
1000251c:	d000      	beq.n	10002520 <z_cbvprintf_impl+0x5dc>
				sign = ' ';
1000251e:	2520      	movs	r5, #32
			sint = value->sint;
10002520:	9a10      	ldr	r2, [sp, #64]	; 0x40
10002522:	9b11      	ldr	r3, [sp, #68]	; 0x44
			if (sint < 0) {
10002524:	2b00      	cmp	r3, #0
10002526:	db00      	blt.n	1000252a <z_cbvprintf_impl+0x5e6>
10002528:	e75f      	b.n	100023ea <z_cbvprintf_impl+0x4a6>
				value->uint = (uint_value_type)-sint;
1000252a:	2100      	movs	r1, #0
1000252c:	4250      	negs	r0, r2
1000252e:	4199      	sbcs	r1, r3
				sign = '-';
10002530:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
10002532:	9010      	str	r0, [sp, #64]	; 0x40
10002534:	9111      	str	r1, [sp, #68]	; 0x44
10002536:	e758      	b.n	100023ea <z_cbvprintf_impl+0x4a6>
		switch (conv->specifier) {
10002538:	2500      	movs	r5, #0
1000253a:	e756      	b.n	100023ea <z_cbvprintf_impl+0x4a6>
			if (value->ptr != NULL) {
1000253c:	9810      	ldr	r0, [sp, #64]	; 0x40
1000253e:	ad10      	add	r5, sp, #64	; 0x40
10002540:	2800      	cmp	r0, #0
10002542:	d027      	beq.n	10002594 <z_cbvprintf_impl+0x650>
				bps = encode_uint((uintptr_t)value->ptr, conv,
10002544:	231e      	movs	r3, #30
10002546:	aa08      	add	r2, sp, #32
10002548:	189b      	adds	r3, r3, r2
1000254a:	9300      	str	r3, [sp, #0]
1000254c:	aa12      	add	r2, sp, #72	; 0x48
1000254e:	ab0a      	add	r3, sp, #40	; 0x28
10002550:	2100      	movs	r1, #0
10002552:	f002 fafa 	bl	10004b4a <encode_uint>
				conv->altform_0c = true;
10002556:	22ef      	movs	r2, #239	; 0xef
10002558:	896b      	ldrh	r3, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
1000255a:	9004      	str	r0, [sp, #16]
				conv->altform_0c = true;
1000255c:	401a      	ands	r2, r3
1000255e:	4b41      	ldr	r3, [pc, #260]	; (10002664 <z_cbvprintf_impl+0x720>)
10002560:	4313      	orrs	r3, r2
10002562:	816b      	strh	r3, [r5, #10]
		char sign = 0;
10002564:	2500      	movs	r5, #0
				goto prec_int_pad0;
10002566:	e74b      	b.n	10002400 <z_cbvprintf_impl+0x4bc>
				store_count(conv, value->ptr, count);
10002568:	6813      	ldr	r3, [r2, #0]
	switch ((enum length_mod_enum)conv->length_mod) {
1000256a:	9a04      	ldr	r2, [sp, #16]
1000256c:	2a07      	cmp	r2, #7
1000256e:	d900      	bls.n	10002572 <z_cbvprintf_impl+0x62e>
10002570:	e502      	b.n	10001f78 <z_cbvprintf_impl+0x34>
10002572:	0010      	movs	r0, r2
10002574:	f7fd fe22 	bl	100001bc <__gnu_thumb1_case_uqi>
10002578:	0c06040c 	.word	0x0c06040c
1000257c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
10002580:	701f      	strb	r7, [r3, #0]
		break;
10002582:	e4f9      	b.n	10001f78 <z_cbvprintf_impl+0x34>
		*(short *)dp = (short)count;
10002584:	801f      	strh	r7, [r3, #0]
		break;
10002586:	e4f7      	b.n	10001f78 <z_cbvprintf_impl+0x34>
		*(intmax_t *)dp = (intmax_t)count;
10002588:	17fa      	asrs	r2, r7, #31
1000258a:	601f      	str	r7, [r3, #0]
1000258c:	605a      	str	r2, [r3, #4]
		break;
1000258e:	e4f3      	b.n	10001f78 <z_cbvprintf_impl+0x34>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
10002590:	601f      	str	r7, [r3, #0]
		break;
10002592:	e4f1      	b.n	10001f78 <z_cbvprintf_impl+0x34>
			bps = "(nil)";
10002594:	4b34      	ldr	r3, [pc, #208]	; (10002668 <z_cbvprintf_impl+0x724>)
10002596:	0005      	movs	r5, r0
10002598:	9304      	str	r3, [sp, #16]
			bpe = bps + 5;
1000259a:	4b34      	ldr	r3, [pc, #208]	; (1000266c <z_cbvprintf_impl+0x728>)
1000259c:	e7b5      	b.n	1000250a <z_cbvprintf_impl+0x5c6>
		} else if (conv->altform_0) {
1000259e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
100025a0:	0fd2      	lsrs	r2, r2, #31
100025a2:	18b6      	adds	r6, r6, r2
100025a4:	e782      	b.n	100024ac <z_cbvprintf_impl+0x568>
					OUTC(pad);
100025a6:	0030      	movs	r0, r6
100025a8:	9906      	ldr	r1, [sp, #24]
100025aa:	9b05      	ldr	r3, [sp, #20]
100025ac:	4798      	blx	r3
100025ae:	2800      	cmp	r0, #0
100025b0:	da04      	bge.n	100025bc <z_cbvprintf_impl+0x678>
#undef OUTS
#undef OUTC
}
100025b2:	b017      	add	sp, #92	; 0x5c
100025b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
100025b6:	2620      	movs	r6, #32
					pad = '0';
100025b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
100025ba:	9303      	str	r3, [sp, #12]
100025bc:	9a03      	ldr	r2, [sp, #12]
100025be:	9b09      	ldr	r3, [sp, #36]	; 0x24
				while (width-- > 0) {
100025c0:	0011      	movs	r1, r2
100025c2:	19db      	adds	r3, r3, r7
100025c4:	3901      	subs	r1, #1
100025c6:	1a9b      	subs	r3, r3, r2
100025c8:	9103      	str	r1, [sp, #12]
100025ca:	2a00      	cmp	r2, #0
100025cc:	dceb      	bgt.n	100025a6 <z_cbvprintf_impl+0x662>
100025ce:	001f      	movs	r7, r3
		if (sign != 0) {
100025d0:	2d00      	cmp	r5, #0
100025d2:	d006      	beq.n	100025e2 <z_cbvprintf_impl+0x69e>
			OUTC(sign);
100025d4:	0028      	movs	r0, r5
100025d6:	9906      	ldr	r1, [sp, #24]
100025d8:	9b05      	ldr	r3, [sp, #20]
100025da:	4798      	blx	r3
100025dc:	2800      	cmp	r0, #0
100025de:	dbe8      	blt.n	100025b2 <z_cbvprintf_impl+0x66e>
100025e0:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
100025e2:	ab10      	add	r3, sp, #64	; 0x40
100025e4:	7a9b      	ldrb	r3, [r3, #10]
100025e6:	06da      	lsls	r2, r3, #27
100025e8:	d401      	bmi.n	100025ee <z_cbvprintf_impl+0x6aa>
100025ea:	071b      	lsls	r3, r3, #28
100025ec:	d506      	bpl.n	100025fc <z_cbvprintf_impl+0x6b8>
				OUTC('0');
100025ee:	2030      	movs	r0, #48	; 0x30
100025f0:	9906      	ldr	r1, [sp, #24]
100025f2:	9b05      	ldr	r3, [sp, #20]
100025f4:	4798      	blx	r3
100025f6:	2800      	cmp	r0, #0
100025f8:	dbdb      	blt.n	100025b2 <z_cbvprintf_impl+0x66e>
100025fa:	3701      	adds	r7, #1
			if (conv->altform_0c) {
100025fc:	ab10      	add	r3, sp, #64	; 0x40
100025fe:	7a9a      	ldrb	r2, [r3, #10]
10002600:	06d2      	lsls	r2, r2, #27
10002602:	d506      	bpl.n	10002612 <z_cbvprintf_impl+0x6ce>
				OUTC(conv->specifier);
10002604:	7ad8      	ldrb	r0, [r3, #11]
10002606:	9906      	ldr	r1, [sp, #24]
10002608:	9b05      	ldr	r3, [sp, #20]
1000260a:	4798      	blx	r3
1000260c:	2800      	cmp	r0, #0
1000260e:	dbd0      	blt.n	100025b2 <z_cbvprintf_impl+0x66e>
10002610:	3701      	adds	r7, #1
			while (pad_len-- > 0) {
10002612:	003d      	movs	r5, r7
			pad_len = conv->pad0_value;
10002614:	9e13      	ldr	r6, [sp, #76]	; 0x4c
			while (pad_len-- > 0) {
10002616:	19f3      	adds	r3, r6, r7
10002618:	1b5b      	subs	r3, r3, r5
1000261a:	2b00      	cmp	r3, #0
1000261c:	dc1a      	bgt.n	10002654 <z_cbvprintf_impl+0x710>
			OUTS(bps, bpe);
1000261e:	9b08      	ldr	r3, [sp, #32]
10002620:	9a04      	ldr	r2, [sp, #16]
10002622:	9906      	ldr	r1, [sp, #24]
10002624:	9805      	ldr	r0, [sp, #20]
10002626:	f002 fadc 	bl	10004be2 <outs>
1000262a:	2800      	cmp	r0, #0
1000262c:	dbc1      	blt.n	100025b2 <z_cbvprintf_impl+0x66e>
1000262e:	1947      	adds	r7, r0, r5
10002630:	003d      	movs	r5, r7
		while (width > 0) {
10002632:	9b03      	ldr	r3, [sp, #12]
10002634:	195b      	adds	r3, r3, r5
10002636:	1bdb      	subs	r3, r3, r7
10002638:	2b00      	cmp	r3, #0
1000263a:	dc00      	bgt.n	1000263e <z_cbvprintf_impl+0x6fa>
1000263c:	e49c      	b.n	10001f78 <z_cbvprintf_impl+0x34>
			OUTC(' ');
1000263e:	2020      	movs	r0, #32
10002640:	9906      	ldr	r1, [sp, #24]
10002642:	9b05      	ldr	r3, [sp, #20]
10002644:	4798      	blx	r3
10002646:	2800      	cmp	r0, #0
10002648:	dbb3      	blt.n	100025b2 <z_cbvprintf_impl+0x66e>
1000264a:	3701      	adds	r7, #1
			--width;
1000264c:	e7f1      	b.n	10002632 <z_cbvprintf_impl+0x6ee>
			width -= (int)nj_len;
1000264e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002650:	9303      	str	r3, [sp, #12]
10002652:	e7bd      	b.n	100025d0 <z_cbvprintf_impl+0x68c>
				OUTC('0');
10002654:	2030      	movs	r0, #48	; 0x30
10002656:	9906      	ldr	r1, [sp, #24]
10002658:	9b05      	ldr	r3, [sp, #20]
1000265a:	4798      	blx	r3
1000265c:	2800      	cmp	r0, #0
1000265e:	dba8      	blt.n	100025b2 <z_cbvprintf_impl+0x66e>
10002660:	3501      	adds	r5, #1
10002662:	e7d8      	b.n	10002616 <z_cbvprintf_impl+0x6d2>
10002664:	00007810 	.word	0x00007810
10002668:	10005dcd 	.word	0x10005dcd
1000266c:	10005dd2 	.word	0x10005dd2

10002670 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10002670:	4901      	ldr	r1, [pc, #4]	; (10002678 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10002672:	2210      	movs	r2, #16
	str	r2, [r1]
10002674:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
10002676:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
10002678:	e000ed10 	.word	0xe000ed10

1000267c <arch_cpu_idle>:

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
1000267c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
10002680:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10002682:	b662      	cpsie	i
	isb
10002684:	f3bf 8f6f 	isb	sy

	bx	lr
10002688:	4770      	bx	lr
1000268a:	46c0      	nop			; (mov r8, r8)

1000268c <arch_irq_enable>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
1000268c:	0603      	lsls	r3, r0, #24
1000268e:	d405      	bmi.n	1000269c <arch_irq_enable+0x10>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002690:	231f      	movs	r3, #31
10002692:	4018      	ands	r0, r3
10002694:	3b1e      	subs	r3, #30
10002696:	4083      	lsls	r3, r0
10002698:	4a01      	ldr	r2, [pc, #4]	; (100026a0 <arch_irq_enable+0x14>)
1000269a:	6013      	str	r3, [r2, #0]
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
}
1000269c:	4770      	bx	lr
1000269e:	46c0      	nop			; (mov r8, r8)
100026a0:	e000e100 	.word	0xe000e100

100026a4 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
100026a4:	b570      	push	{r4, r5, r6, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100026a6:	26ff      	movs	r6, #255	; 0xff
100026a8:	2503      	movs	r5, #3
100026aa:	0032      	movs	r2, r6
100026ac:	4005      	ands	r5, r0
100026ae:	00ed      	lsls	r5, r5, #3
100026b0:	40aa      	lsls	r2, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100026b2:	0149      	lsls	r1, r1, #5
100026b4:	4031      	ands	r1, r6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100026b6:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100026b8:	40a9      	lsls	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
100026ba:	b244      	sxtb	r4, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100026bc:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
100026be:	0600      	lsls	r0, r0, #24
100026c0:	d40a      	bmi.n	100026d8 <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100026c2:	08a3      	lsrs	r3, r4, #2
100026c4:	24c0      	movs	r4, #192	; 0xc0
100026c6:	480a      	ldr	r0, [pc, #40]	; (100026f0 <z_arm_irq_priority_set+0x4c>)
100026c8:	009b      	lsls	r3, r3, #2
100026ca:	181b      	adds	r3, r3, r0
100026cc:	00a4      	lsls	r4, r4, #2
100026ce:	5918      	ldr	r0, [r3, r4]
100026d0:	4002      	ands	r2, r0
100026d2:	4311      	orrs	r1, r2
100026d4:	5119      	str	r1, [r3, r4]
}
100026d6:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100026d8:	200f      	movs	r0, #15
100026da:	4003      	ands	r3, r0
100026dc:	3b08      	subs	r3, #8
100026de:	4805      	ldr	r0, [pc, #20]	; (100026f4 <z_arm_irq_priority_set+0x50>)
100026e0:	089b      	lsrs	r3, r3, #2
100026e2:	009b      	lsls	r3, r3, #2
100026e4:	181b      	adds	r3, r3, r0
100026e6:	69d8      	ldr	r0, [r3, #28]
100026e8:	4002      	ands	r2, r0
100026ea:	4311      	orrs	r1, r2
100026ec:	61d9      	str	r1, [r3, #28]
100026ee:	e7f2      	b.n	100026d6 <z_arm_irq_priority_set+0x32>
100026f0:	e000e100 	.word	0xe000e100
100026f4:	e000ed00 	.word	0xe000ed00

100026f8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
100026f8:	bf30      	wfi
    b z_SysNmiOnReset
100026fa:	e7fd      	b.n	100026f8 <z_SysNmiOnReset>

100026fc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
100026fc:	22ff      	movs	r2, #255	; 0xff
100026fe:	4b08      	ldr	r3, [pc, #32]	; (10002720 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
10002700:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10002702:	4393      	bics	r3, r2
10002704:	4a07      	ldr	r2, [pc, #28]	; (10002724 <z_arm_prep_c+0x28>)
10002706:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10002708:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1000270c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10002710:	f000 ffdc 	bl	100036cc <z_bss_zero>
	z_data_copy();
10002714:	f001 fe16 	bl	10004344 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
10002718:	f000 f8f2 	bl	10002900 <z_arm_interrupt_init>
	z_cstart();
1000271c:	f001 f816 	bl	1000374c <z_cstart>
10002720:	10000100 	.word	0x10000100
10002724:	e000ed00 	.word	0xe000ed00

10002728 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10002728:	4a08      	ldr	r2, [pc, #32]	; (1000274c <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
1000272a:	4909      	ldr	r1, [pc, #36]	; (10002750 <arch_swap+0x28>)
	_current->arch.basepri = key;
1000272c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
1000272e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
10002730:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
10002732:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10002734:	2380      	movs	r3, #128	; 0x80
10002736:	4907      	ldr	r1, [pc, #28]	; (10002754 <arch_swap+0x2c>)
10002738:	055b      	lsls	r3, r3, #21
1000273a:	6848      	ldr	r0, [r1, #4]
1000273c:	4303      	orrs	r3, r0
1000273e:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
10002740:	b662      	cpsie	i
10002742:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
10002746:	6893      	ldr	r3, [r2, #8]
10002748:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
1000274a:	4770      	bx	lr
1000274c:	20000484 	.word	0x20000484
10002750:	10005d9c 	.word	0x10005d9c
10002754:	e000ed00 	.word	0xe000ed00

10002758 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
10002758:	4913      	ldr	r1, [pc, #76]	; (100027a8 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
1000275a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
1000275c:	4813      	ldr	r0, [pc, #76]	; (100027ac <_thread_irq_disabled+0x22>)
    add r0, r2
1000275e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
10002760:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
10002764:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
10002766:	4643      	mov	r3, r8
    mov r4, r9
10002768:	464c      	mov	r4, r9
    mov r5, r10
1000276a:	4655      	mov	r5, sl
    mov r6, r11
1000276c:	465e      	mov	r6, fp
    mov r7, ip
1000276e:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
10002770:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10002772:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
10002774:	4f0e      	ldr	r7, [pc, #56]	; (100027b0 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
10002776:	4e0f      	ldr	r6, [pc, #60]	; (100027b4 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
10002778:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
1000277a:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
1000277c:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
1000277e:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
10002780:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
10002782:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
10002784:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
10002786:	d100      	bne.n	1000278a <_thread_irq_disabled>
    cpsie i
10002788:	b662      	cpsie	i

1000278a <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
1000278a:	4c08      	ldr	r4, [pc, #32]	; (100027ac <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
1000278c:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
1000278e:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
10002790:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
10002792:	4698      	mov	r8, r3
    mov r9, r4
10002794:	46a1      	mov	r9, r4
    mov r10, r5
10002796:	46aa      	mov	sl, r5
    mov r11, r6
10002798:	46b3      	mov	fp, r6
    mov ip, r7
1000279a:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
1000279c:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
1000279e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
100027a0:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
100027a4:	4770      	bx	lr
100027a6:	0000      	.short	0x0000
    ldr r1, =_kernel
100027a8:	20000484 	.word	0x20000484
    ldr r0, =_thread_offset_to_callee_saved
100027ac:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
100027b0:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
100027b4:	08000000 	.word	0x08000000

100027b8 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
100027b8:	2004      	movs	r0, #4
  mov r1, lr
100027ba:	4671      	mov	r1, lr
  tst r1, r0
100027bc:	4201      	tst	r1, r0
  beq _stack_frame_msp
100027be:	d002      	beq.n	100027c6 <_stack_frame_msp>
  mrs r0, PSP
100027c0:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
100027c4:	d101      	bne.n	100027ca <_stack_frame_endif>

100027c6 <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
100027c6:	f3ef 8008 	mrs	r0, MSP

100027ca <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
100027ca:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
100027cc:	3902      	subs	r1, #2
    ldrb r1, [r1]
100027ce:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
100027d0:	2902      	cmp	r1, #2
    beq _oops
100027d2:	d0ff      	beq.n	100027d4 <_oops>

100027d4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
100027d4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
100027d6:	f002 fa1f 	bl	10004c18 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
100027da:	bd01      	pop	{r0, pc}

100027dc <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
100027dc:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
100027de:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
100027e0:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
100027e2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
100027e4:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
100027e6:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
100027e8:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
100027ea:	4906      	ldr	r1, [pc, #24]	; (10002804 <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
100027ec:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
100027ee:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
100027f0:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
100027f2:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
100027f4:	2380      	movs	r3, #128	; 0x80
100027f6:	045b      	lsls	r3, r3, #17
100027f8:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
100027fa:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
100027fc:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
100027fe:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
10002800:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
10002802:	bd10      	pop	{r4, pc}
10002804:	100047e3 	.word	0x100047e3

10002808 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
10002808:	4b06      	ldr	r3, [pc, #24]	; (10002824 <arch_switch_to_main_thread+0x1c>)
1000280a:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
1000280c:	1c10      	adds	r0, r2, #0
1000280e:	f381 8809 	msr	PSP, r1
10002812:	2100      	movs	r1, #0
10002814:	b662      	cpsie	i
10002816:	f3bf 8f6f 	isb	sy
1000281a:	2200      	movs	r2, #0
1000281c:	2300      	movs	r3, #0
1000281e:	f001 ffe0 	bl	100047e2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
10002822:	46c0      	nop			; (mov r8, r8)
10002824:	20000484 	.word	0x20000484

10002828 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
10002828:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
1000282a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
1000282e:	4905      	ldr	r1, [pc, #20]	; (10002844 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
10002830:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
10002832:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
10002834:	4904      	ldr	r1, [pc, #16]	; (10002848 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
10002836:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
10002838:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
1000283a:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
1000283c:	bc09      	pop	{r0, r3}
	mov lr, r3
1000283e:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
10002840:	4902      	ldr	r1, [pc, #8]	; (1000284c <_isr_wrapper+0x24>)
	bx r1
10002842:	4708      	bx	r1
	ldr r1, =16
10002844:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
10002848:	10005a50 	.word	0x10005a50
	ldr r1, =z_arm_int_exit
1000284c:	10002851 	.word	0x10002851

10002850 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
10002850:	4b04      	ldr	r3, [pc, #16]	; (10002864 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
10002852:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
10002854:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
10002856:	4288      	cmp	r0, r1
	beq _EXIT_EXC
10002858:	d002      	beq.n	10002860 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
1000285a:	4903      	ldr	r1, [pc, #12]	; (10002868 <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
1000285c:	4a03      	ldr	r2, [pc, #12]	; (1000286c <_EXIT_EXC+0xc>)
	str r2, [r1]
1000285e:	600a      	str	r2, [r1, #0]

10002860 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
10002860:	4770      	bx	lr
10002862:	0000      	.short	0x0000
	ldr r3, =_kernel
10002864:	20000484 	.word	0x20000484
	ldr r1, =_SCS_ICSR
10002868:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
1000286c:	10000000 	.word	0x10000000

10002870 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
10002870:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10002872:	4b1b      	ldr	r3, [pc, #108]	; (100028e0 <z_arm_fault+0x70>)
{
10002874:	000e      	movs	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10002876:	685b      	ldr	r3, [r3, #4]
{
10002878:	b088      	sub	sp, #32
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
1000287a:	05db      	lsls	r3, r3, #23
1000287c:	0ddb      	lsrs	r3, r3, #23
1000287e:	b662      	cpsie	i
10002880:	f3bf 8f6f 	isb	sy
	*nested_exc = false;
10002884:	2500      	movs	r5, #0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10002886:	0e14      	lsrs	r4, r2, #24
		return NULL;
10002888:	0029      	movs	r1, r5
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
1000288a:	2cff      	cmp	r4, #255	; 0xff
1000288c:	d109      	bne.n	100028a2 <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
1000288e:	3cf3      	subs	r4, #243	; 0xf3
10002890:	4014      	ands	r4, r2
10002892:	2c08      	cmp	r4, #8
10002894:	d005      	beq.n	100028a2 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
10002896:	0001      	movs	r1, r0
			*nested_exc = true;
10002898:	3501      	adds	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
1000289a:	0712      	lsls	r2, r2, #28
1000289c:	d501      	bpl.n	100028a2 <z_arm_fault+0x32>
			ptr_esf =  (z_arch_esf_t *)psp;
1000289e:	0031      	movs	r1, r6
	*nested_exc = false;
100028a0:	2500      	movs	r5, #0
	uint32_t reason = K_ERR_CPU_EXCEPTION;
100028a2:	2400      	movs	r4, #0
	switch (fault) {
100028a4:	2b03      	cmp	r3, #3
100028a6:	d106      	bne.n	100028b6 <z_arm_fault+0x46>
	uint16_t fault_insn = *(ret_addr - 1);
100028a8:	698b      	ldr	r3, [r1, #24]
100028aa:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
100028ac:	881a      	ldrh	r2, [r3, #0]
100028ae:	4b0d      	ldr	r3, [pc, #52]	; (100028e4 <z_arm_fault+0x74>)
100028b0:	429a      	cmp	r2, r3
100028b2:	d100      	bne.n	100028b6 <z_arm_fault+0x46>
		reason = esf->basic.r0;
100028b4:	680c      	ldr	r4, [r1, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
100028b6:	2220      	movs	r2, #32
100028b8:	4668      	mov	r0, sp
100028ba:	f002 f9ff 	bl	10004cbc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
100028be:	9b07      	ldr	r3, [sp, #28]
100028c0:	2d00      	cmp	r5, #0
100028c2:	d00a      	beq.n	100028da <z_arm_fault+0x6a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
100028c4:	05da      	lsls	r2, r3, #23
100028c6:	d102      	bne.n	100028ce <z_arm_fault+0x5e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
100028c8:	4a07      	ldr	r2, [pc, #28]	; (100028e8 <z_arm_fault+0x78>)
100028ca:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
100028cc:	9307      	str	r3, [sp, #28]
	}

	z_arm_fatal_error(reason, &esf_copy);
100028ce:	4669      	mov	r1, sp
100028d0:	0020      	movs	r0, r4
100028d2:	f002 f99d 	bl	10004c10 <z_arm_fatal_error>
}
100028d6:	b008      	add	sp, #32
100028d8:	bd70      	pop	{r4, r5, r6, pc}
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
100028da:	0a5b      	lsrs	r3, r3, #9
100028dc:	025b      	lsls	r3, r3, #9
100028de:	e7f5      	b.n	100028cc <z_arm_fault+0x5c>
100028e0:	e000ed00 	.word	0xe000ed00
100028e4:	0000df02 	.word	0x0000df02
100028e8:	000001ff 	.word	0x000001ff

100028ec <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
100028ec:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
100028f0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
100028f4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
100028f6:	4672      	mov	r2, lr
	bl z_arm_fault
100028f8:	f7ff ffba 	bl	10002870 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
100028fc:	bd01      	pop	{r0, pc}
100028fe:	46c0      	nop			; (mov r8, r8)

10002900 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
10002900:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002902:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
10002904:	2200      	movs	r2, #0
10002906:	2603      	movs	r6, #3
10002908:	25ff      	movs	r5, #255	; 0xff
1000290a:	00a4      	lsls	r4, r4, #2
1000290c:	0010      	movs	r0, r2
1000290e:	002f      	movs	r7, r5
10002910:	4030      	ands	r0, r6
10002912:	00c0      	lsls	r0, r0, #3
10002914:	4087      	lsls	r7, r0
10002916:	4905      	ldr	r1, [pc, #20]	; (1000292c <z_arm_interrupt_init+0x2c>)
10002918:	0893      	lsrs	r3, r2, #2
1000291a:	009b      	lsls	r3, r3, #2
1000291c:	185b      	adds	r3, r3, r1
1000291e:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
10002920:	3201      	adds	r2, #1
10002922:	43b9      	bics	r1, r7
10002924:	5119      	str	r1, [r3, r4]
10002926:	2a1a      	cmp	r2, #26
10002928:	d1f0      	bne.n	1000290c <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
1000292a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000292c:	e000e100 	.word	0xe000e100

10002930 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10002930:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
10002932:	4807      	ldr	r0, [pc, #28]	; (10002950 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10002934:	4907      	ldr	r1, [pc, #28]	; (10002954 <__start+0x24>)
    adds r0, r0, r1
10002936:	1840      	adds	r0, r0, r1
    msr PSP, r0
10002938:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
1000293c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
10002940:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
10002942:	4308      	orrs	r0, r1
    msr CONTROL, r0
10002944:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
10002948:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
1000294c:	f7ff fed6 	bl	100026fc <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
10002950:	200009c8 	.word	0x200009c8
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10002954:	00000800 	.word	0x00000800

10002958 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
10002958:	4b0a      	ldr	r3, [pc, #40]	; (10002984 <z_impl_k_thread_abort+0x2c>)
{
1000295a:	b510      	push	{r4, lr}
	if (_current == thread) {
1000295c:	689b      	ldr	r3, [r3, #8]
1000295e:	4283      	cmp	r3, r0
10002960:	d10d      	bne.n	1000297e <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10002962:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
10002966:	2b00      	cmp	r3, #0
10002968:	d009      	beq.n	1000297e <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
1000296a:	2280      	movs	r2, #128	; 0x80
1000296c:	4b06      	ldr	r3, [pc, #24]	; (10002988 <z_impl_k_thread_abort+0x30>)
1000296e:	0552      	lsls	r2, r2, #21
10002970:	6859      	ldr	r1, [r3, #4]
10002972:	430a      	orrs	r2, r1
10002974:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
10002976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002978:	4904      	ldr	r1, [pc, #16]	; (1000298c <z_impl_k_thread_abort+0x34>)
1000297a:	400a      	ands	r2, r1
1000297c:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
1000297e:	f001 fc73 	bl	10004268 <z_thread_abort>
}
10002982:	bd10      	pop	{r4, pc}
10002984:	20000484 	.word	0x20000484
10002988:	e000ed00 	.word	0xe000ed00
1000298c:	ffff7fff 	.word	0xffff7fff

10002990 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
10002990:	4b01      	ldr	r3, [pc, #4]	; (10002998 <__stdout_hook_install+0x8>)
10002992:	6018      	str	r0, [r3, #0]
}
10002994:	4770      	bx	lr
10002996:	46c0      	nop			; (mov r8, r8)
10002998:	200001c4 	.word	0x200001c4

1000299c <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000299c:	4b0e      	ldr	r3, [pc, #56]	; (100029d8 <rp2040_init+0x3c>)
1000299e:	4a0f      	ldr	r2, [pc, #60]	; (100029dc <rp2040_init+0x40>)
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
100029a0:	b570      	push	{r4, r5, r6, lr}
100029a2:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100029a4:	4d0e      	ldr	r5, [pc, #56]	; (100029e0 <rp2040_init+0x44>)
100029a6:	4b0f      	ldr	r3, [pc, #60]	; (100029e4 <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
100029a8:	4c0f      	ldr	r4, [pc, #60]	; (100029e8 <rp2040_init+0x4c>)
100029aa:	602b      	str	r3, [r5, #0]
100029ac:	0019      	movs	r1, r3
100029ae:	68a2      	ldr	r2, [r4, #8]
100029b0:	4391      	bics	r1, r2
100029b2:	d1fb      	bne.n	100029ac <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
100029b4:	f000 fc54 	bl	10003260 <clocks_init>
100029b8:	4b0c      	ldr	r3, [pc, #48]	; (100029ec <rp2040_init+0x50>)
100029ba:	602b      	str	r3, [r5, #0]
100029bc:	68a3      	ldr	r3, [r4, #8]
100029be:	01db      	lsls	r3, r3, #7
100029c0:	3380      	adds	r3, #128	; 0x80
100029c2:	d1fb      	bne.n	100029bc <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
100029c4:	f3ef 8310 	mrs	r3, PRIMASK
100029c8:	b672      	cpsid	i
	if (key != 0U) {
100029ca:	2b00      	cmp	r3, #0
100029cc:	d102      	bne.n	100029d4 <rp2040_init+0x38>
	__asm__ volatile(
100029ce:	b662      	cpsie	i
100029d0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
100029d4:	2000      	movs	r0, #0
100029d6:	bd70      	pop	{r4, r5, r6, pc}
100029d8:	4000e000 	.word	0x4000e000
100029dc:	ffffcdbf 	.word	0xffffcdbf
100029e0:	4000f000 	.word	0x4000f000
100029e4:	003c3ffe 	.word	0x003c3ffe
100029e8:	4000c000 	.word	0x4000c000
100029ec:	01ffffff 	.word	0x01ffffff

100029f0 <uart_console_init>:
{

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
100029f0:	4809      	ldr	r0, [pc, #36]	; (10002a18 <uart_console_init+0x28>)
100029f2:	4b0a      	ldr	r3, [pc, #40]	; (10002a1c <uart_console_init+0x2c>)
{
100029f4:	b510      	push	{r4, lr}
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
100029f6:	6018      	str	r0, [r3, #0]
100029f8:	f002 fdb9 	bl	1000556e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
100029fc:	2800      	cmp	r0, #0
100029fe:	d008      	beq.n	10002a12 <uart_console_init+0x22>
	__stdout_hook_install(console_out);
10002a00:	4c07      	ldr	r4, [pc, #28]	; (10002a20 <uart_console_init+0x30>)
10002a02:	0020      	movs	r0, r4
10002a04:	f7ff ffc4 	bl	10002990 <__stdout_hook_install>
	__printk_hook_install(console_out);
10002a08:	0020      	movs	r0, r4
10002a0a:	f7ff fa89 	bl	10001f20 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
10002a0e:	2000      	movs	r0, #0
}
10002a10:	bd10      	pop	{r4, pc}
		return -ENODEV;
10002a12:	2013      	movs	r0, #19
10002a14:	4240      	negs	r0, r0
10002a16:	e7fb      	b.n	10002a10 <uart_console_init+0x20>
10002a18:	100059a8 	.word	0x100059a8
10002a1c:	200003e0 	.word	0x200003e0
10002a20:	10002a25 	.word	0x10002a25

10002a24 <console_out>:
{
10002a24:	b570      	push	{r4, r5, r6, lr}
10002a26:	0004      	movs	r4, r0
10002a28:	4d07      	ldr	r5, [pc, #28]	; (10002a48 <console_out+0x24>)
	if ('\n' == c) {
10002a2a:	280a      	cmp	r0, #10
10002a2c:	d104      	bne.n	10002a38 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
10002a2e:	6828      	ldr	r0, [r5, #0]
10002a30:	6883      	ldr	r3, [r0, #8]
10002a32:	210d      	movs	r1, #13
10002a34:	685b      	ldr	r3, [r3, #4]
10002a36:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
10002a38:	6828      	ldr	r0, [r5, #0]
10002a3a:	6883      	ldr	r3, [r0, #8]
10002a3c:	b2e1      	uxtb	r1, r4
10002a3e:	685b      	ldr	r3, [r3, #4]
10002a40:	4798      	blx	r3
}
10002a42:	0020      	movs	r0, r4
10002a44:	bd70      	pop	{r4, r5, r6, pc}
10002a46:	46c0      	nop			; (mov r8, r8)
10002a48:	200003e0 	.word	0x200003e0

10002a4c <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
10002a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002a4e:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10002a50:	2400      	movs	r4, #0
		status_reg = &irq_ctrl_base->ints[pin / 8];
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10002a52:	270f      	movs	r7, #15
	struct gpio_rpi_data *data = dev->data;
10002a54:	6903      	ldr	r3, [r0, #16]
10002a56:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
10002a58:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10002a5a:	4a14      	ldr	r2, [pc, #80]	; (10002aac <gpio_rpi_isr+0x60>)
10002a5c:	3308      	adds	r3, #8
10002a5e:	009b      	lsls	r3, r3, #2
10002a60:	589b      	ldr	r3, [r3, r2]
10002a62:	2207      	movs	r2, #7
10002a64:	4022      	ands	r2, r4
10002a66:	0092      	lsls	r2, r2, #2
10002a68:	40d3      	lsrs	r3, r2
		if (events) {
10002a6a:	423b      	tst	r3, r7
10002a6c:	d103      	bne.n	10002a76 <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10002a6e:	3401      	adds	r4, #1
10002a70:	2c1e      	cmp	r4, #30
10002a72:	d1f1      	bne.n	10002a58 <gpio_rpi_isr+0xc>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
10002a74:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
10002a76:	0039      	movs	r1, r7
10002a78:	0020      	movs	r0, r4
10002a7a:	f000 fd37 	bl	100034ec <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
10002a7e:	9b01      	ldr	r3, [sp, #4]
10002a80:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10002a82:	2900      	cmp	r1, #0
10002a84:	d0f3      	beq.n	10002a6e <gpio_rpi_isr+0x22>
10002a86:	2301      	movs	r3, #1
10002a88:	40a3      	lsls	r3, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
10002a8a:	680d      	ldr	r5, [r1, #0]
10002a8c:	9300      	str	r3, [sp, #0]
		if (cb->pin_mask & pins) {
10002a8e:	688b      	ldr	r3, [r1, #8]
10002a90:	9a00      	ldr	r2, [sp, #0]
10002a92:	9800      	ldr	r0, [sp, #0]
10002a94:	401a      	ands	r2, r3
10002a96:	4203      	tst	r3, r0
10002a98:	d002      	beq.n	10002aa0 <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
10002a9a:	0030      	movs	r0, r6
10002a9c:	684b      	ldr	r3, [r1, #4]
10002a9e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10002aa0:	2d00      	cmp	r5, #0
10002aa2:	d0e4      	beq.n	10002a6e <gpio_rpi_isr+0x22>
10002aa4:	0029      	movs	r1, r5
10002aa6:	682d      	ldr	r5, [r5, #0]
10002aa8:	e7f1      	b.n	10002a8e <gpio_rpi_isr+0x42>
10002aaa:	46c0      	nop			; (mov r8, r8)
10002aac:	40014100 	.word	0x40014100

10002ab0 <i2c_dw_initialize>:
	.target_unregister = i2c_dw_slave_unregister,
#endif /* CONFIG_I2C_TARGET */
};

static int i2c_dw_initialize(const struct device *dev)
{
10002ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct i2c_dw_rom_config * const rom = dev->config;
10002ab2:	6847      	ldr	r7, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10002ab4:	6906      	ldr	r6, [r0, #16]
{
10002ab6:	0005      	movs	r5, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
10002ab8:	2100      	movs	r1, #0
10002aba:	68f8      	ldr	r0, [r7, #12]
10002abc:	aa01      	add	r2, sp, #4
10002abe:	f000 fb4b 	bl	10003158 <pinctrl_lookup_state>
10002ac2:	1e04      	subs	r4, r0, #0
	if (ret < 0) {
10002ac4:	db17      	blt.n	10002af6 <i2c_dw_initialize+0x46>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
10002ac6:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10002ac8:	2200      	movs	r2, #0
10002aca:	7919      	ldrb	r1, [r3, #4]
10002acc:	6818      	ldr	r0, [r3, #0]
10002ace:	f002 fc7e 	bl	100053ce <pinctrl_configure_pins>
10002ad2:	1e04      	subs	r4, r0, #0
	union ic_con_register ic_con;
	int ret = 0;

#if defined(CONFIG_PINCTRL)
	ret = pinctrl_apply_state(rom->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret) {
10002ad4:	d10f      	bne.n	10002af6 <i2c_dw_initialize+0x46>
	return z_impl_k_sem_init(sem, initial_count, limit);
10002ad6:	2201      	movs	r2, #1
10002ad8:	0001      	movs	r1, r0
10002ada:	4252      	negs	r2, r2
10002adc:	0030      	movs	r0, r6
10002ade:	f002 fda2 	bl	10005626 <z_impl_k_sem_init>
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002ae2:	686b      	ldr	r3, [r5, #4]
10002ae4:	681b      	ldr	r3, [r3, #0]

DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)

DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
DEFINE_MM_REG_READ(comp_type, DW_IC_REG_COMP_TYPE, 32)
10002ae6:	001a      	movs	r2, r3
10002ae8:	32fc      	adds	r2, #252	; 0xfc
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
10002aea:	6811      	ldr	r1, [r2, #0]

	k_sem_init(&dw->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	uint32_t reg_base = get_regs(dev);

	/* verify that we have a valid DesignWare register first */
	if (read_comp_type(reg_base) != I2C_DW_MAGIC_KEY) {
10002aec:	4a1b      	ldr	r2, [pc, #108]	; (10002b5c <i2c_dw_initialize+0xac>)
10002aee:	4291      	cmp	r1, r2
10002af0:	d003      	beq.n	10002afa <i2c_dw_initialize+0x4a>
		LOG_DBG("I2C: DesignWare magic key not found, check base "
			    "address. Stopping initialization");
		return -EIO;
10002af2:	2405      	movs	r4, #5
10002af4:	4264      	negs	r4, r4
	}

	dw->state = I2C_DW_STATE_READY;

	return ret;
}
10002af6:	0020      	movs	r0, r4
10002af8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
10002afa:	2206      	movs	r2, #6
10002afc:	681b      	ldr	r3, [r3, #0]
	rom->config_func(dev);
10002afe:	0028      	movs	r0, r5
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
10002b00:	4013      	ands	r3, r2
10002b02:	3b06      	subs	r3, #6
10002b04:	425a      	negs	r2, r3
10002b06:	4153      	adcs	r3, r2
10002b08:	0032      	movs	r2, r6
10002b0a:	3208      	adds	r2, #8
10002b0c:	77d3      	strb	r3, [r2, #31]
	rom->config_func(dev);
10002b0e:	687b      	ldr	r3, [r7, #4]
10002b10:	4798      	blx	r3
	dw->app_config = I2C_MODE_CONTROLLER | i2c_map_dt_bitrate(rom->bitrate);
10002b12:	68bb      	ldr	r3, [r7, #8]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
10002b14:	4a12      	ldr	r2, [pc, #72]	; (10002b60 <i2c_dw_initialize+0xb0>)
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST:
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
10002b16:	2106      	movs	r1, #6
	switch (bitrate) {
10002b18:	4293      	cmp	r3, r2
10002b1a:	d009      	beq.n	10002b30 <i2c_dw_initialize+0x80>
10002b1c:	d813      	bhi.n	10002b46 <i2c_dw_initialize+0x96>
10002b1e:	4a11      	ldr	r2, [pc, #68]	; (10002b64 <i2c_dw_initialize+0xb4>)
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
10002b20:	3904      	subs	r1, #4
	switch (bitrate) {
10002b22:	4293      	cmp	r3, r2
10002b24:	d004      	beq.n	10002b30 <i2c_dw_initialize+0x80>
10002b26:	4a10      	ldr	r2, [pc, #64]	; (10002b68 <i2c_dw_initialize+0xb8>)
10002b28:	1899      	adds	r1, r3, r2
10002b2a:	424b      	negs	r3, r1
10002b2c:	4159      	adcs	r1, r3
10002b2e:	0089      	lsls	r1, r1, #2
10002b30:	2310      	movs	r3, #16
10002b32:	4319      	orrs	r1, r3
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
10002b34:	0028      	movs	r0, r5
	dw->app_config = I2C_MODE_CONTROLLER | i2c_map_dt_bitrate(rom->bitrate);
10002b36:	6131      	str	r1, [r6, #16]
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
10002b38:	f002 f997 	bl	10004e6a <i2c_dw_runtime_configure>
10002b3c:	1e04      	subs	r4, r0, #0
10002b3e:	d1d8      	bne.n	10002af2 <i2c_dw_initialize+0x42>
	dw->state = I2C_DW_STATE_READY;
10002b40:	3605      	adds	r6, #5
10002b42:	77f0      	strb	r0, [r6, #31]
	return ret;
10002b44:	e7d7      	b.n	10002af6 <i2c_dw_initialize+0x46>
10002b46:	4a09      	ldr	r2, [pc, #36]	; (10002b6c <i2c_dw_initialize+0xbc>)
	case I2C_BITRATE_HIGH:
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
10002b48:	2108      	movs	r1, #8
	switch (bitrate) {
10002b4a:	4293      	cmp	r3, r2
10002b4c:	d0f0      	beq.n	10002b30 <i2c_dw_initialize+0x80>
10002b4e:	4a08      	ldr	r2, [pc, #32]	; (10002b70 <i2c_dw_initialize+0xc0>)
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");

	return 0;
10002b50:	0021      	movs	r1, r4
	switch (bitrate) {
10002b52:	4293      	cmp	r3, r2
10002b54:	d1ec      	bne.n	10002b30 <i2c_dw_initialize+0x80>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
10002b56:	210a      	movs	r1, #10
10002b58:	e7ea      	b.n	10002b30 <i2c_dw_initialize+0x80>
10002b5a:	46c0      	nop			; (mov r8, r8)
10002b5c:	44570140 	.word	0x44570140
10002b60:	000f4240 	.word	0x000f4240
10002b64:	000186a0 	.word	0x000186a0
10002b68:	fff9e580 	.word	0xfff9e580
10002b6c:	0033e140 	.word	0x0033e140
10002b70:	004c4b40 	.word	0x004c4b40

10002b74 <i2c_dw_transfer>:
{
10002b74:	b5f0      	push	{r4, r5, r6, r7, lr}
10002b76:	b085      	sub	sp, #20
10002b78:	0004      	movs	r4, r0
10002b7a:	000e      	movs	r6, r1
		return 0;
10002b7c:	1e10      	subs	r0, r2, #0
{
10002b7e:	9201      	str	r2, [sp, #4]
10002b80:	9303      	str	r3, [sp, #12]
	if (!num_msgs) {
10002b82:	d100      	bne.n	10002b86 <i2c_dw_transfer+0x12>
10002b84:	e0b3      	b.n	10002cee <i2c_dw_transfer+0x17a>

static ALWAYS_INLINE int sys_test_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	return temp & (1 << bit);
10002b86:	2701      	movs	r7, #1
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002b88:	6862      	ldr	r2, [r4, #4]
10002b8a:	6815      	ldr	r5, [r2, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10002b8c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
10002b8e:	423a      	tst	r2, r7
10002b90:	d000      	beq.n	10002b94 <i2c_dw_transfer+0x20>
10002b92:	e0c1      	b.n	10002d18 <i2c_dw_transfer+0x1a4>
	struct i2c_dw_dev_config * const dw = dev->data;
10002b94:	6924      	ldr	r4, [r4, #16]
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
10002b96:	2208      	movs	r2, #8
10002b98:	1d61      	adds	r1, r4, #5
10002b9a:	7fc8      	ldrb	r0, [r1, #31]
10002b9c:	0003      	movs	r3, r0
10002b9e:	4013      	ands	r3, r2
10002ba0:	469c      	mov	ip, r3
10002ba2:	4210      	tst	r0, r2
10002ba4:	d000      	beq.n	10002ba8 <i2c_dw_transfer+0x34>
10002ba6:	e0b7      	b.n	10002d18 <i2c_dw_transfer+0x1a4>
DEFINE_MM_REG_WRITE(intr_mask, DW_IC_REG_INTR_MASK, 32)
10002ba8:	002b      	movs	r3, r5
10002baa:	3330      	adds	r3, #48	; 0x30
	dw->state |= I2C_DW_BUSY;
10002bac:	7fc8      	ldrb	r0, [r1, #31]
10002bae:	9302      	str	r3, [sp, #8]
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
10002bb0:	4663      	mov	r3, ip
10002bb2:	4302      	orrs	r2, r0
10002bb4:	77ca      	strb	r2, [r1, #31]
	uint32_t temp = *(volatile uint32_t *)addr;
10002bb6:	6eea      	ldr	r2, [r5, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10002bb8:	43ba      	bics	r2, r7
10002bba:	66ea      	str	r2, [r5, #108]	; 0x6c
10002bbc:	632b      	str	r3, [r5, #48]	; 0x30
	if (I2C_MODE_CONTROLLER & dw->app_config) {
10002bbe:	6921      	ldr	r1, [r4, #16]
	return *(volatile uint32_t *)addr;
10002bc0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
10002bc2:	06cb      	lsls	r3, r1, #27
10002bc4:	d50e      	bpl.n	10002be4 <i2c_dw_transfer+0x70>
		ic_con.bits.master_mode = 1U;
10002bc6:	2261      	movs	r2, #97	; 0x61
	if (I2C_ADDR_10_BITS & dw->app_config) {
10002bc8:	4239      	tst	r1, r7
10002bca:	d000      	beq.n	10002bce <i2c_dw_transfer+0x5a>
		ic_con.bits.addr_slave_10bit = 1U;
10002bcc:	3218      	adds	r2, #24
	switch (I2C_SPEED_GET(dw->app_config)) {
10002bce:	2007      	movs	r0, #7
10002bd0:	2304      	movs	r3, #4
10002bd2:	0849      	lsrs	r1, r1, #1
10002bd4:	4008      	ands	r0, r1
10002bd6:	4219      	tst	r1, r3
10002bd8:	d10a      	bne.n	10002bf0 <i2c_dw_transfer+0x7c>
10002bda:	2706      	movs	r7, #6
10002bdc:	4239      	tst	r1, r7
10002bde:	d11c      	bne.n	10002c1a <i2c_dw_transfer+0xa6>
10002be0:	2801      	cmp	r0, #1
10002be2:	d012      	beq.n	10002c0a <i2c_dw_transfer+0x96>
		dw->state = I2C_DW_STATE_READY;
10002be4:	2300      	movs	r3, #0
		return ret;
10002be6:	2016      	movs	r0, #22
		dw->state = I2C_DW_STATE_READY;
10002be8:	3405      	adds	r4, #5
10002bea:	77e3      	strb	r3, [r4, #31]
		return -EIO;
10002bec:	4240      	negs	r0, r0
10002bee:	e07e      	b.n	10002cee <i2c_dw_transfer+0x17a>
	switch (I2C_SPEED_GET(dw->app_config)) {
10002bf0:	2804      	cmp	r0, #4
10002bf2:	d1f7      	bne.n	10002be4 <i2c_dw_transfer+0x70>
		if (!dw->support_hs_mode) {
10002bf4:	0021      	movs	r1, r4
10002bf6:	3108      	adds	r1, #8
10002bf8:	7fc9      	ldrb	r1, [r1, #31]
10002bfa:	2900      	cmp	r1, #0
10002bfc:	d0f2      	beq.n	10002be4 <i2c_dw_transfer+0x70>
		write_hs_scl_lcnt(dw->lcnt, reg_base);
10002bfe:	8c61      	ldrh	r1, [r4, #34]	; 0x22
	*(volatile uint32_t *)addr = data;
10002c00:	62a9      	str	r1, [r5, #40]	; 0x28
		write_hs_scl_hcnt(dw->hcnt, reg_base);
10002c02:	8c21      	ldrh	r1, [r4, #32]
10002c04:	6269      	str	r1, [r5, #36]	; 0x24
		ic_con.bits.speed = I2C_DW_SPEED_HIGH;
10002c06:	2106      	movs	r1, #6
10002c08:	e005      	b.n	10002c16 <i2c_dw_transfer+0xa2>
		write_ss_scl_lcnt(dw->lcnt, reg_base);
10002c0a:	8c61      	ldrh	r1, [r4, #34]	; 0x22
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
10002c0c:	43ba      	bics	r2, r7
10002c0e:	61a9      	str	r1, [r5, #24]
		write_ss_scl_hcnt(dw->hcnt, reg_base);
10002c10:	8c21      	ldrh	r1, [r4, #32]
10002c12:	6169      	str	r1, [r5, #20]
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
10002c14:	2102      	movs	r1, #2
		ic_con.bits.speed = I2C_DW_SPEED_HIGH;
10002c16:	430a      	orrs	r2, r1
		break;
10002c18:	e006      	b.n	10002c28 <i2c_dw_transfer+0xb4>
		ic_con.bits.speed = I2C_DW_SPEED_FAST;
10002c1a:	43ba      	bics	r2, r7
10002c1c:	4313      	orrs	r3, r2
10002c1e:	001a      	movs	r2, r3
		write_fs_scl_lcnt(dw->lcnt, reg_base);
10002c20:	8c61      	ldrh	r1, [r4, #34]	; 0x22
10002c22:	6229      	str	r1, [r5, #32]
		write_fs_scl_hcnt(dw->hcnt, reg_base);
10002c24:	8c21      	ldrh	r1, [r4, #32]
10002c26:	61e9      	str	r1, [r5, #28]
10002c28:	602a      	str	r2, [r5, #0]
10002c2a:	2200      	movs	r2, #0
10002c2c:	63aa      	str	r2, [r5, #56]	; 0x38
10002c2e:	63ea      	str	r2, [r5, #60]	; 0x3c
	return *(volatile uint32_t *)addr;
10002c30:	686a      	ldr	r2, [r5, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
10002c32:	6829      	ldr	r1, [r5, #0]
	if (test_bit_con_master_mode(reg_base)) {
10002c34:	07cb      	lsls	r3, r1, #31
10002c36:	d55c      	bpl.n	10002cf2 <i2c_dw_transfer+0x17e>
		ic_tar.bits.ic_tar = slave_address;
10002c38:	9b03      	ldr	r3, [sp, #12]
10002c3a:	0a92      	lsrs	r2, r2, #10
10002c3c:	059b      	lsls	r3, r3, #22
10002c3e:	0d9b      	lsrs	r3, r3, #22
10002c40:	0292      	lsls	r2, r2, #10
10002c42:	431a      	orrs	r2, r3
	if (I2C_MODE_CONTROLLER & dw->app_config) {
10002c44:	6923      	ldr	r3, [r4, #16]
10002c46:	06d9      	lsls	r1, r3, #27
10002c48:	d504      	bpl.n	10002c54 <i2c_dw_transfer+0xe0>
		if (I2C_ADDR_10_BITS & dw->app_config) {
10002c4a:	07db      	lsls	r3, r3, #31
10002c4c:	d554      	bpl.n	10002cf8 <i2c_dw_transfer+0x184>
			ic_tar.bits.ic_10bitaddr_master = 1U;
10002c4e:	2380      	movs	r3, #128	; 0x80
10002c50:	015b      	lsls	r3, r3, #5
10002c52:	431a      	orrs	r2, r3
	*(volatile uint32_t *)addr = data;
10002c54:	606a      	str	r2, [r5, #4]
	*(volatile uint32_t *)addr = temp | (1 << bit);
10002c56:	2201      	movs	r2, #1
	uint32_t temp = *(volatile uint32_t *)addr;
10002c58:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp | (1 << bit);
10002c5a:	4313      	orrs	r3, r2
10002c5c:	66eb      	str	r3, [r5, #108]	; 0x6c
		dw->rx_pending = 0U;
10002c5e:	2700      	movs	r7, #0
		dw->xfr_buf = cur_msg->buf;
10002c60:	6832      	ldr	r2, [r6, #0]
		dw->xfr_len = cur_msg->len;
10002c62:	6871      	ldr	r1, [r6, #4]
		pflags = dw->xfr_flags;
10002c64:	1de3      	adds	r3, r4, #7
10002c66:	7fd8      	ldrb	r0, [r3, #31]
		dw->xfr_buf = cur_msg->buf;
10002c68:	6162      	str	r2, [r4, #20]
		dw->xfr_len = cur_msg->len;
10002c6a:	61a1      	str	r1, [r4, #24]
		dw->xfr_flags = cur_msg->flags;
10002c6c:	7a32      	ldrb	r2, [r6, #8]
10002c6e:	77da      	strb	r2, [r3, #31]
		    != (dw->xfr_flags & I2C_MSG_RW_MASK)) {
10002c70:	4050      	eors	r0, r2
		dw->rx_pending = 0U;
10002c72:	61e7      	str	r7, [r4, #28]
		if ((pflags & I2C_MSG_RW_MASK)
10002c74:	3701      	adds	r7, #1
10002c76:	4238      	tst	r0, r7
10002c78:	d002      	beq.n	10002c80 <i2c_dw_transfer+0x10c>
			dw->xfr_flags |= I2C_MSG_RESTART;
10002c7a:	2004      	movs	r0, #4
10002c7c:	4302      	orrs	r2, r0
10002c7e:	77da      	strb	r2, [r3, #31]
		if (msg_left == 1U) {
10002c80:	9a01      	ldr	r2, [sp, #4]
10002c82:	2a01      	cmp	r2, #1
10002c84:	d103      	bne.n	10002c8e <i2c_dw_transfer+0x11a>
			dw->xfr_flags |= I2C_MSG_STOP;
10002c86:	7fd8      	ldrb	r0, [r3, #31]
10002c88:	3201      	adds	r2, #1
10002c8a:	4302      	orrs	r2, r0
10002c8c:	77da      	strb	r2, [r3, #31]
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
10002c8e:	2203      	movs	r2, #3
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
10002c90:	2001      	movs	r0, #1
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
10002c92:	1d67      	adds	r7, r4, #5
10002c94:	7ffb      	ldrb	r3, [r7, #31]
10002c96:	4393      	bics	r3, r2
10002c98:	77fb      	strb	r3, [r7, #31]
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
10002c9a:	1de3      	adds	r3, r4, #7
10002c9c:	7fdb      	ldrb	r3, [r3, #31]
10002c9e:	3a02      	subs	r2, #2
10002ca0:	401a      	ands	r2, r3
10002ca2:	4203      	tst	r3, r0
10002ca4:	d12b      	bne.n	10002cfe <i2c_dw_transfer+0x18a>
			dw->state |= I2C_DW_CMD_SEND;
10002ca6:	7ffb      	ldrb	r3, [r7, #31]
10002ca8:	4303      	orrs	r3, r0
10002caa:	77fb      	strb	r3, [r7, #31]
			dw->request_bytes = 0U;
10002cac:	1da3      	adds	r3, r4, #6
10002cae:	77da      	strb	r2, [r3, #31]
		if (test_bit_con_master_mode(reg_base)) {
10002cb0:	2201      	movs	r2, #1
	uint32_t temp = *(volatile uint32_t *)addr;
10002cb2:	682b      	ldr	r3, [r5, #0]
10002cb4:	4213      	tst	r3, r2
10002cb6:	d029      	beq.n	10002d0c <i2c_dw_transfer+0x198>
10002cb8:	4b18      	ldr	r3, [pc, #96]	; (10002d1c <i2c_dw_transfer+0x1a8>)
10002cba:	9a02      	ldr	r2, [sp, #8]
10002cbc:	6013      	str	r3, [r2, #0]
	return z_impl_k_sem_take(sem, timeout);
10002cbe:	2201      	movs	r2, #1
10002cc0:	4252      	negs	r2, r2
10002cc2:	17d3      	asrs	r3, r2, #31
10002cc4:	0020      	movs	r0, r4
10002cc6:	f000 fef7 	bl	10003ab8 <z_impl_k_sem_take>
		if (dw->state & I2C_DW_CMD_ERROR) {
10002cca:	2204      	movs	r2, #4
10002ccc:	7ffb      	ldrb	r3, [r7, #31]
10002cce:	4213      	tst	r3, r2
10002cd0:	d11f      	bne.n	10002d12 <i2c_dw_transfer+0x19e>
		if (dw->xfr_len > 0) {
10002cd2:	69a3      	ldr	r3, [r4, #24]
10002cd4:	2b00      	cmp	r3, #0
10002cd6:	d11c      	bne.n	10002d12 <i2c_dw_transfer+0x19e>
		msg_left--;
10002cd8:	9a01      	ldr	r2, [sp, #4]
		cur_msg++;
10002cda:	360c      	adds	r6, #12
		msg_left--;
10002cdc:	3a01      	subs	r2, #1
10002cde:	b2d3      	uxtb	r3, r2
10002ce0:	9301      	str	r3, [sp, #4]
	while (msg_left > 0) {
10002ce2:	2b00      	cmp	r3, #0
10002ce4:	d1bb      	bne.n	10002c5e <i2c_dw_transfer+0xea>
	ret = i2c_dw_setup(dev, slave_address);
10002ce6:	0018      	movs	r0, r3
	dw->state = I2C_DW_STATE_READY;
10002ce8:	2300      	movs	r3, #0
10002cea:	3405      	adds	r4, #5
10002cec:	77e3      	strb	r3, [r4, #31]
}
10002cee:	b005      	add	sp, #20
10002cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002cf2:	9b03      	ldr	r3, [sp, #12]
10002cf4:	60ab      	str	r3, [r5, #8]
DEFINE_MM_REG_READ(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(sar, DW_IC_REG_SAR, 32)
10002cf6:	e7a5      	b.n	10002c44 <i2c_dw_transfer+0xd0>
			ic_tar.bits.ic_10bitaddr_master = 0U;
10002cf8:	4b09      	ldr	r3, [pc, #36]	; (10002d20 <i2c_dw_transfer+0x1ac>)
10002cfa:	401a      	ands	r2, r3
10002cfc:	e7aa      	b.n	10002c54 <i2c_dw_transfer+0xe0>
			dw->state |= I2C_DW_CMD_RECV;
10002cfe:	2302      	movs	r3, #2
10002d00:	7ffa      	ldrb	r2, [r7, #31]
10002d02:	4313      	orrs	r3, r2
10002d04:	77fb      	strb	r3, [r7, #31]
			dw->request_bytes = dw->xfr_len;
10002d06:	1da3      	adds	r3, r4, #6
10002d08:	77d9      	strb	r1, [r3, #31]
10002d0a:	e7d1      	b.n	10002cb0 <i2c_dw_transfer+0x13c>
10002d0c:	2398      	movs	r3, #152	; 0x98
10002d0e:	009b      	lsls	r3, r3, #2
10002d10:	e7d3      	b.n	10002cba <i2c_dw_transfer+0x146>
10002d12:	2005      	movs	r0, #5
10002d14:	4240      	negs	r0, r0
10002d16:	e7e7      	b.n	10002ce8 <i2c_dw_transfer+0x174>
		return -EIO;
10002d18:	2005      	movs	r0, #5
10002d1a:	e767      	b.n	10002bec <i2c_dw_transfer+0x78>
10002d1c:	0000025f 	.word	0x0000025f
10002d20:	ffffefff 	.word	0xffffefff

10002d24 <pwm_set>:
 * @retval -ENOTSUP If requested period or pulse cycles are not supported.
 * @retval -errno Other negative errno code on failure.
 */
static inline int pwm_set(const struct device *dev, uint32_t channel,
			  uint32_t period, uint32_t pulse, pwm_flags_t flags)
{
10002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
10002d26:	b08b      	sub	sp, #44	; 0x2c
10002d28:	9304      	str	r3, [sp, #16]
10002d2a:	ab10      	add	r3, sp, #64	; 0x40
10002d2c:	881b      	ldrh	r3, [r3, #0]
10002d2e:	0004      	movs	r4, r0
10002d30:	000d      	movs	r5, r1
10002d32:	9203      	str	r2, [sp, #12]
10002d34:	9305      	str	r3, [sp, #20]
	return api->get_cycles_per_sec(dev, channel, cycles);
10002d36:	6883      	ldr	r3, [r0, #8]
10002d38:	aa08      	add	r2, sp, #32
10002d3a:	685b      	ldr	r3, [r3, #4]
10002d3c:	4798      	blx	r3
	uint64_t pulse_cycles;
	uint64_t period_cycles;
	uint64_t cycles_per_sec;

	err = pwm_get_cycles_per_sec(dev, channel, &cycles_per_sec);
	if (err < 0) {
10002d3e:	2800      	cmp	r0, #0
10002d40:	db2e      	blt.n	10002da0 <pwm_set+0x7c>
		return err;
	}

	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10002d42:	9e08      	ldr	r6, [sp, #32]
10002d44:	9f09      	ldr	r7, [sp, #36]	; 0x24
10002d46:	9803      	ldr	r0, [sp, #12]
10002d48:	0032      	movs	r2, r6
10002d4a:	003b      	movs	r3, r7
10002d4c:	2100      	movs	r1, #0
10002d4e:	f7fe fe61 	bl	10001a14 <__aeabi_lmul>
10002d52:	2300      	movs	r3, #0
10002d54:	4a16      	ldr	r2, [pc, #88]	; (10002db0 <pwm_set+0x8c>)
10002d56:	9106      	str	r1, [sp, #24]
10002d58:	f7fd fae8 	bl	1000032c <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
10002d5c:	9b06      	ldr	r3, [sp, #24]
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10002d5e:	9003      	str	r0, [sp, #12]
	if (period_cycles > UINT32_MAX) {
10002d60:	0019      	movs	r1, r3
10002d62:	4b14      	ldr	r3, [pc, #80]	; (10002db4 <pwm_set+0x90>)
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10002d64:	9007      	str	r0, [sp, #28]
	if (period_cycles > UINT32_MAX) {
10002d66:	4299      	cmp	r1, r3
10002d68:	d81c      	bhi.n	10002da4 <pwm_set+0x80>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
10002d6a:	003b      	movs	r3, r7
10002d6c:	0032      	movs	r2, r6
10002d6e:	2100      	movs	r1, #0
10002d70:	9804      	ldr	r0, [sp, #16]
10002d72:	f7fe fe4f 	bl	10001a14 <__aeabi_lmul>
10002d76:	2300      	movs	r3, #0
10002d78:	4a0d      	ldr	r2, [pc, #52]	; (10002db0 <pwm_set+0x8c>)
10002d7a:	000f      	movs	r7, r1
10002d7c:	f7fd fad6 	bl	1000032c <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
10002d80:	4a0c      	ldr	r2, [pc, #48]	; (10002db4 <pwm_set+0x90>)
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
10002d82:	0003      	movs	r3, r0
10002d84:	0001      	movs	r1, r0
	if (pulse_cycles > UINT32_MAX) {
10002d86:	4297      	cmp	r7, r2
10002d88:	d80c      	bhi.n	10002da4 <pwm_set+0x80>
	if (pulse > period) {
10002d8a:	9807      	ldr	r0, [sp, #28]
	const struct pwm_driver_api *api =
10002d8c:	68a2      	ldr	r2, [r4, #8]
	if (pulse > period) {
10002d8e:	4288      	cmp	r0, r1
10002d90:	d30b      	bcc.n	10002daa <pwm_set+0x86>
	return api->set_cycles(dev, channel, period, pulse, flags);
10002d92:	9905      	ldr	r1, [sp, #20]
10002d94:	0020      	movs	r0, r4
10002d96:	9100      	str	r1, [sp, #0]
10002d98:	6817      	ldr	r7, [r2, #0]
10002d9a:	0029      	movs	r1, r5
10002d9c:	9a03      	ldr	r2, [sp, #12]
10002d9e:	47b8      	blx	r7
		return -ENOTSUP;
	}

	return pwm_set_cycles(dev, channel, (uint32_t)period_cycles,
			      (uint32_t)pulse_cycles, flags);
}
10002da0:	b00b      	add	sp, #44	; 0x2c
10002da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
10002da4:	2086      	movs	r0, #134	; 0x86
		return -EINVAL;
10002da6:	4240      	negs	r0, r0
10002da8:	e7fa      	b.n	10002da0 <pwm_set+0x7c>
10002daa:	2016      	movs	r0, #22
10002dac:	e7fb      	b.n	10002da6 <pwm_set+0x82>
10002dae:	46c0      	nop			; (mov r8, r8)
10002db0:	3b9aca00 	.word	0x3b9aca00
10002db4:	3b9ac9ff 	.word	0x3b9ac9ff

10002db8 <pwm_rpi_init>:
	.get_cycles_per_sec = pwm_rpi_get_cycles_per_sec,
	.set_cycles = pwm_rpi_set_cycles,
};

static int pwm_rpi_init(const struct device *dev)
{
10002db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct pwm_rpi_config *cfg = dev->config;
10002dba:	6844      	ldr	r4, [r0, #4]
	ret = pinctrl_lookup_state(config, id, &state);
10002dbc:	2100      	movs	r1, #0
10002dbe:	69e0      	ldr	r0, [r4, #28]
10002dc0:	aa01      	add	r2, sp, #4
10002dc2:	f000 f9c9 	bl	10003158 <pinctrl_lookup_state>
	if (ret < 0) {
10002dc6:	2800      	cmp	r0, #0
10002dc8:	db32      	blt.n	10002e30 <pwm_rpi_init+0x78>
	return pinctrl_apply_state_direct(config, state);
10002dca:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10002dcc:	2200      	movs	r2, #0
10002dce:	7919      	ldrb	r1, [r3, #4]
10002dd0:	6818      	ldr	r0, [r3, #0]
10002dd2:	f002 fafc 	bl	100053ce <pinctrl_configure_pins>
	pwm_config slice_cfg;
	size_t slice_idx;
	int err;

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err) {
10002dd6:	2800      	cmp	r0, #0
10002dd8:	d12a      	bne.n	10002e30 <pwm_rpi_init+0x78>
		LOG_ERR("Failed to configure pins for PWM. err=%d", err);
		return err;
	}

	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10002dda:	0001      	movs	r1, r0
10002ddc:	1d23      	adds	r3, r4, #4
	if (err) {
10002dde:	4c15      	ldr	r4, [pc, #84]	; (10002e34 <pwm_rpi_init+0x7c>)
 * \param start If true the PWM will be started running once configured. If false you will need to start
 *  manually using \ref pwm_set_enabled() or \ref pwm_set_mask_enabled()
 */
static inline void pwm_init(uint slice_num, pwm_config *c, bool start) {
    check_slice_num_param(slice_num);
    pwm_hw->slice[slice_num].csr = 0;
10002de0:	2214      	movs	r2, #20

    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10002de2:	4f15      	ldr	r7, [pc, #84]	; (10002e38 <pwm_rpi_init+0x80>)
10002de4:	434a      	muls	r2, r1
10002de6:	46bc      	mov	ip, r7
10002de8:	4494      	add	ip, r2
    pwm_hw->slice[slice_num].csr = 0;
10002dea:	2600      	movs	r6, #0
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10002dec:	4667      	mov	r7, ip
10002dee:	4d11      	ldr	r5, [pc, #68]	; (10002e34 <pwm_rpi_init+0x7c>)
	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10002df0:	3101      	adds	r1, #1
10002df2:	1955      	adds	r5, r2, r5
    pwm_hw->slice[slice_num].csr = 0;
10002df4:	602e      	str	r6, [r5, #0]
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10002df6:	603e      	str	r6, [r7, #0]
    pwm_hw->slice[slice_num].cc = PWM_CH0_CC_RESET;
10002df8:	4f10      	ldr	r7, [pc, #64]	; (10002e3c <pwm_rpi_init+0x84>)
10002dfa:	46bc      	mov	ip, r7
10002dfc:	4494      	add	ip, r2
10002dfe:	4667      	mov	r7, ip
10002e00:	603e      	str	r6, [r7, #0]
    pwm_hw->slice[slice_num].top = c->top;
10002e02:	4f0f      	ldr	r7, [pc, #60]	; (10002e40 <pwm_rpi_init+0x88>)
10002e04:	19d2      	adds	r2, r2, r7
10002e06:	4f0f      	ldr	r7, [pc, #60]	; (10002e44 <pwm_rpi_init+0x8c>)
10002e08:	6017      	str	r7, [r2, #0]
    pwm_hw->slice[slice_num].div = c->div;
10002e0a:	2210      	movs	r2, #16
10002e0c:	606a      	str	r2, [r5, #4]
    pwm_hw->slice[slice_num].csr = c->csr | (bool_to_bit(start) << PWM_CH0_CSR_EN_LSB);
10002e0e:	602e      	str	r6, [r5, #0]
 * \param fract 4 bit fractional part of the clock divider
 */
static inline void pwm_set_clkdiv_int_frac(uint slice_num, uint8_t integer, uint8_t fract) {
    check_slice_num_param(slice_num);
    valid_params_if(PWM, fract < 16);
    pwm_hw->slice[slice_num].div = (((uint)integer) << PWM_CH0_DIV_INT_LSB) | (((uint)fract) << PWM_CH0_DIV_FRAC_LSB);
10002e10:	781a      	ldrb	r2, [r3, #0]
10002e12:	785e      	ldrb	r6, [r3, #1]
10002e14:	0112      	lsls	r2, r2, #4
10002e16:	4332      	orrs	r2, r6
10002e18:	606a      	str	r2, [r5, #4]
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002e1a:	2501      	movs	r5, #1
10002e1c:	6822      	ldr	r2, [r4, #0]
10002e1e:	3303      	adds	r3, #3
10002e20:	4395      	bics	r5, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002e22:	2280      	movs	r2, #128	; 0x80
10002e24:	0152      	lsls	r2, r2, #5
10002e26:	4322      	orrs	r2, r4
10002e28:	6015      	str	r5, [r2, #0]
10002e2a:	3414      	adds	r4, #20
10002e2c:	2908      	cmp	r1, #8
10002e2e:	d1d7      	bne.n	10002de0 <pwm_rpi_init+0x28>
					cfg->slice_configs[slice_idx].frac);
		pwm_set_enabled(slice_idx, true);
	}

	return 0;
}
10002e30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10002e32:	46c0      	nop			; (mov r8, r8)
10002e34:	40050000 	.word	0x40050000
10002e38:	40050008 	.word	0x40050008
10002e3c:	4005000c 	.word	0x4005000c
10002e40:	40050010 	.word	0x40050010
10002e44:	0000ffff 	.word	0x0000ffff

10002e48 <pwm_rpi_set_cycles>:
{
10002e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002e4a:	0006      	movs	r6, r0
10002e4c:	a808      	add	r0, sp, #32
10002e4e:	8805      	ldrh	r5, [r0, #0]
	if (ch >= PWM_RPI_NUM_CHANNELS) {
10002e50:	290f      	cmp	r1, #15
10002e52:	d843      	bhi.n	10002edc <pwm_rpi_set_cycles+0x94>
	if (period_cycles > PWM_RPI_PICO_COUNTER_TOP_MAX ||
10002e54:	2480      	movs	r4, #128	; 0x80
10002e56:	0264      	lsls	r4, r4, #9
10002e58:	42a2      	cmp	r2, r4
10002e5a:	d23f      	bcs.n	10002edc <pwm_rpi_set_cycles+0x94>
10002e5c:	42a3      	cmp	r3, r4
10002e5e:	d23d      	bcs.n	10002edc <pwm_rpi_set_cycles+0x94>
	return channel / 2;
10002e60:	0848      	lsrs	r0, r1, #1
10002e62:	9001      	str	r0, [sp, #4]
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
10002e64:	2001      	movs	r0, #1
10002e66:	4684      	mov	ip, r0
10002e68:	2414      	movs	r4, #20
	if (pico_channel == PWM_CHAN_A) {
10002e6a:	4667      	mov	r7, ip
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
10002e6c:	4005      	ands	r5, r0
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10002e6e:	0848      	lsrs	r0, r1, #1
10002e70:	4344      	muls	r4, r0
10002e72:	6870      	ldr	r0, [r6, #4]
10002e74:	6800      	ldr	r0, [r0, #0]
10002e76:	1900      	adds	r0, r0, r4
10002e78:	6806      	ldr	r6, [r0, #0]
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
10002e7a:	6800      	ldr	r0, [r0, #0]
	if (pico_channel == PWM_CHAN_A) {
10002e7c:	4239      	tst	r1, r7
10002e7e:	d128      	bne.n	10002ed2 <pwm_rpi_set_cycles+0x8a>
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
10002e80:	08c0      	lsrs	r0, r0, #3
10002e82:	4038      	ands	r0, r7
 * \param a true to invert output A
 * \param b true to invert output B
 */
static inline void pwm_set_output_polarity(uint slice_num, bool a, bool b) {
    check_slice_num_param(slice_num);
    hw_write_masked(&pwm_hw->slice[slice_num].csr, bool_to_bit(a) << PWM_CH0_CSR_A_INV_LSB | bool_to_bit(b) << PWM_CH0_CSR_B_INV_LSB,
10002e84:	1e47      	subs	r7, r0, #1
10002e86:	41b8      	sbcs	r0, r7
10002e88:	00ad      	lsls	r5, r5, #2
10002e8a:	00c0      	lsls	r0, r0, #3
10002e8c:	4328      	orrs	r0, r5
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002e8e:	250c      	movs	r5, #12
10002e90:	4e14      	ldr	r6, [pc, #80]	; (10002ee4 <pwm_rpi_set_cycles+0x9c>)
10002e92:	19a6      	adds	r6, r4, r6
10002e94:	6837      	ldr	r7, [r6, #0]
10002e96:	4078      	eors	r0, r7
10002e98:	4028      	ands	r0, r5
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002e9a:	2580      	movs	r5, #128	; 0x80
10002e9c:	016d      	lsls	r5, r5, #5
10002e9e:	432e      	orrs	r6, r5
10002ea0:	6030      	str	r0, [r6, #0]
    pwm_hw->slice[slice_num].top = wrap;
10002ea2:	2014      	movs	r0, #20
10002ea4:	084f      	lsrs	r7, r1, #1
10002ea6:	4347      	muls	r7, r0
10002ea8:	4e0e      	ldr	r6, [pc, #56]	; (10002ee4 <pwm_rpi_set_cycles+0x9c>)
	return 0;
10002eaa:	2000      	movs	r0, #0
10002eac:	19bf      	adds	r7, r7, r6
10002eae:	613a      	str	r2, [r7, #16]
    hw_write_masked(
10002eb0:	4a0d      	ldr	r2, [pc, #52]	; (10002ee8 <pwm_rpi_set_cycles+0xa0>)
10002eb2:	18a4      	adds	r4, r4, r2
        ((uint)level) << (chan ? PWM_CH0_CC_B_LSB : PWM_CH0_CC_A_LSB),
10002eb4:	1e4a      	subs	r2, r1, #1
10002eb6:	4191      	sbcs	r1, r2
10002eb8:	010a      	lsls	r2, r1, #4
    hw_write_masked(
10002eba:	4093      	lsls	r3, r2
10002ebc:	4a0b      	ldr	r2, [pc, #44]	; (10002eec <pwm_rpi_set_cycles+0xa4>)
10002ebe:	4249      	negs	r1, r1
10002ec0:	4011      	ands	r1, r2
10002ec2:	4a0b      	ldr	r2, [pc, #44]	; (10002ef0 <pwm_rpi_set_cycles+0xa8>)
10002ec4:	1889      	adds	r1, r1, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002ec6:	6822      	ldr	r2, [r4, #0]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002ec8:	432c      	orrs	r4, r5
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002eca:	4053      	eors	r3, r2
10002ecc:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002ece:	6021      	str	r1, [r4, #0]
};
10002ed0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		pwm_polarity_b = inverted;
10002ed2:	0028      	movs	r0, r5
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10002ed4:	4665      	mov	r5, ip
10002ed6:	08b6      	lsrs	r6, r6, #2
10002ed8:	4035      	ands	r5, r6
10002eda:	e7d3      	b.n	10002e84 <pwm_rpi_set_cycles+0x3c>
		return -EINVAL;
10002edc:	2016      	movs	r0, #22
10002ede:	4240      	negs	r0, r0
10002ee0:	e7f6      	b.n	10002ed0 <pwm_rpi_set_cycles+0x88>
10002ee2:	46c0      	nop			; (mov r8, r8)
10002ee4:	40050000 	.word	0x40050000
10002ee8:	4005000c 	.word	0x4005000c
10002eec:	fffe0001 	.word	0xfffe0001
10002ef0:	0000ffff 	.word	0x0000ffff

10002ef4 <pwm_rpi_get_cycles_per_sec>:
{
10002ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002ef6:	0015      	movs	r5, r2
	return channel / 2;
10002ef8:	084b      	lsrs	r3, r1, #1
	if (ch >= PWM_RPI_NUM_CHANNELS) {
10002efa:	290f      	cmp	r1, #15
10002efc:	d825      	bhi.n	10002f4a <pwm_rpi_get_cycles_per_sec+0x56>
	return (float)cfg->slice_configs[slice].integral +
10002efe:	2403      	movs	r4, #3
10002f00:	435c      	muls	r4, r3
10002f02:	6843      	ldr	r3, [r0, #4]
10002f04:	191c      	adds	r4, r3, r4
		(float)cfg->slice_configs[slice].frac / 16.0;
10002f06:	7960      	ldrb	r0, [r4, #5]
10002f08:	f7fd fb36 	bl	10000578 <__aeabi_ui2f>
10002f0c:	f7fe fc40 	bl	10001790 <__aeabi_f2d>
10002f10:	2200      	movs	r2, #0
10002f12:	4b0f      	ldr	r3, [pc, #60]	; (10002f50 <pwm_rpi_get_cycles_per_sec+0x5c>)
10002f14:	f7fd ff2e 	bl	10000d74 <__aeabi_dmul>
10002f18:	0006      	movs	r6, r0
	return (float)cfg->slice_configs[slice].integral +
10002f1a:	7920      	ldrb	r0, [r4, #4]
		(float)cfg->slice_configs[slice].frac / 16.0;
10002f1c:	000f      	movs	r7, r1
	return (float)cfg->slice_configs[slice].integral +
10002f1e:	f7fd fb2b 	bl	10000578 <__aeabi_ui2f>
10002f22:	f7fe fc35 	bl	10001790 <__aeabi_f2d>
10002f26:	0002      	movs	r2, r0
10002f28:	000b      	movs	r3, r1
10002f2a:	0030      	movs	r0, r6
10002f2c:	0039      	movs	r1, r7
10002f2e:	f7fd fb5d 	bl	100005ec <__aeabi_dadd>
10002f32:	f7fe fc6f 	bl	10001814 <__aeabi_d2f>
10002f36:	1c01      	adds	r1, r0, #0
	*cycles = (uint64_t)(f_clock_in / pwm_rpi_get_clkdiv(dev, slice));
10002f38:	4806      	ldr	r0, [pc, #24]	; (10002f54 <pwm_rpi_get_cycles_per_sec+0x60>)
10002f3a:	f7fd fa37 	bl	100003ac <__aeabi_fdiv>
10002f3e:	f7fd fa15 	bl	1000036c <__aeabi_f2ulz>
10002f42:	6028      	str	r0, [r5, #0]
10002f44:	6069      	str	r1, [r5, #4]
	return 0;
10002f46:	2000      	movs	r0, #0
}
10002f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
10002f4a:	2016      	movs	r0, #22
10002f4c:	4240      	negs	r0, r0
10002f4e:	e7fb      	b.n	10002f48 <pwm_rpi_get_cycles_per_sec+0x54>
10002f50:	3fb00000 	.word	0x3fb00000
10002f54:	4cee6b28 	.word	0x4cee6b28

10002f58 <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
10002f58:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10002f5a:	4903      	ldr	r1, [pc, #12]	; (10002f68 <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
10002f5c:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10002f5e:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002f60:	400b      	ands	r3, r1
10002f62:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
10002f64:	4770      	bx	lr
10002f66:	46c0      	nop			; (mov r8, r8)
10002f68:	fffff83f 	.word	0xfffff83f

10002f6c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
10002f6c:	4b0a      	ldr	r3, [pc, #40]	; (10002f98 <elapsed+0x2c>)
{
10002f6e:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
10002f70:	6899      	ldr	r1, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10002f72:	6818      	ldr	r0, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
10002f74:	4a09      	ldr	r2, [pc, #36]	; (10002f9c <elapsed+0x30>)
10002f76:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
10002f78:	4d09      	ldr	r5, [pc, #36]	; (10002fa0 <elapsed+0x34>)
10002f7a:	03c0      	lsls	r0, r0, #15
10002f7c:	d401      	bmi.n	10002f82 <elapsed+0x16>
	    || (val1 < val2)) {
10002f7e:	42a1      	cmp	r1, r4
10002f80:	d204      	bcs.n	10002f8c <elapsed+0x20>
		overflow_cyc += last_load;
10002f82:	6811      	ldr	r1, [r2, #0]
10002f84:	6828      	ldr	r0, [r5, #0]
10002f86:	1809      	adds	r1, r1, r0
10002f88:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
10002f8a:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
10002f8c:	682b      	ldr	r3, [r5, #0]
10002f8e:	6810      	ldr	r0, [r2, #0]
10002f90:	18c0      	adds	r0, r0, r3
10002f92:	1b00      	subs	r0, r0, r4
}
10002f94:	bd30      	pop	{r4, r5, pc}
10002f96:	46c0      	nop			; (mov r8, r8)
10002f98:	e000e010 	.word	0xe000e010
10002f9c:	20000458 	.word	0x20000458
10002fa0:	20000454 	.word	0x20000454

10002fa4 <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
10002fa4:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002fa6:	4a09      	ldr	r2, [pc, #36]	; (10002fcc <sys_clock_driver_init+0x28>)
10002fa8:	6a13      	ldr	r3, [r2, #32]
10002faa:	021b      	lsls	r3, r3, #8
10002fac:	0a1b      	lsrs	r3, r3, #8
10002fae:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
10002fb0:	4a07      	ldr	r2, [pc, #28]	; (10002fd0 <sys_clock_driver_init+0x2c>)
10002fb2:	4b08      	ldr	r3, [pc, #32]	; (10002fd4 <sys_clock_driver_init+0x30>)
10002fb4:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
10002fb6:	4b08      	ldr	r3, [pc, #32]	; (10002fd8 <sys_clock_driver_init+0x34>)
10002fb8:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
10002fba:	4b08      	ldr	r3, [pc, #32]	; (10002fdc <sys_clock_driver_init+0x38>)
10002fbc:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10002fbe:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
10002fc0:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10002fc2:	6819      	ldr	r1, [r3, #0]
10002fc4:	430a      	orrs	r2, r1
10002fc6:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
10002fc8:	4770      	bx	lr
10002fca:	46c0      	nop			; (mov r8, r8)
10002fcc:	e000ed00 	.word	0xe000ed00
10002fd0:	000030d3 	.word	0x000030d3
10002fd4:	20000454 	.word	0x20000454
10002fd8:	20000458 	.word	0x20000458
10002fdc:	e000e010 	.word	0xe000e010

10002fe0 <sys_clock_isr>:
{
10002fe0:	b570      	push	{r4, r5, r6, lr}
	elapsed();
10002fe2:	f7ff ffc3 	bl	10002f6c <elapsed>
	cycle_count += overflow_cyc;
10002fe6:	4b0b      	ldr	r3, [pc, #44]	; (10003014 <sys_clock_isr+0x34>)
10002fe8:	4a0b      	ldr	r2, [pc, #44]	; (10003018 <sys_clock_isr+0x38>)
10002fea:	6818      	ldr	r0, [r3, #0]
10002fec:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002fee:	4c0b      	ldr	r4, [pc, #44]	; (1000301c <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
10002ff0:	1840      	adds	r0, r0, r1
10002ff2:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
10002ff4:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002ff6:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
10002ff8:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002ffa:	4909      	ldr	r1, [pc, #36]	; (10003020 <sys_clock_isr+0x40>)
10002ffc:	1b40      	subs	r0, r0, r5
10002ffe:	f7fd f8f1 	bl	100001e4 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
10003002:	4b07      	ldr	r3, [pc, #28]	; (10003020 <sys_clock_isr+0x40>)
10003004:	4343      	muls	r3, r0
10003006:	195b      	adds	r3, r3, r5
10003008:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
1000300a:	f001 fa81 	bl	10004510 <sys_clock_announce>
	z_arm_int_exit();
1000300e:	f7ff fc1f 	bl	10002850 <z_arm_exc_exit>
}
10003012:	bd70      	pop	{r4, r5, r6, pc}
10003014:	20000458 	.word	0x20000458
10003018:	20000450 	.word	0x20000450
1000301c:	2000044c 	.word	0x2000044c
10003020:	000030d4 	.word	0x000030d4

10003024 <sys_clock_set_timeout>:
{
10003024:	b5f0      	push	{r4, r5, r6, r7, lr}
10003026:	4d35      	ldr	r5, [pc, #212]	; (100030fc <sys_clock_set_timeout+0xd8>)
10003028:	4e35      	ldr	r6, [pc, #212]	; (10003100 <sys_clock_set_timeout+0xdc>)
1000302a:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
1000302c:	2900      	cmp	r1, #0
1000302e:	d00a      	beq.n	10003046 <sys_clock_set_timeout+0x22>
10003030:	1c43      	adds	r3, r0, #1
10003032:	d108      	bne.n	10003046 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
10003034:	2201      	movs	r2, #1
10003036:	682b      	ldr	r3, [r5, #0]
10003038:	4393      	bics	r3, r2
1000303a:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
1000303c:	23ff      	movs	r3, #255	; 0xff
1000303e:	061b      	lsls	r3, r3, #24
10003040:	6033      	str	r3, [r6, #0]
}
10003042:	b005      	add	sp, #20
10003044:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
10003046:	6833      	ldr	r3, [r6, #0]
10003048:	9302      	str	r3, [sp, #8]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
1000304a:	1c43      	adds	r3, r0, #1
1000304c:	d037      	beq.n	100030be <sys_clock_set_timeout+0x9a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
1000304e:	2700      	movs	r7, #0
10003050:	2801      	cmp	r0, #1
10003052:	dd04      	ble.n	1000305e <sys_clock_set_timeout+0x3a>
10003054:	4b2b      	ldr	r3, [pc, #172]	; (10003104 <sys_clock_set_timeout+0xe0>)
10003056:	001f      	movs	r7, r3
10003058:	4298      	cmp	r0, r3
1000305a:	dc00      	bgt.n	1000305e <sys_clock_set_timeout+0x3a>
1000305c:	1e47      	subs	r7, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
1000305e:	f3ef 8310 	mrs	r3, PRIMASK
10003062:	b672      	cpsid	i
10003064:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
10003066:	f7ff ff81 	bl	10002f6c <elapsed>
	val1 = SysTick->VAL;
1000306a:	68ab      	ldr	r3, [r5, #8]
1000306c:	9300      	str	r3, [sp, #0]
	cycle_count += pending;
1000306e:	4b26      	ldr	r3, [pc, #152]	; (10003108 <sys_clock_set_timeout+0xe4>)
10003070:	681a      	ldr	r2, [r3, #0]
10003072:	1884      	adds	r4, r0, r2
	overflow_cyc = 0U;
10003074:	2200      	movs	r2, #0
	cycle_count += pending;
10003076:	601c      	str	r4, [r3, #0]
	overflow_cyc = 0U;
10003078:	4b24      	ldr	r3, [pc, #144]	; (1000310c <sys_clock_set_timeout+0xe8>)
1000307a:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
1000307c:	4b24      	ldr	r3, [pc, #144]	; (10003110 <sys_clock_set_timeout+0xec>)
1000307e:	681b      	ldr	r3, [r3, #0]
10003080:	9301      	str	r3, [sp, #4]
10003082:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
10003084:	4290      	cmp	r0, r2
10003086:	da1c      	bge.n	100030c2 <sys_clock_set_timeout+0x9e>
		last_load = MIN_DELAY;
10003088:	2380      	movs	r3, #128	; 0x80
1000308a:	00db      	lsls	r3, r3, #3
			last_load = MAX_CYCLES;
1000308c:	6033      	str	r3, [r6, #0]
	SysTick->LOAD = last_load - 1;
1000308e:	6832      	ldr	r2, [r6, #0]
	val2 = SysTick->VAL;
10003090:	68ab      	ldr	r3, [r5, #8]
	SysTick->LOAD = last_load - 1;
10003092:	3a01      	subs	r2, #1
10003094:	606a      	str	r2, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
10003096:	2200      	movs	r2, #0
10003098:	60aa      	str	r2, [r5, #8]
	if (val1 < val2) {
1000309a:	9a00      	ldr	r2, [sp, #0]
1000309c:	429a      	cmp	r2, r3
1000309e:	d228      	bcs.n	100030f2 <sys_clock_set_timeout+0xce>
		cycle_count += (val1 + (last_load_ - val2));
100030a0:	9900      	ldr	r1, [sp, #0]
100030a2:	9a02      	ldr	r2, [sp, #8]
100030a4:	468c      	mov	ip, r1
100030a6:	4462      	add	r2, ip
100030a8:	1ad0      	subs	r0, r2, r3
100030aa:	1904      	adds	r4, r0, r4
100030ac:	4b16      	ldr	r3, [pc, #88]	; (10003108 <sys_clock_set_timeout+0xe4>)
100030ae:	601c      	str	r4, [r3, #0]
	if (key != 0U) {
100030b0:	9b03      	ldr	r3, [sp, #12]
100030b2:	2b00      	cmp	r3, #0
100030b4:	d1c5      	bne.n	10003042 <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
100030b6:	b662      	cpsie	i
100030b8:	f3bf 8f6f 	isb	sy
100030bc:	e7c1      	b.n	10003042 <sys_clock_set_timeout+0x1e>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
100030be:	4811      	ldr	r0, [pc, #68]	; (10003104 <sys_clock_set_timeout+0xe0>)
100030c0:	e7cc      	b.n	1000305c <sys_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
100030c2:	4b14      	ldr	r3, [pc, #80]	; (10003114 <sys_clock_set_timeout+0xf0>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
100030c4:	4913      	ldr	r1, [pc, #76]	; (10003114 <sys_clock_set_timeout+0xf0>)
		delay = ticks * CYC_PER_TICK;
100030c6:	435f      	muls	r7, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
100030c8:	4b13      	ldr	r3, [pc, #76]	; (10003118 <sys_clock_set_timeout+0xf4>)
		delay += unannounced;
100030ca:	19c0      	adds	r0, r0, r7
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
100030cc:	18c0      	adds	r0, r0, r3
100030ce:	f7fd f889 	bl	100001e4 <__udivsi3>
		delay =
100030d2:	4b10      	ldr	r3, [pc, #64]	; (10003114 <sys_clock_set_timeout+0xf0>)
		delay -= unannounced;
100030d4:	9a01      	ldr	r2, [sp, #4]
		delay =
100030d6:	4343      	muls	r3, r0
		delay -= unannounced;
100030d8:	1b10      	subs	r0, r2, r4
100030da:	18c0      	adds	r0, r0, r3
		delay = MAX(delay, MIN_DELAY);
100030dc:	2380      	movs	r3, #128	; 0x80
100030de:	00db      	lsls	r3, r3, #3
100030e0:	4298      	cmp	r0, r3
100030e2:	d904      	bls.n	100030ee <sys_clock_set_timeout+0xca>
		if (delay > MAX_CYCLES) {
100030e4:	4b0d      	ldr	r3, [pc, #52]	; (1000311c <sys_clock_set_timeout+0xf8>)
100030e6:	4298      	cmp	r0, r3
100030e8:	d8d0      	bhi.n	1000308c <sys_clock_set_timeout+0x68>
			last_load = delay;
100030ea:	6030      	str	r0, [r6, #0]
100030ec:	e7cf      	b.n	1000308e <sys_clock_set_timeout+0x6a>
		delay = MAX(delay, MIN_DELAY);
100030ee:	0018      	movs	r0, r3
100030f0:	e7fb      	b.n	100030ea <sys_clock_set_timeout+0xc6>
		cycle_count += (val1 - val2);
100030f2:	9a00      	ldr	r2, [sp, #0]
100030f4:	1ad3      	subs	r3, r2, r3
100030f6:	191c      	adds	r4, r3, r4
100030f8:	e7d8      	b.n	100030ac <sys_clock_set_timeout+0x88>
100030fa:	46c0      	nop			; (mov r8, r8)
100030fc:	e000e010 	.word	0xe000e010
10003100:	20000454 	.word	0x20000454
10003104:	0000053d 	.word	0x0000053d
10003108:	20000450 	.word	0x20000450
1000310c:	20000458 	.word	0x20000458
10003110:	2000044c 	.word	0x2000044c
10003114:	000030d4 	.word	0x000030d4
10003118:	000030d3 	.word	0x000030d3
1000311c:	00ffc684 	.word	0x00ffc684

10003120 <sys_clock_elapsed>:
{
10003120:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003122:	f3ef 8410 	mrs	r4, PRIMASK
10003126:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
10003128:	f7ff ff20 	bl	10002f6c <elapsed>
1000312c:	4b07      	ldr	r3, [pc, #28]	; (1000314c <sys_clock_elapsed+0x2c>)
1000312e:	4a08      	ldr	r2, [pc, #32]	; (10003150 <sys_clock_elapsed+0x30>)
10003130:	681b      	ldr	r3, [r3, #0]
10003132:	6812      	ldr	r2, [r2, #0]
10003134:	1a9b      	subs	r3, r3, r2
10003136:	1818      	adds	r0, r3, r0
	if (key != 0U) {
10003138:	2c00      	cmp	r4, #0
1000313a:	d102      	bne.n	10003142 <sys_clock_elapsed+0x22>
	__asm__ volatile(
1000313c:	b662      	cpsie	i
1000313e:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
10003142:	4904      	ldr	r1, [pc, #16]	; (10003154 <sys_clock_elapsed+0x34>)
10003144:	f7fd f84e 	bl	100001e4 <__udivsi3>
}
10003148:	bd10      	pop	{r4, pc}
1000314a:	46c0      	nop			; (mov r8, r8)
1000314c:	20000450 	.word	0x20000450
10003150:	2000044c 	.word	0x2000044c
10003154:	000030d4 	.word	0x000030d4

10003158 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
10003158:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
1000315a:	6803      	ldr	r3, [r0, #0]
1000315c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
1000315e:	7904      	ldrb	r4, [r0, #4]
10003160:	4b09      	ldr	r3, [pc, #36]	; (10003188 <pinctrl_lookup_state+0x30>)
10003162:	18e4      	adds	r4, r4, r3
10003164:	00e4      	lsls	r4, r4, #3
10003166:	6805      	ldr	r5, [r0, #0]
10003168:	6813      	ldr	r3, [r2, #0]
1000316a:	192d      	adds	r5, r5, r4
1000316c:	42ab      	cmp	r3, r5
1000316e:	d902      	bls.n	10003176 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
10003170:	2002      	movs	r0, #2
10003172:	4240      	negs	r0, r0
}
10003174:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
10003176:	795d      	ldrb	r5, [r3, #5]
10003178:	428d      	cmp	r5, r1
1000317a:	d002      	beq.n	10003182 <pinctrl_lookup_state+0x2a>
		(*state)++;
1000317c:	3308      	adds	r3, #8
1000317e:	6013      	str	r3, [r2, #0]
10003180:	e7f1      	b.n	10003166 <pinctrl_lookup_state+0xe>
			return 0;
10003182:	2000      	movs	r0, #0
10003184:	e7f6      	b.n	10003174 <pinctrl_lookup_state+0x1c>
10003186:	46c0      	nop			; (mov r8, r8)
10003188:	1fffffff 	.word	0x1fffffff

1000318c <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
1000318c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000318e:	b085      	sub	sp, #20
10003190:	9203      	str	r2, [sp, #12]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10003192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10003194:	0005      	movs	r5, r0
10003196:	000f      	movs	r7, r1
        return false;
10003198:	2000      	movs	r0, #0
    if (freq > src_freq)
1000319a:	429a      	cmp	r2, r3
1000319c:	d840      	bhi.n	10003220 <clock_configure+0x94>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
1000319e:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100031a0:	0e1a      	lsrs	r2, r3, #24
100031a2:	021b      	lsls	r3, r3, #8
100031a4:	9202      	str	r2, [sp, #8]
100031a6:	9301      	str	r3, [sp, #4]
100031a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100031aa:	0003      	movs	r3, r0
100031ac:	9902      	ldr	r1, [sp, #8]
100031ae:	9801      	ldr	r0, [sp, #4]
100031b0:	f7fd f8bc 	bl	1000032c <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100031b4:	436c      	muls	r4, r5
100031b6:	4b28      	ldr	r3, [pc, #160]	; (10003258 <clock_configure+0xcc>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100031b8:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100031ba:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
100031bc:	6863      	ldr	r3, [r4, #4]
100031be:	4283      	cmp	r3, r0
100031c0:	d200      	bcs.n	100031c4 <clock_configure+0x38>
        clock->div = div;
100031c2:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
100031c4:	1f2b      	subs	r3, r5, #4
100031c6:	b2db      	uxtb	r3, r3
100031c8:	9300      	str	r3, [sp, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100031ca:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
100031cc:	9a00      	ldr	r2, [sp, #0]
100031ce:	019b      	lsls	r3, r3, #6
100031d0:	4323      	orrs	r3, r4
100031d2:	2a01      	cmp	r2, #1
100031d4:	d826      	bhi.n	10003224 <clock_configure+0x98>
100031d6:	2f01      	cmp	r7, #1
100031d8:	d124      	bne.n	10003224 <clock_configure+0x98>
100031da:	2203      	movs	r2, #3
100031dc:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
100031de:	68a3      	ldr	r3, [r4, #8]
100031e0:	423b      	tst	r3, r7
100031e2:	d0fc      	beq.n	100031de <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
100031e4:	9a03      	ldr	r2, [sp, #12]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100031e6:	6823      	ldr	r3, [r4, #0]
100031e8:	0152      	lsls	r2, r2, #5
100031ea:	405a      	eors	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100031ec:	2180      	movs	r1, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100031ee:	23e0      	movs	r3, #224	; 0xe0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100031f0:	0149      	lsls	r1, r1, #5
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100031f2:	401a      	ands	r2, r3
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
100031f4:	9b00      	ldr	r3, [sp, #0]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100031f6:	4321      	orrs	r1, r4
100031f8:	600a      	str	r2, [r1, #0]
100031fa:	2b01      	cmp	r3, #1
100031fc:	d921      	bls.n	10003242 <clock_configure+0xb6>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100031fe:	2380      	movs	r3, #128	; 0x80
10003200:	2280      	movs	r2, #128	; 0x80
10003202:	019b      	lsls	r3, r3, #6
10003204:	4323      	orrs	r3, r4
10003206:	0112      	lsls	r2, r2, #4
10003208:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
1000320a:	9801      	ldr	r0, [sp, #4]
1000320c:	2300      	movs	r3, #0
1000320e:	0032      	movs	r2, r6
10003210:	9902      	ldr	r1, [sp, #8]
    clock->div = div;
10003212:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10003214:	f7fd f88a 	bl	1000032c <__aeabi_uldivmod>
10003218:	4b10      	ldr	r3, [pc, #64]	; (1000325c <clock_configure+0xd0>)
1000321a:	00ad      	lsls	r5, r5, #2
1000321c:	5158      	str	r0, [r3, r5]
1000321e:	2001      	movs	r0, #1

    return true;
}
10003220:	b005      	add	sp, #20
10003222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003224:	2280      	movs	r2, #128	; 0x80
10003226:	0112      	lsls	r2, r2, #4
10003228:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
1000322a:	4b0c      	ldr	r3, [pc, #48]	; (1000325c <clock_configure+0xd0>)
1000322c:	00aa      	lsls	r2, r5, #2
1000322e:	58d1      	ldr	r1, [r2, r3]
10003230:	2900      	cmp	r1, #0
10003232:	d0d7      	beq.n	100031e4 <clock_configure+0x58>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10003234:	6958      	ldr	r0, [r3, #20]
10003236:	f7fc ffd5 	bl	100001e4 <__udivsi3>
1000323a:	3001      	adds	r0, #1
            asm volatile (
1000323c:	3801      	subs	r0, #1
1000323e:	d1fd      	bne.n	1000323c <clock_configure+0xb0>
10003240:	e7d0      	b.n	100031e4 <clock_configure+0x58>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003242:	2203      	movs	r2, #3
10003244:	6823      	ldr	r3, [r4, #0]
10003246:	407b      	eors	r3, r7
10003248:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000324a:	600b      	str	r3, [r1, #0]
1000324c:	2301      	movs	r3, #1
1000324e:	40bb      	lsls	r3, r7
        while (!(clock->selected & (1u << src)))
10003250:	68a2      	ldr	r2, [r4, #8]
10003252:	4213      	tst	r3, r2
10003254:	d0fc      	beq.n	10003250 <clock_configure+0xc4>
10003256:	e7d2      	b.n	100031fe <clock_configure+0x72>
10003258:	40008000 	.word	0x40008000
1000325c:	2000045c 	.word	0x2000045c

10003260 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10003260:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
10003262:	200c      	movs	r0, #12
10003264:	f000 f8da 	bl	1000341c <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10003268:	f000 f8e0 	bl	1000342c <running_on_fpga>
1000326c:	2800      	cmp	r0, #0
1000326e:	d00a      	beq.n	10003286 <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
10003270:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
10003272:	4a2b      	ldr	r2, [pc, #172]	; (10003320 <clocks_init+0xc0>)
10003274:	482b      	ldr	r0, [pc, #172]	; (10003324 <clocks_init+0xc4>)
10003276:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
10003278:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
1000327a:	5088      	str	r0, [r1, r2]
        for (uint i = 0; i < CLK_COUNT; i++) {
1000327c:	2b0a      	cmp	r3, #10
1000327e:	d1fa      	bne.n	10003276 <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
10003280:	4b29      	ldr	r3, [pc, #164]	; (10003328 <clocks_init+0xc8>)
10003282:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
10003284:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
10003286:	4d29      	ldr	r5, [pc, #164]	; (1000332c <clocks_init+0xcc>)
10003288:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
1000328a:	f000 f8b3 	bl	100033f4 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000328e:	2201      	movs	r2, #1
10003290:	4b27      	ldr	r3, [pc, #156]	; (10003330 <clocks_init+0xd0>)
10003292:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10003294:	6c6b      	ldr	r3, [r5, #68]	; 0x44
10003296:	2b01      	cmp	r3, #1
10003298:	d1fc      	bne.n	10003294 <clocks_init+0x34>
1000329a:	2203      	movs	r2, #3
1000329c:	4b25      	ldr	r3, [pc, #148]	; (10003334 <clocks_init+0xd4>)
1000329e:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
100032a0:	6bac      	ldr	r4, [r5, #56]	; 0x38
100032a2:	2c01      	cmp	r4, #1
100032a4:	d1fc      	bne.n	100032a0 <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
100032a6:	2502      	movs	r5, #2
100032a8:	0021      	movs	r1, r4
100032aa:	9500      	str	r5, [sp, #0]
100032ac:	2306      	movs	r3, #6
100032ae:	4a22      	ldr	r2, [pc, #136]	; (10003338 <clocks_init+0xd8>)
100032b0:	4822      	ldr	r0, [pc, #136]	; (1000333c <clocks_init+0xdc>)
100032b2:	f000 f853 	bl	1000335c <pll_init>
    pll_init(pll_usb, 1, 480 * PICO_MHZ, 5, 2);
100032b6:	0021      	movs	r1, r4
100032b8:	9500      	str	r5, [sp, #0]
100032ba:	2305      	movs	r3, #5
100032bc:	4a20      	ldr	r2, [pc, #128]	; (10003340 <clocks_init+0xe0>)
100032be:	4821      	ldr	r0, [pc, #132]	; (10003344 <clocks_init+0xe4>)
100032c0:	f000 f84c 	bl	1000335c <pll_init>
    clock_configure(clk_ref,
100032c4:	4b20      	ldr	r3, [pc, #128]	; (10003348 <clocks_init+0xe8>)
100032c6:	0029      	movs	r1, r5
    clock_configure(clk_sys,
100032c8:	4d20      	ldr	r5, [pc, #128]	; (1000334c <clocks_init+0xec>)
    clock_configure(clk_ref,
100032ca:	9300      	str	r3, [sp, #0]
100032cc:	2200      	movs	r2, #0
100032ce:	2004      	movs	r0, #4
100032d0:	f7ff ff5c 	bl	1000318c <clock_configure>
    clock_configure(clk_sys,
100032d4:	002b      	movs	r3, r5
100032d6:	0021      	movs	r1, r4
100032d8:	2200      	movs	r2, #0
100032da:	9500      	str	r5, [sp, #0]
100032dc:	2005      	movs	r0, #5
100032de:	f7ff ff55 	bl	1000318c <clock_configure>
    clock_configure(clk_usb,
100032e2:	2200      	movs	r2, #0
100032e4:	4c0f      	ldr	r4, [pc, #60]	; (10003324 <clocks_init+0xc4>)
100032e6:	0011      	movs	r1, r2
100032e8:	0023      	movs	r3, r4
100032ea:	9400      	str	r4, [sp, #0]
100032ec:	2007      	movs	r0, #7
100032ee:	f7ff ff4d 	bl	1000318c <clock_configure>
    clock_configure(clk_adc,
100032f2:	2200      	movs	r2, #0
100032f4:	0023      	movs	r3, r4
100032f6:	0011      	movs	r1, r2
100032f8:	9400      	str	r4, [sp, #0]
100032fa:	2008      	movs	r0, #8
100032fc:	f7ff ff46 	bl	1000318c <clock_configure>
    clock_configure(clk_rtc,
10003300:	2200      	movs	r2, #0
10003302:	4b09      	ldr	r3, [pc, #36]	; (10003328 <clocks_init+0xc8>)
10003304:	0011      	movs	r1, r2
10003306:	9300      	str	r3, [sp, #0]
10003308:	2009      	movs	r0, #9
1000330a:	0023      	movs	r3, r4
1000330c:	f7ff ff3e 	bl	1000318c <clock_configure>
    clock_configure(clk_peri,
10003310:	2200      	movs	r2, #0
10003312:	002b      	movs	r3, r5
10003314:	0011      	movs	r1, r2
10003316:	9500      	str	r5, [sp, #0]
10003318:	2006      	movs	r0, #6
1000331a:	f7ff ff37 	bl	1000318c <clock_configure>
1000331e:	e7b1      	b.n	10003284 <clocks_init+0x24>
10003320:	2000045c 	.word	0x2000045c
10003324:	02dc6c00 	.word	0x02dc6c00
10003328:	0000b71b 	.word	0x0000b71b
1000332c:	40008000 	.word	0x40008000
10003330:	4000b03c 	.word	0x4000b03c
10003334:	4000b030 	.word	0x4000b030
10003338:	59682f00 	.word	0x59682f00
1000333c:	40028000 	.word	0x40028000
10003340:	1c9c3800 	.word	0x1c9c3800
10003344:	4002c000 	.word	0x4002c000
10003348:	00b71b00 	.word	0x00b71b00
1000334c:	07735940 	.word	0x07735940

10003350 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10003350:	4b01      	ldr	r3, [pc, #4]	; (10003358 <clock_get_hz+0x8>)
10003352:	0080      	lsls	r0, r0, #2
10003354:	58c0      	ldr	r0, [r0, r3]
}
10003356:	4770      	bx	lr
10003358:	2000045c 	.word	0x2000045c

1000335c <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
1000335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000335e:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10003360:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10003362:	0017      	movs	r7, r2
10003364:	001e      	movs	r6, r3
10003366:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10003368:	f7fc ff3c 	bl	100001e4 <__udivsi3>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
1000336c:	491c      	ldr	r1, [pc, #112]	; (100033e0 <pll_init+0x84>)
1000336e:	4341      	muls	r1, r0
10003370:	0038      	movs	r0, r7
10003372:	f7fc ff37 	bl	100001e4 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10003376:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10003378:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
1000337a:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
1000337c:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
1000337e:	6822      	ldr	r2, [r4, #0]
10003380:	2a00      	cmp	r2, #0
10003382:	da0c      	bge.n	1000339e <pll_init+0x42>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10003384:	213f      	movs	r1, #63	; 0x3f
10003386:	6822      	ldr	r2, [r4, #0]
10003388:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
1000338a:	42aa      	cmp	r2, r5
1000338c:	d107      	bne.n	1000339e <pll_init+0x42>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
1000338e:	68a2      	ldr	r2, [r4, #8]
10003390:	0512      	lsls	r2, r2, #20
10003392:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10003394:	4282      	cmp	r2, r0
10003396:	d102      	bne.n	1000339e <pll_init+0x42>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS & PLL_PRIM_POSTDIV2_BITS)))) {
10003398:	68e2      	ldr	r2, [r4, #12]
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
1000339a:	2b00      	cmp	r3, #0
1000339c:	d01b      	beq.n	100033d6 <pll_init+0x7a>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
1000339e:	4a11      	ldr	r2, [pc, #68]	; (100033e4 <pll_init+0x88>)
100033a0:	4294      	cmp	r4, r2
100033a2:	d019      	beq.n	100033d8 <pll_init+0x7c>
100033a4:	2280      	movs	r2, #128	; 0x80
100033a6:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100033a8:	490f      	ldr	r1, [pc, #60]	; (100033e8 <pll_init+0x8c>)
100033aa:	4e10      	ldr	r6, [pc, #64]	; (100033ec <pll_init+0x90>)
100033ac:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100033ae:	4910      	ldr	r1, [pc, #64]	; (100033f0 <pll_init+0x94>)
100033b0:	600a      	str	r2, [r1, #0]
100033b2:	0017      	movs	r7, r2
100033b4:	68b1      	ldr	r1, [r6, #8]
100033b6:	438f      	bics	r7, r1
100033b8:	d1fb      	bne.n	100033b2 <pll_init+0x56>
100033ba:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
100033bc:	1d21      	adds	r1, r4, #4
100033be:	0192      	lsls	r2, r2, #6
100033c0:	430a      	orrs	r2, r1
100033c2:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
100033c4:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
100033c6:	60a0      	str	r0, [r4, #8]
100033c8:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
100033ca:	6821      	ldr	r1, [r4, #0]
100033cc:	2900      	cmp	r1, #0
100033ce:	dafc      	bge.n	100033ca <pll_init+0x6e>

    // Set up post dividers
    pll->prim = pdiv;
100033d0:	60e3      	str	r3, [r4, #12]
100033d2:	2308      	movs	r3, #8
100033d4:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
100033d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
100033d8:	2280      	movs	r2, #128	; 0x80
100033da:	0192      	lsls	r2, r2, #6
100033dc:	e7e4      	b.n	100033a8 <pll_init+0x4c>
100033de:	46c0      	nop			; (mov r8, r8)
100033e0:	000f4240 	.word	0x000f4240
100033e4:	4002c000 	.word	0x4002c000
100033e8:	4000e000 	.word	0x4000e000
100033ec:	4000c000 	.word	0x4000c000
100033f0:	4000f000 	.word	0x4000f000

100033f4 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
100033f4:	22aa      	movs	r2, #170	; 0xaa
100033f6:	4b06      	ldr	r3, [pc, #24]	; (10003410 <xosc_init+0x1c>)
100033f8:	0112      	lsls	r2, r2, #4
100033fa:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
100033fc:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100033fe:	4905      	ldr	r1, [pc, #20]	; (10003414 <xosc_init+0x20>)
10003400:	60da      	str	r2, [r3, #12]
10003402:	4a05      	ldr	r2, [pc, #20]	; (10003418 <xosc_init+0x24>)
10003404:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10003406:	685a      	ldr	r2, [r3, #4]
10003408:	2a00      	cmp	r2, #0
1000340a:	dafc      	bge.n	10003406 <xosc_init+0x12>
}
1000340c:	4770      	bx	lr
1000340e:	46c0      	nop			; (mov r8, r8)
10003410:	40024000 	.word	0x40024000
10003414:	00fab000 	.word	0x00fab000
10003418:	40026000 	.word	0x40026000

1000341c <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
1000341c:	2380      	movs	r3, #128	; 0x80
1000341e:	4a02      	ldr	r2, [pc, #8]	; (10003428 <watchdog_start_tick+0xc>)
10003420:	009b      	lsls	r3, r3, #2
10003422:	4303      	orrs	r3, r0
10003424:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10003426:	4770      	bx	lr
10003428:	40058000 	.word	0x40058000

1000342c <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
1000342c:	4b02      	ldr	r3, [pc, #8]	; (10003438 <running_on_fpga+0xc>)
1000342e:	6818      	ldr	r0, [r3, #0]
10003430:	0780      	lsls	r0, r0, #30
10003432:	0fc0      	lsrs	r0, r0, #31
}
10003434:	4770      	bx	lr
10003436:	46c0      	nop			; (mov r8, r8)
10003438:	4006c000 	.word	0x4006c000

1000343c <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
1000343c:	4b08      	ldr	r3, [pc, #32]	; (10003460 <gpio_set_function+0x24>)
1000343e:	0082      	lsls	r2, r0, #2
10003440:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003442:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
10003444:	b510      	push	{r4, lr}
10003446:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10003448:	00c0      	lsls	r0, r0, #3
1000344a:	4063      	eors	r3, r4
1000344c:	24c0      	movs	r4, #192	; 0xc0
1000344e:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003450:	2480      	movs	r4, #128	; 0x80
10003452:	0164      	lsls	r4, r4, #5
10003454:	4322      	orrs	r2, r4
10003456:	6013      	str	r3, [r2, #0]
10003458:	4b02      	ldr	r3, [pc, #8]	; (10003464 <gpio_set_function+0x28>)
1000345a:	18c0      	adds	r0, r0, r3
1000345c:	6041      	str	r1, [r0, #4]
}
1000345e:	bd10      	pop	{r4, pc}
10003460:	4001c004 	.word	0x4001c004
10003464:	40014000 	.word	0x40014000

10003468 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
10003468:	4b09      	ldr	r3, [pc, #36]	; (10003490 <gpio_set_pulls+0x28>)
1000346a:	0080      	lsls	r0, r0, #2
1000346c:	18c0      	adds	r0, r0, r3
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
1000346e:	1e4b      	subs	r3, r1, #1
10003470:	4199      	sbcs	r1, r3
10003472:	1e53      	subs	r3, r2, #1
10003474:	419a      	sbcs	r2, r3
10003476:	00c9      	lsls	r1, r1, #3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003478:	6803      	ldr	r3, [r0, #0]
1000347a:	0092      	lsls	r2, r2, #2
    hw_write_masked(
1000347c:	4311      	orrs	r1, r2
1000347e:	4059      	eors	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003480:	2380      	movs	r3, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003482:	220c      	movs	r2, #12
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003484:	015b      	lsls	r3, r3, #5
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003486:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003488:	4318      	orrs	r0, r3
1000348a:	6001      	str	r1, [r0, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
1000348c:	4770      	bx	lr
1000348e:	46c0      	nop			; (mov r8, r8)
10003490:	4001c004 	.word	0x4001c004

10003494 <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
10003494:	4b05      	ldr	r3, [pc, #20]	; (100034ac <gpio_set_input_hysteresis_enabled+0x18>)
10003496:	0080      	lsls	r0, r0, #2
10003498:	18c0      	adds	r0, r0, r3
1000349a:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000349c:	2380      	movs	r3, #128	; 0x80
    if (enabled)
1000349e:	2900      	cmp	r1, #0
100034a0:	d100      	bne.n	100034a4 <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100034a2:	23c0      	movs	r3, #192	; 0xc0
100034a4:	019b      	lsls	r3, r3, #6
100034a6:	4318      	orrs	r0, r3
100034a8:	6002      	str	r2, [r0, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
100034aa:	4770      	bx	lr
100034ac:	4001c004 	.word	0x4001c004

100034b0 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
100034b0:	4b05      	ldr	r3, [pc, #20]	; (100034c8 <gpio_set_slew_rate+0x18>)
100034b2:	0080      	lsls	r0, r0, #2
100034b4:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100034b6:	6803      	ldr	r3, [r0, #0]
100034b8:	4059      	eors	r1, r3
100034ba:	2301      	movs	r3, #1
100034bc:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100034be:	2380      	movs	r3, #128	; 0x80
100034c0:	015b      	lsls	r3, r3, #5
100034c2:	4318      	orrs	r0, r3
100034c4:	6001      	str	r1, [r0, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
100034c6:	4770      	bx	lr
100034c8:	4001c004 	.word	0x4001c004

100034cc <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
100034cc:	4b06      	ldr	r3, [pc, #24]	; (100034e8 <gpio_set_drive_strength+0x1c>)
100034ce:	0080      	lsls	r0, r0, #2
100034d0:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100034d2:	6803      	ldr	r3, [r0, #0]
100034d4:	0109      	lsls	r1, r1, #4
100034d6:	4059      	eors	r1, r3
100034d8:	2330      	movs	r3, #48	; 0x30
100034da:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100034dc:	2380      	movs	r3, #128	; 0x80
100034de:	015b      	lsls	r3, r3, #5
100034e0:	4318      	orrs	r0, r3
100034e2:	6001      	str	r1, [r0, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
100034e4:	4770      	bx	lr
100034e6:	46c0      	nop			; (mov r8, r8)
100034e8:	4001c004 	.word	0x4001c004

100034ec <gpio_acknowledge_irq>:
    io_irq_ctrl_hw_t *irq_ctrl_base = &iobank0_hw->dormant_wake_irq_ctrl;
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    iobank0_hw->intr[gpio / 8] = events << 4 * (gpio % 8);
100034ec:	2207      	movs	r2, #7
100034ee:	08c3      	lsrs	r3, r0, #3
100034f0:	4010      	ands	r0, r2
100034f2:	0080      	lsls	r0, r0, #2
100034f4:	4081      	lsls	r1, r0
100034f6:	4a02      	ldr	r2, [pc, #8]	; (10003500 <gpio_acknowledge_irq+0x14>)
100034f8:	333c      	adds	r3, #60	; 0x3c
100034fa:	009b      	lsls	r3, r3, #2
100034fc:	5099      	str	r1, [r3, r2]
}
100034fe:	4770      	bx	lr
10003500:	40014000 	.word	0x40014000

10003504 <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10003506:	23d0      	movs	r3, #208	; 0xd0
10003508:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000350a:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000350c:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000350e:	1e63      	subs	r3, r4, #1
10003510:	419c      	sbcs	r4, r3
10003512:	2030      	movs	r0, #48	; 0x30
10003514:	4b0b      	ldr	r3, [pc, #44]	; (10003544 <gpio_set_irq_enabled+0x40>)
10003516:	4264      	negs	r4, r4
10003518:	4004      	ands	r4, r0
    gpio_acknowledge_irq(gpio, events);
1000351a:	0028      	movs	r0, r5
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000351c:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000351e:	000f      	movs	r7, r1
10003520:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
10003522:	f7ff ffe3 	bl	100034ec <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
10003526:	2307      	movs	r3, #7
10003528:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
1000352a:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
1000352c:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
1000352e:	00ad      	lsls	r5, r5, #2
10003530:	1965      	adds	r5, r4, r5
    events <<= 4 * (gpio % 8);
10003532:	409f      	lsls	r7, r3
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003534:	2480      	movs	r4, #128	; 0x80
    if (enabled)
10003536:	2e00      	cmp	r6, #0
10003538:	d100      	bne.n	1000353c <gpio_set_irq_enabled+0x38>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000353a:	24c0      	movs	r4, #192	; 0xc0
1000353c:	01a4      	lsls	r4, r4, #6
1000353e:	4325      	orrs	r5, r4
10003540:	602f      	str	r7, [r5, #0]
}
10003542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003544:	40014100 	.word	0x40014100

10003548 <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
10003548:	4b05      	ldr	r3, [pc, #20]	; (10003560 <gpio_set_input_enabled+0x18>)
1000354a:	0080      	lsls	r0, r0, #2
1000354c:	18c0      	adds	r0, r0, r3
1000354e:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003550:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10003552:	2900      	cmp	r1, #0
10003554:	d100      	bne.n	10003558 <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003556:	23c0      	movs	r3, #192	; 0xc0
10003558:	019b      	lsls	r3, r3, #6
1000355a:	4318      	orrs	r0, r3
1000355c:	6002      	str	r2, [r0, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
1000355e:	4770      	bx	lr
10003560:	4001c004 	.word	0x4001c004

10003564 <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10003564:	b570      	push	{r4, r5, r6, lr}
10003566:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10003568:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
1000356a:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
1000356c:	f7ff fef0 	bl	10003350 <clock_get_hz>
10003570:	0021      	movs	r1, r4
10003572:	00c0      	lsls	r0, r0, #3
10003574:	f7fc fe36 	bl	100001e4 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
10003578:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
1000357a:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
1000357c:	d007      	beq.n	1000358e <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
1000357e:	4b0e      	ldr	r3, [pc, #56]	; (100035b8 <uart_set_baudrate+0x54>)
10003580:	429d      	cmp	r5, r3
10003582:	d815      	bhi.n	100035b0 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
10003584:	237f      	movs	r3, #127	; 0x7f
10003586:	4018      	ands	r0, r3
10003588:	1900      	adds	r0, r0, r4
1000358a:	002c      	movs	r4, r5
1000358c:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000358e:	2080      	movs	r0, #128	; 0x80
10003590:	2300      	movs	r3, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
10003592:	6274      	str	r4, [r6, #36]	; 0x24
10003594:	0180      	lsls	r0, r0, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
10003596:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
10003598:	362c      	adds	r6, #44	; 0x2c
1000359a:	4306      	orrs	r6, r0
1000359c:	6033      	str	r3, [r6, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
1000359e:	2006      	movs	r0, #6
100035a0:	f7ff fed6 	bl	10003350 <clock_get_hz>
100035a4:	01a1      	lsls	r1, r4, #6
100035a6:	1949      	adds	r1, r1, r5
100035a8:	0080      	lsls	r0, r0, #2
100035aa:	f7fc fe1b 	bl	100001e4 <__udivsi3>
}
100035ae:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
100035b0:	2500      	movs	r5, #0
        baud_ibrd = 65535;
100035b2:	4c02      	ldr	r4, [pc, #8]	; (100035bc <uart_set_baudrate+0x58>)
100035b4:	e7eb      	b.n	1000358e <uart_set_baudrate+0x2a>
100035b6:	46c0      	nop			; (mov r8, r8)
100035b8:	0000fffe 	.word	0x0000fffe
100035bc:	0000ffff 	.word	0x0000ffff

100035c0 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
100035c0:	b570      	push	{r4, r5, r6, lr}
100035c2:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
100035c4:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
100035c6:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
100035c8:	f7ff fec2 	bl	10003350 <clock_get_hz>
100035cc:	2800      	cmp	r0, #0
100035ce:	d02e      	beq.n	1000362e <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
100035d0:	4b19      	ldr	r3, [pc, #100]	; (10003638 <uart_init+0x78>)
100035d2:	429c      	cmp	r4, r3
100035d4:	d02c      	beq.n	10003630 <uart_init+0x70>
100035d6:	2380      	movs	r3, #128	; 0x80
100035d8:	03db      	lsls	r3, r3, #15
100035da:	4a18      	ldr	r2, [pc, #96]	; (1000363c <uart_init+0x7c>)
100035dc:	4918      	ldr	r1, [pc, #96]	; (10003640 <uart_init+0x80>)
100035de:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100035e0:	4a18      	ldr	r2, [pc, #96]	; (10003644 <uart_init+0x84>)
100035e2:	6013      	str	r3, [r2, #0]
100035e4:	0018      	movs	r0, r3
100035e6:	688a      	ldr	r2, [r1, #8]
100035e8:	4390      	bics	r0, r2
100035ea:	d1fb      	bne.n	100035e4 <uart_init+0x24>
 * \param uart UART instance
 * \return Number of UART, 0 or 1.
 */
static inline uint uart_get_index(uart_inst_t *uart) {
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    return uart == uart1 ? 1 : 0;
100035ec:	4b16      	ldr	r3, [pc, #88]	; (10003648 <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
100035ee:	2180      	movs	r1, #128	; 0x80
100035f0:	18e3      	adds	r3, r4, r3
100035f2:	425a      	negs	r2, r3
100035f4:	4153      	adcs	r3, r2
100035f6:	4a15      	ldr	r2, [pc, #84]	; (1000364c <uart_init+0x8c>)
100035f8:	005b      	lsls	r3, r3, #1
100035fa:	0049      	lsls	r1, r1, #1
100035fc:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
100035fe:	0020      	movs	r0, r4
10003600:	0029      	movs	r1, r5
10003602:	f7ff ffaf 	bl	10003564 <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10003606:	2360      	movs	r3, #96	; 0x60
10003608:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 */
static inline void uart_set_format(uart_inst_t *uart, uint data_bits, uint stop_bits, uart_parity_t parity) {
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
1000360a:	0021      	movs	r1, r4
1000360c:	4053      	eors	r3, r2
1000360e:	226e      	movs	r2, #110	; 0x6e
10003610:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003612:	2280      	movs	r2, #128	; 0x80
10003614:	312c      	adds	r1, #44	; 0x2c
10003616:	0152      	lsls	r2, r2, #5
10003618:	430a      	orrs	r2, r1
1000361a:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
1000361c:	4b0c      	ldr	r3, [pc, #48]	; (10003650 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000361e:	2210      	movs	r2, #16
10003620:	6323      	str	r3, [r4, #48]	; 0x30
10003622:	2380      	movs	r3, #128	; 0x80
10003624:	019b      	lsls	r3, r3, #6
10003626:	430b      	orrs	r3, r1
10003628:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
1000362a:	2303      	movs	r3, #3
1000362c:	64a3      	str	r3, [r4, #72]	; 0x48
}
1000362e:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10003630:	2380      	movs	r3, #128	; 0x80
10003632:	041b      	lsls	r3, r3, #16
10003634:	e7d1      	b.n	100035da <uart_init+0x1a>
10003636:	46c0      	nop			; (mov r8, r8)
10003638:	40038000 	.word	0x40038000
1000363c:	4000e000 	.word	0x4000e000
10003640:	4000c000 	.word	0x4000c000
10003644:	4000f000 	.word	0x4000f000
10003648:	bffc8000 	.word	0xbffc8000
1000364c:	200004c0 	.word	0x200004c0
10003650:	00000301 	.word	0x00000301

10003654 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
10003654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10003656:	4f0f      	ldr	r7, [pc, #60]	; (10003694 <z_sys_init_run_level+0x40>)
10003658:	0083      	lsls	r3, r0, #2
1000365a:	59dd      	ldr	r5, [r3, r7]
1000365c:	3001      	adds	r0, #1
1000365e:	0084      	lsls	r4, r0, #2
10003660:	593b      	ldr	r3, [r7, r4]
10003662:	42ab      	cmp	r3, r5
10003664:	d800      	bhi.n	10003668 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
10003666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
10003668:	686e      	ldr	r6, [r5, #4]
		int rc = entry->init(dev);
1000366a:	682b      	ldr	r3, [r5, #0]
1000366c:	0030      	movs	r0, r6
1000366e:	4798      	blx	r3
		if (dev != NULL) {
10003670:	2e00      	cmp	r6, #0
10003672:	d00d      	beq.n	10003690 <z_sys_init_run_level+0x3c>
				dev->state->init_res = rc;
10003674:	68f3      	ldr	r3, [r6, #12]
			if (rc != 0) {
10003676:	2800      	cmp	r0, #0
10003678:	d006      	beq.n	10003688 <z_sys_init_run_level+0x34>
				dev->state->init_res = rc;
1000367a:	17c2      	asrs	r2, r0, #31
1000367c:	1880      	adds	r0, r0, r2
1000367e:	4050      	eors	r0, r2
10003680:	28ff      	cmp	r0, #255	; 0xff
10003682:	dd00      	ble.n	10003686 <z_sys_init_run_level+0x32>
10003684:	20ff      	movs	r0, #255	; 0xff
10003686:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
10003688:	2101      	movs	r1, #1
1000368a:	785a      	ldrb	r2, [r3, #1]
1000368c:	430a      	orrs	r2, r1
1000368e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10003690:	3508      	adds	r5, #8
10003692:	e7e5      	b.n	10003660 <z_sys_init_run_level+0xc>
10003694:	10005d88 	.word	0x10005d88

10003698 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
10003698:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
1000369a:	2401      	movs	r4, #1
1000369c:	4b09      	ldr	r3, [pc, #36]	; (100036c4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
1000369e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
100036a0:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
100036a2:	f7ff ffd7 	bl	10003654 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
100036a6:	f000 ffbd 	bl	10004624 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
100036aa:	2003      	movs	r0, #3
100036ac:	f7ff ffd2 	bl	10003654 <z_sys_init_run_level>

	z_init_static_threads();
100036b0:	f000 f8fa 	bl	100038a8 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
100036b4:	f7fe fa42 	bl	10001b3c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
100036b8:	4a03      	ldr	r2, [pc, #12]	; (100036c8 <bg_thread_main+0x30>)
100036ba:	7b13      	ldrb	r3, [r2, #12]
100036bc:	43a3      	bics	r3, r4
100036be:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
100036c0:	bd10      	pop	{r4, pc}
100036c2:	46c0      	nop			; (mov r8, r8)
100036c4:	200004c4 	.word	0x200004c4
100036c8:	200002d8 	.word	0x200002d8

100036cc <z_bss_zero>:
{
100036cc:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
100036ce:	4803      	ldr	r0, [pc, #12]	; (100036dc <z_bss_zero+0x10>)
100036d0:	4a03      	ldr	r2, [pc, #12]	; (100036e0 <z_bss_zero+0x14>)
100036d2:	2100      	movs	r1, #0
100036d4:	1a12      	subs	r2, r2, r0
100036d6:	f001 ff73 	bl	100055c0 <z_early_memset>
}
100036da:	bd10      	pop	{r4, pc}
100036dc:	20000268 	.word	0x20000268
100036e0:	200004c8 	.word	0x200004c8

100036e4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
100036e4:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
100036e6:	2670      	movs	r6, #112	; 0x70
100036e8:	4346      	muls	r6, r0
100036ea:	4b13      	ldr	r3, [pc, #76]	; (10003738 <z_init_cpu+0x54>)
{
100036ec:	0004      	movs	r4, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
100036ee:	4913      	ldr	r1, [pc, #76]	; (1000373c <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100036f0:	2518      	movs	r5, #24
	struct k_thread *thread = &z_idle_threads[i];
100036f2:	199e      	adds	r6, r3, r6
	k_thread_stack_t *stack = z_idle_stacks[i];
100036f4:	0203      	lsls	r3, r0, #8
100036f6:	1859      	adds	r1, r3, r1
	z_setup_new_thread(thread, stack,
100036f8:	2300      	movs	r3, #0
100036fa:	2001      	movs	r0, #1
100036fc:	2280      	movs	r2, #128	; 0x80
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100036fe:	4365      	muls	r5, r4
{
10003700:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
10003702:	9305      	str	r3, [sp, #20]
10003704:	9302      	str	r3, [sp, #8]
10003706:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10003708:	4b0d      	ldr	r3, [pc, #52]	; (10003740 <z_init_cpu+0x5c>)
	z_setup_new_thread(thread, stack,
1000370a:	9004      	str	r0, [sp, #16]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
1000370c:	195d      	adds	r5, r3, r5
	z_setup_new_thread(thread, stack,
1000370e:	300e      	adds	r0, #14
10003710:	9003      	str	r0, [sp, #12]
10003712:	4b0c      	ldr	r3, [pc, #48]	; (10003744 <z_init_cpu+0x60>)
10003714:	0030      	movs	r0, r6
10003716:	9500      	str	r5, [sp, #0]
10003718:	0052      	lsls	r2, r2, #1
1000371a:	f000 f86f 	bl	100037fc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
1000371e:	2204      	movs	r2, #4
10003720:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10003722:	4809      	ldr	r0, [pc, #36]	; (10003748 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
10003724:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10003726:	3401      	adds	r4, #1
10003728:	02e4      	lsls	r4, r4, #11
1000372a:	4393      	bics	r3, r2
1000372c:	1824      	adds	r4, r4, r0
1000372e:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
10003730:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
10003732:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
10003734:	b006      	add	sp, #24
10003736:	bd70      	pop	{r4, r5, r6, pc}
10003738:	20000268 	.word	0x20000268
1000373c:	200008c8 	.word	0x200008c8
10003740:	20000484 	.word	0x20000484
10003744:	100055eb 	.word	0x100055eb
10003748:	200009c8 	.word	0x200009c8

1000374c <z_cstart>:
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
1000374c:	2280      	movs	r2, #128	; 0x80
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
1000374e:	b5f0      	push	{r4, r5, r6, r7, lr}
10003750:	4b22      	ldr	r3, [pc, #136]	; (100037dc <z_cstart+0x90>)
10003752:	0112      	lsls	r2, r2, #4
10003754:	b0a3      	sub	sp, #140	; 0x8c
10003756:	189b      	adds	r3, r3, r2
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
10003758:	f383 8808 	msr	MSP, r3
1000375c:	4920      	ldr	r1, [pc, #128]	; (100037e0 <z_cstart+0x94>)
1000375e:	4a21      	ldr	r2, [pc, #132]	; (100037e4 <z_cstart+0x98>)
10003760:	6a0b      	ldr	r3, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
10003762:	2400      	movs	r4, #0
10003764:	401a      	ands	r2, r3
10003766:	23e0      	movs	r3, #224	; 0xe0
10003768:	041b      	lsls	r3, r3, #16
1000376a:	4313      	orrs	r3, r2
1000376c:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
1000376e:	f001 fa65 	bl	10004c3c <z_arm_fault_init>
	z_arm_cpu_idle_init();
10003772:	f7fe ff7d 	bl	10002670 <z_arm_cpu_idle_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
10003776:	2202      	movs	r2, #2
#endif

	_current_cpu->current = dummy_thread;
10003778:	4e1b      	ldr	r6, [pc, #108]	; (100037e8 <z_cstart+0x9c>)
	dummy_thread->base.user_options = K_ESSENTIAL;
1000377a:	ab06      	add	r3, sp, #24
1000377c:	32ff      	adds	r2, #255	; 0xff
1000377e:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
10003780:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
10003782:	941f      	str	r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
10003784:	f001 fef2 	bl	1000556c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
10003788:	0020      	movs	r0, r4
1000378a:	f7ff ff63 	bl	10003654 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
1000378e:	2001      	movs	r0, #1
10003790:	f7ff ff60 	bl	10003654 <z_sys_init_run_level>
	z_sched_init();
10003794:	f000 fcb4 	bl	10004100 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10003798:	4d14      	ldr	r5, [pc, #80]	; (100037ec <z_cstart+0xa0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
1000379a:	4b15      	ldr	r3, [pc, #84]	; (100037f0 <z_cstart+0xa4>)
	_kernel.ready_q.cache = &z_main_thread;
1000379c:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
1000379e:	2280      	movs	r2, #128	; 0x80
100037a0:	9305      	str	r3, [sp, #20]
100037a2:	2301      	movs	r3, #1
100037a4:	4f13      	ldr	r7, [pc, #76]	; (100037f4 <z_cstart+0xa8>)
100037a6:	4914      	ldr	r1, [pc, #80]	; (100037f8 <z_cstart+0xac>)
100037a8:	9304      	str	r3, [sp, #16]
100037aa:	00d2      	lsls	r2, r2, #3
100037ac:	003b      	movs	r3, r7
100037ae:	0028      	movs	r0, r5
100037b0:	9403      	str	r4, [sp, #12]
100037b2:	9402      	str	r4, [sp, #8]
100037b4:	9401      	str	r4, [sp, #4]
100037b6:	9400      	str	r4, [sp, #0]
100037b8:	f000 f820 	bl	100037fc <z_setup_new_thread>
100037bc:	2204      	movs	r2, #4
100037be:	0006      	movs	r6, r0
100037c0:	7b6b      	ldrb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
100037c2:	0028      	movs	r0, r5
100037c4:	4393      	bics	r3, r2
100037c6:	736b      	strb	r3, [r5, #13]
100037c8:	f001 ffa9 	bl	1000571e <z_ready_thread>
	z_init_cpu(0);
100037cc:	0020      	movs	r0, r4
100037ce:	f7ff ff89 	bl	100036e4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
100037d2:	003a      	movs	r2, r7
100037d4:	0031      	movs	r1, r6
100037d6:	0028      	movs	r0, r5
100037d8:	f7ff f816 	bl	10002808 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
100037dc:	200009c8 	.word	0x200009c8
100037e0:	e000ed00 	.word	0xe000ed00
100037e4:	ff00ffff 	.word	0xff00ffff
100037e8:	20000484 	.word	0x20000484
100037ec:	200002d8 	.word	0x200002d8
100037f0:	10005e14 	.word	0x10005e14
100037f4:	10003699 	.word	0x10003699
100037f8:	200004c8 	.word	0x200004c8

100037fc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
100037fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
100037fe:	0004      	movs	r4, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10003800:	1dd5      	adds	r5, r2, #7
10003802:	2207      	movs	r2, #7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
10003804:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
10003806:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10003808:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
1000380a:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
1000380c:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
1000380e:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
10003810:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10003812:	4395      	bics	r5, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10003814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
10003816:	7360      	strb	r0, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10003818:	9202      	str	r2, [sp, #8]
1000381a:	9a09      	ldr	r2, [sp, #36]	; 0x24

	thread_base->prio = priority;
1000381c:	980b      	ldr	r0, [sp, #44]	; 0x2c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
1000381e:	9201      	str	r2, [sp, #4]
10003820:	9a08      	ldr	r2, [sp, #32]
	stack_ptr = (char *)stack + stack_obj_size;
10003822:	194d      	adds	r5, r1, r5
	thread_base->prio = priority;
10003824:	73a0      	strb	r0, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10003826:	9200      	str	r2, [sp, #0]
10003828:	0020      	movs	r0, r4
1000382a:	002a      	movs	r2, r5
	thread_base->pended_on = NULL;
1000382c:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
1000382e:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
10003830:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
10003832:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10003834:	f7fe ffd2 	bl	100027dc <arch_new_thread>
	if (!_current) {
10003838:	4b04      	ldr	r3, [pc, #16]	; (1000384c <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
1000383a:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
1000383c:	689b      	ldr	r3, [r3, #8]
1000383e:	42b3      	cmp	r3, r6
10003840:	d000      	beq.n	10003844 <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
10003842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
10003844:	0028      	movs	r0, r5
10003846:	6663      	str	r3, [r4, #100]	; 0x64
10003848:	b004      	add	sp, #16
1000384a:	bd70      	pop	{r4, r5, r6, pc}
1000384c:	20000484 	.word	0x20000484

10003850 <z_impl_k_thread_create>:
{
10003850:	b570      	push	{r4, r5, r6, lr}
10003852:	0004      	movs	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10003854:	2000      	movs	r0, #0
{
10003856:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10003858:	9005      	str	r0, [sp, #20]
1000385a:	980e      	ldr	r0, [sp, #56]	; 0x38
{
1000385c:	9d11      	ldr	r5, [sp, #68]	; 0x44
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
1000385e:	9004      	str	r0, [sp, #16]
10003860:	980d      	ldr	r0, [sp, #52]	; 0x34
{
10003862:	9e10      	ldr	r6, [sp, #64]	; 0x40
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10003864:	9003      	str	r0, [sp, #12]
10003866:	980c      	ldr	r0, [sp, #48]	; 0x30
10003868:	9002      	str	r0, [sp, #8]
1000386a:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000386c:	9001      	str	r0, [sp, #4]
1000386e:	980a      	ldr	r0, [sp, #40]	; 0x28
10003870:	9000      	str	r0, [sp, #0]
10003872:	0020      	movs	r0, r4
10003874:	f7ff ffc2 	bl	100037fc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
10003878:	002b      	movs	r3, r5
1000387a:	1c72      	adds	r2, r6, #1
1000387c:	d101      	bne.n	10003882 <z_impl_k_thread_create+0x32>
1000387e:	3301      	adds	r3, #1
10003880:	d005      	beq.n	1000388e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10003882:	002b      	movs	r3, r5
10003884:	4333      	orrs	r3, r6
10003886:	d105      	bne.n	10003894 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
10003888:	0020      	movs	r0, r4
1000388a:	f000 fb95 	bl	10003fb8 <z_sched_start>
}
1000388e:	0020      	movs	r0, r4
10003890:	b006      	add	sp, #24
10003892:	bd70      	pop	{r4, r5, r6, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10003894:	0020      	movs	r0, r4
10003896:	0032      	movs	r2, r6
10003898:	002b      	movs	r3, r5
1000389a:	4902      	ldr	r1, [pc, #8]	; (100038a4 <z_impl_k_thread_create+0x54>)
1000389c:	3018      	adds	r0, #24
1000389e:	f000 fdbf 	bl	10004420 <z_add_timeout>
100038a2:	e7f4      	b.n	1000388e <z_impl_k_thread_create+0x3e>
100038a4:	10005737 	.word	0x10005737

100038a8 <z_init_static_threads>:
{
100038a8:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
100038aa:	4c20      	ldr	r4, [pc, #128]	; (1000392c <z_init_static_threads+0x84>)
{
100038ac:	b086      	sub	sp, #24
100038ae:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
100038b0:	4d1f      	ldr	r5, [pc, #124]	; (10003930 <z_init_static_threads+0x88>)
100038b2:	42ac      	cmp	r4, r5
100038b4:	d308      	bcc.n	100038c8 <z_init_static_threads+0x20>
	k_sched_lock();
100038b6:	f000 fa9d 	bl	10003df4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
100038ba:	0034      	movs	r4, r6
100038bc:	42ac      	cmp	r4, r5
100038be:	d319      	bcc.n	100038f4 <z_init_static_threads+0x4c>
	k_sched_unlock();
100038c0:	f000 fc08 	bl	100040d4 <k_sched_unlock>
}
100038c4:	b006      	add	sp, #24
100038c6:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
100038c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
100038ca:	9305      	str	r3, [sp, #20]
100038cc:	6a23      	ldr	r3, [r4, #32]
100038ce:	9304      	str	r3, [sp, #16]
100038d0:	69e3      	ldr	r3, [r4, #28]
100038d2:	9303      	str	r3, [sp, #12]
100038d4:	69a3      	ldr	r3, [r4, #24]
100038d6:	9302      	str	r3, [sp, #8]
100038d8:	6963      	ldr	r3, [r4, #20]
100038da:	9301      	str	r3, [sp, #4]
100038dc:	6923      	ldr	r3, [r4, #16]
100038de:	9300      	str	r3, [sp, #0]
100038e0:	68e3      	ldr	r3, [r4, #12]
100038e2:	68a2      	ldr	r2, [r4, #8]
100038e4:	6861      	ldr	r1, [r4, #4]
100038e6:	6820      	ldr	r0, [r4, #0]
100038e8:	f7ff ff88 	bl	100037fc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
100038ec:	6823      	ldr	r3, [r4, #0]
100038ee:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
100038f0:	3430      	adds	r4, #48	; 0x30
100038f2:	e7dd      	b.n	100038b0 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
100038f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
100038f6:	1c43      	adds	r3, r0, #1
100038f8:	d00f      	beq.n	1000391a <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
100038fa:	43c3      	mvns	r3, r0
100038fc:	17db      	asrs	r3, r3, #31
100038fe:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
10003900:	220a      	movs	r2, #10
10003902:	2300      	movs	r3, #0
10003904:	17c1      	asrs	r1, r0, #31
10003906:	f7fe f885 	bl	10001a14 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
1000390a:	6826      	ldr	r6, [r4, #0]
1000390c:	000b      	movs	r3, r1
1000390e:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10003910:	4301      	orrs	r1, r0
10003912:	d104      	bne.n	1000391e <z_init_static_threads+0x76>
	z_sched_start(thread);
10003914:	0030      	movs	r0, r6
10003916:	f000 fb4f 	bl	10003fb8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
1000391a:	3430      	adds	r4, #48	; 0x30
1000391c:	e7ce      	b.n	100038bc <z_init_static_threads+0x14>
1000391e:	0030      	movs	r0, r6
10003920:	4904      	ldr	r1, [pc, #16]	; (10003934 <z_init_static_threads+0x8c>)
10003922:	3018      	adds	r0, #24
10003924:	f000 fd7c 	bl	10004420 <z_add_timeout>
10003928:	e7f7      	b.n	1000391a <z_init_static_threads+0x72>
1000392a:	46c0      	nop			; (mov r8, r8)
1000392c:	20000214 	.word	0x20000214
10003930:	20000214 	.word	0x20000214
10003934:	10005737 	.word	0x10005737

10003938 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
10003938:	b5f0      	push	{r4, r5, r6, r7, lr}
1000393a:	000f      	movs	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
1000393c:	0001      	movs	r1, r0
{
1000393e:	b085      	sub	sp, #20
	key = k_spin_lock(&msgq->lock);
10003940:	3108      	adds	r1, #8
{
10003942:	0004      	movs	r4, r0
	key = k_spin_lock(&msgq->lock);
10003944:	9103      	str	r1, [sp, #12]
	__asm__ volatile("mrs %0, PRIMASK;"
10003946:	f3ef 8610 	mrs	r6, PRIMASK
1000394a:	b672      	cpsid	i

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
1000394c:	6a01      	ldr	r1, [r0, #32]
1000394e:	68c0      	ldr	r0, [r0, #12]
10003950:	4281      	cmp	r1, r0
10003952:	d22b      	bcs.n	100039ac <z_impl_k_msgq_put+0x74>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
10003954:	0020      	movs	r0, r4
10003956:	f001 ff36 	bl	100057c6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
1000395a:	0039      	movs	r1, r7
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
1000395c:	1e05      	subs	r5, r0, #0
			(void)memcpy(pending_thread->base.swap_data, data,
1000395e:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
10003960:	d00e      	beq.n	10003980 <z_impl_k_msgq_put+0x48>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
10003962:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
10003964:	6940      	ldr	r0, [r0, #20]
10003966:	f001 f9a9 	bl	10004cbc <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
1000396a:	0028      	movs	r0, r5
1000396c:	66ec      	str	r4, [r5, #108]	; 0x6c
1000396e:	f001 fed6 	bl	1000571e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
10003972:	9803      	ldr	r0, [sp, #12]
10003974:	0031      	movs	r1, r6
10003976:	f000 fa27 	bl	10003dc8 <z_reschedule>
			return 0;
1000397a:	0020      	movs	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
1000397c:	b005      	add	sp, #20
1000397e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
10003980:	69e0      	ldr	r0, [r4, #28]
10003982:	f001 f99b 	bl	10004cbc <memcpy>
			msgq->write_ptr += msgq->msg_size;
10003986:	69e3      	ldr	r3, [r4, #28]
10003988:	68a2      	ldr	r2, [r4, #8]
1000398a:	189b      	adds	r3, r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
1000398c:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
1000398e:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
10003990:	4293      	cmp	r3, r2
10003992:	d101      	bne.n	10003998 <z_impl_k_msgq_put+0x60>
				msgq->write_ptr = msgq->buffer_start;
10003994:	6923      	ldr	r3, [r4, #16]
10003996:	61e3      	str	r3, [r4, #28]
		result = 0;
10003998:	2000      	movs	r0, #0
			msgq->used_msgs++;
1000399a:	6a23      	ldr	r3, [r4, #32]
1000399c:	3301      	adds	r3, #1
1000399e:	6223      	str	r3, [r4, #32]
	if (key != 0U) {
100039a0:	2e00      	cmp	r6, #0
100039a2:	d1eb      	bne.n	1000397c <z_impl_k_msgq_put+0x44>
	__asm__ volatile(
100039a4:	b662      	cpsie	i
100039a6:	f3bf 8f6f 	isb	sy
100039aa:	e7e7      	b.n	1000397c <z_impl_k_msgq_put+0x44>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
100039ac:	0011      	movs	r1, r2
100039ae:	4319      	orrs	r1, r3
100039b0:	d00a      	beq.n	100039c8 <z_impl_k_msgq_put+0x90>
		_current->base.swap_data = (void *) data;
100039b2:	4907      	ldr	r1, [pc, #28]	; (100039d0 <z_impl_k_msgq_put+0x98>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
100039b4:	9803      	ldr	r0, [sp, #12]
		_current->base.swap_data = (void *) data;
100039b6:	6889      	ldr	r1, [r1, #8]
100039b8:	614f      	str	r7, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
100039ba:	9200      	str	r2, [sp, #0]
100039bc:	0031      	movs	r1, r6
100039be:	0022      	movs	r2, r4
100039c0:	9301      	str	r3, [sp, #4]
100039c2:	f000 fb47 	bl	10004054 <z_pend_curr>
		return result;
100039c6:	e7d9      	b.n	1000397c <z_impl_k_msgq_put+0x44>
		result = -ENOMSG;
100039c8:	2023      	movs	r0, #35	; 0x23
100039ca:	4240      	negs	r0, r0
100039cc:	e7e8      	b.n	100039a0 <z_impl_k_msgq_put+0x68>
100039ce:	46c0      	nop			; (mov r8, r8)
100039d0:	20000484 	.word	0x20000484

100039d4 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
100039d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100039d6:	0004      	movs	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
100039d8:	0027      	movs	r7, r4
{
100039da:	0008      	movs	r0, r1
	key = k_spin_lock(&msgq->lock);
100039dc:	3708      	adds	r7, #8
	__asm__ volatile("mrs %0, PRIMASK;"
100039de:	f3ef 8610 	mrs	r6, PRIMASK
100039e2:	b672      	cpsid	i

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
100039e4:	6a21      	ldr	r1, [r4, #32]
100039e6:	2900      	cmp	r1, #0
100039e8:	d032      	beq.n	10003a50 <z_impl_k_msgq_get+0x7c>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
100039ea:	68a2      	ldr	r2, [r4, #8]
100039ec:	69a1      	ldr	r1, [r4, #24]
100039ee:	f001 f965 	bl	10004cbc <memcpy>
		msgq->read_ptr += msgq->msg_size;
100039f2:	69a3      	ldr	r3, [r4, #24]
100039f4:	68a2      	ldr	r2, [r4, #8]
100039f6:	189b      	adds	r3, r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
100039f8:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
100039fa:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
100039fc:	4293      	cmp	r3, r2
100039fe:	d101      	bne.n	10003a04 <z_impl_k_msgq_get+0x30>
			msgq->read_ptr = msgq->buffer_start;
10003a00:	6923      	ldr	r3, [r4, #16]
10003a02:	61a3      	str	r3, [r4, #24]
		}
		msgq->used_msgs--;
10003a04:	6a23      	ldr	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
10003a06:	0020      	movs	r0, r4
		msgq->used_msgs--;
10003a08:	3b01      	subs	r3, #1
10003a0a:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
10003a0c:	f001 fedb 	bl	100057c6 <z_unpend_first_thread>
10003a10:	0005      	movs	r5, r0

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
		}
		result = 0;
10003a12:	2000      	movs	r0, #0
		if (pending_thread != NULL) {
10003a14:	4285      	cmp	r5, r0
10003a16:	d02b      	beq.n	10003a70 <z_impl_k_msgq_get+0x9c>
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
10003a18:	68a2      	ldr	r2, [r4, #8]
10003a1a:	6969      	ldr	r1, [r5, #20]
10003a1c:	69e0      	ldr	r0, [r4, #28]
10003a1e:	f001 f94d 	bl	10004cbc <memcpy>
			msgq->write_ptr += msgq->msg_size;
10003a22:	69e3      	ldr	r3, [r4, #28]
10003a24:	68a2      	ldr	r2, [r4, #8]
10003a26:	189b      	adds	r3, r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
10003a28:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
10003a2a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
10003a2c:	4293      	cmp	r3, r2
10003a2e:	d101      	bne.n	10003a34 <z_impl_k_msgq_get+0x60>
				msgq->write_ptr = msgq->buffer_start;
10003a30:	6923      	ldr	r3, [r4, #16]
10003a32:	61e3      	str	r3, [r4, #28]
			msgq->used_msgs++;
10003a34:	6a23      	ldr	r3, [r4, #32]
			z_ready_thread(pending_thread);
10003a36:	0028      	movs	r0, r5
			msgq->used_msgs++;
10003a38:	3301      	adds	r3, #1
10003a3a:	6223      	str	r3, [r4, #32]
10003a3c:	2400      	movs	r4, #0
10003a3e:	66ec      	str	r4, [r5, #108]	; 0x6c
			z_ready_thread(pending_thread);
10003a40:	f001 fe6d 	bl	1000571e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
10003a44:	0038      	movs	r0, r7
10003a46:	0031      	movs	r1, r6
10003a48:	f000 f9be 	bl	10003dc8 <z_reschedule>
			return 0;
10003a4c:	0020      	movs	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
10003a4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10003a50:	0011      	movs	r1, r2
10003a52:	4319      	orrs	r1, r3
10003a54:	d00a      	beq.n	10003a6c <z_impl_k_msgq_get+0x98>
		_current->base.swap_data = data;
10003a56:	4909      	ldr	r1, [pc, #36]	; (10003a7c <z_impl_k_msgq_get+0xa8>)
10003a58:	6889      	ldr	r1, [r1, #8]
10003a5a:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
10003a5c:	9200      	str	r2, [sp, #0]
10003a5e:	0031      	movs	r1, r6
10003a60:	0022      	movs	r2, r4
10003a62:	0038      	movs	r0, r7
10003a64:	9301      	str	r3, [sp, #4]
10003a66:	f000 faf5 	bl	10004054 <z_pend_curr>
		return result;
10003a6a:	e7f0      	b.n	10003a4e <z_impl_k_msgq_get+0x7a>
		result = -ENOMSG;
10003a6c:	2023      	movs	r0, #35	; 0x23
10003a6e:	4240      	negs	r0, r0
	if (key != 0U) {
10003a70:	2e00      	cmp	r6, #0
10003a72:	d1ec      	bne.n	10003a4e <z_impl_k_msgq_get+0x7a>
	__asm__ volatile(
10003a74:	b662      	cpsie	i
10003a76:	f3bf 8f6f 	isb	sy
10003a7a:	e7e8      	b.n	10003a4e <z_impl_k_msgq_get+0x7a>
10003a7c:	20000484 	.word	0x20000484

10003a80 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
10003a80:	b570      	push	{r4, r5, r6, lr}
10003a82:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10003a84:	f3ef 8510 	mrs	r5, PRIMASK
10003a88:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
10003a8a:	f001 fe9c 	bl	100057c6 <z_unpend_first_thread>

	if (thread != NULL) {
10003a8e:	2800      	cmp	r0, #0
10003a90:	d008      	beq.n	10003aa4 <z_impl_k_sem_give+0x24>
10003a92:	2300      	movs	r3, #0
10003a94:	66c3      	str	r3, [r0, #108]	; 0x6c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
10003a96:	f001 fe42 	bl	1000571e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
10003a9a:	0029      	movs	r1, r5
10003a9c:	4805      	ldr	r0, [pc, #20]	; (10003ab4 <z_impl_k_sem_give+0x34>)
10003a9e:	f000 f993 	bl	10003dc8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
10003aa2:	bd70      	pop	{r4, r5, r6, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
10003aa4:	68a2      	ldr	r2, [r4, #8]
10003aa6:	68e3      	ldr	r3, [r4, #12]
10003aa8:	1a9b      	subs	r3, r3, r2
10003aaa:	1e59      	subs	r1, r3, #1
10003aac:	418b      	sbcs	r3, r1
10003aae:	189b      	adds	r3, r3, r2
10003ab0:	60a3      	str	r3, [r4, #8]
}
10003ab2:	e7f2      	b.n	10003a9a <z_impl_k_sem_give+0x1a>
10003ab4:	200004c5 	.word	0x200004c5

10003ab8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
10003ab8:	b513      	push	{r0, r1, r4, lr}
10003aba:	0001      	movs	r1, r0
10003abc:	f3ef 8010 	mrs	r0, PRIMASK
10003ac0:	b672      	cpsid	i

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
10003ac2:	688c      	ldr	r4, [r1, #8]
10003ac4:	2c00      	cmp	r4, #0
10003ac6:	d007      	beq.n	10003ad8 <z_impl_k_sem_take+0x20>
		sem->count--;
10003ac8:	3c01      	subs	r4, #1
10003aca:	608c      	str	r4, [r1, #8]
	if (key != 0U) {
10003acc:	2800      	cmp	r0, #0
10003ace:	d115      	bne.n	10003afc <z_impl_k_sem_take+0x44>
	__asm__ volatile(
10003ad0:	b662      	cpsie	i
10003ad2:	f3bf 8f6f 	isb	sy

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
10003ad6:	bd16      	pop	{r1, r2, r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10003ad8:	0014      	movs	r4, r2
10003ada:	431c      	orrs	r4, r3
10003adc:	d106      	bne.n	10003aec <z_impl_k_sem_take+0x34>
	if (key != 0U) {
10003ade:	2800      	cmp	r0, #0
10003ae0:	d10e      	bne.n	10003b00 <z_impl_k_sem_take+0x48>
	__asm__ volatile(
10003ae2:	b662      	cpsie	i
10003ae4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
10003ae8:	3810      	subs	r0, #16
10003aea:	e7f4      	b.n	10003ad6 <z_impl_k_sem_take+0x1e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
10003aec:	9200      	str	r2, [sp, #0]
10003aee:	9301      	str	r3, [sp, #4]
10003af0:	000a      	movs	r2, r1
10003af2:	0001      	movs	r1, r0
10003af4:	4804      	ldr	r0, [pc, #16]	; (10003b08 <z_impl_k_sem_take+0x50>)
10003af6:	f000 faad 	bl	10004054 <z_pend_curr>
10003afa:	e7ec      	b.n	10003ad6 <z_impl_k_sem_take+0x1e>
		ret = 0;
10003afc:	2000      	movs	r0, #0
10003afe:	e7ea      	b.n	10003ad6 <z_impl_k_sem_take+0x1e>
		ret = -EBUSY;
10003b00:	2010      	movs	r0, #16
10003b02:	4240      	negs	r0, r0
	return ret;
10003b04:	e7e7      	b.n	10003ad6 <z_impl_k_sem_take+0x1e>
10003b06:	46c0      	nop			; (mov r8, r8)
10003b08:	200004c5 	.word	0x200004c5

10003b0c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
10003b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10003b0e:	0005      	movs	r5, r0
10003b10:	b087      	sub	sp, #28
	__asm__ volatile("mrs %0, PRIMASK;"
10003b12:	f3ef 8710 	mrs	r7, PRIMASK
10003b16:	b672      	cpsid	i
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
10003b18:	002e      	movs	r6, r5
10003b1a:	6f2c      	ldr	r4, [r5, #112]	; 0x70
10003b1c:	3688      	adds	r6, #136	; 0x88
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
10003b1e:	2c00      	cmp	r4, #0
10003b20:	d113      	bne.n	10003b4a <work_queue_main+0x3e>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
10003b22:	2102      	movs	r1, #2
10003b24:	0030      	movs	r0, r6
10003b26:	f001 fd8b 	bl	10005640 <flag_test_and_clear>
10003b2a:	2800      	cmp	r0, #0
10003b2c:	d13f      	bne.n	10003bae <work_queue_main+0xa2>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
10003b2e:	2300      	movs	r3, #0
10003b30:	002a      	movs	r2, r5
10003b32:	9302      	str	r3, [sp, #8]
10003b34:	2301      	movs	r3, #1
10003b36:	425b      	negs	r3, r3
10003b38:	17dc      	asrs	r4, r3, #31
10003b3a:	0039      	movs	r1, r7
10003b3c:	9300      	str	r3, [sp, #0]
10003b3e:	9401      	str	r4, [sp, #4]
10003b40:	3278      	adds	r2, #120	; 0x78
10003b42:	4837      	ldr	r0, [pc, #220]	; (10003c20 <work_queue_main+0x114>)
10003b44:	f000 fbec 	bl	10004320 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
10003b48:	e7e3      	b.n	10003b12 <work_queue_main+0x6>
	return node->next;
10003b4a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
10003b4c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
	list->head = node;
10003b4e:	672b      	str	r3, [r5, #112]	; 0x70
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
10003b50:	4294      	cmp	r4, r2
10003b52:	d100      	bne.n	10003b56 <work_queue_main+0x4a>
	list->tail = node;
10003b54:	676b      	str	r3, [r5, #116]	; 0x74
	*flagp |= BIT(bit);
10003b56:	2302      	movs	r3, #2
10003b58:	6832      	ldr	r2, [r6, #0]
10003b5a:	4313      	orrs	r3, r2
10003b5c:	6033      	str	r3, [r6, #0]
	*flagp &= ~BIT(bit);
10003b5e:	2304      	movs	r3, #4
10003b60:	68e2      	ldr	r2, [r4, #12]
10003b62:	439a      	bics	r2, r3
10003b64:	3b03      	subs	r3, #3
10003b66:	4313      	orrs	r3, r2
10003b68:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
10003b6a:	6863      	ldr	r3, [r4, #4]
	if (key != 0U) {
10003b6c:	2f00      	cmp	r7, #0
10003b6e:	d102      	bne.n	10003b76 <work_queue_main+0x6a>
	__asm__ volatile(
10003b70:	b662      	cpsie	i
10003b72:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
10003b76:	0020      	movs	r0, r4
10003b78:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10003b7a:	f3ef 8310 	mrs	r3, PRIMASK
10003b7e:	b672      	cpsid	i
10003b80:	9305      	str	r3, [sp, #20]
	*flagp &= ~BIT(bit);
10003b82:	68e3      	ldr	r3, [r4, #12]
10003b84:	2101      	movs	r1, #1
10003b86:	001a      	movs	r2, r3
10003b88:	438a      	bics	r2, r1
	return (*flagp & BIT(bit)) != 0U;
10003b8a:	0850      	lsrs	r0, r2, #1
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10003b8c:	4208      	tst	r0, r1
10003b8e:	d118      	bne.n	10003bc2 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
10003b90:	60e2      	str	r2, [r4, #12]
10003b92:	2202      	movs	r2, #2
10003b94:	6833      	ldr	r3, [r6, #0]
10003b96:	4393      	bics	r3, r2
	if (key != 0U) {
10003b98:	9a05      	ldr	r2, [sp, #20]
10003b9a:	6033      	str	r3, [r6, #0]
	return (*flagp & BIT(bit)) != 0U;
10003b9c:	05db      	lsls	r3, r3, #23
10003b9e:	0fdb      	lsrs	r3, r3, #31
10003ba0:	2a00      	cmp	r2, #0
10003ba2:	d039      	beq.n	10003c18 <work_queue_main+0x10c>
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
10003ba4:	2b00      	cmp	r3, #0
10003ba6:	d1b4      	bne.n	10003b12 <work_queue_main+0x6>
	z_impl_k_yield();
10003ba8:	f000 fab8 	bl	1000411c <z_impl_k_yield>
}
10003bac:	e7b1      	b.n	10003b12 <work_queue_main+0x6>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
10003bae:	002c      	movs	r4, r5
10003bb0:	3480      	adds	r4, #128	; 0x80
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
10003bb2:	2200      	movs	r2, #0
10003bb4:	2101      	movs	r1, #1
10003bb6:	0020      	movs	r0, r4
10003bb8:	f001 fe2c 	bl	10005814 <z_sched_wake>
10003bbc:	2800      	cmp	r0, #0
10003bbe:	d1f8      	bne.n	10003bb2 <work_queue_main+0xa6>
10003bc0:	e7b5      	b.n	10003b2e <work_queue_main+0x22>
	*flagp &= ~BIT(bit);
10003bc2:	2203      	movs	r2, #3
10003bc4:	4393      	bics	r3, r2
10003bc6:	60e3      	str	r3, [r4, #12]
	return list->head;
10003bc8:	4b16      	ldr	r3, [pc, #88]	; (10003c24 <work_queue_main+0x118>)
10003bca:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
10003bcc:	2800      	cmp	r0, #0
10003bce:	d0e0      	beq.n	10003b92 <work_queue_main+0x86>
	return node->next;
10003bd0:	2700      	movs	r7, #0
10003bd2:	6803      	ldr	r3, [r0, #0]
10003bd4:	9304      	str	r3, [sp, #16]
		if (wc->work == work) {
10003bd6:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
10003bd8:	0003      	movs	r3, r0
		if (wc->work == work) {
10003bda:	4294      	cmp	r4, r2
10003bdc:	d10e      	bne.n	10003bfc <work_queue_main+0xf0>
10003bde:	6802      	ldr	r2, [r0, #0]
10003be0:	4b10      	ldr	r3, [pc, #64]	; (10003c24 <work_queue_main+0x118>)
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
10003be2:	2f00      	cmp	r7, #0
10003be4:	d112      	bne.n	10003c0c <work_queue_main+0x100>
10003be6:	6859      	ldr	r1, [r3, #4]
	list->head = node;
10003be8:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
10003bea:	4281      	cmp	r1, r0
10003bec:	d100      	bne.n	10003bf0 <work_queue_main+0xe4>
	list->tail = node;
10003bee:	605a      	str	r2, [r3, #4]
	parent->next = child;
10003bf0:	2300      	movs	r3, #0
10003bf2:	6003      	str	r3, [r0, #0]
			k_sem_give(&wc->sem);
10003bf4:	3008      	adds	r0, #8
	z_impl_k_sem_give(sem);
10003bf6:	f7ff ff43 	bl	10003a80 <z_impl_k_sem_give>
}
10003bfa:	003b      	movs	r3, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
10003bfc:	9a04      	ldr	r2, [sp, #16]
10003bfe:	2a00      	cmp	r2, #0
10003c00:	d0c7      	beq.n	10003b92 <work_queue_main+0x86>
	return node->next;
10003c02:	001f      	movs	r7, r3
10003c04:	6813      	ldr	r3, [r2, #0]
10003c06:	0010      	movs	r0, r2
10003c08:	9304      	str	r3, [sp, #16]
10003c0a:	e7e4      	b.n	10003bd6 <work_queue_main+0xca>
	return list->tail;
10003c0c:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
10003c0e:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
10003c10:	4288      	cmp	r0, r1
10003c12:	d1ed      	bne.n	10003bf0 <work_queue_main+0xe4>
	list->tail = node;
10003c14:	605f      	str	r7, [r3, #4]
}
10003c16:	e7eb      	b.n	10003bf0 <work_queue_main+0xe4>
	__asm__ volatile(
10003c18:	b662      	cpsie	i
10003c1a:	f3bf 8f6f 	isb	sy
10003c1e:	e7c1      	b.n	10003ba4 <work_queue_main+0x98>
10003c20:	200004c5 	.word	0x200004c5
10003c24:	200004a8 	.word	0x200004a8

10003c28 <submit_to_queue_locked>:
{
10003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
10003c2a:	68c3      	ldr	r3, [r0, #12]
{
10003c2c:	000e      	movs	r6, r1
	return (*flagp & BIT(bit)) != 0U;
10003c2e:	0859      	lsrs	r1, r3, #1
10003c30:	2201      	movs	r2, #1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10003c32:	000d      	movs	r5, r1
{
10003c34:	0004      	movs	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10003c36:	4015      	ands	r5, r2
10003c38:	4211      	tst	r1, r2
10003c3a:	d126      	bne.n	10003c8a <submit_to_queue_locked+0x62>
	return (*flagp & BIT(bit)) != 0U;
10003c3c:	0899      	lsrs	r1, r3, #2
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
10003c3e:	4211      	tst	r1, r2
10003c40:	d125      	bne.n	10003c8e <submit_to_queue_locked+0x66>
		if (*queuep == NULL) {
10003c42:	6832      	ldr	r2, [r6, #0]
10003c44:	2a00      	cmp	r2, #0
10003c46:	d101      	bne.n	10003c4c <submit_to_queue_locked+0x24>
			*queuep = work->queue;
10003c48:	6882      	ldr	r2, [r0, #8]
10003c4a:	6032      	str	r2, [r6, #0]
		ret = 1;
10003c4c:	2501      	movs	r5, #1
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
10003c4e:	422b      	tst	r3, r5
10003c50:	d002      	beq.n	10003c58 <submit_to_queue_locked+0x30>
			*queuep = work->queue;
10003c52:	68a3      	ldr	r3, [r4, #8]
			ret = 2;
10003c54:	196d      	adds	r5, r5, r5
			*queuep = work->queue;
10003c56:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
10003c58:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
10003c5a:	2f00      	cmp	r7, #0
10003c5c:	d032      	beq.n	10003cc4 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
10003c5e:	4b1b      	ldr	r3, [pc, #108]	; (10003ccc <submit_to_queue_locked+0xa4>)
10003c60:	2000      	movs	r0, #0
10003c62:	689b      	ldr	r3, [r3, #8]
10003c64:	42bb      	cmp	r3, r7
10003c66:	d104      	bne.n	10003c72 <submit_to_queue_locked+0x4a>
10003c68:	f001 fcb2 	bl	100055d0 <k_is_in_isr>
10003c6c:	2301      	movs	r3, #1
10003c6e:	4058      	eors	r0, r3
10003c70:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
10003c72:	003b      	movs	r3, r7
10003c74:	2201      	movs	r2, #1
10003c76:	3388      	adds	r3, #136	; 0x88
10003c78:	681b      	ldr	r3, [r3, #0]
10003c7a:	0899      	lsrs	r1, r3, #2
10003c7c:	4011      	ands	r1, r2
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
10003c7e:	4213      	tst	r3, r2
10003c80:	d022      	beq.n	10003cc8 <submit_to_queue_locked+0xa0>
	} else if (draining && !chained) {
10003c82:	2900      	cmp	r1, #0
10003c84:	d006      	beq.n	10003c94 <submit_to_queue_locked+0x6c>
10003c86:	2800      	cmp	r0, #0
10003c88:	d107      	bne.n	10003c9a <submit_to_queue_locked+0x72>
		ret = -EBUSY;
10003c8a:	2510      	movs	r5, #16
		ret = -ENODEV;
10003c8c:	426d      	negs	r5, r5
		*queuep = NULL;
10003c8e:	2300      	movs	r3, #0
10003c90:	6033      	str	r3, [r6, #0]
	return ret;
10003c92:	e012      	b.n	10003cba <submit_to_queue_locked+0x92>
	return (*flagp & BIT(bit)) != 0U;
10003c94:	08db      	lsrs	r3, r3, #3
	} else if (plugged && !draining) {
10003c96:	4213      	tst	r3, r2
10003c98:	d1f7      	bne.n	10003c8a <submit_to_queue_locked+0x62>
	parent->next = child;
10003c9a:	2300      	movs	r3, #0
10003c9c:	6023      	str	r3, [r4, #0]
	return list->tail;
10003c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
Z_GENLIST_APPEND(slist, snode)
10003ca0:	2b00      	cmp	r3, #0
10003ca2:	d10c      	bne.n	10003cbe <submit_to_queue_locked+0x96>
	list->tail = node;
10003ca4:	677c      	str	r4, [r7, #116]	; 0x74
	list->head = node;
10003ca6:	673c      	str	r4, [r7, #112]	; 0x70
		(void)notify_queue_locked(queue);
10003ca8:	0038      	movs	r0, r7
10003caa:	f001 fcd5 	bl	10005658 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
10003cae:	2304      	movs	r3, #4
10003cb0:	68e2      	ldr	r2, [r4, #12]
10003cb2:	4313      	orrs	r3, r2
10003cb4:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
10003cb6:	6833      	ldr	r3, [r6, #0]
10003cb8:	60a3      	str	r3, [r4, #8]
}
10003cba:	0028      	movs	r0, r5
10003cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
10003cbe:	601c      	str	r4, [r3, #0]
	list->tail = node;
10003cc0:	677c      	str	r4, [r7, #116]	; 0x74
}
10003cc2:	e7f1      	b.n	10003ca8 <submit_to_queue_locked+0x80>
		return -EINVAL;
10003cc4:	2516      	movs	r5, #22
10003cc6:	e7e1      	b.n	10003c8c <submit_to_queue_locked+0x64>
		ret = -ENODEV;
10003cc8:	2513      	movs	r5, #19
10003cca:	e7df      	b.n	10003c8c <submit_to_queue_locked+0x64>
10003ccc:	20000484 	.word	0x20000484

10003cd0 <k_work_submit>:
{
10003cd0:	b510      	push	{r4, lr}
10003cd2:	0001      	movs	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
10003cd4:	4801      	ldr	r0, [pc, #4]	; (10003cdc <k_work_submit+0xc>)
10003cd6:	f001 fcd7 	bl	10005688 <k_work_submit_to_queue>
}
10003cda:	bd10      	pop	{r4, pc}
10003cdc:	20000350 	.word	0x20000350

10003ce0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
10003ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
10003ce2:	0004      	movs	r4, r0
	list->head = NULL;
10003ce4:	2000      	movs	r0, #0
10003ce6:	6720      	str	r0, [r4, #112]	; 0x70
	list->tail = NULL;
10003ce8:	6760      	str	r0, [r4, #116]	; 0x74
10003cea:	0020      	movs	r0, r4
10003cec:	0026      	movs	r6, r4
10003cee:	3078      	adds	r0, #120	; 0x78
10003cf0:	b089      	sub	sp, #36	; 0x24
	list->head = (sys_dnode_t *)list;
10003cf2:	67a0      	str	r0, [r4, #120]	; 0x78
	list->tail = (sys_dnode_t *)list;
10003cf4:	67e0      	str	r0, [r4, #124]	; 0x7c
10003cf6:	3680      	adds	r6, #128	; 0x80
	list->head = (sys_dnode_t *)list;
10003cf8:	1d20      	adds	r0, r4, #4
10003cfa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
10003cfc:	67c6      	str	r6, [r0, #124]	; 0x7c
	list->tail = (sys_dnode_t *)list;
10003cfe:	3004      	adds	r0, #4
10003d00:	67c6      	str	r6, [r0, #124]	; 0x7c
	__ASSERT_NO_MSG(queue);
	__ASSERT_NO_MSG(stack);
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
	uint32_t flags = K_WORK_QUEUE_STARTED;
10003d02:	2001      	movs	r0, #1

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
10003d04:	2d00      	cmp	r5, #0
10003d06:	d007      	beq.n	10003d18 <k_work_queue_start+0x38>
10003d08:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
10003d0a:	4246      	negs	r6, r0
10003d0c:	4170      	adcs	r0, r6
10003d0e:	26ff      	movs	r6, #255	; 0xff
10003d10:	4240      	negs	r0, r0
10003d12:	43b0      	bics	r0, r6
10003d14:	3002      	adds	r0, #2
10003d16:	30ff      	adds	r0, #255	; 0xff
	*flagp = flags;
10003d18:	0026      	movs	r6, r4
10003d1a:	3688      	adds	r6, #136	; 0x88
10003d1c:	6030      	str	r0, [r6, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
10003d1e:	2000      	movs	r0, #0
10003d20:	2601      	movs	r6, #1
10003d22:	4276      	negs	r6, r6
10003d24:	17f7      	asrs	r7, r6, #31
10003d26:	9004      	str	r0, [sp, #16]
10003d28:	9303      	str	r3, [sp, #12]
10003d2a:	9002      	str	r0, [sp, #8]
10003d2c:	9001      	str	r0, [sp, #4]
10003d2e:	9606      	str	r6, [sp, #24]
10003d30:	9707      	str	r7, [sp, #28]
10003d32:	0020      	movs	r0, r4
10003d34:	4b08      	ldr	r3, [pc, #32]	; (10003d58 <k_work_queue_start+0x78>)
10003d36:	9400      	str	r4, [sp, #0]
10003d38:	f7ff fd8a 	bl	10003850 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
10003d3c:	2d00      	cmp	r5, #0
10003d3e:	d005      	beq.n	10003d4c <k_work_queue_start+0x6c>
10003d40:	6829      	ldr	r1, [r5, #0]
10003d42:	2900      	cmp	r1, #0
10003d44:	d002      	beq.n	10003d4c <k_work_queue_start+0x6c>
	return z_impl_k_thread_name_set(thread, str);
10003d46:	0020      	movs	r0, r4
10003d48:	f001 fc48 	bl	100055dc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
10003d4c:	0020      	movs	r0, r4
10003d4e:	f001 fc48 	bl	100055e2 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
10003d52:	b009      	add	sp, #36	; 0x24
10003d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003d56:	46c0      	nop			; (mov r8, r8)
10003d58:	10003b0d 	.word	0x10003b0d

10003d5c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
10003d5c:	b570      	push	{r4, r5, r6, lr}
	int ret = slice_ticks;
10003d5e:	4d07      	ldr	r5, [pc, #28]	; (10003d7c <z_reset_time_slice+0x20>)
10003d60:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
10003d62:	2c00      	cmp	r4, #0
10003d64:	d008      	beq.n	10003d78 <z_reset_time_slice+0x1c>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
10003d66:	f7ff f9db 	bl	10003120 <sys_clock_elapsed>
10003d6a:	4b05      	ldr	r3, [pc, #20]	; (10003d80 <z_reset_time_slice+0x24>)
10003d6c:	1824      	adds	r4, r4, r0
		z_set_timeout_expiry(slice_time(curr), false);
10003d6e:	2100      	movs	r1, #0
10003d70:	6828      	ldr	r0, [r5, #0]
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
10003d72:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
10003d74:	f001 fd80 	bl	10005878 <z_set_timeout_expiry>
	}
}
10003d78:	bd70      	pop	{r4, r5, r6, pc}
10003d7a:	46c0      	nop			; (mov r8, r8)
10003d7c:	200004b8 	.word	0x200004b8
10003d80:	20000484 	.word	0x20000484

10003d84 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
10003d84:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003d86:	f3ef 8410 	mrs	r4, PRIMASK
10003d8a:	b672      	cpsid	i
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
10003d8c:	2300      	movs	r3, #0
10003d8e:	4a0b      	ldr	r2, [pc, #44]	; (10003dbc <k_sched_time_slice_set+0x38>)
10003d90:	4d0b      	ldr	r5, [pc, #44]	; (10003dc0 <k_sched_time_slice_set+0x3c>)
10003d92:	6113      	str	r3, [r2, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
10003d94:	330a      	adds	r3, #10
10003d96:	4343      	muls	r3, r0
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
10003d98:	2800      	cmp	r0, #0
10003d9a:	dc0b      	bgt.n	10003db4 <k_sched_time_slice_set+0x30>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
10003d9c:	602b      	str	r3, [r5, #0]
		}
		slice_max_prio = prio;
10003d9e:	4b09      	ldr	r3, [pc, #36]	; (10003dc4 <k_sched_time_slice_set+0x40>)
		z_reset_time_slice(_current);
10003da0:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
10003da2:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
10003da4:	f7ff ffda 	bl	10003d5c <z_reset_time_slice>
	if (key != 0U) {
10003da8:	2c00      	cmp	r4, #0
10003daa:	d102      	bne.n	10003db2 <k_sched_time_slice_set+0x2e>
	__asm__ volatile(
10003dac:	b662      	cpsie	i
10003dae:	f3bf 8f6f 	isb	sy
	}
}
10003db2:	bd70      	pop	{r4, r5, r6, pc}
			slice_ticks = MAX(2, slice_ticks);
10003db4:	2b02      	cmp	r3, #2
10003db6:	daf1      	bge.n	10003d9c <k_sched_time_slice_set+0x18>
10003db8:	2302      	movs	r3, #2
10003dba:	e7ef      	b.n	10003d9c <k_sched_time_slice_set+0x18>
10003dbc:	20000484 	.word	0x20000484
10003dc0:	200004b8 	.word	0x200004b8
10003dc4:	200004b4 	.word	0x200004b4

10003dc8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
10003dc8:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10003dca:	2900      	cmp	r1, #0
10003dcc:	d10a      	bne.n	10003de4 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10003dce:	f3ef 8005 	mrs	r0, IPSR
	if (resched(key.key) && need_swap()) {
10003dd2:	2800      	cmp	r0, #0
10003dd4:	d107      	bne.n	10003de6 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
10003dd6:	4b06      	ldr	r3, [pc, #24]	; (10003df0 <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10003dd8:	699a      	ldr	r2, [r3, #24]
10003dda:	689b      	ldr	r3, [r3, #8]
10003ddc:	429a      	cmp	r2, r3
10003dde:	d002      	beq.n	10003de6 <z_reschedule+0x1e>
	ret = arch_swap(key);
10003de0:	f7fe fca2 	bl	10002728 <arch_swap>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
10003de4:	bd10      	pop	{r4, pc}
10003de6:	b662      	cpsie	i
10003de8:	f3bf 8f6f 	isb	sy
10003dec:	e7fa      	b.n	10003de4 <z_reschedule+0x1c>
10003dee:	46c0      	nop			; (mov r8, r8)
10003df0:	20000484 	.word	0x20000484

10003df4 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
10003df4:	f3ef 8110 	mrs	r1, PRIMASK
10003df8:	b672      	cpsid	i
	--_current->base.sched_locked;
10003dfa:	4b05      	ldr	r3, [pc, #20]	; (10003e10 <k_sched_lock+0x1c>)
10003dfc:	689a      	ldr	r2, [r3, #8]
10003dfe:	7bd3      	ldrb	r3, [r2, #15]
10003e00:	3b01      	subs	r3, #1
10003e02:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10003e04:	2900      	cmp	r1, #0
10003e06:	d102      	bne.n	10003e0e <k_sched_lock+0x1a>
	__asm__ volatile(
10003e08:	b662      	cpsie	i
10003e0a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
10003e0e:	4770      	bx	lr
10003e10:	20000484 	.word	0x20000484

10003e14 <update_cache>:
{
10003e14:	b570      	push	{r4, r5, r6, lr}
10003e16:	0006      	movs	r6, r0
	return _priq_run_best(curr_cpu_runq());
10003e18:	480d      	ldr	r0, [pc, #52]	; (10003e50 <update_cache+0x3c>)
10003e1a:	f001 fc7a 	bl	10005712 <z_priq_dumb_best>
10003e1e:	4d0d      	ldr	r5, [pc, #52]	; (10003e54 <update_cache+0x40>)
10003e20:	1e04      	subs	r4, r0, #0
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10003e22:	d100      	bne.n	10003e26 <update_cache+0x12>
10003e24:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
10003e26:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10003e28:	2e00      	cmp	r6, #0
10003e2a:	d10a      	bne.n	10003e42 <update_cache+0x2e>
	if (z_is_thread_prevented_from_running(_current)) {
10003e2c:	7b5a      	ldrb	r2, [r3, #13]
10003e2e:	06d2      	lsls	r2, r2, #27
10003e30:	d107      	bne.n	10003e42 <update_cache+0x2e>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
10003e32:	69a2      	ldr	r2, [r4, #24]
10003e34:	2a00      	cmp	r2, #0
10003e36:	d104      	bne.n	10003e42 <update_cache+0x2e>
	if (is_preempt(_current) || is_metairq(thread)) {
10003e38:	89da      	ldrh	r2, [r3, #14]
10003e3a:	2a7f      	cmp	r2, #127	; 0x7f
10003e3c:	d901      	bls.n	10003e42 <update_cache+0x2e>
		_kernel.ready_q.cache = _current;
10003e3e:	61ab      	str	r3, [r5, #24]
}
10003e40:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
10003e42:	429c      	cmp	r4, r3
10003e44:	d002      	beq.n	10003e4c <update_cache+0x38>
			z_reset_time_slice(thread);
10003e46:	0020      	movs	r0, r4
10003e48:	f7ff ff88 	bl	10003d5c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
10003e4c:	61ac      	str	r4, [r5, #24]
}
10003e4e:	e7f7      	b.n	10003e40 <update_cache+0x2c>
10003e50:	200004a0 	.word	0x200004a0
10003e54:	20000484 	.word	0x20000484

10003e58 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
10003e58:	220d      	movs	r2, #13
{
10003e5a:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
10003e5c:	5682      	ldrsb	r2, [r0, r2]
{
10003e5e:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10003e60:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10003e62:	2a00      	cmp	r2, #0
10003e64:	da04      	bge.n	10003e70 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003e66:	227f      	movs	r2, #127	; 0x7f
10003e68:	4013      	ands	r3, r2
10003e6a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
10003e6c:	f001 fc18 	bl	100056a0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10003e70:	2380      	movs	r3, #128	; 0x80
10003e72:	7b62      	ldrb	r2, [r4, #13]
10003e74:	425b      	negs	r3, r3
10003e76:	4313      	orrs	r3, r2
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
10003e78:	4a13      	ldr	r2, [pc, #76]	; (10003ec8 <move_thread_to_end_of_prio_q+0x70>)
10003e7a:	7363      	strb	r3, [r4, #13]
10003e7c:	69d3      	ldr	r3, [r2, #28]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003e7e:	4d13      	ldr	r5, [pc, #76]	; (10003ecc <move_thread_to_end_of_prio_q+0x74>)
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
10003e80:	6a10      	ldr	r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003e82:	42ab      	cmp	r3, r5
10003e84:	d01b      	beq.n	10003ebe <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003e86:	2b00      	cmp	r3, #0
10003e88:	d019      	beq.n	10003ebe <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
10003e8a:	260e      	movs	r6, #14
10003e8c:	57a6      	ldrsb	r6, [r4, r6]
	int32_t b2 = thread_2->base.prio;
10003e8e:	210e      	movs	r1, #14
10003e90:	5659      	ldrsb	r1, [r3, r1]
	if (b1 != b2) {
10003e92:	428e      	cmp	r6, r1
10003e94:	d00e      	beq.n	10003eb4 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
10003e96:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
10003e98:	2900      	cmp	r1, #0
10003e9a:	dd0b      	ble.n	10003eb4 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10003e9c:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
10003e9e:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10003ea0:	6061      	str	r1, [r4, #4]
	prev->next = node;
10003ea2:	600c      	str	r4, [r1, #0]
	successor->prev = node;
10003ea4:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
10003ea6:	6890      	ldr	r0, [r2, #8]
10003ea8:	1b00      	subs	r0, r0, r4
10003eaa:	4243      	negs	r3, r0
10003eac:	4158      	adcs	r0, r3
10003eae:	f7ff ffb1 	bl	10003e14 <update_cache>
}
10003eb2:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10003eb4:	4283      	cmp	r3, r0
10003eb6:	d002      	beq.n	10003ebe <move_thread_to_end_of_prio_q+0x66>
10003eb8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003eba:	2b00      	cmp	r3, #0
10003ebc:	d1e7      	bne.n	10003e8e <move_thread_to_end_of_prio_q+0x36>
	node->next = list;
10003ebe:	6025      	str	r5, [r4, #0]
	node->prev = tail;
10003ec0:	6060      	str	r0, [r4, #4]
	tail->next = node;
10003ec2:	6004      	str	r4, [r0, #0]
	list->tail = node;
10003ec4:	6214      	str	r4, [r2, #32]
}
10003ec6:	e7ee      	b.n	10003ea6 <move_thread_to_end_of_prio_q+0x4e>
10003ec8:	20000484 	.word	0x20000484
10003ecc:	200004a0 	.word	0x200004a0

10003ed0 <z_time_slice>:
{
10003ed0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003ed2:	f3ef 8510 	mrs	r5, PRIMASK
10003ed6:	b672      	cpsid	i
	if (pending_current == _current) {
10003ed8:	4b17      	ldr	r3, [pc, #92]	; (10003f38 <z_time_slice+0x68>)
10003eda:	4a18      	ldr	r2, [pc, #96]	; (10003f3c <z_time_slice+0x6c>)
10003edc:	689c      	ldr	r4, [r3, #8]
10003ede:	6811      	ldr	r1, [r2, #0]
10003ee0:	428c      	cmp	r4, r1
10003ee2:	d108      	bne.n	10003ef6 <z_time_slice+0x26>
	z_reset_time_slice(curr);
10003ee4:	0020      	movs	r0, r4
10003ee6:	f7ff ff39 	bl	10003d5c <z_reset_time_slice>
	if (key != 0U) {
10003eea:	2d00      	cmp	r5, #0
10003eec:	d102      	bne.n	10003ef4 <z_time_slice+0x24>
	__asm__ volatile(
10003eee:	b662      	cpsie	i
10003ef0:	f3bf 8f6f 	isb	sy
}
10003ef4:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
10003ef6:	2100      	movs	r1, #0
10003ef8:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
10003efa:	4a11      	ldr	r2, [pc, #68]	; (10003f40 <z_time_slice+0x70>)
	if (slice_time(_current) && sliceable(_current)) {
10003efc:	6812      	ldr	r2, [r2, #0]
10003efe:	428a      	cmp	r2, r1
10003f00:	d018      	beq.n	10003f34 <z_time_slice+0x64>
		&& !z_is_idle_thread_object(thread);
10003f02:	89e2      	ldrh	r2, [r4, #14]
10003f04:	2a7f      	cmp	r2, #127	; 0x7f
10003f06:	d815      	bhi.n	10003f34 <z_time_slice+0x64>
		&& !z_is_thread_prevented_from_running(thread)
10003f08:	7b62      	ldrb	r2, [r4, #13]
10003f0a:	06d2      	lsls	r2, r2, #27
10003f0c:	d112      	bne.n	10003f34 <z_time_slice+0x64>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10003f0e:	210e      	movs	r1, #14
10003f10:	4a0c      	ldr	r2, [pc, #48]	; (10003f44 <z_time_slice+0x74>)
10003f12:	5661      	ldrsb	r1, [r4, r1]
10003f14:	6812      	ldr	r2, [r2, #0]
10003f16:	4291      	cmp	r1, r2
10003f18:	db0c      	blt.n	10003f34 <z_time_slice+0x64>
	if (slice_time(_current) && sliceable(_current)) {
10003f1a:	4a0b      	ldr	r2, [pc, #44]	; (10003f48 <z_time_slice+0x78>)
10003f1c:	4294      	cmp	r4, r2
10003f1e:	d009      	beq.n	10003f34 <z_time_slice+0x64>
		if (ticks >= _current_cpu->slice_ticks) {
10003f20:	691a      	ldr	r2, [r3, #16]
10003f22:	4282      	cmp	r2, r0
10003f24:	dc03      	bgt.n	10003f2e <z_time_slice+0x5e>
		move_thread_to_end_of_prio_q(curr);
10003f26:	0020      	movs	r0, r4
10003f28:	f7ff ff96 	bl	10003e58 <move_thread_to_end_of_prio_q>
10003f2c:	e7da      	b.n	10003ee4 <z_time_slice+0x14>
			_current_cpu->slice_ticks -= ticks;
10003f2e:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
10003f30:	611a      	str	r2, [r3, #16]
10003f32:	e7da      	b.n	10003eea <z_time_slice+0x1a>
10003f34:	2200      	movs	r2, #0
10003f36:	e7fb      	b.n	10003f30 <z_time_slice+0x60>
10003f38:	20000484 	.word	0x20000484
10003f3c:	200004b0 	.word	0x200004b0
10003f40:	200004b8 	.word	0x200004b8
10003f44:	200004b4 	.word	0x200004b4
10003f48:	20000268 	.word	0x20000268

10003f4c <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10003f4c:	230d      	movs	r3, #13
{
10003f4e:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10003f50:	56c3      	ldrsb	r3, [r0, r3]
10003f52:	7b42      	ldrb	r2, [r0, #13]
10003f54:	2b00      	cmp	r3, #0
10003f56:	db20      	blt.n	10003f9a <ready_thread+0x4e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
10003f58:	06d3      	lsls	r3, r2, #27
10003f5a:	d11e      	bne.n	10003f9a <ready_thread+0x4e>
10003f5c:	6983      	ldr	r3, [r0, #24]
10003f5e:	2b00      	cmp	r3, #0
10003f60:	d11b      	bne.n	10003f9a <ready_thread+0x4e>
	thread->base.thread_state |= _THREAD_QUEUED;
10003f62:	3b80      	subs	r3, #128	; 0x80
	return list->head == list;
10003f64:	4912      	ldr	r1, [pc, #72]	; (10003fb0 <ready_thread+0x64>)
10003f66:	4313      	orrs	r3, r2
10003f68:	7343      	strb	r3, [r0, #13]
10003f6a:	69cb      	ldr	r3, [r1, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003f6c:	4d11      	ldr	r5, [pc, #68]	; (10003fb4 <ready_thread+0x68>)
	return (node == list->tail) ? NULL : node->next;
10003f6e:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003f70:	42ab      	cmp	r3, r5
10003f72:	d018      	beq.n	10003fa6 <ready_thread+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003f74:	2b00      	cmp	r3, #0
10003f76:	d016      	beq.n	10003fa6 <ready_thread+0x5a>
	int32_t b1 = thread_1->base.prio;
10003f78:	260e      	movs	r6, #14
10003f7a:	5786      	ldrsb	r6, [r0, r6]
	int32_t b2 = thread_2->base.prio;
10003f7c:	220e      	movs	r2, #14
10003f7e:	569a      	ldrsb	r2, [r3, r2]
	if (b1 != b2) {
10003f80:	4296      	cmp	r6, r2
10003f82:	d00b      	beq.n	10003f9c <ready_thread+0x50>
		return b2 - b1;
10003f84:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
10003f86:	2a00      	cmp	r2, #0
10003f88:	dd08      	ble.n	10003f9c <ready_thread+0x50>
	sys_dnode_t *const prev = successor->prev;
10003f8a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10003f8c:	6003      	str	r3, [r0, #0]
	node->prev = prev;
10003f8e:	6042      	str	r2, [r0, #4]
	prev->next = node;
10003f90:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10003f92:	6058      	str	r0, [r3, #4]
		update_cache(0);
10003f94:	2000      	movs	r0, #0
10003f96:	f7ff ff3d 	bl	10003e14 <update_cache>
}
10003f9a:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10003f9c:	42a3      	cmp	r3, r4
10003f9e:	d002      	beq.n	10003fa6 <ready_thread+0x5a>
10003fa0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003fa2:	2b00      	cmp	r3, #0
10003fa4:	d1ea      	bne.n	10003f7c <ready_thread+0x30>
	node->next = list;
10003fa6:	6005      	str	r5, [r0, #0]
	node->prev = tail;
10003fa8:	6044      	str	r4, [r0, #4]
	tail->next = node;
10003faa:	6020      	str	r0, [r4, #0]
	list->tail = node;
10003fac:	6208      	str	r0, [r1, #32]
}
10003fae:	e7f1      	b.n	10003f94 <ready_thread+0x48>
10003fb0:	20000484 	.word	0x20000484
10003fb4:	200004a0 	.word	0x200004a0

10003fb8 <z_sched_start>:
{
10003fb8:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003fba:	f3ef 8410 	mrs	r4, PRIMASK
10003fbe:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10003fc0:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10003fc2:	7b43      	ldrb	r3, [r0, #13]
10003fc4:	4213      	tst	r3, r2
10003fc6:	d105      	bne.n	10003fd4 <z_sched_start+0x1c>
	if (key != 0U) {
10003fc8:	2c00      	cmp	r4, #0
10003fca:	d102      	bne.n	10003fd2 <z_sched_start+0x1a>
	__asm__ volatile(
10003fcc:	b662      	cpsie	i
10003fce:	f3bf 8f6f 	isb	sy
}
10003fd2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10003fd4:	4393      	bics	r3, r2
10003fd6:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
10003fd8:	f7ff ffb8 	bl	10003f4c <ready_thread>
	z_reschedule(&sched_spinlock, key);
10003fdc:	0021      	movs	r1, r4
10003fde:	4802      	ldr	r0, [pc, #8]	; (10003fe8 <z_sched_start+0x30>)
10003fe0:	f7ff fef2 	bl	10003dc8 <z_reschedule>
10003fe4:	e7f5      	b.n	10003fd2 <z_sched_start+0x1a>
10003fe6:	46c0      	nop			; (mov r8, r8)
10003fe8:	200004c5 	.word	0x200004c5

10003fec <unready_thread>:
	if (z_is_thread_queued(thread)) {
10003fec:	220d      	movs	r2, #13
{
10003fee:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
10003ff0:	5682      	ldrsb	r2, [r0, r2]
{
10003ff2:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10003ff4:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10003ff6:	2a00      	cmp	r2, #0
10003ff8:	da04      	bge.n	10004004 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003ffa:	227f      	movs	r2, #127	; 0x7f
10003ffc:	4013      	ands	r3, r2
10003ffe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10004000:	f001 fb4e 	bl	100056a0 <sys_dlist_remove>
	update_cache(thread == _current);
10004004:	4b03      	ldr	r3, [pc, #12]	; (10004014 <unready_thread+0x28>)
10004006:	6898      	ldr	r0, [r3, #8]
10004008:	1b00      	subs	r0, r0, r4
1000400a:	4243      	negs	r3, r0
1000400c:	4158      	adcs	r0, r3
1000400e:	f7ff ff01 	bl	10003e14 <update_cache>
}
10004012:	bd10      	pop	{r4, pc}
10004014:	20000484 	.word	0x20000484

10004018 <pend>:
{
10004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000401a:	0004      	movs	r4, r0
1000401c:	0016      	movs	r6, r2
1000401e:	001d      	movs	r5, r3
	__asm__ volatile("mrs %0, PRIMASK;"
10004020:	f3ef 8710 	mrs	r7, PRIMASK
10004024:	b672      	cpsid	i
		add_to_waitq_locked(thread, wait_q);
10004026:	f001 fba2 	bl	1000576e <add_to_waitq_locked>
	if (key != 0U) {
1000402a:	2f00      	cmp	r7, #0
1000402c:	d102      	bne.n	10004034 <pend+0x1c>
	__asm__ volatile(
1000402e:	b662      	cpsie	i
10004030:	f3bf 8f6f 	isb	sy
	add_thread_timeout(thread, timeout);
10004034:	002b      	movs	r3, r5
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10004036:	1c72      	adds	r2, r6, #1
10004038:	d101      	bne.n	1000403e <pend+0x26>
1000403a:	3301      	adds	r3, #1
1000403c:	d006      	beq.n	1000404c <pend+0x34>
1000403e:	0020      	movs	r0, r4
10004040:	0032      	movs	r2, r6
10004042:	002b      	movs	r3, r5
10004044:	4902      	ldr	r1, [pc, #8]	; (10004050 <pend+0x38>)
10004046:	3018      	adds	r0, #24
10004048:	f000 f9ea 	bl	10004420 <z_add_timeout>
}
1000404c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000404e:	46c0      	nop			; (mov r8, r8)
10004050:	10005737 	.word	0x10005737

10004054 <z_pend_curr>:
{
10004054:	b510      	push	{r4, lr}
10004056:	000c      	movs	r4, r1
	pending_current = _current;
10004058:	4b06      	ldr	r3, [pc, #24]	; (10004074 <z_pend_curr+0x20>)
{
1000405a:	0011      	movs	r1, r2
	pending_current = _current;
1000405c:	6898      	ldr	r0, [r3, #8]
1000405e:	4b06      	ldr	r3, [pc, #24]	; (10004078 <z_pend_curr+0x24>)
10004060:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
10004062:	9a02      	ldr	r2, [sp, #8]
10004064:	9b03      	ldr	r3, [sp, #12]
10004066:	f7ff ffd7 	bl	10004018 <pend>
1000406a:	0020      	movs	r0, r4
1000406c:	f7fe fb5c 	bl	10002728 <arch_swap>
}
10004070:	bd10      	pop	{r4, pc}
10004072:	46c0      	nop			; (mov r8, r8)
10004074:	20000484 	.word	0x20000484
10004078:	200004b0 	.word	0x200004b0

1000407c <z_impl_k_thread_suspend>:
{
1000407c:	b570      	push	{r4, r5, r6, lr}
1000407e:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
10004080:	3018      	adds	r0, #24
10004082:	f001 fbe6 	bl	10005852 <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
10004086:	f3ef 8610 	mrs	r6, PRIMASK
1000408a:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
1000408c:	220d      	movs	r2, #13
1000408e:	56a2      	ldrsb	r2, [r4, r2]
10004090:	7b63      	ldrb	r3, [r4, #13]
10004092:	2a00      	cmp	r2, #0
10004094:	da05      	bge.n	100040a2 <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004096:	227f      	movs	r2, #127	; 0x7f
10004098:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
1000409a:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
1000409c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
1000409e:	f001 faff 	bl	100056a0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
100040a2:	2310      	movs	r3, #16
100040a4:	7b62      	ldrb	r2, [r4, #13]
		update_cache(thread == _current);
100040a6:	4d0a      	ldr	r5, [pc, #40]	; (100040d0 <z_impl_k_thread_suspend+0x54>)
100040a8:	4313      	orrs	r3, r2
100040aa:	7363      	strb	r3, [r4, #13]
100040ac:	68ab      	ldr	r3, [r5, #8]
100040ae:	1b18      	subs	r0, r3, r4
100040b0:	4243      	negs	r3, r0
100040b2:	4158      	adcs	r0, r3
100040b4:	f7ff feae 	bl	10003e14 <update_cache>
	if (key != 0U) {
100040b8:	2e00      	cmp	r6, #0
100040ba:	d102      	bne.n	100040c2 <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
100040bc:	b662      	cpsie	i
100040be:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
100040c2:	68ab      	ldr	r3, [r5, #8]
100040c4:	42a3      	cmp	r3, r4
100040c6:	d101      	bne.n	100040cc <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
100040c8:	f001 fb1c 	bl	10005704 <z_reschedule_unlocked>
}
100040cc:	bd70      	pop	{r4, r5, r6, pc}
100040ce:	46c0      	nop			; (mov r8, r8)
100040d0:	20000484 	.word	0x20000484

100040d4 <k_sched_unlock>:
{
100040d4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100040d6:	f3ef 8410 	mrs	r4, PRIMASK
100040da:	b672      	cpsid	i
		++_current->base.sched_locked;
100040dc:	4b07      	ldr	r3, [pc, #28]	; (100040fc <k_sched_unlock+0x28>)
		update_cache(0);
100040de:	2000      	movs	r0, #0
		++_current->base.sched_locked;
100040e0:	689a      	ldr	r2, [r3, #8]
100040e2:	7bd3      	ldrb	r3, [r2, #15]
100040e4:	3301      	adds	r3, #1
100040e6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
100040e8:	f7ff fe94 	bl	10003e14 <update_cache>
	if (key != 0U) {
100040ec:	2c00      	cmp	r4, #0
100040ee:	d102      	bne.n	100040f6 <k_sched_unlock+0x22>
	__asm__ volatile(
100040f0:	b662      	cpsie	i
100040f2:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
100040f6:	f001 fb05 	bl	10005704 <z_reschedule_unlocked>
}
100040fa:	bd10      	pop	{r4, pc}
100040fc:	20000484 	.word	0x20000484

10004100 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10004100:	2100      	movs	r1, #0
{
10004102:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
10004104:	4b03      	ldr	r3, [pc, #12]	; (10004114 <z_sched_init+0x14>)
10004106:	4a04      	ldr	r2, [pc, #16]	; (10004118 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10004108:	0008      	movs	r0, r1
1000410a:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
1000410c:	621a      	str	r2, [r3, #32]
1000410e:	f7ff fe39 	bl	10003d84 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
10004112:	bd10      	pop	{r4, pc}
10004114:	20000484 	.word	0x20000484
10004118:	200004a0 	.word	0x200004a0

1000411c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
1000411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000411e:	f3ef 8510 	mrs	r5, PRIMASK
10004122:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
10004124:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
10004126:	4c1a      	ldr	r4, [pc, #104]	; (10004190 <z_impl_k_yield+0x74>)
10004128:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
1000412a:	7b43      	ldrb	r3, [r0, #13]
1000412c:	4013      	ands	r3, r2
1000412e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10004130:	f001 fab6 	bl	100056a0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10004134:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
10004136:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10004138:	4252      	negs	r2, r2
1000413a:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000413c:	4815      	ldr	r0, [pc, #84]	; (10004194 <z_impl_k_yield+0x78>)
1000413e:	430a      	orrs	r2, r1
10004140:	735a      	strb	r2, [r3, #13]
	return list->head == list;
10004142:	69e2      	ldr	r2, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004144:	4282      	cmp	r2, r0
10004146:	d01c      	beq.n	10004182 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10004148:	2a00      	cmp	r2, #0
1000414a:	d01a      	beq.n	10004182 <z_impl_k_yield+0x66>
	int32_t b1 = thread_1->base.prio;
1000414c:	260e      	movs	r6, #14
	return (node == list->tail) ? NULL : node->next;
1000414e:	6a27      	ldr	r7, [r4, #32]
10004150:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
10004152:	210e      	movs	r1, #14
10004154:	5651      	ldrsb	r1, [r2, r1]
	if (b1 != b2) {
10004156:	428e      	cmp	r6, r1
10004158:	d00e      	beq.n	10004178 <z_impl_k_yield+0x5c>
		return b2 - b1;
1000415a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
1000415c:	2900      	cmp	r1, #0
1000415e:	dd0b      	ble.n	10004178 <z_impl_k_yield+0x5c>
	sys_dnode_t *const prev = successor->prev;
10004160:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
10004162:	601a      	str	r2, [r3, #0]
	node->prev = prev;
10004164:	6059      	str	r1, [r3, #4]
	prev->next = node;
10004166:	600b      	str	r3, [r1, #0]
	successor->prev = node;
10004168:	6053      	str	r3, [r2, #4]
	update_cache(1);
1000416a:	2001      	movs	r0, #1
1000416c:	f7ff fe52 	bl	10003e14 <update_cache>
10004170:	0028      	movs	r0, r5
10004172:	f7fe fad9 	bl	10002728 <arch_swap>
	z_swap(&sched_spinlock, key);
}
10004176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
10004178:	42ba      	cmp	r2, r7
1000417a:	d002      	beq.n	10004182 <z_impl_k_yield+0x66>
1000417c:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
1000417e:	2a00      	cmp	r2, #0
10004180:	d1e7      	bne.n	10004152 <z_impl_k_yield+0x36>
	sys_dnode_t *const tail = list->tail;
10004182:	6a22      	ldr	r2, [r4, #32]
	node->next = list;
10004184:	6018      	str	r0, [r3, #0]
	node->prev = tail;
10004186:	605a      	str	r2, [r3, #4]
	tail->next = node;
10004188:	6013      	str	r3, [r2, #0]
	list->tail = node;
1000418a:	6223      	str	r3, [r4, #32]
}
1000418c:	e7ed      	b.n	1000416a <z_impl_k_yield+0x4e>
1000418e:	46c0      	nop			; (mov r8, r8)
10004190:	20000484 	.word	0x20000484
10004194:	200004a0 	.word	0x200004a0

10004198 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
10004198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
1000419a:	0006      	movs	r6, r0
{
1000419c:	0004      	movs	r4, r0
1000419e:	000d      	movs	r5, r1
	if (ticks == 0) {
100041a0:	430e      	orrs	r6, r1
100041a2:	d103      	bne.n	100041ac <z_tick_sleep+0x14>
	z_impl_k_yield();
100041a4:	f7ff ffba 	bl	1000411c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
100041a8:	2000      	movs	r0, #0
100041aa:	e034      	b.n	10004216 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
100041ac:	2202      	movs	r2, #2
100041ae:	4252      	negs	r2, r2
100041b0:	17d3      	asrs	r3, r2, #31
100041b2:	1b12      	subs	r2, r2, r4
100041b4:	41ab      	sbcs	r3, r5
100041b6:	2b00      	cmp	r3, #0
100041b8:	dc2e      	bgt.n	10004218 <z_tick_sleep+0x80>
100041ba:	d101      	bne.n	100041c0 <z_tick_sleep+0x28>
100041bc:	2a00      	cmp	r2, #0
100041be:	d12b      	bne.n	10004218 <z_tick_sleep+0x80>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
100041c0:	f001 fb70 	bl	100058a4 <sys_clock_tick_get_32>
100041c4:	1903      	adds	r3, r0, r4
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
100041c6:	9301      	str	r3, [sp, #4]
100041c8:	f3ef 8710 	mrs	r7, PRIMASK
100041cc:	b672      	cpsid	i
	pending_current = _current;
100041ce:	4e14      	ldr	r6, [pc, #80]	; (10004220 <z_tick_sleep+0x88>)
100041d0:	4b14      	ldr	r3, [pc, #80]	; (10004224 <z_tick_sleep+0x8c>)
100041d2:	68b2      	ldr	r2, [r6, #8]
	unready_thread(_current);
100041d4:	0010      	movs	r0, r2
	pending_current = _current;
100041d6:	601a      	str	r2, [r3, #0]
	unready_thread(_current);
100041d8:	f7ff ff08 	bl	10003fec <unready_thread>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
100041dc:	68b0      	ldr	r0, [r6, #8]
100041de:	0022      	movs	r2, r4
100041e0:	002b      	movs	r3, r5
100041e2:	4911      	ldr	r1, [pc, #68]	; (10004228 <z_tick_sleep+0x90>)
100041e4:	3018      	adds	r0, #24
100041e6:	f000 f91b 	bl	10004420 <z_add_timeout>
100041ea:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
100041ec:	68b2      	ldr	r2, [r6, #8]
100041ee:	0038      	movs	r0, r7
100041f0:	7b51      	ldrb	r1, [r2, #13]
100041f2:	430b      	orrs	r3, r1
100041f4:	7353      	strb	r3, [r2, #13]
100041f6:	f7fe fa97 	bl	10002728 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
100041fa:	f001 fb53 	bl	100058a4 <sys_clock_tick_get_32>
100041fe:	2300      	movs	r3, #0
10004200:	0004      	movs	r4, r0
10004202:	001d      	movs	r5, r3
10004204:	9a01      	ldr	r2, [sp, #4]
10004206:	1b12      	subs	r2, r2, r4
10004208:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
1000420a:	42ab      	cmp	r3, r5
1000420c:	dc02      	bgt.n	10004214 <z_tick_sleep+0x7c>
1000420e:	d1cb      	bne.n	100041a8 <z_tick_sleep+0x10>
10004210:	42aa      	cmp	r2, r5
10004212:	d0c9      	beq.n	100041a8 <z_tick_sleep+0x10>
		return ticks;
10004214:	0010      	movs	r0, r2
}
10004216:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10004218:	2002      	movs	r0, #2
1000421a:	4240      	negs	r0, r0
1000421c:	1b03      	subs	r3, r0, r4
1000421e:	e7d2      	b.n	100041c6 <z_tick_sleep+0x2e>
10004220:	20000484 	.word	0x20000484
10004224:	200004b0 	.word	0x200004b0
10004228:	10005737 	.word	0x10005737

1000422c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
1000422c:	b510      	push	{r4, lr}
1000422e:	000b      	movs	r3, r1
10004230:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10004232:	1c42      	adds	r2, r0, #1
10004234:	d107      	bne.n	10004246 <z_impl_k_sleep+0x1a>
10004236:	3301      	adds	r3, #1
10004238:	d105      	bne.n	10004246 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
1000423a:	4b07      	ldr	r3, [pc, #28]	; (10004258 <z_impl_k_sleep+0x2c>)
1000423c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
1000423e:	f7ff ff1d 	bl	1000407c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
10004242:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
10004244:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
10004246:	0021      	movs	r1, r4
10004248:	f7ff ffa6 	bl	10004198 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
1000424c:	220a      	movs	r2, #10
1000424e:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
10004250:	17c1      	asrs	r1, r0, #31
10004252:	f7fc f86b 	bl	1000032c <__aeabi_uldivmod>
	return ret;
10004256:	e7f5      	b.n	10004244 <z_impl_k_sleep+0x18>
10004258:	20000484 	.word	0x20000484

1000425c <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
1000425c:	4b01      	ldr	r3, [pc, #4]	; (10004264 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
1000425e:	6898      	ldr	r0, [r3, #8]
}
10004260:	4770      	bx	lr
10004262:	46c0      	nop			; (mov r8, r8)
10004264:	20000484 	.word	0x20000484

10004268 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10004268:	b570      	push	{r4, r5, r6, lr}
1000426a:	0004      	movs	r4, r0
1000426c:	f3ef 8610 	mrs	r6, PRIMASK
10004270:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
10004272:	7b03      	ldrb	r3, [r0, #12]
10004274:	07db      	lsls	r3, r3, #31
10004276:	d508      	bpl.n	1000428a <z_thread_abort+0x22>
	if (key != 0U) {
10004278:	2e00      	cmp	r6, #0
1000427a:	d102      	bne.n	10004282 <z_thread_abort+0x1a>
	__asm__ volatile(
1000427c:	b662      	cpsie	i
1000427e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
10004282:	2004      	movs	r0, #4
10004284:	b662      	cpsie	i
10004286:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10004288:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
1000428a:	2308      	movs	r3, #8
1000428c:	7b42      	ldrb	r2, [r0, #13]
1000428e:	421a      	tst	r2, r3
10004290:	d005      	beq.n	1000429e <z_thread_abort+0x36>
	if (key != 0U) {
10004292:	2e00      	cmp	r6, #0
10004294:	d1f8      	bne.n	10004288 <z_thread_abort+0x20>
	__asm__ volatile(
10004296:	b662      	cpsie	i
10004298:	f3bf 8f6f 	isb	sy
1000429c:	e7f4      	b.n	10004288 <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
1000429e:	2120      	movs	r1, #32
100042a0:	0010      	movs	r0, r2
100042a2:	4388      	bics	r0, r1
100042a4:	0001      	movs	r1, r0
100042a6:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
100042a8:	b248      	sxtb	r0, r1
100042aa:	2800      	cmp	r0, #0
100042ac:	db20      	blt.n	100042f0 <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
100042ae:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
100042b0:	68a3      	ldr	r3, [r4, #8]
100042b2:	2b00      	cmp	r3, #0
100042b4:	d002      	beq.n	100042bc <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
100042b6:	0020      	movs	r0, r4
100042b8:	f001 f9fa 	bl	100056b0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
100042bc:	0020      	movs	r0, r4
100042be:	3018      	adds	r0, #24
100042c0:	f001 fac7 	bl	10005852 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
100042c4:	0023      	movs	r3, r4
	return list->head == list;
100042c6:	6da5      	ldr	r5, [r4, #88]	; 0x58
100042c8:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
100042ca:	429d      	cmp	r5, r3
100042cc:	d001      	beq.n	100042d2 <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
100042ce:	2d00      	cmp	r5, #0
100042d0:	d116      	bne.n	10004300 <z_thread_abort+0x98>
		update_cache(1);
100042d2:	2001      	movs	r0, #1
100042d4:	f7ff fd9e 	bl	10003e14 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
100042d8:	4b10      	ldr	r3, [pc, #64]	; (1000431c <z_thread_abort+0xb4>)
100042da:	689b      	ldr	r3, [r3, #8]
100042dc:	42a3      	cmp	r3, r4
100042de:	d1d8      	bne.n	10004292 <z_thread_abort+0x2a>
100042e0:	f3ef 8305 	mrs	r3, IPSR
100042e4:	2b00      	cmp	r3, #0
100042e6:	d1d4      	bne.n	10004292 <z_thread_abort+0x2a>
100042e8:	0030      	movs	r0, r6
100042ea:	f7fe fa1d 	bl	10002728 <arch_swap>
	return ret;
100042ee:	e7d0      	b.n	10004292 <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100042f0:	215f      	movs	r1, #95	; 0x5f
100042f2:	400a      	ands	r2, r1
100042f4:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
100042f6:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
100042f8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
100042fa:	f001 f9d1 	bl	100056a0 <sys_dlist_remove>
}
100042fe:	e7d7      	b.n	100042b0 <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
10004300:	0028      	movs	r0, r5
10004302:	f001 f9d5 	bl	100056b0 <unpend_thread_no_timeout>
10004306:	0028      	movs	r0, r5
10004308:	3018      	adds	r0, #24
1000430a:	f001 faa2 	bl	10005852 <z_abort_timeout>
1000430e:	2300      	movs	r3, #0
		ready_thread(thread);
10004310:	0028      	movs	r0, r5
10004312:	66eb      	str	r3, [r5, #108]	; 0x6c
10004314:	f7ff fe1a 	bl	10003f4c <ready_thread>
10004318:	e7d4      	b.n	100042c4 <z_thread_abort+0x5c>
1000431a:	46c0      	nop			; (mov r8, r8)
1000431c:	20000484 	.word	0x20000484

10004320 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
10004320:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
10004322:	9d06      	ldr	r5, [sp, #24]
10004324:	9e07      	ldr	r6, [sp, #28]
{
10004326:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
10004328:	9500      	str	r5, [sp, #0]
1000432a:	9601      	str	r6, [sp, #4]
1000432c:	f7ff fe92 	bl	10004054 <z_pend_curr>

	if (data != NULL) {
10004330:	2c00      	cmp	r4, #0
10004332:	d003      	beq.n	1000433c <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
10004334:	4b02      	ldr	r3, [pc, #8]	; (10004340 <z_sched_wait+0x20>)
10004336:	689b      	ldr	r3, [r3, #8]
10004338:	695b      	ldr	r3, [r3, #20]
1000433a:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
1000433c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000433e:	46c0      	nop			; (mov r8, r8)
10004340:	20000484 	.word	0x20000484

10004344 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
10004344:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
10004346:	4806      	ldr	r0, [pc, #24]	; (10004360 <z_data_copy+0x1c>)
10004348:	4a06      	ldr	r2, [pc, #24]	; (10004364 <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
1000434a:	4907      	ldr	r1, [pc, #28]	; (10004368 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
1000434c:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
1000434e:	f001 f93b 	bl	100055c8 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
10004352:	4a06      	ldr	r2, [pc, #24]	; (1000436c <z_data_copy+0x28>)
10004354:	4906      	ldr	r1, [pc, #24]	; (10004370 <z_data_copy+0x2c>)
10004356:	4807      	ldr	r0, [pc, #28]	; (10004374 <z_data_copy+0x30>)
10004358:	f001 f936 	bl	100055c8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
1000435c:	bd10      	pop	{r4, pc}
1000435e:	46c0      	nop			; (mov r8, r8)
10004360:	20000000 	.word	0x20000000
10004364:	20000264 	.word	0x20000264
10004368:	10005e6c 	.word	0x10005e6c
1000436c:	00000000 	.word	0x00000000
10004370:	10005e6c 	.word	0x10005e6c
10004374:	20000000 	.word	0x20000000

10004378 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10004378:	2000      	movs	r0, #0
1000437a:	4b04      	ldr	r3, [pc, #16]	; (1000438c <elapsed+0x14>)
{
1000437c:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
1000437e:	681b      	ldr	r3, [r3, #0]
10004380:	4283      	cmp	r3, r0
10004382:	d101      	bne.n	10004388 <elapsed+0x10>
10004384:	f7fe fecc 	bl	10003120 <sys_clock_elapsed>
}
10004388:	bd10      	pop	{r4, pc}
1000438a:	46c0      	nop			; (mov r8, r8)
1000438c:	200004bc 	.word	0x200004bc

10004390 <next_timeout>:
	return list->head == list;
10004390:	4b12      	ldr	r3, [pc, #72]	; (100043dc <next_timeout+0x4c>)

static int32_t next_timeout(void)
{
10004392:	b510      	push	{r4, lr}
10004394:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004396:	429c      	cmp	r4, r3
10004398:	d100      	bne.n	1000439c <next_timeout+0xc>
1000439a:	2400      	movs	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
1000439c:	f7ff ffec 	bl	10004378 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
100043a0:	2c00      	cmp	r4, #0
100043a2:	d019      	beq.n	100043d8 <next_timeout+0x48>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
100043a4:	0002      	movs	r2, r0
100043a6:	17c3      	asrs	r3, r0, #31
100043a8:	6920      	ldr	r0, [r4, #16]
100043aa:	6961      	ldr	r1, [r4, #20]
100043ac:	1a80      	subs	r0, r0, r2
100043ae:	4199      	sbcs	r1, r3
100043b0:	0002      	movs	r2, r0
100043b2:	1e0b      	subs	r3, r1, #0
	if ((to == NULL) ||
100043b4:	dc10      	bgt.n	100043d8 <next_timeout+0x48>
100043b6:	2900      	cmp	r1, #0
100043b8:	d103      	bne.n	100043c2 <next_timeout+0x32>
100043ba:	2180      	movs	r1, #128	; 0x80
100043bc:	0609      	lsls	r1, r1, #24
100043be:	428a      	cmp	r2, r1
100043c0:	d20a      	bcs.n	100043d8 <next_timeout+0x48>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
100043c2:	43d8      	mvns	r0, r3
100043c4:	17c0      	asrs	r0, r0, #31
100043c6:	4010      	ands	r0, r2
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
100043c8:	4b05      	ldr	r3, [pc, #20]	; (100043e0 <next_timeout+0x50>)
100043ca:	691b      	ldr	r3, [r3, #16]
100043cc:	2b00      	cmp	r3, #0
100043ce:	d002      	beq.n	100043d6 <next_timeout+0x46>
100043d0:	4298      	cmp	r0, r3
100043d2:	dd00      	ble.n	100043d6 <next_timeout+0x46>
100043d4:	0018      	movs	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
100043d6:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
100043d8:	4802      	ldr	r0, [pc, #8]	; (100043e4 <next_timeout+0x54>)
100043da:	e7f5      	b.n	100043c8 <next_timeout+0x38>
100043dc:	200001e8 	.word	0x200001e8
100043e0:	20000484 	.word	0x20000484
100043e4:	7fffffff 	.word	0x7fffffff

100043e8 <remove_timeout>:
{
100043e8:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
100043ea:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
100043ec:	2800      	cmp	r0, #0
100043ee:	d00d      	beq.n	1000440c <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
100043f0:	4a0a      	ldr	r2, [pc, #40]	; (1000441c <remove_timeout+0x34>)
100043f2:	6852      	ldr	r2, [r2, #4]
100043f4:	4290      	cmp	r0, r2
100043f6:	d009      	beq.n	1000440c <remove_timeout+0x24>
	if (next(t) != NULL) {
100043f8:	2b00      	cmp	r3, #0
100043fa:	d007      	beq.n	1000440c <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
100043fc:	691c      	ldr	r4, [r3, #16]
100043fe:	695d      	ldr	r5, [r3, #20]
10004400:	6901      	ldr	r1, [r0, #16]
10004402:	6942      	ldr	r2, [r0, #20]
10004404:	1864      	adds	r4, r4, r1
10004406:	4155      	adcs	r5, r2
10004408:	611c      	str	r4, [r3, #16]
1000440a:	615d      	str	r5, [r3, #20]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
1000440c:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
1000440e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10004410:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10004412:	2300      	movs	r3, #0
10004414:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10004416:	6043      	str	r3, [r0, #4]
}
10004418:	bd30      	pop	{r4, r5, pc}
1000441a:	46c0      	nop			; (mov r8, r8)
1000441c:	200001e8 	.word	0x200001e8

10004420 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
10004420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004422:	0004      	movs	r4, r0
10004424:	0016      	movs	r6, r2
10004426:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10004428:	1c53      	adds	r3, r2, #1
1000442a:	d101      	bne.n	10004430 <z_add_timeout+0x10>
1000442c:	1c7b      	adds	r3, r7, #1
1000442e:	d067      	beq.n	10004500 <z_add_timeout+0xe0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
10004430:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
10004432:	f3ef 8310 	mrs	r3, PRIMASK
10004436:	b672      	cpsid	i

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
10004438:	2002      	movs	r0, #2
1000443a:	4240      	negs	r0, r0
1000443c:	17c1      	asrs	r1, r0, #31
1000443e:	9301      	str	r3, [sp, #4]
10004440:	0002      	movs	r2, r0
10004442:	000b      	movs	r3, r1
10004444:	1b92      	subs	r2, r2, r6
10004446:	41bb      	sbcs	r3, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
10004448:	2b00      	cmp	r3, #0
1000444a:	db1b      	blt.n	10004484 <z_add_timeout+0x64>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
1000444c:	4b2d      	ldr	r3, [pc, #180]	; (10004504 <z_add_timeout+0xe4>)
1000444e:	681a      	ldr	r2, [r3, #0]
10004450:	685b      	ldr	r3, [r3, #4]
10004452:	1a80      	subs	r0, r0, r2
10004454:	4199      	sbcs	r1, r3
10004456:	1b80      	subs	r0, r0, r6
10004458:	41b9      	sbcs	r1, r7

			to->dticks = MAX(1, ticks);
1000445a:	0002      	movs	r2, r0
1000445c:	1e0b      	subs	r3, r1, #0
1000445e:	dc05      	bgt.n	1000446c <z_add_timeout+0x4c>
10004460:	2900      	cmp	r1, #0
10004462:	d101      	bne.n	10004468 <z_add_timeout+0x48>
10004464:	2800      	cmp	r0, #0
10004466:	d101      	bne.n	1000446c <z_add_timeout+0x4c>
10004468:	2201      	movs	r2, #1
1000446a:	2300      	movs	r3, #0
1000446c:	6122      	str	r2, [r4, #16]
1000446e:	6163      	str	r3, [r4, #20]
	return list->head == list;
10004470:	4f25      	ldr	r7, [pc, #148]	; (10004508 <z_add_timeout+0xe8>)
10004472:	683d      	ldr	r5, [r7, #0]
	sys_dnode_t *const tail = list->tail;
10004474:	687e      	ldr	r6, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004476:	42bd      	cmp	r5, r7
10004478:	d118      	bne.n	100044ac <z_add_timeout+0x8c>
	node->next = list;
1000447a:	6027      	str	r7, [r4, #0]
	node->prev = tail;
1000447c:	6066      	str	r6, [r4, #4]
	tail->next = node;
1000447e:	6034      	str	r4, [r6, #0]
	list->tail = node;
10004480:	607c      	str	r4, [r7, #4]
}
10004482:	e027      	b.n	100044d4 <z_add_timeout+0xb4>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
10004484:	f7ff ff78 	bl	10004378 <elapsed>
10004488:	2201      	movs	r2, #1
1000448a:	2300      	movs	r3, #0
1000448c:	18b6      	adds	r6, r6, r2
1000448e:	415f      	adcs	r7, r3
10004490:	0002      	movs	r2, r0
10004492:	17c3      	asrs	r3, r0, #31
10004494:	18b6      	adds	r6, r6, r2
10004496:	415f      	adcs	r7, r3
10004498:	6126      	str	r6, [r4, #16]
1000449a:	6167      	str	r7, [r4, #20]
1000449c:	e7e8      	b.n	10004470 <z_add_timeout+0x50>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
1000449e:	1a12      	subs	r2, r2, r0
100044a0:	418b      	sbcs	r3, r1
100044a2:	6122      	str	r2, [r4, #16]
100044a4:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
100044a6:	42ae      	cmp	r6, r5
100044a8:	d0e7      	beq.n	1000447a <z_add_timeout+0x5a>
100044aa:	682d      	ldr	r5, [r5, #0]
		for (t = first(); t != NULL; t = next(t)) {
100044ac:	2d00      	cmp	r5, #0
100044ae:	d0e4      	beq.n	1000447a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
100044b0:	6928      	ldr	r0, [r5, #16]
100044b2:	6969      	ldr	r1, [r5, #20]
100044b4:	6922      	ldr	r2, [r4, #16]
100044b6:	6963      	ldr	r3, [r4, #20]
100044b8:	4299      	cmp	r1, r3
100044ba:	dc02      	bgt.n	100044c2 <z_add_timeout+0xa2>
100044bc:	d1ef      	bne.n	1000449e <z_add_timeout+0x7e>
100044be:	4290      	cmp	r0, r2
100044c0:	d9ed      	bls.n	1000449e <z_add_timeout+0x7e>
				t->dticks -= to->dticks;
100044c2:	1a80      	subs	r0, r0, r2
100044c4:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
100044c6:	686b      	ldr	r3, [r5, #4]
100044c8:	6128      	str	r0, [r5, #16]
100044ca:	6169      	str	r1, [r5, #20]
	node->prev = prev;
100044cc:	6063      	str	r3, [r4, #4]
	node->next = successor;
100044ce:	6025      	str	r5, [r4, #0]
	prev->next = node;
100044d0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
100044d2:	606c      	str	r4, [r5, #4]
	return list->head == list;
100044d4:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100044d6:	42bb      	cmp	r3, r7
100044d8:	d00c      	beq.n	100044f4 <z_add_timeout+0xd4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
100044da:	429c      	cmp	r4, r3
100044dc:	d10a      	bne.n	100044f4 <z_add_timeout+0xd4>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
100044de:	f7ff ff57 	bl	10004390 <next_timeout>

			if (next_time == 0 ||
100044e2:	2800      	cmp	r0, #0
100044e4:	d003      	beq.n	100044ee <z_add_timeout+0xce>
			    _current_cpu->slice_ticks != next_time) {
100044e6:	4b09      	ldr	r3, [pc, #36]	; (1000450c <z_add_timeout+0xec>)
			if (next_time == 0 ||
100044e8:	691b      	ldr	r3, [r3, #16]
100044ea:	4283      	cmp	r3, r0
100044ec:	d002      	beq.n	100044f4 <z_add_timeout+0xd4>
				sys_clock_set_timeout(next_time, false);
100044ee:	2100      	movs	r1, #0
100044f0:	f7fe fd98 	bl	10003024 <sys_clock_set_timeout>
	if (key != 0U) {
100044f4:	9b01      	ldr	r3, [sp, #4]
100044f6:	2b00      	cmp	r3, #0
100044f8:	d102      	bne.n	10004500 <z_add_timeout+0xe0>
	__asm__ volatile(
100044fa:	b662      	cpsie	i
100044fc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
10004500:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10004502:	46c0      	nop			; (mov r8, r8)
10004504:	20000348 	.word	0x20000348
10004508:	200001e8 	.word	0x200001e8
1000450c:	20000484 	.word	0x20000484

10004510 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
10004510:	b5f0      	push	{r4, r5, r6, r7, lr}
10004512:	b08b      	sub	sp, #44	; 0x2c
10004514:	0004      	movs	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
10004516:	f7ff fcdb 	bl	10003ed0 <z_time_slice>
	__asm__ volatile("mrs %0, PRIMASK;"
1000451a:	f3ef 8310 	mrs	r3, PRIMASK
1000451e:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
10004520:	9305      	str	r3, [sp, #20]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
10004522:	4b32      	ldr	r3, [pc, #200]	; (100045ec <sys_clock_announce+0xdc>)
10004524:	601c      	str	r4, [r3, #0]
	return list->head == list;
10004526:	4b32      	ldr	r3, [pc, #200]	; (100045f0 <sys_clock_announce+0xe0>)

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
10004528:	4832      	ldr	r0, [pc, #200]	; (100045f4 <sys_clock_announce+0xe4>)
	while (first() != NULL && first()->dticks <= announce_remaining) {
1000452a:	4d30      	ldr	r5, [pc, #192]	; (100045ec <sys_clock_announce+0xdc>)
1000452c:	681c      	ldr	r4, [r3, #0]
		curr_tick += dt;
1000452e:	6801      	ldr	r1, [r0, #0]
10004530:	6842      	ldr	r2, [r0, #4]
10004532:	9106      	str	r1, [sp, #24]
10004534:	9207      	str	r2, [sp, #28]
	while (first() != NULL && first()->dticks <= announce_remaining) {
10004536:	6829      	ldr	r1, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004538:	429c      	cmp	r4, r3
1000453a:	d019      	beq.n	10004570 <sys_clock_announce+0x60>
1000453c:	2c00      	cmp	r4, #0
1000453e:	d017      	beq.n	10004570 <sys_clock_announce+0x60>
10004540:	6922      	ldr	r2, [r4, #16]
10004542:	6963      	ldr	r3, [r4, #20]
10004544:	9200      	str	r2, [sp, #0]
10004546:	9301      	str	r3, [sp, #4]
10004548:	9a01      	ldr	r2, [sp, #4]
1000454a:	17cb      	asrs	r3, r1, #31
1000454c:	9102      	str	r1, [sp, #8]
1000454e:	9303      	str	r3, [sp, #12]
10004550:	429a      	cmp	r2, r3
10004552:	dc03      	bgt.n	1000455c <sys_clock_announce+0x4c>
10004554:	d123      	bne.n	1000459e <sys_clock_announce+0x8e>
10004556:	9a00      	ldr	r2, [sp, #0]
10004558:	428a      	cmp	r2, r1
1000455a:	d920      	bls.n	1000459e <sys_clock_announce+0x8e>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
1000455c:	9a02      	ldr	r2, [sp, #8]
1000455e:	9b03      	ldr	r3, [sp, #12]
10004560:	9e00      	ldr	r6, [sp, #0]
10004562:	9f01      	ldr	r7, [sp, #4]
10004564:	1ab6      	subs	r6, r6, r2
10004566:	419f      	sbcs	r7, r3
10004568:	0032      	movs	r2, r6
1000456a:	003b      	movs	r3, r7
1000456c:	6122      	str	r2, [r4, #16]
1000456e:	6163      	str	r3, [r4, #20]
	}

	curr_tick += announce_remaining;
10004570:	9e06      	ldr	r6, [sp, #24]
10004572:	9f07      	ldr	r7, [sp, #28]
10004574:	000a      	movs	r2, r1
10004576:	17cb      	asrs	r3, r1, #31
10004578:	18b6      	adds	r6, r6, r2
1000457a:	415f      	adcs	r7, r3
	announce_remaining = 0;
1000457c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
1000457e:	6006      	str	r6, [r0, #0]
10004580:	6047      	str	r7, [r0, #4]
	announce_remaining = 0;
10004582:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
10004584:	f7ff ff04 	bl	10004390 <next_timeout>
10004588:	0021      	movs	r1, r4
1000458a:	f7fe fd4b 	bl	10003024 <sys_clock_set_timeout>
	if (key != 0U) {
1000458e:	9b05      	ldr	r3, [sp, #20]
10004590:	42a3      	cmp	r3, r4
10004592:	d102      	bne.n	1000459a <sys_clock_announce+0x8a>
	__asm__ volatile(
10004594:	b662      	cpsie	i
10004596:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
1000459a:	b00b      	add	sp, #44	; 0x2c
1000459c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curr_tick += dt;
1000459e:	9b00      	ldr	r3, [sp, #0]
100045a0:	9e06      	ldr	r6, [sp, #24]
100045a2:	9f07      	ldr	r7, [sp, #28]
100045a4:	9308      	str	r3, [sp, #32]
100045a6:	17db      	asrs	r3, r3, #31
100045a8:	9309      	str	r3, [sp, #36]	; 0x24
100045aa:	9a08      	ldr	r2, [sp, #32]
100045ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
100045ae:	18b6      	adds	r6, r6, r2
100045b0:	415f      	adcs	r7, r3
100045b2:	4b10      	ldr	r3, [pc, #64]	; (100045f4 <sys_clock_announce+0xe4>)
		remove_timeout(t);
100045b4:	0020      	movs	r0, r4
		curr_tick += dt;
100045b6:	601e      	str	r6, [r3, #0]
100045b8:	605f      	str	r7, [r3, #4]
		announce_remaining -= dt;
100045ba:	9b00      	ldr	r3, [sp, #0]
100045bc:	1aca      	subs	r2, r1, r3
100045be:	4b0b      	ldr	r3, [pc, #44]	; (100045ec <sys_clock_announce+0xdc>)
100045c0:	601a      	str	r2, [r3, #0]
		t->dticks = 0;
100045c2:	2300      	movs	r3, #0
100045c4:	2200      	movs	r2, #0
100045c6:	6122      	str	r2, [r4, #16]
100045c8:	6163      	str	r3, [r4, #20]
		remove_timeout(t);
100045ca:	f7ff ff0d 	bl	100043e8 <remove_timeout>
	if (key != 0U) {
100045ce:	9b05      	ldr	r3, [sp, #20]
100045d0:	2b00      	cmp	r3, #0
100045d2:	d102      	bne.n	100045da <sys_clock_announce+0xca>
	__asm__ volatile(
100045d4:	b662      	cpsie	i
100045d6:	f3bf 8f6f 	isb	sy
		t->fn(t);
100045da:	0020      	movs	r0, r4
100045dc:	68a3      	ldr	r3, [r4, #8]
100045de:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
100045e0:	f3ef 8310 	mrs	r3, PRIMASK
100045e4:	b672      	cpsid	i
100045e6:	9305      	str	r3, [sp, #20]
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
100045e8:	e79d      	b.n	10004526 <sys_clock_announce+0x16>
100045ea:	46c0      	nop			; (mov r8, r8)
100045ec:	200004bc 	.word	0x200004bc
100045f0:	200001e8 	.word	0x200001e8
100045f4:	20000348 	.word	0x20000348

100045f8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
100045f8:	b510      	push	{r4, lr}
100045fa:	f3ef 8410 	mrs	r4, PRIMASK
100045fe:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
10004600:	f7fe fd8e 	bl	10003120 <sys_clock_elapsed>
10004604:	2300      	movs	r3, #0
10004606:	0002      	movs	r2, r0
10004608:	4905      	ldr	r1, [pc, #20]	; (10004620 <sys_clock_tick_get+0x28>)
1000460a:	6808      	ldr	r0, [r1, #0]
1000460c:	6849      	ldr	r1, [r1, #4]
1000460e:	1880      	adds	r0, r0, r2
10004610:	4159      	adcs	r1, r3
	if (key != 0U) {
10004612:	429c      	cmp	r4, r3
10004614:	d102      	bne.n	1000461c <sys_clock_tick_get+0x24>
	__asm__ volatile(
10004616:	b662      	cpsie	i
10004618:	f3bf 8f6f 	isb	sy
	}
	return t;
}
1000461c:	bd10      	pop	{r4, pc}
1000461e:	46c0      	nop			; (mov r8, r8)
10004620:	20000348 	.word	0x20000348

10004624 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
10004624:	b510      	push	{r4, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
10004626:	4a03      	ldr	r2, [pc, #12]	; (10004634 <boot_banner+0x10>)
10004628:	4903      	ldr	r1, [pc, #12]	; (10004638 <boot_banner+0x14>)
1000462a:	4804      	ldr	r0, [pc, #16]	; (1000463c <boot_banner+0x18>)
1000462c:	f000 f8ce 	bl	100047cc <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
10004630:	bd10      	pop	{r4, pc}
10004632:	46c0      	nop			; (mov r8, r8)
10004634:	10005daa 	.word	0x10005daa
10004638:	10005e19 	.word	0x10005e19
1000463c:	10005e3a 	.word	0x10005e3a

10004640 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
10004640:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
10004642:	4c06      	ldr	r4, [pc, #24]	; (1000465c <statics_init+0x1c>)
10004644:	4b06      	ldr	r3, [pc, #24]	; (10004660 <statics_init+0x20>)
10004646:	429c      	cmp	r4, r3
10004648:	d301      	bcc.n	1000464e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
1000464a:	2000      	movs	r0, #0
1000464c:	bd10      	pop	{r4, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
1000464e:	0020      	movs	r0, r4
10004650:	68a2      	ldr	r2, [r4, #8]
10004652:	6861      	ldr	r1, [r4, #4]
10004654:	f001 f932 	bl	100058bc <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
10004658:	3414      	adds	r4, #20
1000465a:	e7f3      	b.n	10004644 <statics_init+0x4>
1000465c:	20000214 	.word	0x20000214
10004660:	20000214 	.word	0x20000214

10004664 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
10004664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
10004666:	4b08      	ldr	r3, [pc, #32]	; (10004688 <k_sys_work_q_init+0x24>)
10004668:	2400      	movs	r4, #0
1000466a:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
1000466c:	2280      	movs	r2, #128	; 0x80
1000466e:	2301      	movs	r3, #1
	struct k_work_queue_config cfg = {
10004670:	a902      	add	r1, sp, #8
10004672:	710c      	strb	r4, [r1, #4]
	k_work_queue_start(&k_sys_work_q,
10004674:	4805      	ldr	r0, [pc, #20]	; (1000468c <k_sys_work_q_init+0x28>)
10004676:	9100      	str	r1, [sp, #0]
10004678:	425b      	negs	r3, r3
1000467a:	4905      	ldr	r1, [pc, #20]	; (10004690 <k_sys_work_q_init+0x2c>)
1000467c:	00d2      	lsls	r2, r2, #3
1000467e:	f7ff fb2f 	bl	10003ce0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
10004682:	0020      	movs	r0, r4
10004684:	b004      	add	sp, #16
10004686:	bd10      	pop	{r4, pc}
10004688:	10005e61 	.word	0x10005e61
1000468c:	20000350 	.word	0x20000350
10004690:	200011c8 	.word	0x200011c8

10004694 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
10004694:	4770      	bx	lr

10004696 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
10004696:	0002      	movs	r2, r0
10004698:	b510      	push	{r4, lr}
1000469a:	000b      	movs	r3, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
1000469c:	7911      	ldrb	r1, [r2, #4]
1000469e:	2201      	movs	r2, #1
100046a0:	0014      	movs	r4, r2
100046a2:	408c      	lsls	r4, r1
100046a4:	0021      	movs	r1, r4
	return gpio_pin_set(spec->port, spec->pin, value);
100046a6:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
100046a8:	6904      	ldr	r4, [r0, #16]
100046aa:	6824      	ldr	r4, [r4, #0]
100046ac:	420c      	tst	r4, r1
100046ae:	d000      	beq.n	100046b2 <gpio_pin_set_dt.isra.0+0x1c>
		value = (value != 0) ? 0 : 1;
100046b0:	4053      	eors	r3, r2
	if (value != 0)	{
100046b2:	2b00      	cmp	r3, #0
100046b4:	d003      	beq.n	100046be <gpio_pin_set_dt.isra.0+0x28>
	return api->port_set_bits_raw(port, pins);
100046b6:	6883      	ldr	r3, [r0, #8]
100046b8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
100046ba:	4798      	blx	r3
}
100046bc:	bd10      	pop	{r4, pc}
	return api->port_clear_bits_raw(port, pins);
100046be:	6883      	ldr	r3, [r0, #8]
100046c0:	691b      	ldr	r3, [r3, #16]
100046c2:	e7fa      	b.n	100046ba <gpio_pin_set_dt.isra.0+0x24>

100046c4 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
100046c4:	2301      	movs	r3, #1
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
100046c6:	b510      	push	{r4, lr}
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
100046c8:	001c      	movs	r4, r3
100046ca:	408c      	lsls	r4, r1
100046cc:	0021      	movs	r1, r4
100046ce:	6904      	ldr	r4, [r0, #16]
100046d0:	6824      	ldr	r4, [r4, #0]
100046d2:	420c      	tst	r4, r1
100046d4:	d000      	beq.n	100046d8 <gpio_pin_set.isra.0+0x14>
		value = (value != 0) ? 0 : 1;
100046d6:	405a      	eors	r2, r3
	if (value != 0)	{
100046d8:	2a00      	cmp	r2, #0
100046da:	d003      	beq.n	100046e4 <gpio_pin_set.isra.0+0x20>
	return api->port_set_bits_raw(port, pins);
100046dc:	6883      	ldr	r3, [r0, #8]
100046de:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
100046e0:	4798      	blx	r3
}
100046e2:	bd10      	pop	{r4, pc}
	return api->port_clear_bits_raw(port, pins);
100046e4:	6883      	ldr	r3, [r0, #8]
100046e6:	691b      	ldr	r3, [r3, #16]
100046e8:	e7fa      	b.n	100046e0 <gpio_pin_set.isra.0+0x1c>

100046ea <z_impl_uart_irq_rx_enable>:
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_enable != NULL) {
100046ea:	6883      	ldr	r3, [r0, #8]
{
100046ec:	b510      	push	{r4, lr}
	if (api->irq_rx_enable != NULL) {
100046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100046f0:	2b00      	cmp	r3, #0
100046f2:	d000      	beq.n	100046f6 <z_impl_uart_irq_rx_enable+0xc>
		api->irq_rx_enable(dev);
100046f4:	4798      	blx	r3
	}
#else
	ARG_UNUSED(dev);
#endif
}
100046f6:	bd10      	pop	{r4, pc}

100046f8 <uart_irq_callback_user_data_set.constprop.0>:
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
100046f8:	6883      	ldr	r3, [r0, #8]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
100046fa:	b510      	push	{r4, lr}
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
100046fc:	2b00      	cmp	r3, #0
100046fe:	d004      	beq.n	1000470a <uart_irq_callback_user_data_set.constprop.0+0x12>
10004700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004702:	2b00      	cmp	r3, #0
10004704:	d001      	beq.n	1000470a <uart_irq_callback_user_data_set.constprop.0+0x12>
		api->irq_callback_set(dev, cb, user_data);
10004706:	2200      	movs	r2, #0
10004708:	4798      	blx	r3
#else
	ARG_UNUSED(dev);
	ARG_UNUSED(cb);
	ARG_UNUSED(user_data);
#endif
}
1000470a:	bd10      	pop	{r4, pc}

1000470c <comm_uSendString>:
void comm_uSendString( uart_device dev, const char *str ){
1000470c:	b570      	push	{r4, r5, r6, lr}
1000470e:	0005      	movs	r5, r0
	size_t uSize = strlen(str);
10004710:	0008      	movs	r0, r1
void comm_uSendString( uart_device dev, const char *str ){
10004712:	000c      	movs	r4, r1
	size_t uSize = strlen(str);
10004714:	f000 fab1 	bl	10004c7a <strlen>
	for (size_t i = 0; i < uSize; i++) {
10004718:	1826      	adds	r6, r4, r0
1000471a:	42b4      	cmp	r4, r6
1000471c:	d100      	bne.n	10004720 <comm_uSendString+0x14>
}
1000471e:	bd70      	pop	{r4, r5, r6, pc}
		comm_uSendChar(dev, str[i]);
10004720:	7821      	ldrb	r1, [r4, #0]
10004722:	0028      	movs	r0, r5
10004724:	f7fd fb44 	bl	10001db0 <comm_uSendChar>
	for (size_t i = 0; i < uSize; i++) {
10004728:	3401      	adds	r4, #1
1000472a:	e7f6      	b.n	1000471a <comm_uSendString+0xe>

1000472c <uart0_cb>:


void uart0_cb(const struct device *dev, void *user_data) {
1000472c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000472e:	0004      	movs	r4, r0
	if (api->irq_update == NULL) {
10004730:	6883      	ldr	r3, [r0, #8]
10004732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10004734:	2b00      	cmp	r3, #0
10004736:	d011      	beq.n	1000475c <uart0_cb+0x30>
	return api->irq_update(dev);
10004738:	4798      	blx	r3
	uint8_t c;

	if (!uart_irq_update(dev)) {
1000473a:	2800      	cmp	r0, #0
1000473c:	d10e      	bne.n	1000475c <uart0_cb+0x30>

	while (uart_irq_rx_ready(dev)) {
		uart_fifo_read(dev, &c, 1);
		uart_vBuildMessage(UART0, c);
	}
}
1000473e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	if (api->fifo_read == NULL) {
10004740:	466a      	mov	r2, sp
10004742:	68a3      	ldr	r3, [r4, #8]
10004744:	1dd5      	adds	r5, r2, #7
10004746:	699b      	ldr	r3, [r3, #24]
10004748:	2b00      	cmp	r3, #0
1000474a:	d003      	beq.n	10004754 <uart0_cb+0x28>
	return api->fifo_read(dev, rx_data, size);
1000474c:	2201      	movs	r2, #1
1000474e:	0029      	movs	r1, r5
10004750:	0020      	movs	r0, r4
10004752:	4798      	blx	r3
		uart_vBuildMessage(UART0, c);
10004754:	2000      	movs	r0, #0
10004756:	7829      	ldrb	r1, [r5, #0]
10004758:	f7fd fb8a 	bl	10001e70 <uart_vBuildMessage>
	if (api->irq_rx_ready == NULL) {
1000475c:	68a3      	ldr	r3, [r4, #8]
1000475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004760:	2b00      	cmp	r3, #0
10004762:	d0ed      	beq.n	10004740 <uart0_cb+0x14>
	return api->irq_rx_ready(dev);
10004764:	0020      	movs	r0, r4
10004766:	4798      	blx	r3
	while (uart_irq_rx_ready(dev)) {
10004768:	2800      	cmp	r0, #0
1000476a:	d1e9      	bne.n	10004740 <uart0_cb+0x14>
1000476c:	e7e7      	b.n	1000473e <uart0_cb+0x12>

1000476e <uart1_cb>:

void uart1_cb(const struct device *dev, void *user_data) {
1000476e:	b537      	push	{r0, r1, r2, r4, r5, lr}
10004770:	0004      	movs	r4, r0
	if (api->irq_update == NULL) {
10004772:	6883      	ldr	r3, [r0, #8]
10004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10004776:	2b00      	cmp	r3, #0
10004778:	d011      	beq.n	1000479e <uart1_cb+0x30>
	return api->irq_update(dev);
1000477a:	4798      	blx	r3
	uint8_t c;

	if (!uart_irq_update(dev)) {
1000477c:	2800      	cmp	r0, #0
1000477e:	d10e      	bne.n	1000479e <uart1_cb+0x30>

	while (uart_irq_rx_ready(dev)) {
		uart_fifo_read(dev, &c, 1);
		uart_vBuildMessage(UART1, c);
	}
10004780:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	if (api->fifo_read == NULL) {
10004782:	466a      	mov	r2, sp
10004784:	68a3      	ldr	r3, [r4, #8]
10004786:	1dd5      	adds	r5, r2, #7
10004788:	699b      	ldr	r3, [r3, #24]
1000478a:	2b00      	cmp	r3, #0
1000478c:	d003      	beq.n	10004796 <uart1_cb+0x28>
	return api->fifo_read(dev, rx_data, size);
1000478e:	2201      	movs	r2, #1
10004790:	0029      	movs	r1, r5
10004792:	0020      	movs	r0, r4
10004794:	4798      	blx	r3
		uart_vBuildMessage(UART1, c);
10004796:	2001      	movs	r0, #1
10004798:	7829      	ldrb	r1, [r5, #0]
1000479a:	f7fd fb69 	bl	10001e70 <uart_vBuildMessage>
	if (api->irq_rx_ready == NULL) {
1000479e:	68a3      	ldr	r3, [r4, #8]
100047a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100047a2:	2b00      	cmp	r3, #0
100047a4:	d0ed      	beq.n	10004782 <uart1_cb+0x14>
	return api->irq_rx_ready(dev);
100047a6:	0020      	movs	r0, r4
100047a8:	4798      	blx	r3
	while (uart_irq_rx_ready(dev)) {
100047aa:	2800      	cmp	r0, #0
100047ac:	d1e9      	bne.n	10004782 <uart1_cb+0x14>
100047ae:	e7e7      	b.n	10004780 <uart1_cb+0x12>

100047b0 <gprs_vDisable>:

void gprs_vDisable(void) {
100047b0:	b510      	push	{r4, lr}
	gpio_pin_set_dt(&gprs_reset, true);
100047b2:	2001      	movs	r0, #1
100047b4:	f7fd fb7a 	bl	10001eac <gpio_pin_set_dt.constprop.0.isra.0>
}
100047b8:	bd10      	pop	{r4, pc}

100047ba <textp_bFindString>:
 * @param pcFindAt: onde procurar
 * @param pcFindThis: oque procurar
 * @return true: Caso tenha a sting dento da outra
 * @return false: Caso não tenha a sting dento da outra
 */
bool textp_bFindString( const char *pcFindAt, const char *pcFindThis){
100047ba:	b510      	push	{r4, lr}
	if(strstr(pcFindAt, pcFindThis) != NULL)	return true;
100047bc:	f000 fa3f 	bl	10004c3e <strstr>
100047c0:	1e43      	subs	r3, r0, #1
100047c2:	4198      	sbcs	r0, r3
	return false;
}
100047c4:	b2c0      	uxtb	r0, r0
100047c6:	bd10      	pop	{r4, pc}

100047c8 <arch_printk_char_out>:
}
100047c8:	2000      	movs	r0, #0
100047ca:	4770      	bx	lr

100047cc <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
100047cc:	b40f      	push	{r0, r1, r2, r3}
100047ce:	b507      	push	{r0, r1, r2, lr}
100047d0:	a904      	add	r1, sp, #16
100047d2:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
100047d4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
100047d6:	f7fd fba9 	bl	10001f2c <vprintk>

	va_end(ap);
}
100047da:	b003      	add	sp, #12
100047dc:	bc08      	pop	{r3}
100047de:	b004      	add	sp, #16
100047e0:	4718      	bx	r3

100047e2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
100047e2:	b510      	push	{r4, lr}
100047e4:	0004      	movs	r4, r0
100047e6:	0008      	movs	r0, r1
100047e8:	0011      	movs	r1, r2
100047ea:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
100047ec:	47a0      	blx	r4
	return z_impl_z_current_get();
100047ee:	f7ff fd35 	bl	1000425c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
100047f2:	f7fe f8b1 	bl	10002958 <z_impl_k_thread_abort>

100047f6 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
100047f6:	2380      	movs	r3, #128	; 0x80
	void *cmem = &buf[c];
100047f8:	00c9      	lsls	r1, r1, #3
100047fa:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
100047fc:	6880      	ldr	r0, [r0, #8]
100047fe:	021b      	lsls	r3, r3, #8
10004800:	4298      	cmp	r0, r3
10004802:	d302      	bcc.n	1000480a <chunk_field+0x14>
		return ((uint32_t *)cmem)[f];
10004804:	0092      	lsls	r2, r2, #2
10004806:	5850      	ldr	r0, [r2, r1]
	} else {
		return ((uint16_t *)cmem)[f];
	}
}
10004808:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
1000480a:	0052      	lsls	r2, r2, #1
1000480c:	5a50      	ldrh	r0, [r2, r1]
1000480e:	e7fb      	b.n	10004808 <chunk_field+0x12>

10004810 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
10004810:	b510      	push	{r4, lr}
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
10004812:	2480      	movs	r4, #128	; 0x80
	void *cmem = &buf[c];
10004814:	00c9      	lsls	r1, r1, #3
10004816:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
10004818:	6880      	ldr	r0, [r0, #8]
1000481a:	0224      	lsls	r4, r4, #8
1000481c:	42a0      	cmp	r0, r4
1000481e:	d302      	bcc.n	10004826 <chunk_set+0x16>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
10004820:	0092      	lsls	r2, r2, #2
10004822:	5053      	str	r3, [r2, r1]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
	}
}
10004824:	bd10      	pop	{r4, pc}
		((uint16_t *)cmem)[f] = val;
10004826:	0052      	lsls	r2, r2, #1
10004828:	5253      	strh	r3, [r2, r1]
}
1000482a:	e7fb      	b.n	10004824 <chunk_set+0x14>

1000482c <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
1000482c:	b510      	push	{r4, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
1000482e:	2201      	movs	r2, #1
10004830:	f7ff ffe1 	bl	100047f6 <chunk_field>
10004834:	0840      	lsrs	r0, r0, #1
}
10004836:	bd10      	pop	{r4, pc}

10004838 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
10004838:	b510      	push	{r4, lr}
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
1000483a:	2480      	movs	r4, #128	; 0x80
	void *cmem = &buf[c];
1000483c:	00c9      	lsls	r1, r1, #3
1000483e:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
10004840:	6880      	ldr	r0, [r0, #8]
10004842:	2301      	movs	r3, #1
10004844:	0224      	lsls	r4, r4, #8
10004846:	42a0      	cmp	r0, r4
10004848:	d308      	bcc.n	1000485c <set_chunk_used+0x24>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
1000484a:	6848      	ldr	r0, [r1, #4]
		if (used) {
1000484c:	2a00      	cmp	r2, #0
1000484e:	d002      	beq.n	10004856 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
10004850:	4303      	orrs	r3, r0
10004852:	604b      	str	r3, [r1, #4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
		}
	}
}
10004854:	bd10      	pop	{r4, pc}
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
10004856:	4398      	bics	r0, r3
10004858:	6048      	str	r0, [r1, #4]
1000485a:	e7fb      	b.n	10004854 <set_chunk_used+0x1c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
1000485c:	8848      	ldrh	r0, [r1, #2]
		if (used) {
1000485e:	2a00      	cmp	r2, #0
10004860:	d002      	beq.n	10004868 <set_chunk_used+0x30>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
10004862:	4303      	orrs	r3, r0
10004864:	804b      	strh	r3, [r1, #2]
10004866:	e7f5      	b.n	10004854 <set_chunk_used+0x1c>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
10004868:	4398      	bics	r0, r3
1000486a:	8048      	strh	r0, [r1, #2]
}
1000486c:	e7f2      	b.n	10004854 <set_chunk_used+0x1c>

1000486e <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
1000486e:	b510      	push	{r4, lr}
	chunk_set(h, c, SIZE_AND_USED, size << 1);
10004870:	0053      	lsls	r3, r2, #1
10004872:	2201      	movs	r2, #1
10004874:	f7ff ffcc 	bl	10004810 <chunk_set>
}
10004878:	bd10      	pop	{r4, pc}

1000487a <mem_to_chunkid>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
1000487a:	2280      	movs	r2, #128	; 0x80
 * Here "closest" is only meaningful in the context of sys_heap_aligned_alloc()
 * where wanted alignment might not always correspond to a chunk header
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
1000487c:	b510      	push	{r4, lr}
1000487e:	6884      	ldr	r4, [r0, #8]
10004880:	2308      	movs	r3, #8
10004882:	0212      	lsls	r2, r2, #8
10004884:	4294      	cmp	r4, r2
10004886:	d200      	bcs.n	1000488a <mem_to_chunkid+0x10>
10004888:	3b04      	subs	r3, #4
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
1000488a:	1ac9      	subs	r1, r1, r3
1000488c:	1a08      	subs	r0, r1, r0
1000488e:	08c0      	lsrs	r0, r0, #3
}
10004890:	bd10      	pop	{r4, pc}

10004892 <bucket_idx.isra.0>:
10004892:	2280      	movs	r2, #128	; 0x80
10004894:	2308      	movs	r3, #8
static inline size_t chunksz_to_bytes(struct z_heap *h, chunksz_t chunksz_in)
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
10004896:	b510      	push	{r4, lr}
	return big_heap(h) ? 8 : 4;
10004898:	0212      	lsls	r2, r2, #8
1000489a:	4290      	cmp	r0, r2
1000489c:	d200      	bcs.n	100048a0 <bucket_idx.isra.0+0xe>
1000489e:	3b04      	subs	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
100048a0:	3308      	adds	r3, #8
100048a2:	08d8      	lsrs	r0, r3, #3
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
100048a4:	3101      	adds	r1, #1
100048a6:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
100048a8:	f7fb fd22 	bl	100002f0 <__clzsi2>
100048ac:	231f      	movs	r3, #31
100048ae:	1a18      	subs	r0, r3, r0
}
100048b0:	bd10      	pop	{r4, pc}

100048b2 <free_list_remove_bidx>:
{
100048b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100048b4:	0017      	movs	r7, r2
	return chunk_field(h, c, FREE_NEXT);
100048b6:	2203      	movs	r2, #3
100048b8:	0004      	movs	r4, r0
100048ba:	000e      	movs	r6, r1
100048bc:	f7ff ff9b 	bl	100047f6 <chunk_field>
100048c0:	1d3b      	adds	r3, r7, #4
100048c2:	0005      	movs	r5, r0
100048c4:	9301      	str	r3, [sp, #4]
	if (next_free_chunk(h, c) == c) {
100048c6:	4286      	cmp	r6, r0
100048c8:	d109      	bne.n	100048de <free_list_remove_bidx+0x2c>
		h->avail_buckets &= ~BIT(bidx);
100048ca:	2301      	movs	r3, #1
100048cc:	40bb      	lsls	r3, r7
100048ce:	68e2      	ldr	r2, [r4, #12]
100048d0:	439a      	bics	r2, r3
100048d2:	60e2      	str	r2, [r4, #12]
		b->next = 0;
100048d4:	2200      	movs	r2, #0
100048d6:	9b01      	ldr	r3, [sp, #4]
100048d8:	009b      	lsls	r3, r3, #2
100048da:	511a      	str	r2, [r3, r4]
}
100048dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	return chunk_field(h, c, FREE_PREV);
100048de:	0031      	movs	r1, r6
100048e0:	2202      	movs	r2, #2
100048e2:	0020      	movs	r0, r4
100048e4:	f7ff ff87 	bl	100047f6 <chunk_field>
100048e8:	0006      	movs	r6, r0
		b->next = second;
100048ea:	9b01      	ldr	r3, [sp, #4]
	chunk_set(h, c, FREE_NEXT, next);
100048ec:	0001      	movs	r1, r0
100048ee:	009b      	lsls	r3, r3, #2
100048f0:	0020      	movs	r0, r4
100048f2:	511d      	str	r5, [r3, r4]
100048f4:	2203      	movs	r2, #3
100048f6:	002b      	movs	r3, r5
100048f8:	f7ff ff8a 	bl	10004810 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
100048fc:	0033      	movs	r3, r6
100048fe:	2202      	movs	r2, #2
10004900:	0029      	movs	r1, r5
10004902:	0020      	movs	r0, r4
10004904:	f7ff ff84 	bl	10004810 <chunk_set>
}
10004908:	e7e8      	b.n	100048dc <free_list_remove_bidx+0x2a>

1000490a <free_list_remove>:
{
1000490a:	b570      	push	{r4, r5, r6, lr}
1000490c:	000d      	movs	r5, r1
1000490e:	0004      	movs	r4, r0
	return big_heap_chunks(h->end_chunk);
10004910:	6886      	ldr	r6, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
10004912:	f7ff ff8b 	bl	1000482c <chunk_size>
10004916:	2380      	movs	r3, #128	; 0x80
10004918:	0001      	movs	r1, r0
1000491a:	021b      	lsls	r3, r3, #8
1000491c:	429e      	cmp	r6, r3
1000491e:	d301      	bcc.n	10004924 <free_list_remove+0x1a>
	if (!solo_free_header(h, c)) {
10004920:	2801      	cmp	r0, #1
10004922:	d007      	beq.n	10004934 <free_list_remove+0x2a>
		int bidx = bucket_idx(h, chunk_size(h, c));
10004924:	0030      	movs	r0, r6
10004926:	f7ff ffb4 	bl	10004892 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
1000492a:	0029      	movs	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
1000492c:	0002      	movs	r2, r0
		free_list_remove_bidx(h, c, bidx);
1000492e:	0020      	movs	r0, r4
10004930:	f7ff ffbf 	bl	100048b2 <free_list_remove_bidx>
}
10004934:	bd70      	pop	{r4, r5, r6, pc}

10004936 <merge_chunks>:
{
10004936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004938:	0015      	movs	r5, r2
1000493a:	0004      	movs	r4, r0
1000493c:	000f      	movs	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
1000493e:	f7ff ff75 	bl	1000482c <chunk_size>
10004942:	0029      	movs	r1, r5
10004944:	0006      	movs	r6, r0
10004946:	0020      	movs	r0, r4
10004948:	f7ff ff70 	bl	1000482c <chunk_size>
1000494c:	1836      	adds	r6, r6, r0
	set_chunk_size(h, lc, newsz);
1000494e:	0032      	movs	r2, r6
10004950:	0039      	movs	r1, r7
10004952:	0020      	movs	r0, r4
10004954:	f7ff ff8b 	bl	1000486e <set_chunk_size>
	return c + chunk_size(h, c);
10004958:	0029      	movs	r1, r5
1000495a:	0020      	movs	r0, r4
1000495c:	f7ff ff66 	bl	1000482c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
10004960:	0033      	movs	r3, r6
	return c + chunk_size(h, c);
10004962:	1829      	adds	r1, r5, r0
	chunk_set(h, c, LEFT_SIZE, size);
10004964:	2200      	movs	r2, #0
10004966:	0020      	movs	r0, r4
10004968:	f7ff ff52 	bl	10004810 <chunk_set>
}
1000496c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000496e <free_list_add>:
{
1000496e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004970:	000d      	movs	r5, r1
10004972:	0004      	movs	r4, r0
	return big_heap_chunks(h->end_chunk);
10004974:	6886      	ldr	r6, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
10004976:	f7ff ff59 	bl	1000482c <chunk_size>
1000497a:	2380      	movs	r3, #128	; 0x80
1000497c:	0001      	movs	r1, r0
1000497e:	021b      	lsls	r3, r3, #8
10004980:	429e      	cmp	r6, r3
10004982:	d301      	bcc.n	10004988 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
10004984:	2801      	cmp	r0, #1
10004986:	d019      	beq.n	100049bc <free_list_add+0x4e>
		int bidx = bucket_idx(h, chunk_size(h, c));
10004988:	0030      	movs	r0, r6
1000498a:	f7ff ff82 	bl	10004892 <bucket_idx.isra.0>
	if (b->next == 0U) {
1000498e:	0083      	lsls	r3, r0, #2
10004990:	18e3      	adds	r3, r4, r3
10004992:	691e      	ldr	r6, [r3, #16]
10004994:	2e00      	cmp	r6, #0
10004996:	d112      	bne.n	100049be <free_list_add+0x50>
		h->avail_buckets |= BIT(bidx);
10004998:	2201      	movs	r2, #1
1000499a:	4082      	lsls	r2, r0
1000499c:	68e1      	ldr	r1, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
1000499e:	0020      	movs	r0, r4
100049a0:	430a      	orrs	r2, r1
100049a2:	60e2      	str	r2, [r4, #12]
100049a4:	0029      	movs	r1, r5
100049a6:	2202      	movs	r2, #2
		b->next = c;
100049a8:	611d      	str	r5, [r3, #16]
100049aa:	002b      	movs	r3, r5
100049ac:	f7ff ff30 	bl	10004810 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
100049b0:	002b      	movs	r3, r5
100049b2:	2203      	movs	r2, #3
100049b4:	0029      	movs	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
100049b6:	0020      	movs	r0, r4
100049b8:	f7ff ff2a 	bl	10004810 <chunk_set>
}
100049bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return chunk_field(h, c, FREE_PREV);
100049be:	2202      	movs	r2, #2
100049c0:	0031      	movs	r1, r6
100049c2:	0020      	movs	r0, r4
100049c4:	f7ff ff17 	bl	100047f6 <chunk_field>
100049c8:	0007      	movs	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
100049ca:	0003      	movs	r3, r0
100049cc:	2202      	movs	r2, #2
100049ce:	0029      	movs	r1, r5
100049d0:	0020      	movs	r0, r4
100049d2:	f7ff ff1d 	bl	10004810 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
100049d6:	0033      	movs	r3, r6
100049d8:	2203      	movs	r2, #3
100049da:	0029      	movs	r1, r5
100049dc:	0020      	movs	r0, r4
100049de:	f7ff ff17 	bl	10004810 <chunk_set>
100049e2:	002b      	movs	r3, r5
100049e4:	2203      	movs	r2, #3
100049e6:	0039      	movs	r1, r7
100049e8:	0020      	movs	r0, r4
100049ea:	f7ff ff11 	bl	10004810 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
100049ee:	002b      	movs	r3, r5
100049f0:	2202      	movs	r2, #2
100049f2:	0031      	movs	r1, r6
100049f4:	e7df      	b.n	100049b6 <free_list_add+0x48>

100049f6 <free_chunk>:
{
100049f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100049f8:	000c      	movs	r4, r1
100049fa:	0005      	movs	r5, r0
	return c + chunk_size(h, c);
100049fc:	f7ff ff16 	bl	1000482c <chunk_size>
10004a00:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
10004a02:	2201      	movs	r2, #1
10004a04:	0031      	movs	r1, r6
10004a06:	0028      	movs	r0, r5
10004a08:	f7ff fef5 	bl	100047f6 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
10004a0c:	07c3      	lsls	r3, r0, #31
10004a0e:	d40c      	bmi.n	10004a2a <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
10004a10:	0031      	movs	r1, r6
10004a12:	0028      	movs	r0, r5
10004a14:	f7ff ff79 	bl	1000490a <free_list_remove>
	return c + chunk_size(h, c);
10004a18:	0021      	movs	r1, r4
10004a1a:	0028      	movs	r0, r5
10004a1c:	f7ff ff06 	bl	1000482c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
10004a20:	0021      	movs	r1, r4
10004a22:	1822      	adds	r2, r4, r0
10004a24:	0028      	movs	r0, r5
10004a26:	f7ff ff86 	bl	10004936 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
10004a2a:	2200      	movs	r2, #0
10004a2c:	0021      	movs	r1, r4
10004a2e:	0028      	movs	r0, r5
10004a30:	f7ff fee1 	bl	100047f6 <chunk_field>
10004a34:	1a26      	subs	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
10004a36:	2201      	movs	r2, #1
10004a38:	0031      	movs	r1, r6
10004a3a:	0028      	movs	r0, r5
10004a3c:	f7ff fedb 	bl	100047f6 <chunk_field>
10004a40:	2301      	movs	r3, #1
	if (!chunk_used(h, left_chunk(h, c))) {
10004a42:	0007      	movs	r7, r0
10004a44:	401f      	ands	r7, r3
10004a46:	4218      	tst	r0, r3
10004a48:	d113      	bne.n	10004a72 <free_chunk+0x7c>
		free_list_remove(h, left_chunk(h, c));
10004a4a:	0031      	movs	r1, r6
10004a4c:	0028      	movs	r0, r5
10004a4e:	f7ff ff5c 	bl	1000490a <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
10004a52:	0021      	movs	r1, r4
10004a54:	003a      	movs	r2, r7
10004a56:	0028      	movs	r0, r5
10004a58:	f7ff fecd 	bl	100047f6 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
10004a5c:	0022      	movs	r2, r4
10004a5e:	1a21      	subs	r1, r4, r0
10004a60:	0028      	movs	r0, r5
10004a62:	f7ff ff68 	bl	10004936 <merge_chunks>
10004a66:	0021      	movs	r1, r4
10004a68:	003a      	movs	r2, r7
10004a6a:	0028      	movs	r0, r5
10004a6c:	f7ff fec3 	bl	100047f6 <chunk_field>
10004a70:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
10004a72:	0028      	movs	r0, r5
10004a74:	0021      	movs	r1, r4
10004a76:	f7ff ff7a 	bl	1000496e <free_list_add>
}
10004a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10004a7c <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
10004a7c:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
10004a7e:	2900      	cmp	r1, #0
10004a80:	d00d      	beq.n	10004a9e <sys_heap_free+0x22>
10004a82:	6805      	ldr	r5, [r0, #0]
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
	chunkid_t c = mem_to_chunkid(h, mem);
10004a84:	0028      	movs	r0, r5
10004a86:	f7ff fef8 	bl	1000487a <mem_to_chunkid>
10004a8a:	0004      	movs	r4, r0
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
10004a8c:	0001      	movs	r1, r0
10004a8e:	2200      	movs	r2, #0
10004a90:	0028      	movs	r0, r5
10004a92:	f7ff fed1 	bl	10004838 <set_chunk_used>
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
10004a96:	0021      	movs	r1, r4
10004a98:	0028      	movs	r0, r5
10004a9a:	f7ff ffac 	bl	100049f6 <free_chunk>
}
10004a9e:	bd70      	pop	{r4, r5, r6, pc}

10004aa0 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
10004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_bytes(size) ? 8 : 4;
10004aa2:	2380      	movs	r3, #128	; 0x80
10004aa4:	2408      	movs	r4, #8
10004aa6:	02db      	lsls	r3, r3, #11
10004aa8:	429a      	cmp	r2, r3
10004aaa:	d200      	bcs.n	10004aae <sys_heap_init+0xe>
10004aac:	3c04      	subs	r4, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
10004aae:	2307      	movs	r3, #7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
10004ab0:	2700      	movs	r7, #0
	bytes -= heap_footer_bytes(bytes);
10004ab2:	1b14      	subs	r4, r2, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
10004ab4:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
10004ab6:	1909      	adds	r1, r1, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
10004ab8:	439e      	bics	r6, r3
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
10004aba:	4399      	bics	r1, r3
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
10004abc:	1b8c      	subs	r4, r1, r6
10004abe:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
10004ac0:	6006      	str	r6, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
10004ac2:	0021      	movs	r1, r4
10004ac4:	0020      	movs	r0, r4
	h->end_chunk = heap_sz;
10004ac6:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
10004ac8:	60f7      	str	r7, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
10004aca:	f7ff fee2 	bl	10004892 <bucket_idx.isra.0>
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
10004ace:	0032      	movs	r2, r6
	for (int i = 0; i < nb_buckets; i++) {
10004ad0:	003b      	movs	r3, r7
		h->buckets[i].next = 0;
10004ad2:	0039      	movs	r1, r7
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
10004ad4:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
10004ad6:	351b      	adds	r5, #27
10004ad8:	08ed      	lsrs	r5, r5, #3
		h->buckets[i].next = 0;
10004ada:	3210      	adds	r2, #16
	for (int i = 0; i < nb_buckets; i++) {
10004adc:	4298      	cmp	r0, r3
10004ade:	da30      	bge.n	10004b42 <sys_heap_init+0xa2>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
10004ae0:	002a      	movs	r2, r5
10004ae2:	0030      	movs	r0, r6
10004ae4:	2100      	movs	r1, #0
10004ae6:	f7ff fec2 	bl	1000486e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
10004aea:	2300      	movs	r3, #0
10004aec:	0030      	movs	r0, r6
10004aee:	001a      	movs	r2, r3
10004af0:	0019      	movs	r1, r3
10004af2:	f7ff fe8d 	bl	10004810 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
10004af6:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
10004af8:	0030      	movs	r0, r6
10004afa:	2201      	movs	r2, #1
10004afc:	2100      	movs	r1, #0
10004afe:	f7ff fe9b 	bl	10004838 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
10004b02:	003a      	movs	r2, r7
10004b04:	0029      	movs	r1, r5
10004b06:	0030      	movs	r0, r6
10004b08:	f7ff feb1 	bl	1000486e <set_chunk_size>
10004b0c:	002b      	movs	r3, r5
10004b0e:	0029      	movs	r1, r5
10004b10:	0030      	movs	r0, r6
10004b12:	2200      	movs	r2, #0
10004b14:	f7ff fe7c 	bl	10004810 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
10004b18:	0030      	movs	r0, r6
10004b1a:	0021      	movs	r1, r4
10004b1c:	2200      	movs	r2, #0
10004b1e:	f7ff fea6 	bl	1000486e <set_chunk_size>
10004b22:	003b      	movs	r3, r7
10004b24:	0030      	movs	r0, r6
10004b26:	0021      	movs	r1, r4
10004b28:	2200      	movs	r2, #0
10004b2a:	f7ff fe71 	bl	10004810 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
10004b2e:	0030      	movs	r0, r6
10004b30:	2201      	movs	r2, #1
10004b32:	0021      	movs	r1, r4
10004b34:	f7ff fe80 	bl	10004838 <set_chunk_used>

	free_list_add(h, chunk0_size);
10004b38:	0029      	movs	r1, r5
10004b3a:	0030      	movs	r0, r6
10004b3c:	f7ff ff17 	bl	1000496e <free_list_add>
}
10004b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h->buckets[i].next = 0;
10004b42:	009f      	lsls	r7, r3, #2
10004b44:	51d1      	str	r1, [r2, r7]
	for (int i = 0; i < nb_buckets; i++) {
10004b46:	3301      	adds	r3, #1
10004b48:	e7c8      	b.n	10004adc <sys_heap_init+0x3c>

10004b4a <encode_uint>:
{
10004b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
10004b4c:	b085      	sub	sp, #20
10004b4e:	9001      	str	r0, [sp, #4]
10004b50:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
10004b52:	78d3      	ldrb	r3, [r2, #3]
{
10004b54:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
10004b56:	001a      	movs	r2, r3
10004b58:	3a41      	subs	r2, #65	; 0x41
10004b5a:	000f      	movs	r7, r1
	switch (specifier) {
10004b5c:	2408      	movs	r4, #8
10004b5e:	9202      	str	r2, [sp, #8]
10004b60:	2b6f      	cmp	r3, #111	; 0x6f
10004b62:	d00a      	beq.n	10004b7a <encode_uint+0x30>
10004b64:	d804      	bhi.n	10004b70 <encode_uint+0x26>
		return 10;
10004b66:	3402      	adds	r4, #2
	switch (specifier) {
10004b68:	2b58      	cmp	r3, #88	; 0x58
10004b6a:	d106      	bne.n	10004b7a <encode_uint+0x30>
		return 16;
10004b6c:	3406      	adds	r4, #6
10004b6e:	e004      	b.n	10004b7a <encode_uint+0x30>
	switch (specifier) {
10004b70:	2208      	movs	r2, #8
		return 10;
10004b72:	240a      	movs	r4, #10
	switch (specifier) {
10004b74:	4393      	bics	r3, r2
10004b76:	2b70      	cmp	r3, #112	; 0x70
10004b78:	d0f8      	beq.n	10004b6c <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
10004b7a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
10004b7c:	0022      	movs	r2, r4
10004b7e:	2300      	movs	r3, #0
10004b80:	0039      	movs	r1, r7
10004b82:	9801      	ldr	r0, [sp, #4]
10004b84:	f7fb fbd2 	bl	1000032c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10004b88:	0013      	movs	r3, r2
10004b8a:	468c      	mov	ip, r1
10004b8c:	b2d2      	uxtb	r2, r2
10004b8e:	2b09      	cmp	r3, #9
10004b90:	d819      	bhi.n	10004bc6 <encode_uint+0x7c>
10004b92:	0013      	movs	r3, r2
10004b94:	3330      	adds	r3, #48	; 0x30
10004b96:	b2db      	uxtb	r3, r3
10004b98:	3e01      	subs	r6, #1
10004b9a:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
10004b9c:	2300      	movs	r3, #0
10004b9e:	42bb      	cmp	r3, r7
10004ba0:	d102      	bne.n	10004ba8 <encode_uint+0x5e>
10004ba2:	9b01      	ldr	r3, [sp, #4]
10004ba4:	429c      	cmp	r4, r3
10004ba6:	d802      	bhi.n	10004bae <encode_uint+0x64>
10004ba8:	9b03      	ldr	r3, [sp, #12]
10004baa:	429e      	cmp	r6, r3
10004bac:	d808      	bhi.n	10004bc0 <encode_uint+0x76>
	if (conv->flag_hash) {
10004bae:	782b      	ldrb	r3, [r5, #0]
10004bb0:	069b      	lsls	r3, r3, #26
10004bb2:	d513      	bpl.n	10004bdc <encode_uint+0x92>
		if (radix == 8) {
10004bb4:	2c08      	cmp	r4, #8
10004bb6:	d10f      	bne.n	10004bd8 <encode_uint+0x8e>
			conv->altform_0c = true;
10004bb8:	78ab      	ldrb	r3, [r5, #2]
10004bba:	431c      	orrs	r4, r3
10004bbc:	70ac      	strb	r4, [r5, #2]
	return bp;
10004bbe:	e00d      	b.n	10004bdc <encode_uint+0x92>
		value /= radix;
10004bc0:	4667      	mov	r7, ip
10004bc2:	9001      	str	r0, [sp, #4]
10004bc4:	e7da      	b.n	10004b7c <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10004bc6:	0013      	movs	r3, r2
10004bc8:	9902      	ldr	r1, [sp, #8]
10004bca:	3357      	adds	r3, #87	; 0x57
10004bcc:	b2db      	uxtb	r3, r3
10004bce:	2919      	cmp	r1, #25
10004bd0:	d8e2      	bhi.n	10004b98 <encode_uint+0x4e>
10004bd2:	3237      	adds	r2, #55	; 0x37
10004bd4:	b2d3      	uxtb	r3, r2
10004bd6:	e7df      	b.n	10004b98 <encode_uint+0x4e>
		} else if (radix == 16) {
10004bd8:	2c10      	cmp	r4, #16
10004bda:	d0ed      	beq.n	10004bb8 <encode_uint+0x6e>
}
10004bdc:	0030      	movs	r0, r6
10004bde:	b005      	add	sp, #20
10004be0:	bdf0      	pop	{r4, r5, r6, r7, pc}

10004be2 <outs>:
{
10004be2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004be4:	000f      	movs	r7, r1
10004be6:	0015      	movs	r5, r2
10004be8:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10004bea:	0014      	movs	r4, r2
{
10004bec:	9001      	str	r0, [sp, #4]
10004bee:	1b60      	subs	r0, r4, r5
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10004bf0:	42a6      	cmp	r6, r4
10004bf2:	d804      	bhi.n	10004bfe <outs+0x1c>
10004bf4:	2e00      	cmp	r6, #0
10004bf6:	d109      	bne.n	10004c0c <outs+0x2a>
10004bf8:	7823      	ldrb	r3, [r4, #0]
10004bfa:	2b00      	cmp	r3, #0
10004bfc:	d006      	beq.n	10004c0c <outs+0x2a>
		int rc = out((int)*sp++, ctx);
10004bfe:	7820      	ldrb	r0, [r4, #0]
10004c00:	0039      	movs	r1, r7
10004c02:	9b01      	ldr	r3, [sp, #4]
10004c04:	4798      	blx	r3
		if (rc < 0) {
10004c06:	3401      	adds	r4, #1
10004c08:	2800      	cmp	r0, #0
10004c0a:	daf0      	bge.n	10004bee <outs+0xc>
}
10004c0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10004c0e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
10004c0e:	4770      	bx	lr

10004c10 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10004c10:	b510      	push	{r4, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
10004c12:	f000 fcbf 	bl	10005594 <z_fatal_error>
}
10004c16:	bd10      	pop	{r4, pc}

10004c18 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
10004c18:	b510      	push	{r4, lr}
10004c1a:	0001      	movs	r1, r0
	z_fatal_error(reason, esf);
10004c1c:	6800      	ldr	r0, [r0, #0]
10004c1e:	f000 fcb9 	bl	10005594 <z_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
10004c22:	bd10      	pop	{r4, pc}

10004c24 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
10004c24:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
10004c26:	2100      	movs	r1, #0
10004c28:	2001      	movs	r0, #1
10004c2a:	f7ff fff1 	bl	10004c10 <z_arm_fatal_error>
}
10004c2e:	bd10      	pop	{r4, pc}

10004c30 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
10004c30:	b510      	push	{r4, lr}
	handler();
10004c32:	f7fd fd61 	bl	100026f8 <z_SysNmiOnReset>
	z_arm_int_exit();
10004c36:	f7fd fe0b 	bl	10002850 <z_arm_exc_exit>
}
10004c3a:	bd10      	pop	{r4, pc}

10004c3c <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
10004c3c:	4770      	bx	lr

10004c3e <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
10004c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char c, sc;
	size_t len;

	c = *find++;
10004c40:	780f      	ldrb	r7, [r1, #0]
{
10004c42:	0004      	movs	r4, r0
10004c44:	000d      	movs	r5, r1
	if (c != 0) {
10004c46:	2f00      	cmp	r7, #0
10004c48:	d013      	beq.n	10004c72 <strstr+0x34>
	c = *find++;
10004c4a:	3501      	adds	r5, #1
		len = strlen(find);
10004c4c:	0028      	movs	r0, r5
10004c4e:	f000 f814 	bl	10004c7a <strlen>
10004c52:	0026      	movs	r6, r4
10004c54:	9001      	str	r0, [sp, #4]
10004c56:	0034      	movs	r4, r6
		do {
			do {
				sc = *s++;
10004c58:	7823      	ldrb	r3, [r4, #0]
10004c5a:	3601      	adds	r6, #1
				if (sc == 0) {
10004c5c:	2b00      	cmp	r3, #0
10004c5e:	d00a      	beq.n	10004c76 <strstr+0x38>
					return NULL;
				}
			} while (sc != c);
10004c60:	429f      	cmp	r7, r3
10004c62:	d1f8      	bne.n	10004c56 <strstr+0x18>
		} while (strncmp(s, find, len) != 0);
10004c64:	0029      	movs	r1, r5
10004c66:	0030      	movs	r0, r6
10004c68:	9a01      	ldr	r2, [sp, #4]
10004c6a:	f000 f818 	bl	10004c9e <strncmp>
10004c6e:	2800      	cmp	r0, #0
10004c70:	d1f1      	bne.n	10004c56 <strstr+0x18>
		s--;
	}
	return (char *)s;
}
10004c72:	0020      	movs	r0, r4
10004c74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					return NULL;
10004c76:	001c      	movs	r4, r3
10004c78:	e7fb      	b.n	10004c72 <strstr+0x34>

10004c7a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
10004c7a:	0003      	movs	r3, r0
	size_t n = 0;
10004c7c:	2000      	movs	r0, #0

	while (*s != '\0') {
10004c7e:	5c1a      	ldrb	r2, [r3, r0]
10004c80:	2a00      	cmp	r2, #0
10004c82:	d100      	bne.n	10004c86 <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
10004c84:	4770      	bx	lr
		n++;
10004c86:	3001      	adds	r0, #1
10004c88:	e7f9      	b.n	10004c7e <strlen+0x4>

10004c8a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
10004c8a:	0003      	movs	r3, r0
	size_t n = 0;
10004c8c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
10004c8e:	5c1a      	ldrb	r2, [r3, r0]
10004c90:	2a00      	cmp	r2, #0
10004c92:	d001      	beq.n	10004c98 <strnlen+0xe>
10004c94:	4288      	cmp	r0, r1
10004c96:	d100      	bne.n	10004c9a <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
10004c98:	4770      	bx	lr
		n++;
10004c9a:	3001      	adds	r0, #1
10004c9c:	e7f7      	b.n	10004c8e <strnlen+0x4>

10004c9e <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
10004c9e:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
10004ca0:	2400      	movs	r4, #0
10004ca2:	42a2      	cmp	r2, r4
10004ca4:	d008      	beq.n	10004cb8 <strncmp+0x1a>
10004ca6:	5d03      	ldrb	r3, [r0, r4]
10004ca8:	5d0d      	ldrb	r5, [r1, r4]
10004caa:	42ab      	cmp	r3, r5
10004cac:	d102      	bne.n	10004cb4 <strncmp+0x16>
10004cae:	3401      	adds	r4, #1
10004cb0:	2b00      	cmp	r3, #0
10004cb2:	d1f6      	bne.n	10004ca2 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
10004cb4:	1b58      	subs	r0, r3, r5
10004cb6:	e000      	b.n	10004cba <strncmp+0x1c>
10004cb8:	2000      	movs	r0, #0
}
10004cba:	bd30      	pop	{r4, r5, pc}

10004cbc <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
10004cbc:	2300      	movs	r3, #0
{
10004cbe:	b510      	push	{r4, lr}
	while (n > 0) {
10004cc0:	429a      	cmp	r2, r3
10004cc2:	d100      	bne.n	10004cc6 <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
10004cc4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
10004cc6:	5ccc      	ldrb	r4, [r1, r3]
10004cc8:	54c4      	strb	r4, [r0, r3]
		n--;
10004cca:	3301      	adds	r3, #1
10004ccc:	e7f8      	b.n	10004cc0 <memcpy+0x4>

10004cce <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
10004cce:	0003      	movs	r3, r0
10004cd0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
10004cd2:	1882      	adds	r2, r0, r2
10004cd4:	4293      	cmp	r3, r2
10004cd6:	d100      	bne.n	10004cda <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
10004cd8:	4770      	bx	lr
		*(d_byte++) = c_byte;
10004cda:	7019      	strb	r1, [r3, #0]
		n--;
10004cdc:	3301      	adds	r3, #1
10004cde:	e7f9      	b.n	10004cd4 <memset+0x6>

10004ce0 <_stdout_hook_default>:
	return EOF;
10004ce0:	2001      	movs	r0, #1
}
10004ce2:	4240      	negs	r0, r0
10004ce4:	4770      	bx	lr

10004ce6 <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
10004ce6:	23d0      	movs	r3, #208	; 0xd0
10004ce8:	061b      	lsls	r3, r3, #24
10004cea:	685b      	ldr	r3, [r3, #4]
}
10004cec:	2000      	movs	r0, #0
	*value = gpio_get_all();
10004cee:	600b      	str	r3, [r1, #0]
}
10004cf0:	4770      	bx	lr

10004cf2 <gpio_rpi_port_set_masked_raw>:
 * corresponding bit in \p value, leaving other pins unchanged.
 * Since this uses the TOGL alias, it is concurrency-safe with e.g. an IRQ
 * bashing different pins from the same core.
 */
static inline void gpio_put_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10004cf2:	23d0      	movs	r3, #208	; 0xd0
10004cf4:	061b      	lsls	r3, r3, #24
10004cf6:	6918      	ldr	r0, [r3, #16]
10004cf8:	4042      	eors	r2, r0
10004cfa:	4011      	ands	r1, r2
}
10004cfc:	2000      	movs	r0, #0
10004cfe:	61d9      	str	r1, [r3, #28]
10004d00:	4770      	bx	lr

10004d02 <gpio_rpi_port_set_bits_raw>:
    sio_hw->gpio_set = mask;
10004d02:	23d0      	movs	r3, #208	; 0xd0
10004d04:	061b      	lsls	r3, r3, #24
}
10004d06:	2000      	movs	r0, #0
10004d08:	6159      	str	r1, [r3, #20]
10004d0a:	4770      	bx	lr

10004d0c <gpio_rpi_port_clear_bits_raw>:
    sio_hw->gpio_clr = mask;
10004d0c:	23d0      	movs	r3, #208	; 0xd0
10004d0e:	061b      	lsls	r3, r3, #24
}
10004d10:	2000      	movs	r0, #0
10004d12:	6199      	str	r1, [r3, #24]
10004d14:	4770      	bx	lr

10004d16 <gpio_rpi_port_toggle_bits>:
    sio_hw->gpio_togl = mask;
10004d16:	23d0      	movs	r3, #208	; 0xd0
10004d18:	061b      	lsls	r3, r3, #24
}
10004d1a:	2000      	movs	r0, #0
10004d1c:	61d9      	str	r1, [r3, #28]
10004d1e:	4770      	bx	lr

10004d20 <gpio_rpi_manage_callback>:
	struct gpio_rpi_data *data = dev->data;
10004d20:	6903      	ldr	r3, [r0, #16]
{
10004d22:	b530      	push	{r4, r5, lr}
	return list->head;
10004d24:	6858      	ldr	r0, [r3, #4]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10004d26:	2400      	movs	r4, #0
	if (!sys_slist_is_empty(callbacks)) {
10004d28:	2800      	cmp	r0, #0
10004d2a:	d104      	bne.n	10004d36 <gpio_rpi_manage_callback+0x16>
	if (set) {
10004d2c:	2a00      	cmp	r2, #0
10004d2e:	d11a      	bne.n	10004d66 <gpio_rpi_manage_callback+0x46>
	return 0;
10004d30:	2000      	movs	r0, #0
}
10004d32:	bd30      	pop	{r4, r5, pc}
10004d34:	0028      	movs	r0, r5
10004d36:	4281      	cmp	r1, r0
10004d38:	d10f      	bne.n	10004d5a <gpio_rpi_manage_callback+0x3a>
	return node->next;
10004d3a:	6808      	ldr	r0, [r1, #0]
	return list->tail;
10004d3c:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
10004d3e:	2c00      	cmp	r4, #0
10004d40:	d106      	bne.n	10004d50 <gpio_rpi_manage_callback+0x30>
	list->head = node;
10004d42:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
10004d44:	428d      	cmp	r5, r1
10004d46:	d100      	bne.n	10004d4a <gpio_rpi_manage_callback+0x2a>
	list->tail = node;
10004d48:	6098      	str	r0, [r3, #8]
	parent->next = child;
10004d4a:	2000      	movs	r0, #0
10004d4c:	6008      	str	r0, [r1, #0]
10004d4e:	e7ed      	b.n	10004d2c <gpio_rpi_manage_callback+0xc>
10004d50:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
10004d52:	428d      	cmp	r5, r1
10004d54:	d1f9      	bne.n	10004d4a <gpio_rpi_manage_callback+0x2a>
	list->tail = node;
10004d56:	609c      	str	r4, [r3, #8]
}
10004d58:	e7f7      	b.n	10004d4a <gpio_rpi_manage_callback+0x2a>
	return node->next;
10004d5a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10004d5c:	0004      	movs	r4, r0
10004d5e:	2d00      	cmp	r5, #0
10004d60:	d1e8      	bne.n	10004d34 <gpio_rpi_manage_callback+0x14>
			if (!set) {
10004d62:	2a00      	cmp	r2, #0
10004d64:	d007      	beq.n	10004d76 <gpio_rpi_manage_callback+0x56>
	parent->next = child;
10004d66:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
10004d68:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
10004d6a:	600a      	str	r2, [r1, #0]
	list->head = node;
10004d6c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
10004d6e:	2800      	cmp	r0, #0
10004d70:	d1de      	bne.n	10004d30 <gpio_rpi_manage_callback+0x10>
	list->tail = node;
10004d72:	6099      	str	r1, [r3, #8]
}
10004d74:	e7dd      	b.n	10004d32 <gpio_rpi_manage_callback+0x12>
				return -EINVAL;
10004d76:	2016      	movs	r0, #22
10004d78:	4240      	negs	r0, r0
	return gpio_manage_callback(&data->callbacks, callback, set);
10004d7a:	e7da      	b.n	10004d32 <gpio_rpi_manage_callback+0x12>

10004d7c <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
10004d7c:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
10004d7e:	6843      	ldr	r3, [r0, #4]
10004d80:	685b      	ldr	r3, [r3, #4]
10004d82:	4798      	blx	r3
	return 0;
}
10004d84:	2000      	movs	r0, #0
10004d86:	bd10      	pop	{r4, pc}

10004d88 <gpio_rpi_pin_interrupt_configure>:
{
10004d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004d8a:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
10004d8c:	6907      	ldr	r7, [r0, #16]
{
10004d8e:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10004d90:	210f      	movs	r1, #15
10004d92:	2200      	movs	r2, #0
10004d94:	0028      	movs	r0, r5
{
10004d96:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10004d98:	f7fe fbb4 	bl	10003504 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10004d9c:	2301      	movs	r3, #1
10004d9e:	40ab      	lsls	r3, r5
10004da0:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
10004da2:	2380      	movs	r3, #128	; 0x80
10004da4:	039b      	lsls	r3, r3, #14
10004da6:	429e      	cmp	r6, r3
10004da8:	d01e      	beq.n	10004de8 <gpio_rpi_pin_interrupt_configure+0x60>
			if (trig & GPIO_INT_LOW_0) {
10004daa:	2180      	movs	r1, #128	; 0x80
			if (trig & GPIO_INT_HIGH_1) {
10004dac:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
10004dae:	0489      	lsls	r1, r1, #18
			if (trig & GPIO_INT_HIGH_1) {
10004db0:	04db      	lsls	r3, r3, #19
			if (trig & GPIO_INT_LOW_0) {
10004db2:	4021      	ands	r1, r4
			if (trig & GPIO_INT_HIGH_1) {
10004db4:	401c      	ands	r4, r3
		if (mode & GPIO_INT_EDGE) {
10004db6:	01f3      	lsls	r3, r6, #7
10004db8:	d50f      	bpl.n	10004dda <gpio_rpi_pin_interrupt_configure+0x52>
			if (trig & GPIO_INT_LOW_0) {
10004dba:	2900      	cmp	r1, #0
10004dbc:	d000      	beq.n	10004dc0 <gpio_rpi_pin_interrupt_configure+0x38>
				events |= GPIO_IRQ_EDGE_FALL;
10004dbe:	2104      	movs	r1, #4
				events |= GPIO_IRQ_EDGE_RISE;
10004dc0:	2308      	movs	r3, #8
			if (trig & GPIO_INT_HIGH_1) {
10004dc2:	2c00      	cmp	r4, #0
10004dc4:	d10e      	bne.n	10004de4 <gpio_rpi_pin_interrupt_configure+0x5c>
		gpio_set_irq_enabled(pin, events, true);
10004dc6:	2201      	movs	r2, #1
10004dc8:	0028      	movs	r0, r5
10004dca:	f7fe fb9b 	bl	10003504 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10004dce:	9b01      	ldr	r3, [sp, #4]
10004dd0:	68fa      	ldr	r2, [r7, #12]
10004dd2:	4313      	orrs	r3, r2
}
10004dd4:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10004dd6:	60fb      	str	r3, [r7, #12]
}
10004dd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				events |= GPIO_IRQ_LEVEL_LOW;
10004dda:	1e4b      	subs	r3, r1, #1
10004ddc:	4199      	sbcs	r1, r3
			if (trig & GPIO_INT_HIGH_1) {
10004dde:	2c00      	cmp	r4, #0
10004de0:	d0f1      	beq.n	10004dc6 <gpio_rpi_pin_interrupt_configure+0x3e>
				events |= GPIO_IRQ_LEVEL_HIGH;
10004de2:	2302      	movs	r3, #2
10004de4:	4319      	orrs	r1, r3
10004de6:	e7ee      	b.n	10004dc6 <gpio_rpi_pin_interrupt_configure+0x3e>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10004de8:	68fb      	ldr	r3, [r7, #12]
10004dea:	9a01      	ldr	r2, [sp, #4]
10004dec:	4393      	bics	r3, r2
10004dee:	e7f1      	b.n	10004dd4 <gpio_rpi_pin_interrupt_configure+0x4c>

10004df0 <gpio_rpi_configure>:
{
10004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flags & GPIO_SINGLE_ENDED) {
10004df2:	2302      	movs	r3, #2
{
10004df4:	000e      	movs	r6, r1
10004df6:	0014      	movs	r4, r2
	if (flags & GPIO_SINGLE_ENDED) {
10004df8:	421a      	tst	r2, r3
10004dfa:	d129      	bne.n	10004e50 <gpio_rpi_configure+0x60>
	gpio_set_function(pin, GPIO_FUNC_SIO);
10004dfc:	2105      	movs	r1, #5
10004dfe:	0030      	movs	r0, r6
10004e00:	f7fe fb1c 	bl	1000343c <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
10004e04:	2380      	movs	r3, #128	; 0x80
10004e06:	029b      	lsls	r3, r3, #10
10004e08:	421c      	tst	r4, r3
10004e0a:	d011      	beq.n	10004e30 <gpio_rpi_configure+0x40>
 *
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
10004e0c:	2301      	movs	r3, #1
    sio_hw->gpio_oe_set = mask;
10004e0e:	22d0      	movs	r2, #208	; 0xd0
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
10004e10:	2180      	movs	r1, #128	; 0x80
    uint32_t mask = 1ul << gpio;
10004e12:	40b3      	lsls	r3, r6
10004e14:	0020      	movs	r0, r4
    sio_hw->gpio_oe_set = mask;
10004e16:	0612      	lsls	r2, r2, #24
10004e18:	0309      	lsls	r1, r1, #12
10004e1a:	6253      	str	r3, [r2, #36]	; 0x24
10004e1c:	4008      	ands	r0, r1
10004e1e:	420c      	tst	r4, r1
10004e20:	d002      	beq.n	10004e28 <gpio_rpi_configure+0x38>
    sio_hw->gpio_set = mask;
10004e22:	6153      	str	r3, [r2, #20]
	return 0;
10004e24:	2000      	movs	r0, #0
}
10004e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
10004e28:	0361      	lsls	r1, r4, #13
10004e2a:	d5fb      	bpl.n	10004e24 <gpio_rpi_configure+0x34>
    sio_hw->gpio_clr = mask;
10004e2c:	6193      	str	r3, [r2, #24]
}
10004e2e:	e7fa      	b.n	10004e26 <gpio_rpi_configure+0x36>
	} else if (flags & GPIO_INPUT) {
10004e30:	03e3      	lsls	r3, r4, #15
10004e32:	d5f7      	bpl.n	10004e24 <gpio_rpi_configure+0x34>
    uint32_t mask = 1ul << gpio;
10004e34:	2301      	movs	r3, #1
10004e36:	0019      	movs	r1, r3
    sio_hw->gpio_oe_clr = mask;
10004e38:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
10004e3a:	40b1      	lsls	r1, r6
    sio_hw->gpio_oe_clr = mask;
10004e3c:	0612      	lsls	r2, r2, #24
10004e3e:	6291      	str	r1, [r2, #40]	; 0x28
		gpio_set_pulls(pin,
10004e40:	0962      	lsrs	r2, r4, #5
10004e42:	0921      	lsrs	r1, r4, #4
10004e44:	0030      	movs	r0, r6
10004e46:	401a      	ands	r2, r3
10004e48:	4019      	ands	r1, r3
10004e4a:	f7fe fb0d 	bl	10003468 <gpio_set_pulls>
10004e4e:	e7e9      	b.n	10004e24 <gpio_rpi_configure+0x34>
		return -ENOTSUP;
10004e50:	2086      	movs	r0, #134	; 0x86
10004e52:	4240      	negs	r0, r0
10004e54:	e7e7      	b.n	10004e26 <gpio_rpi_configure+0x36>

10004e56 <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
10004e56:	b510      	push	{r4, lr}
10004e58:	2200      	movs	r2, #0
10004e5a:	2103      	movs	r1, #3
10004e5c:	200d      	movs	r0, #13
10004e5e:	f7fd fc21 	bl	100026a4 <z_arm_irq_priority_set>
10004e62:	200d      	movs	r0, #13
10004e64:	f7fd fc12 	bl	1000268c <arch_irq_enable>
10004e68:	bd10      	pop	{r4, pc}

10004e6a <i2c_dw_runtime_configure>:
{
10004e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (I2C_SPEED_GET(dw->app_config)) {
10004e6c:	2407      	movs	r4, #7
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004e6e:	6842      	ldr	r2, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10004e70:	6903      	ldr	r3, [r0, #16]
	switch (I2C_SPEED_GET(dw->app_config)) {
10004e72:	084d      	lsrs	r5, r1, #1
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004e74:	6812      	ldr	r2, [r2, #0]
	switch (I2C_SPEED_GET(dw->app_config)) {
10004e76:	402c      	ands	r4, r5
	dw->app_config = config;
10004e78:	6119      	str	r1, [r3, #16]
	switch (I2C_SPEED_GET(dw->app_config)) {
10004e7a:	0768      	lsls	r0, r5, #29
10004e7c:	d409      	bmi.n	10004e92 <i2c_dw_runtime_configure+0x28>
10004e7e:	2606      	movs	r6, #6
10004e80:	0028      	movs	r0, r5
10004e82:	4030      	ands	r0, r6
10004e84:	4235      	tst	r5, r6
10004e86:	d129      	bne.n	10004edc <i2c_dw_runtime_configure+0x72>
10004e88:	2c01      	cmp	r4, #1
10004e8a:	d00c      	beq.n	10004ea6 <i2c_dw_runtime_configure+0x3c>
			rc = -EINVAL;
10004e8c:	2016      	movs	r0, #22
10004e8e:	4240      	negs	r0, r0
10004e90:	e01f      	b.n	10004ed2 <i2c_dw_runtime_configure+0x68>
	switch (I2C_SPEED_GET(dw->app_config)) {
10004e92:	2c04      	cmp	r4, #4
10004e94:	d1fa      	bne.n	10004e8c <i2c_dw_runtime_configure+0x22>
		if (dw->support_hs_mode) {
10004e96:	0018      	movs	r0, r3
10004e98:	3008      	adds	r0, #8
10004e9a:	7fc0      	ldrb	r0, [r0, #31]
10004e9c:	2800      	cmp	r0, #0
10004e9e:	d0f5      	beq.n	10004e8c <i2c_dw_runtime_configure+0x22>
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)
10004ea0:	0014      	movs	r4, r2
10004ea2:	34a4      	adds	r4, #164	; 0xa4
10004ea4:	e01c      	b.n	10004ee0 <i2c_dw_runtime_configure+0x76>
DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
10004ea6:	0015      	movs	r5, r2
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
10004ea8:	27fa      	movs	r7, #250	; 0xfa
10004eaa:	35a0      	adds	r5, #160	; 0xa0
	return *(volatile uint32_t *)addr;
10004eac:	682e      	ldr	r6, [r5, #0]
10004eae:	007f      	lsls	r7, r7, #1
10004eb0:	3607      	adds	r6, #7
			value = I2C_STD_LCNT;
10004eb2:	003c      	movs	r4, r7
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
10004eb4:	42be      	cmp	r6, r7
10004eb6:	d301      	bcc.n	10004ebc <i2c_dw_runtime_configure+0x52>
10004eb8:	682c      	ldr	r4, [r5, #0]
			value = read_fs_spklen(reg_base) + 8;
10004eba:	3408      	adds	r4, #8
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
10004ebc:	27c8      	movs	r7, #200	; 0xc8
10004ebe:	682e      	ldr	r6, [r5, #0]
10004ec0:	007f      	lsls	r7, r7, #1
10004ec2:	3605      	adds	r6, #5
		dw->lcnt = value;
10004ec4:	845c      	strh	r4, [r3, #34]	; 0x22
			value = I2C_STD_HCNT;
10004ec6:	003c      	movs	r4, r7
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
10004ec8:	42be      	cmp	r6, r7
10004eca:	d301      	bcc.n	10004ed0 <i2c_dw_runtime_configure+0x66>
10004ecc:	682c      	ldr	r4, [r5, #0]
			value = read_fs_spklen(reg_base) + 6;
10004ece:	3406      	adds	r4, #6
		dw->hcnt = value;
10004ed0:	841c      	strh	r4, [r3, #32]
10004ed2:	6c12      	ldr	r2, [r2, #64]	; 0x40
	dw->app_config |= I2C_MODE_CONTROLLER;
10004ed4:	2210      	movs	r2, #16
10004ed6:	4311      	orrs	r1, r2
10004ed8:	6119      	str	r1, [r3, #16]
}
10004eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004edc:	0014      	movs	r4, r2
10004ede:	34a0      	adds	r4, #160	; 0xa0
10004ee0:	6825      	ldr	r5, [r4, #0]
				value = I2C_HS_LCNT;
10004ee2:	2057      	movs	r0, #87	; 0x57
			if (I2C_HS_LCNT <= (read_hs_spklen(reg_base) + 7)) {
10004ee4:	3507      	adds	r5, #7
10004ee6:	2d56      	cmp	r5, #86	; 0x56
10004ee8:	d901      	bls.n	10004eee <i2c_dw_runtime_configure+0x84>
10004eea:	6820      	ldr	r0, [r4, #0]
				value = read_hs_spklen(reg_base) + 8;
10004eec:	3008      	adds	r0, #8
10004eee:	6825      	ldr	r5, [r4, #0]
			dw->lcnt = value;
10004ef0:	8458      	strh	r0, [r3, #34]	; 0x22
			if (I2C_HS_HCNT <= (read_hs_spklen(reg_base) + 5)) {
10004ef2:	3505      	adds	r5, #5
				value = I2C_HS_HCNT;
10004ef4:	204b      	movs	r0, #75	; 0x4b
			if (I2C_HS_HCNT <= (read_hs_spklen(reg_base) + 5)) {
10004ef6:	2d4a      	cmp	r5, #74	; 0x4a
10004ef8:	d901      	bls.n	10004efe <i2c_dw_runtime_configure+0x94>
10004efa:	6820      	ldr	r0, [r4, #0]
				value = read_hs_spklen(reg_base) + 6;
10004efc:	3006      	adds	r0, #6
			dw->hcnt = value;
10004efe:	8418      	strh	r0, [r3, #32]
	uint32_t	rc = 0U;
10004f00:	2000      	movs	r0, #0
10004f02:	e7e6      	b.n	10004ed2 <i2c_dw_runtime_configure+0x68>

10004f04 <i2c_config_0>:
			      &i2c_##n##_runtime, &i2c_config_dw_##n,         \
			      POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,          \
			      &funcs);                                        \
	I2C_DW_IRQ_CONFIG(n)

DT_INST_FOREACH_STATUS_OKAY(I2C_DEVICE_INIT_DW)
10004f04:	b510      	push	{r4, lr}
10004f06:	2200      	movs	r2, #0
10004f08:	2103      	movs	r1, #3
10004f0a:	2017      	movs	r0, #23
10004f0c:	f7fd fbca 	bl	100026a4 <z_arm_irq_priority_set>
10004f10:	2017      	movs	r0, #23
10004f12:	f7fd fbbb 	bl	1000268c <arch_irq_enable>
10004f16:	bd10      	pop	{r4, pc}

10004f18 <i2c_config_1>:
10004f18:	b510      	push	{r4, lr}
10004f1a:	2200      	movs	r2, #0
10004f1c:	2103      	movs	r1, #3
10004f1e:	2018      	movs	r0, #24
10004f20:	f7fd fbc0 	bl	100026a4 <z_arm_irq_priority_set>
10004f24:	2018      	movs	r0, #24
10004f26:	f7fd fbb1 	bl	1000268c <arch_irq_enable>
10004f2a:	bd10      	pop	{r4, pc}

10004f2c <i2c_dw_isr>:
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004f2c:	6843      	ldr	r3, [r0, #4]
{
10004f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004f30:	681b      	ldr	r3, [r3, #0]
{
10004f32:	b085      	sub	sp, #20
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004f34:	469c      	mov	ip, r3
10004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
10004f38:	9001      	str	r0, [sp, #4]
10004f3a:	9302      	str	r3, [sp, #8]
10004f3c:	4663      	mov	r3, ip
10004f3e:	681b      	ldr	r3, [r3, #0]
	if (test_bit_con_master_mode(reg_base)) {
10004f40:	07db      	lsls	r3, r3, #31
10004f42:	d510      	bpl.n	10004f66 <i2c_dw_isr+0x3a>
		     DW_INTR_STAT_RX_OVER | DW_INTR_STAT_RX_UNDER) &
10004f44:	224b      	movs	r2, #75	; 0x4b
	struct i2c_dw_dev_config * const dw = port->data;
10004f46:	6901      	ldr	r1, [r0, #16]
		if ((DW_INTR_STAT_TX_ABRT | DW_INTR_STAT_TX_OVER |
10004f48:	9802      	ldr	r0, [sp, #8]
10004f4a:	2304      	movs	r3, #4
10004f4c:	4210      	tst	r0, r2
10004f4e:	d00c      	beq.n	10004f6a <i2c_dw_isr+0x3e>
			dw->state = I2C_DW_CMD_ERROR;
10004f50:	3105      	adds	r1, #5
10004f52:	77cb      	strb	r3, [r1, #31]
	*(volatile uint32_t *)addr = data;
10004f54:	2200      	movs	r2, #0
	struct i2c_dw_dev_config * const dw = dev->data;
10004f56:	9b01      	ldr	r3, [sp, #4]
10004f58:	6918      	ldr	r0, [r3, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004f5a:	685b      	ldr	r3, [r3, #4]
10004f5c:	681b      	ldr	r3, [r3, #0]
10004f5e:	631a      	str	r2, [r3, #48]	; 0x30
	return *(volatile uint32_t *)addr;
10004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	z_impl_k_sem_give(sem);
10004f62:	f7fe fd8d 	bl	10003a80 <z_impl_k_sem_give>
}
10004f66:	b005      	add	sp, #20
10004f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (intr_stat.bits.rx_full) {
10004f6a:	466a      	mov	r2, sp
10004f6c:	9802      	ldr	r0, [sp, #8]
	return temp & (1 << bit);
10004f6e:	2408      	movs	r4, #8
10004f70:	7a12      	ldrb	r2, [r2, #8]
10004f72:	4218      	tst	r0, r3
10004f74:	d124      	bne.n	10004fc0 <i2c_dw_isr+0x94>
		if ((dw->xfr_flags & I2C_MSG_RW_MASK)
10004f76:	1dcb      	adds	r3, r1, #7
10004f78:	7fd8      	ldrb	r0, [r3, #31]
10004f7a:	2301      	movs	r3, #1
10004f7c:	0005      	movs	r5, r0
10004f7e:	401d      	ands	r5, r3
10004f80:	4218      	tst	r0, r3
10004f82:	d005      	beq.n	10004f90 <i2c_dw_isr+0x64>
	uint32_t temp = *(volatile uint32_t *)addr;
10004f84:	4663      	mov	r3, ip
10004f86:	6b18      	ldr	r0, [r3, #48]	; 0x30
	*(volatile uint32_t *)addr = temp | (1 << bit);
10004f88:	2310      	movs	r3, #16
10004f8a:	4303      	orrs	r3, r0
10004f8c:	4660      	mov	r0, ip
10004f8e:	6303      	str	r3, [r0, #48]	; 0x30
		if (intr_stat.bits.tx_empty) {
10004f90:	2310      	movs	r3, #16
10004f92:	421a      	tst	r2, r3
10004f94:	d124      	bne.n	10004fe0 <i2c_dw_isr+0xb4>
		if (intr_stat.bits.stop_det) {
10004f96:	9b02      	ldr	r3, [sp, #8]
10004f98:	059b      	lsls	r3, r3, #22
10004f9a:	d5e4      	bpl.n	10004f66 <i2c_dw_isr+0x3a>
10004f9c:	4663      	mov	r3, ip
10004f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
			goto done;
10004fa0:	e7d8      	b.n	10004f54 <i2c_dw_isr+0x28>
10004fa2:	4663      	mov	r3, ip
		dw->xfr_buf[0] = (uint8_t)read_cmd_data(reg_base);
10004fa4:	6948      	ldr	r0, [r1, #20]
10004fa6:	691b      	ldr	r3, [r3, #16]
10004fa8:	7003      	strb	r3, [r0, #0]
		dw->xfr_buf++;
10004faa:	694b      	ldr	r3, [r1, #20]
		dw->rx_pending--;
10004fac:	69c8      	ldr	r0, [r1, #28]
		dw->xfr_buf++;
10004fae:	3301      	adds	r3, #1
10004fb0:	614b      	str	r3, [r1, #20]
		dw->xfr_len--;
10004fb2:	698b      	ldr	r3, [r1, #24]
		dw->rx_pending--;
10004fb4:	3801      	subs	r0, #1
		dw->xfr_len--;
10004fb6:	3b01      	subs	r3, #1
10004fb8:	618b      	str	r3, [r1, #24]
		dw->rx_pending--;
10004fba:	61c8      	str	r0, [r1, #28]
		if (dw->xfr_len == 0U) {
10004fbc:	2b00      	cmp	r3, #0
10004fbe:	d006      	beq.n	10004fce <i2c_dw_isr+0xa2>
	uint32_t temp = *(volatile uint32_t *)addr;
10004fc0:	4663      	mov	r3, ip
10004fc2:	6f18      	ldr	r0, [r3, #112]	; 0x70
	while (test_bit_status_rfne(reg_base) && (dw->xfr_len > 0)) {
10004fc4:	698b      	ldr	r3, [r1, #24]
10004fc6:	4220      	tst	r0, r4
10004fc8:	d007      	beq.n	10004fda <i2c_dw_isr+0xae>
10004fca:	2b00      	cmp	r3, #0
10004fcc:	d1e9      	bne.n	10004fa2 <i2c_dw_isr+0x76>
		dw->state &= ~I2C_DW_CMD_RECV;
10004fce:	2402      	movs	r4, #2
10004fd0:	1d48      	adds	r0, r1, #5
10004fd2:	7fc3      	ldrb	r3, [r0, #31]
10004fd4:	43a3      	bics	r3, r4
10004fd6:	77c3      	strb	r3, [r0, #31]
		return;
10004fd8:	e7cd      	b.n	10004f76 <i2c_dw_isr+0x4a>
	if (dw->xfr_len == 0U) {
10004fda:	2b00      	cmp	r3, #0
10004fdc:	d1cb      	bne.n	10004f76 <i2c_dw_isr+0x4a>
10004fde:	e7f6      	b.n	10004fce <i2c_dw_isr+0xa2>
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004fe0:	9801      	ldr	r0, [sp, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10004fe2:	9a01      	ldr	r2, [sp, #4]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004fe4:	6840      	ldr	r0, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10004fe6:	6912      	ldr	r2, [r2, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004fe8:	6804      	ldr	r4, [r0, #0]
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
10004fea:	2d00      	cmp	r5, #0
10004fec:	d13f      	bne.n	1000506e <i2c_dw_isr+0x142>
	if (dw->xfr_len == 0U) {
10004fee:	6990      	ldr	r0, [r2, #24]
10004ff0:	2800      	cmp	r0, #0
10004ff2:	d136      	bne.n	10005062 <i2c_dw_isr+0x136>
	uint32_t temp = *(volatile uint32_t *)addr;
10004ff4:	6b20      	ldr	r0, [r4, #48]	; 0x30
		dw->state &= ~I2C_DW_CMD_SEND;
10004ff6:	3205      	adds	r2, #5
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10004ff8:	4398      	bics	r0, r3
10004ffa:	6320      	str	r0, [r4, #48]	; 0x30
10004ffc:	2001      	movs	r0, #1
10004ffe:	7fd3      	ldrb	r3, [r2, #31]
10005000:	4383      	bics	r3, r0
10005002:	77d3      	strb	r3, [r2, #31]
			if (((dw->xfr_len == 0U)
10005004:	698b      	ldr	r3, [r1, #24]
10005006:	2b00      	cmp	r3, #0
10005008:	d103      	bne.n	10005012 <i2c_dw_isr+0xe6>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
1000500a:	3107      	adds	r1, #7
1000500c:	7fcb      	ldrb	r3, [r1, #31]
1000500e:	079b      	lsls	r3, r3, #30
10005010:	d5a0      	bpl.n	10004f54 <i2c_dw_isr+0x28>
			    || (ret != 0)) {
10005012:	2d00      	cmp	r5, #0
10005014:	d0bf      	beq.n	10004f96 <i2c_dw_isr+0x6a>
10005016:	e79d      	b.n	10004f54 <i2c_dw_isr+0x28>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
10005018:	6995      	ldr	r5, [r2, #24]
1000501a:	2d00      	cmp	r5, #0
1000501c:	d025      	beq.n	1000506a <i2c_dw_isr+0x13e>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
1000501e:	2704      	movs	r7, #4
		data = dw->xfr_buf[0];
10005020:	6953      	ldr	r3, [r2, #20]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10005022:	1dd6      	adds	r6, r2, #7
		data = dw->xfr_buf[0];
10005024:	9303      	str	r3, [sp, #12]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10005026:	7ff0      	ldrb	r0, [r6, #31]
		data = dw->xfr_buf[0];
10005028:	781b      	ldrb	r3, [r3, #0]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
1000502a:	4238      	tst	r0, r7
1000502c:	d005      	beq.n	1000503a <i2c_dw_isr+0x10e>
			data |= IC_DATA_CMD_RESTART;
1000502e:	2780      	movs	r7, #128	; 0x80
10005030:	00ff      	lsls	r7, r7, #3
10005032:	433b      	orrs	r3, r7
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
10005034:	2704      	movs	r7, #4
10005036:	43b8      	bics	r0, r7
10005038:	77f0      	strb	r0, [r6, #31]
		if ((dw->xfr_len == 1U) && (dw->xfr_flags & I2C_MSG_STOP)) {
1000503a:	2d01      	cmp	r5, #1
1000503c:	d107      	bne.n	1000504e <i2c_dw_isr+0x122>
1000503e:	1dd0      	adds	r0, r2, #7
10005040:	7fc0      	ldrb	r0, [r0, #31]
10005042:	3501      	adds	r5, #1
10005044:	4228      	tst	r0, r5
10005046:	d002      	beq.n	1000504e <i2c_dw_isr+0x122>
			data |= IC_DATA_CMD_STOP;
10005048:	2080      	movs	r0, #128	; 0x80
1000504a:	0080      	lsls	r0, r0, #2
1000504c:	4303      	orrs	r3, r0
	*(volatile uint32_t *)addr = data;
1000504e:	6123      	str	r3, [r4, #16]
		dw->xfr_len--;
10005050:	6993      	ldr	r3, [r2, #24]
10005052:	3b01      	subs	r3, #1
10005054:	6193      	str	r3, [r2, #24]
		dw->xfr_buf++;
10005056:	9b03      	ldr	r3, [sp, #12]
10005058:	3301      	adds	r3, #1
1000505a:	6153      	str	r3, [r2, #20]
	uint32_t temp = *(volatile uint32_t *)addr;
1000505c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		if (test_bit_intr_stat_tx_abrt(reg_base)) {
1000505e:	065b      	lsls	r3, r3, #25
10005060:	d456      	bmi.n	10005110 <i2c_dw_isr+0x1e4>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
10005062:	2002      	movs	r0, #2
10005064:	6f23      	ldr	r3, [r4, #112]	; 0x70
10005066:	4203      	tst	r3, r0
10005068:	d1d6      	bne.n	10005018 <i2c_dw_isr+0xec>
	return 0;
1000506a:	2500      	movs	r5, #0
1000506c:	e7ca      	b.n	10005004 <i2c_dw_isr+0xd8>
	if (dw->request_bytes == 0U) {
1000506e:	1d90      	adds	r0, r2, #6
10005070:	7fc5      	ldrb	r5, [r0, #31]
10005072:	2d00      	cmp	r5, #0
10005074:	d103      	bne.n	1000507e <i2c_dw_isr+0x152>
	uint32_t temp = *(volatile uint32_t *)addr;
10005076:	6b22      	ldr	r2, [r4, #48]	; 0x30
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10005078:	439a      	bics	r2, r3
1000507a:	6322      	str	r2, [r4, #48]	; 0x30
DEFINE_CLEAR_BIT_OP(intr_mask_tx_empty, DW_IC_REG_INTR_MASK, DW_IC_INTR_MASK_TX_EMPTY_BIT)
1000507c:	e7c2      	b.n	10005004 <i2c_dw_isr+0xd8>
DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
1000507e:	0023      	movs	r3, r4
10005080:	33f4      	adds	r3, #244	; 0xf4
	return *(volatile uint32_t *)addr;
10005082:	681b      	ldr	r3, [r3, #0]
10005084:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
10005086:	041e      	lsls	r6, r3, #16
10005088:	0e36      	lsrs	r6, r6, #24
1000508a:	3601      	adds	r6, #1
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
1000508c:	69d7      	ldr	r7, [r2, #28]
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
1000508e:	b2f6      	uxtb	r6, r6
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
10005090:	1a30      	subs	r0, r6, r0
10005092:	1bc0      	subs	r0, r0, r7
10005094:	b247      	sxtb	r7, r0
	if (rx_empty < 0) {
10005096:	0600      	lsls	r0, r0, #24
10005098:	d4e7      	bmi.n	1000506a <i2c_dw_isr+0x13e>
	tx_buffer_depth = ic_comp_param_1.bits.tx_buffer_depth + 1;
1000509a:	021b      	lsls	r3, r3, #8
1000509c:	6f60      	ldr	r0, [r4, #116]	; 0x74
1000509e:	0e1b      	lsrs	r3, r3, #24
100050a0:	3301      	adds	r3, #1
	tx_empty = tx_buffer_depth - read_txflr(reg_base);
100050a2:	1a1b      	subs	r3, r3, r0
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
100050a4:	b2d8      	uxtb	r0, r3
	cnt = MIN(rx_buffer_depth, dw->request_bytes);
100050a6:	1c2b      	adds	r3, r5, #0
100050a8:	42b5      	cmp	r5, r6
100050aa:	d900      	bls.n	100050ae <i2c_dw_isr+0x182>
100050ac:	1c33      	adds	r3, r6, #0
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
100050ae:	b2dd      	uxtb	r5, r3
100050b0:	0003      	movs	r3, r0
100050b2:	42a8      	cmp	r0, r5
100050b4:	dd00      	ble.n	100050b8 <i2c_dw_isr+0x18c>
100050b6:	002b      	movs	r3, r5
100050b8:	42bb      	cmp	r3, r7
100050ba:	dd00      	ble.n	100050be <i2c_dw_isr+0x192>
100050bc:	003b      	movs	r3, r7
		if (dw->xfr_flags & I2C_MSG_RESTART) {
100050be:	2604      	movs	r6, #4
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
100050c0:	b2db      	uxtb	r3, r3
	while (cnt > 0) {
100050c2:	2b00      	cmp	r3, #0
100050c4:	d0d1      	beq.n	1000506a <i2c_dw_isr+0x13e>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
100050c6:	1dd5      	adds	r5, r2, #7
100050c8:	7fe8      	ldrb	r0, [r5, #31]
100050ca:	4230      	tst	r0, r6
100050cc:	d01d      	beq.n	1000510a <i2c_dw_isr+0x1de>
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
100050ce:	43b0      	bics	r0, r6
100050d0:	77e8      	strb	r0, [r5, #31]
			data |= IC_DATA_CMD_RESTART;
100050d2:	20a0      	movs	r0, #160	; 0xa0
100050d4:	00c0      	lsls	r0, r0, #3
		if ((dw->xfr_flags & I2C_MSG_STOP)
100050d6:	2702      	movs	r7, #2
100050d8:	7fed      	ldrb	r5, [r5, #31]
100050da:	423d      	tst	r5, r7
100050dc:	d006      	beq.n	100050ec <i2c_dw_isr+0x1c0>
		    && (dw->request_bytes == 1U)) {
100050de:	1d95      	adds	r5, r2, #6
100050e0:	7fed      	ldrb	r5, [r5, #31]
100050e2:	2d01      	cmp	r5, #1
100050e4:	d102      	bne.n	100050ec <i2c_dw_isr+0x1c0>
			data |= IC_DATA_CMD_STOP;
100050e6:	2580      	movs	r5, #128	; 0x80
100050e8:	00ad      	lsls	r5, r5, #2
100050ea:	4328      	orrs	r0, r5
100050ec:	2710      	movs	r7, #16
	uint32_t temp = *(volatile uint32_t *)addr;
100050ee:	6b25      	ldr	r5, [r4, #48]	; 0x30
		cnt--;
100050f0:	3b01      	subs	r3, #1
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
100050f2:	43bd      	bics	r5, r7
100050f4:	6325      	str	r5, [r4, #48]	; 0x30
	*(volatile uint32_t *)addr = data;
100050f6:	6120      	str	r0, [r4, #16]
		dw->rx_pending++;
100050f8:	69d0      	ldr	r0, [r2, #28]
		dw->request_bytes--;
100050fa:	1d95      	adds	r5, r2, #6
		dw->rx_pending++;
100050fc:	3001      	adds	r0, #1
100050fe:	61d0      	str	r0, [r2, #28]
		dw->request_bytes--;
10005100:	7fe8      	ldrb	r0, [r5, #31]
		cnt--;
10005102:	b2db      	uxtb	r3, r3
		dw->request_bytes--;
10005104:	3801      	subs	r0, #1
10005106:	77e8      	strb	r0, [r5, #31]
		cnt--;
10005108:	e7db      	b.n	100050c2 <i2c_dw_isr+0x196>
		data = IC_DATA_CMD_CMD;
1000510a:	2080      	movs	r0, #128	; 0x80
1000510c:	0040      	lsls	r0, r0, #1
1000510e:	e7e2      	b.n	100050d6 <i2c_dw_isr+0x1aa>
			return -EIO;
10005110:	2505      	movs	r5, #5
10005112:	426d      	negs	r5, r5
10005114:	e776      	b.n	10005004 <i2c_dw_isr+0xd8>

10005116 <led_pwm_blink>:
	const struct pwm_dt_spec *led;
};

static int led_pwm_blink(const struct device *dev, uint32_t led,
			 uint32_t delay_on, uint32_t delay_off)
{
10005116:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct led_pwm_config *config = dev->config;
10005118:	6840      	ldr	r0, [r0, #4]
	const struct pwm_dt_spec *dt_led;
	uint32_t period_usec, pulse_usec;

	if (led >= config->num_leds) {
1000511a:	6804      	ldr	r4, [r0, #0]
1000511c:	428c      	cmp	r4, r1
1000511e:	d932      	bls.n	10005186 <led_pwm_blink+0x70>
	return __builtin_add_overflow(a, b, result);
}

static inline bool u32_add_overflow(uint32_t a, uint32_t b, uint32_t *result)
{
	return __builtin_add_overflow(a, b, result);
10005120:	18d3      	adds	r3, r2, r3
10005122:	4293      	cmp	r3, r2
10005124:	d32f      	bcc.n	10005186 <led_pwm_blink+0x70>
	return __builtin_mul_overflow(a, b, result);
}

static inline bool u32_mul_overflow(uint32_t a, uint32_t b, uint32_t *result)
{
	return __builtin_mul_overflow(a, b, result);
10005126:	25fa      	movs	r5, #250	; 0xfa
10005128:	0c1c      	lsrs	r4, r3, #16
1000512a:	00ad      	lsls	r5, r5, #2
1000512c:	b29b      	uxth	r3, r3
1000512e:	2c00      	cmp	r4, #0
10005130:	d115      	bne.n	1000515e <led_pwm_blink+0x48>
10005132:	002c      	movs	r4, r5
10005134:	435c      	muls	r4, r3
10005136:	23fa      	movs	r3, #250	; 0xfa
10005138:	0c15      	lsrs	r5, r2, #16
1000513a:	009b      	lsls	r3, r3, #2
1000513c:	b292      	uxth	r2, r2
1000513e:	2d00      	cmp	r5, #0
10005140:	d117      	bne.n	10005172 <led_pwm_blink+0x5c>
10005142:	4353      	muls	r3, r2
		return -EINVAL;
	}

	dt_led = &config->led[led];

	return pwm_set_dt(dt_led, PWM_USEC(period_usec), PWM_USEC(pulse_usec));
10005144:	22fa      	movs	r2, #250	; 0xfa
	dt_led = &config->led[led];
10005146:	6840      	ldr	r0, [r0, #4]
10005148:	0109      	lsls	r1, r1, #4
1000514a:	1840      	adds	r0, r0, r1
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
			     uint32_t pulse)
{
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
1000514c:	8981      	ldrh	r1, [r0, #12]
	return pwm_set_dt(dt_led, PWM_USEC(period_usec), PWM_USEC(pulse_usec));
1000514e:	0092      	lsls	r2, r2, #2
10005150:	9100      	str	r1, [sp, #0]
10005152:	4353      	muls	r3, r2
10005154:	c803      	ldmia	r0, {r0, r1}
10005156:	4362      	muls	r2, r4
10005158:	f7fd fde4 	bl	10002d24 <pwm_set>
}
1000515c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000515e:	436b      	muls	r3, r5
10005160:	436c      	muls	r4, r5
10005162:	0c1d      	lsrs	r5, r3, #16
10005164:	1964      	adds	r4, r4, r5
10005166:	0c25      	lsrs	r5, r4, #16
10005168:	d10d      	bne.n	10005186 <led_pwm_blink+0x70>
1000516a:	0424      	lsls	r4, r4, #16
1000516c:	b29b      	uxth	r3, r3
1000516e:	431c      	orrs	r4, r3
10005170:	e7e1      	b.n	10005136 <led_pwm_blink+0x20>
10005172:	435a      	muls	r2, r3
10005174:	436b      	muls	r3, r5
10005176:	0c15      	lsrs	r5, r2, #16
10005178:	195b      	adds	r3, r3, r5
1000517a:	0c1d      	lsrs	r5, r3, #16
1000517c:	d103      	bne.n	10005186 <led_pwm_blink+0x70>
1000517e:	041b      	lsls	r3, r3, #16
10005180:	b292      	uxth	r2, r2
10005182:	4313      	orrs	r3, r2
10005184:	e7de      	b.n	10005144 <led_pwm_blink+0x2e>
		return -EINVAL;
10005186:	2016      	movs	r0, #22
10005188:	4240      	negs	r0, r0
1000518a:	e7e7      	b.n	1000515c <led_pwm_blink+0x46>

1000518c <led_pwm_set_brightness>:

static int led_pwm_set_brightness(const struct device *dev,
				  uint32_t led, uint8_t value)
{
	const struct led_pwm_config *config = dev->config;
1000518c:	6843      	ldr	r3, [r0, #4]
{
1000518e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct pwm_dt_spec *dt_led;

	if (led >= config->num_leds || value > 100) {
10005190:	6818      	ldr	r0, [r3, #0]
10005192:	4288      	cmp	r0, r1
10005194:	d912      	bls.n	100051bc <led_pwm_set_brightness+0x30>
10005196:	2a64      	cmp	r2, #100	; 0x64
10005198:	d810      	bhi.n	100051bc <led_pwm_set_brightness+0x30>
		return -EINVAL;
	}

	dt_led = &config->led[led];
1000519a:	685c      	ldr	r4, [r3, #4]
1000519c:	0109      	lsls	r1, r1, #4
1000519e:	1864      	adds	r4, r4, r1

	return pwm_set_pulse_dt(&config->led[led],
				dt_led->period * value / 100);
100051a0:	68a5      	ldr	r5, [r4, #8]
	return pwm_set_pulse_dt(&config->led[led],
100051a2:	2164      	movs	r1, #100	; 0x64
				dt_led->period * value / 100);
100051a4:	436a      	muls	r2, r5
100051a6:	0010      	movs	r0, r2
	return pwm_set_pulse_dt(&config->led[led],
100051a8:	f7fb f81c 	bl	100001e4 <__udivsi3>
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_pulse_dt(const struct pwm_dt_spec *spec,
				   uint32_t pulse)
{
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
100051ac:	89a2      	ldrh	r2, [r4, #12]
100051ae:	0003      	movs	r3, r0
100051b0:	9200      	str	r2, [sp, #0]
100051b2:	cc03      	ldmia	r4!, {r0, r1}
100051b4:	002a      	movs	r2, r5
100051b6:	f7fd fdb5 	bl	10002d24 <pwm_set>
}
100051ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		return -EINVAL;
100051bc:	2016      	movs	r0, #22
100051be:	4240      	negs	r0, r0
100051c0:	e7fb      	b.n	100051ba <led_pwm_set_brightness+0x2e>

100051c2 <led_pwm_on>:

static int led_pwm_on(const struct device *dev, uint32_t led)
{
100051c2:	b510      	push	{r4, lr}
	return led_pwm_set_brightness(dev, led, 100);
100051c4:	2264      	movs	r2, #100	; 0x64
100051c6:	f7ff ffe1 	bl	1000518c <led_pwm_set_brightness>
}
100051ca:	bd10      	pop	{r4, pc}

100051cc <led_pwm_off>:

static int led_pwm_off(const struct device *dev, uint32_t led)
{
100051cc:	b510      	push	{r4, lr}
	return led_pwm_set_brightness(dev, led, 0);
100051ce:	2200      	movs	r2, #0
100051d0:	f7ff ffdc 	bl	1000518c <led_pwm_set_brightness>
}
100051d4:	bd10      	pop	{r4, pc}

100051d6 <led_pwm_init>:

static int led_pwm_init(const struct device *dev)
{
100051d6:	b570      	push	{r4, r5, r6, lr}
		LOG_ERR("%s: no LEDs found (DT child nodes missing)",
			dev->name);
		return -ENODEV;
	}

	for (i = 0; i < config->num_leds; i++) {
100051d8:	2400      	movs	r4, #0
	const struct led_pwm_config *config = dev->config;
100051da:	6845      	ldr	r5, [r0, #4]
	if (!config->num_leds) {
100051dc:	682b      	ldr	r3, [r5, #0]
100051de:	42a3      	cmp	r3, r4
100051e0:	d10a      	bne.n	100051f8 <led_pwm_init+0x22>
		return -ENODEV;
100051e2:	2013      	movs	r0, #19
100051e4:	4240      	negs	r0, r0
			return -ENODEV;
		}
	}

	return 0;
}
100051e6:	bd70      	pop	{r4, r5, r6, pc}
		if (!device_is_ready(led->dev)) {
100051e8:	686a      	ldr	r2, [r5, #4]
100051ea:	0123      	lsls	r3, r4, #4
100051ec:	5898      	ldr	r0, [r3, r2]
100051ee:	f000 f9be 	bl	1000556e <z_device_is_ready>
100051f2:	2800      	cmp	r0, #0
100051f4:	d0f5      	beq.n	100051e2 <led_pwm_init+0xc>
	for (i = 0; i < config->num_leds; i++) {
100051f6:	3401      	adds	r4, #1
100051f8:	682b      	ldr	r3, [r5, #0]
100051fa:	429c      	cmp	r4, r3
100051fc:	dbf4      	blt.n	100051e8 <led_pwm_init+0x12>
	return 0;
100051fe:	2000      	movs	r0, #0
10005200:	e7f1      	b.n	100051e6 <led_pwm_init+0x10>

10005202 <uart_rpi_poll_in>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005202:	6843      	ldr	r3, [r0, #4]
{
10005204:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10005206:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10005208:	2210      	movs	r2, #16
1000520a:	699c      	ldr	r4, [r3, #24]
1000520c:	0020      	movs	r0, r4
1000520e:	4010      	ands	r0, r2
10005210:	4214      	tst	r4, r2
10005212:	d102      	bne.n	1000521a <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
10005214:	681b      	ldr	r3, [r3, #0]
10005216:	700b      	strb	r3, [r1, #0]
}
10005218:	bd10      	pop	{r4, pc}
		return -1;
1000521a:	2001      	movs	r0, #1
1000521c:	4240      	negs	r0, r0
1000521e:	e7fb      	b.n	10005218 <uart_rpi_poll_in+0x16>

10005220 <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10005220:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10005222:	6843      	ldr	r3, [r0, #4]
10005224:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10005226:	6998      	ldr	r0, [r3, #24]
10005228:	4210      	tst	r0, r2
1000522a:	d1fc      	bne.n	10005226 <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
1000522c:	6019      	str	r1, [r3, #0]
}
1000522e:	4770      	bx	lr

10005230 <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005230:	6843      	ldr	r3, [r0, #4]
10005232:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
10005234:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
10005236:	0518      	lsls	r0, r3, #20
10005238:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
1000523a:	055a      	lsls	r2, r3, #21
1000523c:	d501      	bpl.n	10005242 <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
1000523e:	2208      	movs	r2, #8
10005240:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
10005242:	059a      	lsls	r2, r3, #22
10005244:	d501      	bpl.n	1000524a <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
10005246:	2202      	movs	r2, #2
10005248:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
1000524a:	05db      	lsls	r3, r3, #23
1000524c:	d501      	bpl.n	10005252 <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
1000524e:	2304      	movs	r3, #4
10005250:	4318      	orrs	r0, r3
}
10005252:	4770      	bx	lr

10005254 <uart_rpi_fifo_fill>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005254:	6843      	ldr	r3, [r0, #4]
{
10005256:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10005258:	2000      	movs	r0, #0
1000525a:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
1000525c:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
1000525e:	699c      	ldr	r4, [r3, #24]
10005260:	422c      	tst	r4, r5
10005262:	d102      	bne.n	1000526a <uart_rpi_fifo_fill+0x16>
10005264:	1a14      	subs	r4, r2, r0
10005266:	2c00      	cmp	r4, #0
10005268:	dc00      	bgt.n	1000526c <uart_rpi_fifo_fill+0x18>
}
1000526a:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
1000526c:	5c0c      	ldrb	r4, [r1, r0]
1000526e:	3001      	adds	r0, #1
10005270:	601c      	str	r4, [r3, #0]
10005272:	e7f4      	b.n	1000525e <uart_rpi_fifo_fill+0xa>

10005274 <uart_rpi_fifo_read>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005274:	6843      	ldr	r3, [r0, #4]
{
10005276:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10005278:	2000      	movs	r0, #0
1000527a:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000527c:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
1000527e:	699c      	ldr	r4, [r3, #24]
10005280:	422c      	tst	r4, r5
10005282:	d102      	bne.n	1000528a <uart_rpi_fifo_read+0x16>
10005284:	1a14      	subs	r4, r2, r0
10005286:	2c00      	cmp	r4, #0
10005288:	dc00      	bgt.n	1000528c <uart_rpi_fifo_read+0x18>
}
1000528a:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
1000528c:	681c      	ldr	r4, [r3, #0]
1000528e:	540c      	strb	r4, [r1, r0]
10005290:	3001      	adds	r0, #1
10005292:	e7f4      	b.n	1000527e <uart_rpi_fifo_read+0xa>

10005294 <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10005294:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10005296:	6843      	ldr	r3, [r0, #4]
10005298:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
1000529a:	6b99      	ldr	r1, [r3, #56]	; 0x38
1000529c:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
1000529e:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
100052a0:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
100052a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100052a4:	438a      	bics	r2, r1
100052a6:	635a      	str	r2, [r3, #52]	; 0x34
}
100052a8:	4770      	bx	lr

100052aa <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
100052aa:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100052ac:	6843      	ldr	r3, [r0, #4]
100052ae:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
100052b0:	6b93      	ldr	r3, [r2, #56]	; 0x38
100052b2:	438b      	bics	r3, r1
100052b4:	6393      	str	r3, [r2, #56]	; 0x38
}
100052b6:	4770      	bx	lr

100052b8 <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
100052b8:	6843      	ldr	r3, [r0, #4]
100052ba:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
100052bc:	6c18      	ldr	r0, [r3, #64]	; 0x40
100052be:	0680      	lsls	r0, r0, #26
100052c0:	0fc0      	lsrs	r0, r0, #31
}
100052c2:	4770      	bx	lr

100052c4 <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100052c4:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100052c6:	6843      	ldr	r3, [r0, #4]
100052c8:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100052ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
100052cc:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
100052ce:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100052d0:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
100052d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100052d4:	438a      	bics	r2, r1
100052d6:	635a      	str	r2, [r3, #52]	; 0x34
}
100052d8:	4770      	bx	lr

100052da <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
100052da:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100052dc:	6843      	ldr	r3, [r0, #4]
100052de:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
100052e0:	6b93      	ldr	r3, [r2, #56]	; 0x38
100052e2:	438b      	bics	r3, r1
100052e4:	6393      	str	r3, [r2, #56]	; 0x38
}
100052e6:	4770      	bx	lr

100052e8 <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
100052e8:	6843      	ldr	r3, [r0, #4]
100052ea:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
100052ec:	6998      	ldr	r0, [r3, #24]
100052ee:	0600      	lsls	r0, r0, #24
100052f0:	0fc0      	lsrs	r0, r0, #31
}
100052f2:	4770      	bx	lr

100052f4 <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
100052f4:	6843      	ldr	r3, [r0, #4]
100052f6:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
100052f8:	6c18      	ldr	r0, [r3, #64]	; 0x40
100052fa:	06c0      	lsls	r0, r0, #27
100052fc:	0fc0      	lsrs	r0, r0, #31
}
100052fe:	4770      	bx	lr

10005300 <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
10005300:	6843      	ldr	r3, [r0, #4]
10005302:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
10005304:	23f8      	movs	r3, #248	; 0xf8
10005306:	6b91      	ldr	r1, [r2, #56]	; 0x38
10005308:	00db      	lsls	r3, r3, #3
1000530a:	430b      	orrs	r3, r1
1000530c:	6393      	str	r3, [r2, #56]	; 0x38
}
1000530e:	4770      	bx	lr

10005310 <uart_rpi_irq_update>:
}

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
10005310:	2001      	movs	r0, #1
10005312:	4770      	bx	lr

10005314 <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
10005314:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
10005316:	6059      	str	r1, [r3, #4]
	data->irq_cb_data = cb_data;
10005318:	609a      	str	r2, [r3, #8]
}
1000531a:	4770      	bx	lr

1000531c <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
	struct uart_rpi_data * const data = dev->data;
1000531c:	6902      	ldr	r2, [r0, #16]
{
1000531e:	b510      	push	{r4, lr}

	if (data->irq_cb) {
10005320:	6853      	ldr	r3, [r2, #4]
10005322:	2b00      	cmp	r3, #0
10005324:	d001      	beq.n	1000532a <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
10005326:	6891      	ldr	r1, [r2, #8]
10005328:	4798      	blx	r3
	}
}
1000532a:	bd10      	pop	{r4, pc}

1000532c <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
1000532c:	b510      	push	{r4, lr}
1000532e:	2200      	movs	r2, #0
10005330:	2103      	movs	r1, #3
10005332:	2014      	movs	r0, #20
10005334:	f7fd f9b6 	bl	100026a4 <z_arm_irq_priority_set>
10005338:	2014      	movs	r0, #20
1000533a:	f7fd f9a7 	bl	1000268c <arch_irq_enable>
1000533e:	bd10      	pop	{r4, pc}

10005340 <uart1_rpi_irq_config_func>:
10005340:	b510      	push	{r4, lr}
10005342:	2200      	movs	r2, #0
10005344:	2103      	movs	r1, #3
10005346:	2015      	movs	r0, #21
10005348:	f7fd f9ac 	bl	100026a4 <z_arm_irq_priority_set>
1000534c:	2015      	movs	r0, #21
1000534e:	f7fd f99d 	bl	1000268c <arch_irq_enable>
10005352:	bd10      	pop	{r4, pc}

10005354 <uart_rpi_irq_is_pending>:
{
10005354:	b510      	push	{r4, lr}
10005356:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10005358:	f7ff ffcc 	bl	100052f4 <uart_rpi_irq_rx_ready>
1000535c:	0003      	movs	r3, r0
1000535e:	2001      	movs	r0, #1
10005360:	2b00      	cmp	r3, #0
10005362:	d104      	bne.n	1000536e <uart_rpi_irq_is_pending+0x1a>
10005364:	0020      	movs	r0, r4
10005366:	f7ff ffa7 	bl	100052b8 <uart_rpi_irq_tx_ready>
1000536a:	1e43      	subs	r3, r0, #1
1000536c:	4198      	sbcs	r0, r3
}
1000536e:	bd10      	pop	{r4, pc}

10005370 <uart_rpi_init>:
{
10005370:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
10005372:	6845      	ldr	r5, [r0, #4]
{
10005374:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
10005376:	682b      	ldr	r3, [r5, #0]
{
10005378:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
1000537a:	6907      	ldr	r7, [r0, #16]
	ret = pinctrl_lookup_state(config, id, &state);
1000537c:	2100      	movs	r1, #0
1000537e:	68a8      	ldr	r0, [r5, #8]
10005380:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
10005382:	686e      	ldr	r6, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
10005384:	9301      	str	r3, [sp, #4]
10005386:	f7fd fee7 	bl	10003158 <pinctrl_lookup_state>
	if (ret < 0) {
1000538a:	2800      	cmp	r0, #0
1000538c:	db1a      	blt.n	100053c4 <uart_rpi_init+0x54>
	return pinctrl_apply_state_direct(config, state);
1000538e:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10005390:	2200      	movs	r2, #0
10005392:	7919      	ldrb	r1, [r3, #4]
10005394:	6818      	ldr	r0, [r3, #0]
10005396:	f000 f81a 	bl	100053ce <pinctrl_configure_pins>
	if (ret < 0) {
1000539a:	2800      	cmp	r0, #0
1000539c:	db12      	blt.n	100053c4 <uart_rpi_init+0x54>
	baudrate = uart_init(uart_inst, data->baudrate);
1000539e:	6839      	ldr	r1, [r7, #0]
100053a0:	9801      	ldr	r0, [sp, #4]
100053a2:	f7fe f90d 	bl	100035c0 <uart_init>
	if (baudrate <= 0) {
100053a6:	2800      	cmp	r0, #0
100053a8:	dd0e      	ble.n	100053c8 <uart_rpi_init+0x58>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
100053aa:	0032      	movs	r2, r6
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100053ac:	23c0      	movs	r3, #192	; 0xc0
100053ae:	322c      	adds	r2, #44	; 0x2c
100053b0:	019b      	lsls	r3, r3, #6
100053b2:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
100053b4:	2700      	movs	r7, #0
100053b6:	2210      	movs	r2, #16
	config->irq_config_func(dev);
100053b8:	0020      	movs	r0, r4
100053ba:	601a      	str	r2, [r3, #0]
100053bc:	696b      	ldr	r3, [r5, #20]
	uart_hw->dr = 0U;
100053be:	6037      	str	r7, [r6, #0]
	config->irq_config_func(dev);
100053c0:	4798      	blx	r3
	return 0;
100053c2:	0038      	movs	r0, r7
}
100053c4:	b005      	add	sp, #20
100053c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
100053c8:	2016      	movs	r0, #22
100053ca:	4240      	negs	r0, r0
100053cc:	e7fa      	b.n	100053c4 <uart_rpi_init+0x54>

100053ce <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
100053ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100053d0:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
100053d2:	2601      	movs	r6, #1
100053d4:	008d      	lsls	r5, r1, #2
100053d6:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
100053d8:	42ac      	cmp	r4, r5
100053da:	d101      	bne.n	100053e0 <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
100053dc:	2000      	movs	r0, #0
100053de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
100053e0:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
100053e2:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
100053e4:	06c0      	lsls	r0, r0, #27
100053e6:	0ec0      	lsrs	r0, r0, #27
100053e8:	f000 f8b5 	bl	10005556 <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
100053ec:	8821      	ldrh	r1, [r4, #0]
100053ee:	7820      	ldrb	r0, [r4, #0]
100053f0:	05c9      	lsls	r1, r1, #23
100053f2:	06c0      	lsls	r0, r0, #27
100053f4:	0f09      	lsrs	r1, r1, #28
100053f6:	0ec0      	lsrs	r0, r0, #27
100053f8:	f7fe f820 	bl	1000343c <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
100053fc:	7861      	ldrb	r1, [r4, #1]
100053fe:	7820      	ldrb	r0, [r4, #0]
10005400:	09ca      	lsrs	r2, r1, #7
10005402:	06c0      	lsls	r0, r0, #27
10005404:	0649      	lsls	r1, r1, #25
10005406:	0fc9      	lsrs	r1, r1, #31
10005408:	0ec0      	lsrs	r0, r0, #27
1000540a:	f7fe f82d 	bl	10003468 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
1000540e:	7861      	ldrb	r1, [r4, #1]
10005410:	7820      	ldrb	r0, [r4, #0]
10005412:	06c9      	lsls	r1, r1, #27
10005414:	06c0      	lsls	r0, r0, #27
10005416:	0f09      	lsrs	r1, r1, #28
10005418:	0ec0      	lsrs	r0, r0, #27
1000541a:	f7fe f857 	bl	100034cc <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
1000541e:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10005420:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10005422:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10005424:	06c0      	lsls	r0, r0, #27
10005426:	4031      	ands	r1, r6
10005428:	0ec0      	lsrs	r0, r0, #27
1000542a:	f7fe f841 	bl	100034b0 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
1000542e:	78a1      	ldrb	r1, [r4, #2]
10005430:	7820      	ldrb	r0, [r4, #0]
10005432:	0789      	lsls	r1, r1, #30
10005434:	06c0      	lsls	r0, r0, #27
10005436:	0fc9      	lsrs	r1, r1, #31
10005438:	0ec0      	lsrs	r0, r0, #27
1000543a:	f7fe f82b 	bl	10003494 <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
1000543e:	78a1      	ldrb	r1, [r4, #2]
10005440:	7820      	ldrb	r0, [r4, #0]
10005442:	07c9      	lsls	r1, r1, #31
10005444:	06c0      	lsls	r0, r0, #27
10005446:	0fc9      	lsrs	r1, r1, #31
10005448:	0ec0      	lsrs	r0, r0, #27
1000544a:	f7fe f87d 	bl	10003548 <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
1000544e:	003c      	movs	r4, r7
10005450:	e7c2      	b.n	100053d8 <pinctrl_configure_pins+0xa>

10005452 <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
10005452:	2000      	movs	r0, #0
10005454:	4770      	bx	lr

10005456 <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
10005456:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
10005458:	7900      	ldrb	r0, [r0, #4]
1000545a:	2802      	cmp	r0, #2
1000545c:	d008      	beq.n	10005470 <reset_rpi_read_register.isra.0+0x1a>
1000545e:	2804      	cmp	r0, #4
10005460:	d009      	beq.n	10005476 <reset_rpi_read_register.isra.0+0x20>
10005462:	2801      	cmp	r0, #1
10005464:	d10a      	bne.n	1000547c <reset_rpi_read_register.isra.0+0x26>
		*value = sys_read8(base_address + offset);
10005466:	18c9      	adds	r1, r1, r3
	return *(volatile uint8_t *)addr;
10005468:	780b      	ldrb	r3, [r1, #0]
	return 0;
1000546a:	2000      	movs	r0, #0
		*value = sys_read32(base_address + offset);
1000546c:	6013      	str	r3, [r2, #0]
}
1000546e:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
10005470:	18c9      	adds	r1, r1, r3
	return *(volatile uint16_t *)addr;
10005472:	880b      	ldrh	r3, [r1, #0]
10005474:	e7f9      	b.n	1000546a <reset_rpi_read_register.isra.0+0x14>
		*value = sys_read32(base_address + offset);
10005476:	18c9      	adds	r1, r1, r3
	return *(volatile uint32_t *)addr;
10005478:	680b      	ldr	r3, [r1, #0]
1000547a:	e7f6      	b.n	1000546a <reset_rpi_read_register.isra.0+0x14>
	switch (config->reg_width) {
1000547c:	2016      	movs	r0, #22
1000547e:	4240      	negs	r0, r0
10005480:	e7f5      	b.n	1000546e <reset_rpi_read_register.isra.0+0x18>

10005482 <reset_rpi_update.isra.0>:
static int reset_rpi_update(const struct device *dev, uint32_t id, uint8_t assert)
10005482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10005484:	0005      	movs	r5, r0
10005486:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10005488:	7929      	ldrb	r1, [r5, #4]
static int reset_rpi_update(const struct device *dev, uint32_t id, uint8_t assert)
1000548a:	0016      	movs	r6, r2
	offset = id / (config->reg_width * CHAR_BIT);
1000548c:	00c9      	lsls	r1, r1, #3
1000548e:	f7fa fee5 	bl	1000025c <__aeabi_uidivmod>
10005492:	aa01      	add	r2, sp, #4
10005494:	0004      	movs	r4, r0
10005496:	000f      	movs	r7, r1
	ret = reset_rpi_read_register(dev, offset, &value);
10005498:	b281      	uxth	r1, r0
1000549a:	0028      	movs	r0, r5
1000549c:	f7ff ffdb 	bl	10005456 <reset_rpi_read_register.isra.0>
	if (ret) {
100054a0:	2800      	cmp	r0, #0
100054a2:	d116      	bne.n	100054d2 <reset_rpi_update.isra.0+0x50>
		value |= BIT(regbit);
100054a4:	2201      	movs	r2, #1
100054a6:	9901      	ldr	r1, [sp, #4]
100054a8:	b2ff      	uxtb	r7, r7
100054aa:	40ba      	lsls	r2, r7
		value &= ~BIT(regbit);
100054ac:	000b      	movs	r3, r1
	if (assert ^ config->active_low) {
100054ae:	796f      	ldrb	r7, [r5, #5]
		value &= ~BIT(regbit);
100054b0:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
100054b2:	42b7      	cmp	r7, r6
100054b4:	d001      	beq.n	100054ba <reset_rpi_update.isra.0+0x38>
		value |= BIT(regbit);
100054b6:	0013      	movs	r3, r2
100054b8:	430b      	orrs	r3, r1
	switch (config->reg_width) {
100054ba:	7929      	ldrb	r1, [r5, #4]
	uint32_t base_address = config->base_address;
100054bc:	68aa      	ldr	r2, [r5, #8]
	switch (config->reg_width) {
100054be:	2902      	cmp	r1, #2
100054c0:	d008      	beq.n	100054d4 <reset_rpi_update.isra.0+0x52>
100054c2:	2904      	cmp	r1, #4
100054c4:	d00b      	beq.n	100054de <reset_rpi_update.isra.0+0x5c>
100054c6:	2901      	cmp	r1, #1
100054c8:	d10d      	bne.n	100054e6 <reset_rpi_update.isra.0+0x64>
		sys_write8(value, base_address + offset);
100054ca:	b2a4      	uxth	r4, r4
100054cc:	b2db      	uxtb	r3, r3
100054ce:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
100054d0:	7023      	strb	r3, [r4, #0]
}
100054d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
100054d4:	b2a4      	uxth	r4, r4
100054d6:	b29b      	uxth	r3, r3
100054d8:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
100054da:	8023      	strh	r3, [r4, #0]
}
100054dc:	e7f9      	b.n	100054d2 <reset_rpi_update.isra.0+0x50>
		sys_write32(value, base_address + offset);
100054de:	b2a4      	uxth	r4, r4
100054e0:	18a4      	adds	r4, r4, r2
	*(volatile uint32_t *)addr = data;
100054e2:	6023      	str	r3, [r4, #0]
}
100054e4:	e7f5      	b.n	100054d2 <reset_rpi_update.isra.0+0x50>
	switch (config->reg_width) {
100054e6:	2016      	movs	r0, #22
100054e8:	4240      	negs	r0, r0
100054ea:	e7f2      	b.n	100054d2 <reset_rpi_update.isra.0+0x50>

100054ec <reset_rpi_line_deassert>:
{
100054ec:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
100054ee:	2200      	movs	r2, #0
100054f0:	6840      	ldr	r0, [r0, #4]
100054f2:	f7ff ffc6 	bl	10005482 <reset_rpi_update.isra.0>
}
100054f6:	bd10      	pop	{r4, pc}

100054f8 <reset_rpi_line_assert>:
{
100054f8:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
100054fa:	2201      	movs	r2, #1
100054fc:	6840      	ldr	r0, [r0, #4]
100054fe:	f7ff ffc0 	bl	10005482 <reset_rpi_update.isra.0>
}
10005502:	bd10      	pop	{r4, pc}

10005504 <reset_rpi_line_toggle>:
{
10005504:	b570      	push	{r4, r5, r6, lr}
10005506:	0004      	movs	r4, r0
10005508:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
1000550a:	f7ff fff5 	bl	100054f8 <reset_rpi_line_assert>
	if (ret) {
1000550e:	2800      	cmp	r0, #0
10005510:	d103      	bne.n	1000551a <reset_rpi_line_toggle+0x16>
	return reset_rpi_line_deassert(dev, id);
10005512:	0029      	movs	r1, r5
10005514:	0020      	movs	r0, r4
10005516:	f7ff ffe9 	bl	100054ec <reset_rpi_line_deassert>
}
1000551a:	bd70      	pop	{r4, r5, r6, pc}

1000551c <reset_rpi_status>:
{
1000551c:	0003      	movs	r3, r0
1000551e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
10005520:	685e      	ldr	r6, [r3, #4]
{
10005522:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10005524:	7931      	ldrb	r1, [r6, #4]
{
10005526:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
10005528:	00c9      	lsls	r1, r1, #3
1000552a:	f7fa fe97 	bl	1000025c <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
1000552e:	aa01      	add	r2, sp, #4
10005530:	000d      	movs	r5, r1
10005532:	b281      	uxth	r1, r0
10005534:	0030      	movs	r0, r6
10005536:	f7ff ff8e 	bl	10005456 <reset_rpi_read_register.isra.0>
	if (ret) {
1000553a:	2800      	cmp	r0, #0
1000553c:	d10a      	bne.n	10005554 <reset_rpi_status+0x38>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
1000553e:	9a01      	ldr	r2, [sp, #4]
10005540:	b2ed      	uxtb	r5, r5
10005542:	40ea      	lsrs	r2, r5
10005544:	2301      	movs	r3, #1
10005546:	4393      	bics	r3, r2
10005548:	001a      	movs	r2, r3
1000554a:	7973      	ldrb	r3, [r6, #5]
1000554c:	4259      	negs	r1, r3
1000554e:	414b      	adcs	r3, r1
10005550:	4053      	eors	r3, r2
10005552:	7023      	strb	r3, [r4, #0]
}
10005554:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

10005556 <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10005556:	2301      	movs	r3, #1
10005558:	22d0      	movs	r2, #208	; 0xd0
1000555a:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
1000555c:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
1000555e:	0612      	lsls	r2, r2, #24
10005560:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10005562:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
10005564:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10005566:	f7fd ff69 	bl	1000343c <gpio_set_function>
}
1000556a:	bd10      	pop	{r4, pc}

1000556c <z_device_state_init>:
}
1000556c:	4770      	bx	lr

1000556e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
1000556e:	2800      	cmp	r0, #0
10005570:	d008      	beq.n	10005584 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
10005572:	68c3      	ldr	r3, [r0, #12]
10005574:	8818      	ldrh	r0, [r3, #0]
10005576:	05c0      	lsls	r0, r0, #23
10005578:	0dc0      	lsrs	r0, r0, #23
1000557a:	3801      	subs	r0, #1
1000557c:	38ff      	subs	r0, #255	; 0xff
1000557e:	4243      	negs	r3, r0
10005580:	4158      	adcs	r0, r3
10005582:	b2c0      	uxtb	r0, r0
}
10005584:	4770      	bx	lr

10005586 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
10005586:	f3ef 8310 	mrs	r3, PRIMASK
1000558a:	b672      	cpsid	i
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
1000558c:	e7fe      	b.n	1000558c <arch_system_halt+0x6>

1000558e <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
1000558e:	b510      	push	{r4, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
10005590:	f7ff fff9 	bl	10005586 <arch_system_halt>

10005594 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005596:	0005      	movs	r5, r0
10005598:	000e      	movs	r6, r1
1000559a:	f3ef 8710 	mrs	r7, PRIMASK
1000559e:	b672      	cpsid	i
	return z_impl_z_current_get();
100055a0:	f7fe fe5c 	bl	1000425c <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
100055a4:	0031      	movs	r1, r6
100055a6:	0004      	movs	r4, r0
100055a8:	0028      	movs	r0, r5
100055aa:	f7ff fff0 	bl	1000558e <k_sys_fatal_error_handler>
	if (key != 0U) {
100055ae:	2f00      	cmp	r7, #0
100055b0:	d102      	bne.n	100055b8 <z_fatal_error+0x24>
	__asm__ volatile(
100055b2:	b662      	cpsie	i
100055b4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
100055b8:	0020      	movs	r0, r4
100055ba:	f7fd f9cd 	bl	10002958 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
100055be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100055c0 <z_early_memset>:
{
100055c0:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
100055c2:	f7ff fb84 	bl	10004cce <memset>
}
100055c6:	bd10      	pop	{r4, pc}

100055c8 <z_early_memcpy>:
{
100055c8:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
100055ca:	f7ff fb77 	bl	10004cbc <memcpy>
}
100055ce:	bd10      	pop	{r4, pc}

100055d0 <k_is_in_isr>:
100055d0:	f3ef 8005 	mrs	r0, IPSR
 * The current executing vector is found in the IPSR register. All
 * IRQs and system exceptions are considered as interrupt context.
 */
static ALWAYS_INLINE bool arch_is_in_isr(void)
{
	return (__get_IPSR()) ? (true) : (false);
100055d4:	1e43      	subs	r3, r0, #1
100055d6:	4198      	sbcs	r0, r3
	return arch_is_in_isr();
100055d8:	b2c0      	uxtb	r0, r0
}
100055da:	4770      	bx	lr

100055dc <z_impl_k_thread_name_set>:
	return -ENOSYS;
100055dc:	2058      	movs	r0, #88	; 0x58
}
100055de:	4240      	negs	r0, r0
100055e0:	4770      	bx	lr

100055e2 <z_impl_k_thread_start>:
{
100055e2:	b510      	push	{r4, lr}
	z_sched_start(thread);
100055e4:	f7fe fce8 	bl	10003fb8 <z_sched_start>
}
100055e8:	bd10      	pop	{r4, pc}

100055ea <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
100055ea:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100055ec:	f3ef 8310 	mrs	r3, PRIMASK
100055f0:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
100055f2:	f7fd f843 	bl	1000267c <arch_cpu_idle>
100055f6:	e7f9      	b.n	100055ec <idle+0x2>

100055f8 <k_msgq_cleanup>:
	return list->head == list;
100055f8:	6803      	ldr	r3, [r0, #0]
{
100055fa:	b570      	push	{r4, r5, r6, lr}
	return sys_dlist_is_empty(list) ? NULL : list->head;
100055fc:	4298      	cmp	r0, r3
100055fe:	d001      	beq.n	10005604 <k_msgq_cleanup+0xc>
	CHECKIF(z_waitq_head(&msgq->wait_q) != NULL) {
10005600:	2b00      	cmp	r3, #0
10005602:	d10d      	bne.n	10005620 <k_msgq_cleanup+0x28>
	if ((msgq->flags & K_MSGQ_FLAG_ALLOC) != 0U) {
10005604:	2601      	movs	r6, #1
10005606:	1d44      	adds	r4, r0, #5
10005608:	7fe3      	ldrb	r3, [r4, #31]
	return 0;
1000560a:	2500      	movs	r5, #0
	if ((msgq->flags & K_MSGQ_FLAG_ALLOC) != 0U) {
1000560c:	4233      	tst	r3, r6
1000560e:	d005      	beq.n	1000561c <k_msgq_cleanup+0x24>
		k_free(msgq->buffer_start);
10005610:	6900      	ldr	r0, [r0, #16]
10005612:	f000 f94b 	bl	100058ac <k_free>
		msgq->flags &= ~K_MSGQ_FLAG_ALLOC;
10005616:	7fe3      	ldrb	r3, [r4, #31]
10005618:	43b3      	bics	r3, r6
1000561a:	77e3      	strb	r3, [r4, #31]
}
1000561c:	0028      	movs	r0, r5
1000561e:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
10005620:	2510      	movs	r5, #16
10005622:	426d      	negs	r5, r5
10005624:	e7fa      	b.n	1000561c <k_msgq_cleanup+0x24>

10005626 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
10005626:	2a00      	cmp	r2, #0
10005628:	d007      	beq.n	1000563a <z_impl_k_sem_init+0x14>
1000562a:	428a      	cmp	r2, r1
1000562c:	d305      	bcc.n	1000563a <z_impl_k_sem_init+0x14>
	sem->count = initial_count;
1000562e:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
10005630:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
10005632:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
10005634:	6040      	str	r0, [r0, #4]
	return 0;
10005636:	2000      	movs	r0, #0
}
10005638:	4770      	bx	lr
		return -EINVAL;
1000563a:	2016      	movs	r0, #22
1000563c:	4240      	negs	r0, r0
1000563e:	e7fb      	b.n	10005638 <z_impl_k_sem_init+0x12>

10005640 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
10005640:	2201      	movs	r2, #1
{
10005642:	b530      	push	{r4, r5, lr}
	*flagp &= ~BIT(bit);
10005644:	0014      	movs	r4, r2
	return (*flagp & BIT(bit)) != 0U;
10005646:	6803      	ldr	r3, [r0, #0]
	*flagp &= ~BIT(bit);
10005648:	408c      	lsls	r4, r1
1000564a:	001d      	movs	r5, r3
	return (*flagp & BIT(bit)) != 0U;
1000564c:	40cb      	lsrs	r3, r1
	*flagp &= ~BIT(bit);
1000564e:	43a5      	bics	r5, r4
	return ret;
10005650:	4013      	ands	r3, r2
	*flagp &= ~BIT(bit);
10005652:	6005      	str	r5, [r0, #0]
	return ret;
10005654:	0018      	movs	r0, r3
}
10005656:	bd30      	pop	{r4, r5, pc}

10005658 <notify_queue_locked.isra.0>:
static inline bool notify_queue_locked(struct k_work_q *queue)
10005658:	b510      	push	{r4, lr}
	if (queue != NULL) {
1000565a:	2800      	cmp	r0, #0
1000565c:	d004      	beq.n	10005668 <notify_queue_locked.isra.0+0x10>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
1000565e:	2200      	movs	r2, #0
10005660:	3078      	adds	r0, #120	; 0x78
10005662:	0011      	movs	r1, r2
10005664:	f000 f8d6 	bl	10005814 <z_sched_wake>
}
10005668:	bd10      	pop	{r4, pc}

1000566a <z_work_submit_to_queue>:
{
1000566a:	b513      	push	{r0, r1, r4, lr}
1000566c:	9001      	str	r0, [sp, #4]
1000566e:	0008      	movs	r0, r1
10005670:	f3ef 8410 	mrs	r4, PRIMASK
10005674:	b672      	cpsid	i
	int ret = submit_to_queue_locked(work, &queue);
10005676:	a901      	add	r1, sp, #4
10005678:	f7fe fad6 	bl	10003c28 <submit_to_queue_locked>
	if (key != 0U) {
1000567c:	2c00      	cmp	r4, #0
1000567e:	d102      	bne.n	10005686 <z_work_submit_to_queue+0x1c>
	__asm__ volatile(
10005680:	b662      	cpsie	i
10005682:	f3bf 8f6f 	isb	sy
}
10005686:	bd16      	pop	{r1, r2, r4, pc}

10005688 <k_work_submit_to_queue>:
{
10005688:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
1000568a:	f7ff ffee 	bl	1000566a <z_work_submit_to_queue>
1000568e:	1e04      	subs	r4, r0, #0
	if (ret > 0) {
10005690:	dd04      	ble.n	1000569c <k_work_submit_to_queue+0x14>
	__asm__ volatile("mrs %0, PRIMASK;"
10005692:	f3ef 8010 	mrs	r0, PRIMASK
10005696:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10005698:	f000 f826 	bl	100056e8 <z_reschedule_irqlock>
}
1000569c:	0020      	movs	r0, r4
1000569e:	bd10      	pop	{r4, pc}

100056a0 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
100056a0:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
100056a2:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
100056a4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
100056a6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
100056a8:	2300      	movs	r3, #0
100056aa:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
100056ac:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
100056ae:	4770      	bx	lr

100056b0 <unpend_thread_no_timeout>:
{
100056b0:	b510      	push	{r4, lr}
100056b2:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
100056b4:	f7ff fff4 	bl	100056a0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
100056b8:	2202      	movs	r2, #2
100056ba:	7b63      	ldrb	r3, [r4, #13]
100056bc:	4393      	bics	r3, r2
100056be:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
100056c0:	2300      	movs	r3, #0
100056c2:	60a3      	str	r3, [r4, #8]
}
100056c4:	bd10      	pop	{r4, pc}

100056c6 <z_unpend_thread>:
{
100056c6:	b570      	push	{r4, r5, r6, lr}
100056c8:	0004      	movs	r4, r0
100056ca:	f3ef 8510 	mrs	r5, PRIMASK
100056ce:	b672      	cpsid	i
		unpend_thread_no_timeout(thread);
100056d0:	f7ff ffee 	bl	100056b0 <unpend_thread_no_timeout>
	if (key != 0U) {
100056d4:	2d00      	cmp	r5, #0
100056d6:	d102      	bne.n	100056de <z_unpend_thread+0x18>
	__asm__ volatile(
100056d8:	b662      	cpsie	i
100056da:	f3bf 8f6f 	isb	sy
100056de:	0020      	movs	r0, r4
100056e0:	3018      	adds	r0, #24
100056e2:	f000 f8b6 	bl	10005852 <z_abort_timeout>
}
100056e6:	bd70      	pop	{r4, r5, r6, pc}

100056e8 <z_reschedule_irqlock>:
{
100056e8:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
100056ea:	2800      	cmp	r0, #0
100056ec:	d105      	bne.n	100056fa <z_reschedule_irqlock+0x12>
100056ee:	f3ef 8005 	mrs	r0, IPSR
	if (resched(key)) {
100056f2:	2800      	cmp	r0, #0
100056f4:	d102      	bne.n	100056fc <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
100056f6:	f7fd f817 	bl	10002728 <arch_swap>
}
100056fa:	bd10      	pop	{r4, pc}
100056fc:	b662      	cpsie	i
100056fe:	f3bf 8f6f 	isb	sy
10005702:	e7fa      	b.n	100056fa <z_reschedule_irqlock+0x12>

10005704 <z_reschedule_unlocked>:
{
10005704:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005706:	f3ef 8010 	mrs	r0, PRIMASK
1000570a:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
1000570c:	f7ff ffec 	bl	100056e8 <z_reschedule_irqlock>
}
10005710:	bd10      	pop	{r4, pc}

10005712 <z_priq_dumb_best>:
{
10005712:	0003      	movs	r3, r0
	return list->head == list;
10005714:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005716:	4283      	cmp	r3, r0
10005718:	d100      	bne.n	1000571c <z_priq_dumb_best+0xa>
	struct k_thread *thread = NULL;
1000571a:	2000      	movs	r0, #0
}
1000571c:	4770      	bx	lr

1000571e <z_ready_thread>:
{
1000571e:	b510      	push	{r4, lr}
10005720:	f3ef 8410 	mrs	r4, PRIMASK
10005724:	b672      	cpsid	i
			ready_thread(thread);
10005726:	f7fe fc11 	bl	10003f4c <ready_thread>
	if (key != 0U) {
1000572a:	2c00      	cmp	r4, #0
1000572c:	d102      	bne.n	10005734 <z_ready_thread+0x16>
	__asm__ volatile(
1000572e:	b662      	cpsie	i
10005730:	f3bf 8f6f 	isb	sy
}
10005734:	bd10      	pop	{r4, pc}

10005736 <z_thread_timeout>:
	struct k_thread *thread = CONTAINER_OF(timeout,
10005736:	3818      	subs	r0, #24
{
10005738:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = CONTAINER_OF(timeout,
1000573a:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
1000573c:	f3ef 8510 	mrs	r5, PRIMASK
10005740:	b672      	cpsid	i
		if (!killed) {
10005742:	2328      	movs	r3, #40	; 0x28
10005744:	7b42      	ldrb	r2, [r0, #13]
10005746:	421a      	tst	r2, r3
10005748:	d10b      	bne.n	10005762 <z_thread_timeout+0x2c>
			if (thread->base.pended_on != NULL) {
1000574a:	6883      	ldr	r3, [r0, #8]
1000574c:	2b00      	cmp	r3, #0
1000574e:	d001      	beq.n	10005754 <z_thread_timeout+0x1e>
				unpend_thread_no_timeout(thread);
10005750:	f7ff ffae 	bl	100056b0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10005754:	2214      	movs	r2, #20
10005756:	7b63      	ldrb	r3, [r4, #13]
			ready_thread(thread);
10005758:	0020      	movs	r0, r4
1000575a:	4393      	bics	r3, r2
1000575c:	7363      	strb	r3, [r4, #13]
1000575e:	f7fe fbf5 	bl	10003f4c <ready_thread>
	if (key != 0U) {
10005762:	2d00      	cmp	r5, #0
10005764:	d102      	bne.n	1000576c <z_thread_timeout+0x36>
	__asm__ volatile(
10005766:	b662      	cpsie	i
10005768:	f3bf 8f6f 	isb	sy
}
1000576c:	bd70      	pop	{r4, r5, r6, pc}

1000576e <add_to_waitq_locked>:
{
1000576e:	b570      	push	{r4, r5, r6, lr}
10005770:	0004      	movs	r4, r0
10005772:	000d      	movs	r5, r1
	unready_thread(thread);
10005774:	f7fe fc3a 	bl	10003fec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
10005778:	2302      	movs	r3, #2
1000577a:	7b62      	ldrb	r2, [r4, #13]
1000577c:	4313      	orrs	r3, r2
1000577e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
10005780:	2d00      	cmp	r5, #0
10005782:	d013      	beq.n	100057ac <add_to_waitq_locked+0x3e>
	return list->head == list;
10005784:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
10005786:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005788:	429d      	cmp	r5, r3
1000578a:	d016      	beq.n	100057ba <add_to_waitq_locked+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
1000578c:	2b00      	cmp	r3, #0
1000578e:	d014      	beq.n	100057ba <add_to_waitq_locked+0x4c>
	int32_t b1 = thread_1->base.prio;
10005790:	210e      	movs	r1, #14
10005792:	5661      	ldrsb	r1, [r4, r1]
	int32_t b2 = thread_2->base.prio;
10005794:	220e      	movs	r2, #14
10005796:	569a      	ldrsb	r2, [r3, r2]
	if (b1 != b2) {
10005798:	4291      	cmp	r1, r2
1000579a:	d008      	beq.n	100057ae <add_to_waitq_locked+0x40>
		return b2 - b1;
1000579c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
1000579e:	2a00      	cmp	r2, #0
100057a0:	dd05      	ble.n	100057ae <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
100057a2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
100057a4:	6023      	str	r3, [r4, #0]
	node->prev = prev;
100057a6:	6062      	str	r2, [r4, #4]
	prev->next = node;
100057a8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
100057aa:	605c      	str	r4, [r3, #4]
}
100057ac:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
100057ae:	686a      	ldr	r2, [r5, #4]
100057b0:	4293      	cmp	r3, r2
100057b2:	d002      	beq.n	100057ba <add_to_waitq_locked+0x4c>
100057b4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
100057b6:	2b00      	cmp	r3, #0
100057b8:	d1ec      	bne.n	10005794 <add_to_waitq_locked+0x26>
	sys_dnode_t *const tail = list->tail;
100057ba:	686b      	ldr	r3, [r5, #4]
	node->next = list;
100057bc:	6025      	str	r5, [r4, #0]
	node->prev = tail;
100057be:	6063      	str	r3, [r4, #4]
	tail->next = node;
100057c0:	601c      	str	r4, [r3, #0]
	list->tail = node;
100057c2:	606c      	str	r4, [r5, #4]
}
100057c4:	e7f2      	b.n	100057ac <add_to_waitq_locked+0x3e>

100057c6 <z_unpend_first_thread>:
{
100057c6:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100057c8:	f3ef 8510 	mrs	r5, PRIMASK
100057cc:	b672      	cpsid	i
		thread = _priq_wait_best(&wait_q->waitq);
100057ce:	f7ff ffa0 	bl	10005712 <z_priq_dumb_best>
100057d2:	1e04      	subs	r4, r0, #0
		if (thread != NULL) {
100057d4:	d005      	beq.n	100057e2 <z_unpend_first_thread+0x1c>
			unpend_thread_no_timeout(thread);
100057d6:	f7ff ff6b 	bl	100056b0 <unpend_thread_no_timeout>
100057da:	0020      	movs	r0, r4
100057dc:	3018      	adds	r0, #24
100057de:	f000 f838 	bl	10005852 <z_abort_timeout>
	if (key != 0U) {
100057e2:	2d00      	cmp	r5, #0
100057e4:	d102      	bne.n	100057ec <z_unpend_first_thread+0x26>
	__asm__ volatile(
100057e6:	b662      	cpsie	i
100057e8:	f3bf 8f6f 	isb	sy
}
100057ec:	0020      	movs	r0, r4
100057ee:	bd70      	pop	{r4, r5, r6, pc}

100057f0 <z_unpend_all>:
{
100057f0:	b570      	push	{r4, r5, r6, lr}
100057f2:	0005      	movs	r5, r0
		need_sched = 1;
100057f4:	2601      	movs	r6, #1
	int need_sched = 0;
100057f6:	2000      	movs	r0, #0
	return list->head == list;
100057f8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100057fa:	42a5      	cmp	r5, r4
100057fc:	d001      	beq.n	10005802 <z_unpend_all+0x12>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
100057fe:	2c00      	cmp	r4, #0
10005800:	d100      	bne.n	10005804 <z_unpend_all+0x14>
}
10005802:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
10005804:	0020      	movs	r0, r4
10005806:	f7ff ff5e 	bl	100056c6 <z_unpend_thread>
		z_ready_thread(thread);
1000580a:	0020      	movs	r0, r4
1000580c:	f7ff ff87 	bl	1000571e <z_ready_thread>
		need_sched = 1;
10005810:	0030      	movs	r0, r6
10005812:	e7f1      	b.n	100057f8 <z_unpend_all+0x8>

10005814 <z_sched_wake>:
{
10005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005816:	000e      	movs	r6, r1
10005818:	0015      	movs	r5, r2
	__asm__ volatile("mrs %0, PRIMASK;"
1000581a:	f3ef 8710 	mrs	r7, PRIMASK
1000581e:	b672      	cpsid	i
		thread = _priq_wait_best(&wait_q->waitq);
10005820:	f7ff ff77 	bl	10005712 <z_priq_dumb_best>
10005824:	0004      	movs	r4, r0
	bool ret = false;
10005826:	2000      	movs	r0, #0
		if (thread != NULL) {
10005828:	4284      	cmp	r4, r0
1000582a:	d00c      	beq.n	10005846 <z_sched_wake+0x32>
			unpend_thread_no_timeout(thread);
1000582c:	0020      	movs	r0, r4
1000582e:	66e6      	str	r6, [r4, #108]	; 0x6c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
10005830:	6165      	str	r5, [r4, #20]
10005832:	f7ff ff3d 	bl	100056b0 <unpend_thread_no_timeout>
10005836:	0020      	movs	r0, r4
10005838:	3018      	adds	r0, #24
1000583a:	f000 f80a 	bl	10005852 <z_abort_timeout>
			ready_thread(thread);
1000583e:	0020      	movs	r0, r4
10005840:	f7fe fb84 	bl	10003f4c <ready_thread>
			ret = true;
10005844:	2001      	movs	r0, #1
	if (key != 0U) {
10005846:	2f00      	cmp	r7, #0
10005848:	d102      	bne.n	10005850 <z_sched_wake+0x3c>
	__asm__ volatile(
1000584a:	b662      	cpsie	i
1000584c:	f3bf 8f6f 	isb	sy
}
10005850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10005852 <z_abort_timeout>:
{
10005852:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10005854:	f3ef 8410 	mrs	r4, PRIMASK
10005858:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
1000585a:	6803      	ldr	r3, [r0, #0]
1000585c:	2b00      	cmp	r3, #0
1000585e:	d008      	beq.n	10005872 <z_abort_timeout+0x20>
			remove_timeout(to);
10005860:	f7fe fdc2 	bl	100043e8 <remove_timeout>
			ret = 0;
10005864:	2000      	movs	r0, #0
	if (key != 0U) {
10005866:	2c00      	cmp	r4, #0
10005868:	d102      	bne.n	10005870 <z_abort_timeout+0x1e>
	__asm__ volatile(
1000586a:	b662      	cpsie	i
1000586c:	f3bf 8f6f 	isb	sy
}
10005870:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
10005872:	2016      	movs	r0, #22
10005874:	4240      	negs	r0, r0
10005876:	e7f6      	b.n	10005866 <z_abort_timeout+0x14>

10005878 <z_set_timeout_expiry>:
{
10005878:	b570      	push	{r4, r5, r6, lr}
1000587a:	0004      	movs	r4, r0
1000587c:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
1000587e:	f3ef 8610 	mrs	r6, PRIMASK
10005882:	b672      	cpsid	i
		int next_to = next_timeout();
10005884:	f7fe fd84 	bl	10004390 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
10005888:	2801      	cmp	r0, #1
1000588a:	dd05      	ble.n	10005898 <z_set_timeout_expiry+0x20>
1000588c:	42a0      	cmp	r0, r4
1000588e:	db03      	blt.n	10005898 <z_set_timeout_expiry+0x20>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
10005890:	0029      	movs	r1, r5
10005892:	0020      	movs	r0, r4
10005894:	f7fd fbc6 	bl	10003024 <sys_clock_set_timeout>
	if (key != 0U) {
10005898:	2e00      	cmp	r6, #0
1000589a:	d102      	bne.n	100058a2 <z_set_timeout_expiry+0x2a>
	__asm__ volatile(
1000589c:	b662      	cpsie	i
1000589e:	f3bf 8f6f 	isb	sy
}
100058a2:	bd70      	pop	{r4, r5, r6, pc}

100058a4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
100058a4:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
100058a6:	f7fe fea7 	bl	100045f8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
100058aa:	bd10      	pop	{r4, pc}

100058ac <k_free>:

	return mem;
}

void k_free(void *ptr)
{
100058ac:	b510      	push	{r4, lr}
	struct k_heap **heap_ref;

	if (ptr != NULL) {
100058ae:	2800      	cmp	r0, #0
100058b0:	d003      	beq.n	100058ba <k_free+0xe>
		heap_ref = ptr;
		ptr = --heap_ref;
100058b2:	1f01      	subs	r1, r0, #4

		SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_free, *heap_ref, heap_ref);

		k_heap_free(*heap_ref, ptr);
100058b4:	6808      	ldr	r0, [r1, #0]
100058b6:	f000 f809 	bl	100058cc <k_heap_free>

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_free, *heap_ref, heap_ref);
	}
}
100058ba:	bd10      	pop	{r4, pc}

100058bc <k_heap_init>:
	sys_dlist_init(&w->waitq);
100058bc:	0003      	movs	r3, r0
{
100058be:	b510      	push	{r4, lr}
100058c0:	330c      	adds	r3, #12
	list->head = (sys_dnode_t *)list;
100058c2:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
100058c4:	6103      	str	r3, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
100058c6:	f7ff f8eb 	bl	10004aa0 <sys_heap_init>
}
100058ca:	bd10      	pop	{r4, pc}

100058cc <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
100058cc:	b570      	push	{r4, r5, r6, lr}
100058ce:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
100058d0:	f3ef 8510 	mrs	r5, PRIMASK
100058d4:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
100058d6:	f7ff f8d1 	bl	10004a7c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
100058da:	0020      	movs	r0, r4
100058dc:	300c      	adds	r0, #12
100058de:	f7ff ff87 	bl	100057f0 <z_unpend_all>
100058e2:	2800      	cmp	r0, #0
100058e4:	d005      	beq.n	100058f2 <k_heap_free+0x26>
	k_spinlock_key_t key = k_spin_lock(&h->lock);
100058e6:	0020      	movs	r0, r4
		z_reschedule(&h->lock, key);
100058e8:	0029      	movs	r1, r5
	k_spinlock_key_t key = k_spin_lock(&h->lock);
100058ea:	3014      	adds	r0, #20
		z_reschedule(&h->lock, key);
100058ec:	f7fe fa6c 	bl	10003dc8 <z_reschedule>
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
100058f0:	bd70      	pop	{r4, r5, r6, pc}
	if (key != 0U) {
100058f2:	2d00      	cmp	r5, #0
100058f4:	d1fc      	bne.n	100058f0 <k_heap_free+0x24>
	__asm__ volatile(
100058f6:	b662      	cpsie	i
100058f8:	f3bf 8f6f 	isb	sy
100058fc:	e7f8      	b.n	100058f0 <k_heap_free+0x24>
