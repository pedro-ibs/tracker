
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20000630 10000ef5 1000262f 10000eb1     0.. ..../&......
	...
1000012c:	10000d7d 00000000 00000000 10000d1d     }...............
1000013c:	10001371                                q...

10000140 <_irq_vector_table>:
10000140:	10000ded 10000ded 10000ded 10000ded     ................
10000150:	10000ded 10000ded 10000ded 10000ded     ................
10000160:	10000ded 10000ded 10000ded 10000ded     ................
10000170:	10000ded 10000ded 10000ded 10000ded     ................
10000180:	10000ded 10000ded 10000ded 10000ded     ................
10000190:	10000ded 10000ded 10000ded 10000ded     ................
100001a0:	10000ded 10000ded                       ........

Disassembly of section text:

100001a8 <__gnu_thumb1_case_sqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5609      	ldrsb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_uqi>:
100001bc:	b402      	push	{r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0049      	lsls	r1, r1, #1
100001c4:	5c09      	ldrb	r1, [r1, r0]
100001c6:	0049      	lsls	r1, r1, #1
100001c8:	448e      	add	lr, r1
100001ca:	bc02      	pop	{r1}
100001cc:	4770      	bx	lr
100001ce:	46c0      	nop			; (mov r8, r8)

100001d0 <__gnu_thumb1_case_shi>:
100001d0:	b403      	push	{r0, r1}
100001d2:	4671      	mov	r1, lr
100001d4:	0849      	lsrs	r1, r1, #1
100001d6:	0040      	lsls	r0, r0, #1
100001d8:	0049      	lsls	r1, r1, #1
100001da:	5e09      	ldrsh	r1, [r1, r0]
100001dc:	0049      	lsls	r1, r1, #1
100001de:	448e      	add	lr, r1
100001e0:	bc03      	pop	{r0, r1}
100001e2:	4770      	bx	lr

100001e4 <__udivsi3>:
100001e4:	2900      	cmp	r1, #0
100001e6:	d034      	beq.n	10000252 <.udivsi3_skip_div0_test+0x6a>

100001e8 <.udivsi3_skip_div0_test>:
100001e8:	2301      	movs	r3, #1
100001ea:	2200      	movs	r2, #0
100001ec:	b410      	push	{r4}
100001ee:	4288      	cmp	r0, r1
100001f0:	d32c      	bcc.n	1000024c <.udivsi3_skip_div0_test+0x64>
100001f2:	2401      	movs	r4, #1
100001f4:	0724      	lsls	r4, r4, #28
100001f6:	42a1      	cmp	r1, r4
100001f8:	d204      	bcs.n	10000204 <.udivsi3_skip_div0_test+0x1c>
100001fa:	4281      	cmp	r1, r0
100001fc:	d202      	bcs.n	10000204 <.udivsi3_skip_div0_test+0x1c>
100001fe:	0109      	lsls	r1, r1, #4
10000200:	011b      	lsls	r3, r3, #4
10000202:	e7f8      	b.n	100001f6 <.udivsi3_skip_div0_test+0xe>
10000204:	00e4      	lsls	r4, r4, #3
10000206:	42a1      	cmp	r1, r4
10000208:	d204      	bcs.n	10000214 <.udivsi3_skip_div0_test+0x2c>
1000020a:	4281      	cmp	r1, r0
1000020c:	d202      	bcs.n	10000214 <.udivsi3_skip_div0_test+0x2c>
1000020e:	0049      	lsls	r1, r1, #1
10000210:	005b      	lsls	r3, r3, #1
10000212:	e7f8      	b.n	10000206 <.udivsi3_skip_div0_test+0x1e>
10000214:	4288      	cmp	r0, r1
10000216:	d301      	bcc.n	1000021c <.udivsi3_skip_div0_test+0x34>
10000218:	1a40      	subs	r0, r0, r1
1000021a:	431a      	orrs	r2, r3
1000021c:	084c      	lsrs	r4, r1, #1
1000021e:	42a0      	cmp	r0, r4
10000220:	d302      	bcc.n	10000228 <.udivsi3_skip_div0_test+0x40>
10000222:	1b00      	subs	r0, r0, r4
10000224:	085c      	lsrs	r4, r3, #1
10000226:	4322      	orrs	r2, r4
10000228:	088c      	lsrs	r4, r1, #2
1000022a:	42a0      	cmp	r0, r4
1000022c:	d302      	bcc.n	10000234 <.udivsi3_skip_div0_test+0x4c>
1000022e:	1b00      	subs	r0, r0, r4
10000230:	089c      	lsrs	r4, r3, #2
10000232:	4322      	orrs	r2, r4
10000234:	08cc      	lsrs	r4, r1, #3
10000236:	42a0      	cmp	r0, r4
10000238:	d302      	bcc.n	10000240 <.udivsi3_skip_div0_test+0x58>
1000023a:	1b00      	subs	r0, r0, r4
1000023c:	08dc      	lsrs	r4, r3, #3
1000023e:	4322      	orrs	r2, r4
10000240:	2800      	cmp	r0, #0
10000242:	d003      	beq.n	1000024c <.udivsi3_skip_div0_test+0x64>
10000244:	091b      	lsrs	r3, r3, #4
10000246:	d001      	beq.n	1000024c <.udivsi3_skip_div0_test+0x64>
10000248:	0909      	lsrs	r1, r1, #4
1000024a:	e7e3      	b.n	10000214 <.udivsi3_skip_div0_test+0x2c>
1000024c:	0010      	movs	r0, r2
1000024e:	bc10      	pop	{r4}
10000250:	4770      	bx	lr
10000252:	b501      	push	{r0, lr}
10000254:	2000      	movs	r0, #0
10000256:	f000 f80b 	bl	10000270 <__aeabi_idiv0>
1000025a:	bd02      	pop	{r1, pc}

1000025c <__aeabi_uidivmod>:
1000025c:	2900      	cmp	r1, #0
1000025e:	d0f8      	beq.n	10000252 <.udivsi3_skip_div0_test+0x6a>
10000260:	b503      	push	{r0, r1, lr}
10000262:	f7ff ffc1 	bl	100001e8 <.udivsi3_skip_div0_test>
10000266:	bc0e      	pop	{r1, r2, r3}
10000268:	4342      	muls	r2, r0
1000026a:	1a89      	subs	r1, r1, r2
1000026c:	4718      	bx	r3
1000026e:	46c0      	nop			; (mov r8, r8)

10000270 <__aeabi_idiv0>:
10000270:	4770      	bx	lr
10000272:	46c0      	nop			; (mov r8, r8)

10000274 <__clzsi2>:
10000274:	211c      	movs	r1, #28
10000276:	2301      	movs	r3, #1
10000278:	041b      	lsls	r3, r3, #16
1000027a:	4298      	cmp	r0, r3
1000027c:	d301      	bcc.n	10000282 <__clzsi2+0xe>
1000027e:	0c00      	lsrs	r0, r0, #16
10000280:	3910      	subs	r1, #16
10000282:	0a1b      	lsrs	r3, r3, #8
10000284:	4298      	cmp	r0, r3
10000286:	d301      	bcc.n	1000028c <__clzsi2+0x18>
10000288:	0a00      	lsrs	r0, r0, #8
1000028a:	3908      	subs	r1, #8
1000028c:	091b      	lsrs	r3, r3, #4
1000028e:	4298      	cmp	r0, r3
10000290:	d301      	bcc.n	10000296 <__clzsi2+0x22>
10000292:	0900      	lsrs	r0, r0, #4
10000294:	3904      	subs	r1, #4
10000296:	a202      	add	r2, pc, #8	; (adr r2, 100002a0 <__clzsi2+0x2c>)
10000298:	5c10      	ldrb	r0, [r2, r0]
1000029a:	1840      	adds	r0, r0, r1
1000029c:	4770      	bx	lr
1000029e:	46c0      	nop			; (mov r8, r8)
100002a0:	02020304 	.word	0x02020304
100002a4:	01010101 	.word	0x01010101
	...

100002b0 <__aeabi_uldivmod>:
100002b0:	2b00      	cmp	r3, #0
100002b2:	d111      	bne.n	100002d8 <__aeabi_uldivmod+0x28>
100002b4:	2a00      	cmp	r2, #0
100002b6:	d10f      	bne.n	100002d8 <__aeabi_uldivmod+0x28>
100002b8:	2900      	cmp	r1, #0
100002ba:	d100      	bne.n	100002be <__aeabi_uldivmod+0xe>
100002bc:	2800      	cmp	r0, #0
100002be:	d002      	beq.n	100002c6 <__aeabi_uldivmod+0x16>
100002c0:	2100      	movs	r1, #0
100002c2:	43c9      	mvns	r1, r1
100002c4:	0008      	movs	r0, r1
100002c6:	b407      	push	{r0, r1, r2}
100002c8:	4802      	ldr	r0, [pc, #8]	; (100002d4 <__aeabi_uldivmod+0x24>)
100002ca:	a102      	add	r1, pc, #8	; (adr r1, 100002d4 <__aeabi_uldivmod+0x24>)
100002cc:	1840      	adds	r0, r0, r1
100002ce:	9002      	str	r0, [sp, #8]
100002d0:	bd03      	pop	{r0, r1, pc}
100002d2:	46c0      	nop			; (mov r8, r8)
100002d4:	ffffff9d 	.word	0xffffff9d
100002d8:	b403      	push	{r0, r1}
100002da:	4668      	mov	r0, sp
100002dc:	b501      	push	{r0, lr}
100002de:	9802      	ldr	r0, [sp, #8]
100002e0:	f000 f84e 	bl	10000380 <__udivmoddi4>
100002e4:	9b01      	ldr	r3, [sp, #4]
100002e6:	469e      	mov	lr, r3
100002e8:	b002      	add	sp, #8
100002ea:	bc0c      	pop	{r2, r3}
100002ec:	4770      	bx	lr
100002ee:	46c0      	nop			; (mov r8, r8)

100002f0 <__aeabi_llsr>:
100002f0:	40d0      	lsrs	r0, r2
100002f2:	000b      	movs	r3, r1
100002f4:	40d1      	lsrs	r1, r2
100002f6:	469c      	mov	ip, r3
100002f8:	3a20      	subs	r2, #32
100002fa:	40d3      	lsrs	r3, r2
100002fc:	4318      	orrs	r0, r3
100002fe:	4252      	negs	r2, r2
10000300:	4663      	mov	r3, ip
10000302:	4093      	lsls	r3, r2
10000304:	4318      	orrs	r0, r3
10000306:	4770      	bx	lr

10000308 <__aeabi_llsl>:
10000308:	4091      	lsls	r1, r2
1000030a:	0003      	movs	r3, r0
1000030c:	4090      	lsls	r0, r2
1000030e:	469c      	mov	ip, r3
10000310:	3a20      	subs	r2, #32
10000312:	4093      	lsls	r3, r2
10000314:	4319      	orrs	r1, r3
10000316:	4252      	negs	r2, r2
10000318:	4663      	mov	r3, ip
1000031a:	40d3      	lsrs	r3, r2
1000031c:	4319      	orrs	r1, r3
1000031e:	4770      	bx	lr

10000320 <__clzdi2>:
10000320:	b510      	push	{r4, lr}
10000322:	2900      	cmp	r1, #0
10000324:	d103      	bne.n	1000032e <__clzdi2+0xe>
10000326:	f7ff ffa5 	bl	10000274 <__clzsi2>
1000032a:	3020      	adds	r0, #32
1000032c:	e002      	b.n	10000334 <__clzdi2+0x14>
1000032e:	0008      	movs	r0, r1
10000330:	f7ff ffa0 	bl	10000274 <__clzsi2>
10000334:	bd10      	pop	{r4, pc}
10000336:	46c0      	nop			; (mov r8, r8)

10000338 <__aeabi_lmul>:
10000338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000033a:	9301      	str	r3, [sp, #4]
1000033c:	b283      	uxth	r3, r0
1000033e:	469c      	mov	ip, r3
10000340:	0006      	movs	r6, r0
10000342:	0c03      	lsrs	r3, r0, #16
10000344:	4660      	mov	r0, ip
10000346:	000d      	movs	r5, r1
10000348:	4661      	mov	r1, ip
1000034a:	b297      	uxth	r7, r2
1000034c:	4378      	muls	r0, r7
1000034e:	0c14      	lsrs	r4, r2, #16
10000350:	435f      	muls	r7, r3
10000352:	4363      	muls	r3, r4
10000354:	434c      	muls	r4, r1
10000356:	0c01      	lsrs	r1, r0, #16
10000358:	468c      	mov	ip, r1
1000035a:	19e4      	adds	r4, r4, r7
1000035c:	4464      	add	r4, ip
1000035e:	42a7      	cmp	r7, r4
10000360:	d902      	bls.n	10000368 <__aeabi_lmul+0x30>
10000362:	2180      	movs	r1, #128	; 0x80
10000364:	0249      	lsls	r1, r1, #9
10000366:	185b      	adds	r3, r3, r1
10000368:	9901      	ldr	r1, [sp, #4]
1000036a:	436a      	muls	r2, r5
1000036c:	4371      	muls	r1, r6
1000036e:	0c27      	lsrs	r7, r4, #16
10000370:	18fb      	adds	r3, r7, r3
10000372:	0424      	lsls	r4, r4, #16
10000374:	18c9      	adds	r1, r1, r3
10000376:	b280      	uxth	r0, r0
10000378:	1820      	adds	r0, r4, r0
1000037a:	1889      	adds	r1, r1, r2
1000037c:	b003      	add	sp, #12
1000037e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000380 <__udivmoddi4>:
10000380:	b5f0      	push	{r4, r5, r6, r7, lr}
10000382:	0006      	movs	r6, r0
10000384:	000f      	movs	r7, r1
10000386:	0015      	movs	r5, r2
10000388:	001c      	movs	r4, r3
1000038a:	b085      	sub	sp, #20
1000038c:	428b      	cmp	r3, r1
1000038e:	d863      	bhi.n	10000458 <__udivmoddi4+0xd8>
10000390:	d101      	bne.n	10000396 <__udivmoddi4+0x16>
10000392:	4282      	cmp	r2, r0
10000394:	d860      	bhi.n	10000458 <__udivmoddi4+0xd8>
10000396:	0021      	movs	r1, r4
10000398:	0028      	movs	r0, r5
1000039a:	f7ff ffc1 	bl	10000320 <__clzdi2>
1000039e:	0039      	movs	r1, r7
100003a0:	9000      	str	r0, [sp, #0]
100003a2:	0030      	movs	r0, r6
100003a4:	f7ff ffbc 	bl	10000320 <__clzdi2>
100003a8:	9b00      	ldr	r3, [sp, #0]
100003aa:	0021      	movs	r1, r4
100003ac:	1a1b      	subs	r3, r3, r0
100003ae:	001a      	movs	r2, r3
100003b0:	0028      	movs	r0, r5
100003b2:	9303      	str	r3, [sp, #12]
100003b4:	f7ff ffa8 	bl	10000308 <__aeabi_llsl>
100003b8:	9000      	str	r0, [sp, #0]
100003ba:	9101      	str	r1, [sp, #4]
100003bc:	42b9      	cmp	r1, r7
100003be:	d845      	bhi.n	1000044c <__udivmoddi4+0xcc>
100003c0:	d101      	bne.n	100003c6 <__udivmoddi4+0x46>
100003c2:	42b0      	cmp	r0, r6
100003c4:	d842      	bhi.n	1000044c <__udivmoddi4+0xcc>
100003c6:	9b00      	ldr	r3, [sp, #0]
100003c8:	9c01      	ldr	r4, [sp, #4]
100003ca:	2001      	movs	r0, #1
100003cc:	2100      	movs	r1, #0
100003ce:	9a03      	ldr	r2, [sp, #12]
100003d0:	1af6      	subs	r6, r6, r3
100003d2:	41a7      	sbcs	r7, r4
100003d4:	f7ff ff98 	bl	10000308 <__aeabi_llsl>
100003d8:	0004      	movs	r4, r0
100003da:	000d      	movs	r5, r1
100003dc:	9b03      	ldr	r3, [sp, #12]
100003de:	2b00      	cmp	r3, #0
100003e0:	d02b      	beq.n	1000043a <__udivmoddi4+0xba>
100003e2:	9b01      	ldr	r3, [sp, #4]
100003e4:	9a00      	ldr	r2, [sp, #0]
100003e6:	07db      	lsls	r3, r3, #31
100003e8:	0850      	lsrs	r0, r2, #1
100003ea:	4318      	orrs	r0, r3
100003ec:	9b01      	ldr	r3, [sp, #4]
100003ee:	0859      	lsrs	r1, r3, #1
100003f0:	9b03      	ldr	r3, [sp, #12]
100003f2:	469c      	mov	ip, r3
100003f4:	42b9      	cmp	r1, r7
100003f6:	d82c      	bhi.n	10000452 <__udivmoddi4+0xd2>
100003f8:	d101      	bne.n	100003fe <__udivmoddi4+0x7e>
100003fa:	42b0      	cmp	r0, r6
100003fc:	d829      	bhi.n	10000452 <__udivmoddi4+0xd2>
100003fe:	0032      	movs	r2, r6
10000400:	003b      	movs	r3, r7
10000402:	1a12      	subs	r2, r2, r0
10000404:	418b      	sbcs	r3, r1
10000406:	2601      	movs	r6, #1
10000408:	1892      	adds	r2, r2, r2
1000040a:	415b      	adcs	r3, r3
1000040c:	2700      	movs	r7, #0
1000040e:	18b6      	adds	r6, r6, r2
10000410:	415f      	adcs	r7, r3
10000412:	2301      	movs	r3, #1
10000414:	425b      	negs	r3, r3
10000416:	449c      	add	ip, r3
10000418:	4663      	mov	r3, ip
1000041a:	2b00      	cmp	r3, #0
1000041c:	d1ea      	bne.n	100003f4 <__udivmoddi4+0x74>
1000041e:	0030      	movs	r0, r6
10000420:	0039      	movs	r1, r7
10000422:	9a03      	ldr	r2, [sp, #12]
10000424:	f7ff ff64 	bl	100002f0 <__aeabi_llsr>
10000428:	9a03      	ldr	r2, [sp, #12]
1000042a:	19a4      	adds	r4, r4, r6
1000042c:	417d      	adcs	r5, r7
1000042e:	0006      	movs	r6, r0
10000430:	000f      	movs	r7, r1
10000432:	f7ff ff69 	bl	10000308 <__aeabi_llsl>
10000436:	1a24      	subs	r4, r4, r0
10000438:	418d      	sbcs	r5, r1
1000043a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000043c:	2b00      	cmp	r3, #0
1000043e:	d001      	beq.n	10000444 <__udivmoddi4+0xc4>
10000440:	601e      	str	r6, [r3, #0]
10000442:	605f      	str	r7, [r3, #4]
10000444:	0020      	movs	r0, r4
10000446:	0029      	movs	r1, r5
10000448:	b005      	add	sp, #20
1000044a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000044c:	2400      	movs	r4, #0
1000044e:	2500      	movs	r5, #0
10000450:	e7c4      	b.n	100003dc <__udivmoddi4+0x5c>
10000452:	19b6      	adds	r6, r6, r6
10000454:	417f      	adcs	r7, r7
10000456:	e7dc      	b.n	10000412 <__udivmoddi4+0x92>
10000458:	2400      	movs	r4, #0
1000045a:	2500      	movs	r5, #0
1000045c:	e7ed      	b.n	1000043a <__udivmoddi4+0xba>
	...

10000460 <gpio_pin_toggle_dt.constprop.0.isra.0>:
 *     gpio_pin_toggle(spec->port, spec->pin);
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
10000460:	b510      	push	{r4, lr}
	return api->port_toggle_bits(port, pins);
10000462:	2180      	movs	r1, #128	; 0x80
10000464:	4802      	ldr	r0, [pc, #8]	; (10000470 <gpio_pin_toggle_dt.constprop.0.isra.0+0x10>)
10000466:	0489      	lsls	r1, r1, #18
10000468:	6883      	ldr	r3, [r0, #8]
1000046a:	695b      	ldr	r3, [r3, #20]
1000046c:	4798      	blx	r3
{
	return gpio_pin_toggle(spec->port, spec->pin);
}
1000046e:	bd10      	pop	{r4, pc}
10000470:	100030ac 	.word	0x100030ac

10000474 <main>:

void timer_handler(struct k_timer *timer_id) {
	gpio_pin_toggle_dt(&led);
}

void main(void) {	
10000474:	b513      	push	{r0, r1, r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
10000476:	4c0f      	ldr	r4, [pc, #60]	; (100004b4 <main+0x40>)
10000478:	0020      	movs	r0, r4
1000047a:	f002 fcca 	bl	10002e12 <z_device_is_ready>
	if (!device_is_ready(led.port)) return;
1000047e:	2800      	cmp	r0, #0
10000480:	d017      	beq.n	100004b2 <main+0x3e>
	struct gpio_driver_data *data =
10000482:	6922      	ldr	r2, [r4, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10000484:	4b0c      	ldr	r3, [pc, #48]	; (100004b8 <main+0x44>)
10000486:	6810      	ldr	r0, [r2, #0]
	const struct gpio_driver_api *api =
10000488:	68a1      	ldr	r1, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
1000048a:	4003      	ands	r3, r0
1000048c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
1000048e:	22a0      	movs	r2, #160	; 0xa0
10000490:	680b      	ldr	r3, [r1, #0]
10000492:	0020      	movs	r0, r4
10000494:	2119      	movs	r1, #25
10000496:	0312      	lsls	r2, r2, #12
10000498:	4798      	blx	r3
		(void) arch_syscall_invoke5(parm0.x, parm1.split.lo, parm1.split.hi, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
1000049a:	2300      	movs	r3, #0
1000049c:	4a07      	ldr	r2, [pc, #28]	; (100004bc <main+0x48>)
1000049e:	4808      	ldr	r0, [pc, #32]	; (100004c0 <main+0x4c>)
100004a0:	9200      	str	r2, [sp, #0]
100004a2:	9301      	str	r3, [sp, #4]
100004a4:	2200      	movs	r2, #0
100004a6:	2300      	movs	r3, #0
100004a8:	f001 ffd0 	bl	1000244c <z_impl_k_timer_start>
	gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);

	k_timer_start(&app_timer, K_NO_WAIT, K_MSEC(500));
	printk("started \r\n");
100004ac:	4805      	ldr	r0, [pc, #20]	; (100004c4 <main+0x50>)
100004ae:	f002 f836 	bl	1000251e <printk>
}
100004b2:	bd13      	pop	{r0, r1, r4, pc}
100004b4:	100030ac 	.word	0x100030ac
100004b8:	fdffffff 	.word	0xfdffffff
100004bc:	00001388 	.word	0x00001388
100004c0:	20000030 	.word	0x20000030
100004c4:	1000332c 	.word	0x1000332c

100004c8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
100004c8:	680b      	ldr	r3, [r1, #0]
{
100004ca:	b510      	push	{r4, lr}
	ctx->count++;
100004cc:	3301      	adds	r3, #1
100004ce:	600b      	str	r3, [r1, #0]
	return _char_out(c);
100004d0:	4b01      	ldr	r3, [pc, #4]	; (100004d8 <char_out+0x10>)
100004d2:	681b      	ldr	r3, [r3, #0]
100004d4:	4798      	blx	r3
}
100004d6:	bd10      	pop	{r4, pc}
100004d8:	20000000 	.word	0x20000000

100004dc <__printk_hook_install>:
	_char_out = fn;
100004dc:	4b01      	ldr	r3, [pc, #4]	; (100004e4 <__printk_hook_install+0x8>)
100004de:	6018      	str	r0, [r3, #0]
}
100004e0:	4770      	bx	lr
100004e2:	46c0      	nop			; (mov r8, r8)
100004e4:	20000000 	.word	0x20000000

100004e8 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
100004e8:	b507      	push	{r0, r1, r2, lr}
100004ea:	000b      	movs	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
100004ec:	2100      	movs	r1, #0
{
100004ee:	0002      	movs	r2, r0
		struct out_context ctx = { 0 };
100004f0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
100004f2:	4802      	ldr	r0, [pc, #8]	; (100004fc <vprintk+0x14>)
100004f4:	a901      	add	r1, sp, #4
100004f6:	f000 f803 	bl	10000500 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
100004fa:	bd07      	pop	{r0, r1, r2, pc}
100004fc:	100004c9 	.word	0x100004c9

10000500 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
10000500:	b5f0      	push	{r4, r5, r6, r7, lr}
10000502:	001e      	movs	r6, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
10000504:	2700      	movs	r7, #0
{
10000506:	b097      	sub	sp, #92	; 0x5c
10000508:	9005      	str	r0, [sp, #20]
1000050a:	9106      	str	r1, [sp, #24]
1000050c:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
1000050e:	9b08      	ldr	r3, [sp, #32]
10000510:	7818      	ldrb	r0, [r3, #0]
10000512:	2800      	cmp	r0, #0
10000514:	d101      	bne.n	1000051a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
10000516:	0038      	movs	r0, r7
10000518:	e32d      	b.n	10000b76 <cbvprintf+0x676>
			OUTC(*fp++);
1000051a:	9b08      	ldr	r3, [sp, #32]
1000051c:	3301      	adds	r3, #1
1000051e:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
10000520:	2825      	cmp	r0, #37	; 0x25
10000522:	d00b      	beq.n	1000053c <cbvprintf+0x3c>
			OUTC(*fp++);
10000524:	9906      	ldr	r1, [sp, #24]
10000526:	9b05      	ldr	r3, [sp, #20]
10000528:	4798      	blx	r3
1000052a:	2800      	cmp	r0, #0
1000052c:	da00      	bge.n	10000530 <cbvprintf+0x30>
1000052e:	e322      	b.n	10000b76 <cbvprintf+0x676>
			continue;
10000530:	0034      	movs	r4, r6
			OUTC(*fp++);
10000532:	3701      	adds	r7, #1
			continue;
10000534:	9b07      	ldr	r3, [sp, #28]
10000536:	0026      	movs	r6, r4
10000538:	9308      	str	r3, [sp, #32]
1000053a:	e7e8      	b.n	1000050e <cbvprintf+0xe>
		} state = {
1000053c:	ac10      	add	r4, sp, #64	; 0x40
1000053e:	2218      	movs	r2, #24
10000540:	2100      	movs	r1, #0
10000542:	0020      	movs	r0, r4
10000544:	f002 f895 	bl	10002672 <memset>
	if (*sp == '%') {
10000548:	9b08      	ldr	r3, [sp, #32]
1000054a:	785b      	ldrb	r3, [r3, #1]
1000054c:	2b25      	cmp	r3, #37	; 0x25
1000054e:	d117      	bne.n	10000580 <cbvprintf+0x80>
		conv->specifier = *sp++;
10000550:	9a08      	ldr	r2, [sp, #32]
10000552:	72e3      	strb	r3, [r4, #11]
10000554:	3202      	adds	r2, #2
10000556:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
10000558:	2201      	movs	r2, #1
1000055a:	ab10      	add	r3, sp, #64	; 0x40
1000055c:	7a59      	ldrb	r1, [r3, #9]
1000055e:	4211      	tst	r1, r2
10000560:	d100      	bne.n	10000564 <cbvprintf+0x64>
10000562:	e175      	b.n	10000850 <cbvprintf+0x350>
			width = va_arg(ap, int);
10000564:	0034      	movs	r4, r6
10000566:	cc04      	ldmia	r4!, {r2}
10000568:	9203      	str	r2, [sp, #12]
			if (width < 0) {
1000056a:	2a00      	cmp	r2, #0
1000056c:	db00      	blt.n	10000570 <cbvprintf+0x70>
1000056e:	e175      	b.n	1000085c <cbvprintf+0x35c>
				conv->flag_dash = true;
10000570:	2004      	movs	r0, #4
10000572:	7a1a      	ldrb	r2, [r3, #8]
10000574:	4302      	orrs	r2, r0
10000576:	721a      	strb	r2, [r3, #8]
				width = -width;
10000578:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
1000057a:	425b      	negs	r3, r3
1000057c:	9303      	str	r3, [sp, #12]
1000057e:	e16d      	b.n	1000085c <cbvprintf+0x35c>
10000580:	2200      	movs	r2, #0
10000582:	0014      	movs	r4, r2
10000584:	4694      	mov	ip, r2
10000586:	0011      	movs	r1, r2
10000588:	9203      	str	r2, [sp, #12]
		switch (*sp) {
1000058a:	9b07      	ldr	r3, [sp, #28]
1000058c:	781b      	ldrb	r3, [r3, #0]
1000058e:	2b2b      	cmp	r3, #43	; 0x2b
10000590:	d06f      	beq.n	10000672 <cbvprintf+0x172>
10000592:	d868      	bhi.n	10000666 <cbvprintf+0x166>
10000594:	2b20      	cmp	r3, #32
10000596:	d072      	beq.n	1000067e <cbvprintf+0x17e>
10000598:	2b23      	cmp	r3, #35	; 0x23
1000059a:	d072      	beq.n	10000682 <cbvprintf+0x182>
1000059c:	2900      	cmp	r1, #0
1000059e:	d004      	beq.n	100005aa <cbvprintf+0xaa>
100005a0:	2004      	movs	r0, #4
100005a2:	ad10      	add	r5, sp, #64	; 0x40
100005a4:	7a29      	ldrb	r1, [r5, #8]
100005a6:	4301      	orrs	r1, r0
100005a8:	7229      	strb	r1, [r5, #8]
100005aa:	4661      	mov	r1, ip
100005ac:	2900      	cmp	r1, #0
100005ae:	d006      	beq.n	100005be <cbvprintf+0xbe>
100005b0:	ad10      	add	r5, sp, #64	; 0x40
100005b2:	7a29      	ldrb	r1, [r5, #8]
100005b4:	468c      	mov	ip, r1
100005b6:	2108      	movs	r1, #8
100005b8:	4660      	mov	r0, ip
100005ba:	4301      	orrs	r1, r0
100005bc:	7229      	strb	r1, [r5, #8]
100005be:	2c00      	cmp	r4, #0
100005c0:	d004      	beq.n	100005cc <cbvprintf+0xcc>
100005c2:	2110      	movs	r1, #16
100005c4:	ac10      	add	r4, sp, #64	; 0x40
100005c6:	7a25      	ldrb	r5, [r4, #8]
100005c8:	4329      	orrs	r1, r5
100005ca:	7221      	strb	r1, [r4, #8]
100005cc:	9903      	ldr	r1, [sp, #12]
100005ce:	2900      	cmp	r1, #0
100005d0:	d004      	beq.n	100005dc <cbvprintf+0xdc>
100005d2:	2120      	movs	r1, #32
100005d4:	a810      	add	r0, sp, #64	; 0x40
100005d6:	7a04      	ldrb	r4, [r0, #8]
100005d8:	4321      	orrs	r1, r4
100005da:	7201      	strb	r1, [r0, #8]
100005dc:	2a00      	cmp	r2, #0
100005de:	d004      	beq.n	100005ea <cbvprintf+0xea>
100005e0:	2240      	movs	r2, #64	; 0x40
100005e2:	a910      	add	r1, sp, #64	; 0x40
100005e4:	7a08      	ldrb	r0, [r1, #8]
100005e6:	4302      	orrs	r2, r0
100005e8:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
100005ea:	2144      	movs	r1, #68	; 0x44
100005ec:	a810      	add	r0, sp, #64	; 0x40
100005ee:	7a02      	ldrb	r2, [r0, #8]
100005f0:	4011      	ands	r1, r2
100005f2:	2944      	cmp	r1, #68	; 0x44
100005f4:	d102      	bne.n	100005fc <cbvprintf+0xfc>
		conv->flag_zero = false;
100005f6:	2140      	movs	r1, #64	; 0x40
100005f8:	438a      	bics	r2, r1
100005fa:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
100005fc:	2280      	movs	r2, #128	; 0x80
100005fe:	7a01      	ldrb	r1, [r0, #8]
10000600:	4252      	negs	r2, r2
10000602:	430a      	orrs	r2, r1
10000604:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
10000606:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
10000608:	240a      	movs	r4, #10
1000060a:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
1000060c:	2b2a      	cmp	r3, #42	; 0x2a
1000060e:	d141      	bne.n	10000694 <cbvprintf+0x194>
		conv->width_star = true;
10000610:	7a43      	ldrb	r3, [r0, #9]
10000612:	3101      	adds	r1, #1
10000614:	430b      	orrs	r3, r1
			++sp;
10000616:	3201      	adds	r2, #1
		conv->width_star = true;
10000618:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
1000061a:	7814      	ldrb	r4, [r2, #0]
1000061c:	2502      	movs	r5, #2
1000061e:	0021      	movs	r1, r4
10000620:	392e      	subs	r1, #46	; 0x2e
10000622:	424b      	negs	r3, r1
10000624:	4159      	adcs	r1, r3
10000626:	a810      	add	r0, sp, #64	; 0x40
10000628:	7a43      	ldrb	r3, [r0, #9]
1000062a:	0049      	lsls	r1, r1, #1
1000062c:	43ab      	bics	r3, r5
1000062e:	4319      	orrs	r1, r3
10000630:	7241      	strb	r1, [r0, #9]
	if (!conv->prec_present) {
10000632:	2c2e      	cmp	r4, #46	; 0x2e
10000634:	d146      	bne.n	100006c4 <cbvprintf+0x1c4>
	if (*sp == '*') {
10000636:	7853      	ldrb	r3, [r2, #1]
10000638:	2b2a      	cmp	r3, #42	; 0x2a
1000063a:	d03e      	beq.n	100006ba <cbvprintf+0x1ba>
	size_t val = 0;
1000063c:	2300      	movs	r3, #0
	++sp;
1000063e:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
10000640:	3508      	adds	r5, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
10000642:	7811      	ldrb	r1, [r2, #0]
10000644:	1c54      	adds	r4, r2, #1
10000646:	0008      	movs	r0, r1
10000648:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
1000064a:	2809      	cmp	r0, #9
1000064c:	d961      	bls.n	10000712 <cbvprintf+0x212>
	conv->prec_value = prec;
1000064e:	a910      	add	r1, sp, #64	; 0x40
10000650:	9314      	str	r3, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
10000652:	7a08      	ldrb	r0, [r1, #8]
10000654:	0784      	lsls	r4, r0, #30
			      || (prec != (size_t)conv->prec_value));
10000656:	4323      	orrs	r3, r4
	conv->unsupported |= ((conv->prec_value < 0)
10000658:	2402      	movs	r4, #2
1000065a:	0fdb      	lsrs	r3, r3, #31
1000065c:	005b      	lsls	r3, r3, #1
1000065e:	43a0      	bics	r0, r4
10000660:	4303      	orrs	r3, r0
10000662:	720b      	strb	r3, [r1, #8]
	return sp;
10000664:	e02e      	b.n	100006c4 <cbvprintf+0x1c4>
		switch (*sp) {
10000666:	2b2d      	cmp	r3, #45	; 0x2d
10000668:	d00e      	beq.n	10000688 <cbvprintf+0x188>
1000066a:	2b30      	cmp	r3, #48	; 0x30
1000066c:	d196      	bne.n	1000059c <cbvprintf+0x9c>
			conv->flag_zero = true;
1000066e:	2201      	movs	r2, #1
10000670:	e001      	b.n	10000676 <cbvprintf+0x176>
			conv->flag_plus = true;
10000672:	2301      	movs	r3, #1
10000674:	469c      	mov	ip, r3
			++sp;
10000676:	9b07      	ldr	r3, [sp, #28]
10000678:	3301      	adds	r3, #1
1000067a:	9307      	str	r3, [sp, #28]
	} while (loop);
1000067c:	e785      	b.n	1000058a <cbvprintf+0x8a>
			conv->flag_space = true;
1000067e:	2401      	movs	r4, #1
10000680:	e7f9      	b.n	10000676 <cbvprintf+0x176>
			conv->flag_hash = true;
10000682:	2301      	movs	r3, #1
10000684:	9303      	str	r3, [sp, #12]
10000686:	e7f6      	b.n	10000676 <cbvprintf+0x176>
		switch (*sp) {
10000688:	2101      	movs	r1, #1
1000068a:	e7f4      	b.n	10000676 <cbvprintf+0x176>
		val = 10U * val + *sp++ - '0';
1000068c:	002a      	movs	r2, r5
1000068e:	4361      	muls	r1, r4
10000690:	3930      	subs	r1, #48	; 0x30
10000692:	18c9      	adds	r1, r1, r3
10000694:	7813      	ldrb	r3, [r2, #0]
10000696:	1c55      	adds	r5, r2, #1
10000698:	0018      	movs	r0, r3
1000069a:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
1000069c:	2809      	cmp	r0, #9
1000069e:	d9f5      	bls.n	1000068c <cbvprintf+0x18c>
	if (sp != wp) {
100006a0:	9b07      	ldr	r3, [sp, #28]
100006a2:	4293      	cmp	r3, r2
100006a4:	d0b9      	beq.n	1000061a <cbvprintf+0x11a>
		conv->unsupported |= ((conv->width_value < 0)
100006a6:	2402      	movs	r4, #2
		conv->width_value = width;
100006a8:	ab10      	add	r3, sp, #64	; 0x40
		conv->unsupported |= ((conv->width_value < 0)
100006aa:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
100006ac:	9113      	str	r1, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
100006ae:	0fc9      	lsrs	r1, r1, #31
		conv->unsupported |= ((conv->width_value < 0)
100006b0:	0049      	lsls	r1, r1, #1
100006b2:	43a0      	bics	r0, r4
100006b4:	4301      	orrs	r1, r0
100006b6:	7219      	strb	r1, [r3, #8]
100006b8:	e7af      	b.n	1000061a <cbvprintf+0x11a>
		conv->prec_star = true;
100006ba:	2104      	movs	r1, #4
100006bc:	7a43      	ldrb	r3, [r0, #9]
		return ++sp;
100006be:	3202      	adds	r2, #2
		conv->prec_star = true;
100006c0:	430b      	orrs	r3, r1
100006c2:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
100006c4:	7811      	ldrb	r1, [r2, #0]
		if (*++sp == 'h') {
100006c6:	1c50      	adds	r0, r2, #1
100006c8:	ab10      	add	r3, sp, #64	; 0x40
	switch (*sp) {
100006ca:	296c      	cmp	r1, #108	; 0x6c
100006cc:	d041      	beq.n	10000752 <cbvprintf+0x252>
100006ce:	d825      	bhi.n	1000071c <cbvprintf+0x21c>
100006d0:	2968      	cmp	r1, #104	; 0x68
100006d2:	d02d      	beq.n	10000730 <cbvprintf+0x230>
100006d4:	296a      	cmp	r1, #106	; 0x6a
100006d6:	d048      	beq.n	1000076a <cbvprintf+0x26a>
100006d8:	294c      	cmp	r1, #76	; 0x4c
100006da:	d052      	beq.n	10000782 <cbvprintf+0x282>
100006dc:	0010      	movs	r0, r2
	conv->specifier = *sp++;
100006de:	7802      	ldrb	r2, [r0, #0]
100006e0:	1c43      	adds	r3, r0, #1
100006e2:	a910      	add	r1, sp, #64	; 0x40
100006e4:	9307      	str	r3, [sp, #28]
100006e6:	72ca      	strb	r2, [r1, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
100006e8:	7a4b      	ldrb	r3, [r1, #9]
	switch (conv->specifier) {
100006ea:	2a78      	cmp	r2, #120	; 0x78
100006ec:	d900      	bls.n	100006f0 <cbvprintf+0x1f0>
100006ee:	e0a8      	b.n	10000842 <cbvprintf+0x342>
100006f0:	2a57      	cmp	r2, #87	; 0x57
100006f2:	d84d      	bhi.n	10000790 <cbvprintf+0x290>
100006f4:	2a41      	cmp	r2, #65	; 0x41
100006f6:	d003      	beq.n	10000700 <cbvprintf+0x200>
100006f8:	3a45      	subs	r2, #69	; 0x45
100006fa:	2a02      	cmp	r2, #2
100006fc:	d900      	bls.n	10000700 <cbvprintf+0x200>
100006fe:	e0a0      	b.n	10000842 <cbvprintf+0x342>
		conv->specifier_cat = SPECIFIER_FP;
10000700:	2107      	movs	r1, #7
10000702:	aa10      	add	r2, sp, #64	; 0x40
10000704:	7a93      	ldrb	r3, [r2, #10]
10000706:	438b      	bics	r3, r1
10000708:	3903      	subs	r1, #3
1000070a:	430b      	orrs	r3, r1
1000070c:	7293      	strb	r3, [r2, #10]
			unsupported = true;
1000070e:	2301      	movs	r3, #1
			break;
10000710:	e06a      	b.n	100007e8 <cbvprintf+0x2e8>
		val = 10U * val + *sp++ - '0';
10000712:	436b      	muls	r3, r5
10000714:	3b30      	subs	r3, #48	; 0x30
10000716:	0022      	movs	r2, r4
10000718:	18cb      	adds	r3, r1, r3
1000071a:	e792      	b.n	10000642 <cbvprintf+0x142>
	switch (*sp) {
1000071c:	2974      	cmp	r1, #116	; 0x74
1000071e:	d02a      	beq.n	10000776 <cbvprintf+0x276>
10000720:	297a      	cmp	r1, #122	; 0x7a
10000722:	d1db      	bne.n	100006dc <cbvprintf+0x1dc>
		conv->length_mod = LENGTH_Z;
10000724:	2178      	movs	r1, #120	; 0x78
10000726:	7a5a      	ldrb	r2, [r3, #9]
10000728:	438a      	bics	r2, r1
1000072a:	0011      	movs	r1, r2
1000072c:	2230      	movs	r2, #48	; 0x30
1000072e:	e00d      	b.n	1000074c <cbvprintf+0x24c>
		if (*++sp == 'h') {
10000730:	7851      	ldrb	r1, [r2, #1]
10000732:	2478      	movs	r4, #120	; 0x78
10000734:	2968      	cmp	r1, #104	; 0x68
10000736:	d106      	bne.n	10000746 <cbvprintf+0x246>
			conv->length_mod = LENGTH_HH;
10000738:	7a58      	ldrb	r0, [r3, #9]
1000073a:	3960      	subs	r1, #96	; 0x60
1000073c:	43a0      	bics	r0, r4
			conv->length_mod = LENGTH_LL;
1000073e:	4301      	orrs	r1, r0
10000740:	7259      	strb	r1, [r3, #9]
			++sp;
10000742:	1c90      	adds	r0, r2, #2
10000744:	e7cb      	b.n	100006de <cbvprintf+0x1de>
			conv->length_mod = LENGTH_H;
10000746:	2210      	movs	r2, #16
10000748:	7a59      	ldrb	r1, [r3, #9]
1000074a:	43a1      	bics	r1, r4
		conv->length_mod = LENGTH_T;
1000074c:	430a      	orrs	r2, r1
1000074e:	725a      	strb	r2, [r3, #9]
		break;
10000750:	e7c5      	b.n	100006de <cbvprintf+0x1de>
		if (*++sp == 'l') {
10000752:	7851      	ldrb	r1, [r2, #1]
10000754:	2478      	movs	r4, #120	; 0x78
10000756:	296c      	cmp	r1, #108	; 0x6c
10000758:	d103      	bne.n	10000762 <cbvprintf+0x262>
			conv->length_mod = LENGTH_LL;
1000075a:	7a58      	ldrb	r0, [r3, #9]
1000075c:	394c      	subs	r1, #76	; 0x4c
1000075e:	43a0      	bics	r0, r4
10000760:	e7ed      	b.n	1000073e <cbvprintf+0x23e>
			conv->length_mod = LENGTH_L;
10000762:	7a59      	ldrb	r1, [r3, #9]
10000764:	2218      	movs	r2, #24
10000766:	43a1      	bics	r1, r4
10000768:	e7f0      	b.n	1000074c <cbvprintf+0x24c>
		conv->length_mod = LENGTH_J;
1000076a:	2178      	movs	r1, #120	; 0x78
1000076c:	7a5a      	ldrb	r2, [r3, #9]
1000076e:	438a      	bics	r2, r1
10000770:	0011      	movs	r1, r2
10000772:	2228      	movs	r2, #40	; 0x28
10000774:	e7ea      	b.n	1000074c <cbvprintf+0x24c>
		conv->length_mod = LENGTH_T;
10000776:	2178      	movs	r1, #120	; 0x78
10000778:	7a5a      	ldrb	r2, [r3, #9]
1000077a:	438a      	bics	r2, r1
1000077c:	0011      	movs	r1, r2
1000077e:	2238      	movs	r2, #56	; 0x38
10000780:	e7e4      	b.n	1000074c <cbvprintf+0x24c>
		conv->unsupported = true;
10000782:	891a      	ldrh	r2, [r3, #8]
10000784:	49aa      	ldr	r1, [pc, #680]	; (10000a30 <cbvprintf+0x530>)
10000786:	4011      	ands	r1, r2
10000788:	4aaa      	ldr	r2, [pc, #680]	; (10000a34 <cbvprintf+0x534>)
1000078a:	430a      	orrs	r2, r1
1000078c:	811a      	strh	r2, [r3, #8]
		break;
1000078e:	e7a6      	b.n	100006de <cbvprintf+0x1de>
	switch (conv->specifier) {
10000790:	0010      	movs	r0, r2
10000792:	3858      	subs	r0, #88	; 0x58
10000794:	2820      	cmp	r0, #32
10000796:	d854      	bhi.n	10000842 <cbvprintf+0x342>
10000798:	f7ff fd06 	bl	100001a8 <__gnu_thumb1_case_sqi>
1000079c:	53535333 	.word	0x53535333
100007a0:	53535353 	.word	0x53535353
100007a4:	3353b253 	.word	0x3353b253
100007a8:	b2b2b211 	.word	0xb2b2b211
100007ac:	53531153 	.word	0x53531153
100007b0:	33395353 	.word	0x33395353
100007b4:	47535347 	.word	0x47535347
100007b8:	53533353 	.word	0x53533353
100007bc:	33          	.byte	0x33
100007bd:	00          	.byte	0x00
		conv->specifier_cat = SPECIFIER_SINT;
100007be:	2407      	movs	r4, #7
100007c0:	7a88      	ldrb	r0, [r1, #10]
100007c2:	43a0      	bics	r0, r4
100007c4:	3c06      	subs	r4, #6
		conv->specifier_cat = SPECIFIER_UINT;
100007c6:	4320      	orrs	r0, r4
100007c8:	7288      	strb	r0, [r1, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
100007ca:	2178      	movs	r1, #120	; 0x78
100007cc:	4019      	ands	r1, r3
100007ce:	2940      	cmp	r1, #64	; 0x40
100007d0:	d104      	bne.n	100007dc <cbvprintf+0x2dc>
			conv->invalid = true;
100007d2:	2401      	movs	r4, #1
100007d4:	a810      	add	r0, sp, #64	; 0x40
100007d6:	7a03      	ldrb	r3, [r0, #8]
100007d8:	4323      	orrs	r3, r4
100007da:	7203      	strb	r3, [r0, #8]
	bool unsupported = false;
100007dc:	2300      	movs	r3, #0
		if (conv->specifier == 'c') {
100007de:	2a63      	cmp	r2, #99	; 0x63
100007e0:	d102      	bne.n	100007e8 <cbvprintf+0x2e8>
			unsupported = (conv->length_mod != LENGTH_NONE);
100007e2:	1e4a      	subs	r2, r1, #1
100007e4:	4191      	sbcs	r1, r2
100007e6:	b2cb      	uxtb	r3, r1
	conv->unsupported |= unsupported;
100007e8:	aa10      	add	r2, sp, #64	; 0x40
100007ea:	7a11      	ldrb	r1, [r2, #8]
100007ec:	0788      	lsls	r0, r1, #30
100007ee:	0fc0      	lsrs	r0, r0, #31
100007f0:	4303      	orrs	r3, r0
100007f2:	2001      	movs	r0, #1
100007f4:	4003      	ands	r3, r0
100007f6:	4083      	lsls	r3, r0
100007f8:	1800      	adds	r0, r0, r0
100007fa:	4381      	bics	r1, r0
100007fc:	430b      	orrs	r3, r1
100007fe:	7213      	strb	r3, [r2, #8]
	return sp;
10000800:	e6aa      	b.n	10000558 <cbvprintf+0x58>
		conv->specifier_cat = SPECIFIER_UINT;
10000802:	2407      	movs	r4, #7
10000804:	7a88      	ldrb	r0, [r1, #10]
10000806:	43a0      	bics	r0, r4
10000808:	0004      	movs	r4, r0
1000080a:	2002      	movs	r0, #2
1000080c:	e7db      	b.n	100007c6 <cbvprintf+0x2c6>
		conv->specifier_cat = SPECIFIER_PTR;
1000080e:	2007      	movs	r0, #7
10000810:	7a8a      	ldrb	r2, [r1, #10]
10000812:	4382      	bics	r2, r0
10000814:	0010      	movs	r0, r2
10000816:	2203      	movs	r2, #3
10000818:	4302      	orrs	r2, r0
1000081a:	728a      	strb	r2, [r1, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
1000081c:	2278      	movs	r2, #120	; 0x78
1000081e:	4013      	ands	r3, r2
10000820:	3b40      	subs	r3, #64	; 0x40
10000822:	425a      	negs	r2, r3
10000824:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
10000826:	b2db      	uxtb	r3, r3
10000828:	e7de      	b.n	100007e8 <cbvprintf+0x2e8>
		conv->specifier_cat = SPECIFIER_PTR;
1000082a:	2007      	movs	r0, #7
1000082c:	7a8a      	ldrb	r2, [r1, #10]
1000082e:	4382      	bics	r2, r0
10000830:	0010      	movs	r0, r2
10000832:	2203      	movs	r2, #3
10000834:	4302      	orrs	r2, r0
10000836:	728a      	strb	r2, [r1, #10]
		if (conv->length_mod != LENGTH_NONE) {
10000838:	2278      	movs	r2, #120	; 0x78
1000083a:	4013      	ands	r3, r2
1000083c:	1e5a      	subs	r2, r3, #1
1000083e:	4193      	sbcs	r3, r2
10000840:	e7f1      	b.n	10000826 <cbvprintf+0x326>
		conv->invalid = true;
10000842:	2101      	movs	r1, #1
10000844:	aa10      	add	r2, sp, #64	; 0x40
10000846:	7a13      	ldrb	r3, [r2, #8]
10000848:	430b      	orrs	r3, r1
1000084a:	7213      	strb	r3, [r2, #8]
	bool unsupported = false;
1000084c:	2300      	movs	r3, #0
		break;
1000084e:	e7cb      	b.n	100007e8 <cbvprintf+0x2e8>
		} else if (conv->width_present) {
10000850:	7a1a      	ldrb	r2, [r3, #8]
10000852:	2a7f      	cmp	r2, #127	; 0x7f
10000854:	d910      	bls.n	10000878 <cbvprintf+0x378>
			width = conv->width_value;
10000856:	0034      	movs	r4, r6
10000858:	68db      	ldr	r3, [r3, #12]
1000085a:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
1000085c:	2304      	movs	r3, #4
1000085e:	aa10      	add	r2, sp, #64	; 0x40
10000860:	4219      	tst	r1, r3
10000862:	d00c      	beq.n	1000087e <cbvprintf+0x37e>
			int arg = va_arg(ap, int);
10000864:	cc40      	ldmia	r4!, {r6}
			if (arg < 0) {
10000866:	2e00      	cmp	r6, #0
10000868:	da0c      	bge.n	10000884 <cbvprintf+0x384>
				conv->prec_present = false;
1000086a:	2102      	movs	r1, #2
1000086c:	7a53      	ldrb	r3, [r2, #9]
1000086e:	438b      	bics	r3, r1
10000870:	7253      	strb	r3, [r2, #9]
		int precision = -1;
10000872:	2601      	movs	r6, #1
10000874:	4276      	negs	r6, r6
10000876:	e005      	b.n	10000884 <cbvprintf+0x384>
10000878:	0034      	movs	r4, r6
		int width = -1;
1000087a:	2301      	movs	r3, #1
1000087c:	e67d      	b.n	1000057a <cbvprintf+0x7a>
		} else if (conv->prec_present) {
1000087e:	078b      	lsls	r3, r1, #30
10000880:	d5f7      	bpl.n	10000872 <cbvprintf+0x372>
			precision = conv->prec_value;
10000882:	6916      	ldr	r6, [r2, #16]
		conv->pad0_value = 0;
10000884:	2500      	movs	r5, #0
10000886:	aa10      	add	r2, sp, #64	; 0x40
			= (enum length_mod_enum)conv->length_mod;
10000888:	7a51      	ldrb	r1, [r2, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
1000088a:	7a93      	ldrb	r3, [r2, #10]
			= (enum length_mod_enum)conv->length_mod;
1000088c:	0649      	lsls	r1, r1, #25
			= (enum specifier_cat_enum)conv->specifier_cat;
1000088e:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10000890:	0f09      	lsrs	r1, r1, #28
		enum specifier_cat_enum specifier_cat
10000892:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10000894:	9104      	str	r1, [sp, #16]
		conv->pad0_value = 0;
10000896:	60d5      	str	r5, [r2, #12]
		conv->pad0_pre_exp = 0;
10000898:	6115      	str	r5, [r2, #16]
		if (specifier_cat == SPECIFIER_SINT) {
1000089a:	2b01      	cmp	r3, #1
1000089c:	d13a      	bne.n	10000914 <cbvprintf+0x414>
			switch (length_mod) {
1000089e:	1ec8      	subs	r0, r1, #3
100008a0:	2804      	cmp	r0, #4
100008a2:	d821      	bhi.n	100008e8 <cbvprintf+0x3e8>
100008a4:	f7ff fc8a 	bl	100001bc <__gnu_thumb1_case_uqi>
100008a8:	20191903 	.word	0x20191903
100008ac:	20          	.byte	0x20
100008ad:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
100008ae:	cc08      	ldmia	r4!, {r3}
100008b0:	6013      	str	r3, [r2, #0]
100008b2:	17db      	asrs	r3, r3, #31
100008b4:	6053      	str	r3, [r2, #4]
		if (conv->invalid || conv->unsupported) {
100008b6:	aa10      	add	r2, sp, #64	; 0x40
100008b8:	7a13      	ldrb	r3, [r2, #8]
100008ba:	2003      	movs	r0, #3
100008bc:	001d      	movs	r5, r3
100008be:	4005      	ands	r5, r0
100008c0:	4203      	tst	r3, r0
100008c2:	d069      	beq.n	10000998 <cbvprintf+0x498>
			OUTS(sp, fp);
100008c4:	9b07      	ldr	r3, [sp, #28]
100008c6:	9a08      	ldr	r2, [sp, #32]
100008c8:	9906      	ldr	r1, [sp, #24]
100008ca:	9805      	ldr	r0, [sp, #20]
100008cc:	f001 fe88 	bl	100025e0 <outs>
100008d0:	2800      	cmp	r0, #0
100008d2:	da00      	bge.n	100008d6 <cbvprintf+0x3d6>
100008d4:	e14f      	b.n	10000b76 <cbvprintf+0x676>
100008d6:	183f      	adds	r7, r7, r0
			continue;
100008d8:	e62c      	b.n	10000534 <cbvprintf+0x34>
					(sint_value_type)va_arg(ap, intmax_t);
100008da:	2307      	movs	r3, #7
100008dc:	3407      	adds	r4, #7
100008de:	439c      	bics	r4, r3
				value->sint =
100008e0:	cc0c      	ldmia	r4!, {r2, r3}
100008e2:	9210      	str	r2, [sp, #64]	; 0x40
100008e4:	9311      	str	r3, [sp, #68]	; 0x44
				break;
100008e6:	e7e6      	b.n	100008b6 <cbvprintf+0x3b6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
100008e8:	cc01      	ldmia	r4!, {r0}
100008ea:	ab10      	add	r3, sp, #64	; 0x40
100008ec:	6010      	str	r0, [r2, #0]
100008ee:	17c0      	asrs	r0, r0, #31
100008f0:	6050      	str	r0, [r2, #4]
			if (length_mod == LENGTH_HH) {
100008f2:	9a04      	ldr	r2, [sp, #16]
100008f4:	2a01      	cmp	r2, #1
100008f6:	d105      	bne.n	10000904 <cbvprintf+0x404>
				value->sint = (char)value->sint;
100008f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
100008fa:	b2d2      	uxtb	r2, r2
100008fc:	9210      	str	r2, [sp, #64]	; 0x40
100008fe:	2200      	movs	r2, #0
				value->sint = (short)value->sint;
10000900:	605a      	str	r2, [r3, #4]
10000902:	e7d8      	b.n	100008b6 <cbvprintf+0x3b6>
			} else if (length_mod == LENGTH_H) {
10000904:	9a04      	ldr	r2, [sp, #16]
10000906:	2a02      	cmp	r2, #2
10000908:	d1d5      	bne.n	100008b6 <cbvprintf+0x3b6>
				value->sint = (short)value->sint;
1000090a:	2100      	movs	r1, #0
1000090c:	5e5a      	ldrsh	r2, [r3, r1]
1000090e:	601a      	str	r2, [r3, #0]
10000910:	17d2      	asrs	r2, r2, #31
10000912:	e7f5      	b.n	10000900 <cbvprintf+0x400>
		} else if (specifier_cat == SPECIFIER_UINT) {
10000914:	2b02      	cmp	r3, #2
10000916:	d12e      	bne.n	10000976 <cbvprintf+0x476>
			switch (length_mod) {
10000918:	9b04      	ldr	r3, [sp, #16]
1000091a:	1ed8      	subs	r0, r3, #3
1000091c:	2804      	cmp	r0, #4
1000091e:	d805      	bhi.n	1000092c <cbvprintf+0x42c>
10000920:	0015      	movs	r5, r2
10000922:	f7ff fc4b 	bl	100001bc <__gnu_thumb1_case_uqi>
10000926:	140e      	.short	0x140e
10000928:	1b14      	.short	0x1b14
1000092a:	1b          	.byte	0x1b
1000092b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
1000092c:	cc08      	ldmia	r4!, {r3}
1000092e:	c228      	stmia	r2!, {r3, r5}
			if (length_mod == LENGTH_HH) {
10000930:	9b04      	ldr	r3, [sp, #16]
10000932:	2b01      	cmp	r3, #1
10000934:	d117      	bne.n	10000966 <cbvprintf+0x466>
				value->uint = (unsigned char)value->uint;
10000936:	9b10      	ldr	r3, [sp, #64]	; 0x40
10000938:	b2db      	uxtb	r3, r3
				value->uint = (unsigned short)value->uint;
1000093a:	9310      	str	r3, [sp, #64]	; 0x40
1000093c:	2300      	movs	r3, #0
1000093e:	9311      	str	r3, [sp, #68]	; 0x44
10000940:	e7b9      	b.n	100008b6 <cbvprintf+0x3b6>
				if ((!WCHAR_IS_SIGNED)
10000942:	2300      	movs	r3, #0
					value->uint = va_arg(ap, unsigned long);
10000944:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
10000946:	1d20      	adds	r0, r4, #4
					value->uint = va_arg(ap, unsigned long);
10000948:	c50c      	stmia	r5!, {r2, r3}
					(uint_value_type)va_arg(ap, size_t);
1000094a:	0004      	movs	r4, r0
1000094c:	e7b3      	b.n	100008b6 <cbvprintf+0x3b6>
					(uint_value_type)va_arg(ap,
1000094e:	2307      	movs	r3, #7
10000950:	1de0      	adds	r0, r4, #7
10000952:	4398      	bics	r0, r3
				value->uint =
10000954:	c80c      	ldmia	r0!, {r2, r3}
10000956:	9210      	str	r2, [sp, #64]	; 0x40
10000958:	9311      	str	r3, [sp, #68]	; 0x44
				break;
1000095a:	e7f6      	b.n	1000094a <cbvprintf+0x44a>
					(uint_value_type)va_arg(ap, size_t);
1000095c:	cc08      	ldmia	r4!, {r3}
1000095e:	6013      	str	r3, [r2, #0]
10000960:	2300      	movs	r3, #0
10000962:	6053      	str	r3, [r2, #4]
				break;
10000964:	e7e4      	b.n	10000930 <cbvprintf+0x430>
			} else if (length_mod == LENGTH_H) {
10000966:	9b04      	ldr	r3, [sp, #16]
10000968:	2b02      	cmp	r3, #2
1000096a:	d1a4      	bne.n	100008b6 <cbvprintf+0x3b6>
				value->uint = (unsigned short)value->uint;
1000096c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000096e:	9309      	str	r3, [sp, #36]	; 0x24
10000970:	466b      	mov	r3, sp
10000972:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
10000974:	e7e1      	b.n	1000093a <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_FP) {
10000976:	2b04      	cmp	r3, #4
10000978:	d109      	bne.n	1000098e <cbvprintf+0x48e>
					(sint_value_type)va_arg(ap, long long);
1000097a:	2007      	movs	r0, #7
1000097c:	1de3      	adds	r3, r4, #7
1000097e:	4383      	bics	r3, r0
10000980:	001c      	movs	r4, r3
				value->dbl = va_arg(ap, double);
10000982:	6818      	ldr	r0, [r3, #0]
10000984:	6859      	ldr	r1, [r3, #4]
					(sint_value_type)va_arg(ap, long long);
10000986:	3408      	adds	r4, #8
				value->dbl = va_arg(ap, double);
10000988:	6010      	str	r0, [r2, #0]
1000098a:	6051      	str	r1, [r2, #4]
1000098c:	e793      	b.n	100008b6 <cbvprintf+0x3b6>
		} else if (specifier_cat == SPECIFIER_PTR) {
1000098e:	2b03      	cmp	r3, #3
10000990:	d191      	bne.n	100008b6 <cbvprintf+0x3b6>
			value->ptr = va_arg(ap, void *);
10000992:	cc08      	ldmia	r4!, {r3}
10000994:	6013      	str	r3, [r2, #0]
10000996:	e78e      	b.n	100008b6 <cbvprintf+0x3b6>
		switch (conv->specifier) {
10000998:	7ad0      	ldrb	r0, [r2, #11]
1000099a:	2878      	cmp	r0, #120	; 0x78
1000099c:	d900      	bls.n	100009a0 <cbvprintf+0x4a0>
1000099e:	e5c9      	b.n	10000534 <cbvprintf+0x34>
100009a0:	2862      	cmp	r0, #98	; 0x62
100009a2:	d821      	bhi.n	100009e8 <cbvprintf+0x4e8>
100009a4:	2825      	cmp	r0, #37	; 0x25
100009a6:	d03b      	beq.n	10000a20 <cbvprintf+0x520>
100009a8:	2858      	cmp	r0, #88	; 0x58
100009aa:	d000      	beq.n	100009ae <cbvprintf+0x4ae>
100009ac:	e5c2      	b.n	10000534 <cbvprintf+0x34>
			bps = encode_uint(value->uint, conv, buf, bpe);
100009ae:	9810      	ldr	r0, [sp, #64]	; 0x40
100009b0:	9911      	ldr	r1, [sp, #68]	; 0x44
100009b2:	231e      	movs	r3, #30
100009b4:	aa08      	add	r2, sp, #32
100009b6:	189b      	adds	r3, r3, r2
100009b8:	9300      	str	r3, [sp, #0]
100009ba:	aa12      	add	r2, sp, #72	; 0x48
100009bc:	ab0a      	add	r3, sp, #40	; 0x28
100009be:	f001 fdc3 	bl	10002548 <encode_uint>
100009c2:	9004      	str	r0, [sp, #16]
			if (precision >= 0) {
100009c4:	231e      	movs	r3, #30
100009c6:	aa08      	add	r2, sp, #32
100009c8:	189b      	adds	r3, r3, r2
100009ca:	9308      	str	r3, [sp, #32]
100009cc:	2e00      	cmp	r6, #0
100009ce:	db3f      	blt.n	10000a50 <cbvprintf+0x550>
				conv->flag_zero = false;
100009d0:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
100009d2:	9a04      	ldr	r2, [sp, #16]
100009d4:	1a9b      	subs	r3, r3, r2
				conv->flag_zero = false;
100009d6:	aa10      	add	r2, sp, #64	; 0x40
100009d8:	7a11      	ldrb	r1, [r2, #8]
100009da:	4381      	bics	r1, r0
100009dc:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
100009de:	429e      	cmp	r6, r3
100009e0:	d936      	bls.n	10000a50 <cbvprintf+0x550>
					conv->pad0_value = precision - (int)len;
100009e2:	1af3      	subs	r3, r6, r3
100009e4:	9313      	str	r3, [sp, #76]	; 0x4c
100009e6:	e033      	b.n	10000a50 <cbvprintf+0x550>
		switch (conv->specifier) {
100009e8:	3863      	subs	r0, #99	; 0x63
100009ea:	2815      	cmp	r0, #21
100009ec:	d900      	bls.n	100009f0 <cbvprintf+0x4f0>
100009ee:	e5a1      	b.n	10000534 <cbvprintf+0x34>
100009f0:	f7ff fbee 	bl	100001d0 <__gnu_thumb1_case_shi>
100009f4:	006f0065 	.word	0x006f0065
100009f8:	fda0fda0 	.word	0xfda0fda0
100009fc:	fda0fda0 	.word	0xfda0fda0
10000a00:	fda0006f 	.word	0xfda0006f
10000a04:	fda0fda0 	.word	0xfda0fda0
10000a08:	009cfda0 	.word	0x009cfda0
10000a0c:	00860084 	.word	0x00860084
10000a10:	fda0fda0 	.word	0xfda0fda0
10000a14:	fda00022 	.word	0xfda00022
10000a18:	fda00084 	.word	0xfda00084
10000a1c:	0084fda0 	.word	0x0084fda0
			OUTC('%');
10000a20:	9906      	ldr	r1, [sp, #24]
10000a22:	9b05      	ldr	r3, [sp, #20]
10000a24:	4798      	blx	r3
10000a26:	2800      	cmp	r0, #0
10000a28:	da00      	bge.n	10000a2c <cbvprintf+0x52c>
10000a2a:	e0a4      	b.n	10000b76 <cbvprintf+0x676>
10000a2c:	3701      	adds	r7, #1
			break;
10000a2e:	e581      	b.n	10000534 <cbvprintf+0x34>
10000a30:	ffff87fd 	.word	0xffff87fd
10000a34:	00004002 	.word	0x00004002
			bps = (const char *)value->ptr;
10000a38:	9b10      	ldr	r3, [sp, #64]	; 0x40
10000a3a:	9304      	str	r3, [sp, #16]
			if (precision >= 0) {
10000a3c:	2e00      	cmp	r6, #0
10000a3e:	db3a      	blt.n	10000ab6 <cbvprintf+0x5b6>
				len = strnlen(bps, precision);
10000a40:	0031      	movs	r1, r6
10000a42:	0018      	movs	r0, r3
10000a44:	f001 fe02 	bl	1000264c <strnlen>
		char sign = 0;
10000a48:	2500      	movs	r5, #0
			bpe = bps + len;
10000a4a:	9b04      	ldr	r3, [sp, #16]
10000a4c:	181b      	adds	r3, r3, r0
10000a4e:	9308      	str	r3, [sp, #32]
		if (bps == NULL) {
10000a50:	9b04      	ldr	r3, [sp, #16]
10000a52:	2b00      	cmp	r3, #0
10000a54:	d100      	bne.n	10000a58 <cbvprintf+0x558>
10000a56:	e56d      	b.n	10000534 <cbvprintf+0x34>
		size_t nj_len = (bpe - bps);
10000a58:	9b08      	ldr	r3, [sp, #32]
10000a5a:	9a04      	ldr	r2, [sp, #16]
10000a5c:	1a9e      	subs	r6, r3, r2
			nj_len += 1U;
10000a5e:	002b      	movs	r3, r5
10000a60:	1e5a      	subs	r2, r3, #1
10000a62:	4193      	sbcs	r3, r2
10000a64:	18f6      	adds	r6, r6, r3
		if (conv->altform_0c) {
10000a66:	ab10      	add	r3, sp, #64	; 0x40
10000a68:	7a9b      	ldrb	r3, [r3, #10]
10000a6a:	06da      	lsls	r2, r3, #27
10000a6c:	d579      	bpl.n	10000b62 <cbvprintf+0x662>
			nj_len += 2U;
10000a6e:	3602      	adds	r6, #2
		nj_len += conv->pad0_value;
10000a70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10000a72:	9209      	str	r2, [sp, #36]	; 0x24
10000a74:	18b6      	adds	r6, r6, r2
		if (conv->pad_fp) {
10000a76:	065b      	lsls	r3, r3, #25
10000a78:	d501      	bpl.n	10000a7e <cbvprintf+0x57e>
			nj_len += conv->pad0_pre_exp;
10000a7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
10000a7c:	18f6      	adds	r6, r6, r3
		if (width > 0) {
10000a7e:	9b03      	ldr	r3, [sp, #12]
10000a80:	2b00      	cmp	r3, #0
10000a82:	dc00      	bgt.n	10000a86 <cbvprintf+0x586>
10000a84:	e086      	b.n	10000b94 <cbvprintf+0x694>
			width -= (int)nj_len;
10000a86:	1b9b      	subs	r3, r3, r6
10000a88:	9309      	str	r3, [sp, #36]	; 0x24
			if (!conv->flag_dash) {
10000a8a:	ab10      	add	r3, sp, #64	; 0x40
10000a8c:	7a1b      	ldrb	r3, [r3, #8]
10000a8e:	075a      	lsls	r2, r3, #29
10000a90:	0fd6      	lsrs	r6, r2, #31
10000a92:	2a00      	cmp	r2, #0
10000a94:	da00      	bge.n	10000a98 <cbvprintf+0x598>
10000a96:	e0bc      	b.n	10000c12 <cbvprintf+0x712>
				if (conv->flag_zero) {
10000a98:	065b      	lsls	r3, r3, #25
10000a9a:	d400      	bmi.n	10000a9e <cbvprintf+0x59e>
10000a9c:	e06d      	b.n	10000b7a <cbvprintf+0x67a>
					if (sign != 0) {
10000a9e:	2d00      	cmp	r5, #0
10000aa0:	d007      	beq.n	10000ab2 <cbvprintf+0x5b2>
						OUTC(sign);
10000aa2:	0028      	movs	r0, r5
10000aa4:	9906      	ldr	r1, [sp, #24]
10000aa6:	9b05      	ldr	r3, [sp, #20]
10000aa8:	4798      	blx	r3
10000aaa:	2800      	cmp	r0, #0
10000aac:	db63      	blt.n	10000b76 <cbvprintf+0x676>
						sign = 0;
10000aae:	0035      	movs	r5, r6
						OUTC(sign);
10000ab0:	3701      	adds	r7, #1
					pad = '0';
10000ab2:	2630      	movs	r6, #48	; 0x30
10000ab4:	e062      	b.n	10000b7c <cbvprintf+0x67c>
				len = strlen(bps);
10000ab6:	9804      	ldr	r0, [sp, #16]
10000ab8:	f001 fdc0 	bl	1000263c <strlen>
10000abc:	e7c4      	b.n	10000a48 <cbvprintf+0x548>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
10000abe:	9b10      	ldr	r3, [sp, #64]	; 0x40
10000ac0:	a80a      	add	r0, sp, #40	; 0x28
10000ac2:	7003      	strb	r3, [r0, #0]
			bpe = buf + 1;
10000ac4:	2309      	movs	r3, #9
			break;
10000ac6:	2500      	movs	r5, #0
			bpe = buf + 1;
10000ac8:	aa08      	add	r2, sp, #32
			bps = buf;
10000aca:	9004      	str	r0, [sp, #16]
			bpe = buf + 1;
10000acc:	189b      	adds	r3, r3, r2
			bpe = bps + 5;
10000ace:	9308      	str	r3, [sp, #32]
10000ad0:	e7c2      	b.n	10000a58 <cbvprintf+0x558>
				sign = '+';
10000ad2:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
10000ad4:	071a      	lsls	r2, r3, #28
10000ad6:	d405      	bmi.n	10000ae4 <cbvprintf+0x5e4>
			} else if (conv->flag_space) {
10000ad8:	2210      	movs	r2, #16
10000ada:	001d      	movs	r5, r3
10000adc:	4015      	ands	r5, r2
10000ade:	4213      	tst	r3, r2
10000ae0:	d000      	beq.n	10000ae4 <cbvprintf+0x5e4>
				sign = ' ';
10000ae2:	2520      	movs	r5, #32
			sint = value->sint;
10000ae4:	9a10      	ldr	r2, [sp, #64]	; 0x40
10000ae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
			if (sint < 0) {
10000ae8:	2b00      	cmp	r3, #0
10000aea:	db00      	blt.n	10000aee <cbvprintf+0x5ee>
10000aec:	e75f      	b.n	100009ae <cbvprintf+0x4ae>
				value->uint = (uint_value_type)-sint;
10000aee:	2100      	movs	r1, #0
10000af0:	4250      	negs	r0, r2
10000af2:	4199      	sbcs	r1, r3
				sign = '-';
10000af4:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
10000af6:	9010      	str	r0, [sp, #64]	; 0x40
10000af8:	9111      	str	r1, [sp, #68]	; 0x44
10000afa:	e758      	b.n	100009ae <cbvprintf+0x4ae>
		switch (conv->specifier) {
10000afc:	2500      	movs	r5, #0
10000afe:	e756      	b.n	100009ae <cbvprintf+0x4ae>
			if (value->ptr != NULL) {
10000b00:	9810      	ldr	r0, [sp, #64]	; 0x40
10000b02:	ad10      	add	r5, sp, #64	; 0x40
10000b04:	2800      	cmp	r0, #0
10000b06:	d027      	beq.n	10000b58 <cbvprintf+0x658>
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000b08:	231e      	movs	r3, #30
10000b0a:	aa08      	add	r2, sp, #32
10000b0c:	189b      	adds	r3, r3, r2
10000b0e:	9300      	str	r3, [sp, #0]
10000b10:	aa12      	add	r2, sp, #72	; 0x48
10000b12:	ab0a      	add	r3, sp, #40	; 0x28
10000b14:	2100      	movs	r1, #0
10000b16:	f001 fd17 	bl	10002548 <encode_uint>
				conv->altform_0c = true;
10000b1a:	22ef      	movs	r2, #239	; 0xef
10000b1c:	896b      	ldrh	r3, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000b1e:	9004      	str	r0, [sp, #16]
				conv->altform_0c = true;
10000b20:	401a      	ands	r2, r3
10000b22:	4b41      	ldr	r3, [pc, #260]	; (10000c28 <cbvprintf+0x728>)
10000b24:	4313      	orrs	r3, r2
10000b26:	816b      	strh	r3, [r5, #10]
		char sign = 0;
10000b28:	2500      	movs	r5, #0
				goto prec_int_pad0;
10000b2a:	e74b      	b.n	100009c4 <cbvprintf+0x4c4>
				store_count(conv, value->ptr, count);
10000b2c:	6813      	ldr	r3, [r2, #0]
	switch ((enum length_mod_enum)conv->length_mod) {
10000b2e:	9a04      	ldr	r2, [sp, #16]
10000b30:	2a07      	cmp	r2, #7
10000b32:	d900      	bls.n	10000b36 <cbvprintf+0x636>
10000b34:	e4fe      	b.n	10000534 <cbvprintf+0x34>
10000b36:	0010      	movs	r0, r2
10000b38:	f7ff fb40 	bl	100001bc <__gnu_thumb1_case_uqi>
10000b3c:	0c06040c 	.word	0x0c06040c
10000b40:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
10000b44:	701f      	strb	r7, [r3, #0]
		break;
10000b46:	e4f5      	b.n	10000534 <cbvprintf+0x34>
		*(short *)dp = (short)count;
10000b48:	801f      	strh	r7, [r3, #0]
		break;
10000b4a:	e4f3      	b.n	10000534 <cbvprintf+0x34>
		*(intmax_t *)dp = (intmax_t)count;
10000b4c:	17fa      	asrs	r2, r7, #31
10000b4e:	601f      	str	r7, [r3, #0]
10000b50:	605a      	str	r2, [r3, #4]
		break;
10000b52:	e4ef      	b.n	10000534 <cbvprintf+0x34>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
10000b54:	601f      	str	r7, [r3, #0]
		break;
10000b56:	e4ed      	b.n	10000534 <cbvprintf+0x34>
			bps = "(nil)";
10000b58:	4b34      	ldr	r3, [pc, #208]	; (10000c2c <cbvprintf+0x72c>)
10000b5a:	0005      	movs	r5, r0
10000b5c:	9304      	str	r3, [sp, #16]
			bpe = bps + 5;
10000b5e:	4b34      	ldr	r3, [pc, #208]	; (10000c30 <cbvprintf+0x730>)
10000b60:	e7b5      	b.n	10000ace <cbvprintf+0x5ce>
		} else if (conv->altform_0) {
10000b62:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
10000b64:	0fd2      	lsrs	r2, r2, #31
10000b66:	18b6      	adds	r6, r6, r2
10000b68:	e782      	b.n	10000a70 <cbvprintf+0x570>
					OUTC(pad);
10000b6a:	0030      	movs	r0, r6
10000b6c:	9906      	ldr	r1, [sp, #24]
10000b6e:	9b05      	ldr	r3, [sp, #20]
10000b70:	4798      	blx	r3
10000b72:	2800      	cmp	r0, #0
10000b74:	da04      	bge.n	10000b80 <cbvprintf+0x680>
#undef OUTS
#undef OUTC
}
10000b76:	b017      	add	sp, #92	; 0x5c
10000b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
10000b7a:	2620      	movs	r6, #32
					pad = '0';
10000b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
10000b7e:	9303      	str	r3, [sp, #12]
10000b80:	9a03      	ldr	r2, [sp, #12]
10000b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
				while (width-- > 0) {
10000b84:	0011      	movs	r1, r2
10000b86:	19db      	adds	r3, r3, r7
10000b88:	3901      	subs	r1, #1
10000b8a:	1a9b      	subs	r3, r3, r2
10000b8c:	9103      	str	r1, [sp, #12]
10000b8e:	2a00      	cmp	r2, #0
10000b90:	dceb      	bgt.n	10000b6a <cbvprintf+0x66a>
10000b92:	001f      	movs	r7, r3
		if (sign != 0) {
10000b94:	2d00      	cmp	r5, #0
10000b96:	d006      	beq.n	10000ba6 <cbvprintf+0x6a6>
			OUTC(sign);
10000b98:	0028      	movs	r0, r5
10000b9a:	9906      	ldr	r1, [sp, #24]
10000b9c:	9b05      	ldr	r3, [sp, #20]
10000b9e:	4798      	blx	r3
10000ba0:	2800      	cmp	r0, #0
10000ba2:	dbe8      	blt.n	10000b76 <cbvprintf+0x676>
10000ba4:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
10000ba6:	ab10      	add	r3, sp, #64	; 0x40
10000ba8:	7a9b      	ldrb	r3, [r3, #10]
10000baa:	06da      	lsls	r2, r3, #27
10000bac:	d401      	bmi.n	10000bb2 <cbvprintf+0x6b2>
10000bae:	071b      	lsls	r3, r3, #28
10000bb0:	d506      	bpl.n	10000bc0 <cbvprintf+0x6c0>
				OUTC('0');
10000bb2:	2030      	movs	r0, #48	; 0x30
10000bb4:	9906      	ldr	r1, [sp, #24]
10000bb6:	9b05      	ldr	r3, [sp, #20]
10000bb8:	4798      	blx	r3
10000bba:	2800      	cmp	r0, #0
10000bbc:	dbdb      	blt.n	10000b76 <cbvprintf+0x676>
10000bbe:	3701      	adds	r7, #1
			if (conv->altform_0c) {
10000bc0:	ab10      	add	r3, sp, #64	; 0x40
10000bc2:	7a9a      	ldrb	r2, [r3, #10]
10000bc4:	06d2      	lsls	r2, r2, #27
10000bc6:	d506      	bpl.n	10000bd6 <cbvprintf+0x6d6>
				OUTC(conv->specifier);
10000bc8:	7ad8      	ldrb	r0, [r3, #11]
10000bca:	9906      	ldr	r1, [sp, #24]
10000bcc:	9b05      	ldr	r3, [sp, #20]
10000bce:	4798      	blx	r3
10000bd0:	2800      	cmp	r0, #0
10000bd2:	dbd0      	blt.n	10000b76 <cbvprintf+0x676>
10000bd4:	3701      	adds	r7, #1
			while (pad_len-- > 0) {
10000bd6:	003d      	movs	r5, r7
			pad_len = conv->pad0_value;
10000bd8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
			while (pad_len-- > 0) {
10000bda:	19f3      	adds	r3, r6, r7
10000bdc:	1b5b      	subs	r3, r3, r5
10000bde:	2b00      	cmp	r3, #0
10000be0:	dc1a      	bgt.n	10000c18 <cbvprintf+0x718>
			OUTS(bps, bpe);
10000be2:	9b08      	ldr	r3, [sp, #32]
10000be4:	9a04      	ldr	r2, [sp, #16]
10000be6:	9906      	ldr	r1, [sp, #24]
10000be8:	9805      	ldr	r0, [sp, #20]
10000bea:	f001 fcf9 	bl	100025e0 <outs>
10000bee:	2800      	cmp	r0, #0
10000bf0:	dbc1      	blt.n	10000b76 <cbvprintf+0x676>
10000bf2:	1947      	adds	r7, r0, r5
10000bf4:	003d      	movs	r5, r7
		while (width > 0) {
10000bf6:	9b03      	ldr	r3, [sp, #12]
10000bf8:	195b      	adds	r3, r3, r5
10000bfa:	1bdb      	subs	r3, r3, r7
10000bfc:	2b00      	cmp	r3, #0
10000bfe:	dc00      	bgt.n	10000c02 <cbvprintf+0x702>
10000c00:	e498      	b.n	10000534 <cbvprintf+0x34>
			OUTC(' ');
10000c02:	2020      	movs	r0, #32
10000c04:	9906      	ldr	r1, [sp, #24]
10000c06:	9b05      	ldr	r3, [sp, #20]
10000c08:	4798      	blx	r3
10000c0a:	2800      	cmp	r0, #0
10000c0c:	dbb3      	blt.n	10000b76 <cbvprintf+0x676>
10000c0e:	3701      	adds	r7, #1
			--width;
10000c10:	e7f1      	b.n	10000bf6 <cbvprintf+0x6f6>
			width -= (int)nj_len;
10000c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
10000c14:	9303      	str	r3, [sp, #12]
10000c16:	e7bd      	b.n	10000b94 <cbvprintf+0x694>
				OUTC('0');
10000c18:	2030      	movs	r0, #48	; 0x30
10000c1a:	9906      	ldr	r1, [sp, #24]
10000c1c:	9b05      	ldr	r3, [sp, #20]
10000c1e:	4798      	blx	r3
10000c20:	2800      	cmp	r0, #0
10000c22:	dba8      	blt.n	10000b76 <cbvprintf+0x676>
10000c24:	3501      	adds	r5, #1
10000c26:	e7d8      	b.n	10000bda <cbvprintf+0x6da>
10000c28:	00007810 	.word	0x00007810
10000c2c:	10003337 	.word	0x10003337
10000c30:	1000333c 	.word	0x1000333c

10000c34 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10000c34:	4901      	ldr	r1, [pc, #4]	; (10000c3c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10000c36:	2210      	movs	r2, #16
	str	r2, [r1]
10000c38:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
10000c3a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
10000c3c:	e000ed10 	.word	0xe000ed10

10000c40 <arch_cpu_idle>:

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
10000c40:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
10000c44:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10000c46:	b662      	cpsie	i
	isb
10000c48:	f3bf 8f6f 	isb	sy

	bx	lr
10000c4c:	4770      	bx	lr
10000c4e:	46c0      	nop			; (mov r8, r8)

10000c50 <arch_irq_enable>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
10000c50:	0603      	lsls	r3, r0, #24
10000c52:	d405      	bmi.n	10000c60 <arch_irq_enable+0x10>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10000c54:	231f      	movs	r3, #31
10000c56:	4018      	ands	r0, r3
10000c58:	3b1e      	subs	r3, #30
10000c5a:	4083      	lsls	r3, r0
10000c5c:	4a01      	ldr	r2, [pc, #4]	; (10000c64 <arch_irq_enable+0x14>)
10000c5e:	6013      	str	r3, [r2, #0]
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
}
10000c60:	4770      	bx	lr
10000c62:	46c0      	nop			; (mov r8, r8)
10000c64:	e000e100 	.word	0xe000e100

10000c68 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
10000c68:	b570      	push	{r4, r5, r6, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000c6a:	26ff      	movs	r6, #255	; 0xff
10000c6c:	2503      	movs	r5, #3
10000c6e:	0032      	movs	r2, r6
10000c70:	4005      	ands	r5, r0
10000c72:	00ed      	lsls	r5, r5, #3
10000c74:	40aa      	lsls	r2, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000c76:	0149      	lsls	r1, r1, #5
10000c78:	4031      	ands	r1, r6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000c7a:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000c7c:	40a9      	lsls	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
10000c7e:	b244      	sxtb	r4, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000c80:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
10000c82:	0600      	lsls	r0, r0, #24
10000c84:	d40a      	bmi.n	10000c9c <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000c86:	08a3      	lsrs	r3, r4, #2
10000c88:	24c0      	movs	r4, #192	; 0xc0
10000c8a:	480a      	ldr	r0, [pc, #40]	; (10000cb4 <z_arm_irq_priority_set+0x4c>)
10000c8c:	009b      	lsls	r3, r3, #2
10000c8e:	181b      	adds	r3, r3, r0
10000c90:	00a4      	lsls	r4, r4, #2
10000c92:	5918      	ldr	r0, [r3, r4]
10000c94:	4002      	ands	r2, r0
10000c96:	4311      	orrs	r1, r2
10000c98:	5119      	str	r1, [r3, r4]
}
10000c9a:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000c9c:	200f      	movs	r0, #15
10000c9e:	4003      	ands	r3, r0
10000ca0:	3b08      	subs	r3, #8
10000ca2:	4805      	ldr	r0, [pc, #20]	; (10000cb8 <z_arm_irq_priority_set+0x50>)
10000ca4:	089b      	lsrs	r3, r3, #2
10000ca6:	009b      	lsls	r3, r3, #2
10000ca8:	181b      	adds	r3, r3, r0
10000caa:	69d8      	ldr	r0, [r3, #28]
10000cac:	4002      	ands	r2, r0
10000cae:	4311      	orrs	r1, r2
10000cb0:	61d9      	str	r1, [r3, #28]
10000cb2:	e7f2      	b.n	10000c9a <z_arm_irq_priority_set+0x32>
10000cb4:	e000e100 	.word	0xe000e100
10000cb8:	e000ed00 	.word	0xe000ed00

10000cbc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
10000cbc:	bf30      	wfi
    b z_SysNmiOnReset
10000cbe:	e7fd      	b.n	10000cbc <z_SysNmiOnReset>

10000cc0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10000cc0:	22ff      	movs	r2, #255	; 0xff
10000cc2:	4b08      	ldr	r3, [pc, #32]	; (10000ce4 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
10000cc4:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10000cc6:	4393      	bics	r3, r2
10000cc8:	4a07      	ldr	r2, [pc, #28]	; (10000ce8 <z_arm_prep_c+0x28>)
10000cca:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10000ccc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10000cd0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10000cd4:	f000 fec2 	bl	10001a5c <z_bss_zero>
	z_data_copy();
10000cd8:	f001 fa1a 	bl	10002110 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
10000cdc:	f000 f8f2 	bl	10000ec4 <z_arm_interrupt_init>
	z_cstart();
10000ce0:	f000 fefc 	bl	10001adc <z_cstart>
10000ce4:	10000100 	.word	0x10000100
10000ce8:	e000ed00 	.word	0xe000ed00

10000cec <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10000cec:	4a08      	ldr	r2, [pc, #32]	; (10000d10 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
10000cee:	4909      	ldr	r1, [pc, #36]	; (10000d14 <arch_swap+0x28>)
	_current->arch.basepri = key;
10000cf0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
10000cf2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
10000cf4:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
10000cf6:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10000cf8:	2380      	movs	r3, #128	; 0x80
10000cfa:	4907      	ldr	r1, [pc, #28]	; (10000d18 <arch_swap+0x2c>)
10000cfc:	055b      	lsls	r3, r3, #21
10000cfe:	6848      	ldr	r0, [r1, #4]
10000d00:	4303      	orrs	r3, r0
10000d02:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
10000d04:	b662      	cpsie	i
10000d06:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
10000d0a:	6893      	ldr	r3, [r2, #8]
10000d0c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
10000d0e:	4770      	bx	lr
10000d10:	200001f4 	.word	0x200001f4
10000d14:	10003328 	.word	0x10003328
10000d18:	e000ed00 	.word	0xe000ed00

10000d1c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
10000d1c:	4913      	ldr	r1, [pc, #76]	; (10000d6c <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
10000d1e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
10000d20:	4813      	ldr	r0, [pc, #76]	; (10000d70 <_thread_irq_disabled+0x22>)
    add r0, r2
10000d22:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
10000d24:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
10000d28:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
10000d2a:	4643      	mov	r3, r8
    mov r4, r9
10000d2c:	464c      	mov	r4, r9
    mov r5, r10
10000d2e:	4655      	mov	r5, sl
    mov r6, r11
10000d30:	465e      	mov	r6, fp
    mov r7, ip
10000d32:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
10000d34:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10000d36:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
10000d38:	4f0e      	ldr	r7, [pc, #56]	; (10000d74 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
10000d3a:	4e0f      	ldr	r6, [pc, #60]	; (10000d78 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
10000d3c:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
10000d3e:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
10000d40:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
10000d42:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
10000d44:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
10000d46:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
10000d48:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
10000d4a:	d100      	bne.n	10000d4e <_thread_irq_disabled>
    cpsie i
10000d4c:	b662      	cpsie	i

10000d4e <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
10000d4e:	4c08      	ldr	r4, [pc, #32]	; (10000d70 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
10000d50:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
10000d52:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
10000d54:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
10000d56:	4698      	mov	r8, r3
    mov r9, r4
10000d58:	46a1      	mov	r9, r4
    mov r10, r5
10000d5a:	46aa      	mov	sl, r5
    mov r11, r6
10000d5c:	46b3      	mov	fp, r6
    mov ip, r7
10000d5e:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10000d60:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
10000d62:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
10000d64:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10000d68:	4770      	bx	lr
10000d6a:	0000      	.short	0x0000
    ldr r1, =_kernel
10000d6c:	200001f4 	.word	0x200001f4
    ldr r0, =_thread_offset_to_callee_saved
10000d70:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
10000d74:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
10000d78:	08000000 	.word	0x08000000

10000d7c <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
10000d7c:	2004      	movs	r0, #4
  mov r1, lr
10000d7e:	4671      	mov	r1, lr
  tst r1, r0
10000d80:	4201      	tst	r1, r0
  beq _stack_frame_msp
10000d82:	d002      	beq.n	10000d8a <_stack_frame_msp>
  mrs r0, PSP
10000d84:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
10000d88:	d101      	bne.n	10000d8e <_stack_frame_endif>

10000d8a <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
10000d8a:	f3ef 8008 	mrs	r0, MSP

10000d8e <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
10000d8e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
10000d90:	3902      	subs	r1, #2
    ldrb r1, [r1]
10000d92:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
10000d94:	2902      	cmp	r1, #2
    beq _oops
10000d96:	d0ff      	beq.n	10000d98 <_oops>

10000d98 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10000d98:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
10000d9a:	f001 fc3c 	bl	10002616 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
10000d9e:	bd01      	pop	{r0, pc}

10000da0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
10000da0:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
10000da2:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
10000da4:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
10000da6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
10000da8:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
10000daa:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
10000dac:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
10000dae:	4906      	ldr	r1, [pc, #24]	; (10000dc8 <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
10000db0:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
10000db2:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
10000db4:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
10000db6:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
10000db8:	2380      	movs	r3, #128	; 0x80
10000dba:	045b      	lsls	r3, r3, #17
10000dbc:	61d3      	str	r3, [r2, #28]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
10000dbe:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
10000dc0:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
10000dc2:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
10000dc4:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
10000dc6:	bd10      	pop	{r4, pc}
10000dc8:	10002535 	.word	0x10002535

10000dcc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
10000dcc:	4b06      	ldr	r3, [pc, #24]	; (10000de8 <arch_switch_to_main_thread+0x1c>)
10000dce:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
10000dd0:	1c10      	adds	r0, r2, #0
10000dd2:	f381 8809 	msr	PSP, r1
10000dd6:	2100      	movs	r1, #0
10000dd8:	b662      	cpsie	i
10000dda:	f3bf 8f6f 	isb	sy
10000dde:	2200      	movs	r2, #0
10000de0:	2300      	movs	r3, #0
10000de2:	f001 fba7 	bl	10002534 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
10000de6:	46c0      	nop			; (mov r8, r8)
10000de8:	200001f4 	.word	0x200001f4

10000dec <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
10000dec:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
10000dee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
10000df2:	4905      	ldr	r1, [pc, #20]	; (10000e08 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
10000df4:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
10000df6:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
10000df8:	4904      	ldr	r1, [pc, #16]	; (10000e0c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
10000dfa:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
10000dfc:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
10000dfe:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
10000e00:	bc09      	pop	{r0, r3}
	mov lr, r3
10000e02:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
10000e04:	4902      	ldr	r1, [pc, #8]	; (10000e10 <_isr_wrapper+0x24>)
	bx r1
10000e06:	4708      	bx	r1
	ldr r1, =16
10000e08:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
10000e0c:	100030f4 	.word	0x100030f4
	ldr r1, =z_arm_int_exit
10000e10:	10000e15 	.word	0x10000e15

10000e14 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
10000e14:	4b04      	ldr	r3, [pc, #16]	; (10000e28 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
10000e16:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
10000e18:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
10000e1a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
10000e1c:	d002      	beq.n	10000e24 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
10000e1e:	4903      	ldr	r1, [pc, #12]	; (10000e2c <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
10000e20:	4a03      	ldr	r2, [pc, #12]	; (10000e30 <_EXIT_EXC+0xc>)
	str r2, [r1]
10000e22:	600a      	str	r2, [r1, #0]

10000e24 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
10000e24:	4770      	bx	lr
10000e26:	0000      	.short	0x0000
	ldr r3, =_kernel
10000e28:	200001f4 	.word	0x200001f4
	ldr r1, =_SCS_ICSR
10000e2c:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
10000e30:	10000000 	.word	0x10000000

10000e34 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
10000e34:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10000e36:	4b1b      	ldr	r3, [pc, #108]	; (10000ea4 <z_arm_fault+0x70>)
{
10000e38:	000e      	movs	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10000e3a:	685b      	ldr	r3, [r3, #4]
{
10000e3c:	b088      	sub	sp, #32
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10000e3e:	05db      	lsls	r3, r3, #23
10000e40:	0ddb      	lsrs	r3, r3, #23
10000e42:	b662      	cpsie	i
10000e44:	f3bf 8f6f 	isb	sy
	*nested_exc = false;
10000e48:	2500      	movs	r5, #0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10000e4a:	0e14      	lsrs	r4, r2, #24
		return NULL;
10000e4c:	0029      	movs	r1, r5
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10000e4e:	2cff      	cmp	r4, #255	; 0xff
10000e50:	d109      	bne.n	10000e66 <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
10000e52:	3cf3      	subs	r4, #243	; 0xf3
10000e54:	4014      	ands	r4, r2
10000e56:	2c08      	cmp	r4, #8
10000e58:	d005      	beq.n	10000e66 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
10000e5a:	0001      	movs	r1, r0
			*nested_exc = true;
10000e5c:	3501      	adds	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
10000e5e:	0712      	lsls	r2, r2, #28
10000e60:	d501      	bpl.n	10000e66 <z_arm_fault+0x32>
			ptr_esf =  (z_arch_esf_t *)psp;
10000e62:	0031      	movs	r1, r6
	*nested_exc = false;
10000e64:	2500      	movs	r5, #0
	uint32_t reason = K_ERR_CPU_EXCEPTION;
10000e66:	2400      	movs	r4, #0
	switch (fault) {
10000e68:	2b03      	cmp	r3, #3
10000e6a:	d106      	bne.n	10000e7a <z_arm_fault+0x46>
	uint16_t fault_insn = *(ret_addr - 1);
10000e6c:	698b      	ldr	r3, [r1, #24]
10000e6e:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
10000e70:	881a      	ldrh	r2, [r3, #0]
10000e72:	4b0d      	ldr	r3, [pc, #52]	; (10000ea8 <z_arm_fault+0x74>)
10000e74:	429a      	cmp	r2, r3
10000e76:	d100      	bne.n	10000e7a <z_arm_fault+0x46>
		reason = esf->basic.r0;
10000e78:	680c      	ldr	r4, [r1, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
10000e7a:	2220      	movs	r2, #32
10000e7c:	4668      	mov	r0, sp
10000e7e:	f001 fbef 	bl	10002660 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
10000e82:	9b07      	ldr	r3, [sp, #28]
10000e84:	2d00      	cmp	r5, #0
10000e86:	d00a      	beq.n	10000e9e <z_arm_fault+0x6a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
10000e88:	05da      	lsls	r2, r3, #23
10000e8a:	d102      	bne.n	10000e92 <z_arm_fault+0x5e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
10000e8c:	4a07      	ldr	r2, [pc, #28]	; (10000eac <z_arm_fault+0x78>)
10000e8e:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10000e90:	9307      	str	r3, [sp, #28]
	}

	z_arm_fatal_error(reason, &esf_copy);
10000e92:	4669      	mov	r1, sp
10000e94:	0020      	movs	r0, r4
10000e96:	f001 fbba 	bl	1000260e <z_arm_fatal_error>
}
10000e9a:	b008      	add	sp, #32
10000e9c:	bd70      	pop	{r4, r5, r6, pc}
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10000e9e:	0a5b      	lsrs	r3, r3, #9
10000ea0:	025b      	lsls	r3, r3, #9
10000ea2:	e7f5      	b.n	10000e90 <z_arm_fault+0x5c>
10000ea4:	e000ed00 	.word	0xe000ed00
10000ea8:	0000df02 	.word	0x0000df02
10000eac:	000001ff 	.word	0x000001ff

10000eb0 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
10000eb0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
10000eb4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
10000eb8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
10000eba:	4672      	mov	r2, lr
	bl z_arm_fault
10000ebc:	f7ff ffba 	bl	10000e34 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
10000ec0:	bd01      	pop	{r0, pc}
10000ec2:	46c0      	nop			; (mov r8, r8)

10000ec4 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
10000ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000ec6:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
10000ec8:	2200      	movs	r2, #0
10000eca:	2603      	movs	r6, #3
10000ecc:	25ff      	movs	r5, #255	; 0xff
10000ece:	00a4      	lsls	r4, r4, #2
10000ed0:	0010      	movs	r0, r2
10000ed2:	002f      	movs	r7, r5
10000ed4:	4030      	ands	r0, r6
10000ed6:	00c0      	lsls	r0, r0, #3
10000ed8:	4087      	lsls	r7, r0
10000eda:	4905      	ldr	r1, [pc, #20]	; (10000ef0 <z_arm_interrupt_init+0x2c>)
10000edc:	0893      	lsrs	r3, r2, #2
10000ede:	009b      	lsls	r3, r3, #2
10000ee0:	185b      	adds	r3, r3, r1
10000ee2:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
10000ee4:	3201      	adds	r2, #1
10000ee6:	43b9      	bics	r1, r7
10000ee8:	5119      	str	r1, [r3, r4]
10000eea:	2a1a      	cmp	r2, #26
10000eec:	d1f0      	bne.n	10000ed0 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
10000eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000ef0:	e000e100 	.word	0xe000e100

10000ef4 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10000ef4:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
10000ef6:	4807      	ldr	r0, [pc, #28]	; (10000f14 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10000ef8:	4907      	ldr	r1, [pc, #28]	; (10000f18 <__start+0x24>)
    adds r0, r0, r1
10000efa:	1840      	adds	r0, r0, r1
    msr PSP, r0
10000efc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
10000f00:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
10000f04:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
10000f06:	4308      	orrs	r0, r1
    msr CONTROL, r0
10000f08:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
10000f0c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
10000f10:	f7ff fed6 	bl	10000cc0 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
10000f14:	20000730 	.word	0x20000730
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10000f18:	00000800 	.word	0x00000800

10000f1c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
10000f1c:	4b0a      	ldr	r3, [pc, #40]	; (10000f48 <z_impl_k_thread_abort+0x2c>)
{
10000f1e:	b510      	push	{r4, lr}
	if (_current == thread) {
10000f20:	689b      	ldr	r3, [r3, #8]
10000f22:	4283      	cmp	r3, r0
10000f24:	d10d      	bne.n	10000f42 <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10000f26:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
10000f2a:	2b00      	cmp	r3, #0
10000f2c:	d009      	beq.n	10000f42 <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10000f2e:	2280      	movs	r2, #128	; 0x80
10000f30:	4b06      	ldr	r3, [pc, #24]	; (10000f4c <z_impl_k_thread_abort+0x30>)
10000f32:	0552      	lsls	r2, r2, #21
10000f34:	6859      	ldr	r1, [r3, #4]
10000f36:	430a      	orrs	r2, r1
10000f38:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
10000f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10000f3c:	4904      	ldr	r1, [pc, #16]	; (10000f50 <z_impl_k_thread_abort+0x34>)
10000f3e:	400a      	ands	r2, r1
10000f40:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
10000f42:	f001 f895 	bl	10002070 <z_thread_abort>
}
10000f46:	bd10      	pop	{r4, pc}
10000f48:	200001f4 	.word	0x200001f4
10000f4c:	e000ed00 	.word	0xe000ed00
10000f50:	ffff7fff 	.word	0xffff7fff

10000f54 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
10000f54:	4b01      	ldr	r3, [pc, #4]	; (10000f5c <__stdout_hook_install+0x8>)
10000f56:	6018      	str	r0, [r3, #0]
}
10000f58:	4770      	bx	lr
10000f5a:	46c0      	nop			; (mov r8, r8)
10000f5c:	20000004 	.word	0x20000004

10000f60 <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000f60:	4b0e      	ldr	r3, [pc, #56]	; (10000f9c <rp2040_init+0x3c>)
10000f62:	4a0f      	ldr	r2, [pc, #60]	; (10000fa0 <rp2040_init+0x40>)
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
10000f64:	b570      	push	{r4, r5, r6, lr}
10000f66:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000f68:	4d0e      	ldr	r5, [pc, #56]	; (10000fa4 <rp2040_init+0x44>)
10000f6a:	4b0f      	ldr	r3, [pc, #60]	; (10000fa8 <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10000f6c:	4c0f      	ldr	r4, [pc, #60]	; (10000fac <rp2040_init+0x4c>)
10000f6e:	602b      	str	r3, [r5, #0]
10000f70:	0019      	movs	r1, r3
10000f72:	68a2      	ldr	r2, [r4, #8]
10000f74:	4391      	bics	r1, r2
10000f76:	d1fb      	bne.n	10000f70 <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS));

	clocks_init();
10000f78:	f000 fb3a 	bl	100015f0 <clocks_init>
10000f7c:	4b0c      	ldr	r3, [pc, #48]	; (10000fb0 <rp2040_init+0x50>)
10000f7e:	602b      	str	r3, [r5, #0]
10000f80:	68a3      	ldr	r3, [r4, #8]
10000f82:	01db      	lsls	r3, r3, #7
10000f84:	3380      	adds	r3, #128	; 0x80
10000f86:	d1fb      	bne.n	10000f80 <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
10000f88:	f3ef 8310 	mrs	r3, PRIMASK
10000f8c:	b672      	cpsid	i
	if (key != 0U) {
10000f8e:	2b00      	cmp	r3, #0
10000f90:	d102      	bne.n	10000f98 <rp2040_init+0x38>
	__asm__ volatile(
10000f92:	b662      	cpsie	i
10000f94:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
10000f98:	2000      	movs	r0, #0
10000f9a:	bd70      	pop	{r4, r5, r6, pc}
10000f9c:	4000e000 	.word	0x4000e000
10000fa0:	ffffcdbf 	.word	0xffffcdbf
10000fa4:	4000f000 	.word	0x4000f000
10000fa8:	003c7ffe 	.word	0x003c7ffe
10000fac:	4000c000 	.word	0x4000c000
10000fb0:	01ffffff 	.word	0x01ffffff

10000fb4 <uart_console_init>:
{

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
10000fb4:	4809      	ldr	r0, [pc, #36]	; (10000fdc <uart_console_init+0x28>)
10000fb6:	4b0a      	ldr	r3, [pc, #40]	; (10000fe0 <uart_console_init+0x2c>)
{
10000fb8:	b510      	push	{r4, lr}
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
10000fba:	6018      	str	r0, [r3, #0]
10000fbc:	f001 ff29 	bl	10002e12 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
10000fc0:	2800      	cmp	r0, #0
10000fc2:	d008      	beq.n	10000fd6 <uart_console_init+0x22>
	__stdout_hook_install(console_out);
10000fc4:	4c07      	ldr	r4, [pc, #28]	; (10000fe4 <uart_console_init+0x30>)
10000fc6:	0020      	movs	r0, r4
10000fc8:	f7ff ffc4 	bl	10000f54 <__stdout_hook_install>
	__printk_hook_install(console_out);
10000fcc:	0020      	movs	r0, r4
10000fce:	f7ff fa85 	bl	100004dc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
10000fd2:	2000      	movs	r0, #0
}
10000fd4:	bd10      	pop	{r4, pc}
		return -ENODEV;
10000fd6:	2013      	movs	r0, #19
10000fd8:	4240      	negs	r0, r0
10000fda:	e7fb      	b.n	10000fd4 <uart_console_init+0x20>
10000fdc:	10003094 	.word	0x10003094
10000fe0:	20000150 	.word	0x20000150
10000fe4:	10000fe9 	.word	0x10000fe9

10000fe8 <console_out>:
{
10000fe8:	b570      	push	{r4, r5, r6, lr}
10000fea:	0004      	movs	r4, r0
10000fec:	4d07      	ldr	r5, [pc, #28]	; (1000100c <console_out+0x24>)
	if ('\n' == c) {
10000fee:	280a      	cmp	r0, #10
10000ff0:	d104      	bne.n	10000ffc <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
10000ff2:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
10000ff4:	6883      	ldr	r3, [r0, #8]
10000ff6:	210d      	movs	r1, #13
10000ff8:	685b      	ldr	r3, [r3, #4]
10000ffa:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
10000ffc:	6828      	ldr	r0, [r5, #0]
10000ffe:	6883      	ldr	r3, [r0, #8]
10001000:	b2e1      	uxtb	r1, r4
10001002:	685b      	ldr	r3, [r3, #4]
10001004:	4798      	blx	r3
}
10001006:	0020      	movs	r0, r4
10001008:	bd70      	pop	{r4, r5, r6, pc}
1000100a:	46c0      	nop			; (mov r8, r8)
1000100c:	20000150 	.word	0x20000150

10001010 <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
10001010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001012:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10001014:	2400      	movs	r4, #0
		status_reg = &irq_ctrl_base->ints[pin / 8];
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10001016:	270f      	movs	r7, #15
	struct gpio_rpi_data *data = dev->data;
10001018:	6903      	ldr	r3, [r0, #16]
1000101a:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
1000101c:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
1000101e:	4a14      	ldr	r2, [pc, #80]	; (10001070 <gpio_rpi_isr+0x60>)
10001020:	3308      	adds	r3, #8
10001022:	009b      	lsls	r3, r3, #2
10001024:	589b      	ldr	r3, [r3, r2]
10001026:	2207      	movs	r2, #7
10001028:	4022      	ands	r2, r4
1000102a:	0092      	lsls	r2, r2, #2
1000102c:	40d3      	lsrs	r3, r2
		if (events) {
1000102e:	423b      	tst	r3, r7
10001030:	d103      	bne.n	1000103a <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10001032:	3401      	adds	r4, #1
10001034:	2c1e      	cmp	r4, #30
10001036:	d1f1      	bne.n	1000101c <gpio_rpi_isr+0xc>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
10001038:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
1000103a:	0039      	movs	r1, r7
1000103c:	0020      	movs	r0, r4
1000103e:	f000 fc1d 	bl	1000187c <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
10001042:	9b01      	ldr	r3, [sp, #4]
10001044:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10001046:	2900      	cmp	r1, #0
10001048:	d0f3      	beq.n	10001032 <gpio_rpi_isr+0x22>
1000104a:	2301      	movs	r3, #1
1000104c:	40a3      	lsls	r3, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
1000104e:	680d      	ldr	r5, [r1, #0]
10001050:	9300      	str	r3, [sp, #0]
		if (cb->pin_mask & pins) {
10001052:	688b      	ldr	r3, [r1, #8]
10001054:	9a00      	ldr	r2, [sp, #0]
10001056:	9800      	ldr	r0, [sp, #0]
10001058:	401a      	ands	r2, r3
1000105a:	4203      	tst	r3, r0
1000105c:	d002      	beq.n	10001064 <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
1000105e:	0030      	movs	r0, r6
10001060:	684b      	ldr	r3, [r1, #4]
10001062:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10001064:	2d00      	cmp	r5, #0
10001066:	d0e4      	beq.n	10001032 <gpio_rpi_isr+0x22>
10001068:	0029      	movs	r1, r5
1000106a:	682d      	ldr	r5, [r5, #0]
1000106c:	e7f1      	b.n	10001052 <gpio_rpi_isr+0x42>
1000106e:	46c0      	nop			; (mov r8, r8)
10001070:	40014100 	.word	0x40014100

10001074 <i2c_dw_initialize>:
	.slave_unregister = i2c_dw_slave_unregister,
#endif /* CONFIG_I2C_SLAVE */
};

static int i2c_dw_initialize(const struct device *dev)
{
10001074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct i2c_dw_rom_config * const rom = dev->config;
10001076:	6847      	ldr	r7, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10001078:	6906      	ldr	r6, [r0, #16]
{
1000107a:	0005      	movs	r5, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
1000107c:	2100      	movs	r1, #0
1000107e:	68f8      	ldr	r0, [r7, #12]
10001080:	aa01      	add	r2, sp, #4
10001082:	f000 fa31 	bl	100014e8 <pinctrl_lookup_state>
10001086:	1e04      	subs	r4, r0, #0
	if (ret < 0) {
10001088:	db17      	blt.n	100010ba <i2c_dw_initialize+0x46>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
1000108a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
1000108c:	2200      	movs	r2, #0
1000108e:	7919      	ldrb	r1, [r3, #4]
10001090:	6818      	ldr	r0, [r3, #0]
10001092:	f001 fdee 	bl	10002c72 <pinctrl_configure_pins>
10001096:	1e04      	subs	r4, r0, #0
	union ic_con_register ic_con;
	int ret = 0;

#if defined(CONFIG_PINCTRL)
	ret = pinctrl_apply_state(rom->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret) {
10001098:	d10f      	bne.n	100010ba <i2c_dw_initialize+0x46>
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
1000109a:	2201      	movs	r2, #1
1000109c:	0001      	movs	r1, r0
1000109e:	4252      	negs	r2, r2
100010a0:	0030      	movs	r0, r6
100010a2:	f001 feee 	bl	10002e82 <z_impl_k_sem_init>
	return (uint32_t)DEVICE_MMIO_GET(dev);
100010a6:	686b      	ldr	r3, [r5, #4]
100010a8:	681b      	ldr	r3, [r3, #0]

DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)

DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
DEFINE_MM_REG_READ(comp_type, DW_IC_REG_COMP_TYPE, 32)
100010aa:	001a      	movs	r2, r3
100010ac:	32fc      	adds	r2, #252	; 0xfc
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
100010ae:	6811      	ldr	r1, [r2, #0]

	k_sem_init(&dw->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	uint32_t reg_base = get_regs(dev);

	/* verify that we have a valid DesignWare register first */
	if (read_comp_type(reg_base) != I2C_DW_MAGIC_KEY) {
100010b0:	4a1b      	ldr	r2, [pc, #108]	; (10001120 <i2c_dw_initialize+0xac>)
100010b2:	4291      	cmp	r1, r2
100010b4:	d003      	beq.n	100010be <i2c_dw_initialize+0x4a>
		LOG_DBG("I2C: DesignWare magic key not found, check base "
			    "address. Stopping initialization");
		return -EIO;
100010b6:	2405      	movs	r4, #5
100010b8:	4264      	negs	r4, r4
	}

	dw->state = I2C_DW_STATE_READY;

	return ret;
}
100010ba:	0020      	movs	r0, r4
100010bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
100010be:	2206      	movs	r2, #6
100010c0:	681b      	ldr	r3, [r3, #0]
	rom->config_func(dev);
100010c2:	0028      	movs	r0, r5
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
100010c4:	4013      	ands	r3, r2
100010c6:	3b06      	subs	r3, #6
100010c8:	425a      	negs	r2, r3
100010ca:	4153      	adcs	r3, r2
100010cc:	0032      	movs	r2, r6
100010ce:	3208      	adds	r2, #8
100010d0:	77d3      	strb	r3, [r2, #31]
	rom->config_func(dev);
100010d2:	687b      	ldr	r3, [r7, #4]
100010d4:	4798      	blx	r3
	dw->app_config = I2C_MODE_MASTER | i2c_map_dt_bitrate(rom->bitrate);
100010d6:	68bb      	ldr	r3, [r7, #8]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
100010d8:	4a12      	ldr	r2, [pc, #72]	; (10001124 <i2c_dw_initialize+0xb0>)
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST:
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
100010da:	2106      	movs	r1, #6
	switch (bitrate) {
100010dc:	4293      	cmp	r3, r2
100010de:	d009      	beq.n	100010f4 <i2c_dw_initialize+0x80>
100010e0:	d813      	bhi.n	1000110a <i2c_dw_initialize+0x96>
100010e2:	4a11      	ldr	r2, [pc, #68]	; (10001128 <i2c_dw_initialize+0xb4>)
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
100010e4:	3904      	subs	r1, #4
	switch (bitrate) {
100010e6:	4293      	cmp	r3, r2
100010e8:	d004      	beq.n	100010f4 <i2c_dw_initialize+0x80>
100010ea:	4a10      	ldr	r2, [pc, #64]	; (1000112c <i2c_dw_initialize+0xb8>)
100010ec:	1899      	adds	r1, r3, r2
100010ee:	424b      	negs	r3, r1
100010f0:	4159      	adcs	r1, r3
100010f2:	0089      	lsls	r1, r1, #2
100010f4:	2310      	movs	r3, #16
100010f6:	4319      	orrs	r1, r3
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
100010f8:	0028      	movs	r0, r5
	dw->app_config = I2C_MODE_MASTER | i2c_map_dt_bitrate(rom->bitrate);
100010fa:	6131      	str	r1, [r6, #16]
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
100010fc:	f001 fb87 	bl	1000280e <i2c_dw_runtime_configure>
10001100:	1e04      	subs	r4, r0, #0
10001102:	d1d8      	bne.n	100010b6 <i2c_dw_initialize+0x42>
	dw->state = I2C_DW_STATE_READY;
10001104:	3605      	adds	r6, #5
10001106:	77f0      	strb	r0, [r6, #31]
	return ret;
10001108:	e7d7      	b.n	100010ba <i2c_dw_initialize+0x46>
1000110a:	4a09      	ldr	r2, [pc, #36]	; (10001130 <i2c_dw_initialize+0xbc>)
	case I2C_BITRATE_HIGH:
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
1000110c:	2108      	movs	r1, #8
	switch (bitrate) {
1000110e:	4293      	cmp	r3, r2
10001110:	d0f0      	beq.n	100010f4 <i2c_dw_initialize+0x80>
10001112:	4a08      	ldr	r2, [pc, #32]	; (10001134 <i2c_dw_initialize+0xc0>)
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");

	return 0;
10001114:	0021      	movs	r1, r4
	switch (bitrate) {
10001116:	4293      	cmp	r3, r2
10001118:	d1ec      	bne.n	100010f4 <i2c_dw_initialize+0x80>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
1000111a:	210a      	movs	r1, #10
1000111c:	e7ea      	b.n	100010f4 <i2c_dw_initialize+0x80>
1000111e:	46c0      	nop			; (mov r8, r8)
10001120:	44570140 	.word	0x44570140
10001124:	000f4240 	.word	0x000f4240
10001128:	000186a0 	.word	0x000186a0
1000112c:	fff9e580 	.word	0xfff9e580
10001130:	0033e140 	.word	0x0033e140
10001134:	004c4b40 	.word	0x004c4b40

10001138 <i2c_dw_transfer>:
{
10001138:	b5f0      	push	{r4, r5, r6, r7, lr}
1000113a:	b085      	sub	sp, #20
1000113c:	0004      	movs	r4, r0
1000113e:	000e      	movs	r6, r1
		return 0;
10001140:	1e10      	subs	r0, r2, #0
{
10001142:	9201      	str	r2, [sp, #4]
10001144:	9303      	str	r3, [sp, #12]
	if (!num_msgs) {
10001146:	d100      	bne.n	1000114a <i2c_dw_transfer+0x12>
10001148:	e0b3      	b.n	100012b2 <i2c_dw_transfer+0x17a>

static ALWAYS_INLINE int sys_test_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	return temp & (1 << bit);
1000114a:	2701      	movs	r7, #1
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000114c:	6862      	ldr	r2, [r4, #4]
1000114e:	6815      	ldr	r5, [r2, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10001150:	6f2a      	ldr	r2, [r5, #112]	; 0x70
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
10001152:	423a      	tst	r2, r7
10001154:	d000      	beq.n	10001158 <i2c_dw_transfer+0x20>
10001156:	e0c1      	b.n	100012dc <i2c_dw_transfer+0x1a4>
	struct i2c_dw_dev_config * const dw = dev->data;
10001158:	6924      	ldr	r4, [r4, #16]
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
1000115a:	2208      	movs	r2, #8
1000115c:	1d61      	adds	r1, r4, #5
1000115e:	7fc8      	ldrb	r0, [r1, #31]
10001160:	0003      	movs	r3, r0
10001162:	4013      	ands	r3, r2
10001164:	469c      	mov	ip, r3
10001166:	4210      	tst	r0, r2
10001168:	d000      	beq.n	1000116c <i2c_dw_transfer+0x34>
1000116a:	e0b7      	b.n	100012dc <i2c_dw_transfer+0x1a4>
DEFINE_MM_REG_WRITE(intr_mask, DW_IC_REG_INTR_MASK, 32)
1000116c:	002b      	movs	r3, r5
1000116e:	3330      	adds	r3, #48	; 0x30
	dw->state |= I2C_DW_BUSY;
10001170:	7fc8      	ldrb	r0, [r1, #31]
10001172:	9302      	str	r3, [sp, #8]
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
10001174:	4663      	mov	r3, ip
10001176:	4302      	orrs	r2, r0
10001178:	77ca      	strb	r2, [r1, #31]
	uint32_t temp = *(volatile uint32_t *)addr;
1000117a:	6eea      	ldr	r2, [r5, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
1000117c:	43ba      	bics	r2, r7
1000117e:	66ea      	str	r2, [r5, #108]	; 0x6c
10001180:	632b      	str	r3, [r5, #48]	; 0x30
	if (I2C_MODE_MASTER & dw->app_config) {
10001182:	6921      	ldr	r1, [r4, #16]
	return *(volatile uint32_t *)addr;
10001184:	6c2a      	ldr	r2, [r5, #64]	; 0x40
10001186:	06cb      	lsls	r3, r1, #27
10001188:	d50e      	bpl.n	100011a8 <i2c_dw_transfer+0x70>
		ic_con.bits.master_mode = 1U;
1000118a:	2261      	movs	r2, #97	; 0x61
	if (I2C_ADDR_10_BITS & dw->app_config) {
1000118c:	4239      	tst	r1, r7
1000118e:	d000      	beq.n	10001192 <i2c_dw_transfer+0x5a>
		ic_con.bits.addr_slave_10bit = 1U;
10001190:	3218      	adds	r2, #24
	switch (I2C_SPEED_GET(dw->app_config)) {
10001192:	2007      	movs	r0, #7
10001194:	2304      	movs	r3, #4
10001196:	0849      	lsrs	r1, r1, #1
10001198:	4008      	ands	r0, r1
1000119a:	4219      	tst	r1, r3
1000119c:	d10a      	bne.n	100011b4 <i2c_dw_transfer+0x7c>
1000119e:	2706      	movs	r7, #6
100011a0:	4239      	tst	r1, r7
100011a2:	d11c      	bne.n	100011de <i2c_dw_transfer+0xa6>
100011a4:	2801      	cmp	r0, #1
100011a6:	d012      	beq.n	100011ce <i2c_dw_transfer+0x96>
		dw->state = I2C_DW_STATE_READY;
100011a8:	2300      	movs	r3, #0
		return ret;
100011aa:	2016      	movs	r0, #22
		dw->state = I2C_DW_STATE_READY;
100011ac:	3405      	adds	r4, #5
100011ae:	77e3      	strb	r3, [r4, #31]
		return -EIO;
100011b0:	4240      	negs	r0, r0
100011b2:	e07e      	b.n	100012b2 <i2c_dw_transfer+0x17a>
	switch (I2C_SPEED_GET(dw->app_config)) {
100011b4:	2804      	cmp	r0, #4
100011b6:	d1f7      	bne.n	100011a8 <i2c_dw_transfer+0x70>
		if (!dw->support_hs_mode) {
100011b8:	0021      	movs	r1, r4
100011ba:	3108      	adds	r1, #8
100011bc:	7fc9      	ldrb	r1, [r1, #31]
100011be:	2900      	cmp	r1, #0
100011c0:	d0f2      	beq.n	100011a8 <i2c_dw_transfer+0x70>
		write_hs_scl_lcnt(dw->lcnt, reg_base);
100011c2:	8c61      	ldrh	r1, [r4, #34]	; 0x22
	*(volatile uint32_t *)addr = data;
100011c4:	62a9      	str	r1, [r5, #40]	; 0x28
		write_hs_scl_hcnt(dw->hcnt, reg_base);
100011c6:	8c21      	ldrh	r1, [r4, #32]
100011c8:	6269      	str	r1, [r5, #36]	; 0x24
		ic_con.bits.speed = I2C_DW_SPEED_HIGH;
100011ca:	2106      	movs	r1, #6
100011cc:	e005      	b.n	100011da <i2c_dw_transfer+0xa2>
		write_ss_scl_lcnt(dw->lcnt, reg_base);
100011ce:	8c61      	ldrh	r1, [r4, #34]	; 0x22
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
100011d0:	43ba      	bics	r2, r7
100011d2:	61a9      	str	r1, [r5, #24]
		write_ss_scl_hcnt(dw->hcnt, reg_base);
100011d4:	8c21      	ldrh	r1, [r4, #32]
100011d6:	6169      	str	r1, [r5, #20]
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
100011d8:	2102      	movs	r1, #2
		ic_con.bits.speed = I2C_DW_SPEED_HIGH;
100011da:	430a      	orrs	r2, r1
		break;
100011dc:	e006      	b.n	100011ec <i2c_dw_transfer+0xb4>
		ic_con.bits.speed = I2C_DW_SPEED_FAST;
100011de:	43ba      	bics	r2, r7
100011e0:	4313      	orrs	r3, r2
100011e2:	001a      	movs	r2, r3
		write_fs_scl_lcnt(dw->lcnt, reg_base);
100011e4:	8c61      	ldrh	r1, [r4, #34]	; 0x22
100011e6:	6229      	str	r1, [r5, #32]
		write_fs_scl_hcnt(dw->hcnt, reg_base);
100011e8:	8c21      	ldrh	r1, [r4, #32]
100011ea:	61e9      	str	r1, [r5, #28]
100011ec:	602a      	str	r2, [r5, #0]
100011ee:	2200      	movs	r2, #0
100011f0:	63aa      	str	r2, [r5, #56]	; 0x38
100011f2:	63ea      	str	r2, [r5, #60]	; 0x3c
	return *(volatile uint32_t *)addr;
100011f4:	686a      	ldr	r2, [r5, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
100011f6:	6829      	ldr	r1, [r5, #0]
	if (test_bit_con_master_mode(reg_base)) {
100011f8:	07cb      	lsls	r3, r1, #31
100011fa:	d55c      	bpl.n	100012b6 <i2c_dw_transfer+0x17e>
		ic_tar.bits.ic_tar = slave_address;
100011fc:	9b03      	ldr	r3, [sp, #12]
100011fe:	0a92      	lsrs	r2, r2, #10
10001200:	059b      	lsls	r3, r3, #22
10001202:	0d9b      	lsrs	r3, r3, #22
10001204:	0292      	lsls	r2, r2, #10
10001206:	431a      	orrs	r2, r3
	if (I2C_MODE_MASTER & dw->app_config) {
10001208:	6923      	ldr	r3, [r4, #16]
1000120a:	06d9      	lsls	r1, r3, #27
1000120c:	d504      	bpl.n	10001218 <i2c_dw_transfer+0xe0>
		if (I2C_ADDR_10_BITS & dw->app_config) {
1000120e:	07db      	lsls	r3, r3, #31
10001210:	d554      	bpl.n	100012bc <i2c_dw_transfer+0x184>
			ic_tar.bits.ic_10bitaddr_master = 1U;
10001212:	2380      	movs	r3, #128	; 0x80
10001214:	015b      	lsls	r3, r3, #5
10001216:	431a      	orrs	r2, r3
	*(volatile uint32_t *)addr = data;
10001218:	606a      	str	r2, [r5, #4]
	*(volatile uint32_t *)addr = temp | (1 << bit);
1000121a:	2201      	movs	r2, #1
	uint32_t temp = *(volatile uint32_t *)addr;
1000121c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp | (1 << bit);
1000121e:	4313      	orrs	r3, r2
10001220:	66eb      	str	r3, [r5, #108]	; 0x6c
		dw->rx_pending = 0U;
10001222:	2700      	movs	r7, #0
		dw->xfr_buf = cur_msg->buf;
10001224:	6832      	ldr	r2, [r6, #0]
		dw->xfr_len = cur_msg->len;
10001226:	6871      	ldr	r1, [r6, #4]
		pflags = dw->xfr_flags;
10001228:	1de3      	adds	r3, r4, #7
1000122a:	7fd8      	ldrb	r0, [r3, #31]
		dw->xfr_buf = cur_msg->buf;
1000122c:	6162      	str	r2, [r4, #20]
		dw->xfr_len = cur_msg->len;
1000122e:	61a1      	str	r1, [r4, #24]
		dw->xfr_flags = cur_msg->flags;
10001230:	7a32      	ldrb	r2, [r6, #8]
10001232:	77da      	strb	r2, [r3, #31]
		    != (dw->xfr_flags & I2C_MSG_RW_MASK)) {
10001234:	4050      	eors	r0, r2
		dw->rx_pending = 0U;
10001236:	61e7      	str	r7, [r4, #28]
		if ((pflags & I2C_MSG_RW_MASK)
10001238:	3701      	adds	r7, #1
1000123a:	4238      	tst	r0, r7
1000123c:	d002      	beq.n	10001244 <i2c_dw_transfer+0x10c>
			dw->xfr_flags |= I2C_MSG_RESTART;
1000123e:	2004      	movs	r0, #4
10001240:	4302      	orrs	r2, r0
10001242:	77da      	strb	r2, [r3, #31]
		if (msg_left == 1U) {
10001244:	9a01      	ldr	r2, [sp, #4]
10001246:	2a01      	cmp	r2, #1
10001248:	d103      	bne.n	10001252 <i2c_dw_transfer+0x11a>
			dw->xfr_flags |= I2C_MSG_STOP;
1000124a:	7fd8      	ldrb	r0, [r3, #31]
1000124c:	3201      	adds	r2, #1
1000124e:	4302      	orrs	r2, r0
10001250:	77da      	strb	r2, [r3, #31]
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
10001252:	2203      	movs	r2, #3
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
10001254:	2001      	movs	r0, #1
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
10001256:	1d67      	adds	r7, r4, #5
10001258:	7ffb      	ldrb	r3, [r7, #31]
1000125a:	4393      	bics	r3, r2
1000125c:	77fb      	strb	r3, [r7, #31]
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
1000125e:	1de3      	adds	r3, r4, #7
10001260:	7fdb      	ldrb	r3, [r3, #31]
10001262:	3a02      	subs	r2, #2
10001264:	401a      	ands	r2, r3
10001266:	4203      	tst	r3, r0
10001268:	d12b      	bne.n	100012c2 <i2c_dw_transfer+0x18a>
			dw->state |= I2C_DW_CMD_SEND;
1000126a:	7ffb      	ldrb	r3, [r7, #31]
1000126c:	4303      	orrs	r3, r0
1000126e:	77fb      	strb	r3, [r7, #31]
			dw->request_bytes = 0U;
10001270:	1da3      	adds	r3, r4, #6
10001272:	77da      	strb	r2, [r3, #31]
		if (test_bit_con_master_mode(reg_base)) {
10001274:	2201      	movs	r2, #1
	uint32_t temp = *(volatile uint32_t *)addr;
10001276:	682b      	ldr	r3, [r5, #0]
10001278:	4213      	tst	r3, r2
1000127a:	d029      	beq.n	100012d0 <i2c_dw_transfer+0x198>
1000127c:	4b18      	ldr	r3, [pc, #96]	; (100012e0 <i2c_dw_transfer+0x1a8>)
1000127e:	9a02      	ldr	r2, [sp, #8]
10001280:	6013      	str	r3, [r2, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
10001282:	2201      	movs	r2, #1
10001284:	4252      	negs	r2, r2
10001286:	17d3      	asrs	r3, r2, #31
10001288:	0020      	movs	r0, r4
1000128a:	f000 fd0d 	bl	10001ca8 <z_impl_k_sem_take>
		if (dw->state & I2C_DW_CMD_ERROR) {
1000128e:	2204      	movs	r2, #4
10001290:	7ffb      	ldrb	r3, [r7, #31]
10001292:	4213      	tst	r3, r2
10001294:	d11f      	bne.n	100012d6 <i2c_dw_transfer+0x19e>
		if (dw->xfr_len > 0) {
10001296:	69a3      	ldr	r3, [r4, #24]
10001298:	2b00      	cmp	r3, #0
1000129a:	d11c      	bne.n	100012d6 <i2c_dw_transfer+0x19e>
		msg_left--;
1000129c:	9a01      	ldr	r2, [sp, #4]
		cur_msg++;
1000129e:	360c      	adds	r6, #12
		msg_left--;
100012a0:	3a01      	subs	r2, #1
100012a2:	b2d3      	uxtb	r3, r2
100012a4:	9301      	str	r3, [sp, #4]
	while (msg_left > 0) {
100012a6:	2b00      	cmp	r3, #0
100012a8:	d1bb      	bne.n	10001222 <i2c_dw_transfer+0xea>
	ret = i2c_dw_setup(dev, slave_address);
100012aa:	0018      	movs	r0, r3
	dw->state = I2C_DW_STATE_READY;
100012ac:	2300      	movs	r3, #0
100012ae:	3405      	adds	r4, #5
100012b0:	77e3      	strb	r3, [r4, #31]
}
100012b2:	b005      	add	sp, #20
100012b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100012b6:	9b03      	ldr	r3, [sp, #12]
100012b8:	60ab      	str	r3, [r5, #8]
DEFINE_MM_REG_READ(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(sar, DW_IC_REG_SAR, 32)
100012ba:	e7a5      	b.n	10001208 <i2c_dw_transfer+0xd0>
			ic_tar.bits.ic_10bitaddr_master = 0U;
100012bc:	4b09      	ldr	r3, [pc, #36]	; (100012e4 <i2c_dw_transfer+0x1ac>)
100012be:	401a      	ands	r2, r3
100012c0:	e7aa      	b.n	10001218 <i2c_dw_transfer+0xe0>
			dw->state |= I2C_DW_CMD_RECV;
100012c2:	2302      	movs	r3, #2
100012c4:	7ffa      	ldrb	r2, [r7, #31]
100012c6:	4313      	orrs	r3, r2
100012c8:	77fb      	strb	r3, [r7, #31]
			dw->request_bytes = dw->xfr_len;
100012ca:	1da3      	adds	r3, r4, #6
100012cc:	77d9      	strb	r1, [r3, #31]
100012ce:	e7d1      	b.n	10001274 <i2c_dw_transfer+0x13c>
100012d0:	2398      	movs	r3, #152	; 0x98
100012d2:	009b      	lsls	r3, r3, #2
100012d4:	e7d3      	b.n	1000127e <i2c_dw_transfer+0x146>
100012d6:	2005      	movs	r0, #5
100012d8:	4240      	negs	r0, r0
100012da:	e7e7      	b.n	100012ac <i2c_dw_transfer+0x174>
		return -EIO;
100012dc:	2005      	movs	r0, #5
100012de:	e767      	b.n	100011b0 <i2c_dw_transfer+0x78>
100012e0:	0000025f 	.word	0x0000025f
100012e4:	ffffefff 	.word	0xffffefff

100012e8 <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
100012e8:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
100012ea:	4903      	ldr	r1, [pc, #12]	; (100012f8 <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
100012ec:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
100012ee:	6b93      	ldr	r3, [r2, #56]	; 0x38
100012f0:	400b      	ands	r3, r1
100012f2:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
100012f4:	4770      	bx	lr
100012f6:	46c0      	nop			; (mov r8, r8)
100012f8:	fffff83f 	.word	0xfffff83f

100012fc <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
100012fc:	4b0a      	ldr	r3, [pc, #40]	; (10001328 <elapsed+0x2c>)
{
100012fe:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
10001300:	6899      	ldr	r1, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10001302:	6818      	ldr	r0, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
10001304:	4a09      	ldr	r2, [pc, #36]	; (1000132c <elapsed+0x30>)
10001306:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
10001308:	4d09      	ldr	r5, [pc, #36]	; (10001330 <elapsed+0x34>)
1000130a:	03c0      	lsls	r0, r0, #15
1000130c:	d401      	bmi.n	10001312 <elapsed+0x16>
	    || (val1 < val2)) {
1000130e:	42a1      	cmp	r1, r4
10001310:	d204      	bcs.n	1000131c <elapsed+0x20>
		overflow_cyc += last_load;
10001312:	6811      	ldr	r1, [r2, #0]
10001314:	6828      	ldr	r0, [r5, #0]
10001316:	1809      	adds	r1, r1, r0
10001318:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
1000131a:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
1000131c:	682b      	ldr	r3, [r5, #0]
1000131e:	6810      	ldr	r0, [r2, #0]
10001320:	18c0      	adds	r0, r0, r3
10001322:	1b00      	subs	r0, r0, r4
}
10001324:	bd30      	pop	{r4, r5, pc}
10001326:	46c0      	nop			; (mov r8, r8)
10001328:	e000e010 	.word	0xe000e010
1000132c:	200001c8 	.word	0x200001c8
10001330:	200001c4 	.word	0x200001c4

10001334 <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
10001334:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001336:	4a09      	ldr	r2, [pc, #36]	; (1000135c <sys_clock_driver_init+0x28>)
10001338:	6a13      	ldr	r3, [r2, #32]
1000133a:	021b      	lsls	r3, r3, #8
1000133c:	0a1b      	lsrs	r3, r3, #8
1000133e:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
10001340:	4a07      	ldr	r2, [pc, #28]	; (10001360 <sys_clock_driver_init+0x2c>)
10001342:	4b08      	ldr	r3, [pc, #32]	; (10001364 <sys_clock_driver_init+0x30>)
10001344:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
10001346:	4b08      	ldr	r3, [pc, #32]	; (10001368 <sys_clock_driver_init+0x34>)
10001348:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
1000134a:	4b08      	ldr	r3, [pc, #32]	; (1000136c <sys_clock_driver_init+0x38>)
1000134c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
1000134e:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
10001350:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10001352:	6819      	ldr	r1, [r3, #0]
10001354:	430a      	orrs	r2, r1
10001356:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
10001358:	4770      	bx	lr
1000135a:	46c0      	nop			; (mov r8, r8)
1000135c:	e000ed00 	.word	0xe000ed00
10001360:	000030d3 	.word	0x000030d3
10001364:	200001c4 	.word	0x200001c4
10001368:	200001c8 	.word	0x200001c8
1000136c:	e000e010 	.word	0xe000e010

10001370 <sys_clock_isr>:
{
10001370:	b570      	push	{r4, r5, r6, lr}
	elapsed();
10001372:	f7ff ffc3 	bl	100012fc <elapsed>
	cycle_count += overflow_cyc;
10001376:	4b0b      	ldr	r3, [pc, #44]	; (100013a4 <sys_clock_isr+0x34>)
10001378:	4a0b      	ldr	r2, [pc, #44]	; (100013a8 <sys_clock_isr+0x38>)
1000137a:	6818      	ldr	r0, [r3, #0]
1000137c:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
1000137e:	4c0b      	ldr	r4, [pc, #44]	; (100013ac <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
10001380:	1840      	adds	r0, r0, r1
10001382:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
10001384:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10001386:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
10001388:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
1000138a:	4909      	ldr	r1, [pc, #36]	; (100013b0 <sys_clock_isr+0x40>)
1000138c:	1b40      	subs	r0, r0, r5
1000138e:	f7fe ff29 	bl	100001e4 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
10001392:	4b07      	ldr	r3, [pc, #28]	; (100013b0 <sys_clock_isr+0x40>)
10001394:	4343      	muls	r3, r0
10001396:	195b      	adds	r3, r3, r5
10001398:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
1000139a:	f000 ff9f 	bl	100022dc <sys_clock_announce>
	z_arm_int_exit();
1000139e:	f7ff fd39 	bl	10000e14 <z_arm_exc_exit>
}
100013a2:	bd70      	pop	{r4, r5, r6, pc}
100013a4:	200001c8 	.word	0x200001c8
100013a8:	200001c0 	.word	0x200001c0
100013ac:	200001bc 	.word	0x200001bc
100013b0:	000030d4 	.word	0x000030d4

100013b4 <sys_clock_set_timeout>:
{
100013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100013b6:	4d35      	ldr	r5, [pc, #212]	; (1000148c <sys_clock_set_timeout+0xd8>)
100013b8:	4e35      	ldr	r6, [pc, #212]	; (10001490 <sys_clock_set_timeout+0xdc>)
100013ba:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
100013bc:	2900      	cmp	r1, #0
100013be:	d00a      	beq.n	100013d6 <sys_clock_set_timeout+0x22>
100013c0:	1c43      	adds	r3, r0, #1
100013c2:	d108      	bne.n	100013d6 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
100013c4:	2201      	movs	r2, #1
100013c6:	682b      	ldr	r3, [r5, #0]
100013c8:	4393      	bics	r3, r2
100013ca:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
100013cc:	23ff      	movs	r3, #255	; 0xff
100013ce:	061b      	lsls	r3, r3, #24
100013d0:	6033      	str	r3, [r6, #0]
}
100013d2:	b005      	add	sp, #20
100013d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
100013d6:	6833      	ldr	r3, [r6, #0]
100013d8:	9302      	str	r3, [sp, #8]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
100013da:	1c43      	adds	r3, r0, #1
100013dc:	d037      	beq.n	1000144e <sys_clock_set_timeout+0x9a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
100013de:	2700      	movs	r7, #0
100013e0:	2801      	cmp	r0, #1
100013e2:	dd04      	ble.n	100013ee <sys_clock_set_timeout+0x3a>
100013e4:	4b2b      	ldr	r3, [pc, #172]	; (10001494 <sys_clock_set_timeout+0xe0>)
100013e6:	001f      	movs	r7, r3
100013e8:	4298      	cmp	r0, r3
100013ea:	dc00      	bgt.n	100013ee <sys_clock_set_timeout+0x3a>
100013ec:	1e47      	subs	r7, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
100013ee:	f3ef 8310 	mrs	r3, PRIMASK
100013f2:	b672      	cpsid	i
100013f4:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
100013f6:	f7ff ff81 	bl	100012fc <elapsed>
	val1 = SysTick->VAL;
100013fa:	68ab      	ldr	r3, [r5, #8]
100013fc:	9300      	str	r3, [sp, #0]
	cycle_count += pending;
100013fe:	4b26      	ldr	r3, [pc, #152]	; (10001498 <sys_clock_set_timeout+0xe4>)
10001400:	681a      	ldr	r2, [r3, #0]
10001402:	1884      	adds	r4, r0, r2
	overflow_cyc = 0U;
10001404:	2200      	movs	r2, #0
	cycle_count += pending;
10001406:	601c      	str	r4, [r3, #0]
	overflow_cyc = 0U;
10001408:	4b24      	ldr	r3, [pc, #144]	; (1000149c <sys_clock_set_timeout+0xe8>)
1000140a:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
1000140c:	4b24      	ldr	r3, [pc, #144]	; (100014a0 <sys_clock_set_timeout+0xec>)
1000140e:	681b      	ldr	r3, [r3, #0]
10001410:	9301      	str	r3, [sp, #4]
10001412:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
10001414:	4290      	cmp	r0, r2
10001416:	da1c      	bge.n	10001452 <sys_clock_set_timeout+0x9e>
		last_load = MIN_DELAY;
10001418:	2380      	movs	r3, #128	; 0x80
1000141a:	00db      	lsls	r3, r3, #3
			last_load = MAX_CYCLES;
1000141c:	6033      	str	r3, [r6, #0]
	SysTick->LOAD = last_load - 1;
1000141e:	6832      	ldr	r2, [r6, #0]
	val2 = SysTick->VAL;
10001420:	68ab      	ldr	r3, [r5, #8]
	SysTick->LOAD = last_load - 1;
10001422:	3a01      	subs	r2, #1
10001424:	606a      	str	r2, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
10001426:	2200      	movs	r2, #0
10001428:	60aa      	str	r2, [r5, #8]
	if (val1 < val2) {
1000142a:	9a00      	ldr	r2, [sp, #0]
1000142c:	429a      	cmp	r2, r3
1000142e:	d228      	bcs.n	10001482 <sys_clock_set_timeout+0xce>
		cycle_count += (val1 + (last_load_ - val2));
10001430:	9900      	ldr	r1, [sp, #0]
10001432:	9a02      	ldr	r2, [sp, #8]
10001434:	468c      	mov	ip, r1
10001436:	4462      	add	r2, ip
10001438:	1ad0      	subs	r0, r2, r3
1000143a:	1904      	adds	r4, r0, r4
1000143c:	4b16      	ldr	r3, [pc, #88]	; (10001498 <sys_clock_set_timeout+0xe4>)
1000143e:	601c      	str	r4, [r3, #0]
	if (key != 0U) {
10001440:	9b03      	ldr	r3, [sp, #12]
10001442:	2b00      	cmp	r3, #0
10001444:	d1c5      	bne.n	100013d2 <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
10001446:	b662      	cpsie	i
10001448:	f3bf 8f6f 	isb	sy
1000144c:	e7c1      	b.n	100013d2 <sys_clock_set_timeout+0x1e>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
1000144e:	4811      	ldr	r0, [pc, #68]	; (10001494 <sys_clock_set_timeout+0xe0>)
10001450:	e7cc      	b.n	100013ec <sys_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
10001452:	4b14      	ldr	r3, [pc, #80]	; (100014a4 <sys_clock_set_timeout+0xf0>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10001454:	4913      	ldr	r1, [pc, #76]	; (100014a4 <sys_clock_set_timeout+0xf0>)
		delay = ticks * CYC_PER_TICK;
10001456:	435f      	muls	r7, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10001458:	4b13      	ldr	r3, [pc, #76]	; (100014a8 <sys_clock_set_timeout+0xf4>)
		delay += unannounced;
1000145a:	19c0      	adds	r0, r0, r7
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
1000145c:	18c0      	adds	r0, r0, r3
1000145e:	f7fe fec1 	bl	100001e4 <__udivsi3>
		delay =
10001462:	4b10      	ldr	r3, [pc, #64]	; (100014a4 <sys_clock_set_timeout+0xf0>)
		delay -= unannounced;
10001464:	9a01      	ldr	r2, [sp, #4]
		delay =
10001466:	4343      	muls	r3, r0
		delay -= unannounced;
10001468:	1b10      	subs	r0, r2, r4
1000146a:	18c0      	adds	r0, r0, r3
		delay = MAX(delay, MIN_DELAY);
1000146c:	2380      	movs	r3, #128	; 0x80
1000146e:	00db      	lsls	r3, r3, #3
10001470:	4298      	cmp	r0, r3
10001472:	d904      	bls.n	1000147e <sys_clock_set_timeout+0xca>
		if (delay > MAX_CYCLES) {
10001474:	4b0d      	ldr	r3, [pc, #52]	; (100014ac <sys_clock_set_timeout+0xf8>)
10001476:	4298      	cmp	r0, r3
10001478:	d8d0      	bhi.n	1000141c <sys_clock_set_timeout+0x68>
			last_load = delay;
1000147a:	6030      	str	r0, [r6, #0]
1000147c:	e7cf      	b.n	1000141e <sys_clock_set_timeout+0x6a>
		delay = MAX(delay, MIN_DELAY);
1000147e:	0018      	movs	r0, r3
10001480:	e7fb      	b.n	1000147a <sys_clock_set_timeout+0xc6>
		cycle_count += (val1 - val2);
10001482:	9a00      	ldr	r2, [sp, #0]
10001484:	1ad3      	subs	r3, r2, r3
10001486:	191c      	adds	r4, r3, r4
10001488:	e7d8      	b.n	1000143c <sys_clock_set_timeout+0x88>
1000148a:	46c0      	nop			; (mov r8, r8)
1000148c:	e000e010 	.word	0xe000e010
10001490:	200001c4 	.word	0x200001c4
10001494:	0000053d 	.word	0x0000053d
10001498:	200001c0 	.word	0x200001c0
1000149c:	200001c8 	.word	0x200001c8
100014a0:	200001bc 	.word	0x200001bc
100014a4:	000030d4 	.word	0x000030d4
100014a8:	000030d3 	.word	0x000030d3
100014ac:	00ffc684 	.word	0x00ffc684

100014b0 <sys_clock_elapsed>:
{
100014b0:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100014b2:	f3ef 8410 	mrs	r4, PRIMASK
100014b6:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
100014b8:	f7ff ff20 	bl	100012fc <elapsed>
100014bc:	4b07      	ldr	r3, [pc, #28]	; (100014dc <sys_clock_elapsed+0x2c>)
100014be:	4a08      	ldr	r2, [pc, #32]	; (100014e0 <sys_clock_elapsed+0x30>)
100014c0:	681b      	ldr	r3, [r3, #0]
100014c2:	6812      	ldr	r2, [r2, #0]
100014c4:	1a9b      	subs	r3, r3, r2
100014c6:	1818      	adds	r0, r3, r0
	if (key != 0U) {
100014c8:	2c00      	cmp	r4, #0
100014ca:	d102      	bne.n	100014d2 <sys_clock_elapsed+0x22>
	__asm__ volatile(
100014cc:	b662      	cpsie	i
100014ce:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
100014d2:	4904      	ldr	r1, [pc, #16]	; (100014e4 <sys_clock_elapsed+0x34>)
100014d4:	f7fe fe86 	bl	100001e4 <__udivsi3>
}
100014d8:	bd10      	pop	{r4, pc}
100014da:	46c0      	nop			; (mov r8, r8)
100014dc:	200001c0 	.word	0x200001c0
100014e0:	200001bc 	.word	0x200001bc
100014e4:	000030d4 	.word	0x000030d4

100014e8 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
100014e8:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
100014ea:	6803      	ldr	r3, [r0, #0]
100014ec:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
100014ee:	7904      	ldrb	r4, [r0, #4]
100014f0:	4b09      	ldr	r3, [pc, #36]	; (10001518 <pinctrl_lookup_state+0x30>)
100014f2:	18e4      	adds	r4, r4, r3
100014f4:	00e4      	lsls	r4, r4, #3
100014f6:	6805      	ldr	r5, [r0, #0]
100014f8:	6813      	ldr	r3, [r2, #0]
100014fa:	192d      	adds	r5, r5, r4
100014fc:	42ab      	cmp	r3, r5
100014fe:	d902      	bls.n	10001506 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
10001500:	2002      	movs	r0, #2
10001502:	4240      	negs	r0, r0
}
10001504:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
10001506:	795d      	ldrb	r5, [r3, #5]
10001508:	428d      	cmp	r5, r1
1000150a:	d002      	beq.n	10001512 <pinctrl_lookup_state+0x2a>
		(*state)++;
1000150c:	3308      	adds	r3, #8
1000150e:	6013      	str	r3, [r2, #0]
10001510:	e7f1      	b.n	100014f6 <pinctrl_lookup_state+0xe>
			return 0;
10001512:	2000      	movs	r0, #0
10001514:	e7f6      	b.n	10001504 <pinctrl_lookup_state+0x1c>
10001516:	46c0      	nop			; (mov r8, r8)
10001518:	1fffffff 	.word	0x1fffffff

1000151c <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
1000151c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000151e:	b085      	sub	sp, #20
10001520:	9203      	str	r2, [sp, #12]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10001522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10001524:	0005      	movs	r5, r0
10001526:	000f      	movs	r7, r1
        return false;
10001528:	2000      	movs	r0, #0
    if (freq > src_freq)
1000152a:	429a      	cmp	r2, r3
1000152c:	d840      	bhi.n	100015b0 <clock_configure+0x94>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
1000152e:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10001530:	0e1a      	lsrs	r2, r3, #24
10001532:	021b      	lsls	r3, r3, #8
10001534:	9202      	str	r2, [sp, #8]
10001536:	9301      	str	r3, [sp, #4]
10001538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000153a:	0003      	movs	r3, r0
1000153c:	9902      	ldr	r1, [sp, #8]
1000153e:	9801      	ldr	r0, [sp, #4]
10001540:	f7fe feb6 	bl	100002b0 <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10001544:	436c      	muls	r4, r5
10001546:	4b28      	ldr	r3, [pc, #160]	; (100015e8 <clock_configure+0xcc>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10001548:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
1000154a:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
1000154c:	6863      	ldr	r3, [r4, #4]
1000154e:	4283      	cmp	r3, r0
10001550:	d200      	bcs.n	10001554 <clock_configure+0x38>
        clock->div = div;
10001552:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10001554:	1f2b      	subs	r3, r5, #4
10001556:	b2db      	uxtb	r3, r3
10001558:	9300      	str	r3, [sp, #0]
1000155a:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
1000155c:	9a00      	ldr	r2, [sp, #0]
1000155e:	019b      	lsls	r3, r3, #6
10001560:	4323      	orrs	r3, r4
10001562:	2a01      	cmp	r2, #1
10001564:	d826      	bhi.n	100015b4 <clock_configure+0x98>
10001566:	2f01      	cmp	r7, #1
10001568:	d124      	bne.n	100015b4 <clock_configure+0x98>
1000156a:	2203      	movs	r2, #3
1000156c:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
1000156e:	68a3      	ldr	r3, [r4, #8]
10001570:	423b      	tst	r3, r7
10001572:	d0fc      	beq.n	1000156e <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10001574:	9a03      	ldr	r2, [sp, #12]
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001576:	6823      	ldr	r3, [r4, #0]
10001578:	0152      	lsls	r2, r2, #5
1000157a:	405a      	eors	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000157c:	2180      	movs	r1, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000157e:	23e0      	movs	r3, #224	; 0xe0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001580:	0149      	lsls	r1, r1, #5
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001582:	401a      	ands	r2, r3
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
10001584:	9b00      	ldr	r3, [sp, #0]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001586:	4321      	orrs	r1, r4
10001588:	600a      	str	r2, [r1, #0]
1000158a:	2b01      	cmp	r3, #1
1000158c:	d921      	bls.n	100015d2 <clock_configure+0xb6>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000158e:	2380      	movs	r3, #128	; 0x80
10001590:	2280      	movs	r2, #128	; 0x80
10001592:	019b      	lsls	r3, r3, #6
10001594:	4323      	orrs	r3, r4
10001596:	0112      	lsls	r2, r2, #4
10001598:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
1000159a:	9801      	ldr	r0, [sp, #4]
1000159c:	2300      	movs	r3, #0
1000159e:	0032      	movs	r2, r6
100015a0:	9902      	ldr	r1, [sp, #8]
    clock->div = div;
100015a2:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
100015a4:	f7fe fe84 	bl	100002b0 <__aeabi_uldivmod>
100015a8:	4b10      	ldr	r3, [pc, #64]	; (100015ec <clock_configure+0xd0>)
100015aa:	00ad      	lsls	r5, r5, #2
100015ac:	5158      	str	r0, [r3, r5]
100015ae:	2001      	movs	r0, #1

    return true;
}
100015b0:	b005      	add	sp, #20
100015b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100015b4:	2280      	movs	r2, #128	; 0x80
100015b6:	0112      	lsls	r2, r2, #4
100015b8:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
100015ba:	4b0c      	ldr	r3, [pc, #48]	; (100015ec <clock_configure+0xd0>)
100015bc:	00aa      	lsls	r2, r5, #2
100015be:	58d1      	ldr	r1, [r2, r3]
100015c0:	2900      	cmp	r1, #0
100015c2:	d0d7      	beq.n	10001574 <clock_configure+0x58>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100015c4:	6958      	ldr	r0, [r3, #20]
100015c6:	f7fe fe0d 	bl	100001e4 <__udivsi3>
100015ca:	3001      	adds	r0, #1
            asm volatile (
100015cc:	3801      	subs	r0, #1
100015ce:	d1fd      	bne.n	100015cc <clock_configure+0xb0>
100015d0:	e7d0      	b.n	10001574 <clock_configure+0x58>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100015d2:	2203      	movs	r2, #3
100015d4:	6823      	ldr	r3, [r4, #0]
100015d6:	407b      	eors	r3, r7
100015d8:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100015da:	600b      	str	r3, [r1, #0]
100015dc:	2301      	movs	r3, #1
100015de:	40bb      	lsls	r3, r7
        while (!(clock->selected & (1u << src)))
100015e0:	68a2      	ldr	r2, [r4, #8]
100015e2:	4213      	tst	r3, r2
100015e4:	d0fc      	beq.n	100015e0 <clock_configure+0xc4>
100015e6:	e7d2      	b.n	1000158e <clock_configure+0x72>
100015e8:	40008000 	.word	0x40008000
100015ec:	200001cc 	.word	0x200001cc

100015f0 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
100015f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
100015f2:	200c      	movs	r0, #12
100015f4:	f000 f8da 	bl	100017ac <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
100015f8:	f000 f8e0 	bl	100017bc <running_on_fpga>
100015fc:	2800      	cmp	r0, #0
100015fe:	d00a      	beq.n	10001616 <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
10001600:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
10001602:	4a2b      	ldr	r2, [pc, #172]	; (100016b0 <clocks_init+0xc0>)
10001604:	482b      	ldr	r0, [pc, #172]	; (100016b4 <clocks_init+0xc4>)
10001606:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
10001608:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
1000160a:	5088      	str	r0, [r1, r2]
        for (uint i = 0; i < CLK_COUNT; i++) {
1000160c:	2b0a      	cmp	r3, #10
1000160e:	d1fa      	bne.n	10001606 <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
10001610:	4b29      	ldr	r3, [pc, #164]	; (100016b8 <clocks_init+0xc8>)
10001612:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
10001614:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
10001616:	4d29      	ldr	r5, [pc, #164]	; (100016bc <clocks_init+0xcc>)
10001618:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
1000161a:	f000 f8b3 	bl	10001784 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000161e:	2201      	movs	r2, #1
10001620:	4b27      	ldr	r3, [pc, #156]	; (100016c0 <clocks_init+0xd0>)
10001622:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10001624:	6c6b      	ldr	r3, [r5, #68]	; 0x44
10001626:	2b01      	cmp	r3, #1
10001628:	d1fc      	bne.n	10001624 <clocks_init+0x34>
1000162a:	2203      	movs	r2, #3
1000162c:	4b25      	ldr	r3, [pc, #148]	; (100016c4 <clocks_init+0xd4>)
1000162e:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10001630:	6bac      	ldr	r4, [r5, #56]	; 0x38
10001632:	2c01      	cmp	r4, #1
10001634:	d1fc      	bne.n	10001630 <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
10001636:	2502      	movs	r5, #2
10001638:	0021      	movs	r1, r4
1000163a:	9500      	str	r5, [sp, #0]
1000163c:	2306      	movs	r3, #6
1000163e:	4a22      	ldr	r2, [pc, #136]	; (100016c8 <clocks_init+0xd8>)
10001640:	4822      	ldr	r0, [pc, #136]	; (100016cc <clocks_init+0xdc>)
10001642:	f000 f853 	bl	100016ec <pll_init>
    pll_init(pll_usb, 1, 480 * PICO_MHZ, 5, 2);
10001646:	0021      	movs	r1, r4
10001648:	9500      	str	r5, [sp, #0]
1000164a:	2305      	movs	r3, #5
1000164c:	4a20      	ldr	r2, [pc, #128]	; (100016d0 <clocks_init+0xe0>)
1000164e:	4821      	ldr	r0, [pc, #132]	; (100016d4 <clocks_init+0xe4>)
10001650:	f000 f84c 	bl	100016ec <pll_init>
    clock_configure(clk_ref,
10001654:	4b20      	ldr	r3, [pc, #128]	; (100016d8 <clocks_init+0xe8>)
10001656:	0029      	movs	r1, r5
    clock_configure(clk_sys,
10001658:	4d20      	ldr	r5, [pc, #128]	; (100016dc <clocks_init+0xec>)
    clock_configure(clk_ref,
1000165a:	9300      	str	r3, [sp, #0]
1000165c:	2200      	movs	r2, #0
1000165e:	2004      	movs	r0, #4
10001660:	f7ff ff5c 	bl	1000151c <clock_configure>
    clock_configure(clk_sys,
10001664:	002b      	movs	r3, r5
10001666:	0021      	movs	r1, r4
10001668:	2200      	movs	r2, #0
1000166a:	9500      	str	r5, [sp, #0]
1000166c:	2005      	movs	r0, #5
1000166e:	f7ff ff55 	bl	1000151c <clock_configure>
    clock_configure(clk_usb,
10001672:	2200      	movs	r2, #0
10001674:	4c0f      	ldr	r4, [pc, #60]	; (100016b4 <clocks_init+0xc4>)
10001676:	0011      	movs	r1, r2
10001678:	0023      	movs	r3, r4
1000167a:	9400      	str	r4, [sp, #0]
1000167c:	2007      	movs	r0, #7
1000167e:	f7ff ff4d 	bl	1000151c <clock_configure>
    clock_configure(clk_adc,
10001682:	2200      	movs	r2, #0
10001684:	0023      	movs	r3, r4
10001686:	0011      	movs	r1, r2
10001688:	9400      	str	r4, [sp, #0]
1000168a:	2008      	movs	r0, #8
1000168c:	f7ff ff46 	bl	1000151c <clock_configure>
    clock_configure(clk_rtc,
10001690:	2200      	movs	r2, #0
10001692:	4b09      	ldr	r3, [pc, #36]	; (100016b8 <clocks_init+0xc8>)
10001694:	0011      	movs	r1, r2
10001696:	9300      	str	r3, [sp, #0]
10001698:	2009      	movs	r0, #9
1000169a:	0023      	movs	r3, r4
1000169c:	f7ff ff3e 	bl	1000151c <clock_configure>
    clock_configure(clk_peri,
100016a0:	2200      	movs	r2, #0
100016a2:	002b      	movs	r3, r5
100016a4:	0011      	movs	r1, r2
100016a6:	9500      	str	r5, [sp, #0]
100016a8:	2006      	movs	r0, #6
100016aa:	f7ff ff37 	bl	1000151c <clock_configure>
100016ae:	e7b1      	b.n	10001614 <clocks_init+0x24>
100016b0:	200001cc 	.word	0x200001cc
100016b4:	02dc6c00 	.word	0x02dc6c00
100016b8:	0000b71b 	.word	0x0000b71b
100016bc:	40008000 	.word	0x40008000
100016c0:	4000b03c 	.word	0x4000b03c
100016c4:	4000b030 	.word	0x4000b030
100016c8:	59682f00 	.word	0x59682f00
100016cc:	40028000 	.word	0x40028000
100016d0:	1c9c3800 	.word	0x1c9c3800
100016d4:	4002c000 	.word	0x4002c000
100016d8:	00b71b00 	.word	0x00b71b00
100016dc:	07735940 	.word	0x07735940

100016e0 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
100016e0:	4b01      	ldr	r3, [pc, #4]	; (100016e8 <clock_get_hz+0x8>)
100016e2:	0080      	lsls	r0, r0, #2
100016e4:	58c0      	ldr	r0, [r0, r3]
}
100016e6:	4770      	bx	lr
100016e8:	200001cc 	.word	0x200001cc

100016ec <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100016ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100016ee:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100016f0:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100016f2:	0017      	movs	r7, r2
100016f4:	001e      	movs	r6, r3
100016f6:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100016f8:	f7fe fd74 	bl	100001e4 <__udivsi3>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
100016fc:	491c      	ldr	r1, [pc, #112]	; (10001770 <pll_init+0x84>)
100016fe:	4341      	muls	r1, r0
10001700:	0038      	movs	r0, r7
10001702:	f7fe fd6f 	bl	100001e4 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10001706:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001708:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
1000170a:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
1000170c:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
1000170e:	6822      	ldr	r2, [r4, #0]
10001710:	2a00      	cmp	r2, #0
10001712:	da0c      	bge.n	1000172e <pll_init+0x42>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10001714:	213f      	movs	r1, #63	; 0x3f
10001716:	6822      	ldr	r2, [r4, #0]
10001718:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
1000171a:	42aa      	cmp	r2, r5
1000171c:	d107      	bne.n	1000172e <pll_init+0x42>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
1000171e:	68a2      	ldr	r2, [r4, #8]
10001720:	0512      	lsls	r2, r2, #20
10001722:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10001724:	4282      	cmp	r2, r0
10001726:	d102      	bne.n	1000172e <pll_init+0x42>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS & PLL_PRIM_POSTDIV2_BITS)))) {
10001728:	68e2      	ldr	r2, [r4, #12]
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
1000172a:	2b00      	cmp	r3, #0
1000172c:	d01b      	beq.n	10001766 <pll_init+0x7a>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
1000172e:	4a11      	ldr	r2, [pc, #68]	; (10001774 <pll_init+0x88>)
10001730:	4294      	cmp	r4, r2
10001732:	d019      	beq.n	10001768 <pll_init+0x7c>
10001734:	2280      	movs	r2, #128	; 0x80
10001736:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001738:	490f      	ldr	r1, [pc, #60]	; (10001778 <pll_init+0x8c>)
1000173a:	4e10      	ldr	r6, [pc, #64]	; (1000177c <pll_init+0x90>)
1000173c:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000173e:	4910      	ldr	r1, [pc, #64]	; (10001780 <pll_init+0x94>)
10001740:	600a      	str	r2, [r1, #0]
10001742:	0017      	movs	r7, r2
10001744:	68b1      	ldr	r1, [r6, #8]
10001746:	438f      	bics	r7, r1
10001748:	d1fb      	bne.n	10001742 <pll_init+0x56>
1000174a:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
1000174c:	1d21      	adds	r1, r4, #4
1000174e:	0192      	lsls	r2, r2, #6
10001750:	430a      	orrs	r2, r1
10001752:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
10001754:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
10001756:	60a0      	str	r0, [r4, #8]
10001758:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
1000175a:	6821      	ldr	r1, [r4, #0]
1000175c:	2900      	cmp	r1, #0
1000175e:	dafc      	bge.n	1000175a <pll_init+0x6e>

    // Set up post dividers
    pll->prim = pdiv;
10001760:	60e3      	str	r3, [r4, #12]
10001762:	2308      	movs	r3, #8
10001764:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10001766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10001768:	2280      	movs	r2, #128	; 0x80
1000176a:	0192      	lsls	r2, r2, #6
1000176c:	e7e4      	b.n	10001738 <pll_init+0x4c>
1000176e:	46c0      	nop			; (mov r8, r8)
10001770:	000f4240 	.word	0x000f4240
10001774:	4002c000 	.word	0x4002c000
10001778:	4000e000 	.word	0x4000e000
1000177c:	4000c000 	.word	0x4000c000
10001780:	4000f000 	.word	0x4000f000

10001784 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10001784:	22aa      	movs	r2, #170	; 0xaa
10001786:	4b06      	ldr	r3, [pc, #24]	; (100017a0 <xosc_init+0x1c>)
10001788:	0112      	lsls	r2, r2, #4
1000178a:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
1000178c:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000178e:	4905      	ldr	r1, [pc, #20]	; (100017a4 <xosc_init+0x20>)
10001790:	60da      	str	r2, [r3, #12]
10001792:	4a05      	ldr	r2, [pc, #20]	; (100017a8 <xosc_init+0x24>)
10001794:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10001796:	685a      	ldr	r2, [r3, #4]
10001798:	2a00      	cmp	r2, #0
1000179a:	dafc      	bge.n	10001796 <xosc_init+0x12>
}
1000179c:	4770      	bx	lr
1000179e:	46c0      	nop			; (mov r8, r8)
100017a0:	40024000 	.word	0x40024000
100017a4:	00fab000 	.word	0x00fab000
100017a8:	40026000 	.word	0x40026000

100017ac <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
100017ac:	2380      	movs	r3, #128	; 0x80
100017ae:	4a02      	ldr	r2, [pc, #8]	; (100017b8 <watchdog_start_tick+0xc>)
100017b0:	009b      	lsls	r3, r3, #2
100017b2:	4303      	orrs	r3, r0
100017b4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
100017b6:	4770      	bx	lr
100017b8:	40058000 	.word	0x40058000

100017bc <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
100017bc:	4b02      	ldr	r3, [pc, #8]	; (100017c8 <running_on_fpga+0xc>)
100017be:	6818      	ldr	r0, [r3, #0]
100017c0:	0780      	lsls	r0, r0, #30
100017c2:	0fc0      	lsrs	r0, r0, #31
}
100017c4:	4770      	bx	lr
100017c6:	46c0      	nop			; (mov r8, r8)
100017c8:	4006c000 	.word	0x4006c000

100017cc <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
100017cc:	4b08      	ldr	r3, [pc, #32]	; (100017f0 <gpio_set_function+0x24>)
100017ce:	0082      	lsls	r2, r0, #2
100017d0:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100017d2:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
100017d4:	b510      	push	{r4, lr}
100017d6:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
100017d8:	00c0      	lsls	r0, r0, #3
100017da:	4063      	eors	r3, r4
100017dc:	24c0      	movs	r4, #192	; 0xc0
100017de:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100017e0:	2480      	movs	r4, #128	; 0x80
100017e2:	0164      	lsls	r4, r4, #5
100017e4:	4322      	orrs	r2, r4
100017e6:	6013      	str	r3, [r2, #0]
100017e8:	4b02      	ldr	r3, [pc, #8]	; (100017f4 <gpio_set_function+0x28>)
100017ea:	18c0      	adds	r0, r0, r3
100017ec:	6041      	str	r1, [r0, #4]
}
100017ee:	bd10      	pop	{r4, pc}
100017f0:	4001c004 	.word	0x4001c004
100017f4:	40014000 	.word	0x40014000

100017f8 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
100017f8:	4b09      	ldr	r3, [pc, #36]	; (10001820 <gpio_set_pulls+0x28>)
100017fa:	0080      	lsls	r0, r0, #2
100017fc:	18c0      	adds	r0, r0, r3
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
100017fe:	1e4b      	subs	r3, r1, #1
10001800:	4199      	sbcs	r1, r3
10001802:	1e53      	subs	r3, r2, #1
10001804:	419a      	sbcs	r2, r3
10001806:	00c9      	lsls	r1, r1, #3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001808:	6803      	ldr	r3, [r0, #0]
1000180a:	0092      	lsls	r2, r2, #2
    hw_write_masked(
1000180c:	4311      	orrs	r1, r2
1000180e:	4059      	eors	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001810:	2380      	movs	r3, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001812:	220c      	movs	r2, #12
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001814:	015b      	lsls	r3, r3, #5
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001816:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001818:	4318      	orrs	r0, r3
1000181a:	6001      	str	r1, [r0, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
1000181c:	4770      	bx	lr
1000181e:	46c0      	nop			; (mov r8, r8)
10001820:	4001c004 	.word	0x4001c004

10001824 <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
10001824:	4b05      	ldr	r3, [pc, #20]	; (1000183c <gpio_set_input_hysteresis_enabled+0x18>)
10001826:	0080      	lsls	r0, r0, #2
10001828:	18c0      	adds	r0, r0, r3
1000182a:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000182c:	2380      	movs	r3, #128	; 0x80
    if (enabled)
1000182e:	2900      	cmp	r1, #0
10001830:	d100      	bne.n	10001834 <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001832:	23c0      	movs	r3, #192	; 0xc0
10001834:	019b      	lsls	r3, r3, #6
10001836:	4318      	orrs	r0, r3
10001838:	6002      	str	r2, [r0, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
1000183a:	4770      	bx	lr
1000183c:	4001c004 	.word	0x4001c004

10001840 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
10001840:	4b05      	ldr	r3, [pc, #20]	; (10001858 <gpio_set_slew_rate+0x18>)
10001842:	0080      	lsls	r0, r0, #2
10001844:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001846:	6803      	ldr	r3, [r0, #0]
10001848:	4059      	eors	r1, r3
1000184a:	2301      	movs	r3, #1
1000184c:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000184e:	2380      	movs	r3, #128	; 0x80
10001850:	015b      	lsls	r3, r3, #5
10001852:	4318      	orrs	r0, r3
10001854:	6001      	str	r1, [r0, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
10001856:	4770      	bx	lr
10001858:	4001c004 	.word	0x4001c004

1000185c <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
1000185c:	4b06      	ldr	r3, [pc, #24]	; (10001878 <gpio_set_drive_strength+0x1c>)
1000185e:	0080      	lsls	r0, r0, #2
10001860:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001862:	6803      	ldr	r3, [r0, #0]
10001864:	0109      	lsls	r1, r1, #4
10001866:	4059      	eors	r1, r3
10001868:	2330      	movs	r3, #48	; 0x30
1000186a:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000186c:	2380      	movs	r3, #128	; 0x80
1000186e:	015b      	lsls	r3, r3, #5
10001870:	4318      	orrs	r0, r3
10001872:	6001      	str	r1, [r0, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
10001874:	4770      	bx	lr
10001876:	46c0      	nop			; (mov r8, r8)
10001878:	4001c004 	.word	0x4001c004

1000187c <gpio_acknowledge_irq>:
    io_irq_ctrl_hw_t *irq_ctrl_base = &iobank0_hw->dormant_wake_irq_ctrl;
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    iobank0_hw->intr[gpio / 8] = events << 4 * (gpio % 8);
1000187c:	2207      	movs	r2, #7
1000187e:	08c3      	lsrs	r3, r0, #3
10001880:	4010      	ands	r0, r2
10001882:	0080      	lsls	r0, r0, #2
10001884:	4081      	lsls	r1, r0
10001886:	4a02      	ldr	r2, [pc, #8]	; (10001890 <gpio_acknowledge_irq+0x14>)
10001888:	333c      	adds	r3, #60	; 0x3c
1000188a:	009b      	lsls	r3, r3, #2
1000188c:	5099      	str	r1, [r3, r2]
}
1000188e:	4770      	bx	lr
10001890:	40014000 	.word	0x40014000

10001894 <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10001894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10001896:	23d0      	movs	r3, #208	; 0xd0
10001898:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000189a:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000189c:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000189e:	1e63      	subs	r3, r4, #1
100018a0:	419c      	sbcs	r4, r3
100018a2:	2030      	movs	r0, #48	; 0x30
100018a4:	4b0b      	ldr	r3, [pc, #44]	; (100018d4 <gpio_set_irq_enabled+0x40>)
100018a6:	4264      	negs	r4, r4
100018a8:	4004      	ands	r4, r0
    gpio_acknowledge_irq(gpio, events);
100018aa:	0028      	movs	r0, r5
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
100018ac:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
100018ae:	000f      	movs	r7, r1
100018b0:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
100018b2:	f7ff ffe3 	bl	1000187c <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
100018b6:	2307      	movs	r3, #7
100018b8:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100018ba:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
100018bc:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100018be:	00ad      	lsls	r5, r5, #2
100018c0:	1965      	adds	r5, r4, r5
    events <<= 4 * (gpio % 8);
100018c2:	409f      	lsls	r7, r3
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100018c4:	2480      	movs	r4, #128	; 0x80
    if (enabled)
100018c6:	2e00      	cmp	r6, #0
100018c8:	d100      	bne.n	100018cc <gpio_set_irq_enabled+0x38>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100018ca:	24c0      	movs	r4, #192	; 0xc0
100018cc:	01a4      	lsls	r4, r4, #6
100018ce:	4325      	orrs	r5, r4
100018d0:	602f      	str	r7, [r5, #0]
}
100018d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100018d4:	40014100 	.word	0x40014100

100018d8 <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
100018d8:	4b05      	ldr	r3, [pc, #20]	; (100018f0 <gpio_set_input_enabled+0x18>)
100018da:	0080      	lsls	r0, r0, #2
100018dc:	18c0      	adds	r0, r0, r3
100018de:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100018e0:	2380      	movs	r3, #128	; 0x80
    if (enabled)
100018e2:	2900      	cmp	r1, #0
100018e4:	d100      	bne.n	100018e8 <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100018e6:	23c0      	movs	r3, #192	; 0xc0
100018e8:	019b      	lsls	r3, r3, #6
100018ea:	4318      	orrs	r0, r3
100018ec:	6002      	str	r2, [r0, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
100018ee:	4770      	bx	lr
100018f0:	4001c004 	.word	0x4001c004

100018f4 <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100018f4:	b570      	push	{r4, r5, r6, lr}
100018f6:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
100018f8:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100018fa:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
100018fc:	f7ff fef0 	bl	100016e0 <clock_get_hz>
10001900:	0021      	movs	r1, r4
10001902:	00c0      	lsls	r0, r0, #3
10001904:	f7fe fc6e 	bl	100001e4 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
10001908:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
1000190a:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
1000190c:	d007      	beq.n	1000191e <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
1000190e:	4b0e      	ldr	r3, [pc, #56]	; (10001948 <uart_set_baudrate+0x54>)
10001910:	429d      	cmp	r5, r3
10001912:	d815      	bhi.n	10001940 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
10001914:	237f      	movs	r3, #127	; 0x7f
10001916:	4018      	ands	r0, r3
10001918:	1900      	adds	r0, r0, r4
1000191a:	002c      	movs	r4, r5
1000191c:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000191e:	2080      	movs	r0, #128	; 0x80
10001920:	2300      	movs	r3, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
10001922:	6274      	str	r4, [r6, #36]	; 0x24
10001924:	0180      	lsls	r0, r0, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
10001926:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
10001928:	362c      	adds	r6, #44	; 0x2c
1000192a:	4306      	orrs	r6, r0
1000192c:	6033      	str	r3, [r6, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
1000192e:	2006      	movs	r0, #6
10001930:	f7ff fed6 	bl	100016e0 <clock_get_hz>
10001934:	01a1      	lsls	r1, r4, #6
10001936:	1949      	adds	r1, r1, r5
10001938:	0080      	lsls	r0, r0, #2
1000193a:	f7fe fc53 	bl	100001e4 <__udivsi3>
}
1000193e:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
10001940:	2500      	movs	r5, #0
        baud_ibrd = 65535;
10001942:	4c02      	ldr	r4, [pc, #8]	; (1000194c <uart_set_baudrate+0x58>)
10001944:	e7eb      	b.n	1000191e <uart_set_baudrate+0x2a>
10001946:	46c0      	nop			; (mov r8, r8)
10001948:	0000fffe 	.word	0x0000fffe
1000194c:	0000ffff 	.word	0x0000ffff

10001950 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
10001950:	b570      	push	{r4, r5, r6, lr}
10001952:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
10001954:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
10001956:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
10001958:	f7ff fec2 	bl	100016e0 <clock_get_hz>
1000195c:	2800      	cmp	r0, #0
1000195e:	d02e      	beq.n	100019be <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10001960:	4b19      	ldr	r3, [pc, #100]	; (100019c8 <uart_init+0x78>)
10001962:	429c      	cmp	r4, r3
10001964:	d02c      	beq.n	100019c0 <uart_init+0x70>
10001966:	2380      	movs	r3, #128	; 0x80
10001968:	03db      	lsls	r3, r3, #15
1000196a:	4a18      	ldr	r2, [pc, #96]	; (100019cc <uart_init+0x7c>)
1000196c:	4918      	ldr	r1, [pc, #96]	; (100019d0 <uart_init+0x80>)
1000196e:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001970:	4a18      	ldr	r2, [pc, #96]	; (100019d4 <uart_init+0x84>)
10001972:	6013      	str	r3, [r2, #0]
10001974:	0018      	movs	r0, r3
10001976:	688a      	ldr	r2, [r1, #8]
10001978:	4390      	bics	r0, r2
1000197a:	d1fb      	bne.n	10001974 <uart_init+0x24>
 * \param uart UART instance
 * \return Number of UART, 0 or 1.
 */
static inline uint uart_get_index(uart_inst_t *uart) {
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    return uart == uart1 ? 1 : 0;
1000197c:	4b16      	ldr	r3, [pc, #88]	; (100019d8 <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
1000197e:	2180      	movs	r1, #128	; 0x80
10001980:	18e3      	adds	r3, r4, r3
10001982:	425a      	negs	r2, r3
10001984:	4153      	adcs	r3, r2
10001986:	4a15      	ldr	r2, [pc, #84]	; (100019dc <uart_init+0x8c>)
10001988:	005b      	lsls	r3, r3, #1
1000198a:	0049      	lsls	r1, r1, #1
1000198c:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
1000198e:	0020      	movs	r0, r4
10001990:	0029      	movs	r1, r5
10001992:	f7ff ffaf 	bl	100018f4 <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001996:	2360      	movs	r3, #96	; 0x60
10001998:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 */
static inline void uart_set_format(uart_inst_t *uart, uint data_bits, uint stop_bits, uart_parity_t parity) {
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
1000199a:	0021      	movs	r1, r4
1000199c:	4053      	eors	r3, r2
1000199e:	226e      	movs	r2, #110	; 0x6e
100019a0:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100019a2:	2280      	movs	r2, #128	; 0x80
100019a4:	312c      	adds	r1, #44	; 0x2c
100019a6:	0152      	lsls	r2, r2, #5
100019a8:	430a      	orrs	r2, r1
100019aa:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
100019ac:	4b0c      	ldr	r3, [pc, #48]	; (100019e0 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100019ae:	2210      	movs	r2, #16
100019b0:	6323      	str	r3, [r4, #48]	; 0x30
100019b2:	2380      	movs	r3, #128	; 0x80
100019b4:	019b      	lsls	r3, r3, #6
100019b6:	430b      	orrs	r3, r1
100019b8:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
100019ba:	2303      	movs	r3, #3
100019bc:	64a3      	str	r3, [r4, #72]	; 0x48
}
100019be:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
100019c0:	2380      	movs	r3, #128	; 0x80
100019c2:	041b      	lsls	r3, r3, #16
100019c4:	e7d1      	b.n	1000196a <uart_init+0x1a>
100019c6:	46c0      	nop			; (mov r8, r8)
100019c8:	40038000 	.word	0x40038000
100019cc:	4000e000 	.word	0x4000e000
100019d0:	4000c000 	.word	0x4000c000
100019d4:	4000f000 	.word	0x4000f000
100019d8:	bffc8000 	.word	0xbffc8000
100019dc:	20000228 	.word	0x20000228
100019e0:	00000301 	.word	0x00000301

100019e4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
100019e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
100019e6:	4f0f      	ldr	r7, [pc, #60]	; (10001a24 <z_sys_init_run_level+0x40>)
100019e8:	0083      	lsls	r3, r0, #2
100019ea:	59dd      	ldr	r5, [r3, r7]
100019ec:	3001      	adds	r0, #1
100019ee:	0084      	lsls	r4, r0, #2
100019f0:	593b      	ldr	r3, [r7, r4]
100019f2:	42ab      	cmp	r3, r5
100019f4:	d800      	bhi.n	100019f8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
100019f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
100019f8:	686e      	ldr	r6, [r5, #4]
		int rc = entry->init(dev);
100019fa:	682b      	ldr	r3, [r5, #0]
100019fc:	0030      	movs	r0, r6
100019fe:	4798      	blx	r3
		if (dev != NULL) {
10001a00:	2e00      	cmp	r6, #0
10001a02:	d00d      	beq.n	10001a20 <z_sys_init_run_level+0x3c>
				dev->state->init_res = rc;
10001a04:	68f3      	ldr	r3, [r6, #12]
			if (rc != 0) {
10001a06:	2800      	cmp	r0, #0
10001a08:	d006      	beq.n	10001a18 <z_sys_init_run_level+0x34>
				dev->state->init_res = rc;
10001a0a:	17c2      	asrs	r2, r0, #31
10001a0c:	1880      	adds	r0, r0, r2
10001a0e:	4050      	eors	r0, r2
10001a10:	28ff      	cmp	r0, #255	; 0xff
10001a12:	dd00      	ble.n	10001a16 <z_sys_init_run_level+0x32>
10001a14:	20ff      	movs	r0, #255	; 0xff
10001a16:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
10001a18:	2101      	movs	r1, #1
10001a1a:	785a      	ldrb	r2, [r3, #1]
10001a1c:	430a      	orrs	r2, r1
10001a1e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10001a20:	3508      	adds	r5, #8
10001a22:	e7e5      	b.n	100019f0 <z_sys_init_run_level+0xc>
10001a24:	10003314 	.word	0x10003314

10001a28 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
10001a28:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
10001a2a:	2401      	movs	r4, #1
10001a2c:	4b09      	ldr	r3, [pc, #36]	; (10001a54 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
10001a2e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
10001a30:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
10001a32:	f7ff ffd7 	bl	100019e4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
10001a36:	f000 fd5d 	bl	100024f4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
10001a3a:	2003      	movs	r0, #3
10001a3c:	f7ff ffd2 	bl	100019e4 <z_sys_init_run_level>

	z_init_static_threads();
10001a40:	f000 f8ce 	bl	10001be0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
10001a44:	f7fe fd16 	bl	10000474 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
10001a48:	4a03      	ldr	r2, [pc, #12]	; (10001a58 <bg_thread_main+0x30>)
10001a4a:	7b13      	ldrb	r3, [r2, #12]
10001a4c:	43a3      	bics	r3, r4
10001a4e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
10001a50:	bd10      	pop	{r4, pc}
10001a52:	46c0      	nop			; (mov r8, r8)
10001a54:	2000022c 	.word	0x2000022c
10001a58:	200000d8 	.word	0x200000d8

10001a5c <z_bss_zero>:
{
10001a5c:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
10001a5e:	4803      	ldr	r0, [pc, #12]	; (10001a6c <z_bss_zero+0x10>)
10001a60:	4a03      	ldr	r2, [pc, #12]	; (10001a70 <z_bss_zero+0x14>)
10001a62:	2100      	movs	r1, #0
10001a64:	1a12      	subs	r2, r2, r0
10001a66:	f001 f9fd 	bl	10002e64 <z_early_memset>
}
10001a6a:	bd10      	pop	{r4, pc}
10001a6c:	20000068 	.word	0x20000068
10001a70:	20000230 	.word	0x20000230

10001a74 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
10001a74:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
10001a76:	2670      	movs	r6, #112	; 0x70
10001a78:	4346      	muls	r6, r0
10001a7a:	4b13      	ldr	r3, [pc, #76]	; (10001ac8 <z_init_cpu+0x54>)
{
10001a7c:	0004      	movs	r4, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
10001a7e:	4913      	ldr	r1, [pc, #76]	; (10001acc <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001a80:	2518      	movs	r5, #24
	struct k_thread *thread = &z_idle_threads[i];
10001a82:	199e      	adds	r6, r3, r6
	k_thread_stack_t *stack = z_idle_stacks[i];
10001a84:	0203      	lsls	r3, r0, #8
10001a86:	1859      	adds	r1, r3, r1
	z_setup_new_thread(thread, stack,
10001a88:	2300      	movs	r3, #0
10001a8a:	2001      	movs	r0, #1
10001a8c:	2280      	movs	r2, #128	; 0x80
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001a8e:	4365      	muls	r5, r4
{
10001a90:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
10001a92:	9305      	str	r3, [sp, #20]
10001a94:	9302      	str	r3, [sp, #8]
10001a96:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001a98:	4b0d      	ldr	r3, [pc, #52]	; (10001ad0 <z_init_cpu+0x5c>)
	z_setup_new_thread(thread, stack,
10001a9a:	9004      	str	r0, [sp, #16]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001a9c:	195d      	adds	r5, r3, r5
	z_setup_new_thread(thread, stack,
10001a9e:	300e      	adds	r0, #14
10001aa0:	9003      	str	r0, [sp, #12]
10001aa2:	4b0c      	ldr	r3, [pc, #48]	; (10001ad4 <z_init_cpu+0x60>)
10001aa4:	0030      	movs	r0, r6
10001aa6:	9500      	str	r5, [sp, #0]
10001aa8:	0052      	lsls	r2, r2, #1
10001aaa:	f000 f86f 	bl	10001b8c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
10001aae:	2204      	movs	r2, #4
10001ab0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10001ab2:	4809      	ldr	r0, [pc, #36]	; (10001ad8 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
10001ab4:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10001ab6:	3401      	adds	r4, #1
10001ab8:	02e4      	lsls	r4, r4, #11
10001aba:	4393      	bics	r3, r2
10001abc:	1824      	adds	r4, r4, r0
10001abe:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
10001ac0:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
10001ac2:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
10001ac4:	b006      	add	sp, #24
10001ac6:	bd70      	pop	{r4, r5, r6, pc}
10001ac8:	20000068 	.word	0x20000068
10001acc:	20000630 	.word	0x20000630
10001ad0:	200001f4 	.word	0x200001f4
10001ad4:	10002e75 	.word	0x10002e75
10001ad8:	20000730 	.word	0x20000730

10001adc <z_cstart>:
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
10001adc:	2280      	movs	r2, #128	; 0x80
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
10001ade:	b5f0      	push	{r4, r5, r6, r7, lr}
10001ae0:	4b22      	ldr	r3, [pc, #136]	; (10001b6c <z_cstart+0x90>)
10001ae2:	0112      	lsls	r2, r2, #4
10001ae4:	b0a3      	sub	sp, #140	; 0x8c
10001ae6:	189b      	adds	r3, r3, r2
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
10001ae8:	f383 8808 	msr	MSP, r3
10001aec:	4920      	ldr	r1, [pc, #128]	; (10001b70 <z_cstart+0x94>)
10001aee:	4a21      	ldr	r2, [pc, #132]	; (10001b74 <z_cstart+0x98>)
10001af0:	6a0b      	ldr	r3, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
10001af2:	2400      	movs	r4, #0
10001af4:	401a      	ands	r2, r3
10001af6:	23e0      	movs	r3, #224	; 0xe0
10001af8:	041b      	lsls	r3, r3, #16
10001afa:	4313      	orrs	r3, r2
10001afc:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
10001afe:	f000 fd9c 	bl	1000263a <z_arm_fault_init>
	z_arm_cpu_idle_init();
10001b02:	f7ff f897 	bl	10000c34 <z_arm_cpu_idle_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
10001b06:	2202      	movs	r2, #2
#endif

	_current_cpu->current = dummy_thread;
10001b08:	4e1b      	ldr	r6, [pc, #108]	; (10001b78 <z_cstart+0x9c>)
	dummy_thread->base.user_options = K_ESSENTIAL;
10001b0a:	ab06      	add	r3, sp, #24
10001b0c:	32ff      	adds	r2, #255	; 0xff
10001b0e:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
10001b10:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
10001b12:	941f      	str	r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
10001b14:	f001 f97c 	bl	10002e10 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
10001b18:	0020      	movs	r0, r4
10001b1a:	f7ff ff63 	bl	100019e4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
10001b1e:	2001      	movs	r0, #1
10001b20:	f7ff ff60 	bl	100019e4 <z_sys_init_run_level>
	z_sched_init();
10001b24:	f000 fa90 	bl	10002048 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10001b28:	4d14      	ldr	r5, [pc, #80]	; (10001b7c <z_cstart+0xa0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10001b2a:	4b15      	ldr	r3, [pc, #84]	; (10001b80 <z_cstart+0xa4>)
	_kernel.ready_q.cache = &z_main_thread;
10001b2c:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10001b2e:	2280      	movs	r2, #128	; 0x80
10001b30:	9305      	str	r3, [sp, #20]
10001b32:	2301      	movs	r3, #1
10001b34:	4f13      	ldr	r7, [pc, #76]	; (10001b84 <z_cstart+0xa8>)
10001b36:	4914      	ldr	r1, [pc, #80]	; (10001b88 <z_cstart+0xac>)
10001b38:	9304      	str	r3, [sp, #16]
10001b3a:	00d2      	lsls	r2, r2, #3
10001b3c:	003b      	movs	r3, r7
10001b3e:	0028      	movs	r0, r5
10001b40:	9403      	str	r4, [sp, #12]
10001b42:	9402      	str	r4, [sp, #8]
10001b44:	9401      	str	r4, [sp, #4]
10001b46:	9400      	str	r4, [sp, #0]
10001b48:	f000 f820 	bl	10001b8c <z_setup_new_thread>
10001b4c:	2204      	movs	r2, #4
10001b4e:	0006      	movs	r6, r0
10001b50:	7b6b      	ldrb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
10001b52:	0028      	movs	r0, r5
10001b54:	4393      	bics	r3, r2
10001b56:	736b      	strb	r3, [r5, #13]
10001b58:	f001 f9da 	bl	10002f10 <z_ready_thread>
	z_init_cpu(0);
10001b5c:	0020      	movs	r0, r4
10001b5e:	f7ff ff89 	bl	10001a74 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
10001b62:	003a      	movs	r2, r7
10001b64:	0031      	movs	r1, r6
10001b66:	0028      	movs	r0, r5
10001b68:	f7ff f930 	bl	10000dcc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
10001b6c:	20000730 	.word	0x20000730
10001b70:	e000ed00 	.word	0xe000ed00
10001b74:	ff00ffff 	.word	0xff00ffff
10001b78:	200001f4 	.word	0x200001f4
10001b7c:	200000d8 	.word	0x200000d8
10001b80:	1000335d 	.word	0x1000335d
10001b84:	10001a29 	.word	0x10001a29
10001b88:	20000230 	.word	0x20000230

10001b8c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
10001b8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
10001b8e:	0004      	movs	r4, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10001b90:	1dd5      	adds	r5, r2, #7
10001b92:	2207      	movs	r2, #7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
10001b94:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
10001b96:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10001b98:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
10001b9a:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
10001b9c:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
10001b9e:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
10001ba0:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10001ba2:	4395      	bics	r5, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001ba4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
10001ba6:	7360      	strb	r0, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001ba8:	9202      	str	r2, [sp, #8]
10001baa:	9a09      	ldr	r2, [sp, #36]	; 0x24

	thread_base->prio = priority;
10001bac:	980b      	ldr	r0, [sp, #44]	; 0x2c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001bae:	9201      	str	r2, [sp, #4]
10001bb0:	9a08      	ldr	r2, [sp, #32]
	stack_ptr = (char *)stack + stack_obj_size;
10001bb2:	194d      	adds	r5, r1, r5
	thread_base->prio = priority;
10001bb4:	73a0      	strb	r0, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001bb6:	9200      	str	r2, [sp, #0]
10001bb8:	0020      	movs	r0, r4
10001bba:	002a      	movs	r2, r5
	thread_base->pended_on = NULL;
10001bbc:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
10001bbe:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
10001bc0:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
10001bc2:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001bc4:	f7ff f8ec 	bl	10000da0 <arch_new_thread>
	if (!_current) {
10001bc8:	4b04      	ldr	r3, [pc, #16]	; (10001bdc <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
10001bca:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
10001bcc:	689b      	ldr	r3, [r3, #8]
10001bce:	42b3      	cmp	r3, r6
10001bd0:	d000      	beq.n	10001bd4 <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
10001bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
10001bd4:	0028      	movs	r0, r5
10001bd6:	6663      	str	r3, [r4, #100]	; 0x64
10001bd8:	b004      	add	sp, #16
10001bda:	bd70      	pop	{r4, r5, r6, pc}
10001bdc:	200001f4 	.word	0x200001f4

10001be0 <z_init_static_threads>:
{
10001be0:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
10001be2:	4c20      	ldr	r4, [pc, #128]	; (10001c64 <z_init_static_threads+0x84>)
{
10001be4:	b086      	sub	sp, #24
10001be6:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
10001be8:	4d1f      	ldr	r5, [pc, #124]	; (10001c68 <z_init_static_threads+0x88>)
10001bea:	42ac      	cmp	r4, r5
10001bec:	d308      	bcc.n	10001c00 <z_init_static_threads+0x20>
	k_sched_lock();
10001bee:	f000 f8d1 	bl	10001d94 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
10001bf2:	0034      	movs	r4, r6
10001bf4:	42ac      	cmp	r4, r5
10001bf6:	d319      	bcc.n	10001c2c <z_init_static_threads+0x4c>
	k_sched_unlock();
10001bf8:	f000 fa10 	bl	1000201c <k_sched_unlock>
}
10001bfc:	b006      	add	sp, #24
10001bfe:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
10001c00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
10001c02:	9305      	str	r3, [sp, #20]
10001c04:	6a23      	ldr	r3, [r4, #32]
10001c06:	9304      	str	r3, [sp, #16]
10001c08:	69e3      	ldr	r3, [r4, #28]
10001c0a:	9303      	str	r3, [sp, #12]
10001c0c:	69a3      	ldr	r3, [r4, #24]
10001c0e:	9302      	str	r3, [sp, #8]
10001c10:	6963      	ldr	r3, [r4, #20]
10001c12:	9301      	str	r3, [sp, #4]
10001c14:	6923      	ldr	r3, [r4, #16]
10001c16:	9300      	str	r3, [sp, #0]
10001c18:	68e3      	ldr	r3, [r4, #12]
10001c1a:	68a2      	ldr	r2, [r4, #8]
10001c1c:	6861      	ldr	r1, [r4, #4]
10001c1e:	6820      	ldr	r0, [r4, #0]
10001c20:	f7ff ffb4 	bl	10001b8c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
10001c24:	6823      	ldr	r3, [r4, #0]
10001c26:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
10001c28:	3430      	adds	r4, #48	; 0x30
10001c2a:	e7dd      	b.n	10001be8 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10001c2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
10001c2e:	1c43      	adds	r3, r0, #1
10001c30:	d00f      	beq.n	10001c52 <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
10001c32:	43c3      	mvns	r3, r0
10001c34:	17db      	asrs	r3, r3, #31
10001c36:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
10001c38:	220a      	movs	r2, #10
10001c3a:	2300      	movs	r3, #0
10001c3c:	17c1      	asrs	r1, r0, #31
10001c3e:	f7fe fb7b 	bl	10000338 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
10001c42:	6826      	ldr	r6, [r4, #0]
10001c44:	000b      	movs	r3, r1
10001c46:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10001c48:	4301      	orrs	r1, r0
10001c4a:	d104      	bne.n	10001c56 <z_init_static_threads+0x76>
	z_sched_start(thread);
10001c4c:	0030      	movs	r0, r6
10001c4e:	f000 f983 	bl	10001f58 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
10001c52:	3430      	adds	r4, #48	; 0x30
10001c54:	e7ce      	b.n	10001bf4 <z_init_static_threads+0x14>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10001c56:	0030      	movs	r0, r6
10001c58:	4904      	ldr	r1, [pc, #16]	; (10001c6c <z_init_static_threads+0x8c>)
10001c5a:	3018      	adds	r0, #24
10001c5c:	f000 fac6 	bl	100021ec <z_add_timeout>
10001c60:	e7f7      	b.n	10001c52 <z_init_static_threads+0x72>
10001c62:	46c0      	nop			; (mov r8, r8)
10001c64:	20000030 	.word	0x20000030
10001c68:	20000030 	.word	0x20000030
10001c6c:	10002f29 	.word	0x10002f29

10001c70 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
10001c70:	b570      	push	{r4, r5, r6, lr}
10001c72:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10001c74:	f3ef 8510 	mrs	r5, PRIMASK
10001c78:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
10001c7a:	f001 f99d 	bl	10002fb8 <z_unpend_first_thread>

	if (thread != NULL) {
10001c7e:	2800      	cmp	r0, #0
10001c80:	d008      	beq.n	10001c94 <z_impl_k_sem_give+0x24>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
10001c82:	2300      	movs	r3, #0
10001c84:	66c3      	str	r3, [r0, #108]	; 0x6c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
10001c86:	f001 f943 	bl	10002f10 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
10001c8a:	0029      	movs	r1, r5
10001c8c:	4805      	ldr	r0, [pc, #20]	; (10001ca4 <z_impl_k_sem_give+0x34>)
10001c8e:	f000 f86b 	bl	10001d68 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
10001c92:	bd70      	pop	{r4, r5, r6, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
10001c94:	68a2      	ldr	r2, [r4, #8]
10001c96:	68e3      	ldr	r3, [r4, #12]
10001c98:	1a9b      	subs	r3, r3, r2
10001c9a:	1e59      	subs	r1, r3, #1
10001c9c:	418b      	sbcs	r3, r1
10001c9e:	189b      	adds	r3, r3, r2
10001ca0:	60a3      	str	r3, [r4, #8]
}
10001ca2:	e7f2      	b.n	10001c8a <z_impl_k_sem_give+0x1a>
10001ca4:	2000022d 	.word	0x2000022d

10001ca8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
10001ca8:	b513      	push	{r0, r1, r4, lr}
10001caa:	0001      	movs	r1, r0
10001cac:	f3ef 8010 	mrs	r0, PRIMASK
10001cb0:	b672      	cpsid	i

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
10001cb2:	688c      	ldr	r4, [r1, #8]
10001cb4:	2c00      	cmp	r4, #0
10001cb6:	d007      	beq.n	10001cc8 <z_impl_k_sem_take+0x20>
		sem->count--;
10001cb8:	3c01      	subs	r4, #1
10001cba:	608c      	str	r4, [r1, #8]
	if (key != 0U) {
10001cbc:	2800      	cmp	r0, #0
10001cbe:	d115      	bne.n	10001cec <z_impl_k_sem_take+0x44>
	__asm__ volatile(
10001cc0:	b662      	cpsie	i
10001cc2:	f3bf 8f6f 	isb	sy

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
10001cc6:	bd16      	pop	{r1, r2, r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10001cc8:	0014      	movs	r4, r2
10001cca:	431c      	orrs	r4, r3
10001ccc:	d106      	bne.n	10001cdc <z_impl_k_sem_take+0x34>
	if (key != 0U) {
10001cce:	2800      	cmp	r0, #0
10001cd0:	d10e      	bne.n	10001cf0 <z_impl_k_sem_take+0x48>
	__asm__ volatile(
10001cd2:	b662      	cpsie	i
10001cd4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
10001cd8:	3810      	subs	r0, #16
10001cda:	e7f4      	b.n	10001cc6 <z_impl_k_sem_take+0x1e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
10001cdc:	9200      	str	r2, [sp, #0]
10001cde:	9301      	str	r3, [sp, #4]
10001ce0:	000a      	movs	r2, r1
10001ce2:	0001      	movs	r1, r0
10001ce4:	4804      	ldr	r0, [pc, #16]	; (10001cf8 <z_impl_k_sem_take+0x50>)
10001ce6:	f000 f985 	bl	10001ff4 <z_pend_curr>
10001cea:	e7ec      	b.n	10001cc6 <z_impl_k_sem_take+0x1e>
		ret = 0;
10001cec:	2000      	movs	r0, #0
10001cee:	e7ea      	b.n	10001cc6 <z_impl_k_sem_take+0x1e>
		ret = -EBUSY;
10001cf0:	2010      	movs	r0, #16
10001cf2:	4240      	negs	r0, r0
	return ret;
10001cf4:	e7e7      	b.n	10001cc6 <z_impl_k_sem_take+0x1e>
10001cf6:	46c0      	nop			; (mov r8, r8)
10001cf8:	2000022d 	.word	0x2000022d

10001cfc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
10001cfc:	b570      	push	{r4, r5, r6, lr}
	int ret = slice_ticks;
10001cfe:	4d07      	ldr	r5, [pc, #28]	; (10001d1c <z_reset_time_slice+0x20>)
10001d00:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
10001d02:	2c00      	cmp	r4, #0
10001d04:	d008      	beq.n	10001d18 <z_reset_time_slice+0x1c>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
10001d06:	f7ff fbd3 	bl	100014b0 <sys_clock_elapsed>
10001d0a:	4b05      	ldr	r3, [pc, #20]	; (10001d20 <z_reset_time_slice+0x24>)
10001d0c:	1824      	adds	r4, r4, r0
		z_set_timeout_expiry(slice_time(curr), false);
10001d0e:	2100      	movs	r1, #0
10001d10:	6828      	ldr	r0, [r5, #0]
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
10001d12:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
10001d14:	f001 f978 	bl	10003008 <z_set_timeout_expiry>
	}
}
10001d18:	bd70      	pop	{r4, r5, r6, pc}
10001d1a:	46c0      	nop			; (mov r8, r8)
10001d1c:	20000220 	.word	0x20000220
10001d20:	200001f4 	.word	0x200001f4

10001d24 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
10001d24:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001d26:	f3ef 8410 	mrs	r4, PRIMASK
10001d2a:	b672      	cpsid	i
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
10001d2c:	2300      	movs	r3, #0
10001d2e:	4a0b      	ldr	r2, [pc, #44]	; (10001d5c <k_sched_time_slice_set+0x38>)
10001d30:	4d0b      	ldr	r5, [pc, #44]	; (10001d60 <k_sched_time_slice_set+0x3c>)
10001d32:	6113      	str	r3, [r2, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
10001d34:	330a      	adds	r3, #10
10001d36:	4343      	muls	r3, r0
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
10001d38:	2800      	cmp	r0, #0
10001d3a:	dc0b      	bgt.n	10001d54 <k_sched_time_slice_set+0x30>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
10001d3c:	602b      	str	r3, [r5, #0]
		}
		slice_max_prio = prio;
10001d3e:	4b09      	ldr	r3, [pc, #36]	; (10001d64 <k_sched_time_slice_set+0x40>)
		z_reset_time_slice(_current);
10001d40:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
10001d42:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
10001d44:	f7ff ffda 	bl	10001cfc <z_reset_time_slice>
	if (key != 0U) {
10001d48:	2c00      	cmp	r4, #0
10001d4a:	d102      	bne.n	10001d52 <k_sched_time_slice_set+0x2e>
	__asm__ volatile(
10001d4c:	b662      	cpsie	i
10001d4e:	f3bf 8f6f 	isb	sy
	}
}
10001d52:	bd70      	pop	{r4, r5, r6, pc}
			slice_ticks = MAX(2, slice_ticks);
10001d54:	2b02      	cmp	r3, #2
10001d56:	daf1      	bge.n	10001d3c <k_sched_time_slice_set+0x18>
10001d58:	2302      	movs	r3, #2
10001d5a:	e7ef      	b.n	10001d3c <k_sched_time_slice_set+0x18>
10001d5c:	200001f4 	.word	0x200001f4
10001d60:	20000220 	.word	0x20000220
10001d64:	2000021c 	.word	0x2000021c

10001d68 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
10001d68:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10001d6a:	2900      	cmp	r1, #0
10001d6c:	d10a      	bne.n	10001d84 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10001d6e:	f3ef 8005 	mrs	r0, IPSR
	if (resched(key.key) && need_swap()) {
10001d72:	2800      	cmp	r0, #0
10001d74:	d107      	bne.n	10001d86 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
10001d76:	4b06      	ldr	r3, [pc, #24]	; (10001d90 <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10001d78:	699a      	ldr	r2, [r3, #24]
10001d7a:	689b      	ldr	r3, [r3, #8]
10001d7c:	429a      	cmp	r2, r3
10001d7e:	d002      	beq.n	10001d86 <z_reschedule+0x1e>
	ret = arch_swap(key);
10001d80:	f7fe ffb4 	bl	10000cec <arch_swap>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
10001d84:	bd10      	pop	{r4, pc}
10001d86:	b662      	cpsie	i
10001d88:	f3bf 8f6f 	isb	sy
10001d8c:	e7fa      	b.n	10001d84 <z_reschedule+0x1c>
10001d8e:	46c0      	nop			; (mov r8, r8)
10001d90:	200001f4 	.word	0x200001f4

10001d94 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
10001d94:	f3ef 8110 	mrs	r1, PRIMASK
10001d98:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
10001d9a:	4b05      	ldr	r3, [pc, #20]	; (10001db0 <k_sched_lock+0x1c>)
10001d9c:	689a      	ldr	r2, [r3, #8]
10001d9e:	7bd3      	ldrb	r3, [r2, #15]
10001da0:	3b01      	subs	r3, #1
10001da2:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10001da4:	2900      	cmp	r1, #0
10001da6:	d102      	bne.n	10001dae <k_sched_lock+0x1a>
	__asm__ volatile(
10001da8:	b662      	cpsie	i
10001daa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
10001dae:	4770      	bx	lr
10001db0:	200001f4 	.word	0x200001f4

10001db4 <update_cache>:
{
10001db4:	b570      	push	{r4, r5, r6, lr}
10001db6:	0006      	movs	r6, r0
	return _priq_run_best(curr_cpu_runq());
10001db8:	480d      	ldr	r0, [pc, #52]	; (10001df0 <update_cache+0x3c>)
10001dba:	f001 f8a3 	bl	10002f04 <z_priq_dumb_best>
10001dbe:	4d0d      	ldr	r5, [pc, #52]	; (10001df4 <update_cache+0x40>)
10001dc0:	1e04      	subs	r4, r0, #0
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10001dc2:	d100      	bne.n	10001dc6 <update_cache+0x12>
10001dc4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
10001dc6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10001dc8:	2e00      	cmp	r6, #0
10001dca:	d10a      	bne.n	10001de2 <update_cache+0x2e>
	if (z_is_thread_prevented_from_running(_current)) {
10001dcc:	7b5a      	ldrb	r2, [r3, #13]
10001dce:	06d2      	lsls	r2, r2, #27
10001dd0:	d107      	bne.n	10001de2 <update_cache+0x2e>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
10001dd2:	69a2      	ldr	r2, [r4, #24]
10001dd4:	2a00      	cmp	r2, #0
10001dd6:	d104      	bne.n	10001de2 <update_cache+0x2e>
	if (is_preempt(_current) || is_metairq(thread)) {
10001dd8:	89da      	ldrh	r2, [r3, #14]
10001dda:	2a7f      	cmp	r2, #127	; 0x7f
10001ddc:	d901      	bls.n	10001de2 <update_cache+0x2e>
		_kernel.ready_q.cache = _current;
10001dde:	61ab      	str	r3, [r5, #24]
}
10001de0:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
10001de2:	429c      	cmp	r4, r3
10001de4:	d002      	beq.n	10001dec <update_cache+0x38>
			z_reset_time_slice(thread);
10001de6:	0020      	movs	r0, r4
10001de8:	f7ff ff88 	bl	10001cfc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
10001dec:	61ac      	str	r4, [r5, #24]
}
10001dee:	e7f7      	b.n	10001de0 <update_cache+0x2c>
10001df0:	20000210 	.word	0x20000210
10001df4:	200001f4 	.word	0x200001f4

10001df8 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
10001df8:	220d      	movs	r2, #13
{
10001dfa:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
10001dfc:	5682      	ldrsb	r2, [r0, r2]
{
10001dfe:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10001e00:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10001e02:	2a00      	cmp	r2, #0
10001e04:	da04      	bge.n	10001e10 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001e06:	227f      	movs	r2, #127	; 0x7f
10001e08:	4013      	ands	r3, r2
10001e0a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
10001e0c:	f001 f846 	bl	10002e9c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10001e10:	2380      	movs	r3, #128	; 0x80
10001e12:	7b62      	ldrb	r2, [r4, #13]
10001e14:	425b      	negs	r3, r3
10001e16:	4313      	orrs	r3, r2
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
10001e18:	4a13      	ldr	r2, [pc, #76]	; (10001e68 <move_thread_to_end_of_prio_q+0x70>)
10001e1a:	7363      	strb	r3, [r4, #13]
10001e1c:	69d3      	ldr	r3, [r2, #28]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001e1e:	4d13      	ldr	r5, [pc, #76]	; (10001e6c <move_thread_to_end_of_prio_q+0x74>)
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
10001e20:	6a10      	ldr	r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001e22:	42ab      	cmp	r3, r5
10001e24:	d01b      	beq.n	10001e5e <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10001e26:	2b00      	cmp	r3, #0
10001e28:	d019      	beq.n	10001e5e <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
10001e2a:	260e      	movs	r6, #14
10001e2c:	57a6      	ldrsb	r6, [r4, r6]
	int32_t b2 = thread_2->base.prio;
10001e2e:	210e      	movs	r1, #14
10001e30:	5659      	ldrsb	r1, [r3, r1]
	if (b1 != b2) {
10001e32:	428e      	cmp	r6, r1
10001e34:	d00e      	beq.n	10001e54 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
10001e36:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
10001e38:	2900      	cmp	r1, #0
10001e3a:	dd0b      	ble.n	10001e54 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10001e3c:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
10001e3e:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10001e40:	6061      	str	r1, [r4, #4]
	prev->next = node;
10001e42:	600c      	str	r4, [r1, #0]
	successor->prev = node;
10001e44:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
10001e46:	6890      	ldr	r0, [r2, #8]
10001e48:	1b00      	subs	r0, r0, r4
10001e4a:	4243      	negs	r3, r0
10001e4c:	4158      	adcs	r0, r3
10001e4e:	f7ff ffb1 	bl	10001db4 <update_cache>
}
10001e52:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10001e54:	4283      	cmp	r3, r0
10001e56:	d002      	beq.n	10001e5e <move_thread_to_end_of_prio_q+0x66>
10001e58:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10001e5a:	2b00      	cmp	r3, #0
10001e5c:	d1e7      	bne.n	10001e2e <move_thread_to_end_of_prio_q+0x36>
	node->next = list;
10001e5e:	6025      	str	r5, [r4, #0]
	node->prev = tail;
10001e60:	6060      	str	r0, [r4, #4]
	tail->next = node;
10001e62:	6004      	str	r4, [r0, #0]
	list->tail = node;
10001e64:	6214      	str	r4, [r2, #32]
}
10001e66:	e7ee      	b.n	10001e46 <move_thread_to_end_of_prio_q+0x4e>
10001e68:	200001f4 	.word	0x200001f4
10001e6c:	20000210 	.word	0x20000210

10001e70 <z_time_slice>:
{
10001e70:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001e72:	f3ef 8510 	mrs	r5, PRIMASK
10001e76:	b672      	cpsid	i
	if (pending_current == _current) {
10001e78:	4b17      	ldr	r3, [pc, #92]	; (10001ed8 <z_time_slice+0x68>)
10001e7a:	4a18      	ldr	r2, [pc, #96]	; (10001edc <z_time_slice+0x6c>)
10001e7c:	689c      	ldr	r4, [r3, #8]
10001e7e:	6811      	ldr	r1, [r2, #0]
10001e80:	428c      	cmp	r4, r1
10001e82:	d108      	bne.n	10001e96 <z_time_slice+0x26>
	z_reset_time_slice(curr);
10001e84:	0020      	movs	r0, r4
10001e86:	f7ff ff39 	bl	10001cfc <z_reset_time_slice>
	if (key != 0U) {
10001e8a:	2d00      	cmp	r5, #0
10001e8c:	d102      	bne.n	10001e94 <z_time_slice+0x24>
	__asm__ volatile(
10001e8e:	b662      	cpsie	i
10001e90:	f3bf 8f6f 	isb	sy
}
10001e94:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
10001e96:	2100      	movs	r1, #0
10001e98:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
10001e9a:	4a11      	ldr	r2, [pc, #68]	; (10001ee0 <z_time_slice+0x70>)
	if (slice_time(_current) && sliceable(_current)) {
10001e9c:	6812      	ldr	r2, [r2, #0]
10001e9e:	428a      	cmp	r2, r1
10001ea0:	d018      	beq.n	10001ed4 <z_time_slice+0x64>
		&& !z_is_idle_thread_object(thread);
10001ea2:	89e2      	ldrh	r2, [r4, #14]
10001ea4:	2a7f      	cmp	r2, #127	; 0x7f
10001ea6:	d815      	bhi.n	10001ed4 <z_time_slice+0x64>
		&& !z_is_thread_prevented_from_running(thread)
10001ea8:	7b62      	ldrb	r2, [r4, #13]
10001eaa:	06d2      	lsls	r2, r2, #27
10001eac:	d112      	bne.n	10001ed4 <z_time_slice+0x64>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10001eae:	210e      	movs	r1, #14
10001eb0:	4a0c      	ldr	r2, [pc, #48]	; (10001ee4 <z_time_slice+0x74>)
10001eb2:	5661      	ldrsb	r1, [r4, r1]
10001eb4:	6812      	ldr	r2, [r2, #0]
10001eb6:	4291      	cmp	r1, r2
10001eb8:	db0c      	blt.n	10001ed4 <z_time_slice+0x64>
	if (slice_time(_current) && sliceable(_current)) {
10001eba:	4a0b      	ldr	r2, [pc, #44]	; (10001ee8 <z_time_slice+0x78>)
10001ebc:	4294      	cmp	r4, r2
10001ebe:	d009      	beq.n	10001ed4 <z_time_slice+0x64>
		if (ticks >= _current_cpu->slice_ticks) {
10001ec0:	691a      	ldr	r2, [r3, #16]
10001ec2:	4282      	cmp	r2, r0
10001ec4:	dc03      	bgt.n	10001ece <z_time_slice+0x5e>
		move_thread_to_end_of_prio_q(curr);
10001ec6:	0020      	movs	r0, r4
10001ec8:	f7ff ff96 	bl	10001df8 <move_thread_to_end_of_prio_q>
10001ecc:	e7da      	b.n	10001e84 <z_time_slice+0x14>
			_current_cpu->slice_ticks -= ticks;
10001ece:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
10001ed0:	611a      	str	r2, [r3, #16]
10001ed2:	e7da      	b.n	10001e8a <z_time_slice+0x1a>
10001ed4:	2200      	movs	r2, #0
10001ed6:	e7fb      	b.n	10001ed0 <z_time_slice+0x60>
10001ed8:	200001f4 	.word	0x200001f4
10001edc:	20000218 	.word	0x20000218
10001ee0:	20000220 	.word	0x20000220
10001ee4:	2000021c 	.word	0x2000021c
10001ee8:	20000068 	.word	0x20000068

10001eec <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10001eec:	230d      	movs	r3, #13
{
10001eee:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10001ef0:	56c3      	ldrsb	r3, [r0, r3]
10001ef2:	7b42      	ldrb	r2, [r0, #13]
10001ef4:	2b00      	cmp	r3, #0
10001ef6:	db20      	blt.n	10001f3a <ready_thread+0x4e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
10001ef8:	06d3      	lsls	r3, r2, #27
10001efa:	d11e      	bne.n	10001f3a <ready_thread+0x4e>
10001efc:	6983      	ldr	r3, [r0, #24]
10001efe:	2b00      	cmp	r3, #0
10001f00:	d11b      	bne.n	10001f3a <ready_thread+0x4e>
	thread->base.thread_state |= _THREAD_QUEUED;
10001f02:	3b80      	subs	r3, #128	; 0x80
	return list->head == list;
10001f04:	4912      	ldr	r1, [pc, #72]	; (10001f50 <ready_thread+0x64>)
10001f06:	4313      	orrs	r3, r2
10001f08:	7343      	strb	r3, [r0, #13]
10001f0a:	69cb      	ldr	r3, [r1, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001f0c:	4d11      	ldr	r5, [pc, #68]	; (10001f54 <ready_thread+0x68>)
	return (node == list->tail) ? NULL : node->next;
10001f0e:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10001f10:	42ab      	cmp	r3, r5
10001f12:	d018      	beq.n	10001f46 <ready_thread+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10001f14:	2b00      	cmp	r3, #0
10001f16:	d016      	beq.n	10001f46 <ready_thread+0x5a>
	int32_t b1 = thread_1->base.prio;
10001f18:	260e      	movs	r6, #14
10001f1a:	5786      	ldrsb	r6, [r0, r6]
	int32_t b2 = thread_2->base.prio;
10001f1c:	220e      	movs	r2, #14
10001f1e:	569a      	ldrsb	r2, [r3, r2]
	if (b1 != b2) {
10001f20:	4296      	cmp	r6, r2
10001f22:	d00b      	beq.n	10001f3c <ready_thread+0x50>
		return b2 - b1;
10001f24:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
10001f26:	2a00      	cmp	r2, #0
10001f28:	dd08      	ble.n	10001f3c <ready_thread+0x50>
	sys_dnode_t *const prev = successor->prev;
10001f2a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10001f2c:	6003      	str	r3, [r0, #0]
	node->prev = prev;
10001f2e:	6042      	str	r2, [r0, #4]
	prev->next = node;
10001f30:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10001f32:	6058      	str	r0, [r3, #4]
		update_cache(0);
10001f34:	2000      	movs	r0, #0
10001f36:	f7ff ff3d 	bl	10001db4 <update_cache>
}
10001f3a:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10001f3c:	42a3      	cmp	r3, r4
10001f3e:	d002      	beq.n	10001f46 <ready_thread+0x5a>
10001f40:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10001f42:	2b00      	cmp	r3, #0
10001f44:	d1ea      	bne.n	10001f1c <ready_thread+0x30>
	node->next = list;
10001f46:	6005      	str	r5, [r0, #0]
	node->prev = tail;
10001f48:	6044      	str	r4, [r0, #4]
	tail->next = node;
10001f4a:	6020      	str	r0, [r4, #0]
	list->tail = node;
10001f4c:	6208      	str	r0, [r1, #32]
}
10001f4e:	e7f1      	b.n	10001f34 <ready_thread+0x48>
10001f50:	200001f4 	.word	0x200001f4
10001f54:	20000210 	.word	0x20000210

10001f58 <z_sched_start>:
{
10001f58:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001f5a:	f3ef 8410 	mrs	r4, PRIMASK
10001f5e:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10001f60:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10001f62:	7b43      	ldrb	r3, [r0, #13]
10001f64:	4213      	tst	r3, r2
10001f66:	d105      	bne.n	10001f74 <z_sched_start+0x1c>
	if (key != 0U) {
10001f68:	2c00      	cmp	r4, #0
10001f6a:	d102      	bne.n	10001f72 <z_sched_start+0x1a>
	__asm__ volatile(
10001f6c:	b662      	cpsie	i
10001f6e:	f3bf 8f6f 	isb	sy
}
10001f72:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10001f74:	4393      	bics	r3, r2
10001f76:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
10001f78:	f7ff ffb8 	bl	10001eec <ready_thread>
	z_reschedule(&sched_spinlock, key);
10001f7c:	0021      	movs	r1, r4
10001f7e:	4802      	ldr	r0, [pc, #8]	; (10001f88 <z_sched_start+0x30>)
10001f80:	f7ff fef2 	bl	10001d68 <z_reschedule>
10001f84:	e7f5      	b.n	10001f72 <z_sched_start+0x1a>
10001f86:	46c0      	nop			; (mov r8, r8)
10001f88:	2000022d 	.word	0x2000022d

10001f8c <unready_thread>:
	if (z_is_thread_queued(thread)) {
10001f8c:	220d      	movs	r2, #13
{
10001f8e:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
10001f90:	5682      	ldrsb	r2, [r0, r2]
{
10001f92:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10001f94:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10001f96:	2a00      	cmp	r2, #0
10001f98:	da04      	bge.n	10001fa4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10001f9a:	227f      	movs	r2, #127	; 0x7f
10001f9c:	4013      	ands	r3, r2
10001f9e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10001fa0:	f000 ff7c 	bl	10002e9c <sys_dlist_remove>
	update_cache(thread == _current);
10001fa4:	4b03      	ldr	r3, [pc, #12]	; (10001fb4 <unready_thread+0x28>)
10001fa6:	6898      	ldr	r0, [r3, #8]
10001fa8:	1b00      	subs	r0, r0, r4
10001faa:	4243      	negs	r3, r0
10001fac:	4158      	adcs	r0, r3
10001fae:	f7ff ff01 	bl	10001db4 <update_cache>
}
10001fb2:	bd10      	pop	{r4, pc}
10001fb4:	200001f4 	.word	0x200001f4

10001fb8 <pend>:
{
10001fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001fba:	0004      	movs	r4, r0
10001fbc:	0016      	movs	r6, r2
10001fbe:	001d      	movs	r5, r3
	__asm__ volatile("mrs %0, PRIMASK;"
10001fc0:	f3ef 8710 	mrs	r7, PRIMASK
10001fc4:	b672      	cpsid	i
		add_to_waitq_locked(thread, wait_q);
10001fc6:	f000 ffcb 	bl	10002f60 <add_to_waitq_locked>
	if (key != 0U) {
10001fca:	2f00      	cmp	r7, #0
10001fcc:	d102      	bne.n	10001fd4 <pend+0x1c>
	__asm__ volatile(
10001fce:	b662      	cpsie	i
10001fd0:	f3bf 8f6f 	isb	sy
	add_thread_timeout(thread, timeout);
10001fd4:	002b      	movs	r3, r5
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10001fd6:	1c72      	adds	r2, r6, #1
10001fd8:	d101      	bne.n	10001fde <pend+0x26>
10001fda:	3301      	adds	r3, #1
10001fdc:	d006      	beq.n	10001fec <pend+0x34>
10001fde:	0020      	movs	r0, r4
10001fe0:	0032      	movs	r2, r6
10001fe2:	002b      	movs	r3, r5
10001fe4:	4902      	ldr	r1, [pc, #8]	; (10001ff0 <pend+0x38>)
10001fe6:	3018      	adds	r0, #24
10001fe8:	f000 f900 	bl	100021ec <z_add_timeout>
}
10001fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001fee:	46c0      	nop			; (mov r8, r8)
10001ff0:	10002f29 	.word	0x10002f29

10001ff4 <z_pend_curr>:
{
10001ff4:	b510      	push	{r4, lr}
10001ff6:	000c      	movs	r4, r1
	pending_current = _current;
10001ff8:	4b06      	ldr	r3, [pc, #24]	; (10002014 <z_pend_curr+0x20>)
{
10001ffa:	0011      	movs	r1, r2
	pending_current = _current;
10001ffc:	6898      	ldr	r0, [r3, #8]
10001ffe:	4b06      	ldr	r3, [pc, #24]	; (10002018 <z_pend_curr+0x24>)
10002000:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
10002002:	9a02      	ldr	r2, [sp, #8]
10002004:	9b03      	ldr	r3, [sp, #12]
10002006:	f7ff ffd7 	bl	10001fb8 <pend>
1000200a:	0020      	movs	r0, r4
1000200c:	f7fe fe6e 	bl	10000cec <arch_swap>
}
10002010:	bd10      	pop	{r4, pc}
10002012:	46c0      	nop			; (mov r8, r8)
10002014:	200001f4 	.word	0x200001f4
10002018:	20000218 	.word	0x20000218

1000201c <k_sched_unlock>:
{
1000201c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000201e:	f3ef 8410 	mrs	r4, PRIMASK
10002022:	b672      	cpsid	i
		++_current->base.sched_locked;
10002024:	4b07      	ldr	r3, [pc, #28]	; (10002044 <k_sched_unlock+0x28>)
		update_cache(0);
10002026:	2000      	movs	r0, #0
		++_current->base.sched_locked;
10002028:	689a      	ldr	r2, [r3, #8]
1000202a:	7bd3      	ldrb	r3, [r2, #15]
1000202c:	3301      	adds	r3, #1
1000202e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
10002030:	f7ff fec0 	bl	10001db4 <update_cache>
	if (key != 0U) {
10002034:	2c00      	cmp	r4, #0
10002036:	d102      	bne.n	1000203e <k_sched_unlock+0x22>
	__asm__ volatile(
10002038:	b662      	cpsie	i
1000203a:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
1000203e:	f000 ff5a 	bl	10002ef6 <z_reschedule_unlocked>
}
10002042:	bd10      	pop	{r4, pc}
10002044:	200001f4 	.word	0x200001f4

10002048 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10002048:	2100      	movs	r1, #0
{
1000204a:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
1000204c:	4b03      	ldr	r3, [pc, #12]	; (1000205c <z_sched_init+0x14>)
1000204e:	4a04      	ldr	r2, [pc, #16]	; (10002060 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10002050:	0008      	movs	r0, r1
10002052:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
10002054:	621a      	str	r2, [r3, #32]
10002056:	f7ff fe65 	bl	10001d24 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
1000205a:	bd10      	pop	{r4, pc}
1000205c:	200001f4 	.word	0x200001f4
10002060:	20000210 	.word	0x20000210

10002064 <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
10002064:	4b01      	ldr	r3, [pc, #4]	; (1000206c <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
10002066:	6898      	ldr	r0, [r3, #8]
}
10002068:	4770      	bx	lr
1000206a:	46c0      	nop			; (mov r8, r8)
1000206c:	200001f4 	.word	0x200001f4

10002070 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10002070:	b570      	push	{r4, r5, r6, lr}
10002072:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10002074:	f3ef 8610 	mrs	r6, PRIMASK
10002078:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
1000207a:	2308      	movs	r3, #8
1000207c:	7b42      	ldrb	r2, [r0, #13]
1000207e:	421a      	tst	r2, r3
10002080:	d005      	beq.n	1000208e <z_thread_abort+0x1e>
	if (key != 0U) {
10002082:	2e00      	cmp	r6, #0
10002084:	d102      	bne.n	1000208c <z_thread_abort+0x1c>
	__asm__ volatile(
10002086:	b662      	cpsie	i
10002088:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
1000208c:	bd70      	pop	{r4, r5, r6, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
1000208e:	2120      	movs	r1, #32
10002090:	0010      	movs	r0, r2
10002092:	4388      	bics	r0, r1
10002094:	0001      	movs	r1, r0
10002096:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
10002098:	b248      	sxtb	r0, r1
1000209a:	2800      	cmp	r0, #0
1000209c:	db20      	blt.n	100020e0 <z_thread_abort+0x70>
		thread->base.thread_state &= ~_THREAD_ABORTING;
1000209e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
100020a0:	68a3      	ldr	r3, [r4, #8]
100020a2:	2b00      	cmp	r3, #0
100020a4:	d002      	beq.n	100020ac <z_thread_abort+0x3c>
			unpend_thread_no_timeout(thread);
100020a6:	0020      	movs	r0, r4
100020a8:	f000 ff00 	bl	10002eac <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
100020ac:	0020      	movs	r0, r4
100020ae:	3018      	adds	r0, #24
100020b0:	f000 ff97 	bl	10002fe2 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
100020b4:	0023      	movs	r3, r4
	return list->head == list;
100020b6:	6da5      	ldr	r5, [r4, #88]	; 0x58
100020b8:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
100020ba:	429d      	cmp	r5, r3
100020bc:	d001      	beq.n	100020c2 <z_thread_abort+0x52>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
100020be:	2d00      	cmp	r5, #0
100020c0:	d116      	bne.n	100020f0 <z_thread_abort+0x80>
		update_cache(1);
100020c2:	2001      	movs	r0, #1
100020c4:	f7ff fe76 	bl	10001db4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
100020c8:	4b10      	ldr	r3, [pc, #64]	; (1000210c <z_thread_abort+0x9c>)
100020ca:	689b      	ldr	r3, [r3, #8]
100020cc:	42a3      	cmp	r3, r4
100020ce:	d1d8      	bne.n	10002082 <z_thread_abort+0x12>
100020d0:	f3ef 8305 	mrs	r3, IPSR
100020d4:	2b00      	cmp	r3, #0
100020d6:	d1d4      	bne.n	10002082 <z_thread_abort+0x12>
100020d8:	0030      	movs	r0, r6
100020da:	f7fe fe07 	bl	10000cec <arch_swap>
	return ret;
100020de:	e7d0      	b.n	10002082 <z_thread_abort+0x12>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100020e0:	215f      	movs	r1, #95	; 0x5f
100020e2:	400a      	ands	r2, r1
100020e4:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
100020e6:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
100020e8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
100020ea:	f000 fed7 	bl	10002e9c <sys_dlist_remove>
}
100020ee:	e7d7      	b.n	100020a0 <z_thread_abort+0x30>
		unpend_thread_no_timeout(thread);
100020f0:	0028      	movs	r0, r5
100020f2:	f000 fedb 	bl	10002eac <unpend_thread_no_timeout>
100020f6:	0028      	movs	r0, r5
100020f8:	3018      	adds	r0, #24
100020fa:	f000 ff72 	bl	10002fe2 <z_abort_timeout>
100020fe:	2300      	movs	r3, #0
		ready_thread(thread);
10002100:	0028      	movs	r0, r5
10002102:	66eb      	str	r3, [r5, #108]	; 0x6c
10002104:	f7ff fef2 	bl	10001eec <ready_thread>
10002108:	e7d4      	b.n	100020b4 <z_thread_abort+0x44>
1000210a:	46c0      	nop			; (mov r8, r8)
1000210c:	200001f4 	.word	0x200001f4

10002110 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
10002110:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
10002112:	4806      	ldr	r0, [pc, #24]	; (1000212c <z_data_copy+0x1c>)
10002114:	4a06      	ldr	r2, [pc, #24]	; (10002130 <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10002116:	4907      	ldr	r1, [pc, #28]	; (10002134 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
10002118:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
1000211a:	f000 fea7 	bl	10002e6c <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
1000211e:	4a06      	ldr	r2, [pc, #24]	; (10002138 <z_data_copy+0x28>)
10002120:	4906      	ldr	r1, [pc, #24]	; (1000213c <z_data_copy+0x2c>)
10002122:	4807      	ldr	r0, [pc, #28]	; (10002140 <z_data_copy+0x30>)
10002124:	f000 fea2 	bl	10002e6c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
10002128:	bd10      	pop	{r4, pc}
1000212a:	46c0      	nop			; (mov r8, r8)
1000212c:	20000000 	.word	0x20000000
10002130:	20000068 	.word	0x20000068
10002134:	100033ac 	.word	0x100033ac
10002138:	00000000 	.word	0x00000000
1000213c:	100033ac 	.word	0x100033ac
10002140:	20000000 	.word	0x20000000

10002144 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10002144:	2000      	movs	r0, #0
10002146:	4b04      	ldr	r3, [pc, #16]	; (10002158 <elapsed+0x14>)
{
10002148:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
1000214a:	681b      	ldr	r3, [r3, #0]
1000214c:	4283      	cmp	r3, r0
1000214e:	d101      	bne.n	10002154 <elapsed+0x10>
10002150:	f7ff f9ae 	bl	100014b0 <sys_clock_elapsed>
}
10002154:	bd10      	pop	{r4, pc}
10002156:	46c0      	nop			; (mov r8, r8)
10002158:	20000224 	.word	0x20000224

1000215c <next_timeout>:
	return list->head == list;
1000215c:	4b12      	ldr	r3, [pc, #72]	; (100021a8 <next_timeout+0x4c>)

static int32_t next_timeout(void)
{
1000215e:	b510      	push	{r4, lr}
10002160:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002162:	429c      	cmp	r4, r3
10002164:	d100      	bne.n	10002168 <next_timeout+0xc>
10002166:	2400      	movs	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
10002168:	f7ff ffec 	bl	10002144 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
1000216c:	2c00      	cmp	r4, #0
1000216e:	d019      	beq.n	100021a4 <next_timeout+0x48>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
10002170:	0002      	movs	r2, r0
10002172:	17c3      	asrs	r3, r0, #31
10002174:	6920      	ldr	r0, [r4, #16]
10002176:	6961      	ldr	r1, [r4, #20]
10002178:	1a80      	subs	r0, r0, r2
1000217a:	4199      	sbcs	r1, r3
1000217c:	0002      	movs	r2, r0
1000217e:	1e0b      	subs	r3, r1, #0
	if ((to == NULL) ||
10002180:	dc10      	bgt.n	100021a4 <next_timeout+0x48>
10002182:	2900      	cmp	r1, #0
10002184:	d103      	bne.n	1000218e <next_timeout+0x32>
10002186:	2180      	movs	r1, #128	; 0x80
10002188:	0609      	lsls	r1, r1, #24
1000218a:	428a      	cmp	r2, r1
1000218c:	d20a      	bcs.n	100021a4 <next_timeout+0x48>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
1000218e:	43d8      	mvns	r0, r3
10002190:	17c0      	asrs	r0, r0, #31
10002192:	4010      	ands	r0, r2
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
10002194:	4b05      	ldr	r3, [pc, #20]	; (100021ac <next_timeout+0x50>)
10002196:	691b      	ldr	r3, [r3, #16]
10002198:	2b00      	cmp	r3, #0
1000219a:	d002      	beq.n	100021a2 <next_timeout+0x46>
1000219c:	4298      	cmp	r0, r3
1000219e:	dd00      	ble.n	100021a2 <next_timeout+0x46>
100021a0:	0018      	movs	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
100021a2:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
100021a4:	4802      	ldr	r0, [pc, #8]	; (100021b0 <next_timeout+0x54>)
100021a6:	e7f5      	b.n	10002194 <next_timeout+0x38>
100021a8:	20000014 	.word	0x20000014
100021ac:	200001f4 	.word	0x200001f4
100021b0:	7fffffff 	.word	0x7fffffff

100021b4 <remove_timeout>:
{
100021b4:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
100021b6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
100021b8:	2800      	cmp	r0, #0
100021ba:	d00d      	beq.n	100021d8 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
100021bc:	4a0a      	ldr	r2, [pc, #40]	; (100021e8 <remove_timeout+0x34>)
100021be:	6852      	ldr	r2, [r2, #4]
100021c0:	4290      	cmp	r0, r2
100021c2:	d009      	beq.n	100021d8 <remove_timeout+0x24>
	if (next(t) != NULL) {
100021c4:	2b00      	cmp	r3, #0
100021c6:	d007      	beq.n	100021d8 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
100021c8:	691c      	ldr	r4, [r3, #16]
100021ca:	695d      	ldr	r5, [r3, #20]
100021cc:	6901      	ldr	r1, [r0, #16]
100021ce:	6942      	ldr	r2, [r0, #20]
100021d0:	1864      	adds	r4, r4, r1
100021d2:	4155      	adcs	r5, r2
100021d4:	611c      	str	r4, [r3, #16]
100021d6:	615d      	str	r5, [r3, #20]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
100021d8:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
100021da:	6013      	str	r3, [r2, #0]
	next->prev = prev;
100021dc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
100021de:	2300      	movs	r3, #0
100021e0:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
100021e2:	6043      	str	r3, [r0, #4]
}
100021e4:	bd30      	pop	{r4, r5, pc}
100021e6:	46c0      	nop			; (mov r8, r8)
100021e8:	20000014 	.word	0x20000014

100021ec <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
100021ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100021ee:	0004      	movs	r4, r0
100021f0:	0016      	movs	r6, r2
100021f2:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
100021f4:	1c53      	adds	r3, r2, #1
100021f6:	d101      	bne.n	100021fc <z_add_timeout+0x10>
100021f8:	1c7b      	adds	r3, r7, #1
100021fa:	d067      	beq.n	100022cc <z_add_timeout+0xe0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
100021fc:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
100021fe:	f3ef 8310 	mrs	r3, PRIMASK
10002202:	b672      	cpsid	i

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
10002204:	2002      	movs	r0, #2
10002206:	4240      	negs	r0, r0
10002208:	17c1      	asrs	r1, r0, #31
1000220a:	9301      	str	r3, [sp, #4]
1000220c:	0002      	movs	r2, r0
1000220e:	000b      	movs	r3, r1
10002210:	1b92      	subs	r2, r2, r6
10002212:	41bb      	sbcs	r3, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
10002214:	2b00      	cmp	r3, #0
10002216:	db1b      	blt.n	10002250 <z_add_timeout+0x64>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
10002218:	4b2d      	ldr	r3, [pc, #180]	; (100022d0 <z_add_timeout+0xe4>)
1000221a:	681a      	ldr	r2, [r3, #0]
1000221c:	685b      	ldr	r3, [r3, #4]
1000221e:	1a80      	subs	r0, r0, r2
10002220:	4199      	sbcs	r1, r3
10002222:	1b80      	subs	r0, r0, r6
10002224:	41b9      	sbcs	r1, r7

			to->dticks = MAX(1, ticks);
10002226:	0002      	movs	r2, r0
10002228:	1e0b      	subs	r3, r1, #0
1000222a:	dc05      	bgt.n	10002238 <z_add_timeout+0x4c>
1000222c:	2900      	cmp	r1, #0
1000222e:	d101      	bne.n	10002234 <z_add_timeout+0x48>
10002230:	2800      	cmp	r0, #0
10002232:	d101      	bne.n	10002238 <z_add_timeout+0x4c>
10002234:	2201      	movs	r2, #1
10002236:	2300      	movs	r3, #0
10002238:	6122      	str	r2, [r4, #16]
1000223a:	6163      	str	r3, [r4, #20]
	return list->head == list;
1000223c:	4f25      	ldr	r7, [pc, #148]	; (100022d4 <z_add_timeout+0xe8>)
1000223e:	683d      	ldr	r5, [r7, #0]
	sys_dnode_t *const tail = list->tail;
10002240:	687e      	ldr	r6, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002242:	42bd      	cmp	r5, r7
10002244:	d118      	bne.n	10002278 <z_add_timeout+0x8c>
	node->next = list;
10002246:	6027      	str	r7, [r4, #0]
	node->prev = tail;
10002248:	6066      	str	r6, [r4, #4]
	tail->next = node;
1000224a:	6034      	str	r4, [r6, #0]
	list->tail = node;
1000224c:	607c      	str	r4, [r7, #4]
}
1000224e:	e027      	b.n	100022a0 <z_add_timeout+0xb4>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
10002250:	f7ff ff78 	bl	10002144 <elapsed>
10002254:	2201      	movs	r2, #1
10002256:	2300      	movs	r3, #0
10002258:	18b6      	adds	r6, r6, r2
1000225a:	415f      	adcs	r7, r3
1000225c:	0002      	movs	r2, r0
1000225e:	17c3      	asrs	r3, r0, #31
10002260:	18b6      	adds	r6, r6, r2
10002262:	415f      	adcs	r7, r3
10002264:	6126      	str	r6, [r4, #16]
10002266:	6167      	str	r7, [r4, #20]
10002268:	e7e8      	b.n	1000223c <z_add_timeout+0x50>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
1000226a:	1a12      	subs	r2, r2, r0
1000226c:	418b      	sbcs	r3, r1
1000226e:	6122      	str	r2, [r4, #16]
10002270:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
10002272:	42ae      	cmp	r6, r5
10002274:	d0e7      	beq.n	10002246 <z_add_timeout+0x5a>
10002276:	682d      	ldr	r5, [r5, #0]
		for (t = first(); t != NULL; t = next(t)) {
10002278:	2d00      	cmp	r5, #0
1000227a:	d0e4      	beq.n	10002246 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
1000227c:	6928      	ldr	r0, [r5, #16]
1000227e:	6969      	ldr	r1, [r5, #20]
10002280:	6922      	ldr	r2, [r4, #16]
10002282:	6963      	ldr	r3, [r4, #20]
10002284:	4299      	cmp	r1, r3
10002286:	dc02      	bgt.n	1000228e <z_add_timeout+0xa2>
10002288:	d1ef      	bne.n	1000226a <z_add_timeout+0x7e>
1000228a:	4290      	cmp	r0, r2
1000228c:	d9ed      	bls.n	1000226a <z_add_timeout+0x7e>
				t->dticks -= to->dticks;
1000228e:	1a80      	subs	r0, r0, r2
10002290:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
10002292:	686b      	ldr	r3, [r5, #4]
10002294:	6128      	str	r0, [r5, #16]
10002296:	6169      	str	r1, [r5, #20]
	node->prev = prev;
10002298:	6063      	str	r3, [r4, #4]
	node->next = successor;
1000229a:	6025      	str	r5, [r4, #0]
	prev->next = node;
1000229c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
1000229e:	606c      	str	r4, [r5, #4]
	return list->head == list;
100022a0:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100022a2:	42bb      	cmp	r3, r7
100022a4:	d00c      	beq.n	100022c0 <z_add_timeout+0xd4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
100022a6:	429c      	cmp	r4, r3
100022a8:	d10a      	bne.n	100022c0 <z_add_timeout+0xd4>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
100022aa:	f7ff ff57 	bl	1000215c <next_timeout>

			if (next_time == 0 ||
100022ae:	2800      	cmp	r0, #0
100022b0:	d003      	beq.n	100022ba <z_add_timeout+0xce>
			    _current_cpu->slice_ticks != next_time) {
100022b2:	4b09      	ldr	r3, [pc, #36]	; (100022d8 <z_add_timeout+0xec>)
			if (next_time == 0 ||
100022b4:	691b      	ldr	r3, [r3, #16]
100022b6:	4283      	cmp	r3, r0
100022b8:	d002      	beq.n	100022c0 <z_add_timeout+0xd4>
				sys_clock_set_timeout(next_time, false);
100022ba:	2100      	movs	r1, #0
100022bc:	f7ff f87a 	bl	100013b4 <sys_clock_set_timeout>
	if (key != 0U) {
100022c0:	9b01      	ldr	r3, [sp, #4]
100022c2:	2b00      	cmp	r3, #0
100022c4:	d102      	bne.n	100022cc <z_add_timeout+0xe0>
	__asm__ volatile(
100022c6:	b662      	cpsie	i
100022c8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
100022cc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100022ce:	46c0      	nop			; (mov r8, r8)
100022d0:	20000148 	.word	0x20000148
100022d4:	20000014 	.word	0x20000014
100022d8:	200001f4 	.word	0x200001f4

100022dc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
100022dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100022de:	b08b      	sub	sp, #44	; 0x2c
100022e0:	0004      	movs	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
100022e2:	f7ff fdc5 	bl	10001e70 <z_time_slice>
	__asm__ volatile("mrs %0, PRIMASK;"
100022e6:	f3ef 8310 	mrs	r3, PRIMASK
100022ea:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
100022ec:	9305      	str	r3, [sp, #20]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
100022ee:	4b32      	ldr	r3, [pc, #200]	; (100023b8 <sys_clock_announce+0xdc>)
100022f0:	601c      	str	r4, [r3, #0]
	return list->head == list;
100022f2:	4b32      	ldr	r3, [pc, #200]	; (100023bc <sys_clock_announce+0xe0>)

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
100022f4:	4832      	ldr	r0, [pc, #200]	; (100023c0 <sys_clock_announce+0xe4>)
	while (first() != NULL && first()->dticks <= announce_remaining) {
100022f6:	4d30      	ldr	r5, [pc, #192]	; (100023b8 <sys_clock_announce+0xdc>)
100022f8:	681c      	ldr	r4, [r3, #0]
		curr_tick += dt;
100022fa:	6801      	ldr	r1, [r0, #0]
100022fc:	6842      	ldr	r2, [r0, #4]
100022fe:	9106      	str	r1, [sp, #24]
10002300:	9207      	str	r2, [sp, #28]
	while (first() != NULL && first()->dticks <= announce_remaining) {
10002302:	6829      	ldr	r1, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002304:	429c      	cmp	r4, r3
10002306:	d019      	beq.n	1000233c <sys_clock_announce+0x60>
10002308:	2c00      	cmp	r4, #0
1000230a:	d017      	beq.n	1000233c <sys_clock_announce+0x60>
1000230c:	6922      	ldr	r2, [r4, #16]
1000230e:	6963      	ldr	r3, [r4, #20]
10002310:	9200      	str	r2, [sp, #0]
10002312:	9301      	str	r3, [sp, #4]
10002314:	9a01      	ldr	r2, [sp, #4]
10002316:	17cb      	asrs	r3, r1, #31
10002318:	9102      	str	r1, [sp, #8]
1000231a:	9303      	str	r3, [sp, #12]
1000231c:	429a      	cmp	r2, r3
1000231e:	dc03      	bgt.n	10002328 <sys_clock_announce+0x4c>
10002320:	d123      	bne.n	1000236a <sys_clock_announce+0x8e>
10002322:	9a00      	ldr	r2, [sp, #0]
10002324:	428a      	cmp	r2, r1
10002326:	d920      	bls.n	1000236a <sys_clock_announce+0x8e>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
10002328:	9a02      	ldr	r2, [sp, #8]
1000232a:	9b03      	ldr	r3, [sp, #12]
1000232c:	9e00      	ldr	r6, [sp, #0]
1000232e:	9f01      	ldr	r7, [sp, #4]
10002330:	1ab6      	subs	r6, r6, r2
10002332:	419f      	sbcs	r7, r3
10002334:	0032      	movs	r2, r6
10002336:	003b      	movs	r3, r7
10002338:	6122      	str	r2, [r4, #16]
1000233a:	6163      	str	r3, [r4, #20]
	}

	curr_tick += announce_remaining;
1000233c:	9e06      	ldr	r6, [sp, #24]
1000233e:	9f07      	ldr	r7, [sp, #28]
10002340:	000a      	movs	r2, r1
10002342:	17cb      	asrs	r3, r1, #31
10002344:	18b6      	adds	r6, r6, r2
10002346:	415f      	adcs	r7, r3
	announce_remaining = 0;
10002348:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
1000234a:	6006      	str	r6, [r0, #0]
1000234c:	6047      	str	r7, [r0, #4]
	announce_remaining = 0;
1000234e:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
10002350:	f7ff ff04 	bl	1000215c <next_timeout>
10002354:	0021      	movs	r1, r4
10002356:	f7ff f82d 	bl	100013b4 <sys_clock_set_timeout>
	if (key != 0U) {
1000235a:	9b05      	ldr	r3, [sp, #20]
1000235c:	42a3      	cmp	r3, r4
1000235e:	d102      	bne.n	10002366 <sys_clock_announce+0x8a>
	__asm__ volatile(
10002360:	b662      	cpsie	i
10002362:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
10002366:	b00b      	add	sp, #44	; 0x2c
10002368:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curr_tick += dt;
1000236a:	9b00      	ldr	r3, [sp, #0]
1000236c:	9e06      	ldr	r6, [sp, #24]
1000236e:	9f07      	ldr	r7, [sp, #28]
10002370:	9308      	str	r3, [sp, #32]
10002372:	17db      	asrs	r3, r3, #31
10002374:	9309      	str	r3, [sp, #36]	; 0x24
10002376:	9a08      	ldr	r2, [sp, #32]
10002378:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000237a:	18b6      	adds	r6, r6, r2
1000237c:	415f      	adcs	r7, r3
1000237e:	4b10      	ldr	r3, [pc, #64]	; (100023c0 <sys_clock_announce+0xe4>)
		remove_timeout(t);
10002380:	0020      	movs	r0, r4
		curr_tick += dt;
10002382:	601e      	str	r6, [r3, #0]
10002384:	605f      	str	r7, [r3, #4]
		announce_remaining -= dt;
10002386:	9b00      	ldr	r3, [sp, #0]
10002388:	1aca      	subs	r2, r1, r3
1000238a:	4b0b      	ldr	r3, [pc, #44]	; (100023b8 <sys_clock_announce+0xdc>)
1000238c:	601a      	str	r2, [r3, #0]
		t->dticks = 0;
1000238e:	2300      	movs	r3, #0
10002390:	2200      	movs	r2, #0
10002392:	6122      	str	r2, [r4, #16]
10002394:	6163      	str	r3, [r4, #20]
		remove_timeout(t);
10002396:	f7ff ff0d 	bl	100021b4 <remove_timeout>
	if (key != 0U) {
1000239a:	9b05      	ldr	r3, [sp, #20]
1000239c:	2b00      	cmp	r3, #0
1000239e:	d102      	bne.n	100023a6 <sys_clock_announce+0xca>
	__asm__ volatile(
100023a0:	b662      	cpsie	i
100023a2:	f3bf 8f6f 	isb	sy
		t->fn(t);
100023a6:	0020      	movs	r0, r4
100023a8:	68a3      	ldr	r3, [r4, #8]
100023aa:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
100023ac:	f3ef 8310 	mrs	r3, PRIMASK
100023b0:	b672      	cpsid	i
100023b2:	9305      	str	r3, [sp, #20]
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
100023b4:	e79d      	b.n	100022f2 <sys_clock_announce+0x16>
100023b6:	46c0      	nop			; (mov r8, r8)
100023b8:	20000224 	.word	0x20000224
100023bc:	20000014 	.word	0x20000014
100023c0:	20000148 	.word	0x20000148

100023c4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
100023c4:	b570      	push	{r4, r5, r6, lr}
100023c6:	0004      	movs	r4, r0
100023c8:	f3ef 8510 	mrs	r5, PRIMASK
100023cc:	b672      	cpsid	i

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
100023ce:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
100023d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
100023d2:	2201      	movs	r2, #1
100023d4:	2300      	movs	r3, #0
100023d6:	1812      	adds	r2, r2, r0
100023d8:	414b      	adcs	r3, r1
	k.key = arch_irq_lock();
100023da:	002e      	movs	r6, r5
100023dc:	2b00      	cmp	r3, #0
100023de:	d101      	bne.n	100023e4 <z_timer_expiration_handler+0x20>
100023e0:	2a01      	cmp	r2, #1
100023e2:	d905      	bls.n	100023f0 <z_timer_expiration_handler+0x2c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
100023e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
100023e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
100023e8:	0020      	movs	r0, r4
100023ea:	4917      	ldr	r1, [pc, #92]	; (10002448 <z_timer_expiration_handler+0x84>)
100023ec:	f7ff fefe 	bl	100021ec <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
100023f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
100023f2:	3301      	adds	r3, #1
100023f4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
100023f6:	6a23      	ldr	r3, [r4, #32]
100023f8:	2b00      	cmp	r3, #0
100023fa:	d00a      	beq.n	10002412 <z_timer_expiration_handler+0x4e>
	if (key != 0U) {
100023fc:	2d00      	cmp	r5, #0
100023fe:	d102      	bne.n	10002406 <z_timer_expiration_handler+0x42>
	__asm__ volatile(
10002400:	b662      	cpsie	i
10002402:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
10002406:	0020      	movs	r0, r4
10002408:	6a23      	ldr	r3, [r4, #32]
1000240a:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
1000240c:	f3ef 8610 	mrs	r6, PRIMASK
10002410:	b672      	cpsid	i
	return list->head == list;
10002412:	69a5      	ldr	r5, [r4, #24]
10002414:	3418      	adds	r4, #24
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002416:	42a5      	cmp	r5, r4
10002418:	d001      	beq.n	1000241e <z_timer_expiration_handler+0x5a>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
1000241a:	2d00      	cmp	r5, #0
1000241c:	d105      	bne.n	1000242a <z_timer_expiration_handler+0x66>
	if (key != 0U) {
1000241e:	2e00      	cmp	r6, #0
10002420:	d102      	bne.n	10002428 <z_timer_expiration_handler+0x64>
	__asm__ volatile(
10002422:	b662      	cpsie	i
10002424:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
10002428:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
1000242a:	0028      	movs	r0, r5
1000242c:	f000 fd49 	bl	10002ec2 <z_unpend_thread_no_timeout>
10002430:	2300      	movs	r3, #0
10002432:	66eb      	str	r3, [r5, #108]	; 0x6c
	if (key != 0U) {
10002434:	429e      	cmp	r6, r3
10002436:	d102      	bne.n	1000243e <z_timer_expiration_handler+0x7a>
	__asm__ volatile(
10002438:	b662      	cpsie	i
1000243a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
1000243e:	0028      	movs	r0, r5
10002440:	f000 fd66 	bl	10002f10 <z_ready_thread>
10002444:	e7f0      	b.n	10002428 <z_timer_expiration_handler+0x64>
10002446:	46c0      	nop			; (mov r8, r8)
10002448:	100023c5 	.word	0x100023c5

1000244c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
1000244c:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
1000244e:	0016      	movs	r6, r2
10002450:	001f      	movs	r7, r3
10002452:	0004      	movs	r4, r0
10002454:	9808      	ldr	r0, [sp, #32]
10002456:	9909      	ldr	r1, [sp, #36]	; 0x24
10002458:	9600      	str	r6, [sp, #0]
1000245a:	9701      	str	r7, [sp, #4]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
1000245c:	1c53      	adds	r3, r2, #1
1000245e:	d101      	bne.n	10002464 <z_impl_k_timer_start+0x18>
10002460:	1c7b      	adds	r3, r7, #1
10002462:	d043      	beq.n	100024ec <z_impl_k_timer_start+0xa0>
10002464:	9002      	str	r0, [sp, #8]
10002466:	9103      	str	r1, [sp, #12]
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
10002468:	1c43      	adds	r3, r0, #1
1000246a:	d101      	bne.n	10002470 <z_impl_k_timer_start+0x24>
1000246c:	1c4b      	adds	r3, r1, #1
1000246e:	d019      	beq.n	100024a4 <z_impl_k_timer_start+0x58>
10002470:	0003      	movs	r3, r0
10002472:	430b      	orrs	r3, r1
10002474:	d016      	beq.n	100024a4 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
10002476:	2202      	movs	r2, #2
10002478:	4252      	negs	r2, r2
1000247a:	17d3      	asrs	r3, r2, #31
1000247c:	1a12      	subs	r2, r2, r0
1000247e:	418b      	sbcs	r3, r1
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
10002480:	2b00      	cmp	r3, #0
10002482:	da0f      	bge.n	100024a4 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
10002484:	0002      	movs	r2, r0
10002486:	1e0b      	subs	r3, r1, #0
10002488:	db03      	blt.n	10002492 <z_impl_k_timer_start+0x46>
1000248a:	2900      	cmp	r1, #0
1000248c:	d103      	bne.n	10002496 <z_impl_k_timer_start+0x4a>
1000248e:	2802      	cmp	r0, #2
10002490:	d201      	bcs.n	10002496 <z_impl_k_timer_start+0x4a>
10002492:	2202      	movs	r2, #2
10002494:	2300      	movs	r3, #0
10002496:	2001      	movs	r0, #1
10002498:	4240      	negs	r0, r0
1000249a:	17c1      	asrs	r1, r0, #31
1000249c:	1812      	adds	r2, r2, r0
1000249e:	414b      	adcs	r3, r1
100024a0:	9202      	str	r2, [sp, #8]
100024a2:	9303      	str	r3, [sp, #12]
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
100024a4:	2202      	movs	r2, #2
100024a6:	4252      	negs	r2, r2
100024a8:	17d3      	asrs	r3, r2, #31
100024aa:	1b92      	subs	r2, r2, r6
100024ac:	41bb      	sbcs	r3, r7
100024ae:	2b00      	cmp	r3, #0
100024b0:	da0d      	bge.n	100024ce <z_impl_k_timer_start+0x82>
		duration.ticks = MAX(duration.ticks - 1, 0);
100024b2:	2f00      	cmp	r7, #0
100024b4:	dc04      	bgt.n	100024c0 <z_impl_k_timer_start+0x74>
100024b6:	d101      	bne.n	100024bc <z_impl_k_timer_start+0x70>
100024b8:	2e00      	cmp	r6, #0
100024ba:	d101      	bne.n	100024c0 <z_impl_k_timer_start+0x74>
100024bc:	2601      	movs	r6, #1
100024be:	2700      	movs	r7, #0
100024c0:	2201      	movs	r2, #1
100024c2:	4252      	negs	r2, r2
100024c4:	17d3      	asrs	r3, r2, #31
100024c6:	18b6      	adds	r6, r6, r2
100024c8:	415f      	adcs	r7, r3
100024ca:	9600      	str	r6, [sp, #0]
100024cc:	9701      	str	r7, [sp, #4]
	}

	(void)z_abort_timeout(&timer->timeout);
100024ce:	0020      	movs	r0, r4
100024d0:	f000 fd87 	bl	10002fe2 <z_abort_timeout>
	timer->period = period;
100024d4:	9a02      	ldr	r2, [sp, #8]
100024d6:	9b03      	ldr	r3, [sp, #12]
100024d8:	62a2      	str	r2, [r4, #40]	; 0x28
100024da:	62e3      	str	r3, [r4, #44]	; 0x2c
	timer->status = 0U;
100024dc:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
100024de:	0020      	movs	r0, r4
	timer->status = 0U;
100024e0:	6323      	str	r3, [r4, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
100024e2:	4903      	ldr	r1, [pc, #12]	; (100024f0 <z_impl_k_timer_start+0xa4>)
100024e4:	9a00      	ldr	r2, [sp, #0]
100024e6:	9b01      	ldr	r3, [sp, #4]
100024e8:	f7ff fe80 	bl	100021ec <z_add_timeout>
		     duration);
}
100024ec:	bddf      	pop	{r0, r1, r2, r3, r4, r6, r7, pc}
100024ee:	46c0      	nop			; (mov r8, r8)
100024f0:	100023c5 	.word	0x100023c5

100024f4 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
100024f4:	b510      	push	{r4, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
100024f6:	4a03      	ldr	r2, [pc, #12]	; (10002504 <boot_banner+0x10>)
100024f8:	4903      	ldr	r1, [pc, #12]	; (10002508 <boot_banner+0x14>)
100024fa:	4804      	ldr	r0, [pc, #16]	; (1000250c <boot_banner+0x18>)
100024fc:	f000 f80f 	bl	1000251e <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
10002500:	bd10      	pop	{r4, pc}
10002502:	46c0      	nop			; (mov r8, r8)
10002504:	10003336 	.word	0x10003336
10002508:	10003362 	.word	0x10003362
1000250c:	10003383 	.word	0x10003383

10002510 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
10002510:	4770      	bx	lr

10002512 <timer_handler>:
void timer_handler(struct k_timer *timer_id) {
10002512:	b510      	push	{r4, lr}
	gpio_pin_toggle_dt(&led);
10002514:	f7fd ffa4 	bl	10000460 <gpio_pin_toggle_dt.constprop.0.isra.0>
}
10002518:	bd10      	pop	{r4, pc}

1000251a <arch_printk_char_out>:
}
1000251a:	2000      	movs	r0, #0
1000251c:	4770      	bx	lr

1000251e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
1000251e:	b40f      	push	{r0, r1, r2, r3}
10002520:	b507      	push	{r0, r1, r2, lr}
10002522:	a904      	add	r1, sp, #16
10002524:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
10002526:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
10002528:	f7fd ffde 	bl	100004e8 <vprintk>

	va_end(ap);
}
1000252c:	b003      	add	sp, #12
1000252e:	bc08      	pop	{r3}
10002530:	b004      	add	sp, #16
10002532:	4718      	bx	r3

10002534 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
10002534:	b510      	push	{r4, lr}
10002536:	0004      	movs	r4, r0
10002538:	0008      	movs	r0, r1
1000253a:	0011      	movs	r1, r2
1000253c:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
1000253e:	47a0      	blx	r4
	return z_impl_z_current_get();
10002540:	f7ff fd90 	bl	10002064 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
10002544:	f7fe fcea 	bl	10000f1c <z_impl_k_thread_abort>

10002548 <encode_uint>:
{
10002548:	b5f0      	push	{r4, r5, r6, r7, lr}
1000254a:	b085      	sub	sp, #20
1000254c:	9001      	str	r0, [sp, #4]
1000254e:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
10002550:	78d3      	ldrb	r3, [r2, #3]
{
10002552:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
10002554:	001a      	movs	r2, r3
10002556:	3a41      	subs	r2, #65	; 0x41
10002558:	000f      	movs	r7, r1
	switch (specifier) {
1000255a:	2408      	movs	r4, #8
1000255c:	9202      	str	r2, [sp, #8]
1000255e:	2b6f      	cmp	r3, #111	; 0x6f
10002560:	d00a      	beq.n	10002578 <encode_uint+0x30>
10002562:	d804      	bhi.n	1000256e <encode_uint+0x26>
		return 10;
10002564:	3402      	adds	r4, #2
	switch (specifier) {
10002566:	2b58      	cmp	r3, #88	; 0x58
10002568:	d106      	bne.n	10002578 <encode_uint+0x30>
		return 16;
1000256a:	3406      	adds	r4, #6
1000256c:	e004      	b.n	10002578 <encode_uint+0x30>
	switch (specifier) {
1000256e:	2208      	movs	r2, #8
		return 10;
10002570:	240a      	movs	r4, #10
	switch (specifier) {
10002572:	4393      	bics	r3, r2
10002574:	2b70      	cmp	r3, #112	; 0x70
10002576:	d0f8      	beq.n	1000256a <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
10002578:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
1000257a:	0022      	movs	r2, r4
1000257c:	2300      	movs	r3, #0
1000257e:	0039      	movs	r1, r7
10002580:	9801      	ldr	r0, [sp, #4]
10002582:	f7fd fe95 	bl	100002b0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10002586:	0013      	movs	r3, r2
10002588:	468c      	mov	ip, r1
1000258a:	b2d2      	uxtb	r2, r2
1000258c:	2b09      	cmp	r3, #9
1000258e:	d819      	bhi.n	100025c4 <encode_uint+0x7c>
10002590:	0013      	movs	r3, r2
10002592:	3330      	adds	r3, #48	; 0x30
10002594:	b2db      	uxtb	r3, r3
10002596:	3e01      	subs	r6, #1
10002598:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
1000259a:	2300      	movs	r3, #0
1000259c:	42bb      	cmp	r3, r7
1000259e:	d102      	bne.n	100025a6 <encode_uint+0x5e>
100025a0:	9b01      	ldr	r3, [sp, #4]
100025a2:	429c      	cmp	r4, r3
100025a4:	d802      	bhi.n	100025ac <encode_uint+0x64>
100025a6:	9b03      	ldr	r3, [sp, #12]
100025a8:	429e      	cmp	r6, r3
100025aa:	d808      	bhi.n	100025be <encode_uint+0x76>
	if (conv->flag_hash) {
100025ac:	782b      	ldrb	r3, [r5, #0]
100025ae:	069b      	lsls	r3, r3, #26
100025b0:	d513      	bpl.n	100025da <encode_uint+0x92>
		if (radix == 8) {
100025b2:	2c08      	cmp	r4, #8
100025b4:	d10f      	bne.n	100025d6 <encode_uint+0x8e>
			conv->altform_0c = true;
100025b6:	78ab      	ldrb	r3, [r5, #2]
100025b8:	431c      	orrs	r4, r3
100025ba:	70ac      	strb	r4, [r5, #2]
	return bp;
100025bc:	e00d      	b.n	100025da <encode_uint+0x92>
		value /= radix;
100025be:	4667      	mov	r7, ip
100025c0:	9001      	str	r0, [sp, #4]
100025c2:	e7da      	b.n	1000257a <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
100025c4:	0013      	movs	r3, r2
100025c6:	9902      	ldr	r1, [sp, #8]
100025c8:	3357      	adds	r3, #87	; 0x57
100025ca:	b2db      	uxtb	r3, r3
100025cc:	2919      	cmp	r1, #25
100025ce:	d8e2      	bhi.n	10002596 <encode_uint+0x4e>
100025d0:	3237      	adds	r2, #55	; 0x37
100025d2:	b2d3      	uxtb	r3, r2
100025d4:	e7df      	b.n	10002596 <encode_uint+0x4e>
		} else if (radix == 16) {
100025d6:	2c10      	cmp	r4, #16
100025d8:	d0ed      	beq.n	100025b6 <encode_uint+0x6e>
}
100025da:	0030      	movs	r0, r6
100025dc:	b005      	add	sp, #20
100025de:	bdf0      	pop	{r4, r5, r6, r7, pc}

100025e0 <outs>:
{
100025e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100025e2:	000f      	movs	r7, r1
100025e4:	0015      	movs	r5, r2
100025e6:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
100025e8:	0014      	movs	r4, r2
{
100025ea:	9001      	str	r0, [sp, #4]
100025ec:	1b60      	subs	r0, r4, r5
	while ((sp < ep) || ((ep == NULL) && *sp)) {
100025ee:	42a6      	cmp	r6, r4
100025f0:	d804      	bhi.n	100025fc <outs+0x1c>
100025f2:	2e00      	cmp	r6, #0
100025f4:	d109      	bne.n	1000260a <outs+0x2a>
100025f6:	7823      	ldrb	r3, [r4, #0]
100025f8:	2b00      	cmp	r3, #0
100025fa:	d006      	beq.n	1000260a <outs+0x2a>
		int rc = out((int)*sp++, ctx);
100025fc:	7820      	ldrb	r0, [r4, #0]
100025fe:	0039      	movs	r1, r7
10002600:	9b01      	ldr	r3, [sp, #4]
10002602:	4798      	blx	r3
		if (rc < 0) {
10002604:	3401      	adds	r4, #1
10002606:	2800      	cmp	r0, #0
10002608:	daf0      	bge.n	100025ec <outs+0xc>
}
1000260a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000260c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
1000260c:	4770      	bx	lr

1000260e <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
1000260e:	b510      	push	{r4, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
10002610:	f000 fc12 	bl	10002e38 <z_fatal_error>
}
10002614:	bd10      	pop	{r4, pc}

10002616 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
10002616:	b510      	push	{r4, lr}
10002618:	0001      	movs	r1, r0
	z_fatal_error(reason, esf);
1000261a:	6800      	ldr	r0, [r0, #0]
1000261c:	f000 fc0c 	bl	10002e38 <z_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
10002620:	bd10      	pop	{r4, pc}

10002622 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
10002622:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
10002624:	2100      	movs	r1, #0
10002626:	2001      	movs	r0, #1
10002628:	f7ff fff1 	bl	1000260e <z_arm_fatal_error>
}
1000262c:	bd10      	pop	{r4, pc}

1000262e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
1000262e:	b510      	push	{r4, lr}
	handler();
10002630:	f7fe fb44 	bl	10000cbc <z_SysNmiOnReset>
	z_arm_int_exit();
10002634:	f7fe fbee 	bl	10000e14 <z_arm_exc_exit>
}
10002638:	bd10      	pop	{r4, pc}

1000263a <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
1000263a:	4770      	bx	lr

1000263c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
1000263c:	0003      	movs	r3, r0
	size_t n = 0;
1000263e:	2000      	movs	r0, #0

	while (*s != '\0') {
10002640:	5c1a      	ldrb	r2, [r3, r0]
10002642:	2a00      	cmp	r2, #0
10002644:	d100      	bne.n	10002648 <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
10002646:	4770      	bx	lr
		n++;
10002648:	3001      	adds	r0, #1
1000264a:	e7f9      	b.n	10002640 <strlen+0x4>

1000264c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
1000264c:	0003      	movs	r3, r0
	size_t n = 0;
1000264e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
10002650:	5c1a      	ldrb	r2, [r3, r0]
10002652:	2a00      	cmp	r2, #0
10002654:	d001      	beq.n	1000265a <strnlen+0xe>
10002656:	4288      	cmp	r0, r1
10002658:	d100      	bne.n	1000265c <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
1000265a:	4770      	bx	lr
		n++;
1000265c:	3001      	adds	r0, #1
1000265e:	e7f7      	b.n	10002650 <strnlen+0x4>

10002660 <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
10002660:	2300      	movs	r3, #0
{
10002662:	b510      	push	{r4, lr}
	while (n > 0) {
10002664:	429a      	cmp	r2, r3
10002666:	d100      	bne.n	1000266a <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
10002668:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
1000266a:	5ccc      	ldrb	r4, [r1, r3]
1000266c:	54c4      	strb	r4, [r0, r3]
		n--;
1000266e:	3301      	adds	r3, #1
10002670:	e7f8      	b.n	10002664 <memcpy+0x4>

10002672 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
10002672:	0003      	movs	r3, r0
10002674:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
10002676:	1882      	adds	r2, r0, r2
10002678:	4293      	cmp	r3, r2
1000267a:	d100      	bne.n	1000267e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
1000267c:	4770      	bx	lr
		*(d_byte++) = c_byte;
1000267e:	7019      	strb	r1, [r3, #0]
		n--;
10002680:	3301      	adds	r3, #1
10002682:	e7f9      	b.n	10002678 <memset+0x6>

10002684 <_stdout_hook_default>:
	return EOF;
10002684:	2001      	movs	r0, #1
}
10002686:	4240      	negs	r0, r0
10002688:	4770      	bx	lr

1000268a <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
1000268a:	23d0      	movs	r3, #208	; 0xd0
1000268c:	061b      	lsls	r3, r3, #24
1000268e:	685b      	ldr	r3, [r3, #4]
}
10002690:	2000      	movs	r0, #0
	*value = gpio_get_all();
10002692:	600b      	str	r3, [r1, #0]
}
10002694:	4770      	bx	lr

10002696 <gpio_rpi_port_set_masked_raw>:
 * corresponding bit in \p value, leaving other pins unchanged.
 * Since this uses the TOGL alias, it is concurrency-safe with e.g. an IRQ
 * bashing different pins from the same core.
 */
static inline void gpio_put_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10002696:	23d0      	movs	r3, #208	; 0xd0
10002698:	061b      	lsls	r3, r3, #24
1000269a:	6918      	ldr	r0, [r3, #16]
1000269c:	4042      	eors	r2, r0
1000269e:	4011      	ands	r1, r2
}
100026a0:	2000      	movs	r0, #0
100026a2:	61d9      	str	r1, [r3, #28]
100026a4:	4770      	bx	lr

100026a6 <gpio_rpi_port_set_bits_raw>:
    sio_hw->gpio_set = mask;
100026a6:	23d0      	movs	r3, #208	; 0xd0
100026a8:	061b      	lsls	r3, r3, #24
}
100026aa:	2000      	movs	r0, #0
100026ac:	6159      	str	r1, [r3, #20]
100026ae:	4770      	bx	lr

100026b0 <gpio_rpi_port_clear_bits_raw>:
    sio_hw->gpio_clr = mask;
100026b0:	23d0      	movs	r3, #208	; 0xd0
100026b2:	061b      	lsls	r3, r3, #24
}
100026b4:	2000      	movs	r0, #0
100026b6:	6199      	str	r1, [r3, #24]
100026b8:	4770      	bx	lr

100026ba <gpio_rpi_port_toggle_bits>:
    sio_hw->gpio_togl = mask;
100026ba:	23d0      	movs	r3, #208	; 0xd0
100026bc:	061b      	lsls	r3, r3, #24
}
100026be:	2000      	movs	r0, #0
100026c0:	61d9      	str	r1, [r3, #28]
100026c2:	4770      	bx	lr

100026c4 <gpio_rpi_manage_callback>:
	struct gpio_rpi_data *data = dev->data;
100026c4:	6903      	ldr	r3, [r0, #16]
{
100026c6:	b530      	push	{r4, r5, lr}
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
100026c8:	6858      	ldr	r0, [r3, #4]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100026ca:	2400      	movs	r4, #0
	if (!sys_slist_is_empty(callbacks)) {
100026cc:	2800      	cmp	r0, #0
100026ce:	d104      	bne.n	100026da <gpio_rpi_manage_callback+0x16>
	if (set) {
100026d0:	2a00      	cmp	r2, #0
100026d2:	d11a      	bne.n	1000270a <gpio_rpi_manage_callback+0x46>
	return 0;
100026d4:	2000      	movs	r0, #0
}
100026d6:	bd30      	pop	{r4, r5, pc}
100026d8:	0028      	movs	r0, r5
100026da:	4281      	cmp	r1, r0
100026dc:	d10f      	bne.n	100026fe <gpio_rpi_manage_callback+0x3a>
	return node->next;
100026de:	6808      	ldr	r0, [r1, #0]
	return list->tail;
100026e0:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
100026e2:	2c00      	cmp	r4, #0
100026e4:	d106      	bne.n	100026f4 <gpio_rpi_manage_callback+0x30>
	list->head = node;
100026e6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
100026e8:	428d      	cmp	r5, r1
100026ea:	d100      	bne.n	100026ee <gpio_rpi_manage_callback+0x2a>
	list->tail = node;
100026ec:	6098      	str	r0, [r3, #8]
	parent->next = child;
100026ee:	2000      	movs	r0, #0
100026f0:	6008      	str	r0, [r1, #0]
100026f2:	e7ed      	b.n	100026d0 <gpio_rpi_manage_callback+0xc>
100026f4:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
100026f6:	428d      	cmp	r5, r1
100026f8:	d1f9      	bne.n	100026ee <gpio_rpi_manage_callback+0x2a>
	list->tail = node;
100026fa:	609c      	str	r4, [r3, #8]
}
100026fc:	e7f7      	b.n	100026ee <gpio_rpi_manage_callback+0x2a>
	return node->next;
100026fe:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10002700:	0004      	movs	r4, r0
10002702:	2d00      	cmp	r5, #0
10002704:	d1e8      	bne.n	100026d8 <gpio_rpi_manage_callback+0x14>
			if (!set) {
10002706:	2a00      	cmp	r2, #0
10002708:	d007      	beq.n	1000271a <gpio_rpi_manage_callback+0x56>
	parent->next = child;
1000270a:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
1000270c:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
1000270e:	600a      	str	r2, [r1, #0]
	list->head = node;
10002710:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
10002712:	2800      	cmp	r0, #0
10002714:	d1de      	bne.n	100026d4 <gpio_rpi_manage_callback+0x10>
	list->tail = node;
10002716:	6099      	str	r1, [r3, #8]
}
10002718:	e7dd      	b.n	100026d6 <gpio_rpi_manage_callback+0x12>
				return -EINVAL;
1000271a:	2016      	movs	r0, #22
1000271c:	4240      	negs	r0, r0
	return gpio_manage_callback(&data->callbacks, callback, set);
1000271e:	e7da      	b.n	100026d6 <gpio_rpi_manage_callback+0x12>

10002720 <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
10002720:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
10002722:	6843      	ldr	r3, [r0, #4]
10002724:	685b      	ldr	r3, [r3, #4]
10002726:	4798      	blx	r3
	return 0;
}
10002728:	2000      	movs	r0, #0
1000272a:	bd10      	pop	{r4, pc}

1000272c <gpio_rpi_pin_interrupt_configure>:
{
1000272c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000272e:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
10002730:	6907      	ldr	r7, [r0, #16]
{
10002732:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10002734:	210f      	movs	r1, #15
10002736:	2200      	movs	r2, #0
10002738:	0028      	movs	r0, r5
{
1000273a:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
1000273c:	f7ff f8aa 	bl	10001894 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10002740:	2301      	movs	r3, #1
10002742:	40ab      	lsls	r3, r5
10002744:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
10002746:	2380      	movs	r3, #128	; 0x80
10002748:	039b      	lsls	r3, r3, #14
1000274a:	429e      	cmp	r6, r3
1000274c:	d01e      	beq.n	1000278c <gpio_rpi_pin_interrupt_configure+0x60>
			if (trig & GPIO_INT_LOW_0) {
1000274e:	2180      	movs	r1, #128	; 0x80
			if (trig & GPIO_INT_HIGH_1) {
10002750:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
10002752:	0489      	lsls	r1, r1, #18
			if (trig & GPIO_INT_HIGH_1) {
10002754:	04db      	lsls	r3, r3, #19
			if (trig & GPIO_INT_LOW_0) {
10002756:	4021      	ands	r1, r4
			if (trig & GPIO_INT_HIGH_1) {
10002758:	401c      	ands	r4, r3
		if (mode & GPIO_INT_EDGE) {
1000275a:	01f3      	lsls	r3, r6, #7
1000275c:	d50f      	bpl.n	1000277e <gpio_rpi_pin_interrupt_configure+0x52>
			if (trig & GPIO_INT_LOW_0) {
1000275e:	2900      	cmp	r1, #0
10002760:	d000      	beq.n	10002764 <gpio_rpi_pin_interrupt_configure+0x38>
				events |= GPIO_IRQ_EDGE_FALL;
10002762:	2104      	movs	r1, #4
				events |= GPIO_IRQ_EDGE_RISE;
10002764:	2308      	movs	r3, #8
			if (trig & GPIO_INT_HIGH_1) {
10002766:	2c00      	cmp	r4, #0
10002768:	d10e      	bne.n	10002788 <gpio_rpi_pin_interrupt_configure+0x5c>
		gpio_set_irq_enabled(pin, events, true);
1000276a:	2201      	movs	r2, #1
1000276c:	0028      	movs	r0, r5
1000276e:	f7ff f891 	bl	10001894 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10002772:	9b01      	ldr	r3, [sp, #4]
10002774:	68fa      	ldr	r2, [r7, #12]
10002776:	4313      	orrs	r3, r2
}
10002778:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
1000277a:	60fb      	str	r3, [r7, #12]
}
1000277c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				events |= GPIO_IRQ_LEVEL_LOW;
1000277e:	1e4b      	subs	r3, r1, #1
10002780:	4199      	sbcs	r1, r3
			if (trig & GPIO_INT_HIGH_1) {
10002782:	2c00      	cmp	r4, #0
10002784:	d0f1      	beq.n	1000276a <gpio_rpi_pin_interrupt_configure+0x3e>
				events |= GPIO_IRQ_LEVEL_HIGH;
10002786:	2302      	movs	r3, #2
10002788:	4319      	orrs	r1, r3
1000278a:	e7ee      	b.n	1000276a <gpio_rpi_pin_interrupt_configure+0x3e>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
1000278c:	68fb      	ldr	r3, [r7, #12]
1000278e:	9a01      	ldr	r2, [sp, #4]
10002790:	4393      	bics	r3, r2
10002792:	e7f1      	b.n	10002778 <gpio_rpi_pin_interrupt_configure+0x4c>

10002794 <gpio_rpi_configure>:
{
10002794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flags & GPIO_SINGLE_ENDED) {
10002796:	2302      	movs	r3, #2
{
10002798:	000e      	movs	r6, r1
1000279a:	0014      	movs	r4, r2
	if (flags & GPIO_SINGLE_ENDED) {
1000279c:	421a      	tst	r2, r3
1000279e:	d129      	bne.n	100027f4 <gpio_rpi_configure+0x60>
	gpio_set_function(pin, GPIO_FUNC_SIO);
100027a0:	2105      	movs	r1, #5
100027a2:	0030      	movs	r0, r6
100027a4:	f7ff f812 	bl	100017cc <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
100027a8:	2380      	movs	r3, #128	; 0x80
100027aa:	029b      	lsls	r3, r3, #10
100027ac:	421c      	tst	r4, r3
100027ae:	d011      	beq.n	100027d4 <gpio_rpi_configure+0x40>
 *
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
100027b0:	2301      	movs	r3, #1
    sio_hw->gpio_oe_set = mask;
100027b2:	22d0      	movs	r2, #208	; 0xd0
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
100027b4:	2180      	movs	r1, #128	; 0x80
    uint32_t mask = 1ul << gpio;
100027b6:	40b3      	lsls	r3, r6
100027b8:	0020      	movs	r0, r4
    sio_hw->gpio_oe_set = mask;
100027ba:	0612      	lsls	r2, r2, #24
100027bc:	0309      	lsls	r1, r1, #12
100027be:	6253      	str	r3, [r2, #36]	; 0x24
100027c0:	4008      	ands	r0, r1
100027c2:	420c      	tst	r4, r1
100027c4:	d002      	beq.n	100027cc <gpio_rpi_configure+0x38>
    sio_hw->gpio_set = mask;
100027c6:	6153      	str	r3, [r2, #20]
	return 0;
100027c8:	2000      	movs	r0, #0
}
100027ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
100027cc:	0361      	lsls	r1, r4, #13
100027ce:	d5fb      	bpl.n	100027c8 <gpio_rpi_configure+0x34>
    sio_hw->gpio_clr = mask;
100027d0:	6193      	str	r3, [r2, #24]
}
100027d2:	e7fa      	b.n	100027ca <gpio_rpi_configure+0x36>
	} else if (flags & GPIO_INPUT) {
100027d4:	03e3      	lsls	r3, r4, #15
100027d6:	d5f7      	bpl.n	100027c8 <gpio_rpi_configure+0x34>
    uint32_t mask = 1ul << gpio;
100027d8:	2301      	movs	r3, #1
100027da:	0019      	movs	r1, r3
    sio_hw->gpio_oe_clr = mask;
100027dc:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
100027de:	40b1      	lsls	r1, r6
    sio_hw->gpio_oe_clr = mask;
100027e0:	0612      	lsls	r2, r2, #24
100027e2:	6291      	str	r1, [r2, #40]	; 0x28
		gpio_set_pulls(pin,
100027e4:	0962      	lsrs	r2, r4, #5
100027e6:	0921      	lsrs	r1, r4, #4
100027e8:	0030      	movs	r0, r6
100027ea:	401a      	ands	r2, r3
100027ec:	4019      	ands	r1, r3
100027ee:	f7ff f803 	bl	100017f8 <gpio_set_pulls>
100027f2:	e7e9      	b.n	100027c8 <gpio_rpi_configure+0x34>
		return -ENOTSUP;
100027f4:	2086      	movs	r0, #134	; 0x86
100027f6:	4240      	negs	r0, r0
100027f8:	e7e7      	b.n	100027ca <gpio_rpi_configure+0x36>

100027fa <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
100027fa:	b510      	push	{r4, lr}
100027fc:	2200      	movs	r2, #0
100027fe:	2103      	movs	r1, #3
10002800:	200d      	movs	r0, #13
10002802:	f7fe fa31 	bl	10000c68 <z_arm_irq_priority_set>
10002806:	200d      	movs	r0, #13
10002808:	f7fe fa22 	bl	10000c50 <arch_irq_enable>
1000280c:	bd10      	pop	{r4, pc}

1000280e <i2c_dw_runtime_configure>:
{
1000280e:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (I2C_SPEED_GET(dw->app_config)) {
10002810:	2407      	movs	r4, #7
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002812:	6842      	ldr	r2, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10002814:	6903      	ldr	r3, [r0, #16]
	switch (I2C_SPEED_GET(dw->app_config)) {
10002816:	084d      	lsrs	r5, r1, #1
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002818:	6812      	ldr	r2, [r2, #0]
	switch (I2C_SPEED_GET(dw->app_config)) {
1000281a:	402c      	ands	r4, r5
	dw->app_config = config;
1000281c:	6119      	str	r1, [r3, #16]
	switch (I2C_SPEED_GET(dw->app_config)) {
1000281e:	0768      	lsls	r0, r5, #29
10002820:	d409      	bmi.n	10002836 <i2c_dw_runtime_configure+0x28>
10002822:	2606      	movs	r6, #6
10002824:	0028      	movs	r0, r5
10002826:	4030      	ands	r0, r6
10002828:	4235      	tst	r5, r6
1000282a:	d129      	bne.n	10002880 <i2c_dw_runtime_configure+0x72>
1000282c:	2c01      	cmp	r4, #1
1000282e:	d00c      	beq.n	1000284a <i2c_dw_runtime_configure+0x3c>
			rc = -EINVAL;
10002830:	2016      	movs	r0, #22
10002832:	4240      	negs	r0, r0
10002834:	e01f      	b.n	10002876 <i2c_dw_runtime_configure+0x68>
	switch (I2C_SPEED_GET(dw->app_config)) {
10002836:	2c04      	cmp	r4, #4
10002838:	d1fa      	bne.n	10002830 <i2c_dw_runtime_configure+0x22>
		if (dw->support_hs_mode) {
1000283a:	0018      	movs	r0, r3
1000283c:	3008      	adds	r0, #8
1000283e:	7fc0      	ldrb	r0, [r0, #31]
10002840:	2800      	cmp	r0, #0
10002842:	d0f5      	beq.n	10002830 <i2c_dw_runtime_configure+0x22>
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)
10002844:	0014      	movs	r4, r2
10002846:	34a4      	adds	r4, #164	; 0xa4
10002848:	e01c      	b.n	10002884 <i2c_dw_runtime_configure+0x76>
DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
1000284a:	0015      	movs	r5, r2
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
1000284c:	27fa      	movs	r7, #250	; 0xfa
1000284e:	35a0      	adds	r5, #160	; 0xa0
	return *(volatile uint32_t *)addr;
10002850:	682e      	ldr	r6, [r5, #0]
10002852:	007f      	lsls	r7, r7, #1
10002854:	3607      	adds	r6, #7
			value = I2C_STD_LCNT;
10002856:	003c      	movs	r4, r7
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
10002858:	42be      	cmp	r6, r7
1000285a:	d301      	bcc.n	10002860 <i2c_dw_runtime_configure+0x52>
1000285c:	682c      	ldr	r4, [r5, #0]
			value = read_fs_spklen(reg_base) + 8;
1000285e:	3408      	adds	r4, #8
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
10002860:	27c8      	movs	r7, #200	; 0xc8
10002862:	682e      	ldr	r6, [r5, #0]
10002864:	007f      	lsls	r7, r7, #1
10002866:	3605      	adds	r6, #5
		dw->lcnt = value;
10002868:	845c      	strh	r4, [r3, #34]	; 0x22
			value = I2C_STD_HCNT;
1000286a:	003c      	movs	r4, r7
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
1000286c:	42be      	cmp	r6, r7
1000286e:	d301      	bcc.n	10002874 <i2c_dw_runtime_configure+0x66>
10002870:	682c      	ldr	r4, [r5, #0]
			value = read_fs_spklen(reg_base) + 6;
10002872:	3406      	adds	r4, #6
		dw->hcnt = value;
10002874:	841c      	strh	r4, [r3, #32]
10002876:	6c12      	ldr	r2, [r2, #64]	; 0x40
	dw->app_config |= I2C_MODE_MASTER;
10002878:	2210      	movs	r2, #16
1000287a:	4311      	orrs	r1, r2
1000287c:	6119      	str	r1, [r3, #16]
}
1000287e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002880:	0014      	movs	r4, r2
10002882:	34a0      	adds	r4, #160	; 0xa0
10002884:	6825      	ldr	r5, [r4, #0]
				value = I2C_HS_LCNT;
10002886:	2057      	movs	r0, #87	; 0x57
			if (I2C_HS_LCNT <= (read_hs_spklen(reg_base) + 7)) {
10002888:	3507      	adds	r5, #7
1000288a:	2d56      	cmp	r5, #86	; 0x56
1000288c:	d901      	bls.n	10002892 <i2c_dw_runtime_configure+0x84>
1000288e:	6820      	ldr	r0, [r4, #0]
				value = read_hs_spklen(reg_base) + 8;
10002890:	3008      	adds	r0, #8
10002892:	6825      	ldr	r5, [r4, #0]
			dw->lcnt = value;
10002894:	8458      	strh	r0, [r3, #34]	; 0x22
			if (I2C_HS_HCNT <= (read_hs_spklen(reg_base) + 5)) {
10002896:	3505      	adds	r5, #5
				value = I2C_HS_HCNT;
10002898:	204b      	movs	r0, #75	; 0x4b
			if (I2C_HS_HCNT <= (read_hs_spklen(reg_base) + 5)) {
1000289a:	2d4a      	cmp	r5, #74	; 0x4a
1000289c:	d901      	bls.n	100028a2 <i2c_dw_runtime_configure+0x94>
1000289e:	6820      	ldr	r0, [r4, #0]
				value = read_hs_spklen(reg_base) + 6;
100028a0:	3006      	adds	r0, #6
			dw->hcnt = value;
100028a2:	8418      	strh	r0, [r3, #32]
	uint32_t	rc = 0U;
100028a4:	2000      	movs	r0, #0
100028a6:	e7e6      	b.n	10002876 <i2c_dw_runtime_configure+0x68>

100028a8 <i2c_config_0>:
			      &i2c_##n##_runtime, &i2c_config_dw_##n,         \
			      POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,          \
			      &funcs);                                        \
	I2C_DW_IRQ_CONFIG(n)

DT_INST_FOREACH_STATUS_OKAY(I2C_DEVICE_INIT_DW)
100028a8:	b510      	push	{r4, lr}
100028aa:	2200      	movs	r2, #0
100028ac:	2103      	movs	r1, #3
100028ae:	2017      	movs	r0, #23
100028b0:	f7fe f9da 	bl	10000c68 <z_arm_irq_priority_set>
100028b4:	2017      	movs	r0, #23
100028b6:	f7fe f9cb 	bl	10000c50 <arch_irq_enable>
100028ba:	bd10      	pop	{r4, pc}

100028bc <i2c_config_1>:
100028bc:	b510      	push	{r4, lr}
100028be:	2200      	movs	r2, #0
100028c0:	2103      	movs	r1, #3
100028c2:	2018      	movs	r0, #24
100028c4:	f7fe f9d0 	bl	10000c68 <z_arm_irq_priority_set>
100028c8:	2018      	movs	r0, #24
100028ca:	f7fe f9c1 	bl	10000c50 <arch_irq_enable>
100028ce:	bd10      	pop	{r4, pc}

100028d0 <i2c_dw_isr>:
	return (uint32_t)DEVICE_MMIO_GET(dev);
100028d0:	6843      	ldr	r3, [r0, #4]
{
100028d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (uint32_t)DEVICE_MMIO_GET(dev);
100028d4:	681b      	ldr	r3, [r3, #0]
{
100028d6:	b085      	sub	sp, #20
	return (uint32_t)DEVICE_MMIO_GET(dev);
100028d8:	469c      	mov	ip, r3
100028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
100028dc:	9001      	str	r0, [sp, #4]
100028de:	9302      	str	r3, [sp, #8]
100028e0:	4663      	mov	r3, ip
100028e2:	681b      	ldr	r3, [r3, #0]
	if (test_bit_con_master_mode(reg_base)) {
100028e4:	07db      	lsls	r3, r3, #31
100028e6:	d510      	bpl.n	1000290a <i2c_dw_isr+0x3a>
		     DW_INTR_STAT_RX_OVER | DW_INTR_STAT_RX_UNDER) &
100028e8:	224b      	movs	r2, #75	; 0x4b
	struct i2c_dw_dev_config * const dw = port->data;
100028ea:	6901      	ldr	r1, [r0, #16]
		if ((DW_INTR_STAT_TX_ABRT | DW_INTR_STAT_TX_OVER |
100028ec:	9802      	ldr	r0, [sp, #8]
100028ee:	2304      	movs	r3, #4
100028f0:	4210      	tst	r0, r2
100028f2:	d00c      	beq.n	1000290e <i2c_dw_isr+0x3e>
			dw->state = I2C_DW_CMD_ERROR;
100028f4:	3105      	adds	r1, #5
100028f6:	77cb      	strb	r3, [r1, #31]
	*(volatile uint32_t *)addr = data;
100028f8:	2200      	movs	r2, #0
	struct i2c_dw_dev_config * const dw = dev->data;
100028fa:	9b01      	ldr	r3, [sp, #4]
100028fc:	6918      	ldr	r0, [r3, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
100028fe:	685b      	ldr	r3, [r3, #4]
10002900:	681b      	ldr	r3, [r3, #0]
10002902:	631a      	str	r2, [r3, #48]	; 0x30
	return *(volatile uint32_t *)addr;
10002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
10002906:	f7ff f9b3 	bl	10001c70 <z_impl_k_sem_give>
}
1000290a:	b005      	add	sp, #20
1000290c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (intr_stat.bits.rx_full) {
1000290e:	466a      	mov	r2, sp
10002910:	9802      	ldr	r0, [sp, #8]
	return temp & (1 << bit);
10002912:	2408      	movs	r4, #8
10002914:	7a12      	ldrb	r2, [r2, #8]
10002916:	4218      	tst	r0, r3
10002918:	d124      	bne.n	10002964 <i2c_dw_isr+0x94>
		if ((dw->xfr_flags & I2C_MSG_RW_MASK)
1000291a:	1dcb      	adds	r3, r1, #7
1000291c:	7fd8      	ldrb	r0, [r3, #31]
1000291e:	2301      	movs	r3, #1
10002920:	0005      	movs	r5, r0
10002922:	401d      	ands	r5, r3
10002924:	4218      	tst	r0, r3
10002926:	d005      	beq.n	10002934 <i2c_dw_isr+0x64>
	uint32_t temp = *(volatile uint32_t *)addr;
10002928:	4663      	mov	r3, ip
1000292a:	6b18      	ldr	r0, [r3, #48]	; 0x30
	*(volatile uint32_t *)addr = temp | (1 << bit);
1000292c:	2310      	movs	r3, #16
1000292e:	4303      	orrs	r3, r0
10002930:	4660      	mov	r0, ip
10002932:	6303      	str	r3, [r0, #48]	; 0x30
		if (intr_stat.bits.tx_empty) {
10002934:	2310      	movs	r3, #16
10002936:	421a      	tst	r2, r3
10002938:	d124      	bne.n	10002984 <i2c_dw_isr+0xb4>
		if (intr_stat.bits.stop_det) {
1000293a:	9b02      	ldr	r3, [sp, #8]
1000293c:	059b      	lsls	r3, r3, #22
1000293e:	d5e4      	bpl.n	1000290a <i2c_dw_isr+0x3a>
10002940:	4663      	mov	r3, ip
10002942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
			goto done;
10002944:	e7d8      	b.n	100028f8 <i2c_dw_isr+0x28>
10002946:	4663      	mov	r3, ip
		dw->xfr_buf[0] = (uint8_t)read_cmd_data(reg_base);
10002948:	6948      	ldr	r0, [r1, #20]
1000294a:	691b      	ldr	r3, [r3, #16]
1000294c:	7003      	strb	r3, [r0, #0]
		dw->xfr_buf++;
1000294e:	694b      	ldr	r3, [r1, #20]
		dw->rx_pending--;
10002950:	69c8      	ldr	r0, [r1, #28]
		dw->xfr_buf++;
10002952:	3301      	adds	r3, #1
10002954:	614b      	str	r3, [r1, #20]
		dw->xfr_len--;
10002956:	698b      	ldr	r3, [r1, #24]
		dw->rx_pending--;
10002958:	3801      	subs	r0, #1
		dw->xfr_len--;
1000295a:	3b01      	subs	r3, #1
1000295c:	618b      	str	r3, [r1, #24]
		dw->rx_pending--;
1000295e:	61c8      	str	r0, [r1, #28]
		if (dw->xfr_len == 0U) {
10002960:	2b00      	cmp	r3, #0
10002962:	d006      	beq.n	10002972 <i2c_dw_isr+0xa2>
	uint32_t temp = *(volatile uint32_t *)addr;
10002964:	4663      	mov	r3, ip
10002966:	6f18      	ldr	r0, [r3, #112]	; 0x70
	while (test_bit_status_rfne(reg_base) && (dw->xfr_len > 0)) {
10002968:	698b      	ldr	r3, [r1, #24]
1000296a:	4220      	tst	r0, r4
1000296c:	d007      	beq.n	1000297e <i2c_dw_isr+0xae>
1000296e:	2b00      	cmp	r3, #0
10002970:	d1e9      	bne.n	10002946 <i2c_dw_isr+0x76>
		dw->state &= ~I2C_DW_CMD_RECV;
10002972:	2402      	movs	r4, #2
10002974:	1d48      	adds	r0, r1, #5
10002976:	7fc3      	ldrb	r3, [r0, #31]
10002978:	43a3      	bics	r3, r4
1000297a:	77c3      	strb	r3, [r0, #31]
		return;
1000297c:	e7cd      	b.n	1000291a <i2c_dw_isr+0x4a>
	if (dw->xfr_len == 0U) {
1000297e:	2b00      	cmp	r3, #0
10002980:	d1cb      	bne.n	1000291a <i2c_dw_isr+0x4a>
10002982:	e7f6      	b.n	10002972 <i2c_dw_isr+0xa2>
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002984:	9801      	ldr	r0, [sp, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10002986:	9a01      	ldr	r2, [sp, #4]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10002988:	6840      	ldr	r0, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
1000298a:	6912      	ldr	r2, [r2, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000298c:	6804      	ldr	r4, [r0, #0]
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
1000298e:	2d00      	cmp	r5, #0
10002990:	d13f      	bne.n	10002a12 <i2c_dw_isr+0x142>
	if (dw->xfr_len == 0U) {
10002992:	6990      	ldr	r0, [r2, #24]
10002994:	2800      	cmp	r0, #0
10002996:	d136      	bne.n	10002a06 <i2c_dw_isr+0x136>
	uint32_t temp = *(volatile uint32_t *)addr;
10002998:	6b20      	ldr	r0, [r4, #48]	; 0x30
		dw->state &= ~I2C_DW_CMD_SEND;
1000299a:	3205      	adds	r2, #5
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
1000299c:	4398      	bics	r0, r3
1000299e:	6320      	str	r0, [r4, #48]	; 0x30
100029a0:	2001      	movs	r0, #1
100029a2:	7fd3      	ldrb	r3, [r2, #31]
100029a4:	4383      	bics	r3, r0
100029a6:	77d3      	strb	r3, [r2, #31]
			if (((dw->xfr_len == 0U)
100029a8:	698b      	ldr	r3, [r1, #24]
100029aa:	2b00      	cmp	r3, #0
100029ac:	d103      	bne.n	100029b6 <i2c_dw_isr+0xe6>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
100029ae:	3107      	adds	r1, #7
100029b0:	7fcb      	ldrb	r3, [r1, #31]
100029b2:	079b      	lsls	r3, r3, #30
100029b4:	d5a0      	bpl.n	100028f8 <i2c_dw_isr+0x28>
			    || (ret != 0)) {
100029b6:	2d00      	cmp	r5, #0
100029b8:	d0bf      	beq.n	1000293a <i2c_dw_isr+0x6a>
100029ba:	e79d      	b.n	100028f8 <i2c_dw_isr+0x28>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
100029bc:	6995      	ldr	r5, [r2, #24]
100029be:	2d00      	cmp	r5, #0
100029c0:	d025      	beq.n	10002a0e <i2c_dw_isr+0x13e>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
100029c2:	2704      	movs	r7, #4
		data = dw->xfr_buf[0];
100029c4:	6953      	ldr	r3, [r2, #20]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
100029c6:	1dd6      	adds	r6, r2, #7
		data = dw->xfr_buf[0];
100029c8:	9303      	str	r3, [sp, #12]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
100029ca:	7ff0      	ldrb	r0, [r6, #31]
		data = dw->xfr_buf[0];
100029cc:	781b      	ldrb	r3, [r3, #0]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
100029ce:	4238      	tst	r0, r7
100029d0:	d005      	beq.n	100029de <i2c_dw_isr+0x10e>
			data |= IC_DATA_CMD_RESTART;
100029d2:	2780      	movs	r7, #128	; 0x80
100029d4:	00ff      	lsls	r7, r7, #3
100029d6:	433b      	orrs	r3, r7
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
100029d8:	2704      	movs	r7, #4
100029da:	43b8      	bics	r0, r7
100029dc:	77f0      	strb	r0, [r6, #31]
		if ((dw->xfr_len == 1U) && (dw->xfr_flags & I2C_MSG_STOP)) {
100029de:	2d01      	cmp	r5, #1
100029e0:	d107      	bne.n	100029f2 <i2c_dw_isr+0x122>
100029e2:	1dd0      	adds	r0, r2, #7
100029e4:	7fc0      	ldrb	r0, [r0, #31]
100029e6:	3501      	adds	r5, #1
100029e8:	4228      	tst	r0, r5
100029ea:	d002      	beq.n	100029f2 <i2c_dw_isr+0x122>
			data |= IC_DATA_CMD_STOP;
100029ec:	2080      	movs	r0, #128	; 0x80
100029ee:	0080      	lsls	r0, r0, #2
100029f0:	4303      	orrs	r3, r0
	*(volatile uint32_t *)addr = data;
100029f2:	6123      	str	r3, [r4, #16]
		dw->xfr_len--;
100029f4:	6993      	ldr	r3, [r2, #24]
100029f6:	3b01      	subs	r3, #1
100029f8:	6193      	str	r3, [r2, #24]
		dw->xfr_buf++;
100029fa:	9b03      	ldr	r3, [sp, #12]
100029fc:	3301      	adds	r3, #1
100029fe:	6153      	str	r3, [r2, #20]
	uint32_t temp = *(volatile uint32_t *)addr;
10002a00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		if (test_bit_intr_stat_tx_abrt(reg_base)) {
10002a02:	065b      	lsls	r3, r3, #25
10002a04:	d456      	bmi.n	10002ab4 <i2c_dw_isr+0x1e4>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
10002a06:	2002      	movs	r0, #2
10002a08:	6f23      	ldr	r3, [r4, #112]	; 0x70
10002a0a:	4203      	tst	r3, r0
10002a0c:	d1d6      	bne.n	100029bc <i2c_dw_isr+0xec>
	return 0;
10002a0e:	2500      	movs	r5, #0
10002a10:	e7ca      	b.n	100029a8 <i2c_dw_isr+0xd8>
	if (dw->request_bytes == 0U) {
10002a12:	1d90      	adds	r0, r2, #6
10002a14:	7fc5      	ldrb	r5, [r0, #31]
10002a16:	2d00      	cmp	r5, #0
10002a18:	d103      	bne.n	10002a22 <i2c_dw_isr+0x152>
	uint32_t temp = *(volatile uint32_t *)addr;
10002a1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10002a1c:	439a      	bics	r2, r3
10002a1e:	6322      	str	r2, [r4, #48]	; 0x30
DEFINE_CLEAR_BIT_OP(intr_mask_tx_empty, DW_IC_REG_INTR_MASK, DW_IC_INTR_MASK_TX_EMPTY_BIT)
10002a20:	e7c2      	b.n	100029a8 <i2c_dw_isr+0xd8>
DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
10002a22:	0023      	movs	r3, r4
10002a24:	33f4      	adds	r3, #244	; 0xf4
	return *(volatile uint32_t *)addr;
10002a26:	681b      	ldr	r3, [r3, #0]
10002a28:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
10002a2a:	041e      	lsls	r6, r3, #16
10002a2c:	0e36      	lsrs	r6, r6, #24
10002a2e:	3601      	adds	r6, #1
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
10002a30:	69d7      	ldr	r7, [r2, #28]
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
10002a32:	b2f6      	uxtb	r6, r6
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
10002a34:	1a30      	subs	r0, r6, r0
10002a36:	1bc0      	subs	r0, r0, r7
10002a38:	b247      	sxtb	r7, r0
	if (rx_empty < 0) {
10002a3a:	0600      	lsls	r0, r0, #24
10002a3c:	d4e7      	bmi.n	10002a0e <i2c_dw_isr+0x13e>
	tx_buffer_depth = ic_comp_param_1.bits.tx_buffer_depth + 1;
10002a3e:	021b      	lsls	r3, r3, #8
10002a40:	6f60      	ldr	r0, [r4, #116]	; 0x74
10002a42:	0e1b      	lsrs	r3, r3, #24
10002a44:	3301      	adds	r3, #1
	tx_empty = tx_buffer_depth - read_txflr(reg_base);
10002a46:	1a1b      	subs	r3, r3, r0
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
10002a48:	b2d8      	uxtb	r0, r3
	cnt = MIN(rx_buffer_depth, dw->request_bytes);
10002a4a:	1c2b      	adds	r3, r5, #0
10002a4c:	42b5      	cmp	r5, r6
10002a4e:	d900      	bls.n	10002a52 <i2c_dw_isr+0x182>
10002a50:	1c33      	adds	r3, r6, #0
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
10002a52:	b2dd      	uxtb	r5, r3
10002a54:	0003      	movs	r3, r0
10002a56:	42a8      	cmp	r0, r5
10002a58:	dd00      	ble.n	10002a5c <i2c_dw_isr+0x18c>
10002a5a:	002b      	movs	r3, r5
10002a5c:	42bb      	cmp	r3, r7
10002a5e:	dd00      	ble.n	10002a62 <i2c_dw_isr+0x192>
10002a60:	003b      	movs	r3, r7
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10002a62:	2604      	movs	r6, #4
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
10002a64:	b2db      	uxtb	r3, r3
	while (cnt > 0) {
10002a66:	2b00      	cmp	r3, #0
10002a68:	d0d1      	beq.n	10002a0e <i2c_dw_isr+0x13e>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10002a6a:	1dd5      	adds	r5, r2, #7
10002a6c:	7fe8      	ldrb	r0, [r5, #31]
10002a6e:	4230      	tst	r0, r6
10002a70:	d01d      	beq.n	10002aae <i2c_dw_isr+0x1de>
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
10002a72:	43b0      	bics	r0, r6
10002a74:	77e8      	strb	r0, [r5, #31]
			data |= IC_DATA_CMD_RESTART;
10002a76:	20a0      	movs	r0, #160	; 0xa0
10002a78:	00c0      	lsls	r0, r0, #3
		if ((dw->xfr_flags & I2C_MSG_STOP)
10002a7a:	2702      	movs	r7, #2
10002a7c:	7fed      	ldrb	r5, [r5, #31]
10002a7e:	423d      	tst	r5, r7
10002a80:	d006      	beq.n	10002a90 <i2c_dw_isr+0x1c0>
		    && (dw->request_bytes == 1U)) {
10002a82:	1d95      	adds	r5, r2, #6
10002a84:	7fed      	ldrb	r5, [r5, #31]
10002a86:	2d01      	cmp	r5, #1
10002a88:	d102      	bne.n	10002a90 <i2c_dw_isr+0x1c0>
			data |= IC_DATA_CMD_STOP;
10002a8a:	2580      	movs	r5, #128	; 0x80
10002a8c:	00ad      	lsls	r5, r5, #2
10002a8e:	4328      	orrs	r0, r5
10002a90:	2710      	movs	r7, #16
	uint32_t temp = *(volatile uint32_t *)addr;
10002a92:	6b25      	ldr	r5, [r4, #48]	; 0x30
		cnt--;
10002a94:	3b01      	subs	r3, #1
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10002a96:	43bd      	bics	r5, r7
10002a98:	6325      	str	r5, [r4, #48]	; 0x30
	*(volatile uint32_t *)addr = data;
10002a9a:	6120      	str	r0, [r4, #16]
		dw->rx_pending++;
10002a9c:	69d0      	ldr	r0, [r2, #28]
		dw->request_bytes--;
10002a9e:	1d95      	adds	r5, r2, #6
		dw->rx_pending++;
10002aa0:	3001      	adds	r0, #1
10002aa2:	61d0      	str	r0, [r2, #28]
		dw->request_bytes--;
10002aa4:	7fe8      	ldrb	r0, [r5, #31]
		cnt--;
10002aa6:	b2db      	uxtb	r3, r3
		dw->request_bytes--;
10002aa8:	3801      	subs	r0, #1
10002aaa:	77e8      	strb	r0, [r5, #31]
		cnt--;
10002aac:	e7db      	b.n	10002a66 <i2c_dw_isr+0x196>
		data = IC_DATA_CMD_CMD;
10002aae:	2080      	movs	r0, #128	; 0x80
10002ab0:	0040      	lsls	r0, r0, #1
10002ab2:	e7e2      	b.n	10002a7a <i2c_dw_isr+0x1aa>
			return -EIO;
10002ab4:	2505      	movs	r5, #5
10002ab6:	426d      	negs	r5, r5
10002ab8:	e776      	b.n	100029a8 <i2c_dw_isr+0xd8>

10002aba <uart_rpi_poll_in>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002aba:	6843      	ldr	r3, [r0, #4]
{
10002abc:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10002abe:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10002ac0:	2210      	movs	r2, #16
10002ac2:	699c      	ldr	r4, [r3, #24]
10002ac4:	0020      	movs	r0, r4
10002ac6:	4010      	ands	r0, r2
10002ac8:	4214      	tst	r4, r2
10002aca:	d102      	bne.n	10002ad2 <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
10002acc:	681b      	ldr	r3, [r3, #0]
10002ace:	700b      	strb	r3, [r1, #0]
}
10002ad0:	bd10      	pop	{r4, pc}
		return -1;
10002ad2:	2001      	movs	r0, #1
10002ad4:	4240      	negs	r0, r0
10002ad6:	e7fb      	b.n	10002ad0 <uart_rpi_poll_in+0x16>

10002ad8 <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10002ad8:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002ada:	6843      	ldr	r3, [r0, #4]
10002adc:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10002ade:	6998      	ldr	r0, [r3, #24]
10002ae0:	4210      	tst	r0, r2
10002ae2:	d1fc      	bne.n	10002ade <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
10002ae4:	6019      	str	r1, [r3, #0]
}
10002ae6:	4770      	bx	lr

10002ae8 <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002ae8:	6843      	ldr	r3, [r0, #4]
10002aea:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
10002aec:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
10002aee:	0518      	lsls	r0, r3, #20
10002af0:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
10002af2:	055a      	lsls	r2, r3, #21
10002af4:	d501      	bpl.n	10002afa <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
10002af6:	2208      	movs	r2, #8
10002af8:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
10002afa:	059a      	lsls	r2, r3, #22
10002afc:	d501      	bpl.n	10002b02 <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
10002afe:	2202      	movs	r2, #2
10002b00:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
10002b02:	05db      	lsls	r3, r3, #23
10002b04:	d501      	bpl.n	10002b0a <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
10002b06:	2304      	movs	r3, #4
10002b08:	4318      	orrs	r0, r3
}
10002b0a:	4770      	bx	lr

10002b0c <uart_rpi_fifo_fill>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002b0c:	6843      	ldr	r3, [r0, #4]
{
10002b0e:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10002b10:	2000      	movs	r0, #0
10002b12:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002b14:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10002b16:	699c      	ldr	r4, [r3, #24]
10002b18:	422c      	tst	r4, r5
10002b1a:	d102      	bne.n	10002b22 <uart_rpi_fifo_fill+0x16>
10002b1c:	1a14      	subs	r4, r2, r0
10002b1e:	2c00      	cmp	r4, #0
10002b20:	dc00      	bgt.n	10002b24 <uart_rpi_fifo_fill+0x18>
}
10002b22:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
10002b24:	5c0c      	ldrb	r4, [r1, r0]
10002b26:	3001      	adds	r0, #1
10002b28:	601c      	str	r4, [r3, #0]
10002b2a:	e7f4      	b.n	10002b16 <uart_rpi_fifo_fill+0xa>

10002b2c <uart_rpi_fifo_read>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002b2c:	6843      	ldr	r3, [r0, #4]
{
10002b2e:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10002b30:	2000      	movs	r0, #0
10002b32:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10002b34:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10002b36:	699c      	ldr	r4, [r3, #24]
10002b38:	422c      	tst	r4, r5
10002b3a:	d102      	bne.n	10002b42 <uart_rpi_fifo_read+0x16>
10002b3c:	1a14      	subs	r4, r2, r0
10002b3e:	2c00      	cmp	r4, #0
10002b40:	dc00      	bgt.n	10002b44 <uart_rpi_fifo_read+0x18>
}
10002b42:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
10002b44:	681c      	ldr	r4, [r3, #0]
10002b46:	540c      	strb	r4, [r1, r0]
10002b48:	3001      	adds	r0, #1
10002b4a:	e7f4      	b.n	10002b36 <uart_rpi_fifo_read+0xa>

10002b4c <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10002b4c:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002b4e:	6843      	ldr	r3, [r0, #4]
10002b50:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10002b52:	6b99      	ldr	r1, [r3, #56]	; 0x38
10002b54:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10002b56:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10002b58:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10002b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002b5c:	438a      	bics	r2, r1
10002b5e:	635a      	str	r2, [r3, #52]	; 0x34
}
10002b60:	4770      	bx	lr

10002b62 <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10002b62:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10002b64:	6843      	ldr	r3, [r0, #4]
10002b66:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10002b68:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002b6a:	438b      	bics	r3, r1
10002b6c:	6393      	str	r3, [r2, #56]	; 0x38
}
10002b6e:	4770      	bx	lr

10002b70 <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002b70:	6843      	ldr	r3, [r0, #4]
10002b72:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
10002b74:	6c18      	ldr	r0, [r3, #64]	; 0x40
10002b76:	0680      	lsls	r0, r0, #26
10002b78:	0fc0      	lsrs	r0, r0, #31
}
10002b7a:	4770      	bx	lr

10002b7c <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10002b7c:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10002b7e:	6843      	ldr	r3, [r0, #4]
10002b80:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10002b82:	6b99      	ldr	r1, [r3, #56]	; 0x38
10002b84:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10002b86:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10002b88:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10002b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002b8c:	438a      	bics	r2, r1
10002b8e:	635a      	str	r2, [r3, #52]	; 0x34
}
10002b90:	4770      	bx	lr

10002b92 <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10002b92:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10002b94:	6843      	ldr	r3, [r0, #4]
10002b96:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10002b98:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002b9a:	438b      	bics	r3, r1
10002b9c:	6393      	str	r3, [r2, #56]	; 0x38
}
10002b9e:	4770      	bx	lr

10002ba0 <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002ba0:	6843      	ldr	r3, [r0, #4]
10002ba2:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
10002ba4:	6998      	ldr	r0, [r3, #24]
10002ba6:	0600      	lsls	r0, r0, #24
10002ba8:	0fc0      	lsrs	r0, r0, #31
}
10002baa:	4770      	bx	lr

10002bac <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002bac:	6843      	ldr	r3, [r0, #4]
10002bae:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
10002bb0:	6c18      	ldr	r0, [r3, #64]	; 0x40
10002bb2:	06c0      	lsls	r0, r0, #27
10002bb4:	0fc0      	lsrs	r0, r0, #31
}
10002bb6:	4770      	bx	lr

10002bb8 <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
10002bb8:	6843      	ldr	r3, [r0, #4]
10002bba:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
10002bbc:	23f8      	movs	r3, #248	; 0xf8
10002bbe:	6b91      	ldr	r1, [r2, #56]	; 0x38
10002bc0:	00db      	lsls	r3, r3, #3
10002bc2:	430b      	orrs	r3, r1
10002bc4:	6393      	str	r3, [r2, #56]	; 0x38
}
10002bc6:	4770      	bx	lr

10002bc8 <uart_rpi_irq_update>:
}

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
10002bc8:	2001      	movs	r0, #1
10002bca:	4770      	bx	lr

10002bcc <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
10002bcc:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
10002bce:	6059      	str	r1, [r3, #4]
	data->irq_cb_data = cb_data;
10002bd0:	609a      	str	r2, [r3, #8]
}
10002bd2:	4770      	bx	lr

10002bd4 <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
	struct uart_rpi_data * const data = dev->data;
10002bd4:	6902      	ldr	r2, [r0, #16]
{
10002bd6:	b510      	push	{r4, lr}

	if (data->irq_cb) {
10002bd8:	6853      	ldr	r3, [r2, #4]
10002bda:	2b00      	cmp	r3, #0
10002bdc:	d001      	beq.n	10002be2 <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
10002bde:	6891      	ldr	r1, [r2, #8]
10002be0:	4798      	blx	r3
	}
}
10002be2:	bd10      	pop	{r4, pc}

10002be4 <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
10002be4:	b510      	push	{r4, lr}
10002be6:	2200      	movs	r2, #0
10002be8:	2103      	movs	r1, #3
10002bea:	2014      	movs	r0, #20
10002bec:	f7fe f83c 	bl	10000c68 <z_arm_irq_priority_set>
10002bf0:	2014      	movs	r0, #20
10002bf2:	f7fe f82d 	bl	10000c50 <arch_irq_enable>
10002bf6:	bd10      	pop	{r4, pc}

10002bf8 <uart_rpi_irq_is_pending>:
{
10002bf8:	b510      	push	{r4, lr}
10002bfa:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10002bfc:	f7ff ffd6 	bl	10002bac <uart_rpi_irq_rx_ready>
10002c00:	0003      	movs	r3, r0
10002c02:	2001      	movs	r0, #1
10002c04:	2b00      	cmp	r3, #0
10002c06:	d104      	bne.n	10002c12 <uart_rpi_irq_is_pending+0x1a>
10002c08:	0020      	movs	r0, r4
10002c0a:	f7ff ffb1 	bl	10002b70 <uart_rpi_irq_tx_ready>
10002c0e:	1e43      	subs	r3, r0, #1
10002c10:	4198      	sbcs	r0, r3
}
10002c12:	bd10      	pop	{r4, pc}

10002c14 <uart_rpi_init>:
{
10002c14:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
10002c16:	6845      	ldr	r5, [r0, #4]
{
10002c18:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
10002c1a:	682b      	ldr	r3, [r5, #0]
{
10002c1c:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
10002c1e:	6907      	ldr	r7, [r0, #16]
	ret = pinctrl_lookup_state(config, id, &state);
10002c20:	2100      	movs	r1, #0
10002c22:	68a8      	ldr	r0, [r5, #8]
10002c24:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
10002c26:	686e      	ldr	r6, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
10002c28:	9301      	str	r3, [sp, #4]
10002c2a:	f7fe fc5d 	bl	100014e8 <pinctrl_lookup_state>
	if (ret < 0) {
10002c2e:	2800      	cmp	r0, #0
10002c30:	db1a      	blt.n	10002c68 <uart_rpi_init+0x54>
	return pinctrl_apply_state_direct(config, state);
10002c32:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10002c34:	2200      	movs	r2, #0
10002c36:	7919      	ldrb	r1, [r3, #4]
10002c38:	6818      	ldr	r0, [r3, #0]
10002c3a:	f000 f81a 	bl	10002c72 <pinctrl_configure_pins>
	if (ret < 0) {
10002c3e:	2800      	cmp	r0, #0
10002c40:	db12      	blt.n	10002c68 <uart_rpi_init+0x54>
	baudrate = uart_init(uart_inst, data->baudrate);
10002c42:	6839      	ldr	r1, [r7, #0]
10002c44:	9801      	ldr	r0, [sp, #4]
10002c46:	f7fe fe83 	bl	10001950 <uart_init>
	if (baudrate <= 0) {
10002c4a:	2800      	cmp	r0, #0
10002c4c:	dd0e      	ble.n	10002c6c <uart_rpi_init+0x58>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
10002c4e:	0032      	movs	r2, r6
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002c50:	23c0      	movs	r3, #192	; 0xc0
10002c52:	322c      	adds	r2, #44	; 0x2c
10002c54:	019b      	lsls	r3, r3, #6
10002c56:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
10002c58:	2700      	movs	r7, #0
10002c5a:	2210      	movs	r2, #16
	config->irq_config_func(dev);
10002c5c:	0020      	movs	r0, r4
10002c5e:	601a      	str	r2, [r3, #0]
10002c60:	696b      	ldr	r3, [r5, #20]
	uart_hw->dr = 0U;
10002c62:	6037      	str	r7, [r6, #0]
	config->irq_config_func(dev);
10002c64:	4798      	blx	r3
	return 0;
10002c66:	0038      	movs	r0, r7
}
10002c68:	b005      	add	sp, #20
10002c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
10002c6c:	2016      	movs	r0, #22
10002c6e:	4240      	negs	r0, r0
10002c70:	e7fa      	b.n	10002c68 <uart_rpi_init+0x54>

10002c72 <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
10002c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002c74:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10002c76:	2601      	movs	r6, #1
10002c78:	008d      	lsls	r5, r1, #2
10002c7a:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
10002c7c:	42ac      	cmp	r4, r5
10002c7e:	d101      	bne.n	10002c84 <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
10002c80:	2000      	movs	r0, #0
10002c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
10002c84:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
10002c86:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
10002c88:	06c0      	lsls	r0, r0, #27
10002c8a:	0ec0      	lsrs	r0, r0, #27
10002c8c:	f000 f8b5 	bl	10002dfa <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
10002c90:	8821      	ldrh	r1, [r4, #0]
10002c92:	7820      	ldrb	r0, [r4, #0]
10002c94:	05c9      	lsls	r1, r1, #23
10002c96:	06c0      	lsls	r0, r0, #27
10002c98:	0f09      	lsrs	r1, r1, #28
10002c9a:	0ec0      	lsrs	r0, r0, #27
10002c9c:	f7fe fd96 	bl	100017cc <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
10002ca0:	7861      	ldrb	r1, [r4, #1]
10002ca2:	7820      	ldrb	r0, [r4, #0]
10002ca4:	09ca      	lsrs	r2, r1, #7
10002ca6:	06c0      	lsls	r0, r0, #27
10002ca8:	0649      	lsls	r1, r1, #25
10002caa:	0fc9      	lsrs	r1, r1, #31
10002cac:	0ec0      	lsrs	r0, r0, #27
10002cae:	f7fe fda3 	bl	100017f8 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
10002cb2:	7861      	ldrb	r1, [r4, #1]
10002cb4:	7820      	ldrb	r0, [r4, #0]
10002cb6:	06c9      	lsls	r1, r1, #27
10002cb8:	06c0      	lsls	r0, r0, #27
10002cba:	0f09      	lsrs	r1, r1, #28
10002cbc:	0ec0      	lsrs	r0, r0, #27
10002cbe:	f7fe fdcd 	bl	1000185c <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10002cc2:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10002cc4:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10002cc6:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10002cc8:	06c0      	lsls	r0, r0, #27
10002cca:	4031      	ands	r1, r6
10002ccc:	0ec0      	lsrs	r0, r0, #27
10002cce:	f7fe fdb7 	bl	10001840 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
10002cd2:	78a1      	ldrb	r1, [r4, #2]
10002cd4:	7820      	ldrb	r0, [r4, #0]
10002cd6:	0789      	lsls	r1, r1, #30
10002cd8:	06c0      	lsls	r0, r0, #27
10002cda:	0fc9      	lsrs	r1, r1, #31
10002cdc:	0ec0      	lsrs	r0, r0, #27
10002cde:	f7fe fda1 	bl	10001824 <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
10002ce2:	78a1      	ldrb	r1, [r4, #2]
10002ce4:	7820      	ldrb	r0, [r4, #0]
10002ce6:	07c9      	lsls	r1, r1, #31
10002ce8:	06c0      	lsls	r0, r0, #27
10002cea:	0fc9      	lsrs	r1, r1, #31
10002cec:	0ec0      	lsrs	r0, r0, #27
10002cee:	f7fe fdf3 	bl	100018d8 <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
10002cf2:	003c      	movs	r4, r7
10002cf4:	e7c2      	b.n	10002c7c <pinctrl_configure_pins+0xa>

10002cf6 <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
10002cf6:	2000      	movs	r0, #0
10002cf8:	4770      	bx	lr

10002cfa <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
10002cfa:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
10002cfc:	7900      	ldrb	r0, [r0, #4]
10002cfe:	2802      	cmp	r0, #2
10002d00:	d008      	beq.n	10002d14 <reset_rpi_read_register.isra.0+0x1a>
10002d02:	2804      	cmp	r0, #4
10002d04:	d009      	beq.n	10002d1a <reset_rpi_read_register.isra.0+0x20>
10002d06:	2801      	cmp	r0, #1
10002d08:	d10a      	bne.n	10002d20 <reset_rpi_read_register.isra.0+0x26>
		*value = sys_read8(base_address + offset);
10002d0a:	18c9      	adds	r1, r1, r3
	return *(volatile uint8_t *)addr;
10002d0c:	780b      	ldrb	r3, [r1, #0]
	return 0;
10002d0e:	2000      	movs	r0, #0
		*value = sys_read32(base_address + offset);
10002d10:	6013      	str	r3, [r2, #0]
}
10002d12:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
10002d14:	18c9      	adds	r1, r1, r3
	return *(volatile uint16_t *)addr;
10002d16:	880b      	ldrh	r3, [r1, #0]
10002d18:	e7f9      	b.n	10002d0e <reset_rpi_read_register.isra.0+0x14>
		*value = sys_read32(base_address + offset);
10002d1a:	18c9      	adds	r1, r1, r3
	return *(volatile uint32_t *)addr;
10002d1c:	680b      	ldr	r3, [r1, #0]
10002d1e:	e7f6      	b.n	10002d0e <reset_rpi_read_register.isra.0+0x14>
	switch (config->reg_width) {
10002d20:	2016      	movs	r0, #22
10002d22:	4240      	negs	r0, r0
10002d24:	e7f5      	b.n	10002d12 <reset_rpi_read_register.isra.0+0x18>

10002d26 <reset_rpi_update.isra.0>:
static int reset_rpi_update(const struct device *dev, uint32_t id, uint8_t assert)
10002d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002d28:	0005      	movs	r5, r0
10002d2a:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10002d2c:	7929      	ldrb	r1, [r5, #4]
static int reset_rpi_update(const struct device *dev, uint32_t id, uint8_t assert)
10002d2e:	0016      	movs	r6, r2
	offset = id / (config->reg_width * CHAR_BIT);
10002d30:	00c9      	lsls	r1, r1, #3
10002d32:	f7fd fa93 	bl	1000025c <__aeabi_uidivmod>
10002d36:	aa01      	add	r2, sp, #4
10002d38:	0004      	movs	r4, r0
10002d3a:	000f      	movs	r7, r1
	ret = reset_rpi_read_register(dev, offset, &value);
10002d3c:	b281      	uxth	r1, r0
10002d3e:	0028      	movs	r0, r5
10002d40:	f7ff ffdb 	bl	10002cfa <reset_rpi_read_register.isra.0>
	if (ret) {
10002d44:	2800      	cmp	r0, #0
10002d46:	d116      	bne.n	10002d76 <reset_rpi_update.isra.0+0x50>
		value |= BIT(regbit);
10002d48:	2201      	movs	r2, #1
10002d4a:	9901      	ldr	r1, [sp, #4]
10002d4c:	b2ff      	uxtb	r7, r7
10002d4e:	40ba      	lsls	r2, r7
		value &= ~BIT(regbit);
10002d50:	000b      	movs	r3, r1
	if (assert ^ config->active_low) {
10002d52:	796f      	ldrb	r7, [r5, #5]
		value &= ~BIT(regbit);
10002d54:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
10002d56:	42b7      	cmp	r7, r6
10002d58:	d001      	beq.n	10002d5e <reset_rpi_update.isra.0+0x38>
		value |= BIT(regbit);
10002d5a:	0013      	movs	r3, r2
10002d5c:	430b      	orrs	r3, r1
	switch (config->reg_width) {
10002d5e:	7929      	ldrb	r1, [r5, #4]
	uint32_t base_address = config->base_address;
10002d60:	68aa      	ldr	r2, [r5, #8]
	switch (config->reg_width) {
10002d62:	2902      	cmp	r1, #2
10002d64:	d008      	beq.n	10002d78 <reset_rpi_update.isra.0+0x52>
10002d66:	2904      	cmp	r1, #4
10002d68:	d00b      	beq.n	10002d82 <reset_rpi_update.isra.0+0x5c>
10002d6a:	2901      	cmp	r1, #1
10002d6c:	d10d      	bne.n	10002d8a <reset_rpi_update.isra.0+0x64>
		sys_write8(value, base_address + offset);
10002d6e:	b2a4      	uxth	r4, r4
10002d70:	b2db      	uxtb	r3, r3
10002d72:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
10002d74:	7023      	strb	r3, [r4, #0]
}
10002d76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
10002d78:	b2a4      	uxth	r4, r4
10002d7a:	b29b      	uxth	r3, r3
10002d7c:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
10002d7e:	8023      	strh	r3, [r4, #0]
}
10002d80:	e7f9      	b.n	10002d76 <reset_rpi_update.isra.0+0x50>
		sys_write32(value, base_address + offset);
10002d82:	b2a4      	uxth	r4, r4
10002d84:	18a4      	adds	r4, r4, r2
	*(volatile uint32_t *)addr = data;
10002d86:	6023      	str	r3, [r4, #0]
}
10002d88:	e7f5      	b.n	10002d76 <reset_rpi_update.isra.0+0x50>
	switch (config->reg_width) {
10002d8a:	2016      	movs	r0, #22
10002d8c:	4240      	negs	r0, r0
10002d8e:	e7f2      	b.n	10002d76 <reset_rpi_update.isra.0+0x50>

10002d90 <reset_rpi_deassert>:
{
10002d90:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
10002d92:	2200      	movs	r2, #0
10002d94:	6840      	ldr	r0, [r0, #4]
10002d96:	f7ff ffc6 	bl	10002d26 <reset_rpi_update.isra.0>
}
10002d9a:	bd10      	pop	{r4, pc}

10002d9c <reset_rpi_assert>:
{
10002d9c:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
10002d9e:	2201      	movs	r2, #1
10002da0:	6840      	ldr	r0, [r0, #4]
10002da2:	f7ff ffc0 	bl	10002d26 <reset_rpi_update.isra.0>
}
10002da6:	bd10      	pop	{r4, pc}

10002da8 <reset_rpi_toggle>:
{
10002da8:	b570      	push	{r4, r5, r6, lr}
10002daa:	0004      	movs	r4, r0
10002dac:	000d      	movs	r5, r1
	ret = reset_rpi_assert(dev, id);
10002dae:	f7ff fff5 	bl	10002d9c <reset_rpi_assert>
	if (ret) {
10002db2:	2800      	cmp	r0, #0
10002db4:	d103      	bne.n	10002dbe <reset_rpi_toggle+0x16>
	return reset_rpi_deassert(dev, id);
10002db6:	0029      	movs	r1, r5
10002db8:	0020      	movs	r0, r4
10002dba:	f7ff ffe9 	bl	10002d90 <reset_rpi_deassert>
}
10002dbe:	bd70      	pop	{r4, r5, r6, pc}

10002dc0 <reset_rpi_status>:
{
10002dc0:	0003      	movs	r3, r0
10002dc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
10002dc4:	685e      	ldr	r6, [r3, #4]
{
10002dc6:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10002dc8:	7931      	ldrb	r1, [r6, #4]
{
10002dca:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
10002dcc:	00c9      	lsls	r1, r1, #3
10002dce:	f7fd fa45 	bl	1000025c <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
10002dd2:	aa01      	add	r2, sp, #4
10002dd4:	000d      	movs	r5, r1
10002dd6:	b281      	uxth	r1, r0
10002dd8:	0030      	movs	r0, r6
10002dda:	f7ff ff8e 	bl	10002cfa <reset_rpi_read_register.isra.0>
	if (ret) {
10002dde:	2800      	cmp	r0, #0
10002de0:	d10a      	bne.n	10002df8 <reset_rpi_status+0x38>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
10002de2:	9a01      	ldr	r2, [sp, #4]
10002de4:	b2ed      	uxtb	r5, r5
10002de6:	40ea      	lsrs	r2, r5
10002de8:	2301      	movs	r3, #1
10002dea:	4393      	bics	r3, r2
10002dec:	001a      	movs	r2, r3
10002dee:	7973      	ldrb	r3, [r6, #5]
10002df0:	4259      	negs	r1, r3
10002df2:	414b      	adcs	r3, r1
10002df4:	4053      	eors	r3, r2
10002df6:	7023      	strb	r3, [r4, #0]
}
10002df8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

10002dfa <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10002dfa:	2301      	movs	r3, #1
10002dfc:	22d0      	movs	r2, #208	; 0xd0
10002dfe:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
10002e00:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
10002e02:	0612      	lsls	r2, r2, #24
10002e04:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10002e06:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
10002e08:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10002e0a:	f7fe fcdf 	bl	100017cc <gpio_set_function>
}
10002e0e:	bd10      	pop	{r4, pc}

10002e10 <z_device_state_init>:
}
10002e10:	4770      	bx	lr

10002e12 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
10002e12:	2800      	cmp	r0, #0
10002e14:	d008      	beq.n	10002e28 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
10002e16:	68c3      	ldr	r3, [r0, #12]
10002e18:	8818      	ldrh	r0, [r3, #0]
10002e1a:	05c0      	lsls	r0, r0, #23
10002e1c:	0dc0      	lsrs	r0, r0, #23
10002e1e:	3801      	subs	r0, #1
10002e20:	38ff      	subs	r0, #255	; 0xff
10002e22:	4243      	negs	r3, r0
10002e24:	4158      	adcs	r0, r3
10002e26:	b2c0      	uxtb	r0, r0
}
10002e28:	4770      	bx	lr

10002e2a <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
10002e2a:	f3ef 8310 	mrs	r3, PRIMASK
10002e2e:	b672      	cpsid	i
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
10002e30:	e7fe      	b.n	10002e30 <arch_system_halt+0x6>

10002e32 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
10002e32:	b510      	push	{r4, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
10002e34:	f7ff fff9 	bl	10002e2a <arch_system_halt>

10002e38 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002e3a:	0005      	movs	r5, r0
10002e3c:	000e      	movs	r6, r1
10002e3e:	f3ef 8710 	mrs	r7, PRIMASK
10002e42:	b672      	cpsid	i
	return z_impl_z_current_get();
10002e44:	f7ff f90e 	bl	10002064 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
10002e48:	0031      	movs	r1, r6
10002e4a:	0004      	movs	r4, r0
10002e4c:	0028      	movs	r0, r5
10002e4e:	f7ff fff0 	bl	10002e32 <k_sys_fatal_error_handler>
	if (key != 0U) {
10002e52:	2f00      	cmp	r7, #0
10002e54:	d102      	bne.n	10002e5c <z_fatal_error+0x24>
	__asm__ volatile(
10002e56:	b662      	cpsie	i
10002e58:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
10002e5c:	0020      	movs	r0, r4
10002e5e:	f7fe f85d 	bl	10000f1c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
10002e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10002e64 <z_early_memset>:
{
10002e64:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
10002e66:	f7ff fc04 	bl	10002672 <memset>
}
10002e6a:	bd10      	pop	{r4, pc}

10002e6c <z_early_memcpy>:
{
10002e6c:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
10002e6e:	f7ff fbf7 	bl	10002660 <memcpy>
}
10002e72:	bd10      	pop	{r4, pc}

10002e74 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
10002e74:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002e76:	f3ef 8310 	mrs	r3, PRIMASK
10002e7a:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
10002e7c:	f7fd fee0 	bl	10000c40 <arch_cpu_idle>
10002e80:	e7f9      	b.n	10002e76 <idle+0x2>

10002e82 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
10002e82:	2a00      	cmp	r2, #0
10002e84:	d007      	beq.n	10002e96 <z_impl_k_sem_init+0x14>
10002e86:	428a      	cmp	r2, r1
10002e88:	d305      	bcc.n	10002e96 <z_impl_k_sem_init+0x14>
	sem->count = initial_count;
10002e8a:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
10002e8c:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
10002e8e:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
10002e90:	6040      	str	r0, [r0, #4]
	return 0;
10002e92:	2000      	movs	r0, #0
}
10002e94:	4770      	bx	lr
		return -EINVAL;
10002e96:	2016      	movs	r0, #22
10002e98:	4240      	negs	r0, r0
10002e9a:	e7fb      	b.n	10002e94 <z_impl_k_sem_init+0x12>

10002e9c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
10002e9c:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10002e9e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10002ea0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10002ea2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10002ea4:	2300      	movs	r3, #0
10002ea6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10002ea8:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
10002eaa:	4770      	bx	lr

10002eac <unpend_thread_no_timeout>:
{
10002eac:	b510      	push	{r4, lr}
10002eae:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
10002eb0:	f7ff fff4 	bl	10002e9c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
10002eb4:	2202      	movs	r2, #2
10002eb6:	7b63      	ldrb	r3, [r4, #13]
10002eb8:	4393      	bics	r3, r2
10002eba:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
10002ebc:	2300      	movs	r3, #0
10002ebe:	60a3      	str	r3, [r4, #8]
}
10002ec0:	bd10      	pop	{r4, pc}

10002ec2 <z_unpend_thread_no_timeout>:
{
10002ec2:	b510      	push	{r4, lr}
10002ec4:	f3ef 8410 	mrs	r4, PRIMASK
10002ec8:	b672      	cpsid	i
		unpend_thread_no_timeout(thread);
10002eca:	f7ff ffef 	bl	10002eac <unpend_thread_no_timeout>
	if (key != 0U) {
10002ece:	2c00      	cmp	r4, #0
10002ed0:	d102      	bne.n	10002ed8 <z_unpend_thread_no_timeout+0x16>
	__asm__ volatile(
10002ed2:	b662      	cpsie	i
10002ed4:	f3bf 8f6f 	isb	sy
}
10002ed8:	bd10      	pop	{r4, pc}

10002eda <z_reschedule_irqlock>:
{
10002eda:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10002edc:	2800      	cmp	r0, #0
10002ede:	d105      	bne.n	10002eec <z_reschedule_irqlock+0x12>
10002ee0:	f3ef 8005 	mrs	r0, IPSR
	if (resched(key)) {
10002ee4:	2800      	cmp	r0, #0
10002ee6:	d102      	bne.n	10002eee <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
10002ee8:	f7fd ff00 	bl	10000cec <arch_swap>
}
10002eec:	bd10      	pop	{r4, pc}
10002eee:	b662      	cpsie	i
10002ef0:	f3bf 8f6f 	isb	sy
10002ef4:	e7fa      	b.n	10002eec <z_reschedule_irqlock+0x12>

10002ef6 <z_reschedule_unlocked>:
{
10002ef6:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002ef8:	f3ef 8010 	mrs	r0, PRIMASK
10002efc:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10002efe:	f7ff ffec 	bl	10002eda <z_reschedule_irqlock>
}
10002f02:	bd10      	pop	{r4, pc}

10002f04 <z_priq_dumb_best>:
{
10002f04:	0003      	movs	r3, r0
	return list->head == list;
10002f06:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002f08:	4283      	cmp	r3, r0
10002f0a:	d100      	bne.n	10002f0e <z_priq_dumb_best+0xa>
	struct k_thread *thread = NULL;
10002f0c:	2000      	movs	r0, #0
}
10002f0e:	4770      	bx	lr

10002f10 <z_ready_thread>:
{
10002f10:	b510      	push	{r4, lr}
10002f12:	f3ef 8410 	mrs	r4, PRIMASK
10002f16:	b672      	cpsid	i
			ready_thread(thread);
10002f18:	f7fe ffe8 	bl	10001eec <ready_thread>
	if (key != 0U) {
10002f1c:	2c00      	cmp	r4, #0
10002f1e:	d102      	bne.n	10002f26 <z_ready_thread+0x16>
	__asm__ volatile(
10002f20:	b662      	cpsie	i
10002f22:	f3bf 8f6f 	isb	sy
}
10002f26:	bd10      	pop	{r4, pc}

10002f28 <z_thread_timeout>:
	struct k_thread *thread = CONTAINER_OF(timeout,
10002f28:	3818      	subs	r0, #24
{
10002f2a:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = CONTAINER_OF(timeout,
10002f2c:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10002f2e:	f3ef 8510 	mrs	r5, PRIMASK
10002f32:	b672      	cpsid	i
		if (!killed) {
10002f34:	2328      	movs	r3, #40	; 0x28
10002f36:	7b42      	ldrb	r2, [r0, #13]
10002f38:	421a      	tst	r2, r3
10002f3a:	d10b      	bne.n	10002f54 <z_thread_timeout+0x2c>
			if (thread->base.pended_on != NULL) {
10002f3c:	6883      	ldr	r3, [r0, #8]
10002f3e:	2b00      	cmp	r3, #0
10002f40:	d001      	beq.n	10002f46 <z_thread_timeout+0x1e>
				unpend_thread_no_timeout(thread);
10002f42:	f7ff ffb3 	bl	10002eac <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10002f46:	2214      	movs	r2, #20
10002f48:	7b63      	ldrb	r3, [r4, #13]
			ready_thread(thread);
10002f4a:	0020      	movs	r0, r4
10002f4c:	4393      	bics	r3, r2
10002f4e:	7363      	strb	r3, [r4, #13]
10002f50:	f7fe ffcc 	bl	10001eec <ready_thread>
	if (key != 0U) {
10002f54:	2d00      	cmp	r5, #0
10002f56:	d102      	bne.n	10002f5e <z_thread_timeout+0x36>
	__asm__ volatile(
10002f58:	b662      	cpsie	i
10002f5a:	f3bf 8f6f 	isb	sy
}
10002f5e:	bd70      	pop	{r4, r5, r6, pc}

10002f60 <add_to_waitq_locked>:
{
10002f60:	b570      	push	{r4, r5, r6, lr}
10002f62:	0004      	movs	r4, r0
10002f64:	000d      	movs	r5, r1
	unready_thread(thread);
10002f66:	f7ff f811 	bl	10001f8c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
10002f6a:	2302      	movs	r3, #2
10002f6c:	7b62      	ldrb	r2, [r4, #13]
10002f6e:	4313      	orrs	r3, r2
10002f70:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
10002f72:	2d00      	cmp	r5, #0
10002f74:	d013      	beq.n	10002f9e <add_to_waitq_locked+0x3e>
	return list->head == list;
10002f76:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
10002f78:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002f7a:	429d      	cmp	r5, r3
10002f7c:	d016      	beq.n	10002fac <add_to_waitq_locked+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002f7e:	2b00      	cmp	r3, #0
10002f80:	d014      	beq.n	10002fac <add_to_waitq_locked+0x4c>
	int32_t b1 = thread_1->base.prio;
10002f82:	210e      	movs	r1, #14
10002f84:	5661      	ldrsb	r1, [r4, r1]
	int32_t b2 = thread_2->base.prio;
10002f86:	220e      	movs	r2, #14
10002f88:	569a      	ldrsb	r2, [r3, r2]
	if (b1 != b2) {
10002f8a:	4291      	cmp	r1, r2
10002f8c:	d008      	beq.n	10002fa0 <add_to_waitq_locked+0x40>
		return b2 - b1;
10002f8e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
10002f90:	2a00      	cmp	r2, #0
10002f92:	dd05      	ble.n	10002fa0 <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
10002f94:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10002f96:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10002f98:	6062      	str	r2, [r4, #4]
	prev->next = node;
10002f9a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
10002f9c:	605c      	str	r4, [r3, #4]
}
10002f9e:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10002fa0:	686a      	ldr	r2, [r5, #4]
10002fa2:	4293      	cmp	r3, r2
10002fa4:	d002      	beq.n	10002fac <add_to_waitq_locked+0x4c>
10002fa6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002fa8:	2b00      	cmp	r3, #0
10002faa:	d1ec      	bne.n	10002f86 <add_to_waitq_locked+0x26>
	sys_dnode_t *const tail = list->tail;
10002fac:	686b      	ldr	r3, [r5, #4]
	node->next = list;
10002fae:	6025      	str	r5, [r4, #0]
	node->prev = tail;
10002fb0:	6063      	str	r3, [r4, #4]
	tail->next = node;
10002fb2:	601c      	str	r4, [r3, #0]
	list->tail = node;
10002fb4:	606c      	str	r4, [r5, #4]
}
10002fb6:	e7f2      	b.n	10002f9e <add_to_waitq_locked+0x3e>

10002fb8 <z_unpend_first_thread>:
{
10002fb8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002fba:	f3ef 8510 	mrs	r5, PRIMASK
10002fbe:	b672      	cpsid	i
		thread = _priq_wait_best(&wait_q->waitq);
10002fc0:	f7ff ffa0 	bl	10002f04 <z_priq_dumb_best>
10002fc4:	1e04      	subs	r4, r0, #0
		if (thread != NULL) {
10002fc6:	d005      	beq.n	10002fd4 <z_unpend_first_thread+0x1c>
			unpend_thread_no_timeout(thread);
10002fc8:	f7ff ff70 	bl	10002eac <unpend_thread_no_timeout>
10002fcc:	0020      	movs	r0, r4
10002fce:	3018      	adds	r0, #24
10002fd0:	f000 f807 	bl	10002fe2 <z_abort_timeout>
	if (key != 0U) {
10002fd4:	2d00      	cmp	r5, #0
10002fd6:	d102      	bne.n	10002fde <z_unpend_first_thread+0x26>
	__asm__ volatile(
10002fd8:	b662      	cpsie	i
10002fda:	f3bf 8f6f 	isb	sy
}
10002fde:	0020      	movs	r0, r4
10002fe0:	bd70      	pop	{r4, r5, r6, pc}

10002fe2 <z_abort_timeout>:
{
10002fe2:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002fe4:	f3ef 8410 	mrs	r4, PRIMASK
10002fe8:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
10002fea:	6803      	ldr	r3, [r0, #0]
10002fec:	2b00      	cmp	r3, #0
10002fee:	d008      	beq.n	10003002 <z_abort_timeout+0x20>
			remove_timeout(to);
10002ff0:	f7ff f8e0 	bl	100021b4 <remove_timeout>
			ret = 0;
10002ff4:	2000      	movs	r0, #0
	if (key != 0U) {
10002ff6:	2c00      	cmp	r4, #0
10002ff8:	d102      	bne.n	10003000 <z_abort_timeout+0x1e>
	__asm__ volatile(
10002ffa:	b662      	cpsie	i
10002ffc:	f3bf 8f6f 	isb	sy
}
10003000:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
10003002:	2016      	movs	r0, #22
10003004:	4240      	negs	r0, r0
10003006:	e7f6      	b.n	10002ff6 <z_abort_timeout+0x14>

10003008 <z_set_timeout_expiry>:
{
10003008:	b570      	push	{r4, r5, r6, lr}
1000300a:	0004      	movs	r4, r0
1000300c:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
1000300e:	f3ef 8610 	mrs	r6, PRIMASK
10003012:	b672      	cpsid	i
		int next_to = next_timeout();
10003014:	f7ff f8a2 	bl	1000215c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
10003018:	2801      	cmp	r0, #1
1000301a:	dd05      	ble.n	10003028 <z_set_timeout_expiry+0x20>
1000301c:	42a0      	cmp	r0, r4
1000301e:	db03      	blt.n	10003028 <z_set_timeout_expiry+0x20>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
10003020:	0029      	movs	r1, r5
10003022:	0020      	movs	r0, r4
10003024:	f7fe f9c6 	bl	100013b4 <sys_clock_set_timeout>
	if (key != 0U) {
10003028:	2e00      	cmp	r6, #0
1000302a:	d102      	bne.n	10003032 <z_set_timeout_expiry+0x2a>
	__asm__ volatile(
1000302c:	b662      	cpsie	i
1000302e:	f3bf 8f6f 	isb	sy
}
10003032:	bd70      	pop	{r4, r5, r6, pc}
