
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	200008b0 10001261 10003315 1000121d     ... a....3......
	...
1000012c:	100010e9 00000000 00000000 10001089     ................
1000013c:	100016dd                                ....

10000140 <_irq_vector_table>:
10000140:	10001159 10001159 10001159 10001159     Y...Y...Y...Y...
10000150:	10001159 10001159 10001159 10001159     Y...Y...Y...Y...
10000160:	10001159 10001159 10001159 10001159     Y...Y...Y...Y...
10000170:	10001159 10001159 10001159 10001159     Y...Y...Y...Y...
10000180:	10001159 10001159 10001159 10001159     Y...Y...Y...Y...
10000190:	10001159 10001159 10001159 10001159     Y...Y...Y...Y...
100001a0:	10001159 10001159                       Y...Y...

Disassembly of section text:

100001a8 <__gnu_thumb1_case_sqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5609      	ldrsb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_uqi>:
100001bc:	b402      	push	{r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0049      	lsls	r1, r1, #1
100001c4:	5c09      	ldrb	r1, [r1, r0]
100001c6:	0049      	lsls	r1, r1, #1
100001c8:	448e      	add	lr, r1
100001ca:	bc02      	pop	{r1}
100001cc:	4770      	bx	lr
100001ce:	46c0      	nop			; (mov r8, r8)

100001d0 <__gnu_thumb1_case_shi>:
100001d0:	b403      	push	{r0, r1}
100001d2:	4671      	mov	r1, lr
100001d4:	0849      	lsrs	r1, r1, #1
100001d6:	0040      	lsls	r0, r0, #1
100001d8:	0049      	lsls	r1, r1, #1
100001da:	5e09      	ldrsh	r1, [r1, r0]
100001dc:	0049      	lsls	r1, r1, #1
100001de:	448e      	add	lr, r1
100001e0:	bc03      	pop	{r0, r1}
100001e2:	4770      	bx	lr

100001e4 <__udivsi3>:
100001e4:	2900      	cmp	r1, #0
100001e6:	d034      	beq.n	10000252 <.udivsi3_skip_div0_test+0x6a>

100001e8 <.udivsi3_skip_div0_test>:
100001e8:	2301      	movs	r3, #1
100001ea:	2200      	movs	r2, #0
100001ec:	b410      	push	{r4}
100001ee:	4288      	cmp	r0, r1
100001f0:	d32c      	bcc.n	1000024c <.udivsi3_skip_div0_test+0x64>
100001f2:	2401      	movs	r4, #1
100001f4:	0724      	lsls	r4, r4, #28
100001f6:	42a1      	cmp	r1, r4
100001f8:	d204      	bcs.n	10000204 <.udivsi3_skip_div0_test+0x1c>
100001fa:	4281      	cmp	r1, r0
100001fc:	d202      	bcs.n	10000204 <.udivsi3_skip_div0_test+0x1c>
100001fe:	0109      	lsls	r1, r1, #4
10000200:	011b      	lsls	r3, r3, #4
10000202:	e7f8      	b.n	100001f6 <.udivsi3_skip_div0_test+0xe>
10000204:	00e4      	lsls	r4, r4, #3
10000206:	42a1      	cmp	r1, r4
10000208:	d204      	bcs.n	10000214 <.udivsi3_skip_div0_test+0x2c>
1000020a:	4281      	cmp	r1, r0
1000020c:	d202      	bcs.n	10000214 <.udivsi3_skip_div0_test+0x2c>
1000020e:	0049      	lsls	r1, r1, #1
10000210:	005b      	lsls	r3, r3, #1
10000212:	e7f8      	b.n	10000206 <.udivsi3_skip_div0_test+0x1e>
10000214:	4288      	cmp	r0, r1
10000216:	d301      	bcc.n	1000021c <.udivsi3_skip_div0_test+0x34>
10000218:	1a40      	subs	r0, r0, r1
1000021a:	431a      	orrs	r2, r3
1000021c:	084c      	lsrs	r4, r1, #1
1000021e:	42a0      	cmp	r0, r4
10000220:	d302      	bcc.n	10000228 <.udivsi3_skip_div0_test+0x40>
10000222:	1b00      	subs	r0, r0, r4
10000224:	085c      	lsrs	r4, r3, #1
10000226:	4322      	orrs	r2, r4
10000228:	088c      	lsrs	r4, r1, #2
1000022a:	42a0      	cmp	r0, r4
1000022c:	d302      	bcc.n	10000234 <.udivsi3_skip_div0_test+0x4c>
1000022e:	1b00      	subs	r0, r0, r4
10000230:	089c      	lsrs	r4, r3, #2
10000232:	4322      	orrs	r2, r4
10000234:	08cc      	lsrs	r4, r1, #3
10000236:	42a0      	cmp	r0, r4
10000238:	d302      	bcc.n	10000240 <.udivsi3_skip_div0_test+0x58>
1000023a:	1b00      	subs	r0, r0, r4
1000023c:	08dc      	lsrs	r4, r3, #3
1000023e:	4322      	orrs	r2, r4
10000240:	2800      	cmp	r0, #0
10000242:	d003      	beq.n	1000024c <.udivsi3_skip_div0_test+0x64>
10000244:	091b      	lsrs	r3, r3, #4
10000246:	d001      	beq.n	1000024c <.udivsi3_skip_div0_test+0x64>
10000248:	0909      	lsrs	r1, r1, #4
1000024a:	e7e3      	b.n	10000214 <.udivsi3_skip_div0_test+0x2c>
1000024c:	0010      	movs	r0, r2
1000024e:	bc10      	pop	{r4}
10000250:	4770      	bx	lr
10000252:	b501      	push	{r0, lr}
10000254:	2000      	movs	r0, #0
10000256:	f000 f80b 	bl	10000270 <__aeabi_idiv0>
1000025a:	bd02      	pop	{r1, pc}

1000025c <__aeabi_uidivmod>:
1000025c:	2900      	cmp	r1, #0
1000025e:	d0f8      	beq.n	10000252 <.udivsi3_skip_div0_test+0x6a>
10000260:	b503      	push	{r0, r1, lr}
10000262:	f7ff ffc1 	bl	100001e8 <.udivsi3_skip_div0_test>
10000266:	bc0e      	pop	{r1, r2, r3}
10000268:	4342      	muls	r2, r0
1000026a:	1a89      	subs	r1, r1, r2
1000026c:	4718      	bx	r3
1000026e:	46c0      	nop			; (mov r8, r8)

10000270 <__aeabi_idiv0>:
10000270:	4770      	bx	lr
10000272:	46c0      	nop			; (mov r8, r8)

10000274 <__clzsi2>:
10000274:	211c      	movs	r1, #28
10000276:	2301      	movs	r3, #1
10000278:	041b      	lsls	r3, r3, #16
1000027a:	4298      	cmp	r0, r3
1000027c:	d301      	bcc.n	10000282 <__clzsi2+0xe>
1000027e:	0c00      	lsrs	r0, r0, #16
10000280:	3910      	subs	r1, #16
10000282:	0a1b      	lsrs	r3, r3, #8
10000284:	4298      	cmp	r0, r3
10000286:	d301      	bcc.n	1000028c <__clzsi2+0x18>
10000288:	0a00      	lsrs	r0, r0, #8
1000028a:	3908      	subs	r1, #8
1000028c:	091b      	lsrs	r3, r3, #4
1000028e:	4298      	cmp	r0, r3
10000290:	d301      	bcc.n	10000296 <__clzsi2+0x22>
10000292:	0900      	lsrs	r0, r0, #4
10000294:	3904      	subs	r1, #4
10000296:	a202      	add	r2, pc, #8	; (adr r2, 100002a0 <__clzsi2+0x2c>)
10000298:	5c10      	ldrb	r0, [r2, r0]
1000029a:	1840      	adds	r0, r0, r1
1000029c:	4770      	bx	lr
1000029e:	46c0      	nop			; (mov r8, r8)
100002a0:	02020304 	.word	0x02020304
100002a4:	01010101 	.word	0x01010101
	...

100002b0 <__aeabi_uldivmod>:
100002b0:	2b00      	cmp	r3, #0
100002b2:	d111      	bne.n	100002d8 <__aeabi_uldivmod+0x28>
100002b4:	2a00      	cmp	r2, #0
100002b6:	d10f      	bne.n	100002d8 <__aeabi_uldivmod+0x28>
100002b8:	2900      	cmp	r1, #0
100002ba:	d100      	bne.n	100002be <__aeabi_uldivmod+0xe>
100002bc:	2800      	cmp	r0, #0
100002be:	d002      	beq.n	100002c6 <__aeabi_uldivmod+0x16>
100002c0:	2100      	movs	r1, #0
100002c2:	43c9      	mvns	r1, r1
100002c4:	0008      	movs	r0, r1
100002c6:	b407      	push	{r0, r1, r2}
100002c8:	4802      	ldr	r0, [pc, #8]	; (100002d4 <__aeabi_uldivmod+0x24>)
100002ca:	a102      	add	r1, pc, #8	; (adr r1, 100002d4 <__aeabi_uldivmod+0x24>)
100002cc:	1840      	adds	r0, r0, r1
100002ce:	9002      	str	r0, [sp, #8]
100002d0:	bd03      	pop	{r0, r1, pc}
100002d2:	46c0      	nop			; (mov r8, r8)
100002d4:	ffffff9d 	.word	0xffffff9d
100002d8:	b403      	push	{r0, r1}
100002da:	4668      	mov	r0, sp
100002dc:	b501      	push	{r0, lr}
100002de:	9802      	ldr	r0, [sp, #8]
100002e0:	f000 f84e 	bl	10000380 <__udivmoddi4>
100002e4:	9b01      	ldr	r3, [sp, #4]
100002e6:	469e      	mov	lr, r3
100002e8:	b002      	add	sp, #8
100002ea:	bc0c      	pop	{r2, r3}
100002ec:	4770      	bx	lr
100002ee:	46c0      	nop			; (mov r8, r8)

100002f0 <__aeabi_llsr>:
100002f0:	40d0      	lsrs	r0, r2
100002f2:	000b      	movs	r3, r1
100002f4:	40d1      	lsrs	r1, r2
100002f6:	469c      	mov	ip, r3
100002f8:	3a20      	subs	r2, #32
100002fa:	40d3      	lsrs	r3, r2
100002fc:	4318      	orrs	r0, r3
100002fe:	4252      	negs	r2, r2
10000300:	4663      	mov	r3, ip
10000302:	4093      	lsls	r3, r2
10000304:	4318      	orrs	r0, r3
10000306:	4770      	bx	lr

10000308 <__aeabi_llsl>:
10000308:	4091      	lsls	r1, r2
1000030a:	0003      	movs	r3, r0
1000030c:	4090      	lsls	r0, r2
1000030e:	469c      	mov	ip, r3
10000310:	3a20      	subs	r2, #32
10000312:	4093      	lsls	r3, r2
10000314:	4319      	orrs	r1, r3
10000316:	4252      	negs	r2, r2
10000318:	4663      	mov	r3, ip
1000031a:	40d3      	lsrs	r3, r2
1000031c:	4319      	orrs	r1, r3
1000031e:	4770      	bx	lr

10000320 <__clzdi2>:
10000320:	b510      	push	{r4, lr}
10000322:	2900      	cmp	r1, #0
10000324:	d103      	bne.n	1000032e <__clzdi2+0xe>
10000326:	f7ff ffa5 	bl	10000274 <__clzsi2>
1000032a:	3020      	adds	r0, #32
1000032c:	e002      	b.n	10000334 <__clzdi2+0x14>
1000032e:	0008      	movs	r0, r1
10000330:	f7ff ffa0 	bl	10000274 <__clzsi2>
10000334:	bd10      	pop	{r4, pc}
10000336:	46c0      	nop			; (mov r8, r8)

10000338 <__aeabi_lmul>:
10000338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000033a:	9301      	str	r3, [sp, #4]
1000033c:	b283      	uxth	r3, r0
1000033e:	469c      	mov	ip, r3
10000340:	0006      	movs	r6, r0
10000342:	0c03      	lsrs	r3, r0, #16
10000344:	4660      	mov	r0, ip
10000346:	000d      	movs	r5, r1
10000348:	4661      	mov	r1, ip
1000034a:	b297      	uxth	r7, r2
1000034c:	4378      	muls	r0, r7
1000034e:	0c14      	lsrs	r4, r2, #16
10000350:	435f      	muls	r7, r3
10000352:	4363      	muls	r3, r4
10000354:	434c      	muls	r4, r1
10000356:	0c01      	lsrs	r1, r0, #16
10000358:	468c      	mov	ip, r1
1000035a:	19e4      	adds	r4, r4, r7
1000035c:	4464      	add	r4, ip
1000035e:	42a7      	cmp	r7, r4
10000360:	d902      	bls.n	10000368 <__aeabi_lmul+0x30>
10000362:	2180      	movs	r1, #128	; 0x80
10000364:	0249      	lsls	r1, r1, #9
10000366:	185b      	adds	r3, r3, r1
10000368:	9901      	ldr	r1, [sp, #4]
1000036a:	436a      	muls	r2, r5
1000036c:	4371      	muls	r1, r6
1000036e:	0c27      	lsrs	r7, r4, #16
10000370:	18fb      	adds	r3, r7, r3
10000372:	0424      	lsls	r4, r4, #16
10000374:	18c9      	adds	r1, r1, r3
10000376:	b280      	uxth	r0, r0
10000378:	1820      	adds	r0, r4, r0
1000037a:	1889      	adds	r1, r1, r2
1000037c:	b003      	add	sp, #12
1000037e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000380 <__udivmoddi4>:
10000380:	b5f0      	push	{r4, r5, r6, r7, lr}
10000382:	0006      	movs	r6, r0
10000384:	000f      	movs	r7, r1
10000386:	0015      	movs	r5, r2
10000388:	001c      	movs	r4, r3
1000038a:	b085      	sub	sp, #20
1000038c:	428b      	cmp	r3, r1
1000038e:	d863      	bhi.n	10000458 <__udivmoddi4+0xd8>
10000390:	d101      	bne.n	10000396 <__udivmoddi4+0x16>
10000392:	4282      	cmp	r2, r0
10000394:	d860      	bhi.n	10000458 <__udivmoddi4+0xd8>
10000396:	0021      	movs	r1, r4
10000398:	0028      	movs	r0, r5
1000039a:	f7ff ffc1 	bl	10000320 <__clzdi2>
1000039e:	0039      	movs	r1, r7
100003a0:	9000      	str	r0, [sp, #0]
100003a2:	0030      	movs	r0, r6
100003a4:	f7ff ffbc 	bl	10000320 <__clzdi2>
100003a8:	9b00      	ldr	r3, [sp, #0]
100003aa:	0021      	movs	r1, r4
100003ac:	1a1b      	subs	r3, r3, r0
100003ae:	001a      	movs	r2, r3
100003b0:	0028      	movs	r0, r5
100003b2:	9303      	str	r3, [sp, #12]
100003b4:	f7ff ffa8 	bl	10000308 <__aeabi_llsl>
100003b8:	9000      	str	r0, [sp, #0]
100003ba:	9101      	str	r1, [sp, #4]
100003bc:	42b9      	cmp	r1, r7
100003be:	d845      	bhi.n	1000044c <__udivmoddi4+0xcc>
100003c0:	d101      	bne.n	100003c6 <__udivmoddi4+0x46>
100003c2:	42b0      	cmp	r0, r6
100003c4:	d842      	bhi.n	1000044c <__udivmoddi4+0xcc>
100003c6:	9b00      	ldr	r3, [sp, #0]
100003c8:	9c01      	ldr	r4, [sp, #4]
100003ca:	2001      	movs	r0, #1
100003cc:	2100      	movs	r1, #0
100003ce:	9a03      	ldr	r2, [sp, #12]
100003d0:	1af6      	subs	r6, r6, r3
100003d2:	41a7      	sbcs	r7, r4
100003d4:	f7ff ff98 	bl	10000308 <__aeabi_llsl>
100003d8:	0004      	movs	r4, r0
100003da:	000d      	movs	r5, r1
100003dc:	9b03      	ldr	r3, [sp, #12]
100003de:	2b00      	cmp	r3, #0
100003e0:	d02b      	beq.n	1000043a <__udivmoddi4+0xba>
100003e2:	9b01      	ldr	r3, [sp, #4]
100003e4:	9a00      	ldr	r2, [sp, #0]
100003e6:	07db      	lsls	r3, r3, #31
100003e8:	0850      	lsrs	r0, r2, #1
100003ea:	4318      	orrs	r0, r3
100003ec:	9b01      	ldr	r3, [sp, #4]
100003ee:	0859      	lsrs	r1, r3, #1
100003f0:	9b03      	ldr	r3, [sp, #12]
100003f2:	469c      	mov	ip, r3
100003f4:	42b9      	cmp	r1, r7
100003f6:	d82c      	bhi.n	10000452 <__udivmoddi4+0xd2>
100003f8:	d101      	bne.n	100003fe <__udivmoddi4+0x7e>
100003fa:	42b0      	cmp	r0, r6
100003fc:	d829      	bhi.n	10000452 <__udivmoddi4+0xd2>
100003fe:	0032      	movs	r2, r6
10000400:	003b      	movs	r3, r7
10000402:	1a12      	subs	r2, r2, r0
10000404:	418b      	sbcs	r3, r1
10000406:	2601      	movs	r6, #1
10000408:	1892      	adds	r2, r2, r2
1000040a:	415b      	adcs	r3, r3
1000040c:	2700      	movs	r7, #0
1000040e:	18b6      	adds	r6, r6, r2
10000410:	415f      	adcs	r7, r3
10000412:	2301      	movs	r3, #1
10000414:	425b      	negs	r3, r3
10000416:	449c      	add	ip, r3
10000418:	4663      	mov	r3, ip
1000041a:	2b00      	cmp	r3, #0
1000041c:	d1ea      	bne.n	100003f4 <__udivmoddi4+0x74>
1000041e:	0030      	movs	r0, r6
10000420:	0039      	movs	r1, r7
10000422:	9a03      	ldr	r2, [sp, #12]
10000424:	f7ff ff64 	bl	100002f0 <__aeabi_llsr>
10000428:	9a03      	ldr	r2, [sp, #12]
1000042a:	19a4      	adds	r4, r4, r6
1000042c:	417d      	adcs	r5, r7
1000042e:	0006      	movs	r6, r0
10000430:	000f      	movs	r7, r1
10000432:	f7ff ff69 	bl	10000308 <__aeabi_llsl>
10000436:	1a24      	subs	r4, r4, r0
10000438:	418d      	sbcs	r5, r1
1000043a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000043c:	2b00      	cmp	r3, #0
1000043e:	d001      	beq.n	10000444 <__udivmoddi4+0xc4>
10000440:	601e      	str	r6, [r3, #0]
10000442:	605f      	str	r7, [r3, #4]
10000444:	0020      	movs	r0, r4
10000446:	0029      	movs	r1, r5
10000448:	b005      	add	sp, #20
1000044a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000044c:	2400      	movs	r4, #0
1000044e:	2500      	movs	r5, #0
10000450:	e7c4      	b.n	100003dc <__udivmoddi4+0x5c>
10000452:	19b6      	adds	r6, r6, r6
10000454:	417f      	adcs	r7, r7
10000456:	e7dc      	b.n	10000412 <__udivmoddi4+0x92>
10000458:	2400      	movs	r4, #0
1000045a:	2500      	movs	r5, #0
1000045c:	e7ed      	b.n	1000043a <__udivmoddi4+0xba>
	...

10000460 <main>:
/* Function prototype ------------------------------------------------------------------------------------------------------------------------------------*/
/* Setup -------------------------------------------------------------------------------------------------------------------------------------------------*/
/* -------------------------------------------------------------------------------------------------------------------------------------------------------*/


void main(void) {	
10000460:	b5f0      	push	{r4, r5, r6, r7, lr}
10000462:	b0b5      	sub	sp, #212	; 0xd4
	
	motor_uSetup();
10000464:	f000 f894 	bl	10000590 <motor_uSetup>
	gprs_vSetup();
10000468:	f000 f9c8 	bl	100007fc <gprs_vSetup>
	led_vSetup();
1000046c:	f000 f906 	bl	1000067c <led_vSetup>
	comm_vSetup();
10000470:	f000 f96e 	bl	10000750 <comm_vSetup>

	motor_vTurnoff(M1A, M1B);
10000474:	2101      	movs	r1, #1
10000476:	2000      	movs	r0, #0
10000478:	f000 f8dc 	bl	10000634 <motor_vTurnoff>
	motor_vTurnoff(M2A, M2B);
1000047c:	2103      	movs	r1, #3
1000047e:	2002      	movs	r0, #2
10000480:	f000 f8d8 	bl	10000634 <motor_vTurnoff>
	motor_vTurnoff(M3A, M3B);
10000484:	2105      	movs	r1, #5
10000486:	2004      	movs	r0, #4
10000488:	f000 f8d4 	bl	10000634 <motor_vTurnoff>
	motor_vTurnoff(M4A, M4B);
1000048c:	2107      	movs	r1, #7
1000048e:	2006      	movs	r0, #6
10000490:	f000 f8d0 	bl	10000634 <motor_vTurnoff>

	printk("started \r\n");
10000494:	4839      	ldr	r0, [pc, #228]	; (1000057c <main+0x11c>)
10000496:	f002 fd0b 	bl	10002eb0 <printk>

	gprs_vDisable();
1000049a:	f002 fcfb 	bl	10002e94 <gprs_vDisable>


	char bff[UART_MESSAGE_SIZE] = "";
1000049e:	2100      	movs	r1, #0
100004a0:	22c8      	movs	r2, #200	; 0xc8
100004a2:	a802      	add	r0, sp, #8
100004a4:	9101      	str	r1, [sp, #4]

	while (true) {

		comm_vGetMessage(UART0, bff, K_FOREVER);
100004a6:	2401      	movs	r4, #1
100004a8:	4264      	negs	r4, r4
100004aa:	17e5      	asrs	r5, r4, #31
	char bff[UART_MESSAGE_SIZE] = "";
100004ac:	f002 ff81 	bl	100033b2 <memset>
		comm_vGetMessage(UART0, bff, K_FOREVER);
100004b0:	0022      	movs	r2, r4
100004b2:	002b      	movs	r3, r5
100004b4:	2000      	movs	r0, #0
100004b6:	a901      	add	r1, sp, #4
100004b8:	f000 f900 	bl	100006bc <comm_vGetMessage>

		comm_uSendStringLn(UART0, bff);
100004bc:	2000      	movs	r0, #0
100004be:	a901      	add	r1, sp, #4
100004c0:	f000 f916 	bl	100006f0 <comm_uSendStringLn>

		if (textp_bFindString(bff, "toFront") ) { 
100004c4:	492e      	ldr	r1, [pc, #184]	; (10000580 <main+0x120>)
100004c6:	a801      	add	r0, sp, #4
100004c8:	f002 fce9 	bl	10002e9e <textp_bFindString>
100004cc:	1e06      	subs	r6, r0, #0
100004ce:	d010      	beq.n	100004f2 <main+0x92>

			motor_vToFront(M1A, M1B);
100004d0:	2101      	movs	r1, #1
100004d2:	2000      	movs	r0, #0
100004d4:	f000 f88e 	bl	100005f4 <motor_vToFront>
			motor_vToFront(M2A, M2B);
100004d8:	2103      	movs	r1, #3
100004da:	2002      	movs	r0, #2
100004dc:	f000 f88a 	bl	100005f4 <motor_vToFront>
		} else if (textp_bFindString(bff, "turnRight") ) {
		
			motor_vToBack(M1A, M1B);
			motor_vToBack(M2A, M2B);

			motor_vToFront(M3A, M3B);
100004e0:	2105      	movs	r1, #5
100004e2:	2004      	movs	r0, #4
100004e4:	f000 f886 	bl	100005f4 <motor_vToFront>
			motor_vToFront(M4A, M4B);
100004e8:	2107      	movs	r1, #7
100004ea:	2006      	movs	r0, #6
100004ec:	f000 f882 	bl	100005f4 <motor_vToFront>
100004f0:	e7de      	b.n	100004b0 <main+0x50>
		} else if (textp_bFindString(bff, "toBack") ) {
100004f2:	4924      	ldr	r1, [pc, #144]	; (10000584 <main+0x124>)
100004f4:	a801      	add	r0, sp, #4
100004f6:	f002 fcd2 	bl	10002e9e <textp_bFindString>
100004fa:	1e07      	subs	r7, r0, #0
100004fc:	d010      	beq.n	10000520 <main+0xc0>
			motor_vToBack(M1A, M1B);
100004fe:	2101      	movs	r1, #1
10000500:	0030      	movs	r0, r6
10000502:	f000 f887 	bl	10000614 <motor_vToBack>
			motor_vToBack(M2A, M2B);
10000506:	2103      	movs	r1, #3
10000508:	2002      	movs	r0, #2
1000050a:	f000 f883 	bl	10000614 <motor_vToBack>
			motor_vToBack(M3A, M3B);
1000050e:	2105      	movs	r1, #5
10000510:	2004      	movs	r0, #4
10000512:	f000 f87f 	bl	10000614 <motor_vToBack>
			motor_vToBack(M4A, M4B);
10000516:	2107      	movs	r1, #7
10000518:	2006      	movs	r0, #6
1000051a:	f000 f87b 	bl	10000614 <motor_vToBack>
1000051e:	e7c7      	b.n	100004b0 <main+0x50>
		} else if (textp_bFindString(bff, "turnLeft") ) {
10000520:	4919      	ldr	r1, [pc, #100]	; (10000588 <main+0x128>)
10000522:	a801      	add	r0, sp, #4
10000524:	f002 fcbb 	bl	10002e9e <textp_bFindString>
10000528:	1e06      	subs	r6, r0, #0
1000052a:	d008      	beq.n	1000053e <main+0xde>
			motor_vToFront(M1A, M1B);
1000052c:	0038      	movs	r0, r7
1000052e:	2101      	movs	r1, #1
10000530:	f000 f860 	bl	100005f4 <motor_vToFront>
			motor_vToFront(M2A, M2B);
10000534:	2103      	movs	r1, #3
10000536:	2002      	movs	r0, #2
10000538:	f000 f85c 	bl	100005f4 <motor_vToFront>
1000053c:	e7e7      	b.n	1000050e <main+0xae>
		} else if (textp_bFindString(bff, "turnRight") ) {
1000053e:	4913      	ldr	r1, [pc, #76]	; (1000058c <main+0x12c>)
10000540:	a801      	add	r0, sp, #4
10000542:	f002 fcac 	bl	10002e9e <textp_bFindString>
			motor_vToBack(M1A, M1B);
10000546:	2101      	movs	r1, #1
		} else if (textp_bFindString(bff, "turnRight") ) {
10000548:	2800      	cmp	r0, #0
1000054a:	d007      	beq.n	1000055c <main+0xfc>
			motor_vToBack(M1A, M1B);
1000054c:	0030      	movs	r0, r6
1000054e:	f000 f861 	bl	10000614 <motor_vToBack>
			motor_vToBack(M2A, M2B);
10000552:	2103      	movs	r1, #3
10000554:	2002      	movs	r0, #2
10000556:	f000 f85d 	bl	10000614 <motor_vToBack>
1000055a:	e7c1      	b.n	100004e0 <main+0x80>
		
		} else /*if (textp_bFindString(bff,"turnoff") )*/ {


			motor_vTurnoff(M1A, M1B);
1000055c:	f000 f86a 	bl	10000634 <motor_vTurnoff>
			motor_vTurnoff(M2A, M2B);
10000560:	2103      	movs	r1, #3
10000562:	2002      	movs	r0, #2
10000564:	f000 f866 	bl	10000634 <motor_vTurnoff>
			motor_vTurnoff(M3A, M3B);
10000568:	2105      	movs	r1, #5
1000056a:	2004      	movs	r0, #4
1000056c:	f000 f862 	bl	10000634 <motor_vTurnoff>
			motor_vTurnoff(M4A, M4B);
10000570:	2107      	movs	r1, #7
10000572:	2006      	movs	r0, #6
10000574:	f000 f85e 	bl	10000634 <motor_vTurnoff>
	while (true) {
10000578:	e79a      	b.n	100004b0 <main+0x50>
1000057a:	46c0      	nop			; (mov r8, r8)
1000057c:	10004290 	.word	0x10004290
10000580:	1000429b 	.word	0x1000429b
10000584:	100042a3 	.word	0x100042a3
10000588:	100042aa 	.word	0x100042aa
1000058c:	100042b3 	.word	0x100042b3

10000590 <motor_uSetup>:
	GPIO_DT_SPEC_GET(M4B_NODE, gpios)
};

/* -------------------------------------------------------------------------------------------------------------------------------------------------------*/

uint8_t motor_uSetup(void){
10000590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10000592:	4c16      	ldr	r4, [pc, #88]	; (100005ec <motor_uSetup+0x5c>)

	for(uint8_t i = M1A; i<QTY_MOTORS; i++ ){
		if (!device_is_ready(scxMotors[i].port)) return 1;
10000594:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
10000596:	f003 fae6 	bl	10003b66 <z_device_is_ready>
1000059a:	2800      	cmp	r0, #0
1000059c:	d024      	beq.n	100005e8 <motor_uSetup+0x58>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
1000059e:	22c0      	movs	r2, #192	; 0xc0
				  spec->pin,
				  spec->dt_flags | extra_flags);
100005a0:	88e7      	ldrh	r7, [r4, #6]
	return gpio_pin_configure(spec->port,
100005a2:	02d2      	lsls	r2, r2, #11
100005a4:	433a      	orrs	r2, r7
100005a6:	6820      	ldr	r0, [r4, #0]
100005a8:	7921      	ldrb	r1, [r4, #4]
100005aa:	9201      	str	r2, [sp, #4]
		data->invert |= (gpio_port_pins_t)BIT(pin);
100005ac:	2601      	movs	r6, #1
	const struct gpio_driver_api *api =
100005ae:	6883      	ldr	r3, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
100005b0:	408e      	lsls	r6, r1
	const struct gpio_driver_api *api =
100005b2:	469c      	mov	ip, r3
	struct gpio_driver_data *data =
100005b4:	6903      	ldr	r3, [r0, #16]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
100005b6:	681d      	ldr	r5, [r3, #0]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
100005b8:	002a      	movs	r2, r5
100005ba:	43b2      	bics	r2, r6
100005bc:	9200      	str	r2, [sp, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
100005be:	2201      	movs	r2, #1
100005c0:	4217      	tst	r7, r2
100005c2:	d001      	beq.n	100005c8 <motor_uSetup+0x38>
		data->invert |= (gpio_port_pins_t)BIT(pin);
100005c4:	432e      	orrs	r6, r5
100005c6:	9600      	str	r6, [sp, #0]
100005c8:	9a00      	ldr	r2, [sp, #0]
100005ca:	601a      	str	r2, [r3, #0]
	return api->pin_configure(port, pin, flags);
100005cc:	4663      	mov	r3, ip
100005ce:	9a01      	ldr	r2, [sp, #4]
100005d0:	681b      	ldr	r3, [r3, #0]
100005d2:	4798      	blx	r3
		
		gpio_pin_configure_dt(&scxMotors[i], GPIO_OUTPUT_LOW);
		gpio_pin_set_dt(&scxMotors[i], false);
100005d4:	0020      	movs	r0, r4
100005d6:	2100      	movs	r1, #0
100005d8:	f002 fbcf 	bl	10002d7a <gpio_pin_set_dt.isra.0>
	for(uint8_t i = M1A; i<QTY_MOTORS; i++ ){
100005dc:	4b04      	ldr	r3, [pc, #16]	; (100005f0 <motor_uSetup+0x60>)
100005de:	3408      	adds	r4, #8
100005e0:	42a3      	cmp	r3, r4
100005e2:	d1d7      	bne.n	10000594 <motor_uSetup+0x4>
	}

	return 0;
100005e4:	2000      	movs	r0, #0
}
100005e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (!device_is_ready(scxMotors[i].port)) return 1;
100005e8:	2001      	movs	r0, #1
100005ea:	e7fc      	b.n	100005e6 <motor_uSetup+0x56>
100005ec:	100040dc 	.word	0x100040dc
100005f0:	1000411c 	.word	0x1000411c

100005f4 <motor_vToFront>:



void motor_vToFront( motors_gpio mxa, motors_gpio mxb  ){
100005f4:	b570      	push	{r4, r5, r6, lr}
100005f6:	000c      	movs	r4, r1
	gpio_pin_set_dt(&scxMotors[mxa], true);
100005f8:	4d05      	ldr	r5, [pc, #20]	; (10000610 <motor_vToFront+0x1c>)
100005fa:	00c0      	lsls	r0, r0, #3
100005fc:	1828      	adds	r0, r5, r0
100005fe:	2101      	movs	r1, #1
10000600:	f002 fbbb 	bl	10002d7a <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(&scxMotors[mxb], false);
10000604:	00e0      	lsls	r0, r4, #3
10000606:	1828      	adds	r0, r5, r0
10000608:	2100      	movs	r1, #0
1000060a:	f002 fbb6 	bl	10002d7a <gpio_pin_set_dt.isra.0>
}
1000060e:	bd70      	pop	{r4, r5, r6, pc}
10000610:	100040dc 	.word	0x100040dc

10000614 <motor_vToBack>:

void motor_vToBack( motors_gpio mxa, motors_gpio mxb ){
10000614:	b570      	push	{r4, r5, r6, lr}
10000616:	000c      	movs	r4, r1
	gpio_pin_set_dt(&scxMotors[mxa], false);
10000618:	4d05      	ldr	r5, [pc, #20]	; (10000630 <motor_vToBack+0x1c>)
1000061a:	00c0      	lsls	r0, r0, #3
1000061c:	1828      	adds	r0, r5, r0
1000061e:	2100      	movs	r1, #0
10000620:	f002 fbab 	bl	10002d7a <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(&scxMotors[mxb], true);
10000624:	00e0      	lsls	r0, r4, #3
10000626:	1828      	adds	r0, r5, r0
10000628:	2101      	movs	r1, #1
1000062a:	f002 fba6 	bl	10002d7a <gpio_pin_set_dt.isra.0>
}
1000062e:	bd70      	pop	{r4, r5, r6, pc}
10000630:	100040dc 	.word	0x100040dc

10000634 <motor_vTurnoff>:
void motor_vToStop( motors_gpio mxa, motors_gpio mxb ){
	gpio_pin_set_dt(&scxMotors[mxa], true);
	gpio_pin_set_dt(&scxMotors[mxb], true);
}

void motor_vTurnoff( motors_gpio mxa, motors_gpio mxb ){
10000634:	b570      	push	{r4, r5, r6, lr}
10000636:	000c      	movs	r4, r1
	gpio_pin_set_dt(&scxMotors[mxa], false);
10000638:	4d05      	ldr	r5, [pc, #20]	; (10000650 <motor_vTurnoff+0x1c>)
1000063a:	00c0      	lsls	r0, r0, #3
1000063c:	1828      	adds	r0, r5, r0
1000063e:	2100      	movs	r1, #0
10000640:	f002 fb9b 	bl	10002d7a <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(&scxMotors[mxb], false);
10000644:	00e0      	lsls	r0, r4, #3
10000646:	1828      	adds	r0, r5, r0
10000648:	2100      	movs	r1, #0
1000064a:	f002 fb96 	bl	10002d7a <gpio_pin_set_dt.isra.0>
}
1000064e:	bd70      	pop	{r4, r5, r6, pc}
10000650:	100040dc 	.word	0x100040dc

10000654 <ping_work_handler>:
void led_timer_handler(struct k_timer *timer_id) {
	led_vPing();

}

void ping_work_handler( struct k_work *work ){
10000654:	b510      	push	{r4, lr}
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
10000656:	4c08      	ldr	r4, [pc, #32]	; (10000678 <ping_work_handler+0x24>)
10000658:	2201      	movs	r2, #1
1000065a:	2119      	movs	r1, #25
1000065c:	0020      	movs	r0, r4
1000065e:	f002 fba3 	bl	10002da8 <gpio_pin_set.isra.0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
10000662:	2100      	movs	r1, #0
10000664:	20c8      	movs	r0, #200	; 0xc8
10000666:	f002 f95f 	bl	10002928 <z_impl_k_sleep>
1000066a:	2200      	movs	r2, #0
1000066c:	2119      	movs	r1, #25
1000066e:	0020      	movs	r0, r4
10000670:	f002 fb9a 	bl	10002da8 <gpio_pin_set.isra.0>
	gpio_pin_set_dt(&led, true);
	k_sleep(K_MSEC(20));
	gpio_pin_set_dt(&led, false);
}
10000674:	bd10      	pop	{r4, pc}
10000676:	46c0      	nop			; (mov r8, r8)
10000678:	10003f98 	.word	0x10003f98

1000067c <led_vSetup>:
void led_vSetup(void){
1000067c:	b510      	push	{r4, lr}
1000067e:	4c09      	ldr	r4, [pc, #36]	; (100006a4 <led_vSetup+0x28>)
10000680:	0020      	movs	r0, r4
10000682:	f003 fa70 	bl	10003b66 <z_device_is_ready>
	if (!device_is_ready(led.port))	 return;
10000686:	2800      	cmp	r0, #0
10000688:	d00b      	beq.n	100006a2 <led_vSetup+0x26>
	struct gpio_driver_data *data =
1000068a:	6922      	ldr	r2, [r4, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
1000068c:	4b06      	ldr	r3, [pc, #24]	; (100006a8 <led_vSetup+0x2c>)
1000068e:	6810      	ldr	r0, [r2, #0]
	const struct gpio_driver_api *api =
10000690:	68a1      	ldr	r1, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10000692:	4003      	ands	r3, r0
10000694:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
10000696:	22a0      	movs	r2, #160	; 0xa0
10000698:	680b      	ldr	r3, [r1, #0]
1000069a:	0020      	movs	r0, r4
1000069c:	2119      	movs	r1, #25
1000069e:	0312      	lsls	r2, r2, #12
100006a0:	4798      	blx	r3
}
100006a2:	bd10      	pop	{r4, pc}
100006a4:	10003f98 	.word	0x10003f98
100006a8:	fdffffff 	.word	0xfdffffff

100006ac <led_vPing>:
void led_vPing(void){
100006ac:	b510      	push	{r4, lr}
	k_work_submit(&ping_work);
100006ae:	4802      	ldr	r0, [pc, #8]	; (100006b8 <led_vPing+0xc>)
100006b0:	f001 fe8c 	bl	100023cc <k_work_submit>
}
100006b4:	bd10      	pop	{r4, pc}
100006b6:	46c0      	nop			; (mov r8, r8)
100006b8:	20000000 	.word	0x20000000

100006bc <comm_vGetMessage>:

	uart_irq_callback_user_data_set(uart_d[UART1].dev, uart1_cb, NULL);
	uart_irq_rx_enable(uart_d[UART1].dev);
}

void comm_vGetMessage(uart_device dev, char *msg, k_timeout_t timeout){
100006bc:	b510      	push	{r4, lr}
	k_msgq_get(uart_d[dev].msgq, msg, timeout);
100006be:	24d8      	movs	r4, #216	; 0xd8
100006c0:	4344      	muls	r4, r0
100006c2:	4803      	ldr	r0, [pc, #12]	; (100006d0 <comm_vGetMessage+0x14>)
100006c4:	1900      	adds	r0, r0, r4
100006c6:	30d0      	adds	r0, #208	; 0xd0
100006c8:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
100006ca:	f001 fd01 	bl	100020d0 <z_impl_k_msgq_get>
}
100006ce:	bd10      	pop	{r4, pc}
100006d0:	20000010 	.word	0x20000010

100006d4 <comm_uSendChar>:

void comm_uSendChar( uart_device dev, char c ){
	uart_poll_out(uart_d[dev].dev, c);
100006d4:	23d8      	movs	r3, #216	; 0xd8
100006d6:	4343      	muls	r3, r0
100006d8:	4804      	ldr	r0, [pc, #16]	; (100006ec <comm_uSendChar+0x18>)
void comm_uSendChar( uart_device dev, char c ){
100006da:	b510      	push	{r4, lr}
	uart_poll_out(uart_d[dev].dev, c);
100006dc:	18c0      	adds	r0, r0, r3
100006de:	30d4      	adds	r0, #212	; 0xd4
100006e0:	6800      	ldr	r0, [r0, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
100006e2:	6883      	ldr	r3, [r0, #8]
100006e4:	685b      	ldr	r3, [r3, #4]
100006e6:	4798      	blx	r3
}
100006e8:	bd10      	pop	{r4, pc}
100006ea:	46c0      	nop			; (mov r8, r8)
100006ec:	20000010 	.word	0x20000010

100006f0 <comm_uSendStringLn>:
	for (size_t i = 0; i < uSize; i++) {
		comm_uSendChar(dev, str[i]);
	}
}

void comm_uSendStringLn( uart_device dev, const char *str ){
100006f0:	b510      	push	{r4, lr}
100006f2:	0004      	movs	r4, r0
	comm_uSendString( dev, str );
100006f4:	f002 fb7c 	bl	10002df0 <comm_uSendString>
	comm_uSendString( dev, "\r\n" );
100006f8:	0020      	movs	r0, r4
100006fa:	4902      	ldr	r1, [pc, #8]	; (10000704 <comm_uSendStringLn+0x14>)
100006fc:	f002 fb78 	bl	10002df0 <comm_uSendString>
}
10000700:	bd10      	pop	{r4, pc}
10000702:	46c0      	nop			; (mov r8, r8)
10000704:	10004298 	.word	0x10004298

10000708 <comm_vMessageSubmit>:
/*-------------------------------------------------------------------- Local Functions -------------------------------------------------------------------*/
/*########################################################################################################################################################*/


void comm_vMessageSubmit(uart_device dev){
	if ( k_msgq_put(uart_d[dev].msgq, uart_d[dev].message, K_NO_WAIT) != 0){
10000708:	21d8      	movs	r1, #216	; 0xd8
1000070a:	4348      	muls	r0, r1
1000070c:	4907      	ldr	r1, [pc, #28]	; (1000072c <comm_vMessageSubmit+0x24>)
void comm_vMessageSubmit(uart_device dev){
1000070e:	b510      	push	{r4, lr}
	if ( k_msgq_put(uart_d[dev].msgq, uart_d[dev].message, K_NO_WAIT) != 0){
10000710:	1809      	adds	r1, r1, r0
10000712:	000c      	movs	r4, r1
10000714:	34d0      	adds	r4, #208	; 0xd0
10000716:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
10000718:	2200      	movs	r2, #0
1000071a:	2300      	movs	r3, #0
1000071c:	f001 fc8a 	bl	10002034 <z_impl_k_msgq_put>
10000720:	2800      	cmp	r0, #0
10000722:	d002      	beq.n	1000072a <comm_vMessageSubmit+0x22>
		k_msgq_cleanup(uart_d[dev].msgq);
10000724:	6820      	ldr	r0, [r4, #0]
10000726:	f003 fa63 	bl	10003bf0 <k_msgq_cleanup>
	}
}
1000072a:	bd10      	pop	{r4, pc}
1000072c:	20000010 	.word	0x20000010

10000730 <comm_vCleanMessage>:

void comm_vCleanMessage(uart_device dev){
	uart_d[dev].position = 0;
10000730:	23d8      	movs	r3, #216	; 0xd8
10000732:	4343      	muls	r3, r0
10000734:	4805      	ldr	r0, [pc, #20]	; (1000074c <comm_vCleanMessage+0x1c>)
10000736:	18c0      	adds	r0, r0, r3
10000738:	0002      	movs	r2, r0
1000073a:	2300      	movs	r3, #0
1000073c:	32cc      	adds	r2, #204	; 0xcc
1000073e:	6013      	str	r3, [r2, #0]

	for (size_t i = 0; i < UART_MESSAGE_SIZE; i++){
		uart_d[dev].message[i] = 0x00;
10000740:	001a      	movs	r2, r3
10000742:	54c2      	strb	r2, [r0, r3]
	for (size_t i = 0; i < UART_MESSAGE_SIZE; i++){
10000744:	3301      	adds	r3, #1
10000746:	2bcc      	cmp	r3, #204	; 0xcc
10000748:	d1fb      	bne.n	10000742 <comm_vCleanMessage+0x12>
	}
}
1000074a:	4770      	bx	lr
1000074c:	20000010 	.word	0x20000010

10000750 <comm_vSetup>:
void comm_vSetup(void){
10000750:	b570      	push	{r4, r5, r6, lr}
	comm_vCleanMessage(UART0);
10000752:	2000      	movs	r0, #0
10000754:	f7ff ffec 	bl	10000730 <comm_vCleanMessage>
	comm_vCleanMessage(UART1);
10000758:	2001      	movs	r0, #1
1000075a:	f7ff ffe9 	bl	10000730 <comm_vCleanMessage>
	uart_irq_callback_user_data_set(uart_d[UART0].dev, uart0_cb, NULL);
1000075e:	4c0a      	ldr	r4, [pc, #40]	; (10000788 <comm_vSetup+0x38>)
10000760:	490a      	ldr	r1, [pc, #40]	; (1000078c <comm_vSetup+0x3c>)
10000762:	0025      	movs	r5, r4
10000764:	35d4      	adds	r5, #212	; 0xd4
10000766:	6828      	ldr	r0, [r5, #0]
10000768:	f002 fb38 	bl	10002ddc <uart_irq_callback_user_data_set.constprop.0>
	uart_irq_rx_enable(uart_d[UART0].dev);
1000076c:	6828      	ldr	r0, [r5, #0]
	uart_irq_callback_user_data_set(uart_d[UART1].dev, uart1_cb, NULL);
1000076e:	25d6      	movs	r5, #214	; 0xd6
10000770:	006d      	lsls	r5, r5, #1
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
10000772:	f002 fb2c 	bl	10002dce <z_impl_uart_irq_rx_enable>
10000776:	5960      	ldr	r0, [r4, r5]
10000778:	4905      	ldr	r1, [pc, #20]	; (10000790 <comm_vSetup+0x40>)
1000077a:	f002 fb2f 	bl	10002ddc <uart_irq_callback_user_data_set.constprop.0>
	uart_irq_rx_enable(uart_d[UART1].dev);
1000077e:	5960      	ldr	r0, [r4, r5]
10000780:	f002 fb25 	bl	10002dce <z_impl_uart_irq_rx_enable>
}
10000784:	bd70      	pop	{r4, r5, r6, pc}
10000786:	46c0      	nop			; (mov r8, r8)
10000788:	20000010 	.word	0x20000010
1000078c:	10002e11 	.word	0x10002e11
10000790:	10002e53 	.word	0x10002e53

10000794 <uart_vBuildMessage>:

// }

void uart_vBuildMessage(uart_device dev, char data){
	
	uart_d[dev].message[uart_d[dev].position++] = data;
10000794:	22d8      	movs	r2, #216	; 0xd8
10000796:	4342      	muls	r2, r0
10000798:	4b0c      	ldr	r3, [pc, #48]	; (100007cc <uart_vBuildMessage+0x38>)
void uart_vBuildMessage(uart_device dev, char data){
1000079a:	b570      	push	{r4, r5, r6, lr}
	uart_d[dev].message[uart_d[dev].position++] = data;
1000079c:	189b      	adds	r3, r3, r2
1000079e:	001d      	movs	r5, r3
100007a0:	35cc      	adds	r5, #204	; 0xcc
void uart_vBuildMessage(uart_device dev, char data){
100007a2:	0004      	movs	r4, r0
	uart_d[dev].message[uart_d[dev].position++] = data;
100007a4:	6828      	ldr	r0, [r5, #0]
100007a6:	1c42      	adds	r2, r0, #1
100007a8:	602a      	str	r2, [r5, #0]
100007aa:	5419      	strb	r1, [r3, r0]



	if( ( uart_d[dev].position >= UART_MESSAGE_SIZE ) || ( data == '\n' ) || ( data == '\r' ) /*|| ( data == UART_END_MESSAGE )*/ ){
100007ac:	2acb      	cmp	r2, #203	; 0xcb
100007ae:	d803      	bhi.n	100007b8 <uart_vBuildMessage+0x24>
100007b0:	290a      	cmp	r1, #10
100007b2:	d001      	beq.n	100007b8 <uart_vBuildMessage+0x24>
100007b4:	290d      	cmp	r1, #13
100007b6:	d107      	bne.n	100007c8 <uart_vBuildMessage+0x34>

		led_vPing();
100007b8:	f7ff ff78 	bl	100006ac <led_vPing>

		comm_vMessageSubmit(dev);
100007bc:	0020      	movs	r0, r4
100007be:	f7ff ffa3 	bl	10000708 <comm_vMessageSubmit>

		comm_vCleanMessage(dev);
100007c2:	0020      	movs	r0, r4
100007c4:	f7ff ffb4 	bl	10000730 <comm_vCleanMessage>
		return;
	}
}
100007c8:	bd70      	pop	{r4, r5, r6, pc}
100007ca:	46c0      	nop			; (mov r8, r8)
100007cc:	20000010 	.word	0x20000010

100007d0 <gpio_pin_set_dt.constprop.0.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
100007d0:	0003      	movs	r3, r0
	const struct gpio_driver_data *const data =
100007d2:	4809      	ldr	r0, [pc, #36]	; (100007f8 <gpio_pin_set_dt.constprop.0.isra.0+0x28>)
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
100007d4:	b510      	push	{r4, lr}
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
100007d6:	6902      	ldr	r2, [r0, #16]
100007d8:	6812      	ldr	r2, [r2, #0]
100007da:	0112      	lsls	r2, r2, #4
100007dc:	d501      	bpl.n	100007e2 <gpio_pin_set_dt.constprop.0.isra.0+0x12>
		value = (value != 0) ? 0 : 1;
100007de:	2201      	movs	r2, #1
100007e0:	4053      	eors	r3, r2
	if (value != 0)	{
100007e2:	2b00      	cmp	r3, #0
100007e4:	d005      	beq.n	100007f2 <gpio_pin_set_dt.constprop.0.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
100007e6:	6883      	ldr	r3, [r0, #8]
100007e8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
100007ea:	2180      	movs	r1, #128	; 0x80
100007ec:	0509      	lsls	r1, r1, #20
100007ee:	4798      	blx	r3
}
100007f0:	bd10      	pop	{r4, pc}
	return api->port_clear_bits_raw(port, pins);
100007f2:	6883      	ldr	r3, [r0, #8]
100007f4:	691b      	ldr	r3, [r3, #16]
100007f6:	e7f8      	b.n	100007ea <gpio_pin_set_dt.constprop.0.isra.0+0x1a>
100007f8:	10003f98 	.word	0x10003f98

100007fc <gprs_vSetup>:
/*########################################################################################################################################################*/
/*-------------------------------------------------------------------- Local Functions -------------------------------------------------------------------*/
/*########################################################################################################################################################*/


void gprs_vSetup(void){
100007fc:	b510      	push	{r4, lr}
100007fe:	4c0b      	ldr	r4, [pc, #44]	; (1000082c <gprs_vSetup+0x30>)
10000800:	0020      	movs	r0, r4
10000802:	f003 f9b0 	bl	10003b66 <z_device_is_ready>
	if (!device_is_ready(gprs_reset.port))	return;
10000806:	2800      	cmp	r0, #0
10000808:	d00e      	beq.n	10000828 <gprs_vSetup+0x2c>
	struct gpio_driver_data *data =
1000080a:	6922      	ldr	r2, [r4, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
1000080c:	4b08      	ldr	r3, [pc, #32]	; (10000830 <gprs_vSetup+0x34>)
1000080e:	6810      	ldr	r0, [r2, #0]
	const struct gpio_driver_api *api =
10000810:	68a1      	ldr	r1, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10000812:	4003      	ands	r3, r0
10000814:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
10000816:	22a0      	movs	r2, #160	; 0xa0
10000818:	680b      	ldr	r3, [r1, #0]
1000081a:	0020      	movs	r0, r4
1000081c:	211b      	movs	r1, #27
1000081e:	0312      	lsls	r2, r2, #12
10000820:	4798      	blx	r3
	
	gpio_pin_configure_dt(&gprs_reset, GPIO_OUTPUT_HIGH);

	gpio_pin_set_dt(&gprs_reset, true);
10000822:	2001      	movs	r0, #1
10000824:	f7ff ffd4 	bl	100007d0 <gpio_pin_set_dt.constprop.0.isra.0>
}
10000828:	bd10      	pop	{r4, pc}
1000082a:	46c0      	nop			; (mov r8, r8)
1000082c:	10003f98 	.word	0x10003f98
10000830:	f7ffffff 	.word	0xf7ffffff

10000834 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
10000834:	680b      	ldr	r3, [r1, #0]
{
10000836:	b510      	push	{r4, lr}
	ctx->count++;
10000838:	3301      	adds	r3, #1
1000083a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
1000083c:	4b01      	ldr	r3, [pc, #4]	; (10000844 <char_out+0x10>)
1000083e:	681b      	ldr	r3, [r3, #0]
10000840:	4798      	blx	r3
}
10000842:	bd10      	pop	{r4, pc}
10000844:	200001c0 	.word	0x200001c0

10000848 <__printk_hook_install>:
	_char_out = fn;
10000848:	4b01      	ldr	r3, [pc, #4]	; (10000850 <__printk_hook_install+0x8>)
1000084a:	6018      	str	r0, [r3, #0]
}
1000084c:	4770      	bx	lr
1000084e:	46c0      	nop			; (mov r8, r8)
10000850:	200001c0 	.word	0x200001c0

10000854 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
10000854:	b507      	push	{r0, r1, r2, lr}
10000856:	000b      	movs	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
10000858:	2100      	movs	r1, #0
{
1000085a:	0002      	movs	r2, r0
		struct out_context ctx = { 0 };
1000085c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
1000085e:	4802      	ldr	r0, [pc, #8]	; (10000868 <vprintk+0x14>)
10000860:	a901      	add	r1, sp, #4
10000862:	f000 f803 	bl	1000086c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
10000866:	bd07      	pop	{r0, r1, r2, pc}
10000868:	10000835 	.word	0x10000835

1000086c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
1000086c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000086e:	001e      	movs	r6, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
10000870:	2700      	movs	r7, #0
{
10000872:	b097      	sub	sp, #92	; 0x5c
10000874:	9005      	str	r0, [sp, #20]
10000876:	9106      	str	r1, [sp, #24]
10000878:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
1000087a:	9b08      	ldr	r3, [sp, #32]
1000087c:	7818      	ldrb	r0, [r3, #0]
1000087e:	2800      	cmp	r0, #0
10000880:	d101      	bne.n	10000886 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
10000882:	0038      	movs	r0, r7
10000884:	e32d      	b.n	10000ee2 <cbvprintf+0x676>
			OUTC(*fp++);
10000886:	9b08      	ldr	r3, [sp, #32]
10000888:	3301      	adds	r3, #1
1000088a:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
1000088c:	2825      	cmp	r0, #37	; 0x25
1000088e:	d00b      	beq.n	100008a8 <cbvprintf+0x3c>
			OUTC(*fp++);
10000890:	9906      	ldr	r1, [sp, #24]
10000892:	9b05      	ldr	r3, [sp, #20]
10000894:	4798      	blx	r3
10000896:	2800      	cmp	r0, #0
10000898:	da00      	bge.n	1000089c <cbvprintf+0x30>
1000089a:	e322      	b.n	10000ee2 <cbvprintf+0x676>
			continue;
1000089c:	0034      	movs	r4, r6
			OUTC(*fp++);
1000089e:	3701      	adds	r7, #1
			continue;
100008a0:	9b07      	ldr	r3, [sp, #28]
100008a2:	0026      	movs	r6, r4
100008a4:	9308      	str	r3, [sp, #32]
100008a6:	e7e8      	b.n	1000087a <cbvprintf+0xe>
		} state = {
100008a8:	ac10      	add	r4, sp, #64	; 0x40
100008aa:	2218      	movs	r2, #24
100008ac:	2100      	movs	r1, #0
100008ae:	0020      	movs	r0, r4
100008b0:	f002 fd7f 	bl	100033b2 <memset>
	if (*sp == '%') {
100008b4:	9b08      	ldr	r3, [sp, #32]
100008b6:	785b      	ldrb	r3, [r3, #1]
100008b8:	2b25      	cmp	r3, #37	; 0x25
100008ba:	d117      	bne.n	100008ec <cbvprintf+0x80>
		conv->specifier = *sp++;
100008bc:	9a08      	ldr	r2, [sp, #32]
100008be:	72e3      	strb	r3, [r4, #11]
100008c0:	3202      	adds	r2, #2
100008c2:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
100008c4:	2201      	movs	r2, #1
100008c6:	ab10      	add	r3, sp, #64	; 0x40
100008c8:	7a59      	ldrb	r1, [r3, #9]
100008ca:	4211      	tst	r1, r2
100008cc:	d100      	bne.n	100008d0 <cbvprintf+0x64>
100008ce:	e175      	b.n	10000bbc <cbvprintf+0x350>
			width = va_arg(ap, int);
100008d0:	0034      	movs	r4, r6
100008d2:	cc04      	ldmia	r4!, {r2}
100008d4:	9203      	str	r2, [sp, #12]
			if (width < 0) {
100008d6:	2a00      	cmp	r2, #0
100008d8:	db00      	blt.n	100008dc <cbvprintf+0x70>
100008da:	e175      	b.n	10000bc8 <cbvprintf+0x35c>
				conv->flag_dash = true;
100008dc:	2004      	movs	r0, #4
100008de:	7a1a      	ldrb	r2, [r3, #8]
100008e0:	4302      	orrs	r2, r0
100008e2:	721a      	strb	r2, [r3, #8]
				width = -width;
100008e4:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
100008e6:	425b      	negs	r3, r3
100008e8:	9303      	str	r3, [sp, #12]
100008ea:	e16d      	b.n	10000bc8 <cbvprintf+0x35c>
100008ec:	2200      	movs	r2, #0
100008ee:	0014      	movs	r4, r2
100008f0:	4694      	mov	ip, r2
100008f2:	0011      	movs	r1, r2
100008f4:	9203      	str	r2, [sp, #12]
		switch (*sp) {
100008f6:	9b07      	ldr	r3, [sp, #28]
100008f8:	781b      	ldrb	r3, [r3, #0]
100008fa:	2b2b      	cmp	r3, #43	; 0x2b
100008fc:	d06f      	beq.n	100009de <cbvprintf+0x172>
100008fe:	d868      	bhi.n	100009d2 <cbvprintf+0x166>
10000900:	2b20      	cmp	r3, #32
10000902:	d072      	beq.n	100009ea <cbvprintf+0x17e>
10000904:	2b23      	cmp	r3, #35	; 0x23
10000906:	d072      	beq.n	100009ee <cbvprintf+0x182>
10000908:	2900      	cmp	r1, #0
1000090a:	d004      	beq.n	10000916 <cbvprintf+0xaa>
1000090c:	2004      	movs	r0, #4
1000090e:	ad10      	add	r5, sp, #64	; 0x40
10000910:	7a29      	ldrb	r1, [r5, #8]
10000912:	4301      	orrs	r1, r0
10000914:	7229      	strb	r1, [r5, #8]
10000916:	4661      	mov	r1, ip
10000918:	2900      	cmp	r1, #0
1000091a:	d006      	beq.n	1000092a <cbvprintf+0xbe>
1000091c:	ad10      	add	r5, sp, #64	; 0x40
1000091e:	7a29      	ldrb	r1, [r5, #8]
10000920:	468c      	mov	ip, r1
10000922:	2108      	movs	r1, #8
10000924:	4660      	mov	r0, ip
10000926:	4301      	orrs	r1, r0
10000928:	7229      	strb	r1, [r5, #8]
1000092a:	2c00      	cmp	r4, #0
1000092c:	d004      	beq.n	10000938 <cbvprintf+0xcc>
1000092e:	2110      	movs	r1, #16
10000930:	ac10      	add	r4, sp, #64	; 0x40
10000932:	7a25      	ldrb	r5, [r4, #8]
10000934:	4329      	orrs	r1, r5
10000936:	7221      	strb	r1, [r4, #8]
10000938:	9903      	ldr	r1, [sp, #12]
1000093a:	2900      	cmp	r1, #0
1000093c:	d004      	beq.n	10000948 <cbvprintf+0xdc>
1000093e:	2120      	movs	r1, #32
10000940:	a810      	add	r0, sp, #64	; 0x40
10000942:	7a04      	ldrb	r4, [r0, #8]
10000944:	4321      	orrs	r1, r4
10000946:	7201      	strb	r1, [r0, #8]
10000948:	2a00      	cmp	r2, #0
1000094a:	d004      	beq.n	10000956 <cbvprintf+0xea>
1000094c:	2240      	movs	r2, #64	; 0x40
1000094e:	a910      	add	r1, sp, #64	; 0x40
10000950:	7a08      	ldrb	r0, [r1, #8]
10000952:	4302      	orrs	r2, r0
10000954:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
10000956:	2144      	movs	r1, #68	; 0x44
10000958:	a810      	add	r0, sp, #64	; 0x40
1000095a:	7a02      	ldrb	r2, [r0, #8]
1000095c:	4011      	ands	r1, r2
1000095e:	2944      	cmp	r1, #68	; 0x44
10000960:	d102      	bne.n	10000968 <cbvprintf+0xfc>
		conv->flag_zero = false;
10000962:	2140      	movs	r1, #64	; 0x40
10000964:	438a      	bics	r2, r1
10000966:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
10000968:	2280      	movs	r2, #128	; 0x80
1000096a:	7a01      	ldrb	r1, [r0, #8]
1000096c:	4252      	negs	r2, r2
1000096e:	430a      	orrs	r2, r1
10000970:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
10000972:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
10000974:	240a      	movs	r4, #10
10000976:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
10000978:	2b2a      	cmp	r3, #42	; 0x2a
1000097a:	d141      	bne.n	10000a00 <cbvprintf+0x194>
		conv->width_star = true;
1000097c:	7a43      	ldrb	r3, [r0, #9]
1000097e:	3101      	adds	r1, #1
10000980:	430b      	orrs	r3, r1
			++sp;
10000982:	3201      	adds	r2, #1
		conv->width_star = true;
10000984:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
10000986:	7814      	ldrb	r4, [r2, #0]
10000988:	2502      	movs	r5, #2
1000098a:	0021      	movs	r1, r4
1000098c:	392e      	subs	r1, #46	; 0x2e
1000098e:	424b      	negs	r3, r1
10000990:	4159      	adcs	r1, r3
10000992:	a810      	add	r0, sp, #64	; 0x40
10000994:	7a43      	ldrb	r3, [r0, #9]
10000996:	0049      	lsls	r1, r1, #1
10000998:	43ab      	bics	r3, r5
1000099a:	4319      	orrs	r1, r3
1000099c:	7241      	strb	r1, [r0, #9]
	if (!conv->prec_present) {
1000099e:	2c2e      	cmp	r4, #46	; 0x2e
100009a0:	d146      	bne.n	10000a30 <cbvprintf+0x1c4>
	if (*sp == '*') {
100009a2:	7853      	ldrb	r3, [r2, #1]
100009a4:	2b2a      	cmp	r3, #42	; 0x2a
100009a6:	d03e      	beq.n	10000a26 <cbvprintf+0x1ba>
	size_t val = 0;
100009a8:	2300      	movs	r3, #0
	++sp;
100009aa:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
100009ac:	3508      	adds	r5, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
100009ae:	7811      	ldrb	r1, [r2, #0]
100009b0:	1c54      	adds	r4, r2, #1
100009b2:	0008      	movs	r0, r1
100009b4:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
100009b6:	2809      	cmp	r0, #9
100009b8:	d961      	bls.n	10000a7e <cbvprintf+0x212>
	conv->prec_value = prec;
100009ba:	a910      	add	r1, sp, #64	; 0x40
100009bc:	9314      	str	r3, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
100009be:	7a08      	ldrb	r0, [r1, #8]
100009c0:	0784      	lsls	r4, r0, #30
			      || (prec != (size_t)conv->prec_value));
100009c2:	4323      	orrs	r3, r4
	conv->unsupported |= ((conv->prec_value < 0)
100009c4:	2402      	movs	r4, #2
100009c6:	0fdb      	lsrs	r3, r3, #31
100009c8:	005b      	lsls	r3, r3, #1
100009ca:	43a0      	bics	r0, r4
100009cc:	4303      	orrs	r3, r0
100009ce:	720b      	strb	r3, [r1, #8]
	return sp;
100009d0:	e02e      	b.n	10000a30 <cbvprintf+0x1c4>
		switch (*sp) {
100009d2:	2b2d      	cmp	r3, #45	; 0x2d
100009d4:	d00e      	beq.n	100009f4 <cbvprintf+0x188>
100009d6:	2b30      	cmp	r3, #48	; 0x30
100009d8:	d196      	bne.n	10000908 <cbvprintf+0x9c>
			conv->flag_zero = true;
100009da:	2201      	movs	r2, #1
100009dc:	e001      	b.n	100009e2 <cbvprintf+0x176>
			conv->flag_plus = true;
100009de:	2301      	movs	r3, #1
100009e0:	469c      	mov	ip, r3
			++sp;
100009e2:	9b07      	ldr	r3, [sp, #28]
100009e4:	3301      	adds	r3, #1
100009e6:	9307      	str	r3, [sp, #28]
	} while (loop);
100009e8:	e785      	b.n	100008f6 <cbvprintf+0x8a>
			conv->flag_space = true;
100009ea:	2401      	movs	r4, #1
100009ec:	e7f9      	b.n	100009e2 <cbvprintf+0x176>
			conv->flag_hash = true;
100009ee:	2301      	movs	r3, #1
100009f0:	9303      	str	r3, [sp, #12]
100009f2:	e7f6      	b.n	100009e2 <cbvprintf+0x176>
		switch (*sp) {
100009f4:	2101      	movs	r1, #1
100009f6:	e7f4      	b.n	100009e2 <cbvprintf+0x176>
		val = 10U * val + *sp++ - '0';
100009f8:	002a      	movs	r2, r5
100009fa:	4361      	muls	r1, r4
100009fc:	3930      	subs	r1, #48	; 0x30
100009fe:	18c9      	adds	r1, r1, r3
10000a00:	7813      	ldrb	r3, [r2, #0]
10000a02:	1c55      	adds	r5, r2, #1
10000a04:	0018      	movs	r0, r3
10000a06:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10000a08:	2809      	cmp	r0, #9
10000a0a:	d9f5      	bls.n	100009f8 <cbvprintf+0x18c>
	if (sp != wp) {
10000a0c:	9b07      	ldr	r3, [sp, #28]
10000a0e:	4293      	cmp	r3, r2
10000a10:	d0b9      	beq.n	10000986 <cbvprintf+0x11a>
		conv->unsupported |= ((conv->width_value < 0)
10000a12:	2402      	movs	r4, #2
		conv->width_value = width;
10000a14:	ab10      	add	r3, sp, #64	; 0x40
		conv->unsupported |= ((conv->width_value < 0)
10000a16:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
10000a18:	9113      	str	r1, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
10000a1a:	0fc9      	lsrs	r1, r1, #31
		conv->unsupported |= ((conv->width_value < 0)
10000a1c:	0049      	lsls	r1, r1, #1
10000a1e:	43a0      	bics	r0, r4
10000a20:	4301      	orrs	r1, r0
10000a22:	7219      	strb	r1, [r3, #8]
10000a24:	e7af      	b.n	10000986 <cbvprintf+0x11a>
		conv->prec_star = true;
10000a26:	2104      	movs	r1, #4
10000a28:	7a43      	ldrb	r3, [r0, #9]
		return ++sp;
10000a2a:	3202      	adds	r2, #2
		conv->prec_star = true;
10000a2c:	430b      	orrs	r3, r1
10000a2e:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
10000a30:	7811      	ldrb	r1, [r2, #0]
		if (*++sp == 'h') {
10000a32:	1c50      	adds	r0, r2, #1
10000a34:	ab10      	add	r3, sp, #64	; 0x40
	switch (*sp) {
10000a36:	296c      	cmp	r1, #108	; 0x6c
10000a38:	d041      	beq.n	10000abe <cbvprintf+0x252>
10000a3a:	d825      	bhi.n	10000a88 <cbvprintf+0x21c>
10000a3c:	2968      	cmp	r1, #104	; 0x68
10000a3e:	d02d      	beq.n	10000a9c <cbvprintf+0x230>
10000a40:	296a      	cmp	r1, #106	; 0x6a
10000a42:	d048      	beq.n	10000ad6 <cbvprintf+0x26a>
10000a44:	294c      	cmp	r1, #76	; 0x4c
10000a46:	d052      	beq.n	10000aee <cbvprintf+0x282>
10000a48:	0010      	movs	r0, r2
	conv->specifier = *sp++;
10000a4a:	7802      	ldrb	r2, [r0, #0]
10000a4c:	1c43      	adds	r3, r0, #1
10000a4e:	a910      	add	r1, sp, #64	; 0x40
10000a50:	9307      	str	r3, [sp, #28]
10000a52:	72ca      	strb	r2, [r1, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000a54:	7a4b      	ldrb	r3, [r1, #9]
	switch (conv->specifier) {
10000a56:	2a78      	cmp	r2, #120	; 0x78
10000a58:	d900      	bls.n	10000a5c <cbvprintf+0x1f0>
10000a5a:	e0a8      	b.n	10000bae <cbvprintf+0x342>
10000a5c:	2a57      	cmp	r2, #87	; 0x57
10000a5e:	d84d      	bhi.n	10000afc <cbvprintf+0x290>
10000a60:	2a41      	cmp	r2, #65	; 0x41
10000a62:	d003      	beq.n	10000a6c <cbvprintf+0x200>
10000a64:	3a45      	subs	r2, #69	; 0x45
10000a66:	2a02      	cmp	r2, #2
10000a68:	d900      	bls.n	10000a6c <cbvprintf+0x200>
10000a6a:	e0a0      	b.n	10000bae <cbvprintf+0x342>
		conv->specifier_cat = SPECIFIER_FP;
10000a6c:	2107      	movs	r1, #7
10000a6e:	aa10      	add	r2, sp, #64	; 0x40
10000a70:	7a93      	ldrb	r3, [r2, #10]
10000a72:	438b      	bics	r3, r1
10000a74:	3903      	subs	r1, #3
10000a76:	430b      	orrs	r3, r1
10000a78:	7293      	strb	r3, [r2, #10]
			unsupported = true;
10000a7a:	2301      	movs	r3, #1
			break;
10000a7c:	e06a      	b.n	10000b54 <cbvprintf+0x2e8>
		val = 10U * val + *sp++ - '0';
10000a7e:	436b      	muls	r3, r5
10000a80:	3b30      	subs	r3, #48	; 0x30
10000a82:	0022      	movs	r2, r4
10000a84:	18cb      	adds	r3, r1, r3
10000a86:	e792      	b.n	100009ae <cbvprintf+0x142>
	switch (*sp) {
10000a88:	2974      	cmp	r1, #116	; 0x74
10000a8a:	d02a      	beq.n	10000ae2 <cbvprintf+0x276>
10000a8c:	297a      	cmp	r1, #122	; 0x7a
10000a8e:	d1db      	bne.n	10000a48 <cbvprintf+0x1dc>
		conv->length_mod = LENGTH_Z;
10000a90:	2178      	movs	r1, #120	; 0x78
10000a92:	7a5a      	ldrb	r2, [r3, #9]
10000a94:	438a      	bics	r2, r1
10000a96:	0011      	movs	r1, r2
10000a98:	2230      	movs	r2, #48	; 0x30
10000a9a:	e00d      	b.n	10000ab8 <cbvprintf+0x24c>
		if (*++sp == 'h') {
10000a9c:	7851      	ldrb	r1, [r2, #1]
10000a9e:	2478      	movs	r4, #120	; 0x78
10000aa0:	2968      	cmp	r1, #104	; 0x68
10000aa2:	d106      	bne.n	10000ab2 <cbvprintf+0x246>
			conv->length_mod = LENGTH_HH;
10000aa4:	7a58      	ldrb	r0, [r3, #9]
10000aa6:	3960      	subs	r1, #96	; 0x60
10000aa8:	43a0      	bics	r0, r4
			conv->length_mod = LENGTH_LL;
10000aaa:	4301      	orrs	r1, r0
10000aac:	7259      	strb	r1, [r3, #9]
			++sp;
10000aae:	1c90      	adds	r0, r2, #2
10000ab0:	e7cb      	b.n	10000a4a <cbvprintf+0x1de>
			conv->length_mod = LENGTH_H;
10000ab2:	2210      	movs	r2, #16
10000ab4:	7a59      	ldrb	r1, [r3, #9]
10000ab6:	43a1      	bics	r1, r4
		conv->length_mod = LENGTH_T;
10000ab8:	430a      	orrs	r2, r1
10000aba:	725a      	strb	r2, [r3, #9]
		break;
10000abc:	e7c5      	b.n	10000a4a <cbvprintf+0x1de>
		if (*++sp == 'l') {
10000abe:	7851      	ldrb	r1, [r2, #1]
10000ac0:	2478      	movs	r4, #120	; 0x78
10000ac2:	296c      	cmp	r1, #108	; 0x6c
10000ac4:	d103      	bne.n	10000ace <cbvprintf+0x262>
			conv->length_mod = LENGTH_LL;
10000ac6:	7a58      	ldrb	r0, [r3, #9]
10000ac8:	394c      	subs	r1, #76	; 0x4c
10000aca:	43a0      	bics	r0, r4
10000acc:	e7ed      	b.n	10000aaa <cbvprintf+0x23e>
			conv->length_mod = LENGTH_L;
10000ace:	7a59      	ldrb	r1, [r3, #9]
10000ad0:	2218      	movs	r2, #24
10000ad2:	43a1      	bics	r1, r4
10000ad4:	e7f0      	b.n	10000ab8 <cbvprintf+0x24c>
		conv->length_mod = LENGTH_J;
10000ad6:	2178      	movs	r1, #120	; 0x78
10000ad8:	7a5a      	ldrb	r2, [r3, #9]
10000ada:	438a      	bics	r2, r1
10000adc:	0011      	movs	r1, r2
10000ade:	2228      	movs	r2, #40	; 0x28
10000ae0:	e7ea      	b.n	10000ab8 <cbvprintf+0x24c>
		conv->length_mod = LENGTH_T;
10000ae2:	2178      	movs	r1, #120	; 0x78
10000ae4:	7a5a      	ldrb	r2, [r3, #9]
10000ae6:	438a      	bics	r2, r1
10000ae8:	0011      	movs	r1, r2
10000aea:	2238      	movs	r2, #56	; 0x38
10000aec:	e7e4      	b.n	10000ab8 <cbvprintf+0x24c>
		conv->unsupported = true;
10000aee:	891a      	ldrh	r2, [r3, #8]
10000af0:	49aa      	ldr	r1, [pc, #680]	; (10000d9c <cbvprintf+0x530>)
10000af2:	4011      	ands	r1, r2
10000af4:	4aaa      	ldr	r2, [pc, #680]	; (10000da0 <cbvprintf+0x534>)
10000af6:	430a      	orrs	r2, r1
10000af8:	811a      	strh	r2, [r3, #8]
		break;
10000afa:	e7a6      	b.n	10000a4a <cbvprintf+0x1de>
	switch (conv->specifier) {
10000afc:	0010      	movs	r0, r2
10000afe:	3858      	subs	r0, #88	; 0x58
10000b00:	2820      	cmp	r0, #32
10000b02:	d854      	bhi.n	10000bae <cbvprintf+0x342>
10000b04:	f7ff fb50 	bl	100001a8 <__gnu_thumb1_case_sqi>
10000b08:	53535333 	.word	0x53535333
10000b0c:	53535353 	.word	0x53535353
10000b10:	3353b253 	.word	0x3353b253
10000b14:	b2b2b211 	.word	0xb2b2b211
10000b18:	53531153 	.word	0x53531153
10000b1c:	33395353 	.word	0x33395353
10000b20:	47535347 	.word	0x47535347
10000b24:	53533353 	.word	0x53533353
10000b28:	33          	.byte	0x33
10000b29:	00          	.byte	0x00
		conv->specifier_cat = SPECIFIER_SINT;
10000b2a:	2407      	movs	r4, #7
10000b2c:	7a88      	ldrb	r0, [r1, #10]
10000b2e:	43a0      	bics	r0, r4
10000b30:	3c06      	subs	r4, #6
		conv->specifier_cat = SPECIFIER_UINT;
10000b32:	4320      	orrs	r0, r4
10000b34:	7288      	strb	r0, [r1, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000b36:	2178      	movs	r1, #120	; 0x78
10000b38:	4019      	ands	r1, r3
10000b3a:	2940      	cmp	r1, #64	; 0x40
10000b3c:	d104      	bne.n	10000b48 <cbvprintf+0x2dc>
			conv->invalid = true;
10000b3e:	2401      	movs	r4, #1
10000b40:	a810      	add	r0, sp, #64	; 0x40
10000b42:	7a03      	ldrb	r3, [r0, #8]
10000b44:	4323      	orrs	r3, r4
10000b46:	7203      	strb	r3, [r0, #8]
	bool unsupported = false;
10000b48:	2300      	movs	r3, #0
		if (conv->specifier == 'c') {
10000b4a:	2a63      	cmp	r2, #99	; 0x63
10000b4c:	d102      	bne.n	10000b54 <cbvprintf+0x2e8>
			unsupported = (conv->length_mod != LENGTH_NONE);
10000b4e:	1e4a      	subs	r2, r1, #1
10000b50:	4191      	sbcs	r1, r2
10000b52:	b2cb      	uxtb	r3, r1
	conv->unsupported |= unsupported;
10000b54:	aa10      	add	r2, sp, #64	; 0x40
10000b56:	7a11      	ldrb	r1, [r2, #8]
10000b58:	0788      	lsls	r0, r1, #30
10000b5a:	0fc0      	lsrs	r0, r0, #31
10000b5c:	4303      	orrs	r3, r0
10000b5e:	2001      	movs	r0, #1
10000b60:	4003      	ands	r3, r0
10000b62:	4083      	lsls	r3, r0
10000b64:	1800      	adds	r0, r0, r0
10000b66:	4381      	bics	r1, r0
10000b68:	430b      	orrs	r3, r1
10000b6a:	7213      	strb	r3, [r2, #8]
	return sp;
10000b6c:	e6aa      	b.n	100008c4 <cbvprintf+0x58>
		conv->specifier_cat = SPECIFIER_UINT;
10000b6e:	2407      	movs	r4, #7
10000b70:	7a88      	ldrb	r0, [r1, #10]
10000b72:	43a0      	bics	r0, r4
10000b74:	0004      	movs	r4, r0
10000b76:	2002      	movs	r0, #2
10000b78:	e7db      	b.n	10000b32 <cbvprintf+0x2c6>
		conv->specifier_cat = SPECIFIER_PTR;
10000b7a:	2007      	movs	r0, #7
10000b7c:	7a8a      	ldrb	r2, [r1, #10]
10000b7e:	4382      	bics	r2, r0
10000b80:	0010      	movs	r0, r2
10000b82:	2203      	movs	r2, #3
10000b84:	4302      	orrs	r2, r0
10000b86:	728a      	strb	r2, [r1, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000b88:	2278      	movs	r2, #120	; 0x78
10000b8a:	4013      	ands	r3, r2
10000b8c:	3b40      	subs	r3, #64	; 0x40
10000b8e:	425a      	negs	r2, r3
10000b90:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
10000b92:	b2db      	uxtb	r3, r3
10000b94:	e7de      	b.n	10000b54 <cbvprintf+0x2e8>
		conv->specifier_cat = SPECIFIER_PTR;
10000b96:	2007      	movs	r0, #7
10000b98:	7a8a      	ldrb	r2, [r1, #10]
10000b9a:	4382      	bics	r2, r0
10000b9c:	0010      	movs	r0, r2
10000b9e:	2203      	movs	r2, #3
10000ba0:	4302      	orrs	r2, r0
10000ba2:	728a      	strb	r2, [r1, #10]
		if (conv->length_mod != LENGTH_NONE) {
10000ba4:	2278      	movs	r2, #120	; 0x78
10000ba6:	4013      	ands	r3, r2
10000ba8:	1e5a      	subs	r2, r3, #1
10000baa:	4193      	sbcs	r3, r2
10000bac:	e7f1      	b.n	10000b92 <cbvprintf+0x326>
		conv->invalid = true;
10000bae:	2101      	movs	r1, #1
10000bb0:	aa10      	add	r2, sp, #64	; 0x40
10000bb2:	7a13      	ldrb	r3, [r2, #8]
10000bb4:	430b      	orrs	r3, r1
10000bb6:	7213      	strb	r3, [r2, #8]
	bool unsupported = false;
10000bb8:	2300      	movs	r3, #0
		break;
10000bba:	e7cb      	b.n	10000b54 <cbvprintf+0x2e8>
		} else if (conv->width_present) {
10000bbc:	7a1a      	ldrb	r2, [r3, #8]
10000bbe:	2a7f      	cmp	r2, #127	; 0x7f
10000bc0:	d910      	bls.n	10000be4 <cbvprintf+0x378>
			width = conv->width_value;
10000bc2:	0034      	movs	r4, r6
10000bc4:	68db      	ldr	r3, [r3, #12]
10000bc6:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
10000bc8:	2304      	movs	r3, #4
10000bca:	aa10      	add	r2, sp, #64	; 0x40
10000bcc:	4219      	tst	r1, r3
10000bce:	d00c      	beq.n	10000bea <cbvprintf+0x37e>
			int arg = va_arg(ap, int);
10000bd0:	cc40      	ldmia	r4!, {r6}
			if (arg < 0) {
10000bd2:	2e00      	cmp	r6, #0
10000bd4:	da0c      	bge.n	10000bf0 <cbvprintf+0x384>
				conv->prec_present = false;
10000bd6:	2102      	movs	r1, #2
10000bd8:	7a53      	ldrb	r3, [r2, #9]
10000bda:	438b      	bics	r3, r1
10000bdc:	7253      	strb	r3, [r2, #9]
		int precision = -1;
10000bde:	2601      	movs	r6, #1
10000be0:	4276      	negs	r6, r6
10000be2:	e005      	b.n	10000bf0 <cbvprintf+0x384>
10000be4:	0034      	movs	r4, r6
		int width = -1;
10000be6:	2301      	movs	r3, #1
10000be8:	e67d      	b.n	100008e6 <cbvprintf+0x7a>
		} else if (conv->prec_present) {
10000bea:	078b      	lsls	r3, r1, #30
10000bec:	d5f7      	bpl.n	10000bde <cbvprintf+0x372>
			precision = conv->prec_value;
10000bee:	6916      	ldr	r6, [r2, #16]
		conv->pad0_value = 0;
10000bf0:	2500      	movs	r5, #0
10000bf2:	aa10      	add	r2, sp, #64	; 0x40
			= (enum length_mod_enum)conv->length_mod;
10000bf4:	7a51      	ldrb	r1, [r2, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
10000bf6:	7a93      	ldrb	r3, [r2, #10]
			= (enum length_mod_enum)conv->length_mod;
10000bf8:	0649      	lsls	r1, r1, #25
			= (enum specifier_cat_enum)conv->specifier_cat;
10000bfa:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10000bfc:	0f09      	lsrs	r1, r1, #28
		enum specifier_cat_enum specifier_cat
10000bfe:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10000c00:	9104      	str	r1, [sp, #16]
		conv->pad0_value = 0;
10000c02:	60d5      	str	r5, [r2, #12]
		conv->pad0_pre_exp = 0;
10000c04:	6115      	str	r5, [r2, #16]
		if (specifier_cat == SPECIFIER_SINT) {
10000c06:	2b01      	cmp	r3, #1
10000c08:	d13a      	bne.n	10000c80 <cbvprintf+0x414>
			switch (length_mod) {
10000c0a:	1ec8      	subs	r0, r1, #3
10000c0c:	2804      	cmp	r0, #4
10000c0e:	d821      	bhi.n	10000c54 <cbvprintf+0x3e8>
10000c10:	f7ff fad4 	bl	100001bc <__gnu_thumb1_case_uqi>
10000c14:	20191903 	.word	0x20191903
10000c18:	20          	.byte	0x20
10000c19:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
10000c1a:	cc08      	ldmia	r4!, {r3}
10000c1c:	6013      	str	r3, [r2, #0]
10000c1e:	17db      	asrs	r3, r3, #31
10000c20:	6053      	str	r3, [r2, #4]
		if (conv->invalid || conv->unsupported) {
10000c22:	aa10      	add	r2, sp, #64	; 0x40
10000c24:	7a13      	ldrb	r3, [r2, #8]
10000c26:	2003      	movs	r0, #3
10000c28:	001d      	movs	r5, r3
10000c2a:	4005      	ands	r5, r0
10000c2c:	4203      	tst	r3, r0
10000c2e:	d069      	beq.n	10000d04 <cbvprintf+0x498>
			OUTS(sp, fp);
10000c30:	9b07      	ldr	r3, [sp, #28]
10000c32:	9a08      	ldr	r2, [sp, #32]
10000c34:	9906      	ldr	r1, [sp, #24]
10000c36:	9805      	ldr	r0, [sp, #20]
10000c38:	f002 fb45 	bl	100032c6 <outs>
10000c3c:	2800      	cmp	r0, #0
10000c3e:	da00      	bge.n	10000c42 <cbvprintf+0x3d6>
10000c40:	e14f      	b.n	10000ee2 <cbvprintf+0x676>
10000c42:	183f      	adds	r7, r7, r0
			continue;
10000c44:	e62c      	b.n	100008a0 <cbvprintf+0x34>
					(sint_value_type)va_arg(ap, intmax_t);
10000c46:	2307      	movs	r3, #7
10000c48:	3407      	adds	r4, #7
10000c4a:	439c      	bics	r4, r3
				value->sint =
10000c4c:	cc0c      	ldmia	r4!, {r2, r3}
10000c4e:	9210      	str	r2, [sp, #64]	; 0x40
10000c50:	9311      	str	r3, [sp, #68]	; 0x44
				break;
10000c52:	e7e6      	b.n	10000c22 <cbvprintf+0x3b6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
10000c54:	cc01      	ldmia	r4!, {r0}
10000c56:	ab10      	add	r3, sp, #64	; 0x40
10000c58:	6010      	str	r0, [r2, #0]
10000c5a:	17c0      	asrs	r0, r0, #31
10000c5c:	6050      	str	r0, [r2, #4]
			if (length_mod == LENGTH_HH) {
10000c5e:	9a04      	ldr	r2, [sp, #16]
10000c60:	2a01      	cmp	r2, #1
10000c62:	d105      	bne.n	10000c70 <cbvprintf+0x404>
				value->sint = (char)value->sint;
10000c64:	9a10      	ldr	r2, [sp, #64]	; 0x40
10000c66:	b2d2      	uxtb	r2, r2
10000c68:	9210      	str	r2, [sp, #64]	; 0x40
10000c6a:	2200      	movs	r2, #0
				value->sint = (short)value->sint;
10000c6c:	605a      	str	r2, [r3, #4]
10000c6e:	e7d8      	b.n	10000c22 <cbvprintf+0x3b6>
			} else if (length_mod == LENGTH_H) {
10000c70:	9a04      	ldr	r2, [sp, #16]
10000c72:	2a02      	cmp	r2, #2
10000c74:	d1d5      	bne.n	10000c22 <cbvprintf+0x3b6>
				value->sint = (short)value->sint;
10000c76:	2100      	movs	r1, #0
10000c78:	5e5a      	ldrsh	r2, [r3, r1]
10000c7a:	601a      	str	r2, [r3, #0]
10000c7c:	17d2      	asrs	r2, r2, #31
10000c7e:	e7f5      	b.n	10000c6c <cbvprintf+0x400>
		} else if (specifier_cat == SPECIFIER_UINT) {
10000c80:	2b02      	cmp	r3, #2
10000c82:	d12e      	bne.n	10000ce2 <cbvprintf+0x476>
			switch (length_mod) {
10000c84:	9b04      	ldr	r3, [sp, #16]
10000c86:	1ed8      	subs	r0, r3, #3
10000c88:	2804      	cmp	r0, #4
10000c8a:	d805      	bhi.n	10000c98 <cbvprintf+0x42c>
10000c8c:	0015      	movs	r5, r2
10000c8e:	f7ff fa95 	bl	100001bc <__gnu_thumb1_case_uqi>
10000c92:	140e      	.short	0x140e
10000c94:	1b14      	.short	0x1b14
10000c96:	1b          	.byte	0x1b
10000c97:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
10000c98:	cc08      	ldmia	r4!, {r3}
10000c9a:	c228      	stmia	r2!, {r3, r5}
			if (length_mod == LENGTH_HH) {
10000c9c:	9b04      	ldr	r3, [sp, #16]
10000c9e:	2b01      	cmp	r3, #1
10000ca0:	d117      	bne.n	10000cd2 <cbvprintf+0x466>
				value->uint = (unsigned char)value->uint;
10000ca2:	9b10      	ldr	r3, [sp, #64]	; 0x40
10000ca4:	b2db      	uxtb	r3, r3
				value->uint = (unsigned short)value->uint;
10000ca6:	9310      	str	r3, [sp, #64]	; 0x40
10000ca8:	2300      	movs	r3, #0
10000caa:	9311      	str	r3, [sp, #68]	; 0x44
10000cac:	e7b9      	b.n	10000c22 <cbvprintf+0x3b6>
				if ((!WCHAR_IS_SIGNED)
10000cae:	2300      	movs	r3, #0
					value->uint = va_arg(ap, unsigned long);
10000cb0:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
10000cb2:	1d20      	adds	r0, r4, #4
					value->uint = va_arg(ap, unsigned long);
10000cb4:	c50c      	stmia	r5!, {r2, r3}
					(uint_value_type)va_arg(ap, size_t);
10000cb6:	0004      	movs	r4, r0
10000cb8:	e7b3      	b.n	10000c22 <cbvprintf+0x3b6>
					(uint_value_type)va_arg(ap,
10000cba:	2307      	movs	r3, #7
10000cbc:	1de0      	adds	r0, r4, #7
10000cbe:	4398      	bics	r0, r3
				value->uint =
10000cc0:	c80c      	ldmia	r0!, {r2, r3}
10000cc2:	9210      	str	r2, [sp, #64]	; 0x40
10000cc4:	9311      	str	r3, [sp, #68]	; 0x44
				break;
10000cc6:	e7f6      	b.n	10000cb6 <cbvprintf+0x44a>
					(uint_value_type)va_arg(ap, size_t);
10000cc8:	cc08      	ldmia	r4!, {r3}
10000cca:	6013      	str	r3, [r2, #0]
10000ccc:	2300      	movs	r3, #0
10000cce:	6053      	str	r3, [r2, #4]
				break;
10000cd0:	e7e4      	b.n	10000c9c <cbvprintf+0x430>
			} else if (length_mod == LENGTH_H) {
10000cd2:	9b04      	ldr	r3, [sp, #16]
10000cd4:	2b02      	cmp	r3, #2
10000cd6:	d1a4      	bne.n	10000c22 <cbvprintf+0x3b6>
				value->uint = (unsigned short)value->uint;
10000cd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
10000cda:	9309      	str	r3, [sp, #36]	; 0x24
10000cdc:	466b      	mov	r3, sp
10000cde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
10000ce0:	e7e1      	b.n	10000ca6 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_FP) {
10000ce2:	2b04      	cmp	r3, #4
10000ce4:	d109      	bne.n	10000cfa <cbvprintf+0x48e>
					(sint_value_type)va_arg(ap, long long);
10000ce6:	2007      	movs	r0, #7
10000ce8:	1de3      	adds	r3, r4, #7
10000cea:	4383      	bics	r3, r0
10000cec:	001c      	movs	r4, r3
				value->dbl = va_arg(ap, double);
10000cee:	6818      	ldr	r0, [r3, #0]
10000cf0:	6859      	ldr	r1, [r3, #4]
					(sint_value_type)va_arg(ap, long long);
10000cf2:	3408      	adds	r4, #8
				value->dbl = va_arg(ap, double);
10000cf4:	6010      	str	r0, [r2, #0]
10000cf6:	6051      	str	r1, [r2, #4]
10000cf8:	e793      	b.n	10000c22 <cbvprintf+0x3b6>
		} else if (specifier_cat == SPECIFIER_PTR) {
10000cfa:	2b03      	cmp	r3, #3
10000cfc:	d191      	bne.n	10000c22 <cbvprintf+0x3b6>
			value->ptr = va_arg(ap, void *);
10000cfe:	cc08      	ldmia	r4!, {r3}
10000d00:	6013      	str	r3, [r2, #0]
10000d02:	e78e      	b.n	10000c22 <cbvprintf+0x3b6>
		switch (conv->specifier) {
10000d04:	7ad0      	ldrb	r0, [r2, #11]
10000d06:	2878      	cmp	r0, #120	; 0x78
10000d08:	d900      	bls.n	10000d0c <cbvprintf+0x4a0>
10000d0a:	e5c9      	b.n	100008a0 <cbvprintf+0x34>
10000d0c:	2862      	cmp	r0, #98	; 0x62
10000d0e:	d821      	bhi.n	10000d54 <cbvprintf+0x4e8>
10000d10:	2825      	cmp	r0, #37	; 0x25
10000d12:	d03b      	beq.n	10000d8c <cbvprintf+0x520>
10000d14:	2858      	cmp	r0, #88	; 0x58
10000d16:	d000      	beq.n	10000d1a <cbvprintf+0x4ae>
10000d18:	e5c2      	b.n	100008a0 <cbvprintf+0x34>
			bps = encode_uint(value->uint, conv, buf, bpe);
10000d1a:	9810      	ldr	r0, [sp, #64]	; 0x40
10000d1c:	9911      	ldr	r1, [sp, #68]	; 0x44
10000d1e:	231e      	movs	r3, #30
10000d20:	aa08      	add	r2, sp, #32
10000d22:	189b      	adds	r3, r3, r2
10000d24:	9300      	str	r3, [sp, #0]
10000d26:	aa12      	add	r2, sp, #72	; 0x48
10000d28:	ab0a      	add	r3, sp, #40	; 0x28
10000d2a:	f002 fa80 	bl	1000322e <encode_uint>
10000d2e:	9004      	str	r0, [sp, #16]
			if (precision >= 0) {
10000d30:	231e      	movs	r3, #30
10000d32:	aa08      	add	r2, sp, #32
10000d34:	189b      	adds	r3, r3, r2
10000d36:	9308      	str	r3, [sp, #32]
10000d38:	2e00      	cmp	r6, #0
10000d3a:	db3f      	blt.n	10000dbc <cbvprintf+0x550>
				conv->flag_zero = false;
10000d3c:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
10000d3e:	9a04      	ldr	r2, [sp, #16]
10000d40:	1a9b      	subs	r3, r3, r2
				conv->flag_zero = false;
10000d42:	aa10      	add	r2, sp, #64	; 0x40
10000d44:	7a11      	ldrb	r1, [r2, #8]
10000d46:	4381      	bics	r1, r0
10000d48:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
10000d4a:	429e      	cmp	r6, r3
10000d4c:	d936      	bls.n	10000dbc <cbvprintf+0x550>
					conv->pad0_value = precision - (int)len;
10000d4e:	1af3      	subs	r3, r6, r3
10000d50:	9313      	str	r3, [sp, #76]	; 0x4c
10000d52:	e033      	b.n	10000dbc <cbvprintf+0x550>
		switch (conv->specifier) {
10000d54:	3863      	subs	r0, #99	; 0x63
10000d56:	2815      	cmp	r0, #21
10000d58:	d900      	bls.n	10000d5c <cbvprintf+0x4f0>
10000d5a:	e5a1      	b.n	100008a0 <cbvprintf+0x34>
10000d5c:	f7ff fa38 	bl	100001d0 <__gnu_thumb1_case_shi>
10000d60:	006f0065 	.word	0x006f0065
10000d64:	fda0fda0 	.word	0xfda0fda0
10000d68:	fda0fda0 	.word	0xfda0fda0
10000d6c:	fda0006f 	.word	0xfda0006f
10000d70:	fda0fda0 	.word	0xfda0fda0
10000d74:	009cfda0 	.word	0x009cfda0
10000d78:	00860084 	.word	0x00860084
10000d7c:	fda0fda0 	.word	0xfda0fda0
10000d80:	fda00022 	.word	0xfda00022
10000d84:	fda00084 	.word	0xfda00084
10000d88:	0084fda0 	.word	0x0084fda0
			OUTC('%');
10000d8c:	9906      	ldr	r1, [sp, #24]
10000d8e:	9b05      	ldr	r3, [sp, #20]
10000d90:	4798      	blx	r3
10000d92:	2800      	cmp	r0, #0
10000d94:	da00      	bge.n	10000d98 <cbvprintf+0x52c>
10000d96:	e0a4      	b.n	10000ee2 <cbvprintf+0x676>
10000d98:	3701      	adds	r7, #1
			break;
10000d9a:	e581      	b.n	100008a0 <cbvprintf+0x34>
10000d9c:	ffff87fd 	.word	0xffff87fd
10000da0:	00004002 	.word	0x00004002
			bps = (const char *)value->ptr;
10000da4:	9b10      	ldr	r3, [sp, #64]	; 0x40
10000da6:	9304      	str	r3, [sp, #16]
			if (precision >= 0) {
10000da8:	2e00      	cmp	r6, #0
10000daa:	db3a      	blt.n	10000e22 <cbvprintf+0x5b6>
				len = strnlen(bps, precision);
10000dac:	0031      	movs	r1, r6
10000dae:	0018      	movs	r0, r3
10000db0:	f002 fadd 	bl	1000336e <strnlen>
		char sign = 0;
10000db4:	2500      	movs	r5, #0
			bpe = bps + len;
10000db6:	9b04      	ldr	r3, [sp, #16]
10000db8:	181b      	adds	r3, r3, r0
10000dba:	9308      	str	r3, [sp, #32]
		if (bps == NULL) {
10000dbc:	9b04      	ldr	r3, [sp, #16]
10000dbe:	2b00      	cmp	r3, #0
10000dc0:	d100      	bne.n	10000dc4 <cbvprintf+0x558>
10000dc2:	e56d      	b.n	100008a0 <cbvprintf+0x34>
		size_t nj_len = (bpe - bps);
10000dc4:	9b08      	ldr	r3, [sp, #32]
10000dc6:	9a04      	ldr	r2, [sp, #16]
10000dc8:	1a9e      	subs	r6, r3, r2
			nj_len += 1U;
10000dca:	002b      	movs	r3, r5
10000dcc:	1e5a      	subs	r2, r3, #1
10000dce:	4193      	sbcs	r3, r2
10000dd0:	18f6      	adds	r6, r6, r3
		if (conv->altform_0c) {
10000dd2:	ab10      	add	r3, sp, #64	; 0x40
10000dd4:	7a9b      	ldrb	r3, [r3, #10]
10000dd6:	06da      	lsls	r2, r3, #27
10000dd8:	d579      	bpl.n	10000ece <cbvprintf+0x662>
			nj_len += 2U;
10000dda:	3602      	adds	r6, #2
		nj_len += conv->pad0_value;
10000ddc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10000dde:	9209      	str	r2, [sp, #36]	; 0x24
10000de0:	18b6      	adds	r6, r6, r2
		if (conv->pad_fp) {
10000de2:	065b      	lsls	r3, r3, #25
10000de4:	d501      	bpl.n	10000dea <cbvprintf+0x57e>
			nj_len += conv->pad0_pre_exp;
10000de6:	9b14      	ldr	r3, [sp, #80]	; 0x50
10000de8:	18f6      	adds	r6, r6, r3
		if (width > 0) {
10000dea:	9b03      	ldr	r3, [sp, #12]
10000dec:	2b00      	cmp	r3, #0
10000dee:	dc00      	bgt.n	10000df2 <cbvprintf+0x586>
10000df0:	e086      	b.n	10000f00 <cbvprintf+0x694>
			width -= (int)nj_len;
10000df2:	1b9b      	subs	r3, r3, r6
10000df4:	9309      	str	r3, [sp, #36]	; 0x24
			if (!conv->flag_dash) {
10000df6:	ab10      	add	r3, sp, #64	; 0x40
10000df8:	7a1b      	ldrb	r3, [r3, #8]
10000dfa:	075a      	lsls	r2, r3, #29
10000dfc:	0fd6      	lsrs	r6, r2, #31
10000dfe:	2a00      	cmp	r2, #0
10000e00:	da00      	bge.n	10000e04 <cbvprintf+0x598>
10000e02:	e0bc      	b.n	10000f7e <cbvprintf+0x712>
				if (conv->flag_zero) {
10000e04:	065b      	lsls	r3, r3, #25
10000e06:	d400      	bmi.n	10000e0a <cbvprintf+0x59e>
10000e08:	e06d      	b.n	10000ee6 <cbvprintf+0x67a>
					if (sign != 0) {
10000e0a:	2d00      	cmp	r5, #0
10000e0c:	d007      	beq.n	10000e1e <cbvprintf+0x5b2>
						OUTC(sign);
10000e0e:	0028      	movs	r0, r5
10000e10:	9906      	ldr	r1, [sp, #24]
10000e12:	9b05      	ldr	r3, [sp, #20]
10000e14:	4798      	blx	r3
10000e16:	2800      	cmp	r0, #0
10000e18:	db63      	blt.n	10000ee2 <cbvprintf+0x676>
						sign = 0;
10000e1a:	0035      	movs	r5, r6
						OUTC(sign);
10000e1c:	3701      	adds	r7, #1
					pad = '0';
10000e1e:	2630      	movs	r6, #48	; 0x30
10000e20:	e062      	b.n	10000ee8 <cbvprintf+0x67c>
				len = strlen(bps);
10000e22:	9804      	ldr	r0, [sp, #16]
10000e24:	f002 fa9b 	bl	1000335e <strlen>
10000e28:	e7c4      	b.n	10000db4 <cbvprintf+0x548>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
10000e2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
10000e2c:	a80a      	add	r0, sp, #40	; 0x28
10000e2e:	7003      	strb	r3, [r0, #0]
			bpe = buf + 1;
10000e30:	2309      	movs	r3, #9
			break;
10000e32:	2500      	movs	r5, #0
			bpe = buf + 1;
10000e34:	aa08      	add	r2, sp, #32
			bps = buf;
10000e36:	9004      	str	r0, [sp, #16]
			bpe = buf + 1;
10000e38:	189b      	adds	r3, r3, r2
			bpe = bps + 5;
10000e3a:	9308      	str	r3, [sp, #32]
10000e3c:	e7c2      	b.n	10000dc4 <cbvprintf+0x558>
				sign = '+';
10000e3e:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
10000e40:	071a      	lsls	r2, r3, #28
10000e42:	d405      	bmi.n	10000e50 <cbvprintf+0x5e4>
			} else if (conv->flag_space) {
10000e44:	2210      	movs	r2, #16
10000e46:	001d      	movs	r5, r3
10000e48:	4015      	ands	r5, r2
10000e4a:	4213      	tst	r3, r2
10000e4c:	d000      	beq.n	10000e50 <cbvprintf+0x5e4>
				sign = ' ';
10000e4e:	2520      	movs	r5, #32
			sint = value->sint;
10000e50:	9a10      	ldr	r2, [sp, #64]	; 0x40
10000e52:	9b11      	ldr	r3, [sp, #68]	; 0x44
			if (sint < 0) {
10000e54:	2b00      	cmp	r3, #0
10000e56:	db00      	blt.n	10000e5a <cbvprintf+0x5ee>
10000e58:	e75f      	b.n	10000d1a <cbvprintf+0x4ae>
				value->uint = (uint_value_type)-sint;
10000e5a:	2100      	movs	r1, #0
10000e5c:	4250      	negs	r0, r2
10000e5e:	4199      	sbcs	r1, r3
				sign = '-';
10000e60:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
10000e62:	9010      	str	r0, [sp, #64]	; 0x40
10000e64:	9111      	str	r1, [sp, #68]	; 0x44
10000e66:	e758      	b.n	10000d1a <cbvprintf+0x4ae>
		switch (conv->specifier) {
10000e68:	2500      	movs	r5, #0
10000e6a:	e756      	b.n	10000d1a <cbvprintf+0x4ae>
			if (value->ptr != NULL) {
10000e6c:	9810      	ldr	r0, [sp, #64]	; 0x40
10000e6e:	ad10      	add	r5, sp, #64	; 0x40
10000e70:	2800      	cmp	r0, #0
10000e72:	d027      	beq.n	10000ec4 <cbvprintf+0x658>
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000e74:	231e      	movs	r3, #30
10000e76:	aa08      	add	r2, sp, #32
10000e78:	189b      	adds	r3, r3, r2
10000e7a:	9300      	str	r3, [sp, #0]
10000e7c:	aa12      	add	r2, sp, #72	; 0x48
10000e7e:	ab0a      	add	r3, sp, #40	; 0x28
10000e80:	2100      	movs	r1, #0
10000e82:	f002 f9d4 	bl	1000322e <encode_uint>
				conv->altform_0c = true;
10000e86:	22ef      	movs	r2, #239	; 0xef
10000e88:	896b      	ldrh	r3, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000e8a:	9004      	str	r0, [sp, #16]
				conv->altform_0c = true;
10000e8c:	401a      	ands	r2, r3
10000e8e:	4b41      	ldr	r3, [pc, #260]	; (10000f94 <cbvprintf+0x728>)
10000e90:	4313      	orrs	r3, r2
10000e92:	816b      	strh	r3, [r5, #10]
		char sign = 0;
10000e94:	2500      	movs	r5, #0
				goto prec_int_pad0;
10000e96:	e74b      	b.n	10000d30 <cbvprintf+0x4c4>
				store_count(conv, value->ptr, count);
10000e98:	6813      	ldr	r3, [r2, #0]
	switch ((enum length_mod_enum)conv->length_mod) {
10000e9a:	9a04      	ldr	r2, [sp, #16]
10000e9c:	2a07      	cmp	r2, #7
10000e9e:	d900      	bls.n	10000ea2 <cbvprintf+0x636>
10000ea0:	e4fe      	b.n	100008a0 <cbvprintf+0x34>
10000ea2:	0010      	movs	r0, r2
10000ea4:	f7ff f98a 	bl	100001bc <__gnu_thumb1_case_uqi>
10000ea8:	0c06040c 	.word	0x0c06040c
10000eac:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
10000eb0:	701f      	strb	r7, [r3, #0]
		break;
10000eb2:	e4f5      	b.n	100008a0 <cbvprintf+0x34>
		*(short *)dp = (short)count;
10000eb4:	801f      	strh	r7, [r3, #0]
		break;
10000eb6:	e4f3      	b.n	100008a0 <cbvprintf+0x34>
		*(intmax_t *)dp = (intmax_t)count;
10000eb8:	17fa      	asrs	r2, r7, #31
10000eba:	601f      	str	r7, [r3, #0]
10000ebc:	605a      	str	r2, [r3, #4]
		break;
10000ebe:	e4ef      	b.n	100008a0 <cbvprintf+0x34>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
10000ec0:	601f      	str	r7, [r3, #0]
		break;
10000ec2:	e4ed      	b.n	100008a0 <cbvprintf+0x34>
			bps = "(nil)";
10000ec4:	4b34      	ldr	r3, [pc, #208]	; (10000f98 <cbvprintf+0x72c>)
10000ec6:	0005      	movs	r5, r0
10000ec8:	9304      	str	r3, [sp, #16]
			bpe = bps + 5;
10000eca:	4b34      	ldr	r3, [pc, #208]	; (10000f9c <cbvprintf+0x730>)
10000ecc:	e7b5      	b.n	10000e3a <cbvprintf+0x5ce>
		} else if (conv->altform_0) {
10000ece:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
10000ed0:	0fd2      	lsrs	r2, r2, #31
10000ed2:	18b6      	adds	r6, r6, r2
10000ed4:	e782      	b.n	10000ddc <cbvprintf+0x570>
					OUTC(pad);
10000ed6:	0030      	movs	r0, r6
10000ed8:	9906      	ldr	r1, [sp, #24]
10000eda:	9b05      	ldr	r3, [sp, #20]
10000edc:	4798      	blx	r3
10000ede:	2800      	cmp	r0, #0
10000ee0:	da04      	bge.n	10000eec <cbvprintf+0x680>
#undef OUTS
#undef OUTC
}
10000ee2:	b017      	add	sp, #92	; 0x5c
10000ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
10000ee6:	2620      	movs	r6, #32
					pad = '0';
10000ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
10000eea:	9303      	str	r3, [sp, #12]
10000eec:	9a03      	ldr	r2, [sp, #12]
10000eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
				while (width-- > 0) {
10000ef0:	0011      	movs	r1, r2
10000ef2:	19db      	adds	r3, r3, r7
10000ef4:	3901      	subs	r1, #1
10000ef6:	1a9b      	subs	r3, r3, r2
10000ef8:	9103      	str	r1, [sp, #12]
10000efa:	2a00      	cmp	r2, #0
10000efc:	dceb      	bgt.n	10000ed6 <cbvprintf+0x66a>
10000efe:	001f      	movs	r7, r3
		if (sign != 0) {
10000f00:	2d00      	cmp	r5, #0
10000f02:	d006      	beq.n	10000f12 <cbvprintf+0x6a6>
			OUTC(sign);
10000f04:	0028      	movs	r0, r5
10000f06:	9906      	ldr	r1, [sp, #24]
10000f08:	9b05      	ldr	r3, [sp, #20]
10000f0a:	4798      	blx	r3
10000f0c:	2800      	cmp	r0, #0
10000f0e:	dbe8      	blt.n	10000ee2 <cbvprintf+0x676>
10000f10:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
10000f12:	ab10      	add	r3, sp, #64	; 0x40
10000f14:	7a9b      	ldrb	r3, [r3, #10]
10000f16:	06da      	lsls	r2, r3, #27
10000f18:	d401      	bmi.n	10000f1e <cbvprintf+0x6b2>
10000f1a:	071b      	lsls	r3, r3, #28
10000f1c:	d506      	bpl.n	10000f2c <cbvprintf+0x6c0>
				OUTC('0');
10000f1e:	2030      	movs	r0, #48	; 0x30
10000f20:	9906      	ldr	r1, [sp, #24]
10000f22:	9b05      	ldr	r3, [sp, #20]
10000f24:	4798      	blx	r3
10000f26:	2800      	cmp	r0, #0
10000f28:	dbdb      	blt.n	10000ee2 <cbvprintf+0x676>
10000f2a:	3701      	adds	r7, #1
			if (conv->altform_0c) {
10000f2c:	ab10      	add	r3, sp, #64	; 0x40
10000f2e:	7a9a      	ldrb	r2, [r3, #10]
10000f30:	06d2      	lsls	r2, r2, #27
10000f32:	d506      	bpl.n	10000f42 <cbvprintf+0x6d6>
				OUTC(conv->specifier);
10000f34:	7ad8      	ldrb	r0, [r3, #11]
10000f36:	9906      	ldr	r1, [sp, #24]
10000f38:	9b05      	ldr	r3, [sp, #20]
10000f3a:	4798      	blx	r3
10000f3c:	2800      	cmp	r0, #0
10000f3e:	dbd0      	blt.n	10000ee2 <cbvprintf+0x676>
10000f40:	3701      	adds	r7, #1
			while (pad_len-- > 0) {
10000f42:	003d      	movs	r5, r7
			pad_len = conv->pad0_value;
10000f44:	9e13      	ldr	r6, [sp, #76]	; 0x4c
			while (pad_len-- > 0) {
10000f46:	19f3      	adds	r3, r6, r7
10000f48:	1b5b      	subs	r3, r3, r5
10000f4a:	2b00      	cmp	r3, #0
10000f4c:	dc1a      	bgt.n	10000f84 <cbvprintf+0x718>
			OUTS(bps, bpe);
10000f4e:	9b08      	ldr	r3, [sp, #32]
10000f50:	9a04      	ldr	r2, [sp, #16]
10000f52:	9906      	ldr	r1, [sp, #24]
10000f54:	9805      	ldr	r0, [sp, #20]
10000f56:	f002 f9b6 	bl	100032c6 <outs>
10000f5a:	2800      	cmp	r0, #0
10000f5c:	dbc1      	blt.n	10000ee2 <cbvprintf+0x676>
10000f5e:	1947      	adds	r7, r0, r5
10000f60:	003d      	movs	r5, r7
		while (width > 0) {
10000f62:	9b03      	ldr	r3, [sp, #12]
10000f64:	195b      	adds	r3, r3, r5
10000f66:	1bdb      	subs	r3, r3, r7
10000f68:	2b00      	cmp	r3, #0
10000f6a:	dc00      	bgt.n	10000f6e <cbvprintf+0x702>
10000f6c:	e498      	b.n	100008a0 <cbvprintf+0x34>
			OUTC(' ');
10000f6e:	2020      	movs	r0, #32
10000f70:	9906      	ldr	r1, [sp, #24]
10000f72:	9b05      	ldr	r3, [sp, #20]
10000f74:	4798      	blx	r3
10000f76:	2800      	cmp	r0, #0
10000f78:	dbb3      	blt.n	10000ee2 <cbvprintf+0x676>
10000f7a:	3701      	adds	r7, #1
			--width;
10000f7c:	e7f1      	b.n	10000f62 <cbvprintf+0x6f6>
			width -= (int)nj_len;
10000f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10000f80:	9303      	str	r3, [sp, #12]
10000f82:	e7bd      	b.n	10000f00 <cbvprintf+0x694>
				OUTC('0');
10000f84:	2030      	movs	r0, #48	; 0x30
10000f86:	9906      	ldr	r1, [sp, #24]
10000f88:	9b05      	ldr	r3, [sp, #20]
10000f8a:	4798      	blx	r3
10000f8c:	2800      	cmp	r0, #0
10000f8e:	dba8      	blt.n	10000ee2 <cbvprintf+0x676>
10000f90:	3501      	adds	r5, #1
10000f92:	e7d8      	b.n	10000f46 <cbvprintf+0x6da>
10000f94:	00007810 	.word	0x00007810
10000f98:	100042bd 	.word	0x100042bd
10000f9c:	100042c2 	.word	0x100042c2

10000fa0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10000fa0:	4901      	ldr	r1, [pc, #4]	; (10000fa8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10000fa2:	2210      	movs	r2, #16
	str	r2, [r1]
10000fa4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
10000fa6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
10000fa8:	e000ed10 	.word	0xe000ed10

10000fac <arch_cpu_idle>:

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
10000fac:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
10000fb0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10000fb2:	b662      	cpsie	i
	isb
10000fb4:	f3bf 8f6f 	isb	sy

	bx	lr
10000fb8:	4770      	bx	lr
10000fba:	46c0      	nop			; (mov r8, r8)

10000fbc <arch_irq_enable>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
10000fbc:	0603      	lsls	r3, r0, #24
10000fbe:	d405      	bmi.n	10000fcc <arch_irq_enable+0x10>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10000fc0:	231f      	movs	r3, #31
10000fc2:	4018      	ands	r0, r3
10000fc4:	3b1e      	subs	r3, #30
10000fc6:	4083      	lsls	r3, r0
10000fc8:	4a01      	ldr	r2, [pc, #4]	; (10000fd0 <arch_irq_enable+0x14>)
10000fca:	6013      	str	r3, [r2, #0]
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
}
10000fcc:	4770      	bx	lr
10000fce:	46c0      	nop			; (mov r8, r8)
10000fd0:	e000e100 	.word	0xe000e100

10000fd4 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
10000fd4:	b570      	push	{r4, r5, r6, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000fd6:	26ff      	movs	r6, #255	; 0xff
10000fd8:	2503      	movs	r5, #3
10000fda:	0032      	movs	r2, r6
10000fdc:	4005      	ands	r5, r0
10000fde:	00ed      	lsls	r5, r5, #3
10000fe0:	40aa      	lsls	r2, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000fe2:	0149      	lsls	r1, r1, #5
10000fe4:	4031      	ands	r1, r6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000fe6:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000fe8:	40a9      	lsls	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
10000fea:	b244      	sxtb	r4, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000fec:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
10000fee:	0600      	lsls	r0, r0, #24
10000ff0:	d40a      	bmi.n	10001008 <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000ff2:	08a3      	lsrs	r3, r4, #2
10000ff4:	24c0      	movs	r4, #192	; 0xc0
10000ff6:	480a      	ldr	r0, [pc, #40]	; (10001020 <z_arm_irq_priority_set+0x4c>)
10000ff8:	009b      	lsls	r3, r3, #2
10000ffa:	181b      	adds	r3, r3, r0
10000ffc:	00a4      	lsls	r4, r4, #2
10000ffe:	5918      	ldr	r0, [r3, r4]
10001000:	4002      	ands	r2, r0
10001002:	4311      	orrs	r1, r2
10001004:	5119      	str	r1, [r3, r4]
}
10001006:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001008:	200f      	movs	r0, #15
1000100a:	4003      	ands	r3, r0
1000100c:	3b08      	subs	r3, #8
1000100e:	4805      	ldr	r0, [pc, #20]	; (10001024 <z_arm_irq_priority_set+0x50>)
10001010:	089b      	lsrs	r3, r3, #2
10001012:	009b      	lsls	r3, r3, #2
10001014:	181b      	adds	r3, r3, r0
10001016:	69d8      	ldr	r0, [r3, #28]
10001018:	4002      	ands	r2, r0
1000101a:	4311      	orrs	r1, r2
1000101c:	61d9      	str	r1, [r3, #28]
1000101e:	e7f2      	b.n	10001006 <z_arm_irq_priority_set+0x32>
10001020:	e000e100 	.word	0xe000e100
10001024:	e000ed00 	.word	0xe000ed00

10001028 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
10001028:	bf30      	wfi
    b z_SysNmiOnReset
1000102a:	e7fd      	b.n	10001028 <z_SysNmiOnReset>

1000102c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
1000102c:	22ff      	movs	r2, #255	; 0xff
1000102e:	4b08      	ldr	r3, [pc, #32]	; (10001050 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
10001030:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10001032:	4393      	bics	r3, r2
10001034:	4a07      	ldr	r2, [pc, #28]	; (10001054 <z_arm_prep_c+0x28>)
10001036:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10001038:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1000103c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10001040:	f000 fec2 	bl	10001dc8 <z_bss_zero>
	z_data_copy();
10001044:	f001 fcf0 	bl	10002a28 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
10001048:	f000 f8f2 	bl	10001230 <z_arm_interrupt_init>
	z_cstart();
1000104c:	f000 fefc 	bl	10001e48 <z_cstart>
10001050:	10000100 	.word	0x10000100
10001054:	e000ed00 	.word	0xe000ed00

10001058 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10001058:	4a08      	ldr	r2, [pc, #32]	; (1000107c <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
1000105a:	4909      	ldr	r1, [pc, #36]	; (10001080 <arch_swap+0x28>)
	_current->arch.basepri = key;
1000105c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
1000105e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
10001060:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
10001062:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10001064:	2380      	movs	r3, #128	; 0x80
10001066:	4907      	ldr	r1, [pc, #28]	; (10001084 <arch_swap+0x2c>)
10001068:	055b      	lsls	r3, r3, #21
1000106a:	6848      	ldr	r0, [r1, #4]
1000106c:	4303      	orrs	r3, r0
1000106e:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
10001070:	b662      	cpsie	i
10001072:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
10001076:	6893      	ldr	r3, [r2, #8]
10001078:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
1000107a:	4770      	bx	lr
1000107c:	2000046c 	.word	0x2000046c
10001080:	1000428c 	.word	0x1000428c
10001084:	e000ed00 	.word	0xe000ed00

10001088 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
10001088:	4913      	ldr	r1, [pc, #76]	; (100010d8 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
1000108a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
1000108c:	4813      	ldr	r0, [pc, #76]	; (100010dc <_thread_irq_disabled+0x22>)
    add r0, r2
1000108e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
10001090:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
10001094:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
10001096:	4643      	mov	r3, r8
    mov r4, r9
10001098:	464c      	mov	r4, r9
    mov r5, r10
1000109a:	4655      	mov	r5, sl
    mov r6, r11
1000109c:	465e      	mov	r6, fp
    mov r7, ip
1000109e:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
100010a0:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
100010a2:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
100010a4:	4f0e      	ldr	r7, [pc, #56]	; (100010e0 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
100010a6:	4e0f      	ldr	r6, [pc, #60]	; (100010e4 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
100010a8:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
100010aa:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
100010ac:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
100010ae:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
100010b0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
100010b2:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
100010b4:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
100010b6:	d100      	bne.n	100010ba <_thread_irq_disabled>
    cpsie i
100010b8:	b662      	cpsie	i

100010ba <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
100010ba:	4c08      	ldr	r4, [pc, #32]	; (100010dc <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
100010bc:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
100010be:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
100010c0:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
100010c2:	4698      	mov	r8, r3
    mov r9, r4
100010c4:	46a1      	mov	r9, r4
    mov r10, r5
100010c6:	46aa      	mov	sl, r5
    mov r11, r6
100010c8:	46b3      	mov	fp, r6
    mov ip, r7
100010ca:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
100010cc:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
100010ce:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
100010d0:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
100010d4:	4770      	bx	lr
100010d6:	0000      	.short	0x0000
    ldr r1, =_kernel
100010d8:	2000046c 	.word	0x2000046c
    ldr r0, =_thread_offset_to_callee_saved
100010dc:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
100010e0:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
100010e4:	08000000 	.word	0x08000000

100010e8 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
100010e8:	2004      	movs	r0, #4
  mov r1, lr
100010ea:	4671      	mov	r1, lr
  tst r1, r0
100010ec:	4201      	tst	r1, r0
  beq _stack_frame_msp
100010ee:	d002      	beq.n	100010f6 <_stack_frame_msp>
  mrs r0, PSP
100010f0:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
100010f4:	d101      	bne.n	100010fa <_stack_frame_endif>

100010f6 <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
100010f6:	f3ef 8008 	mrs	r0, MSP

100010fa <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
100010fa:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
100010fc:	3902      	subs	r1, #2
    ldrb r1, [r1]
100010fe:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
10001100:	2902      	cmp	r1, #2
    beq _oops
10001102:	d0ff      	beq.n	10001104 <_oops>

10001104 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10001104:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
10001106:	f002 f8f9 	bl	100032fc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
1000110a:	bd01      	pop	{r0, pc}

1000110c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
1000110c:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
1000110e:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
10001110:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
10001112:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
10001114:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
10001116:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
10001118:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
1000111a:	4906      	ldr	r1, [pc, #24]	; (10001134 <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
1000111c:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
1000111e:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
10001120:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
10001122:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
10001124:	2380      	movs	r3, #128	; 0x80
10001126:	045b      	lsls	r3, r3, #17
10001128:	61d3      	str	r3, [r2, #28]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
1000112a:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
1000112c:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
1000112e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
10001130:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
10001132:	bd10      	pop	{r4, pc}
10001134:	10002ec7 	.word	0x10002ec7

10001138 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
10001138:	4b06      	ldr	r3, [pc, #24]	; (10001154 <arch_switch_to_main_thread+0x1c>)
1000113a:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
1000113c:	1c10      	adds	r0, r2, #0
1000113e:	f381 8809 	msr	PSP, r1
10001142:	2100      	movs	r1, #0
10001144:	b662      	cpsie	i
10001146:	f3bf 8f6f 	isb	sy
1000114a:	2200      	movs	r2, #0
1000114c:	2300      	movs	r3, #0
1000114e:	f001 feba 	bl	10002ec6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
10001152:	46c0      	nop			; (mov r8, r8)
10001154:	2000046c 	.word	0x2000046c

10001158 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
10001158:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
1000115a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
1000115e:	4905      	ldr	r1, [pc, #20]	; (10001174 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
10001160:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
10001162:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
10001164:	4904      	ldr	r1, [pc, #16]	; (10001178 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
10001166:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
10001168:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
1000116a:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
1000116c:	bc09      	pop	{r0, r3}
	mov lr, r3
1000116e:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
10001170:	4902      	ldr	r1, [pc, #8]	; (1000117c <_isr_wrapper+0x24>)
	bx r1
10001172:	4708      	bx	r1
	ldr r1, =16
10001174:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
10001178:	10003fe0 	.word	0x10003fe0
	ldr r1, =z_arm_int_exit
1000117c:	10001181 	.word	0x10001181

10001180 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
10001180:	4b04      	ldr	r3, [pc, #16]	; (10001194 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
10001182:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
10001184:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
10001186:	4288      	cmp	r0, r1
	beq _EXIT_EXC
10001188:	d002      	beq.n	10001190 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
1000118a:	4903      	ldr	r1, [pc, #12]	; (10001198 <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
1000118c:	4a03      	ldr	r2, [pc, #12]	; (1000119c <_EXIT_EXC+0xc>)
	str r2, [r1]
1000118e:	600a      	str	r2, [r1, #0]

10001190 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
10001190:	4770      	bx	lr
10001192:	0000      	.short	0x0000
	ldr r3, =_kernel
10001194:	2000046c 	.word	0x2000046c
	ldr r1, =_SCS_ICSR
10001198:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
1000119c:	10000000 	.word	0x10000000

100011a0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
100011a0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
100011a2:	4b1b      	ldr	r3, [pc, #108]	; (10001210 <z_arm_fault+0x70>)
{
100011a4:	000e      	movs	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
100011a6:	685b      	ldr	r3, [r3, #4]
{
100011a8:	b088      	sub	sp, #32
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
100011aa:	05db      	lsls	r3, r3, #23
100011ac:	0ddb      	lsrs	r3, r3, #23
100011ae:	b662      	cpsie	i
100011b0:	f3bf 8f6f 	isb	sy
	*nested_exc = false;
100011b4:	2500      	movs	r5, #0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
100011b6:	0e14      	lsrs	r4, r2, #24
		return NULL;
100011b8:	0029      	movs	r1, r5
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
100011ba:	2cff      	cmp	r4, #255	; 0xff
100011bc:	d109      	bne.n	100011d2 <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
100011be:	3cf3      	subs	r4, #243	; 0xf3
100011c0:	4014      	ands	r4, r2
100011c2:	2c08      	cmp	r4, #8
100011c4:	d005      	beq.n	100011d2 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
100011c6:	0001      	movs	r1, r0
			*nested_exc = true;
100011c8:	3501      	adds	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
100011ca:	0712      	lsls	r2, r2, #28
100011cc:	d501      	bpl.n	100011d2 <z_arm_fault+0x32>
			ptr_esf =  (z_arch_esf_t *)psp;
100011ce:	0031      	movs	r1, r6
	*nested_exc = false;
100011d0:	2500      	movs	r5, #0
	uint32_t reason = K_ERR_CPU_EXCEPTION;
100011d2:	2400      	movs	r4, #0
	switch (fault) {
100011d4:	2b03      	cmp	r3, #3
100011d6:	d106      	bne.n	100011e6 <z_arm_fault+0x46>
	uint16_t fault_insn = *(ret_addr - 1);
100011d8:	698b      	ldr	r3, [r1, #24]
100011da:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
100011dc:	881a      	ldrh	r2, [r3, #0]
100011de:	4b0d      	ldr	r3, [pc, #52]	; (10001214 <z_arm_fault+0x74>)
100011e0:	429a      	cmp	r2, r3
100011e2:	d100      	bne.n	100011e6 <z_arm_fault+0x46>
		reason = esf->basic.r0;
100011e4:	680c      	ldr	r4, [r1, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
100011e6:	2220      	movs	r2, #32
100011e8:	4668      	mov	r0, sp
100011ea:	f002 f8d9 	bl	100033a0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
100011ee:	9b07      	ldr	r3, [sp, #28]
100011f0:	2d00      	cmp	r5, #0
100011f2:	d00a      	beq.n	1000120a <z_arm_fault+0x6a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
100011f4:	05da      	lsls	r2, r3, #23
100011f6:	d102      	bne.n	100011fe <z_arm_fault+0x5e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
100011f8:	4a07      	ldr	r2, [pc, #28]	; (10001218 <z_arm_fault+0x78>)
100011fa:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
100011fc:	9307      	str	r3, [sp, #28]
	}

	z_arm_fatal_error(reason, &esf_copy);
100011fe:	4669      	mov	r1, sp
10001200:	0020      	movs	r0, r4
10001202:	f002 f877 	bl	100032f4 <z_arm_fatal_error>
}
10001206:	b008      	add	sp, #32
10001208:	bd70      	pop	{r4, r5, r6, pc}
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
1000120a:	0a5b      	lsrs	r3, r3, #9
1000120c:	025b      	lsls	r3, r3, #9
1000120e:	e7f5      	b.n	100011fc <z_arm_fault+0x5c>
10001210:	e000ed00 	.word	0xe000ed00
10001214:	0000df02 	.word	0x0000df02
10001218:	000001ff 	.word	0x000001ff

1000121c <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
1000121c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
10001220:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
10001224:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
10001226:	4672      	mov	r2, lr
	bl z_arm_fault
10001228:	f7ff ffba 	bl	100011a0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
1000122c:	bd01      	pop	{r0, pc}
1000122e:	46c0      	nop			; (mov r8, r8)

10001230 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
10001230:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001232:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
10001234:	2200      	movs	r2, #0
10001236:	2603      	movs	r6, #3
10001238:	25ff      	movs	r5, #255	; 0xff
1000123a:	00a4      	lsls	r4, r4, #2
1000123c:	0010      	movs	r0, r2
1000123e:	002f      	movs	r7, r5
10001240:	4030      	ands	r0, r6
10001242:	00c0      	lsls	r0, r0, #3
10001244:	4087      	lsls	r7, r0
10001246:	4905      	ldr	r1, [pc, #20]	; (1000125c <z_arm_interrupt_init+0x2c>)
10001248:	0893      	lsrs	r3, r2, #2
1000124a:	009b      	lsls	r3, r3, #2
1000124c:	185b      	adds	r3, r3, r1
1000124e:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
10001250:	3201      	adds	r2, #1
10001252:	43b9      	bics	r1, r7
10001254:	5119      	str	r1, [r3, r4]
10001256:	2a1a      	cmp	r2, #26
10001258:	d1f0      	bne.n	1000123c <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
1000125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000125c:	e000e100 	.word	0xe000e100

10001260 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10001260:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
10001262:	4807      	ldr	r0, [pc, #28]	; (10001280 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10001264:	4907      	ldr	r1, [pc, #28]	; (10001284 <__start+0x24>)
    adds r0, r0, r1
10001266:	1840      	adds	r0, r0, r1
    msr PSP, r0
10001268:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
1000126c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
10001270:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
10001272:	4308      	orrs	r0, r1
    msr CONTROL, r0
10001274:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
10001278:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
1000127c:	f7ff fed6 	bl	1000102c <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
10001280:	200009b0 	.word	0x200009b0
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10001284:	00000800 	.word	0x00000800

10001288 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
10001288:	4b0a      	ldr	r3, [pc, #40]	; (100012b4 <z_impl_k_thread_abort+0x2c>)
{
1000128a:	b510      	push	{r4, lr}
	if (_current == thread) {
1000128c:	689b      	ldr	r3, [r3, #8]
1000128e:	4283      	cmp	r3, r0
10001290:	d10d      	bne.n	100012ae <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10001292:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
10001296:	2b00      	cmp	r3, #0
10001298:	d009      	beq.n	100012ae <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
1000129a:	2280      	movs	r2, #128	; 0x80
1000129c:	4b06      	ldr	r3, [pc, #24]	; (100012b8 <z_impl_k_thread_abort+0x30>)
1000129e:	0552      	lsls	r2, r2, #21
100012a0:	6859      	ldr	r1, [r3, #4]
100012a2:	430a      	orrs	r2, r1
100012a4:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
100012a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100012a8:	4904      	ldr	r1, [pc, #16]	; (100012bc <z_impl_k_thread_abort+0x34>)
100012aa:	400a      	ands	r2, r1
100012ac:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
100012ae:	f001 fb59 	bl	10002964 <z_thread_abort>
}
100012b2:	bd10      	pop	{r4, pc}
100012b4:	2000046c 	.word	0x2000046c
100012b8:	e000ed00 	.word	0xe000ed00
100012bc:	ffff7fff 	.word	0xffff7fff

100012c0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
100012c0:	4b01      	ldr	r3, [pc, #4]	; (100012c8 <__stdout_hook_install+0x8>)
100012c2:	6018      	str	r0, [r3, #0]
}
100012c4:	4770      	bx	lr
100012c6:	46c0      	nop			; (mov r8, r8)
100012c8:	200001c4 	.word	0x200001c4

100012cc <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100012cc:	4b0e      	ldr	r3, [pc, #56]	; (10001308 <rp2040_init+0x3c>)
100012ce:	4a0f      	ldr	r2, [pc, #60]	; (1000130c <rp2040_init+0x40>)
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
100012d0:	b570      	push	{r4, r5, r6, lr}
100012d2:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100012d4:	4d0e      	ldr	r5, [pc, #56]	; (10001310 <rp2040_init+0x44>)
100012d6:	4b0f      	ldr	r3, [pc, #60]	; (10001314 <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
100012d8:	4c0f      	ldr	r4, [pc, #60]	; (10001318 <rp2040_init+0x4c>)
100012da:	602b      	str	r3, [r5, #0]
100012dc:	0019      	movs	r1, r3
100012de:	68a2      	ldr	r2, [r4, #8]
100012e0:	4391      	bics	r1, r2
100012e2:	d1fb      	bne.n	100012dc <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS));

	clocks_init();
100012e4:	f000 fb3a 	bl	1000195c <clocks_init>
100012e8:	4b0c      	ldr	r3, [pc, #48]	; (1000131c <rp2040_init+0x50>)
100012ea:	602b      	str	r3, [r5, #0]
100012ec:	68a3      	ldr	r3, [r4, #8]
100012ee:	01db      	lsls	r3, r3, #7
100012f0:	3380      	adds	r3, #128	; 0x80
100012f2:	d1fb      	bne.n	100012ec <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
100012f4:	f3ef 8310 	mrs	r3, PRIMASK
100012f8:	b672      	cpsid	i
	if (key != 0U) {
100012fa:	2b00      	cmp	r3, #0
100012fc:	d102      	bne.n	10001304 <rp2040_init+0x38>
	__asm__ volatile(
100012fe:	b662      	cpsie	i
10001300:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
10001304:	2000      	movs	r0, #0
10001306:	bd70      	pop	{r4, r5, r6, pc}
10001308:	4000e000 	.word	0x4000e000
1000130c:	ffffcdbf 	.word	0xffffcdbf
10001310:	4000f000 	.word	0x4000f000
10001314:	003c7ffe 	.word	0x003c7ffe
10001318:	4000c000 	.word	0x4000c000
1000131c:	01ffffff 	.word	0x01ffffff

10001320 <uart_console_init>:
{

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
10001320:	4809      	ldr	r0, [pc, #36]	; (10001348 <uart_console_init+0x28>)
10001322:	4b0a      	ldr	r3, [pc, #40]	; (1000134c <uart_console_init+0x2c>)
{
10001324:	b510      	push	{r4, lr}
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
10001326:	6018      	str	r0, [r3, #0]
10001328:	f002 fc1d 	bl	10003b66 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
1000132c:	2800      	cmp	r0, #0
1000132e:	d008      	beq.n	10001342 <uart_console_init+0x22>
	__stdout_hook_install(console_out);
10001330:	4c07      	ldr	r4, [pc, #28]	; (10001350 <uart_console_init+0x30>)
10001332:	0020      	movs	r0, r4
10001334:	f7ff ffc4 	bl	100012c0 <__stdout_hook_install>
	__printk_hook_install(console_out);
10001338:	0020      	movs	r0, r4
1000133a:	f7ff fa85 	bl	10000848 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
1000133e:	2000      	movs	r0, #0
}
10001340:	bd10      	pop	{r4, pc}
		return -ENODEV;
10001342:	2013      	movs	r0, #19
10001344:	4240      	negs	r0, r0
10001346:	e7fb      	b.n	10001340 <uart_console_init+0x20>
10001348:	10003f80 	.word	0x10003f80
1000134c:	200003c8 	.word	0x200003c8
10001350:	10001355 	.word	0x10001355

10001354 <console_out>:
{
10001354:	b570      	push	{r4, r5, r6, lr}
10001356:	0004      	movs	r4, r0
10001358:	4d07      	ldr	r5, [pc, #28]	; (10001378 <console_out+0x24>)
	if ('\n' == c) {
1000135a:	280a      	cmp	r0, #10
1000135c:	d104      	bne.n	10001368 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
1000135e:	6828      	ldr	r0, [r5, #0]
10001360:	6883      	ldr	r3, [r0, #8]
10001362:	210d      	movs	r1, #13
10001364:	685b      	ldr	r3, [r3, #4]
10001366:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
10001368:	6828      	ldr	r0, [r5, #0]
1000136a:	6883      	ldr	r3, [r0, #8]
1000136c:	b2e1      	uxtb	r1, r4
1000136e:	685b      	ldr	r3, [r3, #4]
10001370:	4798      	blx	r3
}
10001372:	0020      	movs	r0, r4
10001374:	bd70      	pop	{r4, r5, r6, pc}
10001376:	46c0      	nop			; (mov r8, r8)
10001378:	200003c8 	.word	0x200003c8

1000137c <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
1000137c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000137e:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10001380:	2400      	movs	r4, #0
		status_reg = &irq_ctrl_base->ints[pin / 8];
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10001382:	270f      	movs	r7, #15
	struct gpio_rpi_data *data = dev->data;
10001384:	6903      	ldr	r3, [r0, #16]
10001386:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
10001388:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
1000138a:	4a14      	ldr	r2, [pc, #80]	; (100013dc <gpio_rpi_isr+0x60>)
1000138c:	3308      	adds	r3, #8
1000138e:	009b      	lsls	r3, r3, #2
10001390:	589b      	ldr	r3, [r3, r2]
10001392:	2207      	movs	r2, #7
10001394:	4022      	ands	r2, r4
10001396:	0092      	lsls	r2, r2, #2
10001398:	40d3      	lsrs	r3, r2
		if (events) {
1000139a:	423b      	tst	r3, r7
1000139c:	d103      	bne.n	100013a6 <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
1000139e:	3401      	adds	r4, #1
100013a0:	2c1e      	cmp	r4, #30
100013a2:	d1f1      	bne.n	10001388 <gpio_rpi_isr+0xc>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
100013a4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
100013a6:	0039      	movs	r1, r7
100013a8:	0020      	movs	r0, r4
100013aa:	f000 fc1d 	bl	10001be8 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
100013ae:	9b01      	ldr	r3, [sp, #4]
100013b0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
100013b2:	2900      	cmp	r1, #0
100013b4:	d0f3      	beq.n	1000139e <gpio_rpi_isr+0x22>
100013b6:	2301      	movs	r3, #1
100013b8:	40a3      	lsls	r3, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
100013ba:	680d      	ldr	r5, [r1, #0]
100013bc:	9300      	str	r3, [sp, #0]
		if (cb->pin_mask & pins) {
100013be:	688b      	ldr	r3, [r1, #8]
100013c0:	9a00      	ldr	r2, [sp, #0]
100013c2:	9800      	ldr	r0, [sp, #0]
100013c4:	401a      	ands	r2, r3
100013c6:	4203      	tst	r3, r0
100013c8:	d002      	beq.n	100013d0 <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
100013ca:	0030      	movs	r0, r6
100013cc:	684b      	ldr	r3, [r1, #4]
100013ce:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
100013d0:	2d00      	cmp	r5, #0
100013d2:	d0e4      	beq.n	1000139e <gpio_rpi_isr+0x22>
100013d4:	0029      	movs	r1, r5
100013d6:	682d      	ldr	r5, [r5, #0]
100013d8:	e7f1      	b.n	100013be <gpio_rpi_isr+0x42>
100013da:	46c0      	nop			; (mov r8, r8)
100013dc:	40014100 	.word	0x40014100

100013e0 <i2c_dw_initialize>:
	.slave_unregister = i2c_dw_slave_unregister,
#endif /* CONFIG_I2C_SLAVE */
};

static int i2c_dw_initialize(const struct device *dev)
{
100013e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct i2c_dw_rom_config * const rom = dev->config;
100013e2:	6847      	ldr	r7, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
100013e4:	6906      	ldr	r6, [r0, #16]
{
100013e6:	0005      	movs	r5, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
100013e8:	2100      	movs	r1, #0
100013ea:	68f8      	ldr	r0, [r7, #12]
100013ec:	aa01      	add	r2, sp, #4
100013ee:	f000 fa31 	bl	10001854 <pinctrl_lookup_state>
100013f2:	1e04      	subs	r4, r0, #0
	if (ret < 0) {
100013f4:	db17      	blt.n	10001426 <i2c_dw_initialize+0x46>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
100013f6:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
100013f8:	2200      	movs	r2, #0
100013fa:	7919      	ldrb	r1, [r3, #4]
100013fc:	6818      	ldr	r0, [r3, #0]
100013fe:	f002 fae2 	bl	100039c6 <pinctrl_configure_pins>
10001402:	1e04      	subs	r4, r0, #0
	union ic_con_register ic_con;
	int ret = 0;

#if defined(CONFIG_PINCTRL)
	ret = pinctrl_apply_state(rom->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret) {
10001404:	d10f      	bne.n	10001426 <i2c_dw_initialize+0x46>
	return z_impl_k_sem_init(sem, initial_count, limit);
10001406:	2201      	movs	r2, #1
10001408:	0001      	movs	r1, r0
1000140a:	4252      	negs	r2, r2
1000140c:	0030      	movs	r0, r6
1000140e:	f002 fc06 	bl	10003c1e <z_impl_k_sem_init>
	return (uint32_t)DEVICE_MMIO_GET(dev);
10001412:	686b      	ldr	r3, [r5, #4]
10001414:	681b      	ldr	r3, [r3, #0]

DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)

DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
DEFINE_MM_REG_READ(comp_type, DW_IC_REG_COMP_TYPE, 32)
10001416:	001a      	movs	r2, r3
10001418:	32fc      	adds	r2, #252	; 0xfc
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
1000141a:	6811      	ldr	r1, [r2, #0]

	k_sem_init(&dw->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	uint32_t reg_base = get_regs(dev);

	/* verify that we have a valid DesignWare register first */
	if (read_comp_type(reg_base) != I2C_DW_MAGIC_KEY) {
1000141c:	4a1b      	ldr	r2, [pc, #108]	; (1000148c <i2c_dw_initialize+0xac>)
1000141e:	4291      	cmp	r1, r2
10001420:	d003      	beq.n	1000142a <i2c_dw_initialize+0x4a>
		LOG_DBG("I2C: DesignWare magic key not found, check base "
			    "address. Stopping initialization");
		return -EIO;
10001422:	2405      	movs	r4, #5
10001424:	4264      	negs	r4, r4
	}

	dw->state = I2C_DW_STATE_READY;

	return ret;
}
10001426:	0020      	movs	r0, r4
10001428:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
1000142a:	2206      	movs	r2, #6
1000142c:	681b      	ldr	r3, [r3, #0]
	rom->config_func(dev);
1000142e:	0028      	movs	r0, r5
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
10001430:	4013      	ands	r3, r2
10001432:	3b06      	subs	r3, #6
10001434:	425a      	negs	r2, r3
10001436:	4153      	adcs	r3, r2
10001438:	0032      	movs	r2, r6
1000143a:	3208      	adds	r2, #8
1000143c:	77d3      	strb	r3, [r2, #31]
	rom->config_func(dev);
1000143e:	687b      	ldr	r3, [r7, #4]
10001440:	4798      	blx	r3
	dw->app_config = I2C_MODE_MASTER | i2c_map_dt_bitrate(rom->bitrate);
10001442:	68bb      	ldr	r3, [r7, #8]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
10001444:	4a12      	ldr	r2, [pc, #72]	; (10001490 <i2c_dw_initialize+0xb0>)
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST:
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
10001446:	2106      	movs	r1, #6
	switch (bitrate) {
10001448:	4293      	cmp	r3, r2
1000144a:	d009      	beq.n	10001460 <i2c_dw_initialize+0x80>
1000144c:	d813      	bhi.n	10001476 <i2c_dw_initialize+0x96>
1000144e:	4a11      	ldr	r2, [pc, #68]	; (10001494 <i2c_dw_initialize+0xb4>)
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
10001450:	3904      	subs	r1, #4
	switch (bitrate) {
10001452:	4293      	cmp	r3, r2
10001454:	d004      	beq.n	10001460 <i2c_dw_initialize+0x80>
10001456:	4a10      	ldr	r2, [pc, #64]	; (10001498 <i2c_dw_initialize+0xb8>)
10001458:	1899      	adds	r1, r3, r2
1000145a:	424b      	negs	r3, r1
1000145c:	4159      	adcs	r1, r3
1000145e:	0089      	lsls	r1, r1, #2
10001460:	2310      	movs	r3, #16
10001462:	4319      	orrs	r1, r3
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
10001464:	0028      	movs	r0, r5
	dw->app_config = I2C_MODE_MASTER | i2c_map_dt_bitrate(rom->bitrate);
10001466:	6131      	str	r1, [r6, #16]
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
10001468:	f002 f871 	bl	1000354e <i2c_dw_runtime_configure>
1000146c:	1e04      	subs	r4, r0, #0
1000146e:	d1d8      	bne.n	10001422 <i2c_dw_initialize+0x42>
	dw->state = I2C_DW_STATE_READY;
10001470:	3605      	adds	r6, #5
10001472:	77f0      	strb	r0, [r6, #31]
	return ret;
10001474:	e7d7      	b.n	10001426 <i2c_dw_initialize+0x46>
10001476:	4a09      	ldr	r2, [pc, #36]	; (1000149c <i2c_dw_initialize+0xbc>)
	case I2C_BITRATE_HIGH:
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
10001478:	2108      	movs	r1, #8
	switch (bitrate) {
1000147a:	4293      	cmp	r3, r2
1000147c:	d0f0      	beq.n	10001460 <i2c_dw_initialize+0x80>
1000147e:	4a08      	ldr	r2, [pc, #32]	; (100014a0 <i2c_dw_initialize+0xc0>)
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");

	return 0;
10001480:	0021      	movs	r1, r4
	switch (bitrate) {
10001482:	4293      	cmp	r3, r2
10001484:	d1ec      	bne.n	10001460 <i2c_dw_initialize+0x80>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
10001486:	210a      	movs	r1, #10
10001488:	e7ea      	b.n	10001460 <i2c_dw_initialize+0x80>
1000148a:	46c0      	nop			; (mov r8, r8)
1000148c:	44570140 	.word	0x44570140
10001490:	000f4240 	.word	0x000f4240
10001494:	000186a0 	.word	0x000186a0
10001498:	fff9e580 	.word	0xfff9e580
1000149c:	0033e140 	.word	0x0033e140
100014a0:	004c4b40 	.word	0x004c4b40

100014a4 <i2c_dw_transfer>:
{
100014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100014a6:	b085      	sub	sp, #20
100014a8:	0004      	movs	r4, r0
100014aa:	000e      	movs	r6, r1
		return 0;
100014ac:	1e10      	subs	r0, r2, #0
{
100014ae:	9201      	str	r2, [sp, #4]
100014b0:	9303      	str	r3, [sp, #12]
	if (!num_msgs) {
100014b2:	d100      	bne.n	100014b6 <i2c_dw_transfer+0x12>
100014b4:	e0b3      	b.n	1000161e <i2c_dw_transfer+0x17a>

static ALWAYS_INLINE int sys_test_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	return temp & (1 << bit);
100014b6:	2701      	movs	r7, #1
	return (uint32_t)DEVICE_MMIO_GET(dev);
100014b8:	6862      	ldr	r2, [r4, #4]
100014ba:	6815      	ldr	r5, [r2, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
100014bc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
100014be:	423a      	tst	r2, r7
100014c0:	d000      	beq.n	100014c4 <i2c_dw_transfer+0x20>
100014c2:	e0c1      	b.n	10001648 <i2c_dw_transfer+0x1a4>
	struct i2c_dw_dev_config * const dw = dev->data;
100014c4:	6924      	ldr	r4, [r4, #16]
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
100014c6:	2208      	movs	r2, #8
100014c8:	1d61      	adds	r1, r4, #5
100014ca:	7fc8      	ldrb	r0, [r1, #31]
100014cc:	0003      	movs	r3, r0
100014ce:	4013      	ands	r3, r2
100014d0:	469c      	mov	ip, r3
100014d2:	4210      	tst	r0, r2
100014d4:	d000      	beq.n	100014d8 <i2c_dw_transfer+0x34>
100014d6:	e0b7      	b.n	10001648 <i2c_dw_transfer+0x1a4>
DEFINE_MM_REG_WRITE(intr_mask, DW_IC_REG_INTR_MASK, 32)
100014d8:	002b      	movs	r3, r5
100014da:	3330      	adds	r3, #48	; 0x30
	dw->state |= I2C_DW_BUSY;
100014dc:	7fc8      	ldrb	r0, [r1, #31]
100014de:	9302      	str	r3, [sp, #8]
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
100014e0:	4663      	mov	r3, ip
100014e2:	4302      	orrs	r2, r0
100014e4:	77ca      	strb	r2, [r1, #31]
	uint32_t temp = *(volatile uint32_t *)addr;
100014e6:	6eea      	ldr	r2, [r5, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
100014e8:	43ba      	bics	r2, r7
100014ea:	66ea      	str	r2, [r5, #108]	; 0x6c
100014ec:	632b      	str	r3, [r5, #48]	; 0x30
	if (I2C_MODE_MASTER & dw->app_config) {
100014ee:	6921      	ldr	r1, [r4, #16]
	return *(volatile uint32_t *)addr;
100014f0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
100014f2:	06cb      	lsls	r3, r1, #27
100014f4:	d50e      	bpl.n	10001514 <i2c_dw_transfer+0x70>
		ic_con.bits.master_mode = 1U;
100014f6:	2261      	movs	r2, #97	; 0x61
	if (I2C_ADDR_10_BITS & dw->app_config) {
100014f8:	4239      	tst	r1, r7
100014fa:	d000      	beq.n	100014fe <i2c_dw_transfer+0x5a>
		ic_con.bits.addr_slave_10bit = 1U;
100014fc:	3218      	adds	r2, #24
	switch (I2C_SPEED_GET(dw->app_config)) {
100014fe:	2007      	movs	r0, #7
10001500:	2304      	movs	r3, #4
10001502:	0849      	lsrs	r1, r1, #1
10001504:	4008      	ands	r0, r1
10001506:	4219      	tst	r1, r3
10001508:	d10a      	bne.n	10001520 <i2c_dw_transfer+0x7c>
1000150a:	2706      	movs	r7, #6
1000150c:	4239      	tst	r1, r7
1000150e:	d11c      	bne.n	1000154a <i2c_dw_transfer+0xa6>
10001510:	2801      	cmp	r0, #1
10001512:	d012      	beq.n	1000153a <i2c_dw_transfer+0x96>
		dw->state = I2C_DW_STATE_READY;
10001514:	2300      	movs	r3, #0
		return ret;
10001516:	2016      	movs	r0, #22
		dw->state = I2C_DW_STATE_READY;
10001518:	3405      	adds	r4, #5
1000151a:	77e3      	strb	r3, [r4, #31]
		return -EIO;
1000151c:	4240      	negs	r0, r0
1000151e:	e07e      	b.n	1000161e <i2c_dw_transfer+0x17a>
	switch (I2C_SPEED_GET(dw->app_config)) {
10001520:	2804      	cmp	r0, #4
10001522:	d1f7      	bne.n	10001514 <i2c_dw_transfer+0x70>
		if (!dw->support_hs_mode) {
10001524:	0021      	movs	r1, r4
10001526:	3108      	adds	r1, #8
10001528:	7fc9      	ldrb	r1, [r1, #31]
1000152a:	2900      	cmp	r1, #0
1000152c:	d0f2      	beq.n	10001514 <i2c_dw_transfer+0x70>
		write_hs_scl_lcnt(dw->lcnt, reg_base);
1000152e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
	*(volatile uint32_t *)addr = data;
10001530:	62a9      	str	r1, [r5, #40]	; 0x28
		write_hs_scl_hcnt(dw->hcnt, reg_base);
10001532:	8c21      	ldrh	r1, [r4, #32]
10001534:	6269      	str	r1, [r5, #36]	; 0x24
		ic_con.bits.speed = I2C_DW_SPEED_HIGH;
10001536:	2106      	movs	r1, #6
10001538:	e005      	b.n	10001546 <i2c_dw_transfer+0xa2>
		write_ss_scl_lcnt(dw->lcnt, reg_base);
1000153a:	8c61      	ldrh	r1, [r4, #34]	; 0x22
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
1000153c:	43ba      	bics	r2, r7
1000153e:	61a9      	str	r1, [r5, #24]
		write_ss_scl_hcnt(dw->hcnt, reg_base);
10001540:	8c21      	ldrh	r1, [r4, #32]
10001542:	6169      	str	r1, [r5, #20]
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
10001544:	2102      	movs	r1, #2
		ic_con.bits.speed = I2C_DW_SPEED_HIGH;
10001546:	430a      	orrs	r2, r1
		break;
10001548:	e006      	b.n	10001558 <i2c_dw_transfer+0xb4>
		ic_con.bits.speed = I2C_DW_SPEED_FAST;
1000154a:	43ba      	bics	r2, r7
1000154c:	4313      	orrs	r3, r2
1000154e:	001a      	movs	r2, r3
		write_fs_scl_lcnt(dw->lcnt, reg_base);
10001550:	8c61      	ldrh	r1, [r4, #34]	; 0x22
10001552:	6229      	str	r1, [r5, #32]
		write_fs_scl_hcnt(dw->hcnt, reg_base);
10001554:	8c21      	ldrh	r1, [r4, #32]
10001556:	61e9      	str	r1, [r5, #28]
10001558:	602a      	str	r2, [r5, #0]
1000155a:	2200      	movs	r2, #0
1000155c:	63aa      	str	r2, [r5, #56]	; 0x38
1000155e:	63ea      	str	r2, [r5, #60]	; 0x3c
	return *(volatile uint32_t *)addr;
10001560:	686a      	ldr	r2, [r5, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
10001562:	6829      	ldr	r1, [r5, #0]
	if (test_bit_con_master_mode(reg_base)) {
10001564:	07cb      	lsls	r3, r1, #31
10001566:	d55c      	bpl.n	10001622 <i2c_dw_transfer+0x17e>
		ic_tar.bits.ic_tar = slave_address;
10001568:	9b03      	ldr	r3, [sp, #12]
1000156a:	0a92      	lsrs	r2, r2, #10
1000156c:	059b      	lsls	r3, r3, #22
1000156e:	0d9b      	lsrs	r3, r3, #22
10001570:	0292      	lsls	r2, r2, #10
10001572:	431a      	orrs	r2, r3
	if (I2C_MODE_MASTER & dw->app_config) {
10001574:	6923      	ldr	r3, [r4, #16]
10001576:	06d9      	lsls	r1, r3, #27
10001578:	d504      	bpl.n	10001584 <i2c_dw_transfer+0xe0>
		if (I2C_ADDR_10_BITS & dw->app_config) {
1000157a:	07db      	lsls	r3, r3, #31
1000157c:	d554      	bpl.n	10001628 <i2c_dw_transfer+0x184>
			ic_tar.bits.ic_10bitaddr_master = 1U;
1000157e:	2380      	movs	r3, #128	; 0x80
10001580:	015b      	lsls	r3, r3, #5
10001582:	431a      	orrs	r2, r3
	*(volatile uint32_t *)addr = data;
10001584:	606a      	str	r2, [r5, #4]
	*(volatile uint32_t *)addr = temp | (1 << bit);
10001586:	2201      	movs	r2, #1
	uint32_t temp = *(volatile uint32_t *)addr;
10001588:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp | (1 << bit);
1000158a:	4313      	orrs	r3, r2
1000158c:	66eb      	str	r3, [r5, #108]	; 0x6c
		dw->rx_pending = 0U;
1000158e:	2700      	movs	r7, #0
		dw->xfr_buf = cur_msg->buf;
10001590:	6832      	ldr	r2, [r6, #0]
		dw->xfr_len = cur_msg->len;
10001592:	6871      	ldr	r1, [r6, #4]
		pflags = dw->xfr_flags;
10001594:	1de3      	adds	r3, r4, #7
10001596:	7fd8      	ldrb	r0, [r3, #31]
		dw->xfr_buf = cur_msg->buf;
10001598:	6162      	str	r2, [r4, #20]
		dw->xfr_len = cur_msg->len;
1000159a:	61a1      	str	r1, [r4, #24]
		dw->xfr_flags = cur_msg->flags;
1000159c:	7a32      	ldrb	r2, [r6, #8]
1000159e:	77da      	strb	r2, [r3, #31]
		    != (dw->xfr_flags & I2C_MSG_RW_MASK)) {
100015a0:	4050      	eors	r0, r2
		dw->rx_pending = 0U;
100015a2:	61e7      	str	r7, [r4, #28]
		if ((pflags & I2C_MSG_RW_MASK)
100015a4:	3701      	adds	r7, #1
100015a6:	4238      	tst	r0, r7
100015a8:	d002      	beq.n	100015b0 <i2c_dw_transfer+0x10c>
			dw->xfr_flags |= I2C_MSG_RESTART;
100015aa:	2004      	movs	r0, #4
100015ac:	4302      	orrs	r2, r0
100015ae:	77da      	strb	r2, [r3, #31]
		if (msg_left == 1U) {
100015b0:	9a01      	ldr	r2, [sp, #4]
100015b2:	2a01      	cmp	r2, #1
100015b4:	d103      	bne.n	100015be <i2c_dw_transfer+0x11a>
			dw->xfr_flags |= I2C_MSG_STOP;
100015b6:	7fd8      	ldrb	r0, [r3, #31]
100015b8:	3201      	adds	r2, #1
100015ba:	4302      	orrs	r2, r0
100015bc:	77da      	strb	r2, [r3, #31]
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
100015be:	2203      	movs	r2, #3
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
100015c0:	2001      	movs	r0, #1
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
100015c2:	1d67      	adds	r7, r4, #5
100015c4:	7ffb      	ldrb	r3, [r7, #31]
100015c6:	4393      	bics	r3, r2
100015c8:	77fb      	strb	r3, [r7, #31]
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
100015ca:	1de3      	adds	r3, r4, #7
100015cc:	7fdb      	ldrb	r3, [r3, #31]
100015ce:	3a02      	subs	r2, #2
100015d0:	401a      	ands	r2, r3
100015d2:	4203      	tst	r3, r0
100015d4:	d12b      	bne.n	1000162e <i2c_dw_transfer+0x18a>
			dw->state |= I2C_DW_CMD_SEND;
100015d6:	7ffb      	ldrb	r3, [r7, #31]
100015d8:	4303      	orrs	r3, r0
100015da:	77fb      	strb	r3, [r7, #31]
			dw->request_bytes = 0U;
100015dc:	1da3      	adds	r3, r4, #6
100015de:	77da      	strb	r2, [r3, #31]
		if (test_bit_con_master_mode(reg_base)) {
100015e0:	2201      	movs	r2, #1
	uint32_t temp = *(volatile uint32_t *)addr;
100015e2:	682b      	ldr	r3, [r5, #0]
100015e4:	4213      	tst	r3, r2
100015e6:	d029      	beq.n	1000163c <i2c_dw_transfer+0x198>
100015e8:	4b18      	ldr	r3, [pc, #96]	; (1000164c <i2c_dw_transfer+0x1a8>)
100015ea:	9a02      	ldr	r2, [sp, #8]
100015ec:	6013      	str	r3, [r2, #0]
	return z_impl_k_sem_take(sem, timeout);
100015ee:	2201      	movs	r2, #1
100015f0:	4252      	negs	r2, r2
100015f2:	17d3      	asrs	r3, r2, #31
100015f4:	0020      	movs	r0, r4
100015f6:	f000 fddd 	bl	100021b4 <z_impl_k_sem_take>
		if (dw->state & I2C_DW_CMD_ERROR) {
100015fa:	2204      	movs	r2, #4
100015fc:	7ffb      	ldrb	r3, [r7, #31]
100015fe:	4213      	tst	r3, r2
10001600:	d11f      	bne.n	10001642 <i2c_dw_transfer+0x19e>
		if (dw->xfr_len > 0) {
10001602:	69a3      	ldr	r3, [r4, #24]
10001604:	2b00      	cmp	r3, #0
10001606:	d11c      	bne.n	10001642 <i2c_dw_transfer+0x19e>
		msg_left--;
10001608:	9a01      	ldr	r2, [sp, #4]
		cur_msg++;
1000160a:	360c      	adds	r6, #12
		msg_left--;
1000160c:	3a01      	subs	r2, #1
1000160e:	b2d3      	uxtb	r3, r2
10001610:	9301      	str	r3, [sp, #4]
	while (msg_left > 0) {
10001612:	2b00      	cmp	r3, #0
10001614:	d1bb      	bne.n	1000158e <i2c_dw_transfer+0xea>
	ret = i2c_dw_setup(dev, slave_address);
10001616:	0018      	movs	r0, r3
	dw->state = I2C_DW_STATE_READY;
10001618:	2300      	movs	r3, #0
1000161a:	3405      	adds	r4, #5
1000161c:	77e3      	strb	r3, [r4, #31]
}
1000161e:	b005      	add	sp, #20
10001620:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001622:	9b03      	ldr	r3, [sp, #12]
10001624:	60ab      	str	r3, [r5, #8]
DEFINE_MM_REG_READ(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(sar, DW_IC_REG_SAR, 32)
10001626:	e7a5      	b.n	10001574 <i2c_dw_transfer+0xd0>
			ic_tar.bits.ic_10bitaddr_master = 0U;
10001628:	4b09      	ldr	r3, [pc, #36]	; (10001650 <i2c_dw_transfer+0x1ac>)
1000162a:	401a      	ands	r2, r3
1000162c:	e7aa      	b.n	10001584 <i2c_dw_transfer+0xe0>
			dw->state |= I2C_DW_CMD_RECV;
1000162e:	2302      	movs	r3, #2
10001630:	7ffa      	ldrb	r2, [r7, #31]
10001632:	4313      	orrs	r3, r2
10001634:	77fb      	strb	r3, [r7, #31]
			dw->request_bytes = dw->xfr_len;
10001636:	1da3      	adds	r3, r4, #6
10001638:	77d9      	strb	r1, [r3, #31]
1000163a:	e7d1      	b.n	100015e0 <i2c_dw_transfer+0x13c>
1000163c:	2398      	movs	r3, #152	; 0x98
1000163e:	009b      	lsls	r3, r3, #2
10001640:	e7d3      	b.n	100015ea <i2c_dw_transfer+0x146>
10001642:	2005      	movs	r0, #5
10001644:	4240      	negs	r0, r0
10001646:	e7e7      	b.n	10001618 <i2c_dw_transfer+0x174>
		return -EIO;
10001648:	2005      	movs	r0, #5
1000164a:	e767      	b.n	1000151c <i2c_dw_transfer+0x78>
1000164c:	0000025f 	.word	0x0000025f
10001650:	ffffefff 	.word	0xffffefff

10001654 <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
10001654:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10001656:	4903      	ldr	r1, [pc, #12]	; (10001664 <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
10001658:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
1000165a:	6b93      	ldr	r3, [r2, #56]	; 0x38
1000165c:	400b      	ands	r3, r1
1000165e:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
10001660:	4770      	bx	lr
10001662:	46c0      	nop			; (mov r8, r8)
10001664:	fffff83f 	.word	0xfffff83f

10001668 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
10001668:	4b0a      	ldr	r3, [pc, #40]	; (10001694 <elapsed+0x2c>)
{
1000166a:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
1000166c:	6899      	ldr	r1, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
1000166e:	6818      	ldr	r0, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
10001670:	4a09      	ldr	r2, [pc, #36]	; (10001698 <elapsed+0x30>)
10001672:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
10001674:	4d09      	ldr	r5, [pc, #36]	; (1000169c <elapsed+0x34>)
10001676:	03c0      	lsls	r0, r0, #15
10001678:	d401      	bmi.n	1000167e <elapsed+0x16>
	    || (val1 < val2)) {
1000167a:	42a1      	cmp	r1, r4
1000167c:	d204      	bcs.n	10001688 <elapsed+0x20>
		overflow_cyc += last_load;
1000167e:	6811      	ldr	r1, [r2, #0]
10001680:	6828      	ldr	r0, [r5, #0]
10001682:	1809      	adds	r1, r1, r0
10001684:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
10001686:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
10001688:	682b      	ldr	r3, [r5, #0]
1000168a:	6810      	ldr	r0, [r2, #0]
1000168c:	18c0      	adds	r0, r0, r3
1000168e:	1b00      	subs	r0, r0, r4
}
10001690:	bd30      	pop	{r4, r5, pc}
10001692:	46c0      	nop			; (mov r8, r8)
10001694:	e000e010 	.word	0xe000e010
10001698:	20000440 	.word	0x20000440
1000169c:	2000043c 	.word	0x2000043c

100016a0 <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
100016a0:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100016a2:	4a09      	ldr	r2, [pc, #36]	; (100016c8 <sys_clock_driver_init+0x28>)
100016a4:	6a13      	ldr	r3, [r2, #32]
100016a6:	021b      	lsls	r3, r3, #8
100016a8:	0a1b      	lsrs	r3, r3, #8
100016aa:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
100016ac:	4a07      	ldr	r2, [pc, #28]	; (100016cc <sys_clock_driver_init+0x2c>)
100016ae:	4b08      	ldr	r3, [pc, #32]	; (100016d0 <sys_clock_driver_init+0x30>)
100016b0:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
100016b2:	4b08      	ldr	r3, [pc, #32]	; (100016d4 <sys_clock_driver_init+0x34>)
100016b4:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
100016b6:	4b08      	ldr	r3, [pc, #32]	; (100016d8 <sys_clock_driver_init+0x38>)
100016b8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
100016ba:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
100016bc:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
100016be:	6819      	ldr	r1, [r3, #0]
100016c0:	430a      	orrs	r2, r1
100016c2:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
100016c4:	4770      	bx	lr
100016c6:	46c0      	nop			; (mov r8, r8)
100016c8:	e000ed00 	.word	0xe000ed00
100016cc:	000030d3 	.word	0x000030d3
100016d0:	2000043c 	.word	0x2000043c
100016d4:	20000440 	.word	0x20000440
100016d8:	e000e010 	.word	0xe000e010

100016dc <sys_clock_isr>:
{
100016dc:	b570      	push	{r4, r5, r6, lr}
	elapsed();
100016de:	f7ff ffc3 	bl	10001668 <elapsed>
	cycle_count += overflow_cyc;
100016e2:	4b0b      	ldr	r3, [pc, #44]	; (10001710 <sys_clock_isr+0x34>)
100016e4:	4a0b      	ldr	r2, [pc, #44]	; (10001714 <sys_clock_isr+0x38>)
100016e6:	6818      	ldr	r0, [r3, #0]
100016e8:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
100016ea:	4c0b      	ldr	r4, [pc, #44]	; (10001718 <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
100016ec:	1840      	adds	r0, r0, r1
100016ee:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
100016f0:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
100016f2:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
100016f4:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
100016f6:	4909      	ldr	r1, [pc, #36]	; (1000171c <sys_clock_isr+0x40>)
100016f8:	1b40      	subs	r0, r0, r5
100016fa:	f7fe fd73 	bl	100001e4 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
100016fe:	4b07      	ldr	r3, [pc, #28]	; (1000171c <sys_clock_isr+0x40>)
10001700:	4343      	muls	r3, r0
10001702:	195b      	adds	r3, r3, r5
10001704:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
10001706:	f001 fa75 	bl	10002bf4 <sys_clock_announce>
	z_arm_int_exit();
1000170a:	f7ff fd39 	bl	10001180 <z_arm_exc_exit>
}
1000170e:	bd70      	pop	{r4, r5, r6, pc}
10001710:	20000440 	.word	0x20000440
10001714:	20000438 	.word	0x20000438
10001718:	20000434 	.word	0x20000434
1000171c:	000030d4 	.word	0x000030d4

10001720 <sys_clock_set_timeout>:
{
10001720:	b5f0      	push	{r4, r5, r6, r7, lr}
10001722:	4d35      	ldr	r5, [pc, #212]	; (100017f8 <sys_clock_set_timeout+0xd8>)
10001724:	4e35      	ldr	r6, [pc, #212]	; (100017fc <sys_clock_set_timeout+0xdc>)
10001726:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
10001728:	2900      	cmp	r1, #0
1000172a:	d00a      	beq.n	10001742 <sys_clock_set_timeout+0x22>
1000172c:	1c43      	adds	r3, r0, #1
1000172e:	d108      	bne.n	10001742 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
10001730:	2201      	movs	r2, #1
10001732:	682b      	ldr	r3, [r5, #0]
10001734:	4393      	bics	r3, r2
10001736:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
10001738:	23ff      	movs	r3, #255	; 0xff
1000173a:	061b      	lsls	r3, r3, #24
1000173c:	6033      	str	r3, [r6, #0]
}
1000173e:	b005      	add	sp, #20
10001740:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
10001742:	6833      	ldr	r3, [r6, #0]
10001744:	9302      	str	r3, [sp, #8]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
10001746:	1c43      	adds	r3, r0, #1
10001748:	d037      	beq.n	100017ba <sys_clock_set_timeout+0x9a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
1000174a:	2700      	movs	r7, #0
1000174c:	2801      	cmp	r0, #1
1000174e:	dd04      	ble.n	1000175a <sys_clock_set_timeout+0x3a>
10001750:	4b2b      	ldr	r3, [pc, #172]	; (10001800 <sys_clock_set_timeout+0xe0>)
10001752:	001f      	movs	r7, r3
10001754:	4298      	cmp	r0, r3
10001756:	dc00      	bgt.n	1000175a <sys_clock_set_timeout+0x3a>
10001758:	1e47      	subs	r7, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
1000175a:	f3ef 8310 	mrs	r3, PRIMASK
1000175e:	b672      	cpsid	i
10001760:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
10001762:	f7ff ff81 	bl	10001668 <elapsed>
	val1 = SysTick->VAL;
10001766:	68ab      	ldr	r3, [r5, #8]
10001768:	9300      	str	r3, [sp, #0]
	cycle_count += pending;
1000176a:	4b26      	ldr	r3, [pc, #152]	; (10001804 <sys_clock_set_timeout+0xe4>)
1000176c:	681a      	ldr	r2, [r3, #0]
1000176e:	1884      	adds	r4, r0, r2
	overflow_cyc = 0U;
10001770:	2200      	movs	r2, #0
	cycle_count += pending;
10001772:	601c      	str	r4, [r3, #0]
	overflow_cyc = 0U;
10001774:	4b24      	ldr	r3, [pc, #144]	; (10001808 <sys_clock_set_timeout+0xe8>)
10001776:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
10001778:	4b24      	ldr	r3, [pc, #144]	; (1000180c <sys_clock_set_timeout+0xec>)
1000177a:	681b      	ldr	r3, [r3, #0]
1000177c:	9301      	str	r3, [sp, #4]
1000177e:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
10001780:	4290      	cmp	r0, r2
10001782:	da1c      	bge.n	100017be <sys_clock_set_timeout+0x9e>
		last_load = MIN_DELAY;
10001784:	2380      	movs	r3, #128	; 0x80
10001786:	00db      	lsls	r3, r3, #3
			last_load = MAX_CYCLES;
10001788:	6033      	str	r3, [r6, #0]
	SysTick->LOAD = last_load - 1;
1000178a:	6832      	ldr	r2, [r6, #0]
	val2 = SysTick->VAL;
1000178c:	68ab      	ldr	r3, [r5, #8]
	SysTick->LOAD = last_load - 1;
1000178e:	3a01      	subs	r2, #1
10001790:	606a      	str	r2, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
10001792:	2200      	movs	r2, #0
10001794:	60aa      	str	r2, [r5, #8]
	if (val1 < val2) {
10001796:	9a00      	ldr	r2, [sp, #0]
10001798:	429a      	cmp	r2, r3
1000179a:	d228      	bcs.n	100017ee <sys_clock_set_timeout+0xce>
		cycle_count += (val1 + (last_load_ - val2));
1000179c:	9900      	ldr	r1, [sp, #0]
1000179e:	9a02      	ldr	r2, [sp, #8]
100017a0:	468c      	mov	ip, r1
100017a2:	4462      	add	r2, ip
100017a4:	1ad0      	subs	r0, r2, r3
100017a6:	1904      	adds	r4, r0, r4
100017a8:	4b16      	ldr	r3, [pc, #88]	; (10001804 <sys_clock_set_timeout+0xe4>)
100017aa:	601c      	str	r4, [r3, #0]
	if (key != 0U) {
100017ac:	9b03      	ldr	r3, [sp, #12]
100017ae:	2b00      	cmp	r3, #0
100017b0:	d1c5      	bne.n	1000173e <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
100017b2:	b662      	cpsie	i
100017b4:	f3bf 8f6f 	isb	sy
100017b8:	e7c1      	b.n	1000173e <sys_clock_set_timeout+0x1e>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
100017ba:	4811      	ldr	r0, [pc, #68]	; (10001800 <sys_clock_set_timeout+0xe0>)
100017bc:	e7cc      	b.n	10001758 <sys_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
100017be:	4b14      	ldr	r3, [pc, #80]	; (10001810 <sys_clock_set_timeout+0xf0>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
100017c0:	4913      	ldr	r1, [pc, #76]	; (10001810 <sys_clock_set_timeout+0xf0>)
		delay = ticks * CYC_PER_TICK;
100017c2:	435f      	muls	r7, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
100017c4:	4b13      	ldr	r3, [pc, #76]	; (10001814 <sys_clock_set_timeout+0xf4>)
		delay += unannounced;
100017c6:	19c0      	adds	r0, r0, r7
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
100017c8:	18c0      	adds	r0, r0, r3
100017ca:	f7fe fd0b 	bl	100001e4 <__udivsi3>
		delay =
100017ce:	4b10      	ldr	r3, [pc, #64]	; (10001810 <sys_clock_set_timeout+0xf0>)
		delay -= unannounced;
100017d0:	9a01      	ldr	r2, [sp, #4]
		delay =
100017d2:	4343      	muls	r3, r0
		delay -= unannounced;
100017d4:	1b10      	subs	r0, r2, r4
100017d6:	18c0      	adds	r0, r0, r3
		delay = MAX(delay, MIN_DELAY);
100017d8:	2380      	movs	r3, #128	; 0x80
100017da:	00db      	lsls	r3, r3, #3
100017dc:	4298      	cmp	r0, r3
100017de:	d904      	bls.n	100017ea <sys_clock_set_timeout+0xca>
		if (delay > MAX_CYCLES) {
100017e0:	4b0d      	ldr	r3, [pc, #52]	; (10001818 <sys_clock_set_timeout+0xf8>)
100017e2:	4298      	cmp	r0, r3
100017e4:	d8d0      	bhi.n	10001788 <sys_clock_set_timeout+0x68>
			last_load = delay;
100017e6:	6030      	str	r0, [r6, #0]
100017e8:	e7cf      	b.n	1000178a <sys_clock_set_timeout+0x6a>
		delay = MAX(delay, MIN_DELAY);
100017ea:	0018      	movs	r0, r3
100017ec:	e7fb      	b.n	100017e6 <sys_clock_set_timeout+0xc6>
		cycle_count += (val1 - val2);
100017ee:	9a00      	ldr	r2, [sp, #0]
100017f0:	1ad3      	subs	r3, r2, r3
100017f2:	191c      	adds	r4, r3, r4
100017f4:	e7d8      	b.n	100017a8 <sys_clock_set_timeout+0x88>
100017f6:	46c0      	nop			; (mov r8, r8)
100017f8:	e000e010 	.word	0xe000e010
100017fc:	2000043c 	.word	0x2000043c
10001800:	0000053d 	.word	0x0000053d
10001804:	20000438 	.word	0x20000438
10001808:	20000440 	.word	0x20000440
1000180c:	20000434 	.word	0x20000434
10001810:	000030d4 	.word	0x000030d4
10001814:	000030d3 	.word	0x000030d3
10001818:	00ffc684 	.word	0x00ffc684

1000181c <sys_clock_elapsed>:
{
1000181c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000181e:	f3ef 8410 	mrs	r4, PRIMASK
10001822:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
10001824:	f7ff ff20 	bl	10001668 <elapsed>
10001828:	4b07      	ldr	r3, [pc, #28]	; (10001848 <sys_clock_elapsed+0x2c>)
1000182a:	4a08      	ldr	r2, [pc, #32]	; (1000184c <sys_clock_elapsed+0x30>)
1000182c:	681b      	ldr	r3, [r3, #0]
1000182e:	6812      	ldr	r2, [r2, #0]
10001830:	1a9b      	subs	r3, r3, r2
10001832:	1818      	adds	r0, r3, r0
	if (key != 0U) {
10001834:	2c00      	cmp	r4, #0
10001836:	d102      	bne.n	1000183e <sys_clock_elapsed+0x22>
	__asm__ volatile(
10001838:	b662      	cpsie	i
1000183a:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
1000183e:	4904      	ldr	r1, [pc, #16]	; (10001850 <sys_clock_elapsed+0x34>)
10001840:	f7fe fcd0 	bl	100001e4 <__udivsi3>
}
10001844:	bd10      	pop	{r4, pc}
10001846:	46c0      	nop			; (mov r8, r8)
10001848:	20000438 	.word	0x20000438
1000184c:	20000434 	.word	0x20000434
10001850:	000030d4 	.word	0x000030d4

10001854 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
10001854:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
10001856:	6803      	ldr	r3, [r0, #0]
10001858:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
1000185a:	7904      	ldrb	r4, [r0, #4]
1000185c:	4b09      	ldr	r3, [pc, #36]	; (10001884 <pinctrl_lookup_state+0x30>)
1000185e:	18e4      	adds	r4, r4, r3
10001860:	00e4      	lsls	r4, r4, #3
10001862:	6805      	ldr	r5, [r0, #0]
10001864:	6813      	ldr	r3, [r2, #0]
10001866:	192d      	adds	r5, r5, r4
10001868:	42ab      	cmp	r3, r5
1000186a:	d902      	bls.n	10001872 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
1000186c:	2002      	movs	r0, #2
1000186e:	4240      	negs	r0, r0
}
10001870:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
10001872:	795d      	ldrb	r5, [r3, #5]
10001874:	428d      	cmp	r5, r1
10001876:	d002      	beq.n	1000187e <pinctrl_lookup_state+0x2a>
		(*state)++;
10001878:	3308      	adds	r3, #8
1000187a:	6013      	str	r3, [r2, #0]
1000187c:	e7f1      	b.n	10001862 <pinctrl_lookup_state+0xe>
			return 0;
1000187e:	2000      	movs	r0, #0
10001880:	e7f6      	b.n	10001870 <pinctrl_lookup_state+0x1c>
10001882:	46c0      	nop			; (mov r8, r8)
10001884:	1fffffff 	.word	0x1fffffff

10001888 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10001888:	b5f0      	push	{r4, r5, r6, r7, lr}
1000188a:	b085      	sub	sp, #20
1000188c:	9203      	str	r2, [sp, #12]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
1000188e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10001890:	0005      	movs	r5, r0
10001892:	000f      	movs	r7, r1
        return false;
10001894:	2000      	movs	r0, #0
    if (freq > src_freq)
10001896:	429a      	cmp	r2, r3
10001898:	d840      	bhi.n	1000191c <clock_configure+0x94>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
1000189a:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
1000189c:	0e1a      	lsrs	r2, r3, #24
1000189e:	021b      	lsls	r3, r3, #8
100018a0:	9202      	str	r2, [sp, #8]
100018a2:	9301      	str	r3, [sp, #4]
100018a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100018a6:	0003      	movs	r3, r0
100018a8:	9902      	ldr	r1, [sp, #8]
100018aa:	9801      	ldr	r0, [sp, #4]
100018ac:	f7fe fd00 	bl	100002b0 <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100018b0:	436c      	muls	r4, r5
100018b2:	4b28      	ldr	r3, [pc, #160]	; (10001954 <clock_configure+0xcc>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100018b4:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100018b6:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
100018b8:	6863      	ldr	r3, [r4, #4]
100018ba:	4283      	cmp	r3, r0
100018bc:	d200      	bcs.n	100018c0 <clock_configure+0x38>
        clock->div = div;
100018be:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
100018c0:	1f2b      	subs	r3, r5, #4
100018c2:	b2db      	uxtb	r3, r3
100018c4:	9300      	str	r3, [sp, #0]
100018c6:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
100018c8:	9a00      	ldr	r2, [sp, #0]
100018ca:	019b      	lsls	r3, r3, #6
100018cc:	4323      	orrs	r3, r4
100018ce:	2a01      	cmp	r2, #1
100018d0:	d826      	bhi.n	10001920 <clock_configure+0x98>
100018d2:	2f01      	cmp	r7, #1
100018d4:	d124      	bne.n	10001920 <clock_configure+0x98>
100018d6:	2203      	movs	r2, #3
100018d8:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
100018da:	68a3      	ldr	r3, [r4, #8]
100018dc:	423b      	tst	r3, r7
100018de:	d0fc      	beq.n	100018da <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
100018e0:	9a03      	ldr	r2, [sp, #12]
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100018e2:	6823      	ldr	r3, [r4, #0]
100018e4:	0152      	lsls	r2, r2, #5
100018e6:	405a      	eors	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100018e8:	2180      	movs	r1, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100018ea:	23e0      	movs	r3, #224	; 0xe0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100018ec:	0149      	lsls	r1, r1, #5
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100018ee:	401a      	ands	r2, r3
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
100018f0:	9b00      	ldr	r3, [sp, #0]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100018f2:	4321      	orrs	r1, r4
100018f4:	600a      	str	r2, [r1, #0]
100018f6:	2b01      	cmp	r3, #1
100018f8:	d921      	bls.n	1000193e <clock_configure+0xb6>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100018fa:	2380      	movs	r3, #128	; 0x80
100018fc:	2280      	movs	r2, #128	; 0x80
100018fe:	019b      	lsls	r3, r3, #6
10001900:	4323      	orrs	r3, r4
10001902:	0112      	lsls	r2, r2, #4
10001904:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10001906:	9801      	ldr	r0, [sp, #4]
10001908:	2300      	movs	r3, #0
1000190a:	0032      	movs	r2, r6
1000190c:	9902      	ldr	r1, [sp, #8]
    clock->div = div;
1000190e:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10001910:	f7fe fcce 	bl	100002b0 <__aeabi_uldivmod>
10001914:	4b10      	ldr	r3, [pc, #64]	; (10001958 <clock_configure+0xd0>)
10001916:	00ad      	lsls	r5, r5, #2
10001918:	5158      	str	r0, [r3, r5]
1000191a:	2001      	movs	r0, #1

    return true;
}
1000191c:	b005      	add	sp, #20
1000191e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001920:	2280      	movs	r2, #128	; 0x80
10001922:	0112      	lsls	r2, r2, #4
10001924:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
10001926:	4b0c      	ldr	r3, [pc, #48]	; (10001958 <clock_configure+0xd0>)
10001928:	00aa      	lsls	r2, r5, #2
1000192a:	58d1      	ldr	r1, [r2, r3]
1000192c:	2900      	cmp	r1, #0
1000192e:	d0d7      	beq.n	100018e0 <clock_configure+0x58>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10001930:	6958      	ldr	r0, [r3, #20]
10001932:	f7fe fc57 	bl	100001e4 <__udivsi3>
10001936:	3001      	adds	r0, #1
            asm volatile (
10001938:	3801      	subs	r0, #1
1000193a:	d1fd      	bne.n	10001938 <clock_configure+0xb0>
1000193c:	e7d0      	b.n	100018e0 <clock_configure+0x58>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000193e:	2203      	movs	r2, #3
10001940:	6823      	ldr	r3, [r4, #0]
10001942:	407b      	eors	r3, r7
10001944:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001946:	600b      	str	r3, [r1, #0]
10001948:	2301      	movs	r3, #1
1000194a:	40bb      	lsls	r3, r7
        while (!(clock->selected & (1u << src)))
1000194c:	68a2      	ldr	r2, [r4, #8]
1000194e:	4213      	tst	r3, r2
10001950:	d0fc      	beq.n	1000194c <clock_configure+0xc4>
10001952:	e7d2      	b.n	100018fa <clock_configure+0x72>
10001954:	40008000 	.word	0x40008000
10001958:	20000444 	.word	0x20000444

1000195c <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
1000195c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
1000195e:	200c      	movs	r0, #12
10001960:	f000 f8da 	bl	10001b18 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10001964:	f000 f8e0 	bl	10001b28 <running_on_fpga>
10001968:	2800      	cmp	r0, #0
1000196a:	d00a      	beq.n	10001982 <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
1000196c:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
1000196e:	4a2b      	ldr	r2, [pc, #172]	; (10001a1c <clocks_init+0xc0>)
10001970:	482b      	ldr	r0, [pc, #172]	; (10001a20 <clocks_init+0xc4>)
10001972:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
10001974:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
10001976:	5088      	str	r0, [r1, r2]
        for (uint i = 0; i < CLK_COUNT; i++) {
10001978:	2b0a      	cmp	r3, #10
1000197a:	d1fa      	bne.n	10001972 <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
1000197c:	4b29      	ldr	r3, [pc, #164]	; (10001a24 <clocks_init+0xc8>)
1000197e:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
10001980:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
10001982:	4d29      	ldr	r5, [pc, #164]	; (10001a28 <clocks_init+0xcc>)
10001984:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
10001986:	f000 f8b3 	bl	10001af0 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000198a:	2201      	movs	r2, #1
1000198c:	4b27      	ldr	r3, [pc, #156]	; (10001a2c <clocks_init+0xd0>)
1000198e:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10001990:	6c6b      	ldr	r3, [r5, #68]	; 0x44
10001992:	2b01      	cmp	r3, #1
10001994:	d1fc      	bne.n	10001990 <clocks_init+0x34>
10001996:	2203      	movs	r2, #3
10001998:	4b25      	ldr	r3, [pc, #148]	; (10001a30 <clocks_init+0xd4>)
1000199a:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
1000199c:	6bac      	ldr	r4, [r5, #56]	; 0x38
1000199e:	2c01      	cmp	r4, #1
100019a0:	d1fc      	bne.n	1000199c <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
100019a2:	2502      	movs	r5, #2
100019a4:	0021      	movs	r1, r4
100019a6:	9500      	str	r5, [sp, #0]
100019a8:	2306      	movs	r3, #6
100019aa:	4a22      	ldr	r2, [pc, #136]	; (10001a34 <clocks_init+0xd8>)
100019ac:	4822      	ldr	r0, [pc, #136]	; (10001a38 <clocks_init+0xdc>)
100019ae:	f000 f853 	bl	10001a58 <pll_init>
    pll_init(pll_usb, 1, 480 * PICO_MHZ, 5, 2);
100019b2:	0021      	movs	r1, r4
100019b4:	9500      	str	r5, [sp, #0]
100019b6:	2305      	movs	r3, #5
100019b8:	4a20      	ldr	r2, [pc, #128]	; (10001a3c <clocks_init+0xe0>)
100019ba:	4821      	ldr	r0, [pc, #132]	; (10001a40 <clocks_init+0xe4>)
100019bc:	f000 f84c 	bl	10001a58 <pll_init>
    clock_configure(clk_ref,
100019c0:	4b20      	ldr	r3, [pc, #128]	; (10001a44 <clocks_init+0xe8>)
100019c2:	0029      	movs	r1, r5
    clock_configure(clk_sys,
100019c4:	4d20      	ldr	r5, [pc, #128]	; (10001a48 <clocks_init+0xec>)
    clock_configure(clk_ref,
100019c6:	9300      	str	r3, [sp, #0]
100019c8:	2200      	movs	r2, #0
100019ca:	2004      	movs	r0, #4
100019cc:	f7ff ff5c 	bl	10001888 <clock_configure>
    clock_configure(clk_sys,
100019d0:	002b      	movs	r3, r5
100019d2:	0021      	movs	r1, r4
100019d4:	2200      	movs	r2, #0
100019d6:	9500      	str	r5, [sp, #0]
100019d8:	2005      	movs	r0, #5
100019da:	f7ff ff55 	bl	10001888 <clock_configure>
    clock_configure(clk_usb,
100019de:	2200      	movs	r2, #0
100019e0:	4c0f      	ldr	r4, [pc, #60]	; (10001a20 <clocks_init+0xc4>)
100019e2:	0011      	movs	r1, r2
100019e4:	0023      	movs	r3, r4
100019e6:	9400      	str	r4, [sp, #0]
100019e8:	2007      	movs	r0, #7
100019ea:	f7ff ff4d 	bl	10001888 <clock_configure>
    clock_configure(clk_adc,
100019ee:	2200      	movs	r2, #0
100019f0:	0023      	movs	r3, r4
100019f2:	0011      	movs	r1, r2
100019f4:	9400      	str	r4, [sp, #0]
100019f6:	2008      	movs	r0, #8
100019f8:	f7ff ff46 	bl	10001888 <clock_configure>
    clock_configure(clk_rtc,
100019fc:	2200      	movs	r2, #0
100019fe:	4b09      	ldr	r3, [pc, #36]	; (10001a24 <clocks_init+0xc8>)
10001a00:	0011      	movs	r1, r2
10001a02:	9300      	str	r3, [sp, #0]
10001a04:	2009      	movs	r0, #9
10001a06:	0023      	movs	r3, r4
10001a08:	f7ff ff3e 	bl	10001888 <clock_configure>
    clock_configure(clk_peri,
10001a0c:	2200      	movs	r2, #0
10001a0e:	002b      	movs	r3, r5
10001a10:	0011      	movs	r1, r2
10001a12:	9500      	str	r5, [sp, #0]
10001a14:	2006      	movs	r0, #6
10001a16:	f7ff ff37 	bl	10001888 <clock_configure>
10001a1a:	e7b1      	b.n	10001980 <clocks_init+0x24>
10001a1c:	20000444 	.word	0x20000444
10001a20:	02dc6c00 	.word	0x02dc6c00
10001a24:	0000b71b 	.word	0x0000b71b
10001a28:	40008000 	.word	0x40008000
10001a2c:	4000b03c 	.word	0x4000b03c
10001a30:	4000b030 	.word	0x4000b030
10001a34:	59682f00 	.word	0x59682f00
10001a38:	40028000 	.word	0x40028000
10001a3c:	1c9c3800 	.word	0x1c9c3800
10001a40:	4002c000 	.word	0x4002c000
10001a44:	00b71b00 	.word	0x00b71b00
10001a48:	07735940 	.word	0x07735940

10001a4c <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10001a4c:	4b01      	ldr	r3, [pc, #4]	; (10001a54 <clock_get_hz+0x8>)
10001a4e:	0080      	lsls	r0, r0, #2
10001a50:	58c0      	ldr	r0, [r0, r3]
}
10001a52:	4770      	bx	lr
10001a54:	20000444 	.word	0x20000444

10001a58 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10001a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001a5a:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10001a5c:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10001a5e:	0017      	movs	r7, r2
10001a60:	001e      	movs	r6, r3
10001a62:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10001a64:	f7fe fbbe 	bl	100001e4 <__udivsi3>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
10001a68:	491c      	ldr	r1, [pc, #112]	; (10001adc <pll_init+0x84>)
10001a6a:	4341      	muls	r1, r0
10001a6c:	0038      	movs	r0, r7
10001a6e:	f7fe fbb9 	bl	100001e4 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10001a72:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001a74:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10001a76:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001a78:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10001a7a:	6822      	ldr	r2, [r4, #0]
10001a7c:	2a00      	cmp	r2, #0
10001a7e:	da0c      	bge.n	10001a9a <pll_init+0x42>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10001a80:	213f      	movs	r1, #63	; 0x3f
10001a82:	6822      	ldr	r2, [r4, #0]
10001a84:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10001a86:	42aa      	cmp	r2, r5
10001a88:	d107      	bne.n	10001a9a <pll_init+0x42>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10001a8a:	68a2      	ldr	r2, [r4, #8]
10001a8c:	0512      	lsls	r2, r2, #20
10001a8e:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10001a90:	4282      	cmp	r2, r0
10001a92:	d102      	bne.n	10001a9a <pll_init+0x42>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS & PLL_PRIM_POSTDIV2_BITS)))) {
10001a94:	68e2      	ldr	r2, [r4, #12]
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10001a96:	2b00      	cmp	r3, #0
10001a98:	d01b      	beq.n	10001ad2 <pll_init+0x7a>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10001a9a:	4a11      	ldr	r2, [pc, #68]	; (10001ae0 <pll_init+0x88>)
10001a9c:	4294      	cmp	r4, r2
10001a9e:	d019      	beq.n	10001ad4 <pll_init+0x7c>
10001aa0:	2280      	movs	r2, #128	; 0x80
10001aa2:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001aa4:	490f      	ldr	r1, [pc, #60]	; (10001ae4 <pll_init+0x8c>)
10001aa6:	4e10      	ldr	r6, [pc, #64]	; (10001ae8 <pll_init+0x90>)
10001aa8:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001aaa:	4910      	ldr	r1, [pc, #64]	; (10001aec <pll_init+0x94>)
10001aac:	600a      	str	r2, [r1, #0]
10001aae:	0017      	movs	r7, r2
10001ab0:	68b1      	ldr	r1, [r6, #8]
10001ab2:	438f      	bics	r7, r1
10001ab4:	d1fb      	bne.n	10001aae <pll_init+0x56>
10001ab6:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10001ab8:	1d21      	adds	r1, r4, #4
10001aba:	0192      	lsls	r2, r2, #6
10001abc:	430a      	orrs	r2, r1
10001abe:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
10001ac0:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
10001ac2:	60a0      	str	r0, [r4, #8]
10001ac4:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10001ac6:	6821      	ldr	r1, [r4, #0]
10001ac8:	2900      	cmp	r1, #0
10001aca:	dafc      	bge.n	10001ac6 <pll_init+0x6e>

    // Set up post dividers
    pll->prim = pdiv;
10001acc:	60e3      	str	r3, [r4, #12]
10001ace:	2308      	movs	r3, #8
10001ad0:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10001ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10001ad4:	2280      	movs	r2, #128	; 0x80
10001ad6:	0192      	lsls	r2, r2, #6
10001ad8:	e7e4      	b.n	10001aa4 <pll_init+0x4c>
10001ada:	46c0      	nop			; (mov r8, r8)
10001adc:	000f4240 	.word	0x000f4240
10001ae0:	4002c000 	.word	0x4002c000
10001ae4:	4000e000 	.word	0x4000e000
10001ae8:	4000c000 	.word	0x4000c000
10001aec:	4000f000 	.word	0x4000f000

10001af0 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10001af0:	22aa      	movs	r2, #170	; 0xaa
10001af2:	4b06      	ldr	r3, [pc, #24]	; (10001b0c <xosc_init+0x1c>)
10001af4:	0112      	lsls	r2, r2, #4
10001af6:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
10001af8:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001afa:	4905      	ldr	r1, [pc, #20]	; (10001b10 <xosc_init+0x20>)
10001afc:	60da      	str	r2, [r3, #12]
10001afe:	4a05      	ldr	r2, [pc, #20]	; (10001b14 <xosc_init+0x24>)
10001b00:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10001b02:	685a      	ldr	r2, [r3, #4]
10001b04:	2a00      	cmp	r2, #0
10001b06:	dafc      	bge.n	10001b02 <xosc_init+0x12>
}
10001b08:	4770      	bx	lr
10001b0a:	46c0      	nop			; (mov r8, r8)
10001b0c:	40024000 	.word	0x40024000
10001b10:	00fab000 	.word	0x00fab000
10001b14:	40026000 	.word	0x40026000

10001b18 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10001b18:	2380      	movs	r3, #128	; 0x80
10001b1a:	4a02      	ldr	r2, [pc, #8]	; (10001b24 <watchdog_start_tick+0xc>)
10001b1c:	009b      	lsls	r3, r3, #2
10001b1e:	4303      	orrs	r3, r0
10001b20:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10001b22:	4770      	bx	lr
10001b24:	40058000 	.word	0x40058000

10001b28 <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10001b28:	4b02      	ldr	r3, [pc, #8]	; (10001b34 <running_on_fpga+0xc>)
10001b2a:	6818      	ldr	r0, [r3, #0]
10001b2c:	0780      	lsls	r0, r0, #30
10001b2e:	0fc0      	lsrs	r0, r0, #31
}
10001b30:	4770      	bx	lr
10001b32:	46c0      	nop			; (mov r8, r8)
10001b34:	4006c000 	.word	0x4006c000

10001b38 <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
10001b38:	4b08      	ldr	r3, [pc, #32]	; (10001b5c <gpio_set_function+0x24>)
10001b3a:	0082      	lsls	r2, r0, #2
10001b3c:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001b3e:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
10001b40:	b510      	push	{r4, lr}
10001b42:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10001b44:	00c0      	lsls	r0, r0, #3
10001b46:	4063      	eors	r3, r4
10001b48:	24c0      	movs	r4, #192	; 0xc0
10001b4a:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001b4c:	2480      	movs	r4, #128	; 0x80
10001b4e:	0164      	lsls	r4, r4, #5
10001b50:	4322      	orrs	r2, r4
10001b52:	6013      	str	r3, [r2, #0]
10001b54:	4b02      	ldr	r3, [pc, #8]	; (10001b60 <gpio_set_function+0x28>)
10001b56:	18c0      	adds	r0, r0, r3
10001b58:	6041      	str	r1, [r0, #4]
}
10001b5a:	bd10      	pop	{r4, pc}
10001b5c:	4001c004 	.word	0x4001c004
10001b60:	40014000 	.word	0x40014000

10001b64 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
10001b64:	4b09      	ldr	r3, [pc, #36]	; (10001b8c <gpio_set_pulls+0x28>)
10001b66:	0080      	lsls	r0, r0, #2
10001b68:	18c0      	adds	r0, r0, r3
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
10001b6a:	1e4b      	subs	r3, r1, #1
10001b6c:	4199      	sbcs	r1, r3
10001b6e:	1e53      	subs	r3, r2, #1
10001b70:	419a      	sbcs	r2, r3
10001b72:	00c9      	lsls	r1, r1, #3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001b74:	6803      	ldr	r3, [r0, #0]
10001b76:	0092      	lsls	r2, r2, #2
    hw_write_masked(
10001b78:	4311      	orrs	r1, r2
10001b7a:	4059      	eors	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001b7c:	2380      	movs	r3, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001b7e:	220c      	movs	r2, #12
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001b80:	015b      	lsls	r3, r3, #5
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001b82:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001b84:	4318      	orrs	r0, r3
10001b86:	6001      	str	r1, [r0, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10001b88:	4770      	bx	lr
10001b8a:	46c0      	nop			; (mov r8, r8)
10001b8c:	4001c004 	.word	0x4001c004

10001b90 <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
10001b90:	4b05      	ldr	r3, [pc, #20]	; (10001ba8 <gpio_set_input_hysteresis_enabled+0x18>)
10001b92:	0080      	lsls	r0, r0, #2
10001b94:	18c0      	adds	r0, r0, r3
10001b96:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001b98:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10001b9a:	2900      	cmp	r1, #0
10001b9c:	d100      	bne.n	10001ba0 <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001b9e:	23c0      	movs	r3, #192	; 0xc0
10001ba0:	019b      	lsls	r3, r3, #6
10001ba2:	4318      	orrs	r0, r3
10001ba4:	6002      	str	r2, [r0, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
10001ba6:	4770      	bx	lr
10001ba8:	4001c004 	.word	0x4001c004

10001bac <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
10001bac:	4b05      	ldr	r3, [pc, #20]	; (10001bc4 <gpio_set_slew_rate+0x18>)
10001bae:	0080      	lsls	r0, r0, #2
10001bb0:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001bb2:	6803      	ldr	r3, [r0, #0]
10001bb4:	4059      	eors	r1, r3
10001bb6:	2301      	movs	r3, #1
10001bb8:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001bba:	2380      	movs	r3, #128	; 0x80
10001bbc:	015b      	lsls	r3, r3, #5
10001bbe:	4318      	orrs	r0, r3
10001bc0:	6001      	str	r1, [r0, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
10001bc2:	4770      	bx	lr
10001bc4:	4001c004 	.word	0x4001c004

10001bc8 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
10001bc8:	4b06      	ldr	r3, [pc, #24]	; (10001be4 <gpio_set_drive_strength+0x1c>)
10001bca:	0080      	lsls	r0, r0, #2
10001bcc:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001bce:	6803      	ldr	r3, [r0, #0]
10001bd0:	0109      	lsls	r1, r1, #4
10001bd2:	4059      	eors	r1, r3
10001bd4:	2330      	movs	r3, #48	; 0x30
10001bd6:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001bd8:	2380      	movs	r3, #128	; 0x80
10001bda:	015b      	lsls	r3, r3, #5
10001bdc:	4318      	orrs	r0, r3
10001bde:	6001      	str	r1, [r0, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
10001be0:	4770      	bx	lr
10001be2:	46c0      	nop			; (mov r8, r8)
10001be4:	4001c004 	.word	0x4001c004

10001be8 <gpio_acknowledge_irq>:
    io_irq_ctrl_hw_t *irq_ctrl_base = &iobank0_hw->dormant_wake_irq_ctrl;
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    iobank0_hw->intr[gpio / 8] = events << 4 * (gpio % 8);
10001be8:	2207      	movs	r2, #7
10001bea:	08c3      	lsrs	r3, r0, #3
10001bec:	4010      	ands	r0, r2
10001bee:	0080      	lsls	r0, r0, #2
10001bf0:	4081      	lsls	r1, r0
10001bf2:	4a02      	ldr	r2, [pc, #8]	; (10001bfc <gpio_acknowledge_irq+0x14>)
10001bf4:	333c      	adds	r3, #60	; 0x3c
10001bf6:	009b      	lsls	r3, r3, #2
10001bf8:	5099      	str	r1, [r3, r2]
}
10001bfa:	4770      	bx	lr
10001bfc:	40014000 	.word	0x40014000

10001c00 <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10001c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10001c02:	23d0      	movs	r3, #208	; 0xd0
10001c04:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10001c06:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10001c08:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10001c0a:	1e63      	subs	r3, r4, #1
10001c0c:	419c      	sbcs	r4, r3
10001c0e:	2030      	movs	r0, #48	; 0x30
10001c10:	4b0b      	ldr	r3, [pc, #44]	; (10001c40 <gpio_set_irq_enabled+0x40>)
10001c12:	4264      	negs	r4, r4
10001c14:	4004      	ands	r4, r0
    gpio_acknowledge_irq(gpio, events);
10001c16:	0028      	movs	r0, r5
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10001c18:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10001c1a:	000f      	movs	r7, r1
10001c1c:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
10001c1e:	f7ff ffe3 	bl	10001be8 <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
10001c22:	2307      	movs	r3, #7
10001c24:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10001c26:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
10001c28:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10001c2a:	00ad      	lsls	r5, r5, #2
10001c2c:	1965      	adds	r5, r4, r5
    events <<= 4 * (gpio % 8);
10001c2e:	409f      	lsls	r7, r3
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001c30:	2480      	movs	r4, #128	; 0x80
    if (enabled)
10001c32:	2e00      	cmp	r6, #0
10001c34:	d100      	bne.n	10001c38 <gpio_set_irq_enabled+0x38>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001c36:	24c0      	movs	r4, #192	; 0xc0
10001c38:	01a4      	lsls	r4, r4, #6
10001c3a:	4325      	orrs	r5, r4
10001c3c:	602f      	str	r7, [r5, #0]
}
10001c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001c40:	40014100 	.word	0x40014100

10001c44 <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
10001c44:	4b05      	ldr	r3, [pc, #20]	; (10001c5c <gpio_set_input_enabled+0x18>)
10001c46:	0080      	lsls	r0, r0, #2
10001c48:	18c0      	adds	r0, r0, r3
10001c4a:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001c4c:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10001c4e:	2900      	cmp	r1, #0
10001c50:	d100      	bne.n	10001c54 <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001c52:	23c0      	movs	r3, #192	; 0xc0
10001c54:	019b      	lsls	r3, r3, #6
10001c56:	4318      	orrs	r0, r3
10001c58:	6002      	str	r2, [r0, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
10001c5a:	4770      	bx	lr
10001c5c:	4001c004 	.word	0x4001c004

10001c60 <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10001c60:	b570      	push	{r4, r5, r6, lr}
10001c62:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10001c64:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10001c66:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10001c68:	f7ff fef0 	bl	10001a4c <clock_get_hz>
10001c6c:	0021      	movs	r1, r4
10001c6e:	00c0      	lsls	r0, r0, #3
10001c70:	f7fe fab8 	bl	100001e4 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
10001c74:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
10001c76:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
10001c78:	d007      	beq.n	10001c8a <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
10001c7a:	4b0e      	ldr	r3, [pc, #56]	; (10001cb4 <uart_set_baudrate+0x54>)
10001c7c:	429d      	cmp	r5, r3
10001c7e:	d815      	bhi.n	10001cac <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
10001c80:	237f      	movs	r3, #127	; 0x7f
10001c82:	4018      	ands	r0, r3
10001c84:	1900      	adds	r0, r0, r4
10001c86:	002c      	movs	r4, r5
10001c88:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001c8a:	2080      	movs	r0, #128	; 0x80
10001c8c:	2300      	movs	r3, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
10001c8e:	6274      	str	r4, [r6, #36]	; 0x24
10001c90:	0180      	lsls	r0, r0, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
10001c92:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
10001c94:	362c      	adds	r6, #44	; 0x2c
10001c96:	4306      	orrs	r6, r0
10001c98:	6033      	str	r3, [r6, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
10001c9a:	2006      	movs	r0, #6
10001c9c:	f7ff fed6 	bl	10001a4c <clock_get_hz>
10001ca0:	01a1      	lsls	r1, r4, #6
10001ca2:	1949      	adds	r1, r1, r5
10001ca4:	0080      	lsls	r0, r0, #2
10001ca6:	f7fe fa9d 	bl	100001e4 <__udivsi3>
}
10001caa:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
10001cac:	2500      	movs	r5, #0
        baud_ibrd = 65535;
10001cae:	4c02      	ldr	r4, [pc, #8]	; (10001cb8 <uart_set_baudrate+0x58>)
10001cb0:	e7eb      	b.n	10001c8a <uart_set_baudrate+0x2a>
10001cb2:	46c0      	nop			; (mov r8, r8)
10001cb4:	0000fffe 	.word	0x0000fffe
10001cb8:	0000ffff 	.word	0x0000ffff

10001cbc <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
10001cbc:	b570      	push	{r4, r5, r6, lr}
10001cbe:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
10001cc0:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
10001cc2:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
10001cc4:	f7ff fec2 	bl	10001a4c <clock_get_hz>
10001cc8:	2800      	cmp	r0, #0
10001cca:	d02e      	beq.n	10001d2a <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10001ccc:	4b19      	ldr	r3, [pc, #100]	; (10001d34 <uart_init+0x78>)
10001cce:	429c      	cmp	r4, r3
10001cd0:	d02c      	beq.n	10001d2c <uart_init+0x70>
10001cd2:	2380      	movs	r3, #128	; 0x80
10001cd4:	03db      	lsls	r3, r3, #15
10001cd6:	4a18      	ldr	r2, [pc, #96]	; (10001d38 <uart_init+0x7c>)
10001cd8:	4918      	ldr	r1, [pc, #96]	; (10001d3c <uart_init+0x80>)
10001cda:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001cdc:	4a18      	ldr	r2, [pc, #96]	; (10001d40 <uart_init+0x84>)
10001cde:	6013      	str	r3, [r2, #0]
10001ce0:	0018      	movs	r0, r3
10001ce2:	688a      	ldr	r2, [r1, #8]
10001ce4:	4390      	bics	r0, r2
10001ce6:	d1fb      	bne.n	10001ce0 <uart_init+0x24>
 * \param uart UART instance
 * \return Number of UART, 0 or 1.
 */
static inline uint uart_get_index(uart_inst_t *uart) {
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    return uart == uart1 ? 1 : 0;
10001ce8:	4b16      	ldr	r3, [pc, #88]	; (10001d44 <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10001cea:	2180      	movs	r1, #128	; 0x80
10001cec:	18e3      	adds	r3, r4, r3
10001cee:	425a      	negs	r2, r3
10001cf0:	4153      	adcs	r3, r2
10001cf2:	4a15      	ldr	r2, [pc, #84]	; (10001d48 <uart_init+0x8c>)
10001cf4:	005b      	lsls	r3, r3, #1
10001cf6:	0049      	lsls	r1, r1, #1
10001cf8:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
10001cfa:	0020      	movs	r0, r4
10001cfc:	0029      	movs	r1, r5
10001cfe:	f7ff ffaf 	bl	10001c60 <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001d02:	2360      	movs	r3, #96	; 0x60
10001d04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 */
static inline void uart_set_format(uart_inst_t *uart, uint data_bits, uint stop_bits, uart_parity_t parity) {
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10001d06:	0021      	movs	r1, r4
10001d08:	4053      	eors	r3, r2
10001d0a:	226e      	movs	r2, #110	; 0x6e
10001d0c:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001d0e:	2280      	movs	r2, #128	; 0x80
10001d10:	312c      	adds	r1, #44	; 0x2c
10001d12:	0152      	lsls	r2, r2, #5
10001d14:	430a      	orrs	r2, r1
10001d16:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
10001d18:	4b0c      	ldr	r3, [pc, #48]	; (10001d4c <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001d1a:	2210      	movs	r2, #16
10001d1c:	6323      	str	r3, [r4, #48]	; 0x30
10001d1e:	2380      	movs	r3, #128	; 0x80
10001d20:	019b      	lsls	r3, r3, #6
10001d22:	430b      	orrs	r3, r1
10001d24:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
10001d26:	2303      	movs	r3, #3
10001d28:	64a3      	str	r3, [r4, #72]	; 0x48
}
10001d2a:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10001d2c:	2380      	movs	r3, #128	; 0x80
10001d2e:	041b      	lsls	r3, r3, #16
10001d30:	e7d1      	b.n	10001cd6 <uart_init+0x1a>
10001d32:	46c0      	nop			; (mov r8, r8)
10001d34:	40038000 	.word	0x40038000
10001d38:	4000e000 	.word	0x4000e000
10001d3c:	4000c000 	.word	0x4000c000
10001d40:	4000f000 	.word	0x4000f000
10001d44:	bffc8000 	.word	0xbffc8000
10001d48:	200004a8 	.word	0x200004a8
10001d4c:	00000301 	.word	0x00000301

10001d50 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
10001d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10001d52:	4f0f      	ldr	r7, [pc, #60]	; (10001d90 <z_sys_init_run_level+0x40>)
10001d54:	0083      	lsls	r3, r0, #2
10001d56:	59dd      	ldr	r5, [r3, r7]
10001d58:	3001      	adds	r0, #1
10001d5a:	0084      	lsls	r4, r0, #2
10001d5c:	593b      	ldr	r3, [r7, r4]
10001d5e:	42ab      	cmp	r3, r5
10001d60:	d800      	bhi.n	10001d64 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
10001d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
10001d64:	686e      	ldr	r6, [r5, #4]
		int rc = entry->init(dev);
10001d66:	682b      	ldr	r3, [r5, #0]
10001d68:	0030      	movs	r0, r6
10001d6a:	4798      	blx	r3
		if (dev != NULL) {
10001d6c:	2e00      	cmp	r6, #0
10001d6e:	d00d      	beq.n	10001d8c <z_sys_init_run_level+0x3c>
				dev->state->init_res = rc;
10001d70:	68f3      	ldr	r3, [r6, #12]
			if (rc != 0) {
10001d72:	2800      	cmp	r0, #0
10001d74:	d006      	beq.n	10001d84 <z_sys_init_run_level+0x34>
				dev->state->init_res = rc;
10001d76:	17c2      	asrs	r2, r0, #31
10001d78:	1880      	adds	r0, r0, r2
10001d7a:	4050      	eors	r0, r2
10001d7c:	28ff      	cmp	r0, #255	; 0xff
10001d7e:	dd00      	ble.n	10001d82 <z_sys_init_run_level+0x32>
10001d80:	20ff      	movs	r0, #255	; 0xff
10001d82:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
10001d84:	2101      	movs	r1, #1
10001d86:	785a      	ldrb	r2, [r3, #1]
10001d88:	430a      	orrs	r2, r1
10001d8a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10001d8c:	3508      	adds	r5, #8
10001d8e:	e7e5      	b.n	10001d5c <z_sys_init_run_level+0xc>
10001d90:	10004278 	.word	0x10004278

10001d94 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
10001d94:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
10001d96:	2401      	movs	r4, #1
10001d98:	4b09      	ldr	r3, [pc, #36]	; (10001dc0 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
10001d9a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
10001d9c:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
10001d9e:	f7ff ffd7 	bl	10001d50 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
10001da2:	f000 ffb1 	bl	10002d08 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
10001da6:	2003      	movs	r0, #3
10001da8:	f7ff ffd2 	bl	10001d50 <z_sys_init_run_level>

	z_init_static_threads();
10001dac:	f000 f8fa 	bl	10001fa4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
10001db0:	f7fe fb56 	bl	10000460 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
10001db4:	4a03      	ldr	r2, [pc, #12]	; (10001dc4 <bg_thread_main+0x30>)
10001db6:	7b13      	ldrb	r3, [r2, #12]
10001db8:	43a3      	bics	r3, r4
10001dba:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
10001dbc:	bd10      	pop	{r4, pc}
10001dbe:	46c0      	nop			; (mov r8, r8)
10001dc0:	200004ac 	.word	0x200004ac
10001dc4:	200002c0 	.word	0x200002c0

10001dc8 <z_bss_zero>:
{
10001dc8:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
10001dca:	4803      	ldr	r0, [pc, #12]	; (10001dd8 <z_bss_zero+0x10>)
10001dcc:	4a03      	ldr	r2, [pc, #12]	; (10001ddc <z_bss_zero+0x14>)
10001dce:	2100      	movs	r1, #0
10001dd0:	1a12      	subs	r2, r2, r0
10001dd2:	f001 fef1 	bl	10003bb8 <z_early_memset>
}
10001dd6:	bd10      	pop	{r4, pc}
10001dd8:	20000250 	.word	0x20000250
10001ddc:	200004b0 	.word	0x200004b0

10001de0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
10001de0:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
10001de2:	2670      	movs	r6, #112	; 0x70
10001de4:	4346      	muls	r6, r0
10001de6:	4b13      	ldr	r3, [pc, #76]	; (10001e34 <z_init_cpu+0x54>)
{
10001de8:	0004      	movs	r4, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
10001dea:	4913      	ldr	r1, [pc, #76]	; (10001e38 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001dec:	2518      	movs	r5, #24
	struct k_thread *thread = &z_idle_threads[i];
10001dee:	199e      	adds	r6, r3, r6
	k_thread_stack_t *stack = z_idle_stacks[i];
10001df0:	0203      	lsls	r3, r0, #8
10001df2:	1859      	adds	r1, r3, r1
	z_setup_new_thread(thread, stack,
10001df4:	2300      	movs	r3, #0
10001df6:	2001      	movs	r0, #1
10001df8:	2280      	movs	r2, #128	; 0x80
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001dfa:	4365      	muls	r5, r4
{
10001dfc:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
10001dfe:	9305      	str	r3, [sp, #20]
10001e00:	9302      	str	r3, [sp, #8]
10001e02:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001e04:	4b0d      	ldr	r3, [pc, #52]	; (10001e3c <z_init_cpu+0x5c>)
	z_setup_new_thread(thread, stack,
10001e06:	9004      	str	r0, [sp, #16]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10001e08:	195d      	adds	r5, r3, r5
	z_setup_new_thread(thread, stack,
10001e0a:	300e      	adds	r0, #14
10001e0c:	9003      	str	r0, [sp, #12]
10001e0e:	4b0c      	ldr	r3, [pc, #48]	; (10001e40 <z_init_cpu+0x60>)
10001e10:	0030      	movs	r0, r6
10001e12:	9500      	str	r5, [sp, #0]
10001e14:	0052      	lsls	r2, r2, #1
10001e16:	f000 f86f 	bl	10001ef8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
10001e1a:	2204      	movs	r2, #4
10001e1c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10001e1e:	4809      	ldr	r0, [pc, #36]	; (10001e44 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
10001e20:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10001e22:	3401      	adds	r4, #1
10001e24:	02e4      	lsls	r4, r4, #11
10001e26:	4393      	bics	r3, r2
10001e28:	1824      	adds	r4, r4, r0
10001e2a:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
10001e2c:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
10001e2e:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
10001e30:	b006      	add	sp, #24
10001e32:	bd70      	pop	{r4, r5, r6, pc}
10001e34:	20000250 	.word	0x20000250
10001e38:	200008b0 	.word	0x200008b0
10001e3c:	2000046c 	.word	0x2000046c
10001e40:	10003be3 	.word	0x10003be3
10001e44:	200009b0 	.word	0x200009b0

10001e48 <z_cstart>:
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
10001e48:	2280      	movs	r2, #128	; 0x80
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
10001e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
10001e4c:	4b22      	ldr	r3, [pc, #136]	; (10001ed8 <z_cstart+0x90>)
10001e4e:	0112      	lsls	r2, r2, #4
10001e50:	b0a3      	sub	sp, #140	; 0x8c
10001e52:	189b      	adds	r3, r3, r2
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
10001e54:	f383 8808 	msr	MSP, r3
10001e58:	4920      	ldr	r1, [pc, #128]	; (10001edc <z_cstart+0x94>)
10001e5a:	4a21      	ldr	r2, [pc, #132]	; (10001ee0 <z_cstart+0x98>)
10001e5c:	6a0b      	ldr	r3, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
10001e5e:	2400      	movs	r4, #0
10001e60:	401a      	ands	r2, r3
10001e62:	23e0      	movs	r3, #224	; 0xe0
10001e64:	041b      	lsls	r3, r3, #16
10001e66:	4313      	orrs	r3, r2
10001e68:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
10001e6a:	f001 fa59 	bl	10003320 <z_arm_fault_init>
	z_arm_cpu_idle_init();
10001e6e:	f7ff f897 	bl	10000fa0 <z_arm_cpu_idle_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
10001e72:	2202      	movs	r2, #2
#endif

	_current_cpu->current = dummy_thread;
10001e74:	4e1b      	ldr	r6, [pc, #108]	; (10001ee4 <z_cstart+0x9c>)
	dummy_thread->base.user_options = K_ESSENTIAL;
10001e76:	ab06      	add	r3, sp, #24
10001e78:	32ff      	adds	r2, #255	; 0xff
10001e7a:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
10001e7c:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
10001e7e:	941f      	str	r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
10001e80:	f001 fe70 	bl	10003b64 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
10001e84:	0020      	movs	r0, r4
10001e86:	f7ff ff63 	bl	10001d50 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
10001e8a:	2001      	movs	r0, #1
10001e8c:	f7ff ff60 	bl	10001d50 <z_sys_init_run_level>
	z_sched_init();
10001e90:	f000 fcb4 	bl	100027fc <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10001e94:	4d14      	ldr	r5, [pc, #80]	; (10001ee8 <z_cstart+0xa0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10001e96:	4b15      	ldr	r3, [pc, #84]	; (10001eec <z_cstart+0xa4>)
	_kernel.ready_q.cache = &z_main_thread;
10001e98:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10001e9a:	2280      	movs	r2, #128	; 0x80
10001e9c:	9305      	str	r3, [sp, #20]
10001e9e:	2301      	movs	r3, #1
10001ea0:	4f13      	ldr	r7, [pc, #76]	; (10001ef0 <z_cstart+0xa8>)
10001ea2:	4914      	ldr	r1, [pc, #80]	; (10001ef4 <z_cstart+0xac>)
10001ea4:	9304      	str	r3, [sp, #16]
10001ea6:	00d2      	lsls	r2, r2, #3
10001ea8:	003b      	movs	r3, r7
10001eaa:	0028      	movs	r0, r5
10001eac:	9403      	str	r4, [sp, #12]
10001eae:	9402      	str	r4, [sp, #8]
10001eb0:	9401      	str	r4, [sp, #4]
10001eb2:	9400      	str	r4, [sp, #0]
10001eb4:	f000 f820 	bl	10001ef8 <z_setup_new_thread>
10001eb8:	2204      	movs	r2, #4
10001eba:	0006      	movs	r6, r0
10001ebc:	7b6b      	ldrb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
10001ebe:	0028      	movs	r0, r5
10001ec0:	4393      	bics	r3, r2
10001ec2:	736b      	strb	r3, [r5, #13]
10001ec4:	f001 ff24 	bl	10003d10 <z_ready_thread>
	z_init_cpu(0);
10001ec8:	0020      	movs	r0, r4
10001eca:	f7ff ff89 	bl	10001de0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
10001ece:	003a      	movs	r2, r7
10001ed0:	0031      	movs	r1, r6
10001ed2:	0028      	movs	r0, r5
10001ed4:	f7ff f930 	bl	10001138 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
10001ed8:	200009b0 	.word	0x200009b0
10001edc:	e000ed00 	.word	0xe000ed00
10001ee0:	ff00ffff 	.word	0xff00ffff
10001ee4:	2000046c 	.word	0x2000046c
10001ee8:	200002c0 	.word	0x200002c0
10001eec:	100042ea 	.word	0x100042ea
10001ef0:	10001d95 	.word	0x10001d95
10001ef4:	200004b0 	.word	0x200004b0

10001ef8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
10001ef8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
10001efa:	0004      	movs	r4, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10001efc:	1dd5      	adds	r5, r2, #7
10001efe:	2207      	movs	r2, #7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
10001f00:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
10001f02:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10001f04:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
10001f06:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
10001f08:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
10001f0a:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
10001f0c:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10001f0e:	4395      	bics	r5, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
10001f12:	7360      	strb	r0, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001f14:	9202      	str	r2, [sp, #8]
10001f16:	9a09      	ldr	r2, [sp, #36]	; 0x24

	thread_base->prio = priority;
10001f18:	980b      	ldr	r0, [sp, #44]	; 0x2c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001f1a:	9201      	str	r2, [sp, #4]
10001f1c:	9a08      	ldr	r2, [sp, #32]
	stack_ptr = (char *)stack + stack_obj_size;
10001f1e:	194d      	adds	r5, r1, r5
	thread_base->prio = priority;
10001f20:	73a0      	strb	r0, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001f22:	9200      	str	r2, [sp, #0]
10001f24:	0020      	movs	r0, r4
10001f26:	002a      	movs	r2, r5
	thread_base->pended_on = NULL;
10001f28:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
10001f2a:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
10001f2c:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
10001f2e:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10001f30:	f7ff f8ec 	bl	1000110c <arch_new_thread>
	if (!_current) {
10001f34:	4b04      	ldr	r3, [pc, #16]	; (10001f48 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
10001f36:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
10001f38:	689b      	ldr	r3, [r3, #8]
10001f3a:	42b3      	cmp	r3, r6
10001f3c:	d000      	beq.n	10001f40 <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
10001f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
10001f40:	0028      	movs	r0, r5
10001f42:	6663      	str	r3, [r4, #100]	; 0x64
10001f44:	b004      	add	sp, #16
10001f46:	bd70      	pop	{r4, r5, r6, pc}
10001f48:	2000046c 	.word	0x2000046c

10001f4c <z_impl_k_thread_create>:
{
10001f4c:	b570      	push	{r4, r5, r6, lr}
10001f4e:	0004      	movs	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10001f50:	2000      	movs	r0, #0
{
10001f52:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10001f54:	9005      	str	r0, [sp, #20]
10001f56:	980e      	ldr	r0, [sp, #56]	; 0x38
{
10001f58:	9d11      	ldr	r5, [sp, #68]	; 0x44
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10001f5a:	9004      	str	r0, [sp, #16]
10001f5c:	980d      	ldr	r0, [sp, #52]	; 0x34
{
10001f5e:	9e10      	ldr	r6, [sp, #64]	; 0x40
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10001f60:	9003      	str	r0, [sp, #12]
10001f62:	980c      	ldr	r0, [sp, #48]	; 0x30
10001f64:	9002      	str	r0, [sp, #8]
10001f66:	980b      	ldr	r0, [sp, #44]	; 0x2c
10001f68:	9001      	str	r0, [sp, #4]
10001f6a:	980a      	ldr	r0, [sp, #40]	; 0x28
10001f6c:	9000      	str	r0, [sp, #0]
10001f6e:	0020      	movs	r0, r4
10001f70:	f7ff ffc2 	bl	10001ef8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
10001f74:	002b      	movs	r3, r5
10001f76:	1c72      	adds	r2, r6, #1
10001f78:	d101      	bne.n	10001f7e <z_impl_k_thread_create+0x32>
10001f7a:	3301      	adds	r3, #1
10001f7c:	d005      	beq.n	10001f8a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10001f7e:	002b      	movs	r3, r5
10001f80:	4333      	orrs	r3, r6
10001f82:	d105      	bne.n	10001f90 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
10001f84:	0020      	movs	r0, r4
10001f86:	f000 fb95 	bl	100026b4 <z_sched_start>
}
10001f8a:	0020      	movs	r0, r4
10001f8c:	b006      	add	sp, #24
10001f8e:	bd70      	pop	{r4, r5, r6, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10001f90:	0020      	movs	r0, r4
10001f92:	0032      	movs	r2, r6
10001f94:	002b      	movs	r3, r5
10001f96:	4902      	ldr	r1, [pc, #8]	; (10001fa0 <z_impl_k_thread_create+0x54>)
10001f98:	3018      	adds	r0, #24
10001f9a:	f000 fdb3 	bl	10002b04 <z_add_timeout>
10001f9e:	e7f4      	b.n	10001f8a <z_impl_k_thread_create+0x3e>
10001fa0:	10003d29 	.word	0x10003d29

10001fa4 <z_init_static_threads>:
{
10001fa4:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
10001fa6:	4c20      	ldr	r4, [pc, #128]	; (10002028 <z_init_static_threads+0x84>)
{
10001fa8:	b086      	sub	sp, #24
10001faa:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
10001fac:	4d1f      	ldr	r5, [pc, #124]	; (1000202c <z_init_static_threads+0x88>)
10001fae:	42ac      	cmp	r4, r5
10001fb0:	d308      	bcc.n	10001fc4 <z_init_static_threads+0x20>
	k_sched_lock();
10001fb2:	f000 fa9d 	bl	100024f0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
10001fb6:	0034      	movs	r4, r6
10001fb8:	42ac      	cmp	r4, r5
10001fba:	d319      	bcc.n	10001ff0 <z_init_static_threads+0x4c>
	k_sched_unlock();
10001fbc:	f000 fc08 	bl	100027d0 <k_sched_unlock>
}
10001fc0:	b006      	add	sp, #24
10001fc2:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
10001fc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
10001fc6:	9305      	str	r3, [sp, #20]
10001fc8:	6a23      	ldr	r3, [r4, #32]
10001fca:	9304      	str	r3, [sp, #16]
10001fcc:	69e3      	ldr	r3, [r4, #28]
10001fce:	9303      	str	r3, [sp, #12]
10001fd0:	69a3      	ldr	r3, [r4, #24]
10001fd2:	9302      	str	r3, [sp, #8]
10001fd4:	6963      	ldr	r3, [r4, #20]
10001fd6:	9301      	str	r3, [sp, #4]
10001fd8:	6923      	ldr	r3, [r4, #16]
10001fda:	9300      	str	r3, [sp, #0]
10001fdc:	68e3      	ldr	r3, [r4, #12]
10001fde:	68a2      	ldr	r2, [r4, #8]
10001fe0:	6861      	ldr	r1, [r4, #4]
10001fe2:	6820      	ldr	r0, [r4, #0]
10001fe4:	f7ff ff88 	bl	10001ef8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
10001fe8:	6823      	ldr	r3, [r4, #0]
10001fea:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
10001fec:	3430      	adds	r4, #48	; 0x30
10001fee:	e7dd      	b.n	10001fac <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10001ff0:	6a60      	ldr	r0, [r4, #36]	; 0x24
10001ff2:	1c43      	adds	r3, r0, #1
10001ff4:	d00f      	beq.n	10002016 <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
10001ff6:	43c3      	mvns	r3, r0
10001ff8:	17db      	asrs	r3, r3, #31
10001ffa:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
10001ffc:	220a      	movs	r2, #10
10001ffe:	2300      	movs	r3, #0
10002000:	17c1      	asrs	r1, r0, #31
10002002:	f7fe f999 	bl	10000338 <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
10002006:	6826      	ldr	r6, [r4, #0]
10002008:	000b      	movs	r3, r1
1000200a:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
1000200c:	4301      	orrs	r1, r0
1000200e:	d104      	bne.n	1000201a <z_init_static_threads+0x76>
	z_sched_start(thread);
10002010:	0030      	movs	r0, r6
10002012:	f000 fb4f 	bl	100026b4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
10002016:	3430      	adds	r4, #48	; 0x30
10002018:	e7ce      	b.n	10001fb8 <z_init_static_threads+0x14>
1000201a:	0030      	movs	r0, r6
1000201c:	4904      	ldr	r1, [pc, #16]	; (10002030 <z_init_static_threads+0x8c>)
1000201e:	3018      	adds	r0, #24
10002020:	f000 fd70 	bl	10002b04 <z_add_timeout>
10002024:	e7f7      	b.n	10002016 <z_init_static_threads+0x72>
10002026:	46c0      	nop			; (mov r8, r8)
10002028:	20000200 	.word	0x20000200
1000202c:	20000200 	.word	0x20000200
10002030:	10003d29 	.word	0x10003d29

10002034 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
10002034:	b5f0      	push	{r4, r5, r6, r7, lr}
10002036:	000f      	movs	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
10002038:	0001      	movs	r1, r0
{
1000203a:	b085      	sub	sp, #20
	key = k_spin_lock(&msgq->lock);
1000203c:	3108      	adds	r1, #8
{
1000203e:	0004      	movs	r4, r0
	key = k_spin_lock(&msgq->lock);
10002040:	9103      	str	r1, [sp, #12]
	__asm__ volatile("mrs %0, PRIMASK;"
10002042:	f3ef 8610 	mrs	r6, PRIMASK
10002046:	b672      	cpsid	i

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
10002048:	6a01      	ldr	r1, [r0, #32]
1000204a:	68c0      	ldr	r0, [r0, #12]
1000204c:	4281      	cmp	r1, r0
1000204e:	d22b      	bcs.n	100020a8 <z_impl_k_msgq_put+0x74>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
10002050:	0020      	movs	r0, r4
10002052:	f001 feb1 	bl	10003db8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
10002056:	0039      	movs	r1, r7
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
10002058:	1e05      	subs	r5, r0, #0
			(void)memcpy(pending_thread->base.swap_data, data,
1000205a:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
1000205c:	d00e      	beq.n	1000207c <z_impl_k_msgq_put+0x48>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
1000205e:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
10002060:	6940      	ldr	r0, [r0, #20]
10002062:	f001 f99d 	bl	100033a0 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
10002066:	0028      	movs	r0, r5
10002068:	66ec      	str	r4, [r5, #108]	; 0x6c
1000206a:	f001 fe51 	bl	10003d10 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
1000206e:	9803      	ldr	r0, [sp, #12]
10002070:	0031      	movs	r1, r6
10002072:	f000 fa27 	bl	100024c4 <z_reschedule>
			return 0;
10002076:	0020      	movs	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
10002078:	b005      	add	sp, #20
1000207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
1000207c:	69e0      	ldr	r0, [r4, #28]
1000207e:	f001 f98f 	bl	100033a0 <memcpy>
			msgq->write_ptr += msgq->msg_size;
10002082:	69e3      	ldr	r3, [r4, #28]
10002084:	68a2      	ldr	r2, [r4, #8]
10002086:	189b      	adds	r3, r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
10002088:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
1000208a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
1000208c:	4293      	cmp	r3, r2
1000208e:	d101      	bne.n	10002094 <z_impl_k_msgq_put+0x60>
				msgq->write_ptr = msgq->buffer_start;
10002090:	6923      	ldr	r3, [r4, #16]
10002092:	61e3      	str	r3, [r4, #28]
		result = 0;
10002094:	2000      	movs	r0, #0
			msgq->used_msgs++;
10002096:	6a23      	ldr	r3, [r4, #32]
10002098:	3301      	adds	r3, #1
1000209a:	6223      	str	r3, [r4, #32]
	if (key != 0U) {
1000209c:	2e00      	cmp	r6, #0
1000209e:	d1eb      	bne.n	10002078 <z_impl_k_msgq_put+0x44>
	__asm__ volatile(
100020a0:	b662      	cpsie	i
100020a2:	f3bf 8f6f 	isb	sy
100020a6:	e7e7      	b.n	10002078 <z_impl_k_msgq_put+0x44>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
100020a8:	0011      	movs	r1, r2
100020aa:	4319      	orrs	r1, r3
100020ac:	d00a      	beq.n	100020c4 <z_impl_k_msgq_put+0x90>
		_current->base.swap_data = (void *) data;
100020ae:	4907      	ldr	r1, [pc, #28]	; (100020cc <z_impl_k_msgq_put+0x98>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
100020b0:	9803      	ldr	r0, [sp, #12]
		_current->base.swap_data = (void *) data;
100020b2:	6889      	ldr	r1, [r1, #8]
100020b4:	614f      	str	r7, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
100020b6:	9200      	str	r2, [sp, #0]
100020b8:	0031      	movs	r1, r6
100020ba:	0022      	movs	r2, r4
100020bc:	9301      	str	r3, [sp, #4]
100020be:	f000 fb47 	bl	10002750 <z_pend_curr>
		return result;
100020c2:	e7d9      	b.n	10002078 <z_impl_k_msgq_put+0x44>
		result = -ENOMSG;
100020c4:	2023      	movs	r0, #35	; 0x23
100020c6:	4240      	negs	r0, r0
100020c8:	e7e8      	b.n	1000209c <z_impl_k_msgq_put+0x68>
100020ca:	46c0      	nop			; (mov r8, r8)
100020cc:	2000046c 	.word	0x2000046c

100020d0 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
100020d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100020d2:	0004      	movs	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
100020d4:	0027      	movs	r7, r4
{
100020d6:	0008      	movs	r0, r1
	key = k_spin_lock(&msgq->lock);
100020d8:	3708      	adds	r7, #8
	__asm__ volatile("mrs %0, PRIMASK;"
100020da:	f3ef 8610 	mrs	r6, PRIMASK
100020de:	b672      	cpsid	i

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
100020e0:	6a21      	ldr	r1, [r4, #32]
100020e2:	2900      	cmp	r1, #0
100020e4:	d032      	beq.n	1000214c <z_impl_k_msgq_get+0x7c>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
100020e6:	68a2      	ldr	r2, [r4, #8]
100020e8:	69a1      	ldr	r1, [r4, #24]
100020ea:	f001 f959 	bl	100033a0 <memcpy>
		msgq->read_ptr += msgq->msg_size;
100020ee:	69a3      	ldr	r3, [r4, #24]
100020f0:	68a2      	ldr	r2, [r4, #8]
100020f2:	189b      	adds	r3, r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
100020f4:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
100020f6:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
100020f8:	4293      	cmp	r3, r2
100020fa:	d101      	bne.n	10002100 <z_impl_k_msgq_get+0x30>
			msgq->read_ptr = msgq->buffer_start;
100020fc:	6923      	ldr	r3, [r4, #16]
100020fe:	61a3      	str	r3, [r4, #24]
		}
		msgq->used_msgs--;
10002100:	6a23      	ldr	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
10002102:	0020      	movs	r0, r4
		msgq->used_msgs--;
10002104:	3b01      	subs	r3, #1
10002106:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
10002108:	f001 fe56 	bl	10003db8 <z_unpend_first_thread>
1000210c:	0005      	movs	r5, r0

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
		}
		result = 0;
1000210e:	2000      	movs	r0, #0
		if (pending_thread != NULL) {
10002110:	4285      	cmp	r5, r0
10002112:	d02b      	beq.n	1000216c <z_impl_k_msgq_get+0x9c>
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
10002114:	68a2      	ldr	r2, [r4, #8]
10002116:	6969      	ldr	r1, [r5, #20]
10002118:	69e0      	ldr	r0, [r4, #28]
1000211a:	f001 f941 	bl	100033a0 <memcpy>
			msgq->write_ptr += msgq->msg_size;
1000211e:	69e3      	ldr	r3, [r4, #28]
10002120:	68a2      	ldr	r2, [r4, #8]
10002122:	189b      	adds	r3, r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
10002124:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
10002126:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
10002128:	4293      	cmp	r3, r2
1000212a:	d101      	bne.n	10002130 <z_impl_k_msgq_get+0x60>
				msgq->write_ptr = msgq->buffer_start;
1000212c:	6923      	ldr	r3, [r4, #16]
1000212e:	61e3      	str	r3, [r4, #28]
			msgq->used_msgs++;
10002130:	6a23      	ldr	r3, [r4, #32]
			z_ready_thread(pending_thread);
10002132:	0028      	movs	r0, r5
			msgq->used_msgs++;
10002134:	3301      	adds	r3, #1
10002136:	6223      	str	r3, [r4, #32]
10002138:	2400      	movs	r4, #0
1000213a:	66ec      	str	r4, [r5, #108]	; 0x6c
			z_ready_thread(pending_thread);
1000213c:	f001 fde8 	bl	10003d10 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
10002140:	0038      	movs	r0, r7
10002142:	0031      	movs	r1, r6
10002144:	f000 f9be 	bl	100024c4 <z_reschedule>
			return 0;
10002148:	0020      	movs	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
1000214a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
1000214c:	0011      	movs	r1, r2
1000214e:	4319      	orrs	r1, r3
10002150:	d00a      	beq.n	10002168 <z_impl_k_msgq_get+0x98>
		_current->base.swap_data = data;
10002152:	4909      	ldr	r1, [pc, #36]	; (10002178 <z_impl_k_msgq_get+0xa8>)
10002154:	6889      	ldr	r1, [r1, #8]
10002156:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
10002158:	9200      	str	r2, [sp, #0]
1000215a:	0031      	movs	r1, r6
1000215c:	0022      	movs	r2, r4
1000215e:	0038      	movs	r0, r7
10002160:	9301      	str	r3, [sp, #4]
10002162:	f000 faf5 	bl	10002750 <z_pend_curr>
		return result;
10002166:	e7f0      	b.n	1000214a <z_impl_k_msgq_get+0x7a>
		result = -ENOMSG;
10002168:	2023      	movs	r0, #35	; 0x23
1000216a:	4240      	negs	r0, r0
	if (key != 0U) {
1000216c:	2e00      	cmp	r6, #0
1000216e:	d1ec      	bne.n	1000214a <z_impl_k_msgq_get+0x7a>
	__asm__ volatile(
10002170:	b662      	cpsie	i
10002172:	f3bf 8f6f 	isb	sy
10002176:	e7e8      	b.n	1000214a <z_impl_k_msgq_get+0x7a>
10002178:	2000046c 	.word	0x2000046c

1000217c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
1000217c:	b570      	push	{r4, r5, r6, lr}
1000217e:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10002180:	f3ef 8510 	mrs	r5, PRIMASK
10002184:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
10002186:	f001 fe17 	bl	10003db8 <z_unpend_first_thread>

	if (thread != NULL) {
1000218a:	2800      	cmp	r0, #0
1000218c:	d008      	beq.n	100021a0 <z_impl_k_sem_give+0x24>
1000218e:	2300      	movs	r3, #0
10002190:	66c3      	str	r3, [r0, #108]	; 0x6c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
10002192:	f001 fdbd 	bl	10003d10 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
10002196:	0029      	movs	r1, r5
10002198:	4805      	ldr	r0, [pc, #20]	; (100021b0 <z_impl_k_sem_give+0x34>)
1000219a:	f000 f993 	bl	100024c4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
1000219e:	bd70      	pop	{r4, r5, r6, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
100021a0:	68a2      	ldr	r2, [r4, #8]
100021a2:	68e3      	ldr	r3, [r4, #12]
100021a4:	1a9b      	subs	r3, r3, r2
100021a6:	1e59      	subs	r1, r3, #1
100021a8:	418b      	sbcs	r3, r1
100021aa:	189b      	adds	r3, r3, r2
100021ac:	60a3      	str	r3, [r4, #8]
}
100021ae:	e7f2      	b.n	10002196 <z_impl_k_sem_give+0x1a>
100021b0:	200004ad 	.word	0x200004ad

100021b4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
100021b4:	b513      	push	{r0, r1, r4, lr}
100021b6:	0001      	movs	r1, r0
100021b8:	f3ef 8010 	mrs	r0, PRIMASK
100021bc:	b672      	cpsid	i

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
100021be:	688c      	ldr	r4, [r1, #8]
100021c0:	2c00      	cmp	r4, #0
100021c2:	d007      	beq.n	100021d4 <z_impl_k_sem_take+0x20>
		sem->count--;
100021c4:	3c01      	subs	r4, #1
100021c6:	608c      	str	r4, [r1, #8]
	if (key != 0U) {
100021c8:	2800      	cmp	r0, #0
100021ca:	d115      	bne.n	100021f8 <z_impl_k_sem_take+0x44>
	__asm__ volatile(
100021cc:	b662      	cpsie	i
100021ce:	f3bf 8f6f 	isb	sy

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
100021d2:	bd16      	pop	{r1, r2, r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
100021d4:	0014      	movs	r4, r2
100021d6:	431c      	orrs	r4, r3
100021d8:	d106      	bne.n	100021e8 <z_impl_k_sem_take+0x34>
	if (key != 0U) {
100021da:	2800      	cmp	r0, #0
100021dc:	d10e      	bne.n	100021fc <z_impl_k_sem_take+0x48>
	__asm__ volatile(
100021de:	b662      	cpsie	i
100021e0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
100021e4:	3810      	subs	r0, #16
100021e6:	e7f4      	b.n	100021d2 <z_impl_k_sem_take+0x1e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
100021e8:	9200      	str	r2, [sp, #0]
100021ea:	9301      	str	r3, [sp, #4]
100021ec:	000a      	movs	r2, r1
100021ee:	0001      	movs	r1, r0
100021f0:	4804      	ldr	r0, [pc, #16]	; (10002204 <z_impl_k_sem_take+0x50>)
100021f2:	f000 faad 	bl	10002750 <z_pend_curr>
100021f6:	e7ec      	b.n	100021d2 <z_impl_k_sem_take+0x1e>
		ret = 0;
100021f8:	2000      	movs	r0, #0
100021fa:	e7ea      	b.n	100021d2 <z_impl_k_sem_take+0x1e>
		ret = -EBUSY;
100021fc:	2010      	movs	r0, #16
100021fe:	4240      	negs	r0, r0
	return ret;
10002200:	e7e7      	b.n	100021d2 <z_impl_k_sem_take+0x1e>
10002202:	46c0      	nop			; (mov r8, r8)
10002204:	200004ad 	.word	0x200004ad

10002208 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
10002208:	b5f0      	push	{r4, r5, r6, r7, lr}
1000220a:	0005      	movs	r5, r0
1000220c:	b087      	sub	sp, #28
	__asm__ volatile("mrs %0, PRIMASK;"
1000220e:	f3ef 8710 	mrs	r7, PRIMASK
10002212:	b672      	cpsid	i
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
10002214:	002e      	movs	r6, r5
10002216:	6f2c      	ldr	r4, [r5, #112]	; 0x70
10002218:	3688      	adds	r6, #136	; 0x88
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
1000221a:	2c00      	cmp	r4, #0
1000221c:	d113      	bne.n	10002246 <work_queue_main+0x3e>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
1000221e:	2102      	movs	r1, #2
10002220:	0030      	movs	r0, r6
10002222:	f001 fd09 	bl	10003c38 <flag_test_and_clear>
10002226:	2800      	cmp	r0, #0
10002228:	d13f      	bne.n	100022aa <work_queue_main+0xa2>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
1000222a:	2300      	movs	r3, #0
1000222c:	002a      	movs	r2, r5
1000222e:	9302      	str	r3, [sp, #8]
10002230:	2301      	movs	r3, #1
10002232:	425b      	negs	r3, r3
10002234:	17dc      	asrs	r4, r3, #31
10002236:	0039      	movs	r1, r7
10002238:	9300      	str	r3, [sp, #0]
1000223a:	9401      	str	r4, [sp, #4]
1000223c:	3278      	adds	r2, #120	; 0x78
1000223e:	4837      	ldr	r0, [pc, #220]	; (1000231c <work_queue_main+0x114>)
10002240:	f000 fbe0 	bl	10002a04 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
10002244:	e7e3      	b.n	1000220e <work_queue_main+0x6>
	return node->next;
10002246:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
10002248:	6f6a      	ldr	r2, [r5, #116]	; 0x74
	list->head = node;
1000224a:	672b      	str	r3, [r5, #112]	; 0x70
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
1000224c:	4294      	cmp	r4, r2
1000224e:	d100      	bne.n	10002252 <work_queue_main+0x4a>
	list->tail = node;
10002250:	676b      	str	r3, [r5, #116]	; 0x74
	*flagp |= BIT(bit);
10002252:	2302      	movs	r3, #2
10002254:	6832      	ldr	r2, [r6, #0]
10002256:	4313      	orrs	r3, r2
10002258:	6033      	str	r3, [r6, #0]
	*flagp &= ~BIT(bit);
1000225a:	2304      	movs	r3, #4
1000225c:	68e2      	ldr	r2, [r4, #12]
1000225e:	439a      	bics	r2, r3
10002260:	3b03      	subs	r3, #3
10002262:	4313      	orrs	r3, r2
10002264:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
10002266:	6863      	ldr	r3, [r4, #4]
	if (key != 0U) {
10002268:	2f00      	cmp	r7, #0
1000226a:	d102      	bne.n	10002272 <work_queue_main+0x6a>
	__asm__ volatile(
1000226c:	b662      	cpsie	i
1000226e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
10002272:	0020      	movs	r0, r4
10002274:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10002276:	f3ef 8310 	mrs	r3, PRIMASK
1000227a:	b672      	cpsid	i
1000227c:	9305      	str	r3, [sp, #20]
	*flagp &= ~BIT(bit);
1000227e:	68e3      	ldr	r3, [r4, #12]
10002280:	2101      	movs	r1, #1
10002282:	001a      	movs	r2, r3
10002284:	438a      	bics	r2, r1
	return (*flagp & BIT(bit)) != 0U;
10002286:	0850      	lsrs	r0, r2, #1
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10002288:	4208      	tst	r0, r1
1000228a:	d118      	bne.n	100022be <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
1000228c:	60e2      	str	r2, [r4, #12]
1000228e:	2202      	movs	r2, #2
10002290:	6833      	ldr	r3, [r6, #0]
10002292:	4393      	bics	r3, r2
	if (key != 0U) {
10002294:	9a05      	ldr	r2, [sp, #20]
10002296:	6033      	str	r3, [r6, #0]
	return (*flagp & BIT(bit)) != 0U;
10002298:	05db      	lsls	r3, r3, #23
1000229a:	0fdb      	lsrs	r3, r3, #31
1000229c:	2a00      	cmp	r2, #0
1000229e:	d039      	beq.n	10002314 <work_queue_main+0x10c>
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
100022a0:	2b00      	cmp	r3, #0
100022a2:	d1b4      	bne.n	1000220e <work_queue_main+0x6>
	z_impl_k_yield();
100022a4:	f000 fab8 	bl	10002818 <z_impl_k_yield>
}
100022a8:	e7b1      	b.n	1000220e <work_queue_main+0x6>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
100022aa:	002c      	movs	r4, r5
100022ac:	3480      	adds	r4, #128	; 0x80
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
100022ae:	2200      	movs	r2, #0
100022b0:	2101      	movs	r1, #1
100022b2:	0020      	movs	r0, r4
100022b4:	f001 fda7 	bl	10003e06 <z_sched_wake>
100022b8:	2800      	cmp	r0, #0
100022ba:	d1f8      	bne.n	100022ae <work_queue_main+0xa6>
100022bc:	e7b5      	b.n	1000222a <work_queue_main+0x22>
	*flagp &= ~BIT(bit);
100022be:	2203      	movs	r2, #3
100022c0:	4393      	bics	r3, r2
100022c2:	60e3      	str	r3, [r4, #12]
	return list->head;
100022c4:	4b16      	ldr	r3, [pc, #88]	; (10002320 <work_queue_main+0x118>)
100022c6:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
100022c8:	2800      	cmp	r0, #0
100022ca:	d0e0      	beq.n	1000228e <work_queue_main+0x86>
	return node->next;
100022cc:	2700      	movs	r7, #0
100022ce:	6803      	ldr	r3, [r0, #0]
100022d0:	9304      	str	r3, [sp, #16]
		if (wc->work == work) {
100022d2:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
100022d4:	0003      	movs	r3, r0
		if (wc->work == work) {
100022d6:	4294      	cmp	r4, r2
100022d8:	d10e      	bne.n	100022f8 <work_queue_main+0xf0>
100022da:	6802      	ldr	r2, [r0, #0]
100022dc:	4b10      	ldr	r3, [pc, #64]	; (10002320 <work_queue_main+0x118>)
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
100022de:	2f00      	cmp	r7, #0
100022e0:	d112      	bne.n	10002308 <work_queue_main+0x100>
100022e2:	6859      	ldr	r1, [r3, #4]
	list->head = node;
100022e4:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
100022e6:	4281      	cmp	r1, r0
100022e8:	d100      	bne.n	100022ec <work_queue_main+0xe4>
	list->tail = node;
100022ea:	605a      	str	r2, [r3, #4]
	parent->next = child;
100022ec:	2300      	movs	r3, #0
100022ee:	6003      	str	r3, [r0, #0]
			k_sem_give(&wc->sem);
100022f0:	3008      	adds	r0, #8
	z_impl_k_sem_give(sem);
100022f2:	f7ff ff43 	bl	1000217c <z_impl_k_sem_give>
}
100022f6:	003b      	movs	r3, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
100022f8:	9a04      	ldr	r2, [sp, #16]
100022fa:	2a00      	cmp	r2, #0
100022fc:	d0c7      	beq.n	1000228e <work_queue_main+0x86>
	return node->next;
100022fe:	001f      	movs	r7, r3
10002300:	6813      	ldr	r3, [r2, #0]
10002302:	0010      	movs	r0, r2
10002304:	9304      	str	r3, [sp, #16]
10002306:	e7e4      	b.n	100022d2 <work_queue_main+0xca>
	return list->tail;
10002308:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
1000230a:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
1000230c:	4288      	cmp	r0, r1
1000230e:	d1ed      	bne.n	100022ec <work_queue_main+0xe4>
	list->tail = node;
10002310:	605f      	str	r7, [r3, #4]
}
10002312:	e7eb      	b.n	100022ec <work_queue_main+0xe4>
	__asm__ volatile(
10002314:	b662      	cpsie	i
10002316:	f3bf 8f6f 	isb	sy
1000231a:	e7c1      	b.n	100022a0 <work_queue_main+0x98>
1000231c:	200004ad 	.word	0x200004ad
10002320:	20000490 	.word	0x20000490

10002324 <submit_to_queue_locked>:
{
10002324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
10002326:	68c3      	ldr	r3, [r0, #12]
{
10002328:	000e      	movs	r6, r1
	return (*flagp & BIT(bit)) != 0U;
1000232a:	0859      	lsrs	r1, r3, #1
1000232c:	2201      	movs	r2, #1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
1000232e:	000d      	movs	r5, r1
{
10002330:	0004      	movs	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10002332:	4015      	ands	r5, r2
10002334:	4211      	tst	r1, r2
10002336:	d126      	bne.n	10002386 <submit_to_queue_locked+0x62>
	return (*flagp & BIT(bit)) != 0U;
10002338:	0899      	lsrs	r1, r3, #2
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
1000233a:	4211      	tst	r1, r2
1000233c:	d125      	bne.n	1000238a <submit_to_queue_locked+0x66>
		if (*queuep == NULL) {
1000233e:	6832      	ldr	r2, [r6, #0]
10002340:	2a00      	cmp	r2, #0
10002342:	d101      	bne.n	10002348 <submit_to_queue_locked+0x24>
			*queuep = work->queue;
10002344:	6882      	ldr	r2, [r0, #8]
10002346:	6032      	str	r2, [r6, #0]
		ret = 1;
10002348:	2501      	movs	r5, #1
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
1000234a:	422b      	tst	r3, r5
1000234c:	d002      	beq.n	10002354 <submit_to_queue_locked+0x30>
			*queuep = work->queue;
1000234e:	68a3      	ldr	r3, [r4, #8]
			ret = 2;
10002350:	196d      	adds	r5, r5, r5
			*queuep = work->queue;
10002352:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
10002354:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
10002356:	2f00      	cmp	r7, #0
10002358:	d032      	beq.n	100023c0 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
1000235a:	4b1b      	ldr	r3, [pc, #108]	; (100023c8 <submit_to_queue_locked+0xa4>)
1000235c:	2000      	movs	r0, #0
1000235e:	689b      	ldr	r3, [r3, #8]
10002360:	42bb      	cmp	r3, r7
10002362:	d104      	bne.n	1000236e <submit_to_queue_locked+0x4a>
10002364:	f001 fc30 	bl	10003bc8 <k_is_in_isr>
10002368:	2301      	movs	r3, #1
1000236a:	4058      	eors	r0, r3
1000236c:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
1000236e:	003b      	movs	r3, r7
10002370:	2201      	movs	r2, #1
10002372:	3388      	adds	r3, #136	; 0x88
10002374:	681b      	ldr	r3, [r3, #0]
10002376:	0899      	lsrs	r1, r3, #2
10002378:	4011      	ands	r1, r2
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
1000237a:	4213      	tst	r3, r2
1000237c:	d022      	beq.n	100023c4 <submit_to_queue_locked+0xa0>
	} else if (draining && !chained) {
1000237e:	2900      	cmp	r1, #0
10002380:	d006      	beq.n	10002390 <submit_to_queue_locked+0x6c>
10002382:	2800      	cmp	r0, #0
10002384:	d107      	bne.n	10002396 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
10002386:	2510      	movs	r5, #16
		ret = -ENODEV;
10002388:	426d      	negs	r5, r5
		*queuep = NULL;
1000238a:	2300      	movs	r3, #0
1000238c:	6033      	str	r3, [r6, #0]
	return ret;
1000238e:	e012      	b.n	100023b6 <submit_to_queue_locked+0x92>
	return (*flagp & BIT(bit)) != 0U;
10002390:	08db      	lsrs	r3, r3, #3
	} else if (plugged && !draining) {
10002392:	4213      	tst	r3, r2
10002394:	d1f7      	bne.n	10002386 <submit_to_queue_locked+0x62>
	parent->next = child;
10002396:	2300      	movs	r3, #0
10002398:	6023      	str	r3, [r4, #0]
	return list->tail;
1000239a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
Z_GENLIST_APPEND(slist, snode)
1000239c:	2b00      	cmp	r3, #0
1000239e:	d10c      	bne.n	100023ba <submit_to_queue_locked+0x96>
	list->tail = node;
100023a0:	677c      	str	r4, [r7, #116]	; 0x74
	list->head = node;
100023a2:	673c      	str	r4, [r7, #112]	; 0x70
		(void)notify_queue_locked(queue);
100023a4:	0038      	movs	r0, r7
100023a6:	f001 fc53 	bl	10003c50 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
100023aa:	2304      	movs	r3, #4
100023ac:	68e2      	ldr	r2, [r4, #12]
100023ae:	4313      	orrs	r3, r2
100023b0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
100023b2:	6833      	ldr	r3, [r6, #0]
100023b4:	60a3      	str	r3, [r4, #8]
}
100023b6:	0028      	movs	r0, r5
100023b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
100023ba:	601c      	str	r4, [r3, #0]
	list->tail = node;
100023bc:	677c      	str	r4, [r7, #116]	; 0x74
}
100023be:	e7f1      	b.n	100023a4 <submit_to_queue_locked+0x80>
		return -EINVAL;
100023c0:	2516      	movs	r5, #22
100023c2:	e7e1      	b.n	10002388 <submit_to_queue_locked+0x64>
		ret = -ENODEV;
100023c4:	2513      	movs	r5, #19
100023c6:	e7df      	b.n	10002388 <submit_to_queue_locked+0x64>
100023c8:	2000046c 	.word	0x2000046c

100023cc <k_work_submit>:
{
100023cc:	b510      	push	{r4, lr}
100023ce:	0001      	movs	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
100023d0:	4801      	ldr	r0, [pc, #4]	; (100023d8 <k_work_submit+0xc>)
100023d2:	f001 fc46 	bl	10003c62 <k_work_submit_to_queue>
}
100023d6:	bd10      	pop	{r4, pc}
100023d8:	20000338 	.word	0x20000338

100023dc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
100023dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100023de:	0004      	movs	r4, r0
	list->head = NULL;
100023e0:	2000      	movs	r0, #0
100023e2:	6720      	str	r0, [r4, #112]	; 0x70
	list->tail = NULL;
100023e4:	6760      	str	r0, [r4, #116]	; 0x74
100023e6:	0020      	movs	r0, r4
100023e8:	0026      	movs	r6, r4
100023ea:	3078      	adds	r0, #120	; 0x78
100023ec:	b089      	sub	sp, #36	; 0x24
	list->head = (sys_dnode_t *)list;
100023ee:	67a0      	str	r0, [r4, #120]	; 0x78
	list->tail = (sys_dnode_t *)list;
100023f0:	67e0      	str	r0, [r4, #124]	; 0x7c
100023f2:	3680      	adds	r6, #128	; 0x80
	list->head = (sys_dnode_t *)list;
100023f4:	1d20      	adds	r0, r4, #4
100023f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
100023f8:	67c6      	str	r6, [r0, #124]	; 0x7c
	list->tail = (sys_dnode_t *)list;
100023fa:	3004      	adds	r0, #4
100023fc:	67c6      	str	r6, [r0, #124]	; 0x7c
	__ASSERT_NO_MSG(queue);
	__ASSERT_NO_MSG(stack);
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
	uint32_t flags = K_WORK_QUEUE_STARTED;
100023fe:	2001      	movs	r0, #1

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
10002400:	2d00      	cmp	r5, #0
10002402:	d007      	beq.n	10002414 <k_work_queue_start+0x38>
10002404:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
10002406:	4246      	negs	r6, r0
10002408:	4170      	adcs	r0, r6
1000240a:	26ff      	movs	r6, #255	; 0xff
1000240c:	4240      	negs	r0, r0
1000240e:	43b0      	bics	r0, r6
10002410:	3002      	adds	r0, #2
10002412:	30ff      	adds	r0, #255	; 0xff
	*flagp = flags;
10002414:	0026      	movs	r6, r4
10002416:	3688      	adds	r6, #136	; 0x88
10002418:	6030      	str	r0, [r6, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
1000241a:	2000      	movs	r0, #0
1000241c:	2601      	movs	r6, #1
1000241e:	4276      	negs	r6, r6
10002420:	17f7      	asrs	r7, r6, #31
10002422:	9004      	str	r0, [sp, #16]
10002424:	9303      	str	r3, [sp, #12]
10002426:	9002      	str	r0, [sp, #8]
10002428:	9001      	str	r0, [sp, #4]
1000242a:	9606      	str	r6, [sp, #24]
1000242c:	9707      	str	r7, [sp, #28]
1000242e:	0020      	movs	r0, r4
10002430:	4b08      	ldr	r3, [pc, #32]	; (10002454 <k_work_queue_start+0x78>)
10002432:	9400      	str	r4, [sp, #0]
10002434:	f7ff fd8a 	bl	10001f4c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
10002438:	2d00      	cmp	r5, #0
1000243a:	d005      	beq.n	10002448 <k_work_queue_start+0x6c>
1000243c:	6829      	ldr	r1, [r5, #0]
1000243e:	2900      	cmp	r1, #0
10002440:	d002      	beq.n	10002448 <k_work_queue_start+0x6c>
	return z_impl_k_thread_name_set(thread, str);
10002442:	0020      	movs	r0, r4
10002444:	f001 fbc6 	bl	10003bd4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
10002448:	0020      	movs	r0, r4
1000244a:	f001 fbc6 	bl	10003bda <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
1000244e:	b009      	add	sp, #36	; 0x24
10002450:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002452:	46c0      	nop			; (mov r8, r8)
10002454:	10002209 	.word	0x10002209

10002458 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
10002458:	b570      	push	{r4, r5, r6, lr}
	int ret = slice_ticks;
1000245a:	4d07      	ldr	r5, [pc, #28]	; (10002478 <z_reset_time_slice+0x20>)
1000245c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
1000245e:	2c00      	cmp	r4, #0
10002460:	d008      	beq.n	10002474 <z_reset_time_slice+0x1c>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
10002462:	f7ff f9db 	bl	1000181c <sys_clock_elapsed>
10002466:	4b05      	ldr	r3, [pc, #20]	; (1000247c <z_reset_time_slice+0x24>)
10002468:	1824      	adds	r4, r4, r0
		z_set_timeout_expiry(slice_time(curr), false);
1000246a:	2100      	movs	r1, #0
1000246c:	6828      	ldr	r0, [r5, #0]
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
1000246e:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
10002470:	f001 fcfb 	bl	10003e6a <z_set_timeout_expiry>
	}
}
10002474:	bd70      	pop	{r4, r5, r6, pc}
10002476:	46c0      	nop			; (mov r8, r8)
10002478:	200004a0 	.word	0x200004a0
1000247c:	2000046c 	.word	0x2000046c

10002480 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
10002480:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10002482:	f3ef 8410 	mrs	r4, PRIMASK
10002486:	b672      	cpsid	i
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
10002488:	2300      	movs	r3, #0
1000248a:	4a0b      	ldr	r2, [pc, #44]	; (100024b8 <k_sched_time_slice_set+0x38>)
1000248c:	4d0b      	ldr	r5, [pc, #44]	; (100024bc <k_sched_time_slice_set+0x3c>)
1000248e:	6113      	str	r3, [r2, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
10002490:	330a      	adds	r3, #10
10002492:	4343      	muls	r3, r0
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
10002494:	2800      	cmp	r0, #0
10002496:	dc0b      	bgt.n	100024b0 <k_sched_time_slice_set+0x30>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
10002498:	602b      	str	r3, [r5, #0]
		}
		slice_max_prio = prio;
1000249a:	4b09      	ldr	r3, [pc, #36]	; (100024c0 <k_sched_time_slice_set+0x40>)
		z_reset_time_slice(_current);
1000249c:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
1000249e:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
100024a0:	f7ff ffda 	bl	10002458 <z_reset_time_slice>
	if (key != 0U) {
100024a4:	2c00      	cmp	r4, #0
100024a6:	d102      	bne.n	100024ae <k_sched_time_slice_set+0x2e>
	__asm__ volatile(
100024a8:	b662      	cpsie	i
100024aa:	f3bf 8f6f 	isb	sy
	}
}
100024ae:	bd70      	pop	{r4, r5, r6, pc}
			slice_ticks = MAX(2, slice_ticks);
100024b0:	2b02      	cmp	r3, #2
100024b2:	daf1      	bge.n	10002498 <k_sched_time_slice_set+0x18>
100024b4:	2302      	movs	r3, #2
100024b6:	e7ef      	b.n	10002498 <k_sched_time_slice_set+0x18>
100024b8:	2000046c 	.word	0x2000046c
100024bc:	200004a0 	.word	0x200004a0
100024c0:	2000049c 	.word	0x2000049c

100024c4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
100024c4:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
100024c6:	2900      	cmp	r1, #0
100024c8:	d10a      	bne.n	100024e0 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
100024ca:	f3ef 8005 	mrs	r0, IPSR
	if (resched(key.key) && need_swap()) {
100024ce:	2800      	cmp	r0, #0
100024d0:	d107      	bne.n	100024e2 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
100024d2:	4b06      	ldr	r3, [pc, #24]	; (100024ec <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
100024d4:	699a      	ldr	r2, [r3, #24]
100024d6:	689b      	ldr	r3, [r3, #8]
100024d8:	429a      	cmp	r2, r3
100024da:	d002      	beq.n	100024e2 <z_reschedule+0x1e>
	ret = arch_swap(key);
100024dc:	f7fe fdbc 	bl	10001058 <arch_swap>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
100024e0:	bd10      	pop	{r4, pc}
100024e2:	b662      	cpsie	i
100024e4:	f3bf 8f6f 	isb	sy
100024e8:	e7fa      	b.n	100024e0 <z_reschedule+0x1c>
100024ea:	46c0      	nop			; (mov r8, r8)
100024ec:	2000046c 	.word	0x2000046c

100024f0 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
100024f0:	f3ef 8110 	mrs	r1, PRIMASK
100024f4:	b672      	cpsid	i
	--_current->base.sched_locked;
100024f6:	4b05      	ldr	r3, [pc, #20]	; (1000250c <k_sched_lock+0x1c>)
100024f8:	689a      	ldr	r2, [r3, #8]
100024fa:	7bd3      	ldrb	r3, [r2, #15]
100024fc:	3b01      	subs	r3, #1
100024fe:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10002500:	2900      	cmp	r1, #0
10002502:	d102      	bne.n	1000250a <k_sched_lock+0x1a>
	__asm__ volatile(
10002504:	b662      	cpsie	i
10002506:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
1000250a:	4770      	bx	lr
1000250c:	2000046c 	.word	0x2000046c

10002510 <update_cache>:
{
10002510:	b570      	push	{r4, r5, r6, lr}
10002512:	0006      	movs	r6, r0
	return _priq_run_best(curr_cpu_runq());
10002514:	480d      	ldr	r0, [pc, #52]	; (1000254c <update_cache+0x3c>)
10002516:	f001 fbf5 	bl	10003d04 <z_priq_dumb_best>
1000251a:	4d0d      	ldr	r5, [pc, #52]	; (10002550 <update_cache+0x40>)
1000251c:	1e04      	subs	r4, r0, #0
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
1000251e:	d100      	bne.n	10002522 <update_cache+0x12>
10002520:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
10002522:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10002524:	2e00      	cmp	r6, #0
10002526:	d10a      	bne.n	1000253e <update_cache+0x2e>
	if (z_is_thread_prevented_from_running(_current)) {
10002528:	7b5a      	ldrb	r2, [r3, #13]
1000252a:	06d2      	lsls	r2, r2, #27
1000252c:	d107      	bne.n	1000253e <update_cache+0x2e>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
1000252e:	69a2      	ldr	r2, [r4, #24]
10002530:	2a00      	cmp	r2, #0
10002532:	d104      	bne.n	1000253e <update_cache+0x2e>
	if (is_preempt(_current) || is_metairq(thread)) {
10002534:	89da      	ldrh	r2, [r3, #14]
10002536:	2a7f      	cmp	r2, #127	; 0x7f
10002538:	d901      	bls.n	1000253e <update_cache+0x2e>
		_kernel.ready_q.cache = _current;
1000253a:	61ab      	str	r3, [r5, #24]
}
1000253c:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
1000253e:	429c      	cmp	r4, r3
10002540:	d002      	beq.n	10002548 <update_cache+0x38>
			z_reset_time_slice(thread);
10002542:	0020      	movs	r0, r4
10002544:	f7ff ff88 	bl	10002458 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
10002548:	61ac      	str	r4, [r5, #24]
}
1000254a:	e7f7      	b.n	1000253c <update_cache+0x2c>
1000254c:	20000488 	.word	0x20000488
10002550:	2000046c 	.word	0x2000046c

10002554 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
10002554:	220d      	movs	r2, #13
{
10002556:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
10002558:	5682      	ldrsb	r2, [r0, r2]
{
1000255a:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
1000255c:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
1000255e:	2a00      	cmp	r2, #0
10002560:	da04      	bge.n	1000256c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002562:	227f      	movs	r2, #127	; 0x7f
10002564:	4013      	ands	r3, r2
10002566:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
10002568:	f001 fb93 	bl	10003c92 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
1000256c:	2380      	movs	r3, #128	; 0x80
1000256e:	7b62      	ldrb	r2, [r4, #13]
10002570:	425b      	negs	r3, r3
10002572:	4313      	orrs	r3, r2
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
10002574:	4a13      	ldr	r2, [pc, #76]	; (100025c4 <move_thread_to_end_of_prio_q+0x70>)
10002576:	7363      	strb	r3, [r4, #13]
10002578:	69d3      	ldr	r3, [r2, #28]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000257a:	4d13      	ldr	r5, [pc, #76]	; (100025c8 <move_thread_to_end_of_prio_q+0x74>)
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
1000257c:	6a10      	ldr	r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000257e:	42ab      	cmp	r3, r5
10002580:	d01b      	beq.n	100025ba <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002582:	2b00      	cmp	r3, #0
10002584:	d019      	beq.n	100025ba <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
10002586:	260e      	movs	r6, #14
10002588:	57a6      	ldrsb	r6, [r4, r6]
	int32_t b2 = thread_2->base.prio;
1000258a:	210e      	movs	r1, #14
1000258c:	5659      	ldrsb	r1, [r3, r1]
	if (b1 != b2) {
1000258e:	428e      	cmp	r6, r1
10002590:	d00e      	beq.n	100025b0 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
10002592:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
10002594:	2900      	cmp	r1, #0
10002596:	dd0b      	ble.n	100025b0 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10002598:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
1000259a:	6023      	str	r3, [r4, #0]
	node->prev = prev;
1000259c:	6061      	str	r1, [r4, #4]
	prev->next = node;
1000259e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
100025a0:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
100025a2:	6890      	ldr	r0, [r2, #8]
100025a4:	1b00      	subs	r0, r0, r4
100025a6:	4243      	negs	r3, r0
100025a8:	4158      	adcs	r0, r3
100025aa:	f7ff ffb1 	bl	10002510 <update_cache>
}
100025ae:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
100025b0:	4283      	cmp	r3, r0
100025b2:	d002      	beq.n	100025ba <move_thread_to_end_of_prio_q+0x66>
100025b4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
100025b6:	2b00      	cmp	r3, #0
100025b8:	d1e7      	bne.n	1000258a <move_thread_to_end_of_prio_q+0x36>
	node->next = list;
100025ba:	6025      	str	r5, [r4, #0]
	node->prev = tail;
100025bc:	6060      	str	r0, [r4, #4]
	tail->next = node;
100025be:	6004      	str	r4, [r0, #0]
	list->tail = node;
100025c0:	6214      	str	r4, [r2, #32]
}
100025c2:	e7ee      	b.n	100025a2 <move_thread_to_end_of_prio_q+0x4e>
100025c4:	2000046c 	.word	0x2000046c
100025c8:	20000488 	.word	0x20000488

100025cc <z_time_slice>:
{
100025cc:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100025ce:	f3ef 8510 	mrs	r5, PRIMASK
100025d2:	b672      	cpsid	i
	if (pending_current == _current) {
100025d4:	4b17      	ldr	r3, [pc, #92]	; (10002634 <z_time_slice+0x68>)
100025d6:	4a18      	ldr	r2, [pc, #96]	; (10002638 <z_time_slice+0x6c>)
100025d8:	689c      	ldr	r4, [r3, #8]
100025da:	6811      	ldr	r1, [r2, #0]
100025dc:	428c      	cmp	r4, r1
100025de:	d108      	bne.n	100025f2 <z_time_slice+0x26>
	z_reset_time_slice(curr);
100025e0:	0020      	movs	r0, r4
100025e2:	f7ff ff39 	bl	10002458 <z_reset_time_slice>
	if (key != 0U) {
100025e6:	2d00      	cmp	r5, #0
100025e8:	d102      	bne.n	100025f0 <z_time_slice+0x24>
	__asm__ volatile(
100025ea:	b662      	cpsie	i
100025ec:	f3bf 8f6f 	isb	sy
}
100025f0:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
100025f2:	2100      	movs	r1, #0
100025f4:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
100025f6:	4a11      	ldr	r2, [pc, #68]	; (1000263c <z_time_slice+0x70>)
	if (slice_time(_current) && sliceable(_current)) {
100025f8:	6812      	ldr	r2, [r2, #0]
100025fa:	428a      	cmp	r2, r1
100025fc:	d018      	beq.n	10002630 <z_time_slice+0x64>
		&& !z_is_idle_thread_object(thread);
100025fe:	89e2      	ldrh	r2, [r4, #14]
10002600:	2a7f      	cmp	r2, #127	; 0x7f
10002602:	d815      	bhi.n	10002630 <z_time_slice+0x64>
		&& !z_is_thread_prevented_from_running(thread)
10002604:	7b62      	ldrb	r2, [r4, #13]
10002606:	06d2      	lsls	r2, r2, #27
10002608:	d112      	bne.n	10002630 <z_time_slice+0x64>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
1000260a:	210e      	movs	r1, #14
1000260c:	4a0c      	ldr	r2, [pc, #48]	; (10002640 <z_time_slice+0x74>)
1000260e:	5661      	ldrsb	r1, [r4, r1]
10002610:	6812      	ldr	r2, [r2, #0]
10002612:	4291      	cmp	r1, r2
10002614:	db0c      	blt.n	10002630 <z_time_slice+0x64>
	if (slice_time(_current) && sliceable(_current)) {
10002616:	4a0b      	ldr	r2, [pc, #44]	; (10002644 <z_time_slice+0x78>)
10002618:	4294      	cmp	r4, r2
1000261a:	d009      	beq.n	10002630 <z_time_slice+0x64>
		if (ticks >= _current_cpu->slice_ticks) {
1000261c:	691a      	ldr	r2, [r3, #16]
1000261e:	4282      	cmp	r2, r0
10002620:	dc03      	bgt.n	1000262a <z_time_slice+0x5e>
		move_thread_to_end_of_prio_q(curr);
10002622:	0020      	movs	r0, r4
10002624:	f7ff ff96 	bl	10002554 <move_thread_to_end_of_prio_q>
10002628:	e7da      	b.n	100025e0 <z_time_slice+0x14>
			_current_cpu->slice_ticks -= ticks;
1000262a:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
1000262c:	611a      	str	r2, [r3, #16]
1000262e:	e7da      	b.n	100025e6 <z_time_slice+0x1a>
10002630:	2200      	movs	r2, #0
10002632:	e7fb      	b.n	1000262c <z_time_slice+0x60>
10002634:	2000046c 	.word	0x2000046c
10002638:	20000498 	.word	0x20000498
1000263c:	200004a0 	.word	0x200004a0
10002640:	2000049c 	.word	0x2000049c
10002644:	20000250 	.word	0x20000250

10002648 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10002648:	230d      	movs	r3, #13
{
1000264a:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
1000264c:	56c3      	ldrsb	r3, [r0, r3]
1000264e:	7b42      	ldrb	r2, [r0, #13]
10002650:	2b00      	cmp	r3, #0
10002652:	db20      	blt.n	10002696 <ready_thread+0x4e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
10002654:	06d3      	lsls	r3, r2, #27
10002656:	d11e      	bne.n	10002696 <ready_thread+0x4e>
10002658:	6983      	ldr	r3, [r0, #24]
1000265a:	2b00      	cmp	r3, #0
1000265c:	d11b      	bne.n	10002696 <ready_thread+0x4e>
	thread->base.thread_state |= _THREAD_QUEUED;
1000265e:	3b80      	subs	r3, #128	; 0x80
	return list->head == list;
10002660:	4912      	ldr	r1, [pc, #72]	; (100026ac <ready_thread+0x64>)
10002662:	4313      	orrs	r3, r2
10002664:	7343      	strb	r3, [r0, #13]
10002666:	69cb      	ldr	r3, [r1, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002668:	4d11      	ldr	r5, [pc, #68]	; (100026b0 <ready_thread+0x68>)
	return (node == list->tail) ? NULL : node->next;
1000266a:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000266c:	42ab      	cmp	r3, r5
1000266e:	d018      	beq.n	100026a2 <ready_thread+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002670:	2b00      	cmp	r3, #0
10002672:	d016      	beq.n	100026a2 <ready_thread+0x5a>
	int32_t b1 = thread_1->base.prio;
10002674:	260e      	movs	r6, #14
10002676:	5786      	ldrsb	r6, [r0, r6]
	int32_t b2 = thread_2->base.prio;
10002678:	220e      	movs	r2, #14
1000267a:	569a      	ldrsb	r2, [r3, r2]
	if (b1 != b2) {
1000267c:	4296      	cmp	r6, r2
1000267e:	d00b      	beq.n	10002698 <ready_thread+0x50>
		return b2 - b1;
10002680:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
10002682:	2a00      	cmp	r2, #0
10002684:	dd08      	ble.n	10002698 <ready_thread+0x50>
	sys_dnode_t *const prev = successor->prev;
10002686:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10002688:	6003      	str	r3, [r0, #0]
	node->prev = prev;
1000268a:	6042      	str	r2, [r0, #4]
	prev->next = node;
1000268c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
1000268e:	6058      	str	r0, [r3, #4]
		update_cache(0);
10002690:	2000      	movs	r0, #0
10002692:	f7ff ff3d 	bl	10002510 <update_cache>
}
10002696:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10002698:	42a3      	cmp	r3, r4
1000269a:	d002      	beq.n	100026a2 <ready_thread+0x5a>
1000269c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
1000269e:	2b00      	cmp	r3, #0
100026a0:	d1ea      	bne.n	10002678 <ready_thread+0x30>
	node->next = list;
100026a2:	6005      	str	r5, [r0, #0]
	node->prev = tail;
100026a4:	6044      	str	r4, [r0, #4]
	tail->next = node;
100026a6:	6020      	str	r0, [r4, #0]
	list->tail = node;
100026a8:	6208      	str	r0, [r1, #32]
}
100026aa:	e7f1      	b.n	10002690 <ready_thread+0x48>
100026ac:	2000046c 	.word	0x2000046c
100026b0:	20000488 	.word	0x20000488

100026b4 <z_sched_start>:
{
100026b4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100026b6:	f3ef 8410 	mrs	r4, PRIMASK
100026ba:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
100026bc:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
100026be:	7b43      	ldrb	r3, [r0, #13]
100026c0:	4213      	tst	r3, r2
100026c2:	d105      	bne.n	100026d0 <z_sched_start+0x1c>
	if (key != 0U) {
100026c4:	2c00      	cmp	r4, #0
100026c6:	d102      	bne.n	100026ce <z_sched_start+0x1a>
	__asm__ volatile(
100026c8:	b662      	cpsie	i
100026ca:	f3bf 8f6f 	isb	sy
}
100026ce:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
100026d0:	4393      	bics	r3, r2
100026d2:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
100026d4:	f7ff ffb8 	bl	10002648 <ready_thread>
	z_reschedule(&sched_spinlock, key);
100026d8:	0021      	movs	r1, r4
100026da:	4802      	ldr	r0, [pc, #8]	; (100026e4 <z_sched_start+0x30>)
100026dc:	f7ff fef2 	bl	100024c4 <z_reschedule>
100026e0:	e7f5      	b.n	100026ce <z_sched_start+0x1a>
100026e2:	46c0      	nop			; (mov r8, r8)
100026e4:	200004ad 	.word	0x200004ad

100026e8 <unready_thread>:
	if (z_is_thread_queued(thread)) {
100026e8:	220d      	movs	r2, #13
{
100026ea:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
100026ec:	5682      	ldrsb	r2, [r0, r2]
{
100026ee:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
100026f0:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
100026f2:	2a00      	cmp	r2, #0
100026f4:	da04      	bge.n	10002700 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100026f6:	227f      	movs	r2, #127	; 0x7f
100026f8:	4013      	ands	r3, r2
100026fa:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
100026fc:	f001 fac9 	bl	10003c92 <sys_dlist_remove>
	update_cache(thread == _current);
10002700:	4b03      	ldr	r3, [pc, #12]	; (10002710 <unready_thread+0x28>)
10002702:	6898      	ldr	r0, [r3, #8]
10002704:	1b00      	subs	r0, r0, r4
10002706:	4243      	negs	r3, r0
10002708:	4158      	adcs	r0, r3
1000270a:	f7ff ff01 	bl	10002510 <update_cache>
}
1000270e:	bd10      	pop	{r4, pc}
10002710:	2000046c 	.word	0x2000046c

10002714 <pend>:
{
10002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002716:	0004      	movs	r4, r0
10002718:	0016      	movs	r6, r2
1000271a:	001d      	movs	r5, r3
	__asm__ volatile("mrs %0, PRIMASK;"
1000271c:	f3ef 8710 	mrs	r7, PRIMASK
10002720:	b672      	cpsid	i
		add_to_waitq_locked(thread, wait_q);
10002722:	f001 fb1d 	bl	10003d60 <add_to_waitq_locked>
	if (key != 0U) {
10002726:	2f00      	cmp	r7, #0
10002728:	d102      	bne.n	10002730 <pend+0x1c>
	__asm__ volatile(
1000272a:	b662      	cpsie	i
1000272c:	f3bf 8f6f 	isb	sy
	add_thread_timeout(thread, timeout);
10002730:	002b      	movs	r3, r5
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10002732:	1c72      	adds	r2, r6, #1
10002734:	d101      	bne.n	1000273a <pend+0x26>
10002736:	3301      	adds	r3, #1
10002738:	d006      	beq.n	10002748 <pend+0x34>
1000273a:	0020      	movs	r0, r4
1000273c:	0032      	movs	r2, r6
1000273e:	002b      	movs	r3, r5
10002740:	4902      	ldr	r1, [pc, #8]	; (1000274c <pend+0x38>)
10002742:	3018      	adds	r0, #24
10002744:	f000 f9de 	bl	10002b04 <z_add_timeout>
}
10002748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000274a:	46c0      	nop			; (mov r8, r8)
1000274c:	10003d29 	.word	0x10003d29

10002750 <z_pend_curr>:
{
10002750:	b510      	push	{r4, lr}
10002752:	000c      	movs	r4, r1
	pending_current = _current;
10002754:	4b06      	ldr	r3, [pc, #24]	; (10002770 <z_pend_curr+0x20>)
{
10002756:	0011      	movs	r1, r2
	pending_current = _current;
10002758:	6898      	ldr	r0, [r3, #8]
1000275a:	4b06      	ldr	r3, [pc, #24]	; (10002774 <z_pend_curr+0x24>)
1000275c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
1000275e:	9a02      	ldr	r2, [sp, #8]
10002760:	9b03      	ldr	r3, [sp, #12]
10002762:	f7ff ffd7 	bl	10002714 <pend>
10002766:	0020      	movs	r0, r4
10002768:	f7fe fc76 	bl	10001058 <arch_swap>
}
1000276c:	bd10      	pop	{r4, pc}
1000276e:	46c0      	nop			; (mov r8, r8)
10002770:	2000046c 	.word	0x2000046c
10002774:	20000498 	.word	0x20000498

10002778 <z_impl_k_thread_suspend>:
{
10002778:	b570      	push	{r4, r5, r6, lr}
1000277a:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
1000277c:	3018      	adds	r0, #24
1000277e:	f001 fb61 	bl	10003e44 <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
10002782:	f3ef 8610 	mrs	r6, PRIMASK
10002786:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
10002788:	220d      	movs	r2, #13
1000278a:	56a2      	ldrsb	r2, [r4, r2]
1000278c:	7b63      	ldrb	r3, [r4, #13]
1000278e:	2a00      	cmp	r2, #0
10002790:	da05      	bge.n	1000279e <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002792:	227f      	movs	r2, #127	; 0x7f
10002794:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10002796:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002798:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
1000279a:	f001 fa7a 	bl	10003c92 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
1000279e:	2310      	movs	r3, #16
100027a0:	7b62      	ldrb	r2, [r4, #13]
		update_cache(thread == _current);
100027a2:	4d0a      	ldr	r5, [pc, #40]	; (100027cc <z_impl_k_thread_suspend+0x54>)
100027a4:	4313      	orrs	r3, r2
100027a6:	7363      	strb	r3, [r4, #13]
100027a8:	68ab      	ldr	r3, [r5, #8]
100027aa:	1b18      	subs	r0, r3, r4
100027ac:	4243      	negs	r3, r0
100027ae:	4158      	adcs	r0, r3
100027b0:	f7ff feae 	bl	10002510 <update_cache>
	if (key != 0U) {
100027b4:	2e00      	cmp	r6, #0
100027b6:	d102      	bne.n	100027be <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
100027b8:	b662      	cpsie	i
100027ba:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
100027be:	68ab      	ldr	r3, [r5, #8]
100027c0:	42a3      	cmp	r3, r4
100027c2:	d101      	bne.n	100027c8 <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
100027c4:	f001 fa97 	bl	10003cf6 <z_reschedule_unlocked>
}
100027c8:	bd70      	pop	{r4, r5, r6, pc}
100027ca:	46c0      	nop			; (mov r8, r8)
100027cc:	2000046c 	.word	0x2000046c

100027d0 <k_sched_unlock>:
{
100027d0:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100027d2:	f3ef 8410 	mrs	r4, PRIMASK
100027d6:	b672      	cpsid	i
		++_current->base.sched_locked;
100027d8:	4b07      	ldr	r3, [pc, #28]	; (100027f8 <k_sched_unlock+0x28>)
		update_cache(0);
100027da:	2000      	movs	r0, #0
		++_current->base.sched_locked;
100027dc:	689a      	ldr	r2, [r3, #8]
100027de:	7bd3      	ldrb	r3, [r2, #15]
100027e0:	3301      	adds	r3, #1
100027e2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
100027e4:	f7ff fe94 	bl	10002510 <update_cache>
	if (key != 0U) {
100027e8:	2c00      	cmp	r4, #0
100027ea:	d102      	bne.n	100027f2 <k_sched_unlock+0x22>
	__asm__ volatile(
100027ec:	b662      	cpsie	i
100027ee:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
100027f2:	f001 fa80 	bl	10003cf6 <z_reschedule_unlocked>
}
100027f6:	bd10      	pop	{r4, pc}
100027f8:	2000046c 	.word	0x2000046c

100027fc <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
100027fc:	2100      	movs	r1, #0
{
100027fe:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
10002800:	4b03      	ldr	r3, [pc, #12]	; (10002810 <z_sched_init+0x14>)
10002802:	4a04      	ldr	r2, [pc, #16]	; (10002814 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10002804:	0008      	movs	r0, r1
10002806:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
10002808:	621a      	str	r2, [r3, #32]
1000280a:	f7ff fe39 	bl	10002480 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
1000280e:	bd10      	pop	{r4, pc}
10002810:	2000046c 	.word	0x2000046c
10002814:	20000488 	.word	0x20000488

10002818 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
10002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000281a:	f3ef 8510 	mrs	r5, PRIMASK
1000281e:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002820:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
10002822:	4c1a      	ldr	r4, [pc, #104]	; (1000288c <z_impl_k_yield+0x74>)
10002824:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002826:	7b43      	ldrb	r3, [r0, #13]
10002828:	4013      	ands	r3, r2
1000282a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
1000282c:	f001 fa31 	bl	10003c92 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10002830:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
10002832:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10002834:	4252      	negs	r2, r2
10002836:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002838:	4815      	ldr	r0, [pc, #84]	; (10002890 <z_impl_k_yield+0x78>)
1000283a:	430a      	orrs	r2, r1
1000283c:	735a      	strb	r2, [r3, #13]
	return list->head == list;
1000283e:	69e2      	ldr	r2, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002840:	4282      	cmp	r2, r0
10002842:	d01c      	beq.n	1000287e <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002844:	2a00      	cmp	r2, #0
10002846:	d01a      	beq.n	1000287e <z_impl_k_yield+0x66>
	int32_t b1 = thread_1->base.prio;
10002848:	260e      	movs	r6, #14
	return (node == list->tail) ? NULL : node->next;
1000284a:	6a27      	ldr	r7, [r4, #32]
1000284c:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
1000284e:	210e      	movs	r1, #14
10002850:	5651      	ldrsb	r1, [r2, r1]
	if (b1 != b2) {
10002852:	428e      	cmp	r6, r1
10002854:	d00e      	beq.n	10002874 <z_impl_k_yield+0x5c>
		return b2 - b1;
10002856:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
10002858:	2900      	cmp	r1, #0
1000285a:	dd0b      	ble.n	10002874 <z_impl_k_yield+0x5c>
	sys_dnode_t *const prev = successor->prev;
1000285c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
1000285e:	601a      	str	r2, [r3, #0]
	node->prev = prev;
10002860:	6059      	str	r1, [r3, #4]
	prev->next = node;
10002862:	600b      	str	r3, [r1, #0]
	successor->prev = node;
10002864:	6053      	str	r3, [r2, #4]
	update_cache(1);
10002866:	2001      	movs	r0, #1
10002868:	f7ff fe52 	bl	10002510 <update_cache>
1000286c:	0028      	movs	r0, r5
1000286e:	f7fe fbf3 	bl	10001058 <arch_swap>
	z_swap(&sched_spinlock, key);
}
10002872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
10002874:	42ba      	cmp	r2, r7
10002876:	d002      	beq.n	1000287e <z_impl_k_yield+0x66>
10002878:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
1000287a:	2a00      	cmp	r2, #0
1000287c:	d1e7      	bne.n	1000284e <z_impl_k_yield+0x36>
	sys_dnode_t *const tail = list->tail;
1000287e:	6a22      	ldr	r2, [r4, #32]
	node->next = list;
10002880:	6018      	str	r0, [r3, #0]
	node->prev = tail;
10002882:	605a      	str	r2, [r3, #4]
	tail->next = node;
10002884:	6013      	str	r3, [r2, #0]
	list->tail = node;
10002886:	6223      	str	r3, [r4, #32]
}
10002888:	e7ed      	b.n	10002866 <z_impl_k_yield+0x4e>
1000288a:	46c0      	nop			; (mov r8, r8)
1000288c:	2000046c 	.word	0x2000046c
10002890:	20000488 	.word	0x20000488

10002894 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
10002894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
10002896:	0006      	movs	r6, r0
{
10002898:	0004      	movs	r4, r0
1000289a:	000d      	movs	r5, r1
	if (ticks == 0) {
1000289c:	430e      	orrs	r6, r1
1000289e:	d103      	bne.n	100028a8 <z_tick_sleep+0x14>
	z_impl_k_yield();
100028a0:	f7ff ffba 	bl	10002818 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
100028a4:	2000      	movs	r0, #0
100028a6:	e034      	b.n	10002912 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
100028a8:	2202      	movs	r2, #2
100028aa:	4252      	negs	r2, r2
100028ac:	17d3      	asrs	r3, r2, #31
100028ae:	1b12      	subs	r2, r2, r4
100028b0:	41ab      	sbcs	r3, r5
100028b2:	2b00      	cmp	r3, #0
100028b4:	dc2e      	bgt.n	10002914 <z_tick_sleep+0x80>
100028b6:	d101      	bne.n	100028bc <z_tick_sleep+0x28>
100028b8:	2a00      	cmp	r2, #0
100028ba:	d12b      	bne.n	10002914 <z_tick_sleep+0x80>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
100028bc:	f001 faeb 	bl	10003e96 <sys_clock_tick_get_32>
100028c0:	1903      	adds	r3, r0, r4
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
100028c2:	9301      	str	r3, [sp, #4]
100028c4:	f3ef 8710 	mrs	r7, PRIMASK
100028c8:	b672      	cpsid	i
	pending_current = _current;
100028ca:	4e14      	ldr	r6, [pc, #80]	; (1000291c <z_tick_sleep+0x88>)
100028cc:	4b14      	ldr	r3, [pc, #80]	; (10002920 <z_tick_sleep+0x8c>)
100028ce:	68b2      	ldr	r2, [r6, #8]
	unready_thread(_current);
100028d0:	0010      	movs	r0, r2
	pending_current = _current;
100028d2:	601a      	str	r2, [r3, #0]
	unready_thread(_current);
100028d4:	f7ff ff08 	bl	100026e8 <unready_thread>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
100028d8:	68b0      	ldr	r0, [r6, #8]
100028da:	0022      	movs	r2, r4
100028dc:	002b      	movs	r3, r5
100028de:	4911      	ldr	r1, [pc, #68]	; (10002924 <z_tick_sleep+0x90>)
100028e0:	3018      	adds	r0, #24
100028e2:	f000 f90f 	bl	10002b04 <z_add_timeout>
100028e6:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
100028e8:	68b2      	ldr	r2, [r6, #8]
100028ea:	0038      	movs	r0, r7
100028ec:	7b51      	ldrb	r1, [r2, #13]
100028ee:	430b      	orrs	r3, r1
100028f0:	7353      	strb	r3, [r2, #13]
100028f2:	f7fe fbb1 	bl	10001058 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
100028f6:	f001 face 	bl	10003e96 <sys_clock_tick_get_32>
100028fa:	2300      	movs	r3, #0
100028fc:	0004      	movs	r4, r0
100028fe:	001d      	movs	r5, r3
10002900:	9a01      	ldr	r2, [sp, #4]
10002902:	1b12      	subs	r2, r2, r4
10002904:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
10002906:	42ab      	cmp	r3, r5
10002908:	dc02      	bgt.n	10002910 <z_tick_sleep+0x7c>
1000290a:	d1cb      	bne.n	100028a4 <z_tick_sleep+0x10>
1000290c:	42aa      	cmp	r2, r5
1000290e:	d0c9      	beq.n	100028a4 <z_tick_sleep+0x10>
		return ticks;
10002910:	0010      	movs	r0, r2
}
10002912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10002914:	2002      	movs	r0, #2
10002916:	4240      	negs	r0, r0
10002918:	1b03      	subs	r3, r0, r4
1000291a:	e7d2      	b.n	100028c2 <z_tick_sleep+0x2e>
1000291c:	2000046c 	.word	0x2000046c
10002920:	20000498 	.word	0x20000498
10002924:	10003d29 	.word	0x10003d29

10002928 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
10002928:	b510      	push	{r4, lr}
1000292a:	000b      	movs	r3, r1
1000292c:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
1000292e:	1c42      	adds	r2, r0, #1
10002930:	d107      	bne.n	10002942 <z_impl_k_sleep+0x1a>
10002932:	3301      	adds	r3, #1
10002934:	d105      	bne.n	10002942 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
10002936:	4b07      	ldr	r3, [pc, #28]	; (10002954 <z_impl_k_sleep+0x2c>)
10002938:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
1000293a:	f7ff ff1d 	bl	10002778 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
1000293e:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
10002940:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
10002942:	0021      	movs	r1, r4
10002944:	f7ff ffa6 	bl	10002894 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
10002948:	220a      	movs	r2, #10
1000294a:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
1000294c:	17c1      	asrs	r1, r0, #31
1000294e:	f7fd fcaf 	bl	100002b0 <__aeabi_uldivmod>
	return ret;
10002952:	e7f5      	b.n	10002940 <z_impl_k_sleep+0x18>
10002954:	2000046c 	.word	0x2000046c

10002958 <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
10002958:	4b01      	ldr	r3, [pc, #4]	; (10002960 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
1000295a:	6898      	ldr	r0, [r3, #8]
}
1000295c:	4770      	bx	lr
1000295e:	46c0      	nop			; (mov r8, r8)
10002960:	2000046c 	.word	0x2000046c

10002964 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10002964:	b570      	push	{r4, r5, r6, lr}
10002966:	0004      	movs	r4, r0
10002968:	f3ef 8610 	mrs	r6, PRIMASK
1000296c:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
1000296e:	2308      	movs	r3, #8
10002970:	7b42      	ldrb	r2, [r0, #13]
10002972:	421a      	tst	r2, r3
10002974:	d005      	beq.n	10002982 <z_thread_abort+0x1e>
	if (key != 0U) {
10002976:	2e00      	cmp	r6, #0
10002978:	d102      	bne.n	10002980 <z_thread_abort+0x1c>
	__asm__ volatile(
1000297a:	b662      	cpsie	i
1000297c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10002980:	bd70      	pop	{r4, r5, r6, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
10002982:	2120      	movs	r1, #32
10002984:	0010      	movs	r0, r2
10002986:	4388      	bics	r0, r1
10002988:	0001      	movs	r1, r0
1000298a:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
1000298c:	b248      	sxtb	r0, r1
1000298e:	2800      	cmp	r0, #0
10002990:	db20      	blt.n	100029d4 <z_thread_abort+0x70>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10002992:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
10002994:	68a3      	ldr	r3, [r4, #8]
10002996:	2b00      	cmp	r3, #0
10002998:	d002      	beq.n	100029a0 <z_thread_abort+0x3c>
			unpend_thread_no_timeout(thread);
1000299a:	0020      	movs	r0, r4
1000299c:	f001 f981 	bl	10003ca2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
100029a0:	0020      	movs	r0, r4
100029a2:	3018      	adds	r0, #24
100029a4:	f001 fa4e 	bl	10003e44 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
100029a8:	0023      	movs	r3, r4
	return list->head == list;
100029aa:	6da5      	ldr	r5, [r4, #88]	; 0x58
100029ac:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
100029ae:	429d      	cmp	r5, r3
100029b0:	d001      	beq.n	100029b6 <z_thread_abort+0x52>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
100029b2:	2d00      	cmp	r5, #0
100029b4:	d116      	bne.n	100029e4 <z_thread_abort+0x80>
		update_cache(1);
100029b6:	2001      	movs	r0, #1
100029b8:	f7ff fdaa 	bl	10002510 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
100029bc:	4b10      	ldr	r3, [pc, #64]	; (10002a00 <z_thread_abort+0x9c>)
100029be:	689b      	ldr	r3, [r3, #8]
100029c0:	42a3      	cmp	r3, r4
100029c2:	d1d8      	bne.n	10002976 <z_thread_abort+0x12>
100029c4:	f3ef 8305 	mrs	r3, IPSR
100029c8:	2b00      	cmp	r3, #0
100029ca:	d1d4      	bne.n	10002976 <z_thread_abort+0x12>
100029cc:	0030      	movs	r0, r6
100029ce:	f7fe fb43 	bl	10001058 <arch_swap>
	return ret;
100029d2:	e7d0      	b.n	10002976 <z_thread_abort+0x12>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100029d4:	215f      	movs	r1, #95	; 0x5f
100029d6:	400a      	ands	r2, r1
100029d8:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
100029da:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
100029dc:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
100029de:	f001 f958 	bl	10003c92 <sys_dlist_remove>
}
100029e2:	e7d7      	b.n	10002994 <z_thread_abort+0x30>
		unpend_thread_no_timeout(thread);
100029e4:	0028      	movs	r0, r5
100029e6:	f001 f95c 	bl	10003ca2 <unpend_thread_no_timeout>
100029ea:	0028      	movs	r0, r5
100029ec:	3018      	adds	r0, #24
100029ee:	f001 fa29 	bl	10003e44 <z_abort_timeout>
100029f2:	2300      	movs	r3, #0
		ready_thread(thread);
100029f4:	0028      	movs	r0, r5
100029f6:	66eb      	str	r3, [r5, #108]	; 0x6c
100029f8:	f7ff fe26 	bl	10002648 <ready_thread>
100029fc:	e7d4      	b.n	100029a8 <z_thread_abort+0x44>
100029fe:	46c0      	nop			; (mov r8, r8)
10002a00:	2000046c 	.word	0x2000046c

10002a04 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
10002a04:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
10002a06:	9d06      	ldr	r5, [sp, #24]
10002a08:	9e07      	ldr	r6, [sp, #28]
{
10002a0a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
10002a0c:	9500      	str	r5, [sp, #0]
10002a0e:	9601      	str	r6, [sp, #4]
10002a10:	f7ff fe9e 	bl	10002750 <z_pend_curr>

	if (data != NULL) {
10002a14:	2c00      	cmp	r4, #0
10002a16:	d003      	beq.n	10002a20 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
10002a18:	4b02      	ldr	r3, [pc, #8]	; (10002a24 <z_sched_wait+0x20>)
10002a1a:	689b      	ldr	r3, [r3, #8]
10002a1c:	695b      	ldr	r3, [r3, #20]
10002a1e:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
10002a20:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10002a22:	46c0      	nop			; (mov r8, r8)
10002a24:	2000046c 	.word	0x2000046c

10002a28 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
10002a28:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
10002a2a:	4806      	ldr	r0, [pc, #24]	; (10002a44 <z_data_copy+0x1c>)
10002a2c:	4a06      	ldr	r2, [pc, #24]	; (10002a48 <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10002a2e:	4907      	ldr	r1, [pc, #28]	; (10002a4c <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
10002a30:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10002a32:	f001 f8c5 	bl	10003bc0 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
10002a36:	4a06      	ldr	r2, [pc, #24]	; (10002a50 <z_data_copy+0x28>)
10002a38:	4906      	ldr	r1, [pc, #24]	; (10002a54 <z_data_copy+0x2c>)
10002a3a:	4807      	ldr	r0, [pc, #28]	; (10002a58 <z_data_copy+0x30>)
10002a3c:	f001 f8c0 	bl	10003bc0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
10002a40:	bd10      	pop	{r4, pc}
10002a42:	46c0      	nop			; (mov r8, r8)
10002a44:	20000000 	.word	0x20000000
10002a48:	20000250 	.word	0x20000250
10002a4c:	10004340 	.word	0x10004340
10002a50:	00000000 	.word	0x00000000
10002a54:	10004340 	.word	0x10004340
10002a58:	20000000 	.word	0x20000000

10002a5c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10002a5c:	2000      	movs	r0, #0
10002a5e:	4b04      	ldr	r3, [pc, #16]	; (10002a70 <elapsed+0x14>)
{
10002a60:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10002a62:	681b      	ldr	r3, [r3, #0]
10002a64:	4283      	cmp	r3, r0
10002a66:	d101      	bne.n	10002a6c <elapsed+0x10>
10002a68:	f7fe fed8 	bl	1000181c <sys_clock_elapsed>
}
10002a6c:	bd10      	pop	{r4, pc}
10002a6e:	46c0      	nop			; (mov r8, r8)
10002a70:	200004a4 	.word	0x200004a4

10002a74 <next_timeout>:
	return list->head == list;
10002a74:	4b12      	ldr	r3, [pc, #72]	; (10002ac0 <next_timeout+0x4c>)

static int32_t next_timeout(void)
{
10002a76:	b510      	push	{r4, lr}
10002a78:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002a7a:	429c      	cmp	r4, r3
10002a7c:	d100      	bne.n	10002a80 <next_timeout+0xc>
10002a7e:	2400      	movs	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
10002a80:	f7ff ffec 	bl	10002a5c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
10002a84:	2c00      	cmp	r4, #0
10002a86:	d019      	beq.n	10002abc <next_timeout+0x48>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
10002a88:	0002      	movs	r2, r0
10002a8a:	17c3      	asrs	r3, r0, #31
10002a8c:	6920      	ldr	r0, [r4, #16]
10002a8e:	6961      	ldr	r1, [r4, #20]
10002a90:	1a80      	subs	r0, r0, r2
10002a92:	4199      	sbcs	r1, r3
10002a94:	0002      	movs	r2, r0
10002a96:	1e0b      	subs	r3, r1, #0
	if ((to == NULL) ||
10002a98:	dc10      	bgt.n	10002abc <next_timeout+0x48>
10002a9a:	2900      	cmp	r1, #0
10002a9c:	d103      	bne.n	10002aa6 <next_timeout+0x32>
10002a9e:	2180      	movs	r1, #128	; 0x80
10002aa0:	0609      	lsls	r1, r1, #24
10002aa2:	428a      	cmp	r2, r1
10002aa4:	d20a      	bcs.n	10002abc <next_timeout+0x48>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
10002aa6:	43d8      	mvns	r0, r3
10002aa8:	17c0      	asrs	r0, r0, #31
10002aaa:	4010      	ands	r0, r2
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
10002aac:	4b05      	ldr	r3, [pc, #20]	; (10002ac4 <next_timeout+0x50>)
10002aae:	691b      	ldr	r3, [r3, #16]
10002ab0:	2b00      	cmp	r3, #0
10002ab2:	d002      	beq.n	10002aba <next_timeout+0x46>
10002ab4:	4298      	cmp	r0, r3
10002ab6:	dd00      	ble.n	10002aba <next_timeout+0x46>
10002ab8:	0018      	movs	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
10002aba:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
10002abc:	4802      	ldr	r0, [pc, #8]	; (10002ac8 <next_timeout+0x54>)
10002abe:	e7f5      	b.n	10002aac <next_timeout+0x38>
10002ac0:	200001e0 	.word	0x200001e0
10002ac4:	2000046c 	.word	0x2000046c
10002ac8:	7fffffff 	.word	0x7fffffff

10002acc <remove_timeout>:
{
10002acc:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
10002ace:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10002ad0:	2800      	cmp	r0, #0
10002ad2:	d00d      	beq.n	10002af0 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
10002ad4:	4a0a      	ldr	r2, [pc, #40]	; (10002b00 <remove_timeout+0x34>)
10002ad6:	6852      	ldr	r2, [r2, #4]
10002ad8:	4290      	cmp	r0, r2
10002ada:	d009      	beq.n	10002af0 <remove_timeout+0x24>
	if (next(t) != NULL) {
10002adc:	2b00      	cmp	r3, #0
10002ade:	d007      	beq.n	10002af0 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
10002ae0:	691c      	ldr	r4, [r3, #16]
10002ae2:	695d      	ldr	r5, [r3, #20]
10002ae4:	6901      	ldr	r1, [r0, #16]
10002ae6:	6942      	ldr	r2, [r0, #20]
10002ae8:	1864      	adds	r4, r4, r1
10002aea:	4155      	adcs	r5, r2
10002aec:	611c      	str	r4, [r3, #16]
10002aee:	615d      	str	r5, [r3, #20]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
10002af0:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
10002af2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10002af4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10002af6:	2300      	movs	r3, #0
10002af8:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10002afa:	6043      	str	r3, [r0, #4]
}
10002afc:	bd30      	pop	{r4, r5, pc}
10002afe:	46c0      	nop			; (mov r8, r8)
10002b00:	200001e0 	.word	0x200001e0

10002b04 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
10002b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002b06:	0004      	movs	r4, r0
10002b08:	0016      	movs	r6, r2
10002b0a:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10002b0c:	1c53      	adds	r3, r2, #1
10002b0e:	d101      	bne.n	10002b14 <z_add_timeout+0x10>
10002b10:	1c7b      	adds	r3, r7, #1
10002b12:	d067      	beq.n	10002be4 <z_add_timeout+0xe0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
10002b14:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
10002b16:	f3ef 8310 	mrs	r3, PRIMASK
10002b1a:	b672      	cpsid	i

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
10002b1c:	2002      	movs	r0, #2
10002b1e:	4240      	negs	r0, r0
10002b20:	17c1      	asrs	r1, r0, #31
10002b22:	9301      	str	r3, [sp, #4]
10002b24:	0002      	movs	r2, r0
10002b26:	000b      	movs	r3, r1
10002b28:	1b92      	subs	r2, r2, r6
10002b2a:	41bb      	sbcs	r3, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
10002b2c:	2b00      	cmp	r3, #0
10002b2e:	db1b      	blt.n	10002b68 <z_add_timeout+0x64>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
10002b30:	4b2d      	ldr	r3, [pc, #180]	; (10002be8 <z_add_timeout+0xe4>)
10002b32:	681a      	ldr	r2, [r3, #0]
10002b34:	685b      	ldr	r3, [r3, #4]
10002b36:	1a80      	subs	r0, r0, r2
10002b38:	4199      	sbcs	r1, r3
10002b3a:	1b80      	subs	r0, r0, r6
10002b3c:	41b9      	sbcs	r1, r7

			to->dticks = MAX(1, ticks);
10002b3e:	0002      	movs	r2, r0
10002b40:	1e0b      	subs	r3, r1, #0
10002b42:	dc05      	bgt.n	10002b50 <z_add_timeout+0x4c>
10002b44:	2900      	cmp	r1, #0
10002b46:	d101      	bne.n	10002b4c <z_add_timeout+0x48>
10002b48:	2800      	cmp	r0, #0
10002b4a:	d101      	bne.n	10002b50 <z_add_timeout+0x4c>
10002b4c:	2201      	movs	r2, #1
10002b4e:	2300      	movs	r3, #0
10002b50:	6122      	str	r2, [r4, #16]
10002b52:	6163      	str	r3, [r4, #20]
	return list->head == list;
10002b54:	4f25      	ldr	r7, [pc, #148]	; (10002bec <z_add_timeout+0xe8>)
10002b56:	683d      	ldr	r5, [r7, #0]
	sys_dnode_t *const tail = list->tail;
10002b58:	687e      	ldr	r6, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002b5a:	42bd      	cmp	r5, r7
10002b5c:	d118      	bne.n	10002b90 <z_add_timeout+0x8c>
	node->next = list;
10002b5e:	6027      	str	r7, [r4, #0]
	node->prev = tail;
10002b60:	6066      	str	r6, [r4, #4]
	tail->next = node;
10002b62:	6034      	str	r4, [r6, #0]
	list->tail = node;
10002b64:	607c      	str	r4, [r7, #4]
}
10002b66:	e027      	b.n	10002bb8 <z_add_timeout+0xb4>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
10002b68:	f7ff ff78 	bl	10002a5c <elapsed>
10002b6c:	2201      	movs	r2, #1
10002b6e:	2300      	movs	r3, #0
10002b70:	18b6      	adds	r6, r6, r2
10002b72:	415f      	adcs	r7, r3
10002b74:	0002      	movs	r2, r0
10002b76:	17c3      	asrs	r3, r0, #31
10002b78:	18b6      	adds	r6, r6, r2
10002b7a:	415f      	adcs	r7, r3
10002b7c:	6126      	str	r6, [r4, #16]
10002b7e:	6167      	str	r7, [r4, #20]
10002b80:	e7e8      	b.n	10002b54 <z_add_timeout+0x50>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
10002b82:	1a12      	subs	r2, r2, r0
10002b84:	418b      	sbcs	r3, r1
10002b86:	6122      	str	r2, [r4, #16]
10002b88:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
10002b8a:	42ae      	cmp	r6, r5
10002b8c:	d0e7      	beq.n	10002b5e <z_add_timeout+0x5a>
10002b8e:	682d      	ldr	r5, [r5, #0]
		for (t = first(); t != NULL; t = next(t)) {
10002b90:	2d00      	cmp	r5, #0
10002b92:	d0e4      	beq.n	10002b5e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
10002b94:	6928      	ldr	r0, [r5, #16]
10002b96:	6969      	ldr	r1, [r5, #20]
10002b98:	6922      	ldr	r2, [r4, #16]
10002b9a:	6963      	ldr	r3, [r4, #20]
10002b9c:	4299      	cmp	r1, r3
10002b9e:	dc02      	bgt.n	10002ba6 <z_add_timeout+0xa2>
10002ba0:	d1ef      	bne.n	10002b82 <z_add_timeout+0x7e>
10002ba2:	4290      	cmp	r0, r2
10002ba4:	d9ed      	bls.n	10002b82 <z_add_timeout+0x7e>
				t->dticks -= to->dticks;
10002ba6:	1a80      	subs	r0, r0, r2
10002ba8:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
10002baa:	686b      	ldr	r3, [r5, #4]
10002bac:	6128      	str	r0, [r5, #16]
10002bae:	6169      	str	r1, [r5, #20]
	node->prev = prev;
10002bb0:	6063      	str	r3, [r4, #4]
	node->next = successor;
10002bb2:	6025      	str	r5, [r4, #0]
	prev->next = node;
10002bb4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
10002bb6:	606c      	str	r4, [r5, #4]
	return list->head == list;
10002bb8:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002bba:	42bb      	cmp	r3, r7
10002bbc:	d00c      	beq.n	10002bd8 <z_add_timeout+0xd4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
10002bbe:	429c      	cmp	r4, r3
10002bc0:	d10a      	bne.n	10002bd8 <z_add_timeout+0xd4>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
10002bc2:	f7ff ff57 	bl	10002a74 <next_timeout>

			if (next_time == 0 ||
10002bc6:	2800      	cmp	r0, #0
10002bc8:	d003      	beq.n	10002bd2 <z_add_timeout+0xce>
			    _current_cpu->slice_ticks != next_time) {
10002bca:	4b09      	ldr	r3, [pc, #36]	; (10002bf0 <z_add_timeout+0xec>)
			if (next_time == 0 ||
10002bcc:	691b      	ldr	r3, [r3, #16]
10002bce:	4283      	cmp	r3, r0
10002bd0:	d002      	beq.n	10002bd8 <z_add_timeout+0xd4>
				sys_clock_set_timeout(next_time, false);
10002bd2:	2100      	movs	r1, #0
10002bd4:	f7fe fda4 	bl	10001720 <sys_clock_set_timeout>
	if (key != 0U) {
10002bd8:	9b01      	ldr	r3, [sp, #4]
10002bda:	2b00      	cmp	r3, #0
10002bdc:	d102      	bne.n	10002be4 <z_add_timeout+0xe0>
	__asm__ volatile(
10002bde:	b662      	cpsie	i
10002be0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
10002be4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10002be6:	46c0      	nop			; (mov r8, r8)
10002be8:	20000330 	.word	0x20000330
10002bec:	200001e0 	.word	0x200001e0
10002bf0:	2000046c 	.word	0x2000046c

10002bf4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
10002bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
10002bf6:	b08b      	sub	sp, #44	; 0x2c
10002bf8:	0004      	movs	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
10002bfa:	f7ff fce7 	bl	100025cc <z_time_slice>
	__asm__ volatile("mrs %0, PRIMASK;"
10002bfe:	f3ef 8310 	mrs	r3, PRIMASK
10002c02:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
10002c04:	9305      	str	r3, [sp, #20]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
10002c06:	4b32      	ldr	r3, [pc, #200]	; (10002cd0 <sys_clock_announce+0xdc>)
10002c08:	601c      	str	r4, [r3, #0]
	return list->head == list;
10002c0a:	4b32      	ldr	r3, [pc, #200]	; (10002cd4 <sys_clock_announce+0xe0>)

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
10002c0c:	4832      	ldr	r0, [pc, #200]	; (10002cd8 <sys_clock_announce+0xe4>)
	while (first() != NULL && first()->dticks <= announce_remaining) {
10002c0e:	4d30      	ldr	r5, [pc, #192]	; (10002cd0 <sys_clock_announce+0xdc>)
10002c10:	681c      	ldr	r4, [r3, #0]
		curr_tick += dt;
10002c12:	6801      	ldr	r1, [r0, #0]
10002c14:	6842      	ldr	r2, [r0, #4]
10002c16:	9106      	str	r1, [sp, #24]
10002c18:	9207      	str	r2, [sp, #28]
	while (first() != NULL && first()->dticks <= announce_remaining) {
10002c1a:	6829      	ldr	r1, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002c1c:	429c      	cmp	r4, r3
10002c1e:	d019      	beq.n	10002c54 <sys_clock_announce+0x60>
10002c20:	2c00      	cmp	r4, #0
10002c22:	d017      	beq.n	10002c54 <sys_clock_announce+0x60>
10002c24:	6922      	ldr	r2, [r4, #16]
10002c26:	6963      	ldr	r3, [r4, #20]
10002c28:	9200      	str	r2, [sp, #0]
10002c2a:	9301      	str	r3, [sp, #4]
10002c2c:	9a01      	ldr	r2, [sp, #4]
10002c2e:	17cb      	asrs	r3, r1, #31
10002c30:	9102      	str	r1, [sp, #8]
10002c32:	9303      	str	r3, [sp, #12]
10002c34:	429a      	cmp	r2, r3
10002c36:	dc03      	bgt.n	10002c40 <sys_clock_announce+0x4c>
10002c38:	d123      	bne.n	10002c82 <sys_clock_announce+0x8e>
10002c3a:	9a00      	ldr	r2, [sp, #0]
10002c3c:	428a      	cmp	r2, r1
10002c3e:	d920      	bls.n	10002c82 <sys_clock_announce+0x8e>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
10002c40:	9a02      	ldr	r2, [sp, #8]
10002c42:	9b03      	ldr	r3, [sp, #12]
10002c44:	9e00      	ldr	r6, [sp, #0]
10002c46:	9f01      	ldr	r7, [sp, #4]
10002c48:	1ab6      	subs	r6, r6, r2
10002c4a:	419f      	sbcs	r7, r3
10002c4c:	0032      	movs	r2, r6
10002c4e:	003b      	movs	r3, r7
10002c50:	6122      	str	r2, [r4, #16]
10002c52:	6163      	str	r3, [r4, #20]
	}

	curr_tick += announce_remaining;
10002c54:	9e06      	ldr	r6, [sp, #24]
10002c56:	9f07      	ldr	r7, [sp, #28]
10002c58:	000a      	movs	r2, r1
10002c5a:	17cb      	asrs	r3, r1, #31
10002c5c:	18b6      	adds	r6, r6, r2
10002c5e:	415f      	adcs	r7, r3
	announce_remaining = 0;
10002c60:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
10002c62:	6006      	str	r6, [r0, #0]
10002c64:	6047      	str	r7, [r0, #4]
	announce_remaining = 0;
10002c66:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
10002c68:	f7ff ff04 	bl	10002a74 <next_timeout>
10002c6c:	0021      	movs	r1, r4
10002c6e:	f7fe fd57 	bl	10001720 <sys_clock_set_timeout>
	if (key != 0U) {
10002c72:	9b05      	ldr	r3, [sp, #20]
10002c74:	42a3      	cmp	r3, r4
10002c76:	d102      	bne.n	10002c7e <sys_clock_announce+0x8a>
	__asm__ volatile(
10002c78:	b662      	cpsie	i
10002c7a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
10002c7e:	b00b      	add	sp, #44	; 0x2c
10002c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curr_tick += dt;
10002c82:	9b00      	ldr	r3, [sp, #0]
10002c84:	9e06      	ldr	r6, [sp, #24]
10002c86:	9f07      	ldr	r7, [sp, #28]
10002c88:	9308      	str	r3, [sp, #32]
10002c8a:	17db      	asrs	r3, r3, #31
10002c8c:	9309      	str	r3, [sp, #36]	; 0x24
10002c8e:	9a08      	ldr	r2, [sp, #32]
10002c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002c92:	18b6      	adds	r6, r6, r2
10002c94:	415f      	adcs	r7, r3
10002c96:	4b10      	ldr	r3, [pc, #64]	; (10002cd8 <sys_clock_announce+0xe4>)
		remove_timeout(t);
10002c98:	0020      	movs	r0, r4
		curr_tick += dt;
10002c9a:	601e      	str	r6, [r3, #0]
10002c9c:	605f      	str	r7, [r3, #4]
		announce_remaining -= dt;
10002c9e:	9b00      	ldr	r3, [sp, #0]
10002ca0:	1aca      	subs	r2, r1, r3
10002ca2:	4b0b      	ldr	r3, [pc, #44]	; (10002cd0 <sys_clock_announce+0xdc>)
10002ca4:	601a      	str	r2, [r3, #0]
		t->dticks = 0;
10002ca6:	2300      	movs	r3, #0
10002ca8:	2200      	movs	r2, #0
10002caa:	6122      	str	r2, [r4, #16]
10002cac:	6163      	str	r3, [r4, #20]
		remove_timeout(t);
10002cae:	f7ff ff0d 	bl	10002acc <remove_timeout>
	if (key != 0U) {
10002cb2:	9b05      	ldr	r3, [sp, #20]
10002cb4:	2b00      	cmp	r3, #0
10002cb6:	d102      	bne.n	10002cbe <sys_clock_announce+0xca>
	__asm__ volatile(
10002cb8:	b662      	cpsie	i
10002cba:	f3bf 8f6f 	isb	sy
		t->fn(t);
10002cbe:	0020      	movs	r0, r4
10002cc0:	68a3      	ldr	r3, [r4, #8]
10002cc2:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10002cc4:	f3ef 8310 	mrs	r3, PRIMASK
10002cc8:	b672      	cpsid	i
10002cca:	9305      	str	r3, [sp, #20]
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
10002ccc:	e79d      	b.n	10002c0a <sys_clock_announce+0x16>
10002cce:	46c0      	nop			; (mov r8, r8)
10002cd0:	200004a4 	.word	0x200004a4
10002cd4:	200001e0 	.word	0x200001e0
10002cd8:	20000330 	.word	0x20000330

10002cdc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
10002cdc:	b510      	push	{r4, lr}
10002cde:	f3ef 8410 	mrs	r4, PRIMASK
10002ce2:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
10002ce4:	f7fe fd9a 	bl	1000181c <sys_clock_elapsed>
10002ce8:	2300      	movs	r3, #0
10002cea:	0002      	movs	r2, r0
10002cec:	4905      	ldr	r1, [pc, #20]	; (10002d04 <sys_clock_tick_get+0x28>)
10002cee:	6808      	ldr	r0, [r1, #0]
10002cf0:	6849      	ldr	r1, [r1, #4]
10002cf2:	1880      	adds	r0, r0, r2
10002cf4:	4159      	adcs	r1, r3
	if (key != 0U) {
10002cf6:	429c      	cmp	r4, r3
10002cf8:	d102      	bne.n	10002d00 <sys_clock_tick_get+0x24>
	__asm__ volatile(
10002cfa:	b662      	cpsie	i
10002cfc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
10002d00:	bd10      	pop	{r4, pc}
10002d02:	46c0      	nop			; (mov r8, r8)
10002d04:	20000330 	.word	0x20000330

10002d08 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
10002d08:	b510      	push	{r4, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
10002d0a:	4a03      	ldr	r2, [pc, #12]	; (10002d18 <boot_banner+0x10>)
10002d0c:	4903      	ldr	r1, [pc, #12]	; (10002d1c <boot_banner+0x14>)
10002d0e:	4804      	ldr	r0, [pc, #16]	; (10002d20 <boot_banner+0x18>)
10002d10:	f000 f8ce 	bl	10002eb0 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
10002d14:	bd10      	pop	{r4, pc}
10002d16:	46c0      	nop			; (mov r8, r8)
10002d18:	1000429a 	.word	0x1000429a
10002d1c:	100042ef 	.word	0x100042ef
10002d20:	10004310 	.word	0x10004310

10002d24 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
10002d24:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
10002d26:	4c06      	ldr	r4, [pc, #24]	; (10002d40 <statics_init+0x1c>)
10002d28:	4b06      	ldr	r3, [pc, #24]	; (10002d44 <statics_init+0x20>)
10002d2a:	429c      	cmp	r4, r3
10002d2c:	d301      	bcc.n	10002d32 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
10002d2e:	2000      	movs	r0, #0
10002d30:	bd10      	pop	{r4, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
10002d32:	0020      	movs	r0, r4
10002d34:	68a2      	ldr	r2, [r4, #8]
10002d36:	6861      	ldr	r1, [r4, #4]
10002d38:	f001 f8b9 	bl	10003eae <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
10002d3c:	3414      	adds	r4, #20
10002d3e:	e7f3      	b.n	10002d28 <statics_init+0x4>
10002d40:	20000200 	.word	0x20000200
10002d44:	20000200 	.word	0x20000200

10002d48 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
10002d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
10002d4a:	4b08      	ldr	r3, [pc, #32]	; (10002d6c <k_sys_work_q_init+0x24>)
10002d4c:	2400      	movs	r4, #0
10002d4e:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
10002d50:	2280      	movs	r2, #128	; 0x80
10002d52:	2301      	movs	r3, #1
	struct k_work_queue_config cfg = {
10002d54:	a902      	add	r1, sp, #8
10002d56:	710c      	strb	r4, [r1, #4]
	k_work_queue_start(&k_sys_work_q,
10002d58:	4805      	ldr	r0, [pc, #20]	; (10002d70 <k_sys_work_q_init+0x28>)
10002d5a:	9100      	str	r1, [sp, #0]
10002d5c:	425b      	negs	r3, r3
10002d5e:	4905      	ldr	r1, [pc, #20]	; (10002d74 <k_sys_work_q_init+0x2c>)
10002d60:	00d2      	lsls	r2, r2, #3
10002d62:	f7ff fb3b 	bl	100023dc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
10002d66:	0020      	movs	r0, r4
10002d68:	b004      	add	sp, #16
10002d6a:	bd10      	pop	{r4, pc}
10002d6c:	10004337 	.word	0x10004337
10002d70:	20000338 	.word	0x20000338
10002d74:	200011b0 	.word	0x200011b0

10002d78 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
10002d78:	4770      	bx	lr

10002d7a <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
10002d7a:	0002      	movs	r2, r0
10002d7c:	b510      	push	{r4, lr}
10002d7e:	000b      	movs	r3, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10002d80:	7911      	ldrb	r1, [r2, #4]
10002d82:	2201      	movs	r2, #1
10002d84:	0014      	movs	r4, r2
10002d86:	408c      	lsls	r4, r1
10002d88:	0021      	movs	r1, r4
	return gpio_pin_set(spec->port, spec->pin, value);
10002d8a:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10002d8c:	6904      	ldr	r4, [r0, #16]
10002d8e:	6824      	ldr	r4, [r4, #0]
10002d90:	420c      	tst	r4, r1
10002d92:	d000      	beq.n	10002d96 <gpio_pin_set_dt.isra.0+0x1c>
		value = (value != 0) ? 0 : 1;
10002d94:	4053      	eors	r3, r2
	if (value != 0)	{
10002d96:	2b00      	cmp	r3, #0
10002d98:	d003      	beq.n	10002da2 <gpio_pin_set_dt.isra.0+0x28>
	return api->port_set_bits_raw(port, pins);
10002d9a:	6883      	ldr	r3, [r0, #8]
10002d9c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
10002d9e:	4798      	blx	r3
}
10002da0:	bd10      	pop	{r4, pc}
	return api->port_clear_bits_raw(port, pins);
10002da2:	6883      	ldr	r3, [r0, #8]
10002da4:	691b      	ldr	r3, [r3, #16]
10002da6:	e7fa      	b.n	10002d9e <gpio_pin_set_dt.isra.0+0x24>

10002da8 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10002da8:	2301      	movs	r3, #1
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
10002daa:	b510      	push	{r4, lr}
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10002dac:	001c      	movs	r4, r3
10002dae:	408c      	lsls	r4, r1
10002db0:	0021      	movs	r1, r4
10002db2:	6904      	ldr	r4, [r0, #16]
10002db4:	6824      	ldr	r4, [r4, #0]
10002db6:	420c      	tst	r4, r1
10002db8:	d000      	beq.n	10002dbc <gpio_pin_set.isra.0+0x14>
		value = (value != 0) ? 0 : 1;
10002dba:	405a      	eors	r2, r3
	if (value != 0)	{
10002dbc:	2a00      	cmp	r2, #0
10002dbe:	d003      	beq.n	10002dc8 <gpio_pin_set.isra.0+0x20>
	return api->port_set_bits_raw(port, pins);
10002dc0:	6883      	ldr	r3, [r0, #8]
10002dc2:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
10002dc4:	4798      	blx	r3
}
10002dc6:	bd10      	pop	{r4, pc}
	return api->port_clear_bits_raw(port, pins);
10002dc8:	6883      	ldr	r3, [r0, #8]
10002dca:	691b      	ldr	r3, [r3, #16]
10002dcc:	e7fa      	b.n	10002dc4 <gpio_pin_set.isra.0+0x1c>

10002dce <z_impl_uart_irq_rx_enable>:
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_enable != NULL) {
10002dce:	6883      	ldr	r3, [r0, #8]
{
10002dd0:	b510      	push	{r4, lr}
	if (api->irq_rx_enable != NULL) {
10002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002dd4:	2b00      	cmp	r3, #0
10002dd6:	d000      	beq.n	10002dda <z_impl_uart_irq_rx_enable+0xc>
		api->irq_rx_enable(dev);
10002dd8:	4798      	blx	r3
	}
#else
	ARG_UNUSED(dev);
#endif
}
10002dda:	bd10      	pop	{r4, pc}

10002ddc <uart_irq_callback_user_data_set.constprop.0>:
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
10002ddc:	6883      	ldr	r3, [r0, #8]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
10002dde:	b510      	push	{r4, lr}
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
10002de0:	2b00      	cmp	r3, #0
10002de2:	d004      	beq.n	10002dee <uart_irq_callback_user_data_set.constprop.0+0x12>
10002de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002de6:	2b00      	cmp	r3, #0
10002de8:	d001      	beq.n	10002dee <uart_irq_callback_user_data_set.constprop.0+0x12>
		api->irq_callback_set(dev, cb, user_data);
10002dea:	2200      	movs	r2, #0
10002dec:	4798      	blx	r3
#else
	ARG_UNUSED(dev);
	ARG_UNUSED(cb);
	ARG_UNUSED(user_data);
#endif
}
10002dee:	bd10      	pop	{r4, pc}

10002df0 <comm_uSendString>:
void comm_uSendString( uart_device dev, const char *str ){
10002df0:	b570      	push	{r4, r5, r6, lr}
10002df2:	0005      	movs	r5, r0
	size_t uSize = strlen(str);
10002df4:	0008      	movs	r0, r1
void comm_uSendString( uart_device dev, const char *str ){
10002df6:	000c      	movs	r4, r1
	size_t uSize = strlen(str);
10002df8:	f000 fab1 	bl	1000335e <strlen>
	for (size_t i = 0; i < uSize; i++) {
10002dfc:	1826      	adds	r6, r4, r0
10002dfe:	42b4      	cmp	r4, r6
10002e00:	d100      	bne.n	10002e04 <comm_uSendString+0x14>
}
10002e02:	bd70      	pop	{r4, r5, r6, pc}
		comm_uSendChar(dev, str[i]);
10002e04:	7821      	ldrb	r1, [r4, #0]
10002e06:	0028      	movs	r0, r5
10002e08:	f7fd fc64 	bl	100006d4 <comm_uSendChar>
	for (size_t i = 0; i < uSize; i++) {
10002e0c:	3401      	adds	r4, #1
10002e0e:	e7f6      	b.n	10002dfe <comm_uSendString+0xe>

10002e10 <uart0_cb>:


void uart0_cb(const struct device *dev, void *user_data) {
10002e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
10002e12:	0004      	movs	r4, r0
	if (api->irq_update == NULL) {
10002e14:	6883      	ldr	r3, [r0, #8]
10002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10002e18:	2b00      	cmp	r3, #0
10002e1a:	d011      	beq.n	10002e40 <uart0_cb+0x30>
	return api->irq_update(dev);
10002e1c:	4798      	blx	r3
	uint8_t c;

	if (!uart_irq_update(dev)) {
10002e1e:	2800      	cmp	r0, #0
10002e20:	d10e      	bne.n	10002e40 <uart0_cb+0x30>

	while (uart_irq_rx_ready(dev)) {
		uart_fifo_read(dev, &c, 1);
		uart_vBuildMessage(UART0, c);
	}
}
10002e22:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	if (api->fifo_read == NULL) {
10002e24:	466a      	mov	r2, sp
10002e26:	68a3      	ldr	r3, [r4, #8]
10002e28:	1dd5      	adds	r5, r2, #7
10002e2a:	699b      	ldr	r3, [r3, #24]
10002e2c:	2b00      	cmp	r3, #0
10002e2e:	d003      	beq.n	10002e38 <uart0_cb+0x28>
	return api->fifo_read(dev, rx_data, size);
10002e30:	2201      	movs	r2, #1
10002e32:	0029      	movs	r1, r5
10002e34:	0020      	movs	r0, r4
10002e36:	4798      	blx	r3
		uart_vBuildMessage(UART0, c);
10002e38:	2000      	movs	r0, #0
10002e3a:	7829      	ldrb	r1, [r5, #0]
10002e3c:	f7fd fcaa 	bl	10000794 <uart_vBuildMessage>
	if (api->irq_rx_ready == NULL) {
10002e40:	68a3      	ldr	r3, [r4, #8]
10002e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002e44:	2b00      	cmp	r3, #0
10002e46:	d0ed      	beq.n	10002e24 <uart0_cb+0x14>
	return api->irq_rx_ready(dev);
10002e48:	0020      	movs	r0, r4
10002e4a:	4798      	blx	r3
	while (uart_irq_rx_ready(dev)) {
10002e4c:	2800      	cmp	r0, #0
10002e4e:	d1e9      	bne.n	10002e24 <uart0_cb+0x14>
10002e50:	e7e7      	b.n	10002e22 <uart0_cb+0x12>

10002e52 <uart1_cb>:

void uart1_cb(const struct device *dev, void *user_data) {
10002e52:	b537      	push	{r0, r1, r2, r4, r5, lr}
10002e54:	0004      	movs	r4, r0
	if (api->irq_update == NULL) {
10002e56:	6883      	ldr	r3, [r0, #8]
10002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10002e5a:	2b00      	cmp	r3, #0
10002e5c:	d011      	beq.n	10002e82 <uart1_cb+0x30>
	return api->irq_update(dev);
10002e5e:	4798      	blx	r3
	uint8_t c;

	if (!uart_irq_update(dev)) {
10002e60:	2800      	cmp	r0, #0
10002e62:	d10e      	bne.n	10002e82 <uart1_cb+0x30>

	while (uart_irq_rx_ready(dev)) {
		uart_fifo_read(dev, &c, 1);
		uart_vBuildMessage(UART1, c);
	}
10002e64:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	if (api->fifo_read == NULL) {
10002e66:	466a      	mov	r2, sp
10002e68:	68a3      	ldr	r3, [r4, #8]
10002e6a:	1dd5      	adds	r5, r2, #7
10002e6c:	699b      	ldr	r3, [r3, #24]
10002e6e:	2b00      	cmp	r3, #0
10002e70:	d003      	beq.n	10002e7a <uart1_cb+0x28>
	return api->fifo_read(dev, rx_data, size);
10002e72:	2201      	movs	r2, #1
10002e74:	0029      	movs	r1, r5
10002e76:	0020      	movs	r0, r4
10002e78:	4798      	blx	r3
		uart_vBuildMessage(UART1, c);
10002e7a:	2001      	movs	r0, #1
10002e7c:	7829      	ldrb	r1, [r5, #0]
10002e7e:	f7fd fc89 	bl	10000794 <uart_vBuildMessage>
	if (api->irq_rx_ready == NULL) {
10002e82:	68a3      	ldr	r3, [r4, #8]
10002e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002e86:	2b00      	cmp	r3, #0
10002e88:	d0ed      	beq.n	10002e66 <uart1_cb+0x14>
	return api->irq_rx_ready(dev);
10002e8a:	0020      	movs	r0, r4
10002e8c:	4798      	blx	r3
	while (uart_irq_rx_ready(dev)) {
10002e8e:	2800      	cmp	r0, #0
10002e90:	d1e9      	bne.n	10002e66 <uart1_cb+0x14>
10002e92:	e7e7      	b.n	10002e64 <uart1_cb+0x12>

10002e94 <gprs_vDisable>:

void gprs_vDisable(void) {
10002e94:	b510      	push	{r4, lr}
	gpio_pin_set_dt(&gprs_reset, true);
10002e96:	2001      	movs	r0, #1
10002e98:	f7fd fc9a 	bl	100007d0 <gpio_pin_set_dt.constprop.0.isra.0>
}
10002e9c:	bd10      	pop	{r4, pc}

10002e9e <textp_bFindString>:
 * @param pcFindAt: onde procurar
 * @param pcFindThis: oque procurar
 * @return true: Caso tenha a sting dento da outra
 * @return false: Caso não tenha a sting dento da outra
 */
bool textp_bFindString( const char *pcFindAt, const char *pcFindThis){
10002e9e:	b510      	push	{r4, lr}
	if(strstr(pcFindAt, pcFindThis) != NULL)	return true;
10002ea0:	f000 fa3f 	bl	10003322 <strstr>
10002ea4:	1e43      	subs	r3, r0, #1
10002ea6:	4198      	sbcs	r0, r3
	return false;
}
10002ea8:	b2c0      	uxtb	r0, r0
10002eaa:	bd10      	pop	{r4, pc}

10002eac <arch_printk_char_out>:
}
10002eac:	2000      	movs	r0, #0
10002eae:	4770      	bx	lr

10002eb0 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
10002eb0:	b40f      	push	{r0, r1, r2, r3}
10002eb2:	b507      	push	{r0, r1, r2, lr}
10002eb4:	a904      	add	r1, sp, #16
10002eb6:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
10002eb8:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
10002eba:	f7fd fccb 	bl	10000854 <vprintk>

	va_end(ap);
}
10002ebe:	b003      	add	sp, #12
10002ec0:	bc08      	pop	{r3}
10002ec2:	b004      	add	sp, #16
10002ec4:	4718      	bx	r3

10002ec6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
10002ec6:	b510      	push	{r4, lr}
10002ec8:	0004      	movs	r4, r0
10002eca:	0008      	movs	r0, r1
10002ecc:	0011      	movs	r1, r2
10002ece:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
10002ed0:	47a0      	blx	r4
	return z_impl_z_current_get();
10002ed2:	f7ff fd41 	bl	10002958 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
10002ed6:	f7fe f9d7 	bl	10001288 <z_impl_k_thread_abort>

10002eda <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
10002eda:	2380      	movs	r3, #128	; 0x80
	void *cmem = &buf[c];
10002edc:	00c9      	lsls	r1, r1, #3
10002ede:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
10002ee0:	6880      	ldr	r0, [r0, #8]
10002ee2:	021b      	lsls	r3, r3, #8
10002ee4:	4298      	cmp	r0, r3
10002ee6:	d302      	bcc.n	10002eee <chunk_field+0x14>
		return ((uint32_t *)cmem)[f];
10002ee8:	0092      	lsls	r2, r2, #2
10002eea:	5850      	ldr	r0, [r2, r1]
	} else {
		return ((uint16_t *)cmem)[f];
	}
}
10002eec:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
10002eee:	0052      	lsls	r2, r2, #1
10002ef0:	5a50      	ldrh	r0, [r2, r1]
10002ef2:	e7fb      	b.n	10002eec <chunk_field+0x12>

10002ef4 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
10002ef4:	b510      	push	{r4, lr}
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
10002ef6:	2480      	movs	r4, #128	; 0x80
	void *cmem = &buf[c];
10002ef8:	00c9      	lsls	r1, r1, #3
10002efa:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
10002efc:	6880      	ldr	r0, [r0, #8]
10002efe:	0224      	lsls	r4, r4, #8
10002f00:	42a0      	cmp	r0, r4
10002f02:	d302      	bcc.n	10002f0a <chunk_set+0x16>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
10002f04:	0092      	lsls	r2, r2, #2
10002f06:	5053      	str	r3, [r2, r1]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
	}
}
10002f08:	bd10      	pop	{r4, pc}
		((uint16_t *)cmem)[f] = val;
10002f0a:	0052      	lsls	r2, r2, #1
10002f0c:	5253      	strh	r3, [r2, r1]
}
10002f0e:	e7fb      	b.n	10002f08 <chunk_set+0x14>

10002f10 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
10002f10:	b510      	push	{r4, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
10002f12:	2201      	movs	r2, #1
10002f14:	f7ff ffe1 	bl	10002eda <chunk_field>
10002f18:	0840      	lsrs	r0, r0, #1
}
10002f1a:	bd10      	pop	{r4, pc}

10002f1c <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
10002f1c:	b510      	push	{r4, lr}
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
10002f1e:	2480      	movs	r4, #128	; 0x80
	void *cmem = &buf[c];
10002f20:	00c9      	lsls	r1, r1, #3
10002f22:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
10002f24:	6880      	ldr	r0, [r0, #8]
10002f26:	2301      	movs	r3, #1
10002f28:	0224      	lsls	r4, r4, #8
10002f2a:	42a0      	cmp	r0, r4
10002f2c:	d308      	bcc.n	10002f40 <set_chunk_used+0x24>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
10002f2e:	6848      	ldr	r0, [r1, #4]
		if (used) {
10002f30:	2a00      	cmp	r2, #0
10002f32:	d002      	beq.n	10002f3a <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
10002f34:	4303      	orrs	r3, r0
10002f36:	604b      	str	r3, [r1, #4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
		}
	}
}
10002f38:	bd10      	pop	{r4, pc}
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
10002f3a:	4398      	bics	r0, r3
10002f3c:	6048      	str	r0, [r1, #4]
10002f3e:	e7fb      	b.n	10002f38 <set_chunk_used+0x1c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
10002f40:	8848      	ldrh	r0, [r1, #2]
		if (used) {
10002f42:	2a00      	cmp	r2, #0
10002f44:	d002      	beq.n	10002f4c <set_chunk_used+0x30>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
10002f46:	4303      	orrs	r3, r0
10002f48:	804b      	strh	r3, [r1, #2]
10002f4a:	e7f5      	b.n	10002f38 <set_chunk_used+0x1c>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
10002f4c:	4398      	bics	r0, r3
10002f4e:	8048      	strh	r0, [r1, #2]
}
10002f50:	e7f2      	b.n	10002f38 <set_chunk_used+0x1c>

10002f52 <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
10002f52:	b510      	push	{r4, lr}
	chunk_set(h, c, SIZE_AND_USED, size << 1);
10002f54:	0053      	lsls	r3, r2, #1
10002f56:	2201      	movs	r2, #1
10002f58:	f7ff ffcc 	bl	10002ef4 <chunk_set>
}
10002f5c:	bd10      	pop	{r4, pc}

10002f5e <mem_to_chunkid>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
10002f5e:	2280      	movs	r2, #128	; 0x80
 * Here "closest" is only meaningful in the context of sys_heap_aligned_alloc()
 * where wanted alignment might not always correspond to a chunk header
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
10002f60:	b510      	push	{r4, lr}
10002f62:	6884      	ldr	r4, [r0, #8]
10002f64:	2308      	movs	r3, #8
10002f66:	0212      	lsls	r2, r2, #8
10002f68:	4294      	cmp	r4, r2
10002f6a:	d200      	bcs.n	10002f6e <mem_to_chunkid+0x10>
10002f6c:	3b04      	subs	r3, #4
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
10002f6e:	1ac9      	subs	r1, r1, r3
10002f70:	1a08      	subs	r0, r1, r0
10002f72:	08c0      	lsrs	r0, r0, #3
}
10002f74:	bd10      	pop	{r4, pc}

10002f76 <bucket_idx.isra.0>:
10002f76:	2280      	movs	r2, #128	; 0x80
10002f78:	2308      	movs	r3, #8
static inline size_t chunksz_to_bytes(struct z_heap *h, chunksz_t chunksz_in)
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
10002f7a:	b510      	push	{r4, lr}
	return big_heap(h) ? 8 : 4;
10002f7c:	0212      	lsls	r2, r2, #8
10002f7e:	4290      	cmp	r0, r2
10002f80:	d200      	bcs.n	10002f84 <bucket_idx.isra.0+0xe>
10002f82:	3b04      	subs	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
10002f84:	3308      	adds	r3, #8
10002f86:	08d8      	lsrs	r0, r3, #3
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
10002f88:	3101      	adds	r1, #1
10002f8a:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
10002f8c:	f7fd f972 	bl	10000274 <__clzsi2>
10002f90:	231f      	movs	r3, #31
10002f92:	1a18      	subs	r0, r3, r0
}
10002f94:	bd10      	pop	{r4, pc}

10002f96 <free_list_remove_bidx>:
{
10002f96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002f98:	0017      	movs	r7, r2
	return chunk_field(h, c, FREE_NEXT);
10002f9a:	2203      	movs	r2, #3
10002f9c:	0004      	movs	r4, r0
10002f9e:	000e      	movs	r6, r1
10002fa0:	f7ff ff9b 	bl	10002eda <chunk_field>
10002fa4:	1d3b      	adds	r3, r7, #4
10002fa6:	0005      	movs	r5, r0
10002fa8:	9301      	str	r3, [sp, #4]
	if (next_free_chunk(h, c) == c) {
10002faa:	4286      	cmp	r6, r0
10002fac:	d109      	bne.n	10002fc2 <free_list_remove_bidx+0x2c>
		h->avail_buckets &= ~BIT(bidx);
10002fae:	2301      	movs	r3, #1
10002fb0:	40bb      	lsls	r3, r7
10002fb2:	68e2      	ldr	r2, [r4, #12]
10002fb4:	439a      	bics	r2, r3
10002fb6:	60e2      	str	r2, [r4, #12]
		b->next = 0;
10002fb8:	2200      	movs	r2, #0
10002fba:	9b01      	ldr	r3, [sp, #4]
10002fbc:	009b      	lsls	r3, r3, #2
10002fbe:	511a      	str	r2, [r3, r4]
}
10002fc0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	return chunk_field(h, c, FREE_PREV);
10002fc2:	0031      	movs	r1, r6
10002fc4:	2202      	movs	r2, #2
10002fc6:	0020      	movs	r0, r4
10002fc8:	f7ff ff87 	bl	10002eda <chunk_field>
10002fcc:	0006      	movs	r6, r0
		b->next = second;
10002fce:	9b01      	ldr	r3, [sp, #4]
	chunk_set(h, c, FREE_NEXT, next);
10002fd0:	0001      	movs	r1, r0
10002fd2:	009b      	lsls	r3, r3, #2
10002fd4:	0020      	movs	r0, r4
10002fd6:	511d      	str	r5, [r3, r4]
10002fd8:	2203      	movs	r2, #3
10002fda:	002b      	movs	r3, r5
10002fdc:	f7ff ff8a 	bl	10002ef4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
10002fe0:	0033      	movs	r3, r6
10002fe2:	2202      	movs	r2, #2
10002fe4:	0029      	movs	r1, r5
10002fe6:	0020      	movs	r0, r4
10002fe8:	f7ff ff84 	bl	10002ef4 <chunk_set>
}
10002fec:	e7e8      	b.n	10002fc0 <free_list_remove_bidx+0x2a>

10002fee <free_list_remove>:
{
10002fee:	b570      	push	{r4, r5, r6, lr}
10002ff0:	000d      	movs	r5, r1
10002ff2:	0004      	movs	r4, r0
	return big_heap_chunks(h->end_chunk);
10002ff4:	6886      	ldr	r6, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
10002ff6:	f7ff ff8b 	bl	10002f10 <chunk_size>
10002ffa:	2380      	movs	r3, #128	; 0x80
10002ffc:	0001      	movs	r1, r0
10002ffe:	021b      	lsls	r3, r3, #8
10003000:	429e      	cmp	r6, r3
10003002:	d301      	bcc.n	10003008 <free_list_remove+0x1a>
	if (!solo_free_header(h, c)) {
10003004:	2801      	cmp	r0, #1
10003006:	d007      	beq.n	10003018 <free_list_remove+0x2a>
		int bidx = bucket_idx(h, chunk_size(h, c));
10003008:	0030      	movs	r0, r6
1000300a:	f7ff ffb4 	bl	10002f76 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
1000300e:	0029      	movs	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
10003010:	0002      	movs	r2, r0
		free_list_remove_bidx(h, c, bidx);
10003012:	0020      	movs	r0, r4
10003014:	f7ff ffbf 	bl	10002f96 <free_list_remove_bidx>
}
10003018:	bd70      	pop	{r4, r5, r6, pc}

1000301a <merge_chunks>:
{
1000301a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000301c:	0015      	movs	r5, r2
1000301e:	0004      	movs	r4, r0
10003020:	000f      	movs	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
10003022:	f7ff ff75 	bl	10002f10 <chunk_size>
10003026:	0029      	movs	r1, r5
10003028:	0006      	movs	r6, r0
1000302a:	0020      	movs	r0, r4
1000302c:	f7ff ff70 	bl	10002f10 <chunk_size>
10003030:	1836      	adds	r6, r6, r0
	set_chunk_size(h, lc, newsz);
10003032:	0032      	movs	r2, r6
10003034:	0039      	movs	r1, r7
10003036:	0020      	movs	r0, r4
10003038:	f7ff ff8b 	bl	10002f52 <set_chunk_size>
	return c + chunk_size(h, c);
1000303c:	0029      	movs	r1, r5
1000303e:	0020      	movs	r0, r4
10003040:	f7ff ff66 	bl	10002f10 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
10003044:	0033      	movs	r3, r6
	return c + chunk_size(h, c);
10003046:	1829      	adds	r1, r5, r0
	chunk_set(h, c, LEFT_SIZE, size);
10003048:	2200      	movs	r2, #0
1000304a:	0020      	movs	r0, r4
1000304c:	f7ff ff52 	bl	10002ef4 <chunk_set>
}
10003050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10003052 <free_list_add>:
{
10003052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003054:	000d      	movs	r5, r1
10003056:	0004      	movs	r4, r0
	return big_heap_chunks(h->end_chunk);
10003058:	6886      	ldr	r6, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
1000305a:	f7ff ff59 	bl	10002f10 <chunk_size>
1000305e:	2380      	movs	r3, #128	; 0x80
10003060:	0001      	movs	r1, r0
10003062:	021b      	lsls	r3, r3, #8
10003064:	429e      	cmp	r6, r3
10003066:	d301      	bcc.n	1000306c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
10003068:	2801      	cmp	r0, #1
1000306a:	d019      	beq.n	100030a0 <free_list_add+0x4e>
		int bidx = bucket_idx(h, chunk_size(h, c));
1000306c:	0030      	movs	r0, r6
1000306e:	f7ff ff82 	bl	10002f76 <bucket_idx.isra.0>
	if (b->next == 0U) {
10003072:	0083      	lsls	r3, r0, #2
10003074:	18e3      	adds	r3, r4, r3
10003076:	691e      	ldr	r6, [r3, #16]
10003078:	2e00      	cmp	r6, #0
1000307a:	d112      	bne.n	100030a2 <free_list_add+0x50>
		h->avail_buckets |= BIT(bidx);
1000307c:	2201      	movs	r2, #1
1000307e:	4082      	lsls	r2, r0
10003080:	68e1      	ldr	r1, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
10003082:	0020      	movs	r0, r4
10003084:	430a      	orrs	r2, r1
10003086:	60e2      	str	r2, [r4, #12]
10003088:	0029      	movs	r1, r5
1000308a:	2202      	movs	r2, #2
		b->next = c;
1000308c:	611d      	str	r5, [r3, #16]
1000308e:	002b      	movs	r3, r5
10003090:	f7ff ff30 	bl	10002ef4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
10003094:	002b      	movs	r3, r5
10003096:	2203      	movs	r2, #3
10003098:	0029      	movs	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
1000309a:	0020      	movs	r0, r4
1000309c:	f7ff ff2a 	bl	10002ef4 <chunk_set>
}
100030a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return chunk_field(h, c, FREE_PREV);
100030a2:	2202      	movs	r2, #2
100030a4:	0031      	movs	r1, r6
100030a6:	0020      	movs	r0, r4
100030a8:	f7ff ff17 	bl	10002eda <chunk_field>
100030ac:	0007      	movs	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
100030ae:	0003      	movs	r3, r0
100030b0:	2202      	movs	r2, #2
100030b2:	0029      	movs	r1, r5
100030b4:	0020      	movs	r0, r4
100030b6:	f7ff ff1d 	bl	10002ef4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
100030ba:	0033      	movs	r3, r6
100030bc:	2203      	movs	r2, #3
100030be:	0029      	movs	r1, r5
100030c0:	0020      	movs	r0, r4
100030c2:	f7ff ff17 	bl	10002ef4 <chunk_set>
100030c6:	002b      	movs	r3, r5
100030c8:	2203      	movs	r2, #3
100030ca:	0039      	movs	r1, r7
100030cc:	0020      	movs	r0, r4
100030ce:	f7ff ff11 	bl	10002ef4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
100030d2:	002b      	movs	r3, r5
100030d4:	2202      	movs	r2, #2
100030d6:	0031      	movs	r1, r6
100030d8:	e7df      	b.n	1000309a <free_list_add+0x48>

100030da <free_chunk>:
{
100030da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100030dc:	000c      	movs	r4, r1
100030de:	0005      	movs	r5, r0
	return c + chunk_size(h, c);
100030e0:	f7ff ff16 	bl	10002f10 <chunk_size>
100030e4:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
100030e6:	2201      	movs	r2, #1
100030e8:	0031      	movs	r1, r6
100030ea:	0028      	movs	r0, r5
100030ec:	f7ff fef5 	bl	10002eda <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
100030f0:	07c3      	lsls	r3, r0, #31
100030f2:	d40c      	bmi.n	1000310e <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
100030f4:	0031      	movs	r1, r6
100030f6:	0028      	movs	r0, r5
100030f8:	f7ff ff79 	bl	10002fee <free_list_remove>
	return c + chunk_size(h, c);
100030fc:	0021      	movs	r1, r4
100030fe:	0028      	movs	r0, r5
10003100:	f7ff ff06 	bl	10002f10 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
10003104:	0021      	movs	r1, r4
10003106:	1822      	adds	r2, r4, r0
10003108:	0028      	movs	r0, r5
1000310a:	f7ff ff86 	bl	1000301a <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
1000310e:	2200      	movs	r2, #0
10003110:	0021      	movs	r1, r4
10003112:	0028      	movs	r0, r5
10003114:	f7ff fee1 	bl	10002eda <chunk_field>
10003118:	1a26      	subs	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
1000311a:	2201      	movs	r2, #1
1000311c:	0031      	movs	r1, r6
1000311e:	0028      	movs	r0, r5
10003120:	f7ff fedb 	bl	10002eda <chunk_field>
10003124:	2301      	movs	r3, #1
	if (!chunk_used(h, left_chunk(h, c))) {
10003126:	0007      	movs	r7, r0
10003128:	401f      	ands	r7, r3
1000312a:	4218      	tst	r0, r3
1000312c:	d113      	bne.n	10003156 <free_chunk+0x7c>
		free_list_remove(h, left_chunk(h, c));
1000312e:	0031      	movs	r1, r6
10003130:	0028      	movs	r0, r5
10003132:	f7ff ff5c 	bl	10002fee <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
10003136:	0021      	movs	r1, r4
10003138:	003a      	movs	r2, r7
1000313a:	0028      	movs	r0, r5
1000313c:	f7ff fecd 	bl	10002eda <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
10003140:	0022      	movs	r2, r4
10003142:	1a21      	subs	r1, r4, r0
10003144:	0028      	movs	r0, r5
10003146:	f7ff ff68 	bl	1000301a <merge_chunks>
1000314a:	0021      	movs	r1, r4
1000314c:	003a      	movs	r2, r7
1000314e:	0028      	movs	r0, r5
10003150:	f7ff fec3 	bl	10002eda <chunk_field>
10003154:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
10003156:	0028      	movs	r0, r5
10003158:	0021      	movs	r1, r4
1000315a:	f7ff ff7a 	bl	10003052 <free_list_add>
}
1000315e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10003160 <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
10003160:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
10003162:	2900      	cmp	r1, #0
10003164:	d00d      	beq.n	10003182 <sys_heap_free+0x22>
10003166:	6805      	ldr	r5, [r0, #0]
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
	chunkid_t c = mem_to_chunkid(h, mem);
10003168:	0028      	movs	r0, r5
1000316a:	f7ff fef8 	bl	10002f5e <mem_to_chunkid>
1000316e:	0004      	movs	r4, r0
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
10003170:	0001      	movs	r1, r0
10003172:	2200      	movs	r2, #0
10003174:	0028      	movs	r0, r5
10003176:	f7ff fed1 	bl	10002f1c <set_chunk_used>
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
1000317a:	0021      	movs	r1, r4
1000317c:	0028      	movs	r0, r5
1000317e:	f7ff ffac 	bl	100030da <free_chunk>
}
10003182:	bd70      	pop	{r4, r5, r6, pc}

10003184 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
10003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_bytes(size) ? 8 : 4;
10003186:	2380      	movs	r3, #128	; 0x80
10003188:	2408      	movs	r4, #8
1000318a:	02db      	lsls	r3, r3, #11
1000318c:	429a      	cmp	r2, r3
1000318e:	d200      	bcs.n	10003192 <sys_heap_init+0xe>
10003190:	3c04      	subs	r4, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
10003192:	2307      	movs	r3, #7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
10003194:	2700      	movs	r7, #0
	bytes -= heap_footer_bytes(bytes);
10003196:	1b14      	subs	r4, r2, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
10003198:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
1000319a:	1909      	adds	r1, r1, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
1000319c:	439e      	bics	r6, r3
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
1000319e:	4399      	bics	r1, r3
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
100031a0:	1b8c      	subs	r4, r1, r6
100031a2:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
100031a4:	6006      	str	r6, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
100031a6:	0021      	movs	r1, r4
100031a8:	0020      	movs	r0, r4
	h->end_chunk = heap_sz;
100031aa:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
100031ac:	60f7      	str	r7, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
100031ae:	f7ff fee2 	bl	10002f76 <bucket_idx.isra.0>
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
100031b2:	0032      	movs	r2, r6
	for (int i = 0; i < nb_buckets; i++) {
100031b4:	003b      	movs	r3, r7
		h->buckets[i].next = 0;
100031b6:	0039      	movs	r1, r7
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
100031b8:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
100031ba:	351b      	adds	r5, #27
100031bc:	08ed      	lsrs	r5, r5, #3
		h->buckets[i].next = 0;
100031be:	3210      	adds	r2, #16
	for (int i = 0; i < nb_buckets; i++) {
100031c0:	4298      	cmp	r0, r3
100031c2:	da30      	bge.n	10003226 <sys_heap_init+0xa2>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
100031c4:	002a      	movs	r2, r5
100031c6:	0030      	movs	r0, r6
100031c8:	2100      	movs	r1, #0
100031ca:	f7ff fec2 	bl	10002f52 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
100031ce:	2300      	movs	r3, #0
100031d0:	0030      	movs	r0, r6
100031d2:	001a      	movs	r2, r3
100031d4:	0019      	movs	r1, r3
100031d6:	f7ff fe8d 	bl	10002ef4 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
100031da:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
100031dc:	0030      	movs	r0, r6
100031de:	2201      	movs	r2, #1
100031e0:	2100      	movs	r1, #0
100031e2:	f7ff fe9b 	bl	10002f1c <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
100031e6:	003a      	movs	r2, r7
100031e8:	0029      	movs	r1, r5
100031ea:	0030      	movs	r0, r6
100031ec:	f7ff feb1 	bl	10002f52 <set_chunk_size>
100031f0:	002b      	movs	r3, r5
100031f2:	0029      	movs	r1, r5
100031f4:	0030      	movs	r0, r6
100031f6:	2200      	movs	r2, #0
100031f8:	f7ff fe7c 	bl	10002ef4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
100031fc:	0030      	movs	r0, r6
100031fe:	0021      	movs	r1, r4
10003200:	2200      	movs	r2, #0
10003202:	f7ff fea6 	bl	10002f52 <set_chunk_size>
10003206:	003b      	movs	r3, r7
10003208:	0030      	movs	r0, r6
1000320a:	0021      	movs	r1, r4
1000320c:	2200      	movs	r2, #0
1000320e:	f7ff fe71 	bl	10002ef4 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
10003212:	0030      	movs	r0, r6
10003214:	2201      	movs	r2, #1
10003216:	0021      	movs	r1, r4
10003218:	f7ff fe80 	bl	10002f1c <set_chunk_used>

	free_list_add(h, chunk0_size);
1000321c:	0029      	movs	r1, r5
1000321e:	0030      	movs	r0, r6
10003220:	f7ff ff17 	bl	10003052 <free_list_add>
}
10003224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h->buckets[i].next = 0;
10003226:	009f      	lsls	r7, r3, #2
10003228:	51d1      	str	r1, [r2, r7]
	for (int i = 0; i < nb_buckets; i++) {
1000322a:	3301      	adds	r3, #1
1000322c:	e7c8      	b.n	100031c0 <sys_heap_init+0x3c>

1000322e <encode_uint>:
{
1000322e:	b5f0      	push	{r4, r5, r6, r7, lr}
10003230:	b085      	sub	sp, #20
10003232:	9001      	str	r0, [sp, #4]
10003234:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
10003236:	78d3      	ldrb	r3, [r2, #3]
{
10003238:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
1000323a:	001a      	movs	r2, r3
1000323c:	3a41      	subs	r2, #65	; 0x41
1000323e:	000f      	movs	r7, r1
	switch (specifier) {
10003240:	2408      	movs	r4, #8
10003242:	9202      	str	r2, [sp, #8]
10003244:	2b6f      	cmp	r3, #111	; 0x6f
10003246:	d00a      	beq.n	1000325e <encode_uint+0x30>
10003248:	d804      	bhi.n	10003254 <encode_uint+0x26>
		return 10;
1000324a:	3402      	adds	r4, #2
	switch (specifier) {
1000324c:	2b58      	cmp	r3, #88	; 0x58
1000324e:	d106      	bne.n	1000325e <encode_uint+0x30>
		return 16;
10003250:	3406      	adds	r4, #6
10003252:	e004      	b.n	1000325e <encode_uint+0x30>
	switch (specifier) {
10003254:	2208      	movs	r2, #8
		return 10;
10003256:	240a      	movs	r4, #10
	switch (specifier) {
10003258:	4393      	bics	r3, r2
1000325a:	2b70      	cmp	r3, #112	; 0x70
1000325c:	d0f8      	beq.n	10003250 <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
1000325e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
10003260:	0022      	movs	r2, r4
10003262:	2300      	movs	r3, #0
10003264:	0039      	movs	r1, r7
10003266:	9801      	ldr	r0, [sp, #4]
10003268:	f7fd f822 	bl	100002b0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
1000326c:	0013      	movs	r3, r2
1000326e:	468c      	mov	ip, r1
10003270:	b2d2      	uxtb	r2, r2
10003272:	2b09      	cmp	r3, #9
10003274:	d819      	bhi.n	100032aa <encode_uint+0x7c>
10003276:	0013      	movs	r3, r2
10003278:	3330      	adds	r3, #48	; 0x30
1000327a:	b2db      	uxtb	r3, r3
1000327c:	3e01      	subs	r6, #1
1000327e:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
10003280:	2300      	movs	r3, #0
10003282:	42bb      	cmp	r3, r7
10003284:	d102      	bne.n	1000328c <encode_uint+0x5e>
10003286:	9b01      	ldr	r3, [sp, #4]
10003288:	429c      	cmp	r4, r3
1000328a:	d802      	bhi.n	10003292 <encode_uint+0x64>
1000328c:	9b03      	ldr	r3, [sp, #12]
1000328e:	429e      	cmp	r6, r3
10003290:	d808      	bhi.n	100032a4 <encode_uint+0x76>
	if (conv->flag_hash) {
10003292:	782b      	ldrb	r3, [r5, #0]
10003294:	069b      	lsls	r3, r3, #26
10003296:	d513      	bpl.n	100032c0 <encode_uint+0x92>
		if (radix == 8) {
10003298:	2c08      	cmp	r4, #8
1000329a:	d10f      	bne.n	100032bc <encode_uint+0x8e>
			conv->altform_0c = true;
1000329c:	78ab      	ldrb	r3, [r5, #2]
1000329e:	431c      	orrs	r4, r3
100032a0:	70ac      	strb	r4, [r5, #2]
	return bp;
100032a2:	e00d      	b.n	100032c0 <encode_uint+0x92>
		value /= radix;
100032a4:	4667      	mov	r7, ip
100032a6:	9001      	str	r0, [sp, #4]
100032a8:	e7da      	b.n	10003260 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
100032aa:	0013      	movs	r3, r2
100032ac:	9902      	ldr	r1, [sp, #8]
100032ae:	3357      	adds	r3, #87	; 0x57
100032b0:	b2db      	uxtb	r3, r3
100032b2:	2919      	cmp	r1, #25
100032b4:	d8e2      	bhi.n	1000327c <encode_uint+0x4e>
100032b6:	3237      	adds	r2, #55	; 0x37
100032b8:	b2d3      	uxtb	r3, r2
100032ba:	e7df      	b.n	1000327c <encode_uint+0x4e>
		} else if (radix == 16) {
100032bc:	2c10      	cmp	r4, #16
100032be:	d0ed      	beq.n	1000329c <encode_uint+0x6e>
}
100032c0:	0030      	movs	r0, r6
100032c2:	b005      	add	sp, #20
100032c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

100032c6 <outs>:
{
100032c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100032c8:	000f      	movs	r7, r1
100032ca:	0015      	movs	r5, r2
100032cc:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
100032ce:	0014      	movs	r4, r2
{
100032d0:	9001      	str	r0, [sp, #4]
100032d2:	1b60      	subs	r0, r4, r5
	while ((sp < ep) || ((ep == NULL) && *sp)) {
100032d4:	42a6      	cmp	r6, r4
100032d6:	d804      	bhi.n	100032e2 <outs+0x1c>
100032d8:	2e00      	cmp	r6, #0
100032da:	d109      	bne.n	100032f0 <outs+0x2a>
100032dc:	7823      	ldrb	r3, [r4, #0]
100032de:	2b00      	cmp	r3, #0
100032e0:	d006      	beq.n	100032f0 <outs+0x2a>
		int rc = out((int)*sp++, ctx);
100032e2:	7820      	ldrb	r0, [r4, #0]
100032e4:	0039      	movs	r1, r7
100032e6:	9b01      	ldr	r3, [sp, #4]
100032e8:	4798      	blx	r3
		if (rc < 0) {
100032ea:	3401      	adds	r4, #1
100032ec:	2800      	cmp	r0, #0
100032ee:	daf0      	bge.n	100032d2 <outs+0xc>
}
100032f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100032f2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
100032f2:	4770      	bx	lr

100032f4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
100032f4:	b510      	push	{r4, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
100032f6:	f000 fc49 	bl	10003b8c <z_fatal_error>
}
100032fa:	bd10      	pop	{r4, pc}

100032fc <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
100032fc:	b510      	push	{r4, lr}
100032fe:	0001      	movs	r1, r0
	z_fatal_error(reason, esf);
10003300:	6800      	ldr	r0, [r0, #0]
10003302:	f000 fc43 	bl	10003b8c <z_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
10003306:	bd10      	pop	{r4, pc}

10003308 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
10003308:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
1000330a:	2100      	movs	r1, #0
1000330c:	2001      	movs	r0, #1
1000330e:	f7ff fff1 	bl	100032f4 <z_arm_fatal_error>
}
10003312:	bd10      	pop	{r4, pc}

10003314 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
10003314:	b510      	push	{r4, lr}
	handler();
10003316:	f7fd fe87 	bl	10001028 <z_SysNmiOnReset>
	z_arm_int_exit();
1000331a:	f7fd ff31 	bl	10001180 <z_arm_exc_exit>
}
1000331e:	bd10      	pop	{r4, pc}

10003320 <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
10003320:	4770      	bx	lr

10003322 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
10003322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char c, sc;
	size_t len;

	c = *find++;
10003324:	780f      	ldrb	r7, [r1, #0]
{
10003326:	0004      	movs	r4, r0
10003328:	000d      	movs	r5, r1
	if (c != 0) {
1000332a:	2f00      	cmp	r7, #0
1000332c:	d013      	beq.n	10003356 <strstr+0x34>
	c = *find++;
1000332e:	3501      	adds	r5, #1
		len = strlen(find);
10003330:	0028      	movs	r0, r5
10003332:	f000 f814 	bl	1000335e <strlen>
10003336:	0026      	movs	r6, r4
10003338:	9001      	str	r0, [sp, #4]
1000333a:	0034      	movs	r4, r6
		do {
			do {
				sc = *s++;
1000333c:	7823      	ldrb	r3, [r4, #0]
1000333e:	3601      	adds	r6, #1
				if (sc == 0) {
10003340:	2b00      	cmp	r3, #0
10003342:	d00a      	beq.n	1000335a <strstr+0x38>
					return NULL;
				}
			} while (sc != c);
10003344:	429f      	cmp	r7, r3
10003346:	d1f8      	bne.n	1000333a <strstr+0x18>
		} while (strncmp(s, find, len) != 0);
10003348:	0029      	movs	r1, r5
1000334a:	0030      	movs	r0, r6
1000334c:	9a01      	ldr	r2, [sp, #4]
1000334e:	f000 f818 	bl	10003382 <strncmp>
10003352:	2800      	cmp	r0, #0
10003354:	d1f1      	bne.n	1000333a <strstr+0x18>
	s--;
	}
	return (char *)s;
}
10003356:	0020      	movs	r0, r4
10003358:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					return NULL;
1000335a:	001c      	movs	r4, r3
1000335c:	e7fb      	b.n	10003356 <strstr+0x34>

1000335e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
1000335e:	0003      	movs	r3, r0
	size_t n = 0;
10003360:	2000      	movs	r0, #0

	while (*s != '\0') {
10003362:	5c1a      	ldrb	r2, [r3, r0]
10003364:	2a00      	cmp	r2, #0
10003366:	d100      	bne.n	1000336a <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
10003368:	4770      	bx	lr
		n++;
1000336a:	3001      	adds	r0, #1
1000336c:	e7f9      	b.n	10003362 <strlen+0x4>

1000336e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
1000336e:	0003      	movs	r3, r0
	size_t n = 0;
10003370:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
10003372:	5c1a      	ldrb	r2, [r3, r0]
10003374:	2a00      	cmp	r2, #0
10003376:	d001      	beq.n	1000337c <strnlen+0xe>
10003378:	4288      	cmp	r0, r1
1000337a:	d100      	bne.n	1000337e <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
1000337c:	4770      	bx	lr
		n++;
1000337e:	3001      	adds	r0, #1
10003380:	e7f7      	b.n	10003372 <strnlen+0x4>

10003382 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
10003382:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
10003384:	2400      	movs	r4, #0
10003386:	42a2      	cmp	r2, r4
10003388:	d008      	beq.n	1000339c <strncmp+0x1a>
1000338a:	5d03      	ldrb	r3, [r0, r4]
1000338c:	5d0d      	ldrb	r5, [r1, r4]
1000338e:	42ab      	cmp	r3, r5
10003390:	d102      	bne.n	10003398 <strncmp+0x16>
10003392:	3401      	adds	r4, #1
10003394:	2b00      	cmp	r3, #0
10003396:	d1f6      	bne.n	10003386 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
10003398:	1b58      	subs	r0, r3, r5
1000339a:	e000      	b.n	1000339e <strncmp+0x1c>
1000339c:	2000      	movs	r0, #0
}
1000339e:	bd30      	pop	{r4, r5, pc}

100033a0 <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
100033a0:	2300      	movs	r3, #0
{
100033a2:	b510      	push	{r4, lr}
	while (n > 0) {
100033a4:	429a      	cmp	r2, r3
100033a6:	d100      	bne.n	100033aa <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
100033a8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
100033aa:	5ccc      	ldrb	r4, [r1, r3]
100033ac:	54c4      	strb	r4, [r0, r3]
		n--;
100033ae:	3301      	adds	r3, #1
100033b0:	e7f8      	b.n	100033a4 <memcpy+0x4>

100033b2 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
100033b2:	0003      	movs	r3, r0
100033b4:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
100033b6:	1882      	adds	r2, r0, r2
100033b8:	4293      	cmp	r3, r2
100033ba:	d100      	bne.n	100033be <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
100033bc:	4770      	bx	lr
		*(d_byte++) = c_byte;
100033be:	7019      	strb	r1, [r3, #0]
		n--;
100033c0:	3301      	adds	r3, #1
100033c2:	e7f9      	b.n	100033b8 <memset+0x6>

100033c4 <_stdout_hook_default>:
	return EOF;
100033c4:	2001      	movs	r0, #1
}
100033c6:	4240      	negs	r0, r0
100033c8:	4770      	bx	lr

100033ca <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
100033ca:	23d0      	movs	r3, #208	; 0xd0
100033cc:	061b      	lsls	r3, r3, #24
100033ce:	685b      	ldr	r3, [r3, #4]
}
100033d0:	2000      	movs	r0, #0
	*value = gpio_get_all();
100033d2:	600b      	str	r3, [r1, #0]
}
100033d4:	4770      	bx	lr

100033d6 <gpio_rpi_port_set_masked_raw>:
 * corresponding bit in \p value, leaving other pins unchanged.
 * Since this uses the TOGL alias, it is concurrency-safe with e.g. an IRQ
 * bashing different pins from the same core.
 */
static inline void gpio_put_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
100033d6:	23d0      	movs	r3, #208	; 0xd0
100033d8:	061b      	lsls	r3, r3, #24
100033da:	6918      	ldr	r0, [r3, #16]
100033dc:	4042      	eors	r2, r0
100033de:	4011      	ands	r1, r2
}
100033e0:	2000      	movs	r0, #0
100033e2:	61d9      	str	r1, [r3, #28]
100033e4:	4770      	bx	lr

100033e6 <gpio_rpi_port_set_bits_raw>:
    sio_hw->gpio_set = mask;
100033e6:	23d0      	movs	r3, #208	; 0xd0
100033e8:	061b      	lsls	r3, r3, #24
}
100033ea:	2000      	movs	r0, #0
100033ec:	6159      	str	r1, [r3, #20]
100033ee:	4770      	bx	lr

100033f0 <gpio_rpi_port_clear_bits_raw>:
    sio_hw->gpio_clr = mask;
100033f0:	23d0      	movs	r3, #208	; 0xd0
100033f2:	061b      	lsls	r3, r3, #24
}
100033f4:	2000      	movs	r0, #0
100033f6:	6199      	str	r1, [r3, #24]
100033f8:	4770      	bx	lr

100033fa <gpio_rpi_port_toggle_bits>:
    sio_hw->gpio_togl = mask;
100033fa:	23d0      	movs	r3, #208	; 0xd0
100033fc:	061b      	lsls	r3, r3, #24
}
100033fe:	2000      	movs	r0, #0
10003400:	61d9      	str	r1, [r3, #28]
10003402:	4770      	bx	lr

10003404 <gpio_rpi_manage_callback>:
	struct gpio_rpi_data *data = dev->data;
10003404:	6903      	ldr	r3, [r0, #16]
{
10003406:	b530      	push	{r4, r5, lr}
	return list->head;
10003408:	6858      	ldr	r0, [r3, #4]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
1000340a:	2400      	movs	r4, #0
	if (!sys_slist_is_empty(callbacks)) {
1000340c:	2800      	cmp	r0, #0
1000340e:	d104      	bne.n	1000341a <gpio_rpi_manage_callback+0x16>
	if (set) {
10003410:	2a00      	cmp	r2, #0
10003412:	d11a      	bne.n	1000344a <gpio_rpi_manage_callback+0x46>
	return 0;
10003414:	2000      	movs	r0, #0
}
10003416:	bd30      	pop	{r4, r5, pc}
10003418:	0028      	movs	r0, r5
1000341a:	4281      	cmp	r1, r0
1000341c:	d10f      	bne.n	1000343e <gpio_rpi_manage_callback+0x3a>
	return node->next;
1000341e:	6808      	ldr	r0, [r1, #0]
	return list->tail;
10003420:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
10003422:	2c00      	cmp	r4, #0
10003424:	d106      	bne.n	10003434 <gpio_rpi_manage_callback+0x30>
	list->head = node;
10003426:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
10003428:	428d      	cmp	r5, r1
1000342a:	d100      	bne.n	1000342e <gpio_rpi_manage_callback+0x2a>
	list->tail = node;
1000342c:	6098      	str	r0, [r3, #8]
	parent->next = child;
1000342e:	2000      	movs	r0, #0
10003430:	6008      	str	r0, [r1, #0]
10003432:	e7ed      	b.n	10003410 <gpio_rpi_manage_callback+0xc>
10003434:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
10003436:	428d      	cmp	r5, r1
10003438:	d1f9      	bne.n	1000342e <gpio_rpi_manage_callback+0x2a>
	list->tail = node;
1000343a:	609c      	str	r4, [r3, #8]
}
1000343c:	e7f7      	b.n	1000342e <gpio_rpi_manage_callback+0x2a>
	return node->next;
1000343e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10003440:	0004      	movs	r4, r0
10003442:	2d00      	cmp	r5, #0
10003444:	d1e8      	bne.n	10003418 <gpio_rpi_manage_callback+0x14>
			if (!set) {
10003446:	2a00      	cmp	r2, #0
10003448:	d007      	beq.n	1000345a <gpio_rpi_manage_callback+0x56>
	parent->next = child;
1000344a:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
1000344c:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
1000344e:	600a      	str	r2, [r1, #0]
	list->head = node;
10003450:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
10003452:	2800      	cmp	r0, #0
10003454:	d1de      	bne.n	10003414 <gpio_rpi_manage_callback+0x10>
	list->tail = node;
10003456:	6099      	str	r1, [r3, #8]
}
10003458:	e7dd      	b.n	10003416 <gpio_rpi_manage_callback+0x12>
				return -EINVAL;
1000345a:	2016      	movs	r0, #22
1000345c:	4240      	negs	r0, r0
	return gpio_manage_callback(&data->callbacks, callback, set);
1000345e:	e7da      	b.n	10003416 <gpio_rpi_manage_callback+0x12>

10003460 <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
10003460:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
10003462:	6843      	ldr	r3, [r0, #4]
10003464:	685b      	ldr	r3, [r3, #4]
10003466:	4798      	blx	r3
	return 0;
}
10003468:	2000      	movs	r0, #0
1000346a:	bd10      	pop	{r4, pc}

1000346c <gpio_rpi_pin_interrupt_configure>:
{
1000346c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000346e:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
10003470:	6907      	ldr	r7, [r0, #16]
{
10003472:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10003474:	210f      	movs	r1, #15
10003476:	2200      	movs	r2, #0
10003478:	0028      	movs	r0, r5
{
1000347a:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
1000347c:	f7fe fbc0 	bl	10001c00 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10003480:	2301      	movs	r3, #1
10003482:	40ab      	lsls	r3, r5
10003484:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
10003486:	2380      	movs	r3, #128	; 0x80
10003488:	039b      	lsls	r3, r3, #14
1000348a:	429e      	cmp	r6, r3
1000348c:	d01e      	beq.n	100034cc <gpio_rpi_pin_interrupt_configure+0x60>
			if (trig & GPIO_INT_LOW_0) {
1000348e:	2180      	movs	r1, #128	; 0x80
			if (trig & GPIO_INT_HIGH_1) {
10003490:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
10003492:	0489      	lsls	r1, r1, #18
			if (trig & GPIO_INT_HIGH_1) {
10003494:	04db      	lsls	r3, r3, #19
			if (trig & GPIO_INT_LOW_0) {
10003496:	4021      	ands	r1, r4
			if (trig & GPIO_INT_HIGH_1) {
10003498:	401c      	ands	r4, r3
		if (mode & GPIO_INT_EDGE) {
1000349a:	01f3      	lsls	r3, r6, #7
1000349c:	d50f      	bpl.n	100034be <gpio_rpi_pin_interrupt_configure+0x52>
			if (trig & GPIO_INT_LOW_0) {
1000349e:	2900      	cmp	r1, #0
100034a0:	d000      	beq.n	100034a4 <gpio_rpi_pin_interrupt_configure+0x38>
				events |= GPIO_IRQ_EDGE_FALL;
100034a2:	2104      	movs	r1, #4
				events |= GPIO_IRQ_EDGE_RISE;
100034a4:	2308      	movs	r3, #8
			if (trig & GPIO_INT_HIGH_1) {
100034a6:	2c00      	cmp	r4, #0
100034a8:	d10e      	bne.n	100034c8 <gpio_rpi_pin_interrupt_configure+0x5c>
		gpio_set_irq_enabled(pin, events, true);
100034aa:	2201      	movs	r2, #1
100034ac:	0028      	movs	r0, r5
100034ae:	f7fe fba7 	bl	10001c00 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100034b2:	9b01      	ldr	r3, [sp, #4]
100034b4:	68fa      	ldr	r2, [r7, #12]
100034b6:	4313      	orrs	r3, r2
}
100034b8:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100034ba:	60fb      	str	r3, [r7, #12]
}
100034bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				events |= GPIO_IRQ_LEVEL_LOW;
100034be:	1e4b      	subs	r3, r1, #1
100034c0:	4199      	sbcs	r1, r3
			if (trig & GPIO_INT_HIGH_1) {
100034c2:	2c00      	cmp	r4, #0
100034c4:	d0f1      	beq.n	100034aa <gpio_rpi_pin_interrupt_configure+0x3e>
				events |= GPIO_IRQ_LEVEL_HIGH;
100034c6:	2302      	movs	r3, #2
100034c8:	4319      	orrs	r1, r3
100034ca:	e7ee      	b.n	100034aa <gpio_rpi_pin_interrupt_configure+0x3e>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100034cc:	68fb      	ldr	r3, [r7, #12]
100034ce:	9a01      	ldr	r2, [sp, #4]
100034d0:	4393      	bics	r3, r2
100034d2:	e7f1      	b.n	100034b8 <gpio_rpi_pin_interrupt_configure+0x4c>

100034d4 <gpio_rpi_configure>:
{
100034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flags & GPIO_SINGLE_ENDED) {
100034d6:	2302      	movs	r3, #2
{
100034d8:	000e      	movs	r6, r1
100034da:	0014      	movs	r4, r2
	if (flags & GPIO_SINGLE_ENDED) {
100034dc:	421a      	tst	r2, r3
100034de:	d129      	bne.n	10003534 <gpio_rpi_configure+0x60>
	gpio_set_function(pin, GPIO_FUNC_SIO);
100034e0:	2105      	movs	r1, #5
100034e2:	0030      	movs	r0, r6
100034e4:	f7fe fb28 	bl	10001b38 <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
100034e8:	2380      	movs	r3, #128	; 0x80
100034ea:	029b      	lsls	r3, r3, #10
100034ec:	421c      	tst	r4, r3
100034ee:	d011      	beq.n	10003514 <gpio_rpi_configure+0x40>
 *
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
100034f0:	2301      	movs	r3, #1
    sio_hw->gpio_oe_set = mask;
100034f2:	22d0      	movs	r2, #208	; 0xd0
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
100034f4:	2180      	movs	r1, #128	; 0x80
    uint32_t mask = 1ul << gpio;
100034f6:	40b3      	lsls	r3, r6
100034f8:	0020      	movs	r0, r4
    sio_hw->gpio_oe_set = mask;
100034fa:	0612      	lsls	r2, r2, #24
100034fc:	0309      	lsls	r1, r1, #12
100034fe:	6253      	str	r3, [r2, #36]	; 0x24
10003500:	4008      	ands	r0, r1
10003502:	420c      	tst	r4, r1
10003504:	d002      	beq.n	1000350c <gpio_rpi_configure+0x38>
    sio_hw->gpio_set = mask;
10003506:	6153      	str	r3, [r2, #20]
	return 0;
10003508:	2000      	movs	r0, #0
}
1000350a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
1000350c:	0361      	lsls	r1, r4, #13
1000350e:	d5fb      	bpl.n	10003508 <gpio_rpi_configure+0x34>
    sio_hw->gpio_clr = mask;
10003510:	6193      	str	r3, [r2, #24]
}
10003512:	e7fa      	b.n	1000350a <gpio_rpi_configure+0x36>
	} else if (flags & GPIO_INPUT) {
10003514:	03e3      	lsls	r3, r4, #15
10003516:	d5f7      	bpl.n	10003508 <gpio_rpi_configure+0x34>
    uint32_t mask = 1ul << gpio;
10003518:	2301      	movs	r3, #1
1000351a:	0019      	movs	r1, r3
    sio_hw->gpio_oe_clr = mask;
1000351c:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
1000351e:	40b1      	lsls	r1, r6
    sio_hw->gpio_oe_clr = mask;
10003520:	0612      	lsls	r2, r2, #24
10003522:	6291      	str	r1, [r2, #40]	; 0x28
		gpio_set_pulls(pin,
10003524:	0962      	lsrs	r2, r4, #5
10003526:	0921      	lsrs	r1, r4, #4
10003528:	0030      	movs	r0, r6
1000352a:	401a      	ands	r2, r3
1000352c:	4019      	ands	r1, r3
1000352e:	f7fe fb19 	bl	10001b64 <gpio_set_pulls>
10003532:	e7e9      	b.n	10003508 <gpio_rpi_configure+0x34>
		return -ENOTSUP;
10003534:	2086      	movs	r0, #134	; 0x86
10003536:	4240      	negs	r0, r0
10003538:	e7e7      	b.n	1000350a <gpio_rpi_configure+0x36>

1000353a <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
1000353a:	b510      	push	{r4, lr}
1000353c:	2200      	movs	r2, #0
1000353e:	2103      	movs	r1, #3
10003540:	200d      	movs	r0, #13
10003542:	f7fd fd47 	bl	10000fd4 <z_arm_irq_priority_set>
10003546:	200d      	movs	r0, #13
10003548:	f7fd fd38 	bl	10000fbc <arch_irq_enable>
1000354c:	bd10      	pop	{r4, pc}

1000354e <i2c_dw_runtime_configure>:
{
1000354e:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (I2C_SPEED_GET(dw->app_config)) {
10003550:	2407      	movs	r4, #7
	return (uint32_t)DEVICE_MMIO_GET(dev);
10003552:	6842      	ldr	r2, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10003554:	6903      	ldr	r3, [r0, #16]
	switch (I2C_SPEED_GET(dw->app_config)) {
10003556:	084d      	lsrs	r5, r1, #1
	return (uint32_t)DEVICE_MMIO_GET(dev);
10003558:	6812      	ldr	r2, [r2, #0]
	switch (I2C_SPEED_GET(dw->app_config)) {
1000355a:	402c      	ands	r4, r5
	dw->app_config = config;
1000355c:	6119      	str	r1, [r3, #16]
	switch (I2C_SPEED_GET(dw->app_config)) {
1000355e:	0768      	lsls	r0, r5, #29
10003560:	d409      	bmi.n	10003576 <i2c_dw_runtime_configure+0x28>
10003562:	2606      	movs	r6, #6
10003564:	0028      	movs	r0, r5
10003566:	4030      	ands	r0, r6
10003568:	4235      	tst	r5, r6
1000356a:	d129      	bne.n	100035c0 <i2c_dw_runtime_configure+0x72>
1000356c:	2c01      	cmp	r4, #1
1000356e:	d00c      	beq.n	1000358a <i2c_dw_runtime_configure+0x3c>
			rc = -EINVAL;
10003570:	2016      	movs	r0, #22
10003572:	4240      	negs	r0, r0
10003574:	e01f      	b.n	100035b6 <i2c_dw_runtime_configure+0x68>
	switch (I2C_SPEED_GET(dw->app_config)) {
10003576:	2c04      	cmp	r4, #4
10003578:	d1fa      	bne.n	10003570 <i2c_dw_runtime_configure+0x22>
		if (dw->support_hs_mode) {
1000357a:	0018      	movs	r0, r3
1000357c:	3008      	adds	r0, #8
1000357e:	7fc0      	ldrb	r0, [r0, #31]
10003580:	2800      	cmp	r0, #0
10003582:	d0f5      	beq.n	10003570 <i2c_dw_runtime_configure+0x22>
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)
10003584:	0014      	movs	r4, r2
10003586:	34a4      	adds	r4, #164	; 0xa4
10003588:	e01c      	b.n	100035c4 <i2c_dw_runtime_configure+0x76>
DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
1000358a:	0015      	movs	r5, r2
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
1000358c:	27fa      	movs	r7, #250	; 0xfa
1000358e:	35a0      	adds	r5, #160	; 0xa0
	return *(volatile uint32_t *)addr;
10003590:	682e      	ldr	r6, [r5, #0]
10003592:	007f      	lsls	r7, r7, #1
10003594:	3607      	adds	r6, #7
			value = I2C_STD_LCNT;
10003596:	003c      	movs	r4, r7
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
10003598:	42be      	cmp	r6, r7
1000359a:	d301      	bcc.n	100035a0 <i2c_dw_runtime_configure+0x52>
1000359c:	682c      	ldr	r4, [r5, #0]
			value = read_fs_spklen(reg_base) + 8;
1000359e:	3408      	adds	r4, #8
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
100035a0:	27c8      	movs	r7, #200	; 0xc8
100035a2:	682e      	ldr	r6, [r5, #0]
100035a4:	007f      	lsls	r7, r7, #1
100035a6:	3605      	adds	r6, #5
		dw->lcnt = value;
100035a8:	845c      	strh	r4, [r3, #34]	; 0x22
			value = I2C_STD_HCNT;
100035aa:	003c      	movs	r4, r7
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
100035ac:	42be      	cmp	r6, r7
100035ae:	d301      	bcc.n	100035b4 <i2c_dw_runtime_configure+0x66>
100035b0:	682c      	ldr	r4, [r5, #0]
			value = read_fs_spklen(reg_base) + 6;
100035b2:	3406      	adds	r4, #6
		dw->hcnt = value;
100035b4:	841c      	strh	r4, [r3, #32]
100035b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
	dw->app_config |= I2C_MODE_MASTER;
100035b8:	2210      	movs	r2, #16
100035ba:	4311      	orrs	r1, r2
100035bc:	6119      	str	r1, [r3, #16]
}
100035be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100035c0:	0014      	movs	r4, r2
100035c2:	34a0      	adds	r4, #160	; 0xa0
100035c4:	6825      	ldr	r5, [r4, #0]
				value = I2C_HS_LCNT;
100035c6:	2057      	movs	r0, #87	; 0x57
			if (I2C_HS_LCNT <= (read_hs_spklen(reg_base) + 7)) {
100035c8:	3507      	adds	r5, #7
100035ca:	2d56      	cmp	r5, #86	; 0x56
100035cc:	d901      	bls.n	100035d2 <i2c_dw_runtime_configure+0x84>
100035ce:	6820      	ldr	r0, [r4, #0]
				value = read_hs_spklen(reg_base) + 8;
100035d0:	3008      	adds	r0, #8
100035d2:	6825      	ldr	r5, [r4, #0]
			dw->lcnt = value;
100035d4:	8458      	strh	r0, [r3, #34]	; 0x22
			if (I2C_HS_HCNT <= (read_hs_spklen(reg_base) + 5)) {
100035d6:	3505      	adds	r5, #5
				value = I2C_HS_HCNT;
100035d8:	204b      	movs	r0, #75	; 0x4b
			if (I2C_HS_HCNT <= (read_hs_spklen(reg_base) + 5)) {
100035da:	2d4a      	cmp	r5, #74	; 0x4a
100035dc:	d901      	bls.n	100035e2 <i2c_dw_runtime_configure+0x94>
100035de:	6820      	ldr	r0, [r4, #0]
				value = read_hs_spklen(reg_base) + 6;
100035e0:	3006      	adds	r0, #6
			dw->hcnt = value;
100035e2:	8418      	strh	r0, [r3, #32]
	uint32_t	rc = 0U;
100035e4:	2000      	movs	r0, #0
100035e6:	e7e6      	b.n	100035b6 <i2c_dw_runtime_configure+0x68>

100035e8 <i2c_config_0>:
			      &i2c_##n##_runtime, &i2c_config_dw_##n,         \
			      POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,          \
			      &funcs);                                        \
	I2C_DW_IRQ_CONFIG(n)

DT_INST_FOREACH_STATUS_OKAY(I2C_DEVICE_INIT_DW)
100035e8:	b510      	push	{r4, lr}
100035ea:	2200      	movs	r2, #0
100035ec:	2103      	movs	r1, #3
100035ee:	2017      	movs	r0, #23
100035f0:	f7fd fcf0 	bl	10000fd4 <z_arm_irq_priority_set>
100035f4:	2017      	movs	r0, #23
100035f6:	f7fd fce1 	bl	10000fbc <arch_irq_enable>
100035fa:	bd10      	pop	{r4, pc}

100035fc <i2c_config_1>:
100035fc:	b510      	push	{r4, lr}
100035fe:	2200      	movs	r2, #0
10003600:	2103      	movs	r1, #3
10003602:	2018      	movs	r0, #24
10003604:	f7fd fce6 	bl	10000fd4 <z_arm_irq_priority_set>
10003608:	2018      	movs	r0, #24
1000360a:	f7fd fcd7 	bl	10000fbc <arch_irq_enable>
1000360e:	bd10      	pop	{r4, pc}

10003610 <i2c_dw_isr>:
	return (uint32_t)DEVICE_MMIO_GET(dev);
10003610:	6843      	ldr	r3, [r0, #4]
{
10003612:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (uint32_t)DEVICE_MMIO_GET(dev);
10003614:	681b      	ldr	r3, [r3, #0]
{
10003616:	b085      	sub	sp, #20
	return (uint32_t)DEVICE_MMIO_GET(dev);
10003618:	469c      	mov	ip, r3
1000361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
1000361c:	9001      	str	r0, [sp, #4]
1000361e:	9302      	str	r3, [sp, #8]
10003620:	4663      	mov	r3, ip
10003622:	681b      	ldr	r3, [r3, #0]
	if (test_bit_con_master_mode(reg_base)) {
10003624:	07db      	lsls	r3, r3, #31
10003626:	d510      	bpl.n	1000364a <i2c_dw_isr+0x3a>
		     DW_INTR_STAT_RX_OVER | DW_INTR_STAT_RX_UNDER) &
10003628:	224b      	movs	r2, #75	; 0x4b
	struct i2c_dw_dev_config * const dw = port->data;
1000362a:	6901      	ldr	r1, [r0, #16]
		if ((DW_INTR_STAT_TX_ABRT | DW_INTR_STAT_TX_OVER |
1000362c:	9802      	ldr	r0, [sp, #8]
1000362e:	2304      	movs	r3, #4
10003630:	4210      	tst	r0, r2
10003632:	d00c      	beq.n	1000364e <i2c_dw_isr+0x3e>
			dw->state = I2C_DW_CMD_ERROR;
10003634:	3105      	adds	r1, #5
10003636:	77cb      	strb	r3, [r1, #31]
	*(volatile uint32_t *)addr = data;
10003638:	2200      	movs	r2, #0
	struct i2c_dw_dev_config * const dw = dev->data;
1000363a:	9b01      	ldr	r3, [sp, #4]
1000363c:	6918      	ldr	r0, [r3, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000363e:	685b      	ldr	r3, [r3, #4]
10003640:	681b      	ldr	r3, [r3, #0]
10003642:	631a      	str	r2, [r3, #48]	; 0x30
	return *(volatile uint32_t *)addr;
10003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	z_impl_k_sem_give(sem);
10003646:	f7fe fd99 	bl	1000217c <z_impl_k_sem_give>
}
1000364a:	b005      	add	sp, #20
1000364c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (intr_stat.bits.rx_full) {
1000364e:	466a      	mov	r2, sp
10003650:	9802      	ldr	r0, [sp, #8]
	return temp & (1 << bit);
10003652:	2408      	movs	r4, #8
10003654:	7a12      	ldrb	r2, [r2, #8]
10003656:	4218      	tst	r0, r3
10003658:	d124      	bne.n	100036a4 <i2c_dw_isr+0x94>
		if ((dw->xfr_flags & I2C_MSG_RW_MASK)
1000365a:	1dcb      	adds	r3, r1, #7
1000365c:	7fd8      	ldrb	r0, [r3, #31]
1000365e:	2301      	movs	r3, #1
10003660:	0005      	movs	r5, r0
10003662:	401d      	ands	r5, r3
10003664:	4218      	tst	r0, r3
10003666:	d005      	beq.n	10003674 <i2c_dw_isr+0x64>
	uint32_t temp = *(volatile uint32_t *)addr;
10003668:	4663      	mov	r3, ip
1000366a:	6b18      	ldr	r0, [r3, #48]	; 0x30
	*(volatile uint32_t *)addr = temp | (1 << bit);
1000366c:	2310      	movs	r3, #16
1000366e:	4303      	orrs	r3, r0
10003670:	4660      	mov	r0, ip
10003672:	6303      	str	r3, [r0, #48]	; 0x30
		if (intr_stat.bits.tx_empty) {
10003674:	2310      	movs	r3, #16
10003676:	421a      	tst	r2, r3
10003678:	d124      	bne.n	100036c4 <i2c_dw_isr+0xb4>
		if (intr_stat.bits.stop_det) {
1000367a:	9b02      	ldr	r3, [sp, #8]
1000367c:	059b      	lsls	r3, r3, #22
1000367e:	d5e4      	bpl.n	1000364a <i2c_dw_isr+0x3a>
10003680:	4663      	mov	r3, ip
10003682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
			goto done;
10003684:	e7d8      	b.n	10003638 <i2c_dw_isr+0x28>
10003686:	4663      	mov	r3, ip
		dw->xfr_buf[0] = (uint8_t)read_cmd_data(reg_base);
10003688:	6948      	ldr	r0, [r1, #20]
1000368a:	691b      	ldr	r3, [r3, #16]
1000368c:	7003      	strb	r3, [r0, #0]
		dw->xfr_buf++;
1000368e:	694b      	ldr	r3, [r1, #20]
		dw->rx_pending--;
10003690:	69c8      	ldr	r0, [r1, #28]
		dw->xfr_buf++;
10003692:	3301      	adds	r3, #1
10003694:	614b      	str	r3, [r1, #20]
		dw->xfr_len--;
10003696:	698b      	ldr	r3, [r1, #24]
		dw->rx_pending--;
10003698:	3801      	subs	r0, #1
		dw->xfr_len--;
1000369a:	3b01      	subs	r3, #1
1000369c:	618b      	str	r3, [r1, #24]
		dw->rx_pending--;
1000369e:	61c8      	str	r0, [r1, #28]
		if (dw->xfr_len == 0U) {
100036a0:	2b00      	cmp	r3, #0
100036a2:	d006      	beq.n	100036b2 <i2c_dw_isr+0xa2>
	uint32_t temp = *(volatile uint32_t *)addr;
100036a4:	4663      	mov	r3, ip
100036a6:	6f18      	ldr	r0, [r3, #112]	; 0x70
	while (test_bit_status_rfne(reg_base) && (dw->xfr_len > 0)) {
100036a8:	698b      	ldr	r3, [r1, #24]
100036aa:	4220      	tst	r0, r4
100036ac:	d007      	beq.n	100036be <i2c_dw_isr+0xae>
100036ae:	2b00      	cmp	r3, #0
100036b0:	d1e9      	bne.n	10003686 <i2c_dw_isr+0x76>
		dw->state &= ~I2C_DW_CMD_RECV;
100036b2:	2402      	movs	r4, #2
100036b4:	1d48      	adds	r0, r1, #5
100036b6:	7fc3      	ldrb	r3, [r0, #31]
100036b8:	43a3      	bics	r3, r4
100036ba:	77c3      	strb	r3, [r0, #31]
		return;
100036bc:	e7cd      	b.n	1000365a <i2c_dw_isr+0x4a>
	if (dw->xfr_len == 0U) {
100036be:	2b00      	cmp	r3, #0
100036c0:	d1cb      	bne.n	1000365a <i2c_dw_isr+0x4a>
100036c2:	e7f6      	b.n	100036b2 <i2c_dw_isr+0xa2>
	return (uint32_t)DEVICE_MMIO_GET(dev);
100036c4:	9801      	ldr	r0, [sp, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
100036c6:	9a01      	ldr	r2, [sp, #4]
	return (uint32_t)DEVICE_MMIO_GET(dev);
100036c8:	6840      	ldr	r0, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
100036ca:	6912      	ldr	r2, [r2, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
100036cc:	6804      	ldr	r4, [r0, #0]
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
100036ce:	2d00      	cmp	r5, #0
100036d0:	d13f      	bne.n	10003752 <i2c_dw_isr+0x142>
	if (dw->xfr_len == 0U) {
100036d2:	6990      	ldr	r0, [r2, #24]
100036d4:	2800      	cmp	r0, #0
100036d6:	d136      	bne.n	10003746 <i2c_dw_isr+0x136>
	uint32_t temp = *(volatile uint32_t *)addr;
100036d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
		dw->state &= ~I2C_DW_CMD_SEND;
100036da:	3205      	adds	r2, #5
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
100036dc:	4398      	bics	r0, r3
100036de:	6320      	str	r0, [r4, #48]	; 0x30
100036e0:	2001      	movs	r0, #1
100036e2:	7fd3      	ldrb	r3, [r2, #31]
100036e4:	4383      	bics	r3, r0
100036e6:	77d3      	strb	r3, [r2, #31]
			if (((dw->xfr_len == 0U)
100036e8:	698b      	ldr	r3, [r1, #24]
100036ea:	2b00      	cmp	r3, #0
100036ec:	d103      	bne.n	100036f6 <i2c_dw_isr+0xe6>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
100036ee:	3107      	adds	r1, #7
100036f0:	7fcb      	ldrb	r3, [r1, #31]
100036f2:	079b      	lsls	r3, r3, #30
100036f4:	d5a0      	bpl.n	10003638 <i2c_dw_isr+0x28>
			    || (ret != 0)) {
100036f6:	2d00      	cmp	r5, #0
100036f8:	d0bf      	beq.n	1000367a <i2c_dw_isr+0x6a>
100036fa:	e79d      	b.n	10003638 <i2c_dw_isr+0x28>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
100036fc:	6995      	ldr	r5, [r2, #24]
100036fe:	2d00      	cmp	r5, #0
10003700:	d025      	beq.n	1000374e <i2c_dw_isr+0x13e>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10003702:	2704      	movs	r7, #4
		data = dw->xfr_buf[0];
10003704:	6953      	ldr	r3, [r2, #20]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10003706:	1dd6      	adds	r6, r2, #7
		data = dw->xfr_buf[0];
10003708:	9303      	str	r3, [sp, #12]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
1000370a:	7ff0      	ldrb	r0, [r6, #31]
		data = dw->xfr_buf[0];
1000370c:	781b      	ldrb	r3, [r3, #0]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
1000370e:	4238      	tst	r0, r7
10003710:	d005      	beq.n	1000371e <i2c_dw_isr+0x10e>
			data |= IC_DATA_CMD_RESTART;
10003712:	2780      	movs	r7, #128	; 0x80
10003714:	00ff      	lsls	r7, r7, #3
10003716:	433b      	orrs	r3, r7
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
10003718:	2704      	movs	r7, #4
1000371a:	43b8      	bics	r0, r7
1000371c:	77f0      	strb	r0, [r6, #31]
		if ((dw->xfr_len == 1U) && (dw->xfr_flags & I2C_MSG_STOP)) {
1000371e:	2d01      	cmp	r5, #1
10003720:	d107      	bne.n	10003732 <i2c_dw_isr+0x122>
10003722:	1dd0      	adds	r0, r2, #7
10003724:	7fc0      	ldrb	r0, [r0, #31]
10003726:	3501      	adds	r5, #1
10003728:	4228      	tst	r0, r5
1000372a:	d002      	beq.n	10003732 <i2c_dw_isr+0x122>
			data |= IC_DATA_CMD_STOP;
1000372c:	2080      	movs	r0, #128	; 0x80
1000372e:	0080      	lsls	r0, r0, #2
10003730:	4303      	orrs	r3, r0
	*(volatile uint32_t *)addr = data;
10003732:	6123      	str	r3, [r4, #16]
		dw->xfr_len--;
10003734:	6993      	ldr	r3, [r2, #24]
10003736:	3b01      	subs	r3, #1
10003738:	6193      	str	r3, [r2, #24]
		dw->xfr_buf++;
1000373a:	9b03      	ldr	r3, [sp, #12]
1000373c:	3301      	adds	r3, #1
1000373e:	6153      	str	r3, [r2, #20]
	uint32_t temp = *(volatile uint32_t *)addr;
10003740:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		if (test_bit_intr_stat_tx_abrt(reg_base)) {
10003742:	065b      	lsls	r3, r3, #25
10003744:	d456      	bmi.n	100037f4 <i2c_dw_isr+0x1e4>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
10003746:	2002      	movs	r0, #2
10003748:	6f23      	ldr	r3, [r4, #112]	; 0x70
1000374a:	4203      	tst	r3, r0
1000374c:	d1d6      	bne.n	100036fc <i2c_dw_isr+0xec>
	return 0;
1000374e:	2500      	movs	r5, #0
10003750:	e7ca      	b.n	100036e8 <i2c_dw_isr+0xd8>
	if (dw->request_bytes == 0U) {
10003752:	1d90      	adds	r0, r2, #6
10003754:	7fc5      	ldrb	r5, [r0, #31]
10003756:	2d00      	cmp	r5, #0
10003758:	d103      	bne.n	10003762 <i2c_dw_isr+0x152>
	uint32_t temp = *(volatile uint32_t *)addr;
1000375a:	6b22      	ldr	r2, [r4, #48]	; 0x30
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
1000375c:	439a      	bics	r2, r3
1000375e:	6322      	str	r2, [r4, #48]	; 0x30
DEFINE_CLEAR_BIT_OP(intr_mask_tx_empty, DW_IC_REG_INTR_MASK, DW_IC_INTR_MASK_TX_EMPTY_BIT)
10003760:	e7c2      	b.n	100036e8 <i2c_dw_isr+0xd8>
DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
10003762:	0023      	movs	r3, r4
10003764:	33f4      	adds	r3, #244	; 0xf4
	return *(volatile uint32_t *)addr;
10003766:	681b      	ldr	r3, [r3, #0]
10003768:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
1000376a:	041e      	lsls	r6, r3, #16
1000376c:	0e36      	lsrs	r6, r6, #24
1000376e:	3601      	adds	r6, #1
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
10003770:	69d7      	ldr	r7, [r2, #28]
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
10003772:	b2f6      	uxtb	r6, r6
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
10003774:	1a30      	subs	r0, r6, r0
10003776:	1bc0      	subs	r0, r0, r7
10003778:	b247      	sxtb	r7, r0
	if (rx_empty < 0) {
1000377a:	0600      	lsls	r0, r0, #24
1000377c:	d4e7      	bmi.n	1000374e <i2c_dw_isr+0x13e>
	tx_buffer_depth = ic_comp_param_1.bits.tx_buffer_depth + 1;
1000377e:	021b      	lsls	r3, r3, #8
10003780:	6f60      	ldr	r0, [r4, #116]	; 0x74
10003782:	0e1b      	lsrs	r3, r3, #24
10003784:	3301      	adds	r3, #1
	tx_empty = tx_buffer_depth - read_txflr(reg_base);
10003786:	1a1b      	subs	r3, r3, r0
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
10003788:	b2d8      	uxtb	r0, r3
	cnt = MIN(rx_buffer_depth, dw->request_bytes);
1000378a:	1c2b      	adds	r3, r5, #0
1000378c:	42b5      	cmp	r5, r6
1000378e:	d900      	bls.n	10003792 <i2c_dw_isr+0x182>
10003790:	1c33      	adds	r3, r6, #0
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
10003792:	b2dd      	uxtb	r5, r3
10003794:	0003      	movs	r3, r0
10003796:	42a8      	cmp	r0, r5
10003798:	dd00      	ble.n	1000379c <i2c_dw_isr+0x18c>
1000379a:	002b      	movs	r3, r5
1000379c:	42bb      	cmp	r3, r7
1000379e:	dd00      	ble.n	100037a2 <i2c_dw_isr+0x192>
100037a0:	003b      	movs	r3, r7
		if (dw->xfr_flags & I2C_MSG_RESTART) {
100037a2:	2604      	movs	r6, #4
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
100037a4:	b2db      	uxtb	r3, r3
	while (cnt > 0) {
100037a6:	2b00      	cmp	r3, #0
100037a8:	d0d1      	beq.n	1000374e <i2c_dw_isr+0x13e>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
100037aa:	1dd5      	adds	r5, r2, #7
100037ac:	7fe8      	ldrb	r0, [r5, #31]
100037ae:	4230      	tst	r0, r6
100037b0:	d01d      	beq.n	100037ee <i2c_dw_isr+0x1de>
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
100037b2:	43b0      	bics	r0, r6
100037b4:	77e8      	strb	r0, [r5, #31]
			data |= IC_DATA_CMD_RESTART;
100037b6:	20a0      	movs	r0, #160	; 0xa0
100037b8:	00c0      	lsls	r0, r0, #3
		if ((dw->xfr_flags & I2C_MSG_STOP)
100037ba:	2702      	movs	r7, #2
100037bc:	7fed      	ldrb	r5, [r5, #31]
100037be:	423d      	tst	r5, r7
100037c0:	d006      	beq.n	100037d0 <i2c_dw_isr+0x1c0>
		    && (dw->request_bytes == 1U)) {
100037c2:	1d95      	adds	r5, r2, #6
100037c4:	7fed      	ldrb	r5, [r5, #31]
100037c6:	2d01      	cmp	r5, #1
100037c8:	d102      	bne.n	100037d0 <i2c_dw_isr+0x1c0>
			data |= IC_DATA_CMD_STOP;
100037ca:	2580      	movs	r5, #128	; 0x80
100037cc:	00ad      	lsls	r5, r5, #2
100037ce:	4328      	orrs	r0, r5
100037d0:	2710      	movs	r7, #16
	uint32_t temp = *(volatile uint32_t *)addr;
100037d2:	6b25      	ldr	r5, [r4, #48]	; 0x30
		cnt--;
100037d4:	3b01      	subs	r3, #1
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
100037d6:	43bd      	bics	r5, r7
100037d8:	6325      	str	r5, [r4, #48]	; 0x30
	*(volatile uint32_t *)addr = data;
100037da:	6120      	str	r0, [r4, #16]
		dw->rx_pending++;
100037dc:	69d0      	ldr	r0, [r2, #28]
		dw->request_bytes--;
100037de:	1d95      	adds	r5, r2, #6
		dw->rx_pending++;
100037e0:	3001      	adds	r0, #1
100037e2:	61d0      	str	r0, [r2, #28]
		dw->request_bytes--;
100037e4:	7fe8      	ldrb	r0, [r5, #31]
		cnt--;
100037e6:	b2db      	uxtb	r3, r3
		dw->request_bytes--;
100037e8:	3801      	subs	r0, #1
100037ea:	77e8      	strb	r0, [r5, #31]
		cnt--;
100037ec:	e7db      	b.n	100037a6 <i2c_dw_isr+0x196>
		data = IC_DATA_CMD_CMD;
100037ee:	2080      	movs	r0, #128	; 0x80
100037f0:	0040      	lsls	r0, r0, #1
100037f2:	e7e2      	b.n	100037ba <i2c_dw_isr+0x1aa>
			return -EIO;
100037f4:	2505      	movs	r5, #5
100037f6:	426d      	negs	r5, r5
100037f8:	e776      	b.n	100036e8 <i2c_dw_isr+0xd8>

100037fa <uart_rpi_poll_in>:
	uart_hw_t * const uart_hw = config->uart_regs;
100037fa:	6843      	ldr	r3, [r0, #4]
{
100037fc:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
100037fe:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10003800:	2210      	movs	r2, #16
10003802:	699c      	ldr	r4, [r3, #24]
10003804:	0020      	movs	r0, r4
10003806:	4010      	ands	r0, r2
10003808:	4214      	tst	r4, r2
1000380a:	d102      	bne.n	10003812 <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
1000380c:	681b      	ldr	r3, [r3, #0]
1000380e:	700b      	strb	r3, [r1, #0]
}
10003810:	bd10      	pop	{r4, pc}
		return -1;
10003812:	2001      	movs	r0, #1
10003814:	4240      	negs	r0, r0
10003816:	e7fb      	b.n	10003810 <uart_rpi_poll_in+0x16>

10003818 <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10003818:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
1000381a:	6843      	ldr	r3, [r0, #4]
1000381c:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
1000381e:	6998      	ldr	r0, [r3, #24]
10003820:	4210      	tst	r0, r2
10003822:	d1fc      	bne.n	1000381e <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
10003824:	6019      	str	r1, [r3, #0]
}
10003826:	4770      	bx	lr

10003828 <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
10003828:	6843      	ldr	r3, [r0, #4]
1000382a:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
1000382c:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
1000382e:	0518      	lsls	r0, r3, #20
10003830:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
10003832:	055a      	lsls	r2, r3, #21
10003834:	d501      	bpl.n	1000383a <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
10003836:	2208      	movs	r2, #8
10003838:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
1000383a:	059a      	lsls	r2, r3, #22
1000383c:	d501      	bpl.n	10003842 <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
1000383e:	2202      	movs	r2, #2
10003840:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
10003842:	05db      	lsls	r3, r3, #23
10003844:	d501      	bpl.n	1000384a <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
10003846:	2304      	movs	r3, #4
10003848:	4318      	orrs	r0, r3
}
1000384a:	4770      	bx	lr

1000384c <uart_rpi_fifo_fill>:
	uart_hw_t * const uart_hw = config->uart_regs;
1000384c:	6843      	ldr	r3, [r0, #4]
{
1000384e:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10003850:	2000      	movs	r0, #0
10003852:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10003854:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10003856:	699c      	ldr	r4, [r3, #24]
10003858:	422c      	tst	r4, r5
1000385a:	d102      	bne.n	10003862 <uart_rpi_fifo_fill+0x16>
1000385c:	1a14      	subs	r4, r2, r0
1000385e:	2c00      	cmp	r4, #0
10003860:	dc00      	bgt.n	10003864 <uart_rpi_fifo_fill+0x18>
}
10003862:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
10003864:	5c0c      	ldrb	r4, [r1, r0]
10003866:	3001      	adds	r0, #1
10003868:	601c      	str	r4, [r3, #0]
1000386a:	e7f4      	b.n	10003856 <uart_rpi_fifo_fill+0xa>

1000386c <uart_rpi_fifo_read>:
	uart_hw_t * const uart_hw = config->uart_regs;
1000386c:	6843      	ldr	r3, [r0, #4]
{
1000386e:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10003870:	2000      	movs	r0, #0
10003872:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10003874:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10003876:	699c      	ldr	r4, [r3, #24]
10003878:	422c      	tst	r4, r5
1000387a:	d102      	bne.n	10003882 <uart_rpi_fifo_read+0x16>
1000387c:	1a14      	subs	r4, r2, r0
1000387e:	2c00      	cmp	r4, #0
10003880:	dc00      	bgt.n	10003884 <uart_rpi_fifo_read+0x18>
}
10003882:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
10003884:	681c      	ldr	r4, [r3, #0]
10003886:	540c      	strb	r4, [r1, r0]
10003888:	3001      	adds	r0, #1
1000388a:	e7f4      	b.n	10003876 <uart_rpi_fifo_read+0xa>

1000388c <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
1000388c:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
1000388e:	6843      	ldr	r3, [r0, #4]
10003890:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10003892:	6b99      	ldr	r1, [r3, #56]	; 0x38
10003894:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10003896:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10003898:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
1000389a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000389c:	438a      	bics	r2, r1
1000389e:	635a      	str	r2, [r3, #52]	; 0x34
}
100038a0:	4770      	bx	lr

100038a2 <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
100038a2:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100038a4:	6843      	ldr	r3, [r0, #4]
100038a6:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
100038a8:	6b93      	ldr	r3, [r2, #56]	; 0x38
100038aa:	438b      	bics	r3, r1
100038ac:	6393      	str	r3, [r2, #56]	; 0x38
}
100038ae:	4770      	bx	lr

100038b0 <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
100038b0:	6843      	ldr	r3, [r0, #4]
100038b2:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
100038b4:	6c18      	ldr	r0, [r3, #64]	; 0x40
100038b6:	0680      	lsls	r0, r0, #26
100038b8:	0fc0      	lsrs	r0, r0, #31
}
100038ba:	4770      	bx	lr

100038bc <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100038bc:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100038be:	6843      	ldr	r3, [r0, #4]
100038c0:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100038c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
100038c4:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
100038c6:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100038c8:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
100038ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100038cc:	438a      	bics	r2, r1
100038ce:	635a      	str	r2, [r3, #52]	; 0x34
}
100038d0:	4770      	bx	lr

100038d2 <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
100038d2:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100038d4:	6843      	ldr	r3, [r0, #4]
100038d6:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
100038d8:	6b93      	ldr	r3, [r2, #56]	; 0x38
100038da:	438b      	bics	r3, r1
100038dc:	6393      	str	r3, [r2, #56]	; 0x38
}
100038de:	4770      	bx	lr

100038e0 <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
100038e0:	6843      	ldr	r3, [r0, #4]
100038e2:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
100038e4:	6998      	ldr	r0, [r3, #24]
100038e6:	0600      	lsls	r0, r0, #24
100038e8:	0fc0      	lsrs	r0, r0, #31
}
100038ea:	4770      	bx	lr

100038ec <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
100038ec:	6843      	ldr	r3, [r0, #4]
100038ee:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
100038f0:	6c18      	ldr	r0, [r3, #64]	; 0x40
100038f2:	06c0      	lsls	r0, r0, #27
100038f4:	0fc0      	lsrs	r0, r0, #31
}
100038f6:	4770      	bx	lr

100038f8 <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
100038f8:	6843      	ldr	r3, [r0, #4]
100038fa:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
100038fc:	23f8      	movs	r3, #248	; 0xf8
100038fe:	6b91      	ldr	r1, [r2, #56]	; 0x38
10003900:	00db      	lsls	r3, r3, #3
10003902:	430b      	orrs	r3, r1
10003904:	6393      	str	r3, [r2, #56]	; 0x38
}
10003906:	4770      	bx	lr

10003908 <uart_rpi_irq_update>:
}

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
10003908:	2001      	movs	r0, #1
1000390a:	4770      	bx	lr

1000390c <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
1000390c:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
1000390e:	6059      	str	r1, [r3, #4]
	data->irq_cb_data = cb_data;
10003910:	609a      	str	r2, [r3, #8]
}
10003912:	4770      	bx	lr

10003914 <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
	struct uart_rpi_data * const data = dev->data;
10003914:	6902      	ldr	r2, [r0, #16]
{
10003916:	b510      	push	{r4, lr}

	if (data->irq_cb) {
10003918:	6853      	ldr	r3, [r2, #4]
1000391a:	2b00      	cmp	r3, #0
1000391c:	d001      	beq.n	10003922 <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
1000391e:	6891      	ldr	r1, [r2, #8]
10003920:	4798      	blx	r3
	}
}
10003922:	bd10      	pop	{r4, pc}

10003924 <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
10003924:	b510      	push	{r4, lr}
10003926:	2200      	movs	r2, #0
10003928:	2103      	movs	r1, #3
1000392a:	2014      	movs	r0, #20
1000392c:	f7fd fb52 	bl	10000fd4 <z_arm_irq_priority_set>
10003930:	2014      	movs	r0, #20
10003932:	f7fd fb43 	bl	10000fbc <arch_irq_enable>
10003936:	bd10      	pop	{r4, pc}

10003938 <uart1_rpi_irq_config_func>:
10003938:	b510      	push	{r4, lr}
1000393a:	2200      	movs	r2, #0
1000393c:	2103      	movs	r1, #3
1000393e:	2015      	movs	r0, #21
10003940:	f7fd fb48 	bl	10000fd4 <z_arm_irq_priority_set>
10003944:	2015      	movs	r0, #21
10003946:	f7fd fb39 	bl	10000fbc <arch_irq_enable>
1000394a:	bd10      	pop	{r4, pc}

1000394c <uart_rpi_irq_is_pending>:
{
1000394c:	b510      	push	{r4, lr}
1000394e:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10003950:	f7ff ffcc 	bl	100038ec <uart_rpi_irq_rx_ready>
10003954:	0003      	movs	r3, r0
10003956:	2001      	movs	r0, #1
10003958:	2b00      	cmp	r3, #0
1000395a:	d104      	bne.n	10003966 <uart_rpi_irq_is_pending+0x1a>
1000395c:	0020      	movs	r0, r4
1000395e:	f7ff ffa7 	bl	100038b0 <uart_rpi_irq_tx_ready>
10003962:	1e43      	subs	r3, r0, #1
10003964:	4198      	sbcs	r0, r3
}
10003966:	bd10      	pop	{r4, pc}

10003968 <uart_rpi_init>:
{
10003968:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
1000396a:	6845      	ldr	r5, [r0, #4]
{
1000396c:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
1000396e:	682b      	ldr	r3, [r5, #0]
{
10003970:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
10003972:	6907      	ldr	r7, [r0, #16]
	ret = pinctrl_lookup_state(config, id, &state);
10003974:	2100      	movs	r1, #0
10003976:	68a8      	ldr	r0, [r5, #8]
10003978:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
1000397a:	686e      	ldr	r6, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
1000397c:	9301      	str	r3, [sp, #4]
1000397e:	f7fd ff69 	bl	10001854 <pinctrl_lookup_state>
	if (ret < 0) {
10003982:	2800      	cmp	r0, #0
10003984:	db1a      	blt.n	100039bc <uart_rpi_init+0x54>
	return pinctrl_apply_state_direct(config, state);
10003986:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10003988:	2200      	movs	r2, #0
1000398a:	7919      	ldrb	r1, [r3, #4]
1000398c:	6818      	ldr	r0, [r3, #0]
1000398e:	f000 f81a 	bl	100039c6 <pinctrl_configure_pins>
	if (ret < 0) {
10003992:	2800      	cmp	r0, #0
10003994:	db12      	blt.n	100039bc <uart_rpi_init+0x54>
	baudrate = uart_init(uart_inst, data->baudrate);
10003996:	6839      	ldr	r1, [r7, #0]
10003998:	9801      	ldr	r0, [sp, #4]
1000399a:	f7fe f98f 	bl	10001cbc <uart_init>
	if (baudrate <= 0) {
1000399e:	2800      	cmp	r0, #0
100039a0:	dd0e      	ble.n	100039c0 <uart_rpi_init+0x58>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
100039a2:	0032      	movs	r2, r6
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100039a4:	23c0      	movs	r3, #192	; 0xc0
100039a6:	322c      	adds	r2, #44	; 0x2c
100039a8:	019b      	lsls	r3, r3, #6
100039aa:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
100039ac:	2700      	movs	r7, #0
100039ae:	2210      	movs	r2, #16
	config->irq_config_func(dev);
100039b0:	0020      	movs	r0, r4
100039b2:	601a      	str	r2, [r3, #0]
100039b4:	696b      	ldr	r3, [r5, #20]
	uart_hw->dr = 0U;
100039b6:	6037      	str	r7, [r6, #0]
	config->irq_config_func(dev);
100039b8:	4798      	blx	r3
	return 0;
100039ba:	0038      	movs	r0, r7
}
100039bc:	b005      	add	sp, #20
100039be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
100039c0:	2016      	movs	r0, #22
100039c2:	4240      	negs	r0, r0
100039c4:	e7fa      	b.n	100039bc <uart_rpi_init+0x54>

100039c6 <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
100039c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100039c8:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
100039ca:	2601      	movs	r6, #1
100039cc:	008d      	lsls	r5, r1, #2
100039ce:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
100039d0:	42ac      	cmp	r4, r5
100039d2:	d101      	bne.n	100039d8 <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
100039d4:	2000      	movs	r0, #0
100039d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
100039d8:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
100039da:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
100039dc:	06c0      	lsls	r0, r0, #27
100039de:	0ec0      	lsrs	r0, r0, #27
100039e0:	f000 f8b5 	bl	10003b4e <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
100039e4:	8821      	ldrh	r1, [r4, #0]
100039e6:	7820      	ldrb	r0, [r4, #0]
100039e8:	05c9      	lsls	r1, r1, #23
100039ea:	06c0      	lsls	r0, r0, #27
100039ec:	0f09      	lsrs	r1, r1, #28
100039ee:	0ec0      	lsrs	r0, r0, #27
100039f0:	f7fe f8a2 	bl	10001b38 <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
100039f4:	7861      	ldrb	r1, [r4, #1]
100039f6:	7820      	ldrb	r0, [r4, #0]
100039f8:	09ca      	lsrs	r2, r1, #7
100039fa:	06c0      	lsls	r0, r0, #27
100039fc:	0649      	lsls	r1, r1, #25
100039fe:	0fc9      	lsrs	r1, r1, #31
10003a00:	0ec0      	lsrs	r0, r0, #27
10003a02:	f7fe f8af 	bl	10001b64 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
10003a06:	7861      	ldrb	r1, [r4, #1]
10003a08:	7820      	ldrb	r0, [r4, #0]
10003a0a:	06c9      	lsls	r1, r1, #27
10003a0c:	06c0      	lsls	r0, r0, #27
10003a0e:	0f09      	lsrs	r1, r1, #28
10003a10:	0ec0      	lsrs	r0, r0, #27
10003a12:	f7fe f8d9 	bl	10001bc8 <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10003a16:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10003a18:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10003a1a:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10003a1c:	06c0      	lsls	r0, r0, #27
10003a1e:	4031      	ands	r1, r6
10003a20:	0ec0      	lsrs	r0, r0, #27
10003a22:	f7fe f8c3 	bl	10001bac <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
10003a26:	78a1      	ldrb	r1, [r4, #2]
10003a28:	7820      	ldrb	r0, [r4, #0]
10003a2a:	0789      	lsls	r1, r1, #30
10003a2c:	06c0      	lsls	r0, r0, #27
10003a2e:	0fc9      	lsrs	r1, r1, #31
10003a30:	0ec0      	lsrs	r0, r0, #27
10003a32:	f7fe f8ad 	bl	10001b90 <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
10003a36:	78a1      	ldrb	r1, [r4, #2]
10003a38:	7820      	ldrb	r0, [r4, #0]
10003a3a:	07c9      	lsls	r1, r1, #31
10003a3c:	06c0      	lsls	r0, r0, #27
10003a3e:	0fc9      	lsrs	r1, r1, #31
10003a40:	0ec0      	lsrs	r0, r0, #27
10003a42:	f7fe f8ff 	bl	10001c44 <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
10003a46:	003c      	movs	r4, r7
10003a48:	e7c2      	b.n	100039d0 <pinctrl_configure_pins+0xa>

10003a4a <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
10003a4a:	2000      	movs	r0, #0
10003a4c:	4770      	bx	lr

10003a4e <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
10003a4e:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
10003a50:	7900      	ldrb	r0, [r0, #4]
10003a52:	2802      	cmp	r0, #2
10003a54:	d008      	beq.n	10003a68 <reset_rpi_read_register.isra.0+0x1a>
10003a56:	2804      	cmp	r0, #4
10003a58:	d009      	beq.n	10003a6e <reset_rpi_read_register.isra.0+0x20>
10003a5a:	2801      	cmp	r0, #1
10003a5c:	d10a      	bne.n	10003a74 <reset_rpi_read_register.isra.0+0x26>
		*value = sys_read8(base_address + offset);
10003a5e:	18c9      	adds	r1, r1, r3
	return *(volatile uint8_t *)addr;
10003a60:	780b      	ldrb	r3, [r1, #0]
	return 0;
10003a62:	2000      	movs	r0, #0
		*value = sys_read32(base_address + offset);
10003a64:	6013      	str	r3, [r2, #0]
}
10003a66:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
10003a68:	18c9      	adds	r1, r1, r3
	return *(volatile uint16_t *)addr;
10003a6a:	880b      	ldrh	r3, [r1, #0]
10003a6c:	e7f9      	b.n	10003a62 <reset_rpi_read_register.isra.0+0x14>
		*value = sys_read32(base_address + offset);
10003a6e:	18c9      	adds	r1, r1, r3
	return *(volatile uint32_t *)addr;
10003a70:	680b      	ldr	r3, [r1, #0]
10003a72:	e7f6      	b.n	10003a62 <reset_rpi_read_register.isra.0+0x14>
	switch (config->reg_width) {
10003a74:	2016      	movs	r0, #22
10003a76:	4240      	negs	r0, r0
10003a78:	e7f5      	b.n	10003a66 <reset_rpi_read_register.isra.0+0x18>

10003a7a <reset_rpi_update.isra.0>:
static int reset_rpi_update(const struct device *dev, uint32_t id, uint8_t assert)
10003a7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003a7c:	0005      	movs	r5, r0
10003a7e:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10003a80:	7929      	ldrb	r1, [r5, #4]
static int reset_rpi_update(const struct device *dev, uint32_t id, uint8_t assert)
10003a82:	0016      	movs	r6, r2
	offset = id / (config->reg_width * CHAR_BIT);
10003a84:	00c9      	lsls	r1, r1, #3
10003a86:	f7fc fbe9 	bl	1000025c <__aeabi_uidivmod>
10003a8a:	aa01      	add	r2, sp, #4
10003a8c:	0004      	movs	r4, r0
10003a8e:	000f      	movs	r7, r1
	ret = reset_rpi_read_register(dev, offset, &value);
10003a90:	b281      	uxth	r1, r0
10003a92:	0028      	movs	r0, r5
10003a94:	f7ff ffdb 	bl	10003a4e <reset_rpi_read_register.isra.0>
	if (ret) {
10003a98:	2800      	cmp	r0, #0
10003a9a:	d116      	bne.n	10003aca <reset_rpi_update.isra.0+0x50>
		value |= BIT(regbit);
10003a9c:	2201      	movs	r2, #1
10003a9e:	9901      	ldr	r1, [sp, #4]
10003aa0:	b2ff      	uxtb	r7, r7
10003aa2:	40ba      	lsls	r2, r7
		value &= ~BIT(regbit);
10003aa4:	000b      	movs	r3, r1
	if (assert ^ config->active_low) {
10003aa6:	796f      	ldrb	r7, [r5, #5]
		value &= ~BIT(regbit);
10003aa8:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
10003aaa:	42b7      	cmp	r7, r6
10003aac:	d001      	beq.n	10003ab2 <reset_rpi_update.isra.0+0x38>
		value |= BIT(regbit);
10003aae:	0013      	movs	r3, r2
10003ab0:	430b      	orrs	r3, r1
	switch (config->reg_width) {
10003ab2:	7929      	ldrb	r1, [r5, #4]
	uint32_t base_address = config->base_address;
10003ab4:	68aa      	ldr	r2, [r5, #8]
	switch (config->reg_width) {
10003ab6:	2902      	cmp	r1, #2
10003ab8:	d008      	beq.n	10003acc <reset_rpi_update.isra.0+0x52>
10003aba:	2904      	cmp	r1, #4
10003abc:	d00b      	beq.n	10003ad6 <reset_rpi_update.isra.0+0x5c>
10003abe:	2901      	cmp	r1, #1
10003ac0:	d10d      	bne.n	10003ade <reset_rpi_update.isra.0+0x64>
		sys_write8(value, base_address + offset);
10003ac2:	b2a4      	uxth	r4, r4
10003ac4:	b2db      	uxtb	r3, r3
10003ac6:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
10003ac8:	7023      	strb	r3, [r4, #0]
}
10003aca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
10003acc:	b2a4      	uxth	r4, r4
10003ace:	b29b      	uxth	r3, r3
10003ad0:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
10003ad2:	8023      	strh	r3, [r4, #0]
}
10003ad4:	e7f9      	b.n	10003aca <reset_rpi_update.isra.0+0x50>
		sys_write32(value, base_address + offset);
10003ad6:	b2a4      	uxth	r4, r4
10003ad8:	18a4      	adds	r4, r4, r2
	*(volatile uint32_t *)addr = data;
10003ada:	6023      	str	r3, [r4, #0]
}
10003adc:	e7f5      	b.n	10003aca <reset_rpi_update.isra.0+0x50>
	switch (config->reg_width) {
10003ade:	2016      	movs	r0, #22
10003ae0:	4240      	negs	r0, r0
10003ae2:	e7f2      	b.n	10003aca <reset_rpi_update.isra.0+0x50>

10003ae4 <reset_rpi_deassert>:
{
10003ae4:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
10003ae6:	2200      	movs	r2, #0
10003ae8:	6840      	ldr	r0, [r0, #4]
10003aea:	f7ff ffc6 	bl	10003a7a <reset_rpi_update.isra.0>
}
10003aee:	bd10      	pop	{r4, pc}

10003af0 <reset_rpi_assert>:
{
10003af0:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
10003af2:	2201      	movs	r2, #1
10003af4:	6840      	ldr	r0, [r0, #4]
10003af6:	f7ff ffc0 	bl	10003a7a <reset_rpi_update.isra.0>
}
10003afa:	bd10      	pop	{r4, pc}

10003afc <reset_rpi_toggle>:
{
10003afc:	b570      	push	{r4, r5, r6, lr}
10003afe:	0004      	movs	r4, r0
10003b00:	000d      	movs	r5, r1
	ret = reset_rpi_assert(dev, id);
10003b02:	f7ff fff5 	bl	10003af0 <reset_rpi_assert>
	if (ret) {
10003b06:	2800      	cmp	r0, #0
10003b08:	d103      	bne.n	10003b12 <reset_rpi_toggle+0x16>
	return reset_rpi_deassert(dev, id);
10003b0a:	0029      	movs	r1, r5
10003b0c:	0020      	movs	r0, r4
10003b0e:	f7ff ffe9 	bl	10003ae4 <reset_rpi_deassert>
}
10003b12:	bd70      	pop	{r4, r5, r6, pc}

10003b14 <reset_rpi_status>:
{
10003b14:	0003      	movs	r3, r0
10003b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
10003b18:	685e      	ldr	r6, [r3, #4]
{
10003b1a:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10003b1c:	7931      	ldrb	r1, [r6, #4]
{
10003b1e:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
10003b20:	00c9      	lsls	r1, r1, #3
10003b22:	f7fc fb9b 	bl	1000025c <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
10003b26:	aa01      	add	r2, sp, #4
10003b28:	000d      	movs	r5, r1
10003b2a:	b281      	uxth	r1, r0
10003b2c:	0030      	movs	r0, r6
10003b2e:	f7ff ff8e 	bl	10003a4e <reset_rpi_read_register.isra.0>
	if (ret) {
10003b32:	2800      	cmp	r0, #0
10003b34:	d10a      	bne.n	10003b4c <reset_rpi_status+0x38>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
10003b36:	9a01      	ldr	r2, [sp, #4]
10003b38:	b2ed      	uxtb	r5, r5
10003b3a:	40ea      	lsrs	r2, r5
10003b3c:	2301      	movs	r3, #1
10003b3e:	4393      	bics	r3, r2
10003b40:	001a      	movs	r2, r3
10003b42:	7973      	ldrb	r3, [r6, #5]
10003b44:	4259      	negs	r1, r3
10003b46:	414b      	adcs	r3, r1
10003b48:	4053      	eors	r3, r2
10003b4a:	7023      	strb	r3, [r4, #0]
}
10003b4c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

10003b4e <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10003b4e:	2301      	movs	r3, #1
10003b50:	22d0      	movs	r2, #208	; 0xd0
10003b52:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
10003b54:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
10003b56:	0612      	lsls	r2, r2, #24
10003b58:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10003b5a:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
10003b5c:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10003b5e:	f7fd ffeb 	bl	10001b38 <gpio_set_function>
}
10003b62:	bd10      	pop	{r4, pc}

10003b64 <z_device_state_init>:
}
10003b64:	4770      	bx	lr

10003b66 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
10003b66:	2800      	cmp	r0, #0
10003b68:	d008      	beq.n	10003b7c <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
10003b6a:	68c3      	ldr	r3, [r0, #12]
10003b6c:	8818      	ldrh	r0, [r3, #0]
10003b6e:	05c0      	lsls	r0, r0, #23
10003b70:	0dc0      	lsrs	r0, r0, #23
10003b72:	3801      	subs	r0, #1
10003b74:	38ff      	subs	r0, #255	; 0xff
10003b76:	4243      	negs	r3, r0
10003b78:	4158      	adcs	r0, r3
10003b7a:	b2c0      	uxtb	r0, r0
}
10003b7c:	4770      	bx	lr

10003b7e <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
10003b7e:	f3ef 8310 	mrs	r3, PRIMASK
10003b82:	b672      	cpsid	i
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
10003b84:	e7fe      	b.n	10003b84 <arch_system_halt+0x6>

10003b86 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
10003b86:	b510      	push	{r4, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
10003b88:	f7ff fff9 	bl	10003b7e <arch_system_halt>

10003b8c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003b8e:	0005      	movs	r5, r0
10003b90:	000e      	movs	r6, r1
10003b92:	f3ef 8710 	mrs	r7, PRIMASK
10003b96:	b672      	cpsid	i
	return z_impl_z_current_get();
10003b98:	f7fe fede 	bl	10002958 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
10003b9c:	0031      	movs	r1, r6
10003b9e:	0004      	movs	r4, r0
10003ba0:	0028      	movs	r0, r5
10003ba2:	f7ff fff0 	bl	10003b86 <k_sys_fatal_error_handler>
	if (key != 0U) {
10003ba6:	2f00      	cmp	r7, #0
10003ba8:	d102      	bne.n	10003bb0 <z_fatal_error+0x24>
	__asm__ volatile(
10003baa:	b662      	cpsie	i
10003bac:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
10003bb0:	0020      	movs	r0, r4
10003bb2:	f7fd fb69 	bl	10001288 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
10003bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10003bb8 <z_early_memset>:
{
10003bb8:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
10003bba:	f7ff fbfa 	bl	100033b2 <memset>
}
10003bbe:	bd10      	pop	{r4, pc}

10003bc0 <z_early_memcpy>:
{
10003bc0:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
10003bc2:	f7ff fbed 	bl	100033a0 <memcpy>
}
10003bc6:	bd10      	pop	{r4, pc}

10003bc8 <k_is_in_isr>:
10003bc8:	f3ef 8005 	mrs	r0, IPSR
 * The current executing vector is found in the IPSR register. All
 * IRQs and system exceptions are considered as interrupt context.
 */
static ALWAYS_INLINE bool arch_is_in_isr(void)
{
	return (__get_IPSR()) ? (true) : (false);
10003bcc:	1e43      	subs	r3, r0, #1
10003bce:	4198      	sbcs	r0, r3
	return arch_is_in_isr();
10003bd0:	b2c0      	uxtb	r0, r0
}
10003bd2:	4770      	bx	lr

10003bd4 <z_impl_k_thread_name_set>:
	return -ENOSYS;
10003bd4:	2058      	movs	r0, #88	; 0x58
}
10003bd6:	4240      	negs	r0, r0
10003bd8:	4770      	bx	lr

10003bda <z_impl_k_thread_start>:
{
10003bda:	b510      	push	{r4, lr}
	z_sched_start(thread);
10003bdc:	f7fe fd6a 	bl	100026b4 <z_sched_start>
}
10003be0:	bd10      	pop	{r4, pc}

10003be2 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
10003be2:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003be4:	f3ef 8310 	mrs	r3, PRIMASK
10003be8:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
10003bea:	f7fd f9df 	bl	10000fac <arch_cpu_idle>
10003bee:	e7f9      	b.n	10003be4 <idle+0x2>

10003bf0 <k_msgq_cleanup>:
	return list->head == list;
10003bf0:	6803      	ldr	r3, [r0, #0]
{
10003bf2:	b570      	push	{r4, r5, r6, lr}
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003bf4:	4298      	cmp	r0, r3
10003bf6:	d001      	beq.n	10003bfc <k_msgq_cleanup+0xc>
	CHECKIF(z_waitq_head(&msgq->wait_q) != NULL) {
10003bf8:	2b00      	cmp	r3, #0
10003bfa:	d10d      	bne.n	10003c18 <k_msgq_cleanup+0x28>
	if ((msgq->flags & K_MSGQ_FLAG_ALLOC) != 0U) {
10003bfc:	2601      	movs	r6, #1
10003bfe:	1d44      	adds	r4, r0, #5
10003c00:	7fe3      	ldrb	r3, [r4, #31]
	return 0;
10003c02:	2500      	movs	r5, #0
	if ((msgq->flags & K_MSGQ_FLAG_ALLOC) != 0U) {
10003c04:	4233      	tst	r3, r6
10003c06:	d005      	beq.n	10003c14 <k_msgq_cleanup+0x24>
		k_free(msgq->buffer_start);
10003c08:	6900      	ldr	r0, [r0, #16]
10003c0a:	f000 f948 	bl	10003e9e <k_free>
		msgq->flags &= ~K_MSGQ_FLAG_ALLOC;
10003c0e:	7fe3      	ldrb	r3, [r4, #31]
10003c10:	43b3      	bics	r3, r6
10003c12:	77e3      	strb	r3, [r4, #31]
}
10003c14:	0028      	movs	r0, r5
10003c16:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
10003c18:	2510      	movs	r5, #16
10003c1a:	426d      	negs	r5, r5
10003c1c:	e7fa      	b.n	10003c14 <k_msgq_cleanup+0x24>

10003c1e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
10003c1e:	2a00      	cmp	r2, #0
10003c20:	d007      	beq.n	10003c32 <z_impl_k_sem_init+0x14>
10003c22:	428a      	cmp	r2, r1
10003c24:	d305      	bcc.n	10003c32 <z_impl_k_sem_init+0x14>
	sem->count = initial_count;
10003c26:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
10003c28:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
10003c2a:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
10003c2c:	6040      	str	r0, [r0, #4]
	return 0;
10003c2e:	2000      	movs	r0, #0
}
10003c30:	4770      	bx	lr
		return -EINVAL;
10003c32:	2016      	movs	r0, #22
10003c34:	4240      	negs	r0, r0
10003c36:	e7fb      	b.n	10003c30 <z_impl_k_sem_init+0x12>

10003c38 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
10003c38:	2201      	movs	r2, #1
{
10003c3a:	b530      	push	{r4, r5, lr}
	*flagp &= ~BIT(bit);
10003c3c:	0014      	movs	r4, r2
	return (*flagp & BIT(bit)) != 0U;
10003c3e:	6803      	ldr	r3, [r0, #0]
	*flagp &= ~BIT(bit);
10003c40:	408c      	lsls	r4, r1
10003c42:	001d      	movs	r5, r3
	return (*flagp & BIT(bit)) != 0U;
10003c44:	40cb      	lsrs	r3, r1
	*flagp &= ~BIT(bit);
10003c46:	43a5      	bics	r5, r4
	return ret;
10003c48:	4013      	ands	r3, r2
	*flagp &= ~BIT(bit);
10003c4a:	6005      	str	r5, [r0, #0]
	return ret;
10003c4c:	0018      	movs	r0, r3
}
10003c4e:	bd30      	pop	{r4, r5, pc}

10003c50 <notify_queue_locked.isra.0>:
static inline bool notify_queue_locked(struct k_work_q *queue)
10003c50:	b510      	push	{r4, lr}
	if (queue != NULL) {
10003c52:	2800      	cmp	r0, #0
10003c54:	d004      	beq.n	10003c60 <notify_queue_locked.isra.0+0x10>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
10003c56:	2200      	movs	r2, #0
10003c58:	3078      	adds	r0, #120	; 0x78
10003c5a:	0011      	movs	r1, r2
10003c5c:	f000 f8d3 	bl	10003e06 <z_sched_wake>
}
10003c60:	bd10      	pop	{r4, pc}

10003c62 <k_work_submit_to_queue>:
{
10003c62:	b537      	push	{r0, r1, r2, r4, r5, lr}
10003c64:	9001      	str	r0, [sp, #4]
10003c66:	0008      	movs	r0, r1
10003c68:	f3ef 8510 	mrs	r5, PRIMASK
10003c6c:	b672      	cpsid	i
	int ret = submit_to_queue_locked(work, &queue);
10003c6e:	a901      	add	r1, sp, #4
10003c70:	f7fe fb58 	bl	10002324 <submit_to_queue_locked>
10003c74:	0004      	movs	r4, r0
	if (key != 0U) {
10003c76:	2d00      	cmp	r5, #0
10003c78:	d102      	bne.n	10003c80 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
10003c7a:	b662      	cpsie	i
10003c7c:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
10003c80:	2c00      	cmp	r4, #0
10003c82:	dd04      	ble.n	10003c8e <k_work_submit_to_queue+0x2c>
	__asm__ volatile("mrs %0, PRIMASK;"
10003c84:	f3ef 8010 	mrs	r0, PRIMASK
10003c88:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10003c8a:	f000 f826 	bl	10003cda <z_reschedule_irqlock>
}
10003c8e:	0020      	movs	r0, r4
10003c90:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

10003c92 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
10003c92:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10003c94:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10003c96:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10003c98:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10003c9a:	2300      	movs	r3, #0
10003c9c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10003c9e:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
10003ca0:	4770      	bx	lr

10003ca2 <unpend_thread_no_timeout>:
{
10003ca2:	b510      	push	{r4, lr}
10003ca4:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
10003ca6:	f7ff fff4 	bl	10003c92 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
10003caa:	2202      	movs	r2, #2
10003cac:	7b63      	ldrb	r3, [r4, #13]
10003cae:	4393      	bics	r3, r2
10003cb0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
10003cb2:	2300      	movs	r3, #0
10003cb4:	60a3      	str	r3, [r4, #8]
}
10003cb6:	bd10      	pop	{r4, pc}

10003cb8 <z_unpend_thread>:
{
10003cb8:	b570      	push	{r4, r5, r6, lr}
10003cba:	0004      	movs	r4, r0
10003cbc:	f3ef 8510 	mrs	r5, PRIMASK
10003cc0:	b672      	cpsid	i
		unpend_thread_no_timeout(thread);
10003cc2:	f7ff ffee 	bl	10003ca2 <unpend_thread_no_timeout>
	if (key != 0U) {
10003cc6:	2d00      	cmp	r5, #0
10003cc8:	d102      	bne.n	10003cd0 <z_unpend_thread+0x18>
	__asm__ volatile(
10003cca:	b662      	cpsie	i
10003ccc:	f3bf 8f6f 	isb	sy
10003cd0:	0020      	movs	r0, r4
10003cd2:	3018      	adds	r0, #24
10003cd4:	f000 f8b6 	bl	10003e44 <z_abort_timeout>
}
10003cd8:	bd70      	pop	{r4, r5, r6, pc}

10003cda <z_reschedule_irqlock>:
{
10003cda:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10003cdc:	2800      	cmp	r0, #0
10003cde:	d105      	bne.n	10003cec <z_reschedule_irqlock+0x12>
10003ce0:	f3ef 8005 	mrs	r0, IPSR
	if (resched(key)) {
10003ce4:	2800      	cmp	r0, #0
10003ce6:	d102      	bne.n	10003cee <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
10003ce8:	f7fd f9b6 	bl	10001058 <arch_swap>
}
10003cec:	bd10      	pop	{r4, pc}
10003cee:	b662      	cpsie	i
10003cf0:	f3bf 8f6f 	isb	sy
10003cf4:	e7fa      	b.n	10003cec <z_reschedule_irqlock+0x12>

10003cf6 <z_reschedule_unlocked>:
{
10003cf6:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003cf8:	f3ef 8010 	mrs	r0, PRIMASK
10003cfc:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10003cfe:	f7ff ffec 	bl	10003cda <z_reschedule_irqlock>
}
10003d02:	bd10      	pop	{r4, pc}

10003d04 <z_priq_dumb_best>:
{
10003d04:	0003      	movs	r3, r0
	return list->head == list;
10003d06:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003d08:	4283      	cmp	r3, r0
10003d0a:	d100      	bne.n	10003d0e <z_priq_dumb_best+0xa>
	struct k_thread *thread = NULL;
10003d0c:	2000      	movs	r0, #0
}
10003d0e:	4770      	bx	lr

10003d10 <z_ready_thread>:
{
10003d10:	b510      	push	{r4, lr}
10003d12:	f3ef 8410 	mrs	r4, PRIMASK
10003d16:	b672      	cpsid	i
			ready_thread(thread);
10003d18:	f7fe fc96 	bl	10002648 <ready_thread>
	if (key != 0U) {
10003d1c:	2c00      	cmp	r4, #0
10003d1e:	d102      	bne.n	10003d26 <z_ready_thread+0x16>
	__asm__ volatile(
10003d20:	b662      	cpsie	i
10003d22:	f3bf 8f6f 	isb	sy
}
10003d26:	bd10      	pop	{r4, pc}

10003d28 <z_thread_timeout>:
	struct k_thread *thread = CONTAINER_OF(timeout,
10003d28:	3818      	subs	r0, #24
{
10003d2a:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = CONTAINER_OF(timeout,
10003d2c:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10003d2e:	f3ef 8510 	mrs	r5, PRIMASK
10003d32:	b672      	cpsid	i
		if (!killed) {
10003d34:	2328      	movs	r3, #40	; 0x28
10003d36:	7b42      	ldrb	r2, [r0, #13]
10003d38:	421a      	tst	r2, r3
10003d3a:	d10b      	bne.n	10003d54 <z_thread_timeout+0x2c>
			if (thread->base.pended_on != NULL) {
10003d3c:	6883      	ldr	r3, [r0, #8]
10003d3e:	2b00      	cmp	r3, #0
10003d40:	d001      	beq.n	10003d46 <z_thread_timeout+0x1e>
				unpend_thread_no_timeout(thread);
10003d42:	f7ff ffae 	bl	10003ca2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10003d46:	2214      	movs	r2, #20
10003d48:	7b63      	ldrb	r3, [r4, #13]
			ready_thread(thread);
10003d4a:	0020      	movs	r0, r4
10003d4c:	4393      	bics	r3, r2
10003d4e:	7363      	strb	r3, [r4, #13]
10003d50:	f7fe fc7a 	bl	10002648 <ready_thread>
	if (key != 0U) {
10003d54:	2d00      	cmp	r5, #0
10003d56:	d102      	bne.n	10003d5e <z_thread_timeout+0x36>
	__asm__ volatile(
10003d58:	b662      	cpsie	i
10003d5a:	f3bf 8f6f 	isb	sy
}
10003d5e:	bd70      	pop	{r4, r5, r6, pc}

10003d60 <add_to_waitq_locked>:
{
10003d60:	b570      	push	{r4, r5, r6, lr}
10003d62:	0004      	movs	r4, r0
10003d64:	000d      	movs	r5, r1
	unready_thread(thread);
10003d66:	f7fe fcbf 	bl	100026e8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
10003d6a:	2302      	movs	r3, #2
10003d6c:	7b62      	ldrb	r2, [r4, #13]
10003d6e:	4313      	orrs	r3, r2
10003d70:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
10003d72:	2d00      	cmp	r5, #0
10003d74:	d013      	beq.n	10003d9e <add_to_waitq_locked+0x3e>
	return list->head == list;
10003d76:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
10003d78:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003d7a:	429d      	cmp	r5, r3
10003d7c:	d016      	beq.n	10003dac <add_to_waitq_locked+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003d7e:	2b00      	cmp	r3, #0
10003d80:	d014      	beq.n	10003dac <add_to_waitq_locked+0x4c>
	int32_t b1 = thread_1->base.prio;
10003d82:	210e      	movs	r1, #14
10003d84:	5661      	ldrsb	r1, [r4, r1]
	int32_t b2 = thread_2->base.prio;
10003d86:	220e      	movs	r2, #14
10003d88:	569a      	ldrsb	r2, [r3, r2]
	if (b1 != b2) {
10003d8a:	4291      	cmp	r1, r2
10003d8c:	d008      	beq.n	10003da0 <add_to_waitq_locked+0x40>
		return b2 - b1;
10003d8e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
10003d90:	2a00      	cmp	r2, #0
10003d92:	dd05      	ble.n	10003da0 <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
10003d94:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10003d96:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10003d98:	6062      	str	r2, [r4, #4]
	prev->next = node;
10003d9a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
10003d9c:	605c      	str	r4, [r3, #4]
}
10003d9e:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10003da0:	686a      	ldr	r2, [r5, #4]
10003da2:	4293      	cmp	r3, r2
10003da4:	d002      	beq.n	10003dac <add_to_waitq_locked+0x4c>
10003da6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003da8:	2b00      	cmp	r3, #0
10003daa:	d1ec      	bne.n	10003d86 <add_to_waitq_locked+0x26>
	sys_dnode_t *const tail = list->tail;
10003dac:	686b      	ldr	r3, [r5, #4]
	node->next = list;
10003dae:	6025      	str	r5, [r4, #0]
	node->prev = tail;
10003db0:	6063      	str	r3, [r4, #4]
	tail->next = node;
10003db2:	601c      	str	r4, [r3, #0]
	list->tail = node;
10003db4:	606c      	str	r4, [r5, #4]
}
10003db6:	e7f2      	b.n	10003d9e <add_to_waitq_locked+0x3e>

10003db8 <z_unpend_first_thread>:
{
10003db8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003dba:	f3ef 8510 	mrs	r5, PRIMASK
10003dbe:	b672      	cpsid	i
		thread = _priq_wait_best(&wait_q->waitq);
10003dc0:	f7ff ffa0 	bl	10003d04 <z_priq_dumb_best>
10003dc4:	1e04      	subs	r4, r0, #0
		if (thread != NULL) {
10003dc6:	d005      	beq.n	10003dd4 <z_unpend_first_thread+0x1c>
			unpend_thread_no_timeout(thread);
10003dc8:	f7ff ff6b 	bl	10003ca2 <unpend_thread_no_timeout>
10003dcc:	0020      	movs	r0, r4
10003dce:	3018      	adds	r0, #24
10003dd0:	f000 f838 	bl	10003e44 <z_abort_timeout>
	if (key != 0U) {
10003dd4:	2d00      	cmp	r5, #0
10003dd6:	d102      	bne.n	10003dde <z_unpend_first_thread+0x26>
	__asm__ volatile(
10003dd8:	b662      	cpsie	i
10003dda:	f3bf 8f6f 	isb	sy
}
10003dde:	0020      	movs	r0, r4
10003de0:	bd70      	pop	{r4, r5, r6, pc}

10003de2 <z_unpend_all>:
{
10003de2:	b570      	push	{r4, r5, r6, lr}
10003de4:	0005      	movs	r5, r0
		need_sched = 1;
10003de6:	2601      	movs	r6, #1
	int need_sched = 0;
10003de8:	2000      	movs	r0, #0
	return list->head == list;
10003dea:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003dec:	42a5      	cmp	r5, r4
10003dee:	d001      	beq.n	10003df4 <z_unpend_all+0x12>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
10003df0:	2c00      	cmp	r4, #0
10003df2:	d100      	bne.n	10003df6 <z_unpend_all+0x14>
}
10003df4:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
10003df6:	0020      	movs	r0, r4
10003df8:	f7ff ff5e 	bl	10003cb8 <z_unpend_thread>
		z_ready_thread(thread);
10003dfc:	0020      	movs	r0, r4
10003dfe:	f7ff ff87 	bl	10003d10 <z_ready_thread>
		need_sched = 1;
10003e02:	0030      	movs	r0, r6
10003e04:	e7f1      	b.n	10003dea <z_unpend_all+0x8>

10003e06 <z_sched_wake>:
{
10003e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003e08:	000e      	movs	r6, r1
10003e0a:	0015      	movs	r5, r2
	__asm__ volatile("mrs %0, PRIMASK;"
10003e0c:	f3ef 8710 	mrs	r7, PRIMASK
10003e10:	b672      	cpsid	i
		thread = _priq_wait_best(&wait_q->waitq);
10003e12:	f7ff ff77 	bl	10003d04 <z_priq_dumb_best>
10003e16:	0004      	movs	r4, r0
	bool ret = false;
10003e18:	2000      	movs	r0, #0
		if (thread != NULL) {
10003e1a:	4284      	cmp	r4, r0
10003e1c:	d00c      	beq.n	10003e38 <z_sched_wake+0x32>
			unpend_thread_no_timeout(thread);
10003e1e:	0020      	movs	r0, r4
10003e20:	66e6      	str	r6, [r4, #108]	; 0x6c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
10003e22:	6165      	str	r5, [r4, #20]
10003e24:	f7ff ff3d 	bl	10003ca2 <unpend_thread_no_timeout>
10003e28:	0020      	movs	r0, r4
10003e2a:	3018      	adds	r0, #24
10003e2c:	f000 f80a 	bl	10003e44 <z_abort_timeout>
			ready_thread(thread);
10003e30:	0020      	movs	r0, r4
10003e32:	f7fe fc09 	bl	10002648 <ready_thread>
			ret = true;
10003e36:	2001      	movs	r0, #1
	if (key != 0U) {
10003e38:	2f00      	cmp	r7, #0
10003e3a:	d102      	bne.n	10003e42 <z_sched_wake+0x3c>
	__asm__ volatile(
10003e3c:	b662      	cpsie	i
10003e3e:	f3bf 8f6f 	isb	sy
}
10003e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10003e44 <z_abort_timeout>:
{
10003e44:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003e46:	f3ef 8410 	mrs	r4, PRIMASK
10003e4a:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
10003e4c:	6803      	ldr	r3, [r0, #0]
10003e4e:	2b00      	cmp	r3, #0
10003e50:	d008      	beq.n	10003e64 <z_abort_timeout+0x20>
			remove_timeout(to);
10003e52:	f7fe fe3b 	bl	10002acc <remove_timeout>
			ret = 0;
10003e56:	2000      	movs	r0, #0
	if (key != 0U) {
10003e58:	2c00      	cmp	r4, #0
10003e5a:	d102      	bne.n	10003e62 <z_abort_timeout+0x1e>
	__asm__ volatile(
10003e5c:	b662      	cpsie	i
10003e5e:	f3bf 8f6f 	isb	sy
}
10003e62:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
10003e64:	2016      	movs	r0, #22
10003e66:	4240      	negs	r0, r0
10003e68:	e7f6      	b.n	10003e58 <z_abort_timeout+0x14>

10003e6a <z_set_timeout_expiry>:
{
10003e6a:	b570      	push	{r4, r5, r6, lr}
10003e6c:	0004      	movs	r4, r0
10003e6e:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
10003e70:	f3ef 8610 	mrs	r6, PRIMASK
10003e74:	b672      	cpsid	i
		int next_to = next_timeout();
10003e76:	f7fe fdfd 	bl	10002a74 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
10003e7a:	2801      	cmp	r0, #1
10003e7c:	dd05      	ble.n	10003e8a <z_set_timeout_expiry+0x20>
10003e7e:	42a0      	cmp	r0, r4
10003e80:	db03      	blt.n	10003e8a <z_set_timeout_expiry+0x20>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
10003e82:	0029      	movs	r1, r5
10003e84:	0020      	movs	r0, r4
10003e86:	f7fd fc4b 	bl	10001720 <sys_clock_set_timeout>
	if (key != 0U) {
10003e8a:	2e00      	cmp	r6, #0
10003e8c:	d102      	bne.n	10003e94 <z_set_timeout_expiry+0x2a>
	__asm__ volatile(
10003e8e:	b662      	cpsie	i
10003e90:	f3bf 8f6f 	isb	sy
}
10003e94:	bd70      	pop	{r4, r5, r6, pc}

10003e96 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
10003e96:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
10003e98:	f7fe ff20 	bl	10002cdc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
10003e9c:	bd10      	pop	{r4, pc}

10003e9e <k_free>:

	return mem;
}

void k_free(void *ptr)
{
10003e9e:	b510      	push	{r4, lr}
	struct k_heap **heap_ref;

	if (ptr != NULL) {
10003ea0:	2800      	cmp	r0, #0
10003ea2:	d003      	beq.n	10003eac <k_free+0xe>
		heap_ref = ptr;
		ptr = --heap_ref;
10003ea4:	1f01      	subs	r1, r0, #4

		SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_free, *heap_ref, heap_ref);

		k_heap_free(*heap_ref, ptr);
10003ea6:	6808      	ldr	r0, [r1, #0]
10003ea8:	f000 f809 	bl	10003ebe <k_heap_free>

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_free, *heap_ref, heap_ref);
	}
}
10003eac:	bd10      	pop	{r4, pc}

10003eae <k_heap_init>:
	sys_dlist_init(&w->waitq);
10003eae:	0003      	movs	r3, r0
{
10003eb0:	b510      	push	{r4, lr}
10003eb2:	330c      	adds	r3, #12
	list->head = (sys_dnode_t *)list;
10003eb4:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
10003eb6:	6103      	str	r3, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
10003eb8:	f7ff f964 	bl	10003184 <sys_heap_init>
}
10003ebc:	bd10      	pop	{r4, pc}

10003ebe <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
10003ebe:	b570      	push	{r4, r5, r6, lr}
10003ec0:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10003ec2:	f3ef 8510 	mrs	r5, PRIMASK
10003ec6:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
10003ec8:	f7ff f94a 	bl	10003160 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
10003ecc:	0020      	movs	r0, r4
10003ece:	300c      	adds	r0, #12
10003ed0:	f7ff ff87 	bl	10003de2 <z_unpend_all>
10003ed4:	2800      	cmp	r0, #0
10003ed6:	d005      	beq.n	10003ee4 <k_heap_free+0x26>
	k_spinlock_key_t key = k_spin_lock(&h->lock);
10003ed8:	0020      	movs	r0, r4
		z_reschedule(&h->lock, key);
10003eda:	0029      	movs	r1, r5
	k_spinlock_key_t key = k_spin_lock(&h->lock);
10003edc:	3014      	adds	r0, #20
		z_reschedule(&h->lock, key);
10003ede:	f7fe faf1 	bl	100024c4 <z_reschedule>
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
10003ee2:	bd70      	pop	{r4, r5, r6, pc}
	if (key != 0U) {
10003ee4:	2d00      	cmp	r5, #0
10003ee6:	d1fc      	bne.n	10003ee2 <k_heap_free+0x24>
	__asm__ volatile(
10003ee8:	b662      	cpsie	i
10003eea:	f3bf 8f6f 	isb	sy
10003eee:	e7f8      	b.n	10003ee2 <k_heap_free+0x24>
