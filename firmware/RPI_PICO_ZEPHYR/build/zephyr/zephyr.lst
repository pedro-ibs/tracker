
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	200008f0 10002229 10004693 100021dd     ... )"...F...!..
	...
1000012c:	10002095 00000000 00000000 10002035     . ..........5 ..
1000013c:	10002929                                ))..

10000140 <_irq_vector_table>:
10000140:	1000210d 1000210d 1000210d 1000210d     .!...!...!...!..
10000150:	1000210d 1000210d 1000210d 1000210d     .!...!...!...!..
10000160:	1000210d 1000210d 1000210d 1000210d     .!...!...!...!..
10000170:	1000210d 1000210d 1000210d 1000210d     .!...!...!...!..
10000180:	1000210d 1000210d 1000210d 1000210d     .!...!...!...!..
10000190:	1000210d 1000210d 1000210d 1000210d     .!...!...!...!..
100001a0:	1000210d 1000210d                       .!...!..

Disassembly of section text:

100001a8 <__gnu_thumb1_case_uqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5c09      	ldrb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__udivsi3>:
100001bc:	2900      	cmp	r1, #0
100001be:	d034      	beq.n	1000022a <.udivsi3_skip_div0_test+0x6a>

100001c0 <.udivsi3_skip_div0_test>:
100001c0:	2301      	movs	r3, #1
100001c2:	2200      	movs	r2, #0
100001c4:	b410      	push	{r4}
100001c6:	4288      	cmp	r0, r1
100001c8:	d32c      	bcc.n	10000224 <.udivsi3_skip_div0_test+0x64>
100001ca:	2401      	movs	r4, #1
100001cc:	0724      	lsls	r4, r4, #28
100001ce:	42a1      	cmp	r1, r4
100001d0:	d204      	bcs.n	100001dc <.udivsi3_skip_div0_test+0x1c>
100001d2:	4281      	cmp	r1, r0
100001d4:	d202      	bcs.n	100001dc <.udivsi3_skip_div0_test+0x1c>
100001d6:	0109      	lsls	r1, r1, #4
100001d8:	011b      	lsls	r3, r3, #4
100001da:	e7f8      	b.n	100001ce <.udivsi3_skip_div0_test+0xe>
100001dc:	00e4      	lsls	r4, r4, #3
100001de:	42a1      	cmp	r1, r4
100001e0:	d204      	bcs.n	100001ec <.udivsi3_skip_div0_test+0x2c>
100001e2:	4281      	cmp	r1, r0
100001e4:	d202      	bcs.n	100001ec <.udivsi3_skip_div0_test+0x2c>
100001e6:	0049      	lsls	r1, r1, #1
100001e8:	005b      	lsls	r3, r3, #1
100001ea:	e7f8      	b.n	100001de <.udivsi3_skip_div0_test+0x1e>
100001ec:	4288      	cmp	r0, r1
100001ee:	d301      	bcc.n	100001f4 <.udivsi3_skip_div0_test+0x34>
100001f0:	1a40      	subs	r0, r0, r1
100001f2:	431a      	orrs	r2, r3
100001f4:	084c      	lsrs	r4, r1, #1
100001f6:	42a0      	cmp	r0, r4
100001f8:	d302      	bcc.n	10000200 <.udivsi3_skip_div0_test+0x40>
100001fa:	1b00      	subs	r0, r0, r4
100001fc:	085c      	lsrs	r4, r3, #1
100001fe:	4322      	orrs	r2, r4
10000200:	088c      	lsrs	r4, r1, #2
10000202:	42a0      	cmp	r0, r4
10000204:	d302      	bcc.n	1000020c <.udivsi3_skip_div0_test+0x4c>
10000206:	1b00      	subs	r0, r0, r4
10000208:	089c      	lsrs	r4, r3, #2
1000020a:	4322      	orrs	r2, r4
1000020c:	08cc      	lsrs	r4, r1, #3
1000020e:	42a0      	cmp	r0, r4
10000210:	d302      	bcc.n	10000218 <.udivsi3_skip_div0_test+0x58>
10000212:	1b00      	subs	r0, r0, r4
10000214:	08dc      	lsrs	r4, r3, #3
10000216:	4322      	orrs	r2, r4
10000218:	2800      	cmp	r0, #0
1000021a:	d003      	beq.n	10000224 <.udivsi3_skip_div0_test+0x64>
1000021c:	091b      	lsrs	r3, r3, #4
1000021e:	d001      	beq.n	10000224 <.udivsi3_skip_div0_test+0x64>
10000220:	0909      	lsrs	r1, r1, #4
10000222:	e7e3      	b.n	100001ec <.udivsi3_skip_div0_test+0x2c>
10000224:	0010      	movs	r0, r2
10000226:	bc10      	pop	{r4}
10000228:	4770      	bx	lr
1000022a:	b501      	push	{r0, lr}
1000022c:	2000      	movs	r0, #0
1000022e:	f000 f80b 	bl	10000248 <__aeabi_idiv0>
10000232:	bd02      	pop	{r1, pc}

10000234 <__aeabi_uidivmod>:
10000234:	2900      	cmp	r1, #0
10000236:	d0f8      	beq.n	1000022a <.udivsi3_skip_div0_test+0x6a>
10000238:	b503      	push	{r0, r1, lr}
1000023a:	f7ff ffc1 	bl	100001c0 <.udivsi3_skip_div0_test>
1000023e:	bc0e      	pop	{r1, r2, r3}
10000240:	4342      	muls	r2, r0
10000242:	1a89      	subs	r1, r1, r2
10000244:	4718      	bx	r3
10000246:	46c0      	nop			; (mov r8, r8)

10000248 <__aeabi_idiv0>:
10000248:	4770      	bx	lr
1000024a:	46c0      	nop			; (mov r8, r8)

1000024c <__aeabi_cdrcmple>:
1000024c:	4684      	mov	ip, r0
1000024e:	0010      	movs	r0, r2
10000250:	4662      	mov	r2, ip
10000252:	468c      	mov	ip, r1
10000254:	0019      	movs	r1, r3
10000256:	4663      	mov	r3, ip
10000258:	e000      	b.n	1000025c <__aeabi_cdcmpeq>
1000025a:	46c0      	nop			; (mov r8, r8)

1000025c <__aeabi_cdcmpeq>:
1000025c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000025e:	f000 fd19 	bl	10000c94 <__ledf2>
10000262:	2800      	cmp	r0, #0
10000264:	d401      	bmi.n	1000026a <__aeabi_cdcmpeq+0xe>
10000266:	2100      	movs	r1, #0
10000268:	42c8      	cmn	r0, r1
1000026a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000026c <__aeabi_dcmpeq>:
1000026c:	b510      	push	{r4, lr}
1000026e:	f000 fc7b 	bl	10000b68 <__eqdf2>
10000272:	4240      	negs	r0, r0
10000274:	3001      	adds	r0, #1
10000276:	bd10      	pop	{r4, pc}

10000278 <__aeabi_dcmplt>:
10000278:	b510      	push	{r4, lr}
1000027a:	f000 fd0b 	bl	10000c94 <__ledf2>
1000027e:	2800      	cmp	r0, #0
10000280:	db01      	blt.n	10000286 <__aeabi_dcmplt+0xe>
10000282:	2000      	movs	r0, #0
10000284:	bd10      	pop	{r4, pc}
10000286:	2001      	movs	r0, #1
10000288:	bd10      	pop	{r4, pc}
1000028a:	46c0      	nop			; (mov r8, r8)

1000028c <__aeabi_dcmple>:
1000028c:	b510      	push	{r4, lr}
1000028e:	f000 fd01 	bl	10000c94 <__ledf2>
10000292:	2800      	cmp	r0, #0
10000294:	dd01      	ble.n	1000029a <__aeabi_dcmple+0xe>
10000296:	2000      	movs	r0, #0
10000298:	bd10      	pop	{r4, pc}
1000029a:	2001      	movs	r0, #1
1000029c:	bd10      	pop	{r4, pc}
1000029e:	46c0      	nop			; (mov r8, r8)

100002a0 <__aeabi_dcmpgt>:
100002a0:	b510      	push	{r4, lr}
100002a2:	f000 fc9b 	bl	10000bdc <__gedf2>
100002a6:	2800      	cmp	r0, #0
100002a8:	dc01      	bgt.n	100002ae <__aeabi_dcmpgt+0xe>
100002aa:	2000      	movs	r0, #0
100002ac:	bd10      	pop	{r4, pc}
100002ae:	2001      	movs	r0, #1
100002b0:	bd10      	pop	{r4, pc}
100002b2:	46c0      	nop			; (mov r8, r8)

100002b4 <__aeabi_dcmpge>:
100002b4:	b510      	push	{r4, lr}
100002b6:	f000 fc91 	bl	10000bdc <__gedf2>
100002ba:	2800      	cmp	r0, #0
100002bc:	da01      	bge.n	100002c2 <__aeabi_dcmpge+0xe>
100002be:	2000      	movs	r0, #0
100002c0:	bd10      	pop	{r4, pc}
100002c2:	2001      	movs	r0, #1
100002c4:	bd10      	pop	{r4, pc}
100002c6:	46c0      	nop			; (mov r8, r8)

100002c8 <__clzsi2>:
100002c8:	211c      	movs	r1, #28
100002ca:	2301      	movs	r3, #1
100002cc:	041b      	lsls	r3, r3, #16
100002ce:	4298      	cmp	r0, r3
100002d0:	d301      	bcc.n	100002d6 <__clzsi2+0xe>
100002d2:	0c00      	lsrs	r0, r0, #16
100002d4:	3910      	subs	r1, #16
100002d6:	0a1b      	lsrs	r3, r3, #8
100002d8:	4298      	cmp	r0, r3
100002da:	d301      	bcc.n	100002e0 <__clzsi2+0x18>
100002dc:	0a00      	lsrs	r0, r0, #8
100002de:	3908      	subs	r1, #8
100002e0:	091b      	lsrs	r3, r3, #4
100002e2:	4298      	cmp	r0, r3
100002e4:	d301      	bcc.n	100002ea <__clzsi2+0x22>
100002e6:	0900      	lsrs	r0, r0, #4
100002e8:	3904      	subs	r1, #4
100002ea:	a202      	add	r2, pc, #8	; (adr r2, 100002f4 <__clzsi2+0x2c>)
100002ec:	5c10      	ldrb	r0, [r2, r0]
100002ee:	1840      	adds	r0, r0, r1
100002f0:	4770      	bx	lr
100002f2:	46c0      	nop			; (mov r8, r8)
100002f4:	02020304 	.word	0x02020304
100002f8:	01010101 	.word	0x01010101
	...

10000304 <__aeabi_uldivmod>:
10000304:	2b00      	cmp	r3, #0
10000306:	d111      	bne.n	1000032c <__aeabi_uldivmod+0x28>
10000308:	2a00      	cmp	r2, #0
1000030a:	d10f      	bne.n	1000032c <__aeabi_uldivmod+0x28>
1000030c:	2900      	cmp	r1, #0
1000030e:	d100      	bne.n	10000312 <__aeabi_uldivmod+0xe>
10000310:	2800      	cmp	r0, #0
10000312:	d002      	beq.n	1000031a <__aeabi_uldivmod+0x16>
10000314:	2100      	movs	r1, #0
10000316:	43c9      	mvns	r1, r1
10000318:	0008      	movs	r0, r1
1000031a:	b407      	push	{r0, r1, r2}
1000031c:	4802      	ldr	r0, [pc, #8]	; (10000328 <__aeabi_uldivmod+0x24>)
1000031e:	a102      	add	r1, pc, #8	; (adr r1, 10000328 <__aeabi_uldivmod+0x24>)
10000320:	1840      	adds	r0, r0, r1
10000322:	9002      	str	r0, [sp, #8]
10000324:	bd03      	pop	{r0, r1, pc}
10000326:	46c0      	nop			; (mov r8, r8)
10000328:	ffffff21 	.word	0xffffff21
1000032c:	b403      	push	{r0, r1}
1000032e:	4668      	mov	r0, sp
10000330:	b501      	push	{r0, lr}
10000332:	9802      	ldr	r0, [sp, #8]
10000334:	f001 fb7e 	bl	10001a34 <__udivmoddi4>
10000338:	9b01      	ldr	r3, [sp, #4]
1000033a:	469e      	mov	lr, r3
1000033c:	b002      	add	sp, #8
1000033e:	bc0c      	pop	{r2, r3}
10000340:	4770      	bx	lr
10000342:	46c0      	nop			; (mov r8, r8)

10000344 <__aeabi_f2ulz>:
10000344:	b5d0      	push	{r4, r6, r7, lr}
10000346:	f001 fa0f 	bl	10001768 <__aeabi_f2d>
1000034a:	2200      	movs	r2, #0
1000034c:	4b0b      	ldr	r3, [pc, #44]	; (1000037c <__aeabi_f2ulz+0x38>)
1000034e:	0006      	movs	r6, r0
10000350:	000f      	movs	r7, r1
10000352:	f000 fcfb 	bl	10000d4c <__aeabi_dmul>
10000356:	f001 fafb 	bl	10001950 <__aeabi_d2uiz>
1000035a:	0004      	movs	r4, r0
1000035c:	f001 f9e4 	bl	10001728 <__aeabi_ui2d>
10000360:	2200      	movs	r2, #0
10000362:	4b07      	ldr	r3, [pc, #28]	; (10000380 <__aeabi_f2ulz+0x3c>)
10000364:	f000 fcf2 	bl	10000d4c <__aeabi_dmul>
10000368:	0002      	movs	r2, r0
1000036a:	000b      	movs	r3, r1
1000036c:	0030      	movs	r0, r6
1000036e:	0039      	movs	r1, r7
10000370:	f000 ff04 	bl	1000117c <__aeabi_dsub>
10000374:	f001 faec 	bl	10001950 <__aeabi_d2uiz>
10000378:	0021      	movs	r1, r4
1000037a:	bdd0      	pop	{r4, r6, r7, pc}
1000037c:	3df00000 	.word	0x3df00000
10000380:	41f00000 	.word	0x41f00000

10000384 <__aeabi_fdiv>:
10000384:	b5f0      	push	{r4, r5, r6, r7, lr}
10000386:	0fc3      	lsrs	r3, r0, #31
10000388:	b085      	sub	sp, #20
1000038a:	0244      	lsls	r4, r0, #9
1000038c:	0045      	lsls	r5, r0, #1
1000038e:	1c0f      	adds	r7, r1, #0
10000390:	0a64      	lsrs	r4, r4, #9
10000392:	0e2d      	lsrs	r5, r5, #24
10000394:	9303      	str	r3, [sp, #12]
10000396:	9302      	str	r3, [sp, #8]
10000398:	d00a      	beq.n	100003b0 <__aeabi_fdiv+0x2c>
1000039a:	2dff      	cmp	r5, #255	; 0xff
1000039c:	d03b      	beq.n	10000416 <__aeabi_fdiv+0x92>
1000039e:	2380      	movs	r3, #128	; 0x80
100003a0:	00e4      	lsls	r4, r4, #3
100003a2:	04db      	lsls	r3, r3, #19
100003a4:	431c      	orrs	r4, r3
100003a6:	2300      	movs	r3, #0
100003a8:	3d7f      	subs	r5, #127	; 0x7f
100003aa:	9501      	str	r5, [sp, #4]
100003ac:	9300      	str	r3, [sp, #0]
100003ae:	e00e      	b.n	100003ce <__aeabi_fdiv+0x4a>
100003b0:	2301      	movs	r3, #1
100003b2:	9401      	str	r4, [sp, #4]
100003b4:	9300      	str	r3, [sp, #0]
100003b6:	2c00      	cmp	r4, #0
100003b8:	d009      	beq.n	100003ce <__aeabi_fdiv+0x4a>
100003ba:	0020      	movs	r0, r4
100003bc:	f7ff ff84 	bl	100002c8 <__clzsi2>
100003c0:	1f43      	subs	r3, r0, #5
100003c2:	409c      	lsls	r4, r3
100003c4:	2376      	movs	r3, #118	; 0x76
100003c6:	425b      	negs	r3, r3
100003c8:	1a1b      	subs	r3, r3, r0
100003ca:	9301      	str	r3, [sp, #4]
100003cc:	9500      	str	r5, [sp, #0]
100003ce:	027d      	lsls	r5, r7, #9
100003d0:	007e      	lsls	r6, r7, #1
100003d2:	0a6d      	lsrs	r5, r5, #9
100003d4:	0e36      	lsrs	r6, r6, #24
100003d6:	0fff      	lsrs	r7, r7, #31
100003d8:	2e00      	cmp	r6, #0
100003da:	d023      	beq.n	10000424 <__aeabi_fdiv+0xa0>
100003dc:	2eff      	cmp	r6, #255	; 0xff
100003de:	d02e      	beq.n	1000043e <__aeabi_fdiv+0xba>
100003e0:	2380      	movs	r3, #128	; 0x80
100003e2:	00ed      	lsls	r5, r5, #3
100003e4:	04db      	lsls	r3, r3, #19
100003e6:	431d      	orrs	r5, r3
100003e8:	0033      	movs	r3, r6
100003ea:	3b7f      	subs	r3, #127	; 0x7f
100003ec:	2200      	movs	r2, #0
100003ee:	9801      	ldr	r0, [sp, #4]
100003f0:	9903      	ldr	r1, [sp, #12]
100003f2:	1ac3      	subs	r3, r0, r3
100003f4:	9800      	ldr	r0, [sp, #0]
100003f6:	4079      	eors	r1, r7
100003f8:	0080      	lsls	r0, r0, #2
100003fa:	4310      	orrs	r0, r2
100003fc:	3801      	subs	r0, #1
100003fe:	280e      	cmp	r0, #14
10000400:	d831      	bhi.n	10000466 <__aeabi_fdiv+0xe2>
10000402:	f7ff fed1 	bl	100001a8 <__gnu_thumb1_case_uqi>
10000406:	9d5b      	.short	0x9d5b
10000408:	9d989d6f 	.word	0x9d989d6f
1000040c:	985b5b6f 	.word	0x985b5b6f
10000410:	2222226f 	.word	0x2222226f
10000414:	61          	.byte	0x61
10000415:	00          	.byte	0x00
10000416:	2302      	movs	r3, #2
10000418:	9501      	str	r5, [sp, #4]
1000041a:	9300      	str	r3, [sp, #0]
1000041c:	2c00      	cmp	r4, #0
1000041e:	d0d6      	beq.n	100003ce <__aeabi_fdiv+0x4a>
10000420:	3301      	adds	r3, #1
10000422:	e7c3      	b.n	100003ac <__aeabi_fdiv+0x28>
10000424:	002b      	movs	r3, r5
10000426:	2201      	movs	r2, #1
10000428:	2d00      	cmp	r5, #0
1000042a:	d0e0      	beq.n	100003ee <__aeabi_fdiv+0x6a>
1000042c:	0028      	movs	r0, r5
1000042e:	f7ff ff4b 	bl	100002c8 <__clzsi2>
10000432:	1f43      	subs	r3, r0, #5
10000434:	409d      	lsls	r5, r3
10000436:	2376      	movs	r3, #118	; 0x76
10000438:	425b      	negs	r3, r3
1000043a:	1a1b      	subs	r3, r3, r0
1000043c:	e7d6      	b.n	100003ec <__aeabi_fdiv+0x68>
1000043e:	0033      	movs	r3, r6
10000440:	2202      	movs	r2, #2
10000442:	2d00      	cmp	r5, #0
10000444:	d0d3      	beq.n	100003ee <__aeabi_fdiv+0x6a>
10000446:	3201      	adds	r2, #1
10000448:	e7d1      	b.n	100003ee <__aeabi_fdiv+0x6a>
1000044a:	9903      	ldr	r1, [sp, #12]
1000044c:	9a00      	ldr	r2, [sp, #0]
1000044e:	2000      	movs	r0, #0
10000450:	0005      	movs	r5, r0
10000452:	2a01      	cmp	r2, #1
10000454:	d064      	beq.n	10000520 <__aeabi_fdiv+0x19c>
10000456:	4282      	cmp	r2, r0
10000458:	d01c      	beq.n	10000494 <__aeabi_fdiv+0x110>
1000045a:	2a02      	cmp	r2, #2
1000045c:	d02e      	beq.n	100004bc <__aeabi_fdiv+0x138>
1000045e:	2a03      	cmp	r2, #3
10000460:	d118      	bne.n	10000494 <__aeabi_fdiv+0x110>
10000462:	9102      	str	r1, [sp, #8]
10000464:	e038      	b.n	100004d8 <__aeabi_fdiv+0x154>
10000466:	0164      	lsls	r4, r4, #5
10000468:	016d      	lsls	r5, r5, #5
1000046a:	42ac      	cmp	r4, r5
1000046c:	d328      	bcc.n	100004c0 <__aeabi_fdiv+0x13c>
1000046e:	201a      	movs	r0, #26
10000470:	2201      	movs	r2, #1
10000472:	1b64      	subs	r4, r4, r5
10000474:	2601      	movs	r6, #1
10000476:	0027      	movs	r7, r4
10000478:	0052      	lsls	r2, r2, #1
1000047a:	0064      	lsls	r4, r4, #1
1000047c:	2f00      	cmp	r7, #0
1000047e:	db01      	blt.n	10000484 <__aeabi_fdiv+0x100>
10000480:	42a5      	cmp	r5, r4
10000482:	d801      	bhi.n	10000488 <__aeabi_fdiv+0x104>
10000484:	1b64      	subs	r4, r4, r5
10000486:	4332      	orrs	r2, r6
10000488:	3801      	subs	r0, #1
1000048a:	2800      	cmp	r0, #0
1000048c:	d1f3      	bne.n	10000476 <__aeabi_fdiv+0xf2>
1000048e:	1e60      	subs	r0, r4, #1
10000490:	4184      	sbcs	r4, r0
10000492:	4314      	orrs	r4, r2
10000494:	001d      	movs	r5, r3
10000496:	357f      	adds	r5, #127	; 0x7f
10000498:	2d00      	cmp	r5, #0
1000049a:	dd26      	ble.n	100004ea <__aeabi_fdiv+0x166>
1000049c:	0762      	lsls	r2, r4, #29
1000049e:	d004      	beq.n	100004aa <__aeabi_fdiv+0x126>
100004a0:	220f      	movs	r2, #15
100004a2:	4022      	ands	r2, r4
100004a4:	2a04      	cmp	r2, #4
100004a6:	d000      	beq.n	100004aa <__aeabi_fdiv+0x126>
100004a8:	3404      	adds	r4, #4
100004aa:	0122      	lsls	r2, r4, #4
100004ac:	d503      	bpl.n	100004b6 <__aeabi_fdiv+0x132>
100004ae:	3380      	adds	r3, #128	; 0x80
100004b0:	001d      	movs	r5, r3
100004b2:	4a26      	ldr	r2, [pc, #152]	; (1000054c <__aeabi_fdiv+0x1c8>)
100004b4:	4014      	ands	r4, r2
100004b6:	08e0      	lsrs	r0, r4, #3
100004b8:	2dfe      	cmp	r5, #254	; 0xfe
100004ba:	dd31      	ble.n	10000520 <__aeabi_fdiv+0x19c>
100004bc:	2000      	movs	r0, #0
100004be:	e00f      	b.n	100004e0 <__aeabi_fdiv+0x15c>
100004c0:	201b      	movs	r0, #27
100004c2:	2200      	movs	r2, #0
100004c4:	3b01      	subs	r3, #1
100004c6:	e7d5      	b.n	10000474 <__aeabi_fdiv+0xf0>
100004c8:	2380      	movs	r3, #128	; 0x80
100004ca:	03db      	lsls	r3, r3, #15
100004cc:	421c      	tst	r4, r3
100004ce:	d003      	beq.n	100004d8 <__aeabi_fdiv+0x154>
100004d0:	421d      	tst	r5, r3
100004d2:	d101      	bne.n	100004d8 <__aeabi_fdiv+0x154>
100004d4:	002c      	movs	r4, r5
100004d6:	9702      	str	r7, [sp, #8]
100004d8:	2080      	movs	r0, #128	; 0x80
100004da:	9902      	ldr	r1, [sp, #8]
100004dc:	03c0      	lsls	r0, r0, #15
100004de:	4320      	orrs	r0, r4
100004e0:	25ff      	movs	r5, #255	; 0xff
100004e2:	e01d      	b.n	10000520 <__aeabi_fdiv+0x19c>
100004e4:	002c      	movs	r4, r5
100004e6:	0039      	movs	r1, r7
100004e8:	e7b1      	b.n	1000044e <__aeabi_fdiv+0xca>
100004ea:	2201      	movs	r2, #1
100004ec:	2000      	movs	r0, #0
100004ee:	1b52      	subs	r2, r2, r5
100004f0:	0005      	movs	r5, r0
100004f2:	2a1b      	cmp	r2, #27
100004f4:	dc14      	bgt.n	10000520 <__aeabi_fdiv+0x19c>
100004f6:	339e      	adds	r3, #158	; 0x9e
100004f8:	0020      	movs	r0, r4
100004fa:	409c      	lsls	r4, r3
100004fc:	40d0      	lsrs	r0, r2
100004fe:	1e63      	subs	r3, r4, #1
10000500:	419c      	sbcs	r4, r3
10000502:	4320      	orrs	r0, r4
10000504:	0743      	lsls	r3, r0, #29
10000506:	d004      	beq.n	10000512 <__aeabi_fdiv+0x18e>
10000508:	230f      	movs	r3, #15
1000050a:	4003      	ands	r3, r0
1000050c:	2b04      	cmp	r3, #4
1000050e:	d000      	beq.n	10000512 <__aeabi_fdiv+0x18e>
10000510:	3004      	adds	r0, #4
10000512:	2380      	movs	r3, #128	; 0x80
10000514:	0005      	movs	r5, r0
10000516:	04db      	lsls	r3, r3, #19
10000518:	401d      	ands	r5, r3
1000051a:	4218      	tst	r0, r3
1000051c:	d113      	bne.n	10000546 <__aeabi_fdiv+0x1c2>
1000051e:	08c0      	lsrs	r0, r0, #3
10000520:	23ff      	movs	r3, #255	; 0xff
10000522:	05ed      	lsls	r5, r5, #23
10000524:	05db      	lsls	r3, r3, #23
10000526:	0240      	lsls	r0, r0, #9
10000528:	401d      	ands	r5, r3
1000052a:	0a40      	lsrs	r0, r0, #9
1000052c:	4328      	orrs	r0, r5
1000052e:	07c9      	lsls	r1, r1, #31
10000530:	4308      	orrs	r0, r1
10000532:	b005      	add	sp, #20
10000534:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000536:	2480      	movs	r4, #128	; 0x80
10000538:	2300      	movs	r3, #0
1000053a:	03e4      	lsls	r4, r4, #15
1000053c:	9302      	str	r3, [sp, #8]
1000053e:	e7cb      	b.n	100004d8 <__aeabi_fdiv+0x154>
10000540:	2000      	movs	r0, #0
10000542:	0005      	movs	r5, r0
10000544:	e7ec      	b.n	10000520 <__aeabi_fdiv+0x19c>
10000546:	2000      	movs	r0, #0
10000548:	2501      	movs	r5, #1
1000054a:	e7e9      	b.n	10000520 <__aeabi_fdiv+0x19c>
1000054c:	f7ffffff 	.word	0xf7ffffff

10000550 <__aeabi_ui2f>:
10000550:	2300      	movs	r3, #0
10000552:	b570      	push	{r4, r5, r6, lr}
10000554:	0004      	movs	r4, r0
10000556:	4298      	cmp	r0, r3
10000558:	d00a      	beq.n	10000570 <__aeabi_ui2f+0x20>
1000055a:	f7ff feb5 	bl	100002c8 <__clzsi2>
1000055e:	239e      	movs	r3, #158	; 0x9e
10000560:	0002      	movs	r2, r0
10000562:	1a1b      	subs	r3, r3, r0
10000564:	2b96      	cmp	r3, #150	; 0x96
10000566:	dc08      	bgt.n	1000057a <__aeabi_ui2f+0x2a>
10000568:	2808      	cmp	r0, #8
1000056a:	dd01      	ble.n	10000570 <__aeabi_ui2f+0x20>
1000056c:	3a08      	subs	r2, #8
1000056e:	4094      	lsls	r4, r2
10000570:	0264      	lsls	r4, r4, #9
10000572:	05db      	lsls	r3, r3, #23
10000574:	0a60      	lsrs	r0, r4, #9
10000576:	4318      	orrs	r0, r3
10000578:	bd70      	pop	{r4, r5, r6, pc}
1000057a:	2b99      	cmp	r3, #153	; 0x99
1000057c:	dd0a      	ble.n	10000594 <__aeabi_ui2f+0x44>
1000057e:	0001      	movs	r1, r0
10000580:	0020      	movs	r0, r4
10000582:	311b      	adds	r1, #27
10000584:	4088      	lsls	r0, r1
10000586:	0001      	movs	r1, r0
10000588:	1e48      	subs	r0, r1, #1
1000058a:	4181      	sbcs	r1, r0
1000058c:	2005      	movs	r0, #5
1000058e:	1a80      	subs	r0, r0, r2
10000590:	40c4      	lsrs	r4, r0
10000592:	430c      	orrs	r4, r1
10000594:	2a05      	cmp	r2, #5
10000596:	dd01      	ble.n	1000059c <__aeabi_ui2f+0x4c>
10000598:	1f51      	subs	r1, r2, #5
1000059a:	408c      	lsls	r4, r1
1000059c:	0021      	movs	r1, r4
1000059e:	4d08      	ldr	r5, [pc, #32]	; (100005c0 <__aeabi_ui2f+0x70>)
100005a0:	4029      	ands	r1, r5
100005a2:	0760      	lsls	r0, r4, #29
100005a4:	d004      	beq.n	100005b0 <__aeabi_ui2f+0x60>
100005a6:	200f      	movs	r0, #15
100005a8:	4004      	ands	r4, r0
100005aa:	2c04      	cmp	r4, #4
100005ac:	d000      	beq.n	100005b0 <__aeabi_ui2f+0x60>
100005ae:	3104      	adds	r1, #4
100005b0:	0148      	lsls	r0, r1, #5
100005b2:	d502      	bpl.n	100005ba <__aeabi_ui2f+0x6a>
100005b4:	239f      	movs	r3, #159	; 0x9f
100005b6:	4029      	ands	r1, r5
100005b8:	1a9b      	subs	r3, r3, r2
100005ba:	08cc      	lsrs	r4, r1, #3
100005bc:	e7d8      	b.n	10000570 <__aeabi_ui2f+0x20>
100005be:	46c0      	nop			; (mov r8, r8)
100005c0:	fbffffff 	.word	0xfbffffff

100005c4 <__aeabi_dadd>:
100005c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100005c6:	0006      	movs	r6, r0
100005c8:	001d      	movs	r5, r3
100005ca:	0008      	movs	r0, r1
100005cc:	0011      	movs	r1, r2
100005ce:	0303      	lsls	r3, r0, #12
100005d0:	0fc2      	lsrs	r2, r0, #31
100005d2:	0044      	lsls	r4, r0, #1
100005d4:	006f      	lsls	r7, r5, #1
100005d6:	0328      	lsls	r0, r5, #12
100005d8:	0fed      	lsrs	r5, r5, #31
100005da:	46ac      	mov	ip, r5
100005dc:	9200      	str	r2, [sp, #0]
100005de:	0f4d      	lsrs	r5, r1, #29
100005e0:	0a40      	lsrs	r0, r0, #9
100005e2:	4328      	orrs	r0, r5
100005e4:	9d00      	ldr	r5, [sp, #0]
100005e6:	0f72      	lsrs	r2, r6, #29
100005e8:	0d64      	lsrs	r4, r4, #21
100005ea:	0a5b      	lsrs	r3, r3, #9
100005ec:	0d7f      	lsrs	r7, r7, #21
100005ee:	4313      	orrs	r3, r2
100005f0:	00c9      	lsls	r1, r1, #3
100005f2:	00f2      	lsls	r2, r6, #3
100005f4:	1be6      	subs	r6, r4, r7
100005f6:	4565      	cmp	r5, ip
100005f8:	d000      	beq.n	100005fc <__aeabi_dadd+0x38>
100005fa:	e12b      	b.n	10000854 <__aeabi_dadd+0x290>
100005fc:	2e00      	cmp	r6, #0
100005fe:	dd61      	ble.n	100006c4 <__aeabi_dadd+0x100>
10000600:	2f00      	cmp	r7, #0
10000602:	d114      	bne.n	1000062e <__aeabi_dadd+0x6a>
10000604:	0005      	movs	r5, r0
10000606:	430d      	orrs	r5, r1
10000608:	d100      	bne.n	1000060c <__aeabi_dadd+0x48>
1000060a:	e294      	b.n	10000b36 <__aeabi_dadd+0x572>
1000060c:	1e75      	subs	r5, r6, #1
1000060e:	2e01      	cmp	r6, #1
10000610:	d108      	bne.n	10000624 <__aeabi_dadd+0x60>
10000612:	1851      	adds	r1, r2, r1
10000614:	4291      	cmp	r1, r2
10000616:	4192      	sbcs	r2, r2
10000618:	181b      	adds	r3, r3, r0
1000061a:	4252      	negs	r2, r2
1000061c:	189b      	adds	r3, r3, r2
1000061e:	000a      	movs	r2, r1
10000620:	2401      	movs	r4, #1
10000622:	e027      	b.n	10000674 <__aeabi_dadd+0xb0>
10000624:	4fb8      	ldr	r7, [pc, #736]	; (10000908 <__aeabi_dadd+0x344>)
10000626:	42be      	cmp	r6, r7
10000628:	d109      	bne.n	1000063e <__aeabi_dadd+0x7a>
1000062a:	4cb7      	ldr	r4, [pc, #732]	; (10000908 <__aeabi_dadd+0x344>)
1000062c:	e0b7      	b.n	1000079e <__aeabi_dadd+0x1da>
1000062e:	4db6      	ldr	r5, [pc, #728]	; (10000908 <__aeabi_dadd+0x344>)
10000630:	42ac      	cmp	r4, r5
10000632:	d100      	bne.n	10000636 <__aeabi_dadd+0x72>
10000634:	e0b3      	b.n	1000079e <__aeabi_dadd+0x1da>
10000636:	2580      	movs	r5, #128	; 0x80
10000638:	042d      	lsls	r5, r5, #16
1000063a:	4328      	orrs	r0, r5
1000063c:	0035      	movs	r5, r6
1000063e:	2d38      	cmp	r5, #56	; 0x38
10000640:	dc3b      	bgt.n	100006ba <__aeabi_dadd+0xf6>
10000642:	2d1f      	cmp	r5, #31
10000644:	dc28      	bgt.n	10000698 <__aeabi_dadd+0xd4>
10000646:	2620      	movs	r6, #32
10000648:	0007      	movs	r7, r0
1000064a:	1b76      	subs	r6, r6, r5
1000064c:	40b7      	lsls	r7, r6
1000064e:	46bc      	mov	ip, r7
10000650:	000f      	movs	r7, r1
10000652:	9601      	str	r6, [sp, #4]
10000654:	40ef      	lsrs	r7, r5
10000656:	4666      	mov	r6, ip
10000658:	4337      	orrs	r7, r6
1000065a:	9e01      	ldr	r6, [sp, #4]
1000065c:	40e8      	lsrs	r0, r5
1000065e:	40b1      	lsls	r1, r6
10000660:	1e4e      	subs	r6, r1, #1
10000662:	41b1      	sbcs	r1, r6
10000664:	430f      	orrs	r7, r1
10000666:	18bf      	adds	r7, r7, r2
10000668:	18c0      	adds	r0, r0, r3
1000066a:	4297      	cmp	r7, r2
1000066c:	419b      	sbcs	r3, r3
1000066e:	003a      	movs	r2, r7
10000670:	425b      	negs	r3, r3
10000672:	18c3      	adds	r3, r0, r3
10000674:	0219      	lsls	r1, r3, #8
10000676:	d400      	bmi.n	1000067a <__aeabi_dadd+0xb6>
10000678:	e091      	b.n	1000079e <__aeabi_dadd+0x1da>
1000067a:	49a3      	ldr	r1, [pc, #652]	; (10000908 <__aeabi_dadd+0x344>)
1000067c:	3401      	adds	r4, #1
1000067e:	428c      	cmp	r4, r1
10000680:	d100      	bne.n	10000684 <__aeabi_dadd+0xc0>
10000682:	e255      	b.n	10000b30 <__aeabi_dadd+0x56c>
10000684:	2001      	movs	r0, #1
10000686:	49a1      	ldr	r1, [pc, #644]	; (1000090c <__aeabi_dadd+0x348>)
10000688:	400b      	ands	r3, r1
1000068a:	0851      	lsrs	r1, r2, #1
1000068c:	4002      	ands	r2, r0
1000068e:	430a      	orrs	r2, r1
10000690:	07d9      	lsls	r1, r3, #31
10000692:	430a      	orrs	r2, r1
10000694:	40c3      	lsrs	r3, r0
10000696:	e082      	b.n	1000079e <__aeabi_dadd+0x1da>
10000698:	002e      	movs	r6, r5
1000069a:	0007      	movs	r7, r0
1000069c:	3e20      	subs	r6, #32
1000069e:	40f7      	lsrs	r7, r6
100006a0:	2600      	movs	r6, #0
100006a2:	2d20      	cmp	r5, #32
100006a4:	d003      	beq.n	100006ae <__aeabi_dadd+0xea>
100006a6:	3640      	adds	r6, #64	; 0x40
100006a8:	1b75      	subs	r5, r6, r5
100006aa:	40a8      	lsls	r0, r5
100006ac:	0006      	movs	r6, r0
100006ae:	4331      	orrs	r1, r6
100006b0:	1e48      	subs	r0, r1, #1
100006b2:	4181      	sbcs	r1, r0
100006b4:	430f      	orrs	r7, r1
100006b6:	2000      	movs	r0, #0
100006b8:	e7d5      	b.n	10000666 <__aeabi_dadd+0xa2>
100006ba:	4308      	orrs	r0, r1
100006bc:	0007      	movs	r7, r0
100006be:	1e79      	subs	r1, r7, #1
100006c0:	418f      	sbcs	r7, r1
100006c2:	e7f8      	b.n	100006b6 <__aeabi_dadd+0xf2>
100006c4:	2e00      	cmp	r6, #0
100006c6:	d04e      	beq.n	10000766 <__aeabi_dadd+0x1a2>
100006c8:	1b3d      	subs	r5, r7, r4
100006ca:	2c00      	cmp	r4, #0
100006cc:	d113      	bne.n	100006f6 <__aeabi_dadd+0x132>
100006ce:	001c      	movs	r4, r3
100006d0:	4314      	orrs	r4, r2
100006d2:	d100      	bne.n	100006d6 <__aeabi_dadd+0x112>
100006d4:	e225      	b.n	10000b22 <__aeabi_dadd+0x55e>
100006d6:	1e6c      	subs	r4, r5, #1
100006d8:	2d01      	cmp	r5, #1
100006da:	d106      	bne.n	100006ea <__aeabi_dadd+0x126>
100006dc:	1852      	adds	r2, r2, r1
100006de:	428a      	cmp	r2, r1
100006e0:	4189      	sbcs	r1, r1
100006e2:	181b      	adds	r3, r3, r0
100006e4:	4249      	negs	r1, r1
100006e6:	185b      	adds	r3, r3, r1
100006e8:	e79a      	b.n	10000620 <__aeabi_dadd+0x5c>
100006ea:	4e87      	ldr	r6, [pc, #540]	; (10000908 <__aeabi_dadd+0x344>)
100006ec:	42b5      	cmp	r5, r6
100006ee:	d109      	bne.n	10000704 <__aeabi_dadd+0x140>
100006f0:	0003      	movs	r3, r0
100006f2:	000a      	movs	r2, r1
100006f4:	e799      	b.n	1000062a <__aeabi_dadd+0x66>
100006f6:	4c84      	ldr	r4, [pc, #528]	; (10000908 <__aeabi_dadd+0x344>)
100006f8:	42a7      	cmp	r7, r4
100006fa:	d0f9      	beq.n	100006f0 <__aeabi_dadd+0x12c>
100006fc:	2480      	movs	r4, #128	; 0x80
100006fe:	0424      	lsls	r4, r4, #16
10000700:	4323      	orrs	r3, r4
10000702:	002c      	movs	r4, r5
10000704:	2c38      	cmp	r4, #56	; 0x38
10000706:	dc2a      	bgt.n	1000075e <__aeabi_dadd+0x19a>
10000708:	2c1f      	cmp	r4, #31
1000070a:	dc17      	bgt.n	1000073c <__aeabi_dadd+0x178>
1000070c:	2520      	movs	r5, #32
1000070e:	001e      	movs	r6, r3
10000710:	1b2d      	subs	r5, r5, r4
10000712:	40ae      	lsls	r6, r5
10000714:	46b4      	mov	ip, r6
10000716:	0016      	movs	r6, r2
10000718:	9501      	str	r5, [sp, #4]
1000071a:	40e6      	lsrs	r6, r4
1000071c:	4665      	mov	r5, ip
1000071e:	432e      	orrs	r6, r5
10000720:	9d01      	ldr	r5, [sp, #4]
10000722:	40e3      	lsrs	r3, r4
10000724:	40aa      	lsls	r2, r5
10000726:	1e55      	subs	r5, r2, #1
10000728:	41aa      	sbcs	r2, r5
1000072a:	4332      	orrs	r2, r6
1000072c:	1852      	adds	r2, r2, r1
1000072e:	428a      	cmp	r2, r1
10000730:	4189      	sbcs	r1, r1
10000732:	181b      	adds	r3, r3, r0
10000734:	4249      	negs	r1, r1
10000736:	003c      	movs	r4, r7
10000738:	185b      	adds	r3, r3, r1
1000073a:	e79b      	b.n	10000674 <__aeabi_dadd+0xb0>
1000073c:	0025      	movs	r5, r4
1000073e:	001e      	movs	r6, r3
10000740:	3d20      	subs	r5, #32
10000742:	40ee      	lsrs	r6, r5
10000744:	2500      	movs	r5, #0
10000746:	2c20      	cmp	r4, #32
10000748:	d003      	beq.n	10000752 <__aeabi_dadd+0x18e>
1000074a:	3540      	adds	r5, #64	; 0x40
1000074c:	1b2c      	subs	r4, r5, r4
1000074e:	40a3      	lsls	r3, r4
10000750:	001d      	movs	r5, r3
10000752:	432a      	orrs	r2, r5
10000754:	1e53      	subs	r3, r2, #1
10000756:	419a      	sbcs	r2, r3
10000758:	4332      	orrs	r2, r6
1000075a:	2300      	movs	r3, #0
1000075c:	e7e6      	b.n	1000072c <__aeabi_dadd+0x168>
1000075e:	431a      	orrs	r2, r3
10000760:	1e53      	subs	r3, r2, #1
10000762:	419a      	sbcs	r2, r3
10000764:	e7f9      	b.n	1000075a <__aeabi_dadd+0x196>
10000766:	4f6a      	ldr	r7, [pc, #424]	; (10000910 <__aeabi_dadd+0x34c>)
10000768:	1c65      	adds	r5, r4, #1
1000076a:	423d      	tst	r5, r7
1000076c:	d162      	bne.n	10000834 <__aeabi_dadd+0x270>
1000076e:	001d      	movs	r5, r3
10000770:	4315      	orrs	r5, r2
10000772:	2c00      	cmp	r4, #0
10000774:	d143      	bne.n	100007fe <__aeabi_dadd+0x23a>
10000776:	2d00      	cmp	r5, #0
10000778:	d100      	bne.n	1000077c <__aeabi_dadd+0x1b8>
1000077a:	e1d5      	b.n	10000b28 <__aeabi_dadd+0x564>
1000077c:	0005      	movs	r5, r0
1000077e:	430d      	orrs	r5, r1
10000780:	d00d      	beq.n	1000079e <__aeabi_dadd+0x1da>
10000782:	1851      	adds	r1, r2, r1
10000784:	4291      	cmp	r1, r2
10000786:	4192      	sbcs	r2, r2
10000788:	181b      	adds	r3, r3, r0
1000078a:	4252      	negs	r2, r2
1000078c:	189b      	adds	r3, r3, r2
1000078e:	000a      	movs	r2, r1
10000790:	2180      	movs	r1, #128	; 0x80
10000792:	0409      	lsls	r1, r1, #16
10000794:	420b      	tst	r3, r1
10000796:	d002      	beq.n	1000079e <__aeabi_dadd+0x1da>
10000798:	495c      	ldr	r1, [pc, #368]	; (1000090c <__aeabi_dadd+0x348>)
1000079a:	3401      	adds	r4, #1
1000079c:	400b      	ands	r3, r1
1000079e:	0751      	lsls	r1, r2, #29
100007a0:	d009      	beq.n	100007b6 <__aeabi_dadd+0x1f2>
100007a2:	210f      	movs	r1, #15
100007a4:	4011      	ands	r1, r2
100007a6:	2904      	cmp	r1, #4
100007a8:	d005      	beq.n	100007b6 <__aeabi_dadd+0x1f2>
100007aa:	1d11      	adds	r1, r2, #4
100007ac:	4291      	cmp	r1, r2
100007ae:	4192      	sbcs	r2, r2
100007b0:	4252      	negs	r2, r2
100007b2:	189b      	adds	r3, r3, r2
100007b4:	000a      	movs	r2, r1
100007b6:	0219      	lsls	r1, r3, #8
100007b8:	d506      	bpl.n	100007c8 <__aeabi_dadd+0x204>
100007ba:	4953      	ldr	r1, [pc, #332]	; (10000908 <__aeabi_dadd+0x344>)
100007bc:	3401      	adds	r4, #1
100007be:	428c      	cmp	r4, r1
100007c0:	d100      	bne.n	100007c4 <__aeabi_dadd+0x200>
100007c2:	e1c6      	b.n	10000b52 <__aeabi_dadd+0x58e>
100007c4:	4951      	ldr	r1, [pc, #324]	; (1000090c <__aeabi_dadd+0x348>)
100007c6:	400b      	ands	r3, r1
100007c8:	0759      	lsls	r1, r3, #29
100007ca:	08d2      	lsrs	r2, r2, #3
100007cc:	430a      	orrs	r2, r1
100007ce:	494e      	ldr	r1, [pc, #312]	; (10000908 <__aeabi_dadd+0x344>)
100007d0:	08db      	lsrs	r3, r3, #3
100007d2:	428c      	cmp	r4, r1
100007d4:	d106      	bne.n	100007e4 <__aeabi_dadd+0x220>
100007d6:	0011      	movs	r1, r2
100007d8:	4319      	orrs	r1, r3
100007da:	d100      	bne.n	100007de <__aeabi_dadd+0x21a>
100007dc:	e1bc      	b.n	10000b58 <__aeabi_dadd+0x594>
100007de:	2180      	movs	r1, #128	; 0x80
100007e0:	0309      	lsls	r1, r1, #12
100007e2:	430b      	orrs	r3, r1
100007e4:	0010      	movs	r0, r2
100007e6:	4a4b      	ldr	r2, [pc, #300]	; (10000914 <__aeabi_dadd+0x350>)
100007e8:	0524      	lsls	r4, r4, #20
100007ea:	031b      	lsls	r3, r3, #12
100007ec:	4014      	ands	r4, r2
100007ee:	0b1b      	lsrs	r3, r3, #12
100007f0:	431c      	orrs	r4, r3
100007f2:	9b00      	ldr	r3, [sp, #0]
100007f4:	07db      	lsls	r3, r3, #31
100007f6:	431c      	orrs	r4, r3
100007f8:	0021      	movs	r1, r4
100007fa:	b003      	add	sp, #12
100007fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100007fe:	2d00      	cmp	r5, #0
10000800:	d100      	bne.n	10000804 <__aeabi_dadd+0x240>
10000802:	e775      	b.n	100006f0 <__aeabi_dadd+0x12c>
10000804:	0005      	movs	r5, r0
10000806:	4c40      	ldr	r4, [pc, #256]	; (10000908 <__aeabi_dadd+0x344>)
10000808:	430d      	orrs	r5, r1
1000080a:	d0c8      	beq.n	1000079e <__aeabi_dadd+0x1da>
1000080c:	075c      	lsls	r4, r3, #29
1000080e:	08d2      	lsrs	r2, r2, #3
10000810:	4322      	orrs	r2, r4
10000812:	2480      	movs	r4, #128	; 0x80
10000814:	08db      	lsrs	r3, r3, #3
10000816:	0324      	lsls	r4, r4, #12
10000818:	4223      	tst	r3, r4
1000081a:	d006      	beq.n	1000082a <__aeabi_dadd+0x266>
1000081c:	08c5      	lsrs	r5, r0, #3
1000081e:	4225      	tst	r5, r4
10000820:	d103      	bne.n	1000082a <__aeabi_dadd+0x266>
10000822:	002b      	movs	r3, r5
10000824:	08ca      	lsrs	r2, r1, #3
10000826:	0740      	lsls	r0, r0, #29
10000828:	4302      	orrs	r2, r0
1000082a:	0f51      	lsrs	r1, r2, #29
1000082c:	00db      	lsls	r3, r3, #3
1000082e:	430b      	orrs	r3, r1
10000830:	00d2      	lsls	r2, r2, #3
10000832:	e6fa      	b.n	1000062a <__aeabi_dadd+0x66>
10000834:	4c34      	ldr	r4, [pc, #208]	; (10000908 <__aeabi_dadd+0x344>)
10000836:	42a5      	cmp	r5, r4
10000838:	d100      	bne.n	1000083c <__aeabi_dadd+0x278>
1000083a:	e178      	b.n	10000b2e <__aeabi_dadd+0x56a>
1000083c:	1851      	adds	r1, r2, r1
1000083e:	4291      	cmp	r1, r2
10000840:	4192      	sbcs	r2, r2
10000842:	181b      	adds	r3, r3, r0
10000844:	4252      	negs	r2, r2
10000846:	189b      	adds	r3, r3, r2
10000848:	07da      	lsls	r2, r3, #31
1000084a:	0849      	lsrs	r1, r1, #1
1000084c:	430a      	orrs	r2, r1
1000084e:	085b      	lsrs	r3, r3, #1
10000850:	002c      	movs	r4, r5
10000852:	e7a4      	b.n	1000079e <__aeabi_dadd+0x1da>
10000854:	2e00      	cmp	r6, #0
10000856:	dd5f      	ble.n	10000918 <__aeabi_dadd+0x354>
10000858:	2f00      	cmp	r7, #0
1000085a:	d135      	bne.n	100008c8 <__aeabi_dadd+0x304>
1000085c:	0005      	movs	r5, r0
1000085e:	430d      	orrs	r5, r1
10000860:	d100      	bne.n	10000864 <__aeabi_dadd+0x2a0>
10000862:	e168      	b.n	10000b36 <__aeabi_dadd+0x572>
10000864:	1e75      	subs	r5, r6, #1
10000866:	2e01      	cmp	r6, #1
10000868:	d108      	bne.n	1000087c <__aeabi_dadd+0x2b8>
1000086a:	1a51      	subs	r1, r2, r1
1000086c:	428a      	cmp	r2, r1
1000086e:	4192      	sbcs	r2, r2
10000870:	1a1b      	subs	r3, r3, r0
10000872:	4252      	negs	r2, r2
10000874:	1a9b      	subs	r3, r3, r2
10000876:	000a      	movs	r2, r1
10000878:	2401      	movs	r4, #1
1000087a:	e01e      	b.n	100008ba <__aeabi_dadd+0x2f6>
1000087c:	4f22      	ldr	r7, [pc, #136]	; (10000908 <__aeabi_dadd+0x344>)
1000087e:	42be      	cmp	r6, r7
10000880:	d100      	bne.n	10000884 <__aeabi_dadd+0x2c0>
10000882:	e6d2      	b.n	1000062a <__aeabi_dadd+0x66>
10000884:	2d38      	cmp	r5, #56	; 0x38
10000886:	dc39      	bgt.n	100008fc <__aeabi_dadd+0x338>
10000888:	2d1f      	cmp	r5, #31
1000088a:	dc26      	bgt.n	100008da <__aeabi_dadd+0x316>
1000088c:	2620      	movs	r6, #32
1000088e:	0007      	movs	r7, r0
10000890:	1b76      	subs	r6, r6, r5
10000892:	40b7      	lsls	r7, r6
10000894:	46bc      	mov	ip, r7
10000896:	000f      	movs	r7, r1
10000898:	9601      	str	r6, [sp, #4]
1000089a:	40ef      	lsrs	r7, r5
1000089c:	4666      	mov	r6, ip
1000089e:	4337      	orrs	r7, r6
100008a0:	9e01      	ldr	r6, [sp, #4]
100008a2:	40e8      	lsrs	r0, r5
100008a4:	40b1      	lsls	r1, r6
100008a6:	1e4e      	subs	r6, r1, #1
100008a8:	41b1      	sbcs	r1, r6
100008aa:	430f      	orrs	r7, r1
100008ac:	1bd7      	subs	r7, r2, r7
100008ae:	1a18      	subs	r0, r3, r0
100008b0:	42ba      	cmp	r2, r7
100008b2:	419b      	sbcs	r3, r3
100008b4:	003a      	movs	r2, r7
100008b6:	425b      	negs	r3, r3
100008b8:	1ac3      	subs	r3, r0, r3
100008ba:	0219      	lsls	r1, r3, #8
100008bc:	d400      	bmi.n	100008c0 <__aeabi_dadd+0x2fc>
100008be:	e76e      	b.n	1000079e <__aeabi_dadd+0x1da>
100008c0:	025b      	lsls	r3, r3, #9
100008c2:	0016      	movs	r6, r2
100008c4:	0a5d      	lsrs	r5, r3, #9
100008c6:	e0e2      	b.n	10000a8e <__aeabi_dadd+0x4ca>
100008c8:	4d0f      	ldr	r5, [pc, #60]	; (10000908 <__aeabi_dadd+0x344>)
100008ca:	42ac      	cmp	r4, r5
100008cc:	d100      	bne.n	100008d0 <__aeabi_dadd+0x30c>
100008ce:	e766      	b.n	1000079e <__aeabi_dadd+0x1da>
100008d0:	2580      	movs	r5, #128	; 0x80
100008d2:	042d      	lsls	r5, r5, #16
100008d4:	4328      	orrs	r0, r5
100008d6:	0035      	movs	r5, r6
100008d8:	e7d4      	b.n	10000884 <__aeabi_dadd+0x2c0>
100008da:	002e      	movs	r6, r5
100008dc:	0007      	movs	r7, r0
100008de:	3e20      	subs	r6, #32
100008e0:	40f7      	lsrs	r7, r6
100008e2:	2600      	movs	r6, #0
100008e4:	2d20      	cmp	r5, #32
100008e6:	d003      	beq.n	100008f0 <__aeabi_dadd+0x32c>
100008e8:	3640      	adds	r6, #64	; 0x40
100008ea:	1b75      	subs	r5, r6, r5
100008ec:	40a8      	lsls	r0, r5
100008ee:	0006      	movs	r6, r0
100008f0:	4331      	orrs	r1, r6
100008f2:	1e48      	subs	r0, r1, #1
100008f4:	4181      	sbcs	r1, r0
100008f6:	430f      	orrs	r7, r1
100008f8:	2000      	movs	r0, #0
100008fa:	e7d7      	b.n	100008ac <__aeabi_dadd+0x2e8>
100008fc:	4308      	orrs	r0, r1
100008fe:	0007      	movs	r7, r0
10000900:	1e79      	subs	r1, r7, #1
10000902:	418f      	sbcs	r7, r1
10000904:	e7f8      	b.n	100008f8 <__aeabi_dadd+0x334>
10000906:	46c0      	nop			; (mov r8, r8)
10000908:	000007ff 	.word	0x000007ff
1000090c:	ff7fffff 	.word	0xff7fffff
10000910:	000007fe 	.word	0x000007fe
10000914:	7ff00000 	.word	0x7ff00000
10000918:	2e00      	cmp	r6, #0
1000091a:	d052      	beq.n	100009c2 <__aeabi_dadd+0x3fe>
1000091c:	1b3d      	subs	r5, r7, r4
1000091e:	2c00      	cmp	r4, #0
10000920:	d116      	bne.n	10000950 <__aeabi_dadd+0x38c>
10000922:	001c      	movs	r4, r3
10000924:	4314      	orrs	r4, r2
10000926:	d100      	bne.n	1000092a <__aeabi_dadd+0x366>
10000928:	e107      	b.n	10000b3a <__aeabi_dadd+0x576>
1000092a:	1e6c      	subs	r4, r5, #1
1000092c:	2d01      	cmp	r5, #1
1000092e:	d108      	bne.n	10000942 <__aeabi_dadd+0x37e>
10000930:	1a8a      	subs	r2, r1, r2
10000932:	4291      	cmp	r1, r2
10000934:	4189      	sbcs	r1, r1
10000936:	1ac3      	subs	r3, r0, r3
10000938:	4249      	negs	r1, r1
1000093a:	1a5b      	subs	r3, r3, r1
1000093c:	4661      	mov	r1, ip
1000093e:	9100      	str	r1, [sp, #0]
10000940:	e79a      	b.n	10000878 <__aeabi_dadd+0x2b4>
10000942:	4e86      	ldr	r6, [pc, #536]	; (10000b5c <__aeabi_dadd+0x598>)
10000944:	42b5      	cmp	r5, r6
10000946:	d10a      	bne.n	1000095e <__aeabi_dadd+0x39a>
10000948:	0003      	movs	r3, r0
1000094a:	000a      	movs	r2, r1
1000094c:	4c83      	ldr	r4, [pc, #524]	; (10000b5c <__aeabi_dadd+0x598>)
1000094e:	e04c      	b.n	100009ea <__aeabi_dadd+0x426>
10000950:	4c82      	ldr	r4, [pc, #520]	; (10000b5c <__aeabi_dadd+0x598>)
10000952:	42a7      	cmp	r7, r4
10000954:	d0f8      	beq.n	10000948 <__aeabi_dadd+0x384>
10000956:	2480      	movs	r4, #128	; 0x80
10000958:	0424      	lsls	r4, r4, #16
1000095a:	4323      	orrs	r3, r4
1000095c:	002c      	movs	r4, r5
1000095e:	2c38      	cmp	r4, #56	; 0x38
10000960:	dc2b      	bgt.n	100009ba <__aeabi_dadd+0x3f6>
10000962:	2c1f      	cmp	r4, #31
10000964:	dc18      	bgt.n	10000998 <__aeabi_dadd+0x3d4>
10000966:	2520      	movs	r5, #32
10000968:	001e      	movs	r6, r3
1000096a:	1b2d      	subs	r5, r5, r4
1000096c:	40ae      	lsls	r6, r5
1000096e:	9500      	str	r5, [sp, #0]
10000970:	0035      	movs	r5, r6
10000972:	0016      	movs	r6, r2
10000974:	40e6      	lsrs	r6, r4
10000976:	432e      	orrs	r6, r5
10000978:	9d00      	ldr	r5, [sp, #0]
1000097a:	40e3      	lsrs	r3, r4
1000097c:	40aa      	lsls	r2, r5
1000097e:	1e55      	subs	r5, r2, #1
10000980:	41aa      	sbcs	r2, r5
10000982:	4332      	orrs	r2, r6
10000984:	1a8a      	subs	r2, r1, r2
10000986:	4291      	cmp	r1, r2
10000988:	4189      	sbcs	r1, r1
1000098a:	1ac3      	subs	r3, r0, r3
1000098c:	4249      	negs	r1, r1
1000098e:	1a5b      	subs	r3, r3, r1
10000990:	4661      	mov	r1, ip
10000992:	003c      	movs	r4, r7
10000994:	9100      	str	r1, [sp, #0]
10000996:	e790      	b.n	100008ba <__aeabi_dadd+0x2f6>
10000998:	0025      	movs	r5, r4
1000099a:	001e      	movs	r6, r3
1000099c:	3d20      	subs	r5, #32
1000099e:	40ee      	lsrs	r6, r5
100009a0:	2500      	movs	r5, #0
100009a2:	2c20      	cmp	r4, #32
100009a4:	d003      	beq.n	100009ae <__aeabi_dadd+0x3ea>
100009a6:	3540      	adds	r5, #64	; 0x40
100009a8:	1b2c      	subs	r4, r5, r4
100009aa:	40a3      	lsls	r3, r4
100009ac:	001d      	movs	r5, r3
100009ae:	432a      	orrs	r2, r5
100009b0:	1e53      	subs	r3, r2, #1
100009b2:	419a      	sbcs	r2, r3
100009b4:	4332      	orrs	r2, r6
100009b6:	2300      	movs	r3, #0
100009b8:	e7e4      	b.n	10000984 <__aeabi_dadd+0x3c0>
100009ba:	431a      	orrs	r2, r3
100009bc:	1e53      	subs	r3, r2, #1
100009be:	419a      	sbcs	r2, r3
100009c0:	e7f9      	b.n	100009b6 <__aeabi_dadd+0x3f2>
100009c2:	4e67      	ldr	r6, [pc, #412]	; (10000b60 <__aeabi_dadd+0x59c>)
100009c4:	1c65      	adds	r5, r4, #1
100009c6:	4235      	tst	r5, r6
100009c8:	d14f      	bne.n	10000a6a <__aeabi_dadd+0x4a6>
100009ca:	001e      	movs	r6, r3
100009cc:	0005      	movs	r5, r0
100009ce:	4316      	orrs	r6, r2
100009d0:	430d      	orrs	r5, r1
100009d2:	2c00      	cmp	r4, #0
100009d4:	d127      	bne.n	10000a26 <__aeabi_dadd+0x462>
100009d6:	2e00      	cmp	r6, #0
100009d8:	d10a      	bne.n	100009f0 <__aeabi_dadd+0x42c>
100009da:	0023      	movs	r3, r4
100009dc:	0022      	movs	r2, r4
100009de:	9400      	str	r4, [sp, #0]
100009e0:	2d00      	cmp	r5, #0
100009e2:	d100      	bne.n	100009e6 <__aeabi_dadd+0x422>
100009e4:	e6db      	b.n	1000079e <__aeabi_dadd+0x1da>
100009e6:	0003      	movs	r3, r0
100009e8:	000a      	movs	r2, r1
100009ea:	4661      	mov	r1, ip
100009ec:	9100      	str	r1, [sp, #0]
100009ee:	e6d6      	b.n	1000079e <__aeabi_dadd+0x1da>
100009f0:	2d00      	cmp	r5, #0
100009f2:	d100      	bne.n	100009f6 <__aeabi_dadd+0x432>
100009f4:	e6d3      	b.n	1000079e <__aeabi_dadd+0x1da>
100009f6:	1a56      	subs	r6, r2, r1
100009f8:	42b2      	cmp	r2, r6
100009fa:	41bf      	sbcs	r7, r7
100009fc:	1a1d      	subs	r5, r3, r0
100009fe:	427f      	negs	r7, r7
10000a00:	1bed      	subs	r5, r5, r7
10000a02:	2780      	movs	r7, #128	; 0x80
10000a04:	043f      	lsls	r7, r7, #16
10000a06:	423d      	tst	r5, r7
10000a08:	d006      	beq.n	10000a18 <__aeabi_dadd+0x454>
10000a0a:	1a8a      	subs	r2, r1, r2
10000a0c:	4291      	cmp	r1, r2
10000a0e:	4189      	sbcs	r1, r1
10000a10:	1ac3      	subs	r3, r0, r3
10000a12:	4249      	negs	r1, r1
10000a14:	1a5b      	subs	r3, r3, r1
10000a16:	e7e8      	b.n	100009ea <__aeabi_dadd+0x426>
10000a18:	0032      	movs	r2, r6
10000a1a:	432a      	orrs	r2, r5
10000a1c:	d100      	bne.n	10000a20 <__aeabi_dadd+0x45c>
10000a1e:	e090      	b.n	10000b42 <__aeabi_dadd+0x57e>
10000a20:	002b      	movs	r3, r5
10000a22:	0032      	movs	r2, r6
10000a24:	e6bb      	b.n	1000079e <__aeabi_dadd+0x1da>
10000a26:	2e00      	cmp	r6, #0
10000a28:	d107      	bne.n	10000a3a <__aeabi_dadd+0x476>
10000a2a:	2d00      	cmp	r5, #0
10000a2c:	d100      	bne.n	10000a30 <__aeabi_dadd+0x46c>
10000a2e:	e08b      	b.n	10000b48 <__aeabi_dadd+0x584>
10000a30:	000a      	movs	r2, r1
10000a32:	4661      	mov	r1, ip
10000a34:	0003      	movs	r3, r0
10000a36:	9100      	str	r1, [sp, #0]
10000a38:	e5f7      	b.n	1000062a <__aeabi_dadd+0x66>
10000a3a:	4c48      	ldr	r4, [pc, #288]	; (10000b5c <__aeabi_dadd+0x598>)
10000a3c:	2d00      	cmp	r5, #0
10000a3e:	d100      	bne.n	10000a42 <__aeabi_dadd+0x47e>
10000a40:	e6ad      	b.n	1000079e <__aeabi_dadd+0x1da>
10000a42:	075c      	lsls	r4, r3, #29
10000a44:	08d2      	lsrs	r2, r2, #3
10000a46:	4322      	orrs	r2, r4
10000a48:	2480      	movs	r4, #128	; 0x80
10000a4a:	08db      	lsrs	r3, r3, #3
10000a4c:	0324      	lsls	r4, r4, #12
10000a4e:	4223      	tst	r3, r4
10000a50:	d100      	bne.n	10000a54 <__aeabi_dadd+0x490>
10000a52:	e6ea      	b.n	1000082a <__aeabi_dadd+0x266>
10000a54:	08c5      	lsrs	r5, r0, #3
10000a56:	4225      	tst	r5, r4
10000a58:	d000      	beq.n	10000a5c <__aeabi_dadd+0x498>
10000a5a:	e6e6      	b.n	1000082a <__aeabi_dadd+0x266>
10000a5c:	08ca      	lsrs	r2, r1, #3
10000a5e:	4661      	mov	r1, ip
10000a60:	0740      	lsls	r0, r0, #29
10000a62:	002b      	movs	r3, r5
10000a64:	4302      	orrs	r2, r0
10000a66:	9100      	str	r1, [sp, #0]
10000a68:	e6df      	b.n	1000082a <__aeabi_dadd+0x266>
10000a6a:	1a56      	subs	r6, r2, r1
10000a6c:	42b2      	cmp	r2, r6
10000a6e:	41bf      	sbcs	r7, r7
10000a70:	1a1d      	subs	r5, r3, r0
10000a72:	427f      	negs	r7, r7
10000a74:	1bed      	subs	r5, r5, r7
10000a76:	2780      	movs	r7, #128	; 0x80
10000a78:	043f      	lsls	r7, r7, #16
10000a7a:	423d      	tst	r5, r7
10000a7c:	d02d      	beq.n	10000ada <__aeabi_dadd+0x516>
10000a7e:	1a8e      	subs	r6, r1, r2
10000a80:	42b1      	cmp	r1, r6
10000a82:	41ad      	sbcs	r5, r5
10000a84:	1ac3      	subs	r3, r0, r3
10000a86:	426d      	negs	r5, r5
10000a88:	1b5d      	subs	r5, r3, r5
10000a8a:	4663      	mov	r3, ip
10000a8c:	9300      	str	r3, [sp, #0]
10000a8e:	2d00      	cmp	r5, #0
10000a90:	d029      	beq.n	10000ae6 <__aeabi_dadd+0x522>
10000a92:	0028      	movs	r0, r5
10000a94:	f7ff fc18 	bl	100002c8 <__clzsi2>
10000a98:	0001      	movs	r1, r0
10000a9a:	3908      	subs	r1, #8
10000a9c:	291f      	cmp	r1, #31
10000a9e:	dc27      	bgt.n	10000af0 <__aeabi_dadd+0x52c>
10000aa0:	2320      	movs	r3, #32
10000aa2:	0032      	movs	r2, r6
10000aa4:	1a5b      	subs	r3, r3, r1
10000aa6:	40da      	lsrs	r2, r3
10000aa8:	408d      	lsls	r5, r1
10000aaa:	4315      	orrs	r5, r2
10000aac:	0032      	movs	r2, r6
10000aae:	408a      	lsls	r2, r1
10000ab0:	428c      	cmp	r4, r1
10000ab2:	dc32      	bgt.n	10000b1a <__aeabi_dadd+0x556>
10000ab4:	1b09      	subs	r1, r1, r4
10000ab6:	1c4b      	adds	r3, r1, #1
10000ab8:	2b1f      	cmp	r3, #31
10000aba:	dc1e      	bgt.n	10000afa <__aeabi_dadd+0x536>
10000abc:	2120      	movs	r1, #32
10000abe:	002c      	movs	r4, r5
10000ac0:	1ac9      	subs	r1, r1, r3
10000ac2:	0010      	movs	r0, r2
10000ac4:	408a      	lsls	r2, r1
10000ac6:	40dd      	lsrs	r5, r3
10000ac8:	408c      	lsls	r4, r1
10000aca:	40d8      	lsrs	r0, r3
10000acc:	1e51      	subs	r1, r2, #1
10000ace:	418a      	sbcs	r2, r1
10000ad0:	002b      	movs	r3, r5
10000ad2:	4320      	orrs	r0, r4
10000ad4:	4302      	orrs	r2, r0
10000ad6:	2400      	movs	r4, #0
10000ad8:	e661      	b.n	1000079e <__aeabi_dadd+0x1da>
10000ada:	0032      	movs	r2, r6
10000adc:	432a      	orrs	r2, r5
10000ade:	d1d6      	bne.n	10000a8e <__aeabi_dadd+0x4ca>
10000ae0:	0013      	movs	r3, r2
10000ae2:	0014      	movs	r4, r2
10000ae4:	e02e      	b.n	10000b44 <__aeabi_dadd+0x580>
10000ae6:	0030      	movs	r0, r6
10000ae8:	f7ff fbee 	bl	100002c8 <__clzsi2>
10000aec:	3020      	adds	r0, #32
10000aee:	e7d3      	b.n	10000a98 <__aeabi_dadd+0x4d4>
10000af0:	0035      	movs	r5, r6
10000af2:	3828      	subs	r0, #40	; 0x28
10000af4:	4085      	lsls	r5, r0
10000af6:	2200      	movs	r2, #0
10000af8:	e7da      	b.n	10000ab0 <__aeabi_dadd+0x4ec>
10000afa:	0028      	movs	r0, r5
10000afc:	391f      	subs	r1, #31
10000afe:	40c8      	lsrs	r0, r1
10000b00:	2100      	movs	r1, #0
10000b02:	2b20      	cmp	r3, #32
10000b04:	d003      	beq.n	10000b0e <__aeabi_dadd+0x54a>
10000b06:	3140      	adds	r1, #64	; 0x40
10000b08:	1acb      	subs	r3, r1, r3
10000b0a:	0029      	movs	r1, r5
10000b0c:	4099      	lsls	r1, r3
10000b0e:	430a      	orrs	r2, r1
10000b10:	1e53      	subs	r3, r2, #1
10000b12:	419a      	sbcs	r2, r3
10000b14:	2300      	movs	r3, #0
10000b16:	4302      	orrs	r2, r0
10000b18:	e7dd      	b.n	10000ad6 <__aeabi_dadd+0x512>
10000b1a:	4b12      	ldr	r3, [pc, #72]	; (10000b64 <__aeabi_dadd+0x5a0>)
10000b1c:	1a64      	subs	r4, r4, r1
10000b1e:	402b      	ands	r3, r5
10000b20:	e63d      	b.n	1000079e <__aeabi_dadd+0x1da>
10000b22:	0003      	movs	r3, r0
10000b24:	000a      	movs	r2, r1
10000b26:	e693      	b.n	10000850 <__aeabi_dadd+0x28c>
10000b28:	0003      	movs	r3, r0
10000b2a:	000a      	movs	r2, r1
10000b2c:	e637      	b.n	1000079e <__aeabi_dadd+0x1da>
10000b2e:	4c0b      	ldr	r4, [pc, #44]	; (10000b5c <__aeabi_dadd+0x598>)
10000b30:	2300      	movs	r3, #0
10000b32:	001a      	movs	r2, r3
10000b34:	e633      	b.n	1000079e <__aeabi_dadd+0x1da>
10000b36:	0034      	movs	r4, r6
10000b38:	e631      	b.n	1000079e <__aeabi_dadd+0x1da>
10000b3a:	0003      	movs	r3, r0
10000b3c:	000a      	movs	r2, r1
10000b3e:	002c      	movs	r4, r5
10000b40:	e753      	b.n	100009ea <__aeabi_dadd+0x426>
10000b42:	0013      	movs	r3, r2
10000b44:	9200      	str	r2, [sp, #0]
10000b46:	e62a      	b.n	1000079e <__aeabi_dadd+0x1da>
10000b48:	2380      	movs	r3, #128	; 0x80
10000b4a:	002a      	movs	r2, r5
10000b4c:	9500      	str	r5, [sp, #0]
10000b4e:	03db      	lsls	r3, r3, #15
10000b50:	e56b      	b.n	1000062a <__aeabi_dadd+0x66>
10000b52:	2300      	movs	r3, #0
10000b54:	001a      	movs	r2, r3
10000b56:	e637      	b.n	100007c8 <__aeabi_dadd+0x204>
10000b58:	000b      	movs	r3, r1
10000b5a:	e643      	b.n	100007e4 <__aeabi_dadd+0x220>
10000b5c:	000007ff 	.word	0x000007ff
10000b60:	000007fe 	.word	0x000007fe
10000b64:	ff7fffff 	.word	0xff7fffff

10000b68 <__eqdf2>:
10000b68:	b5f0      	push	{r4, r5, r6, r7, lr}
10000b6a:	0006      	movs	r6, r0
10000b6c:	0008      	movs	r0, r1
10000b6e:	0019      	movs	r1, r3
10000b70:	0017      	movs	r7, r2
10000b72:	b085      	sub	sp, #20
10000b74:	0fc2      	lsrs	r2, r0, #31
10000b76:	0304      	lsls	r4, r0, #12
10000b78:	0043      	lsls	r3, r0, #1
10000b7a:	4817      	ldr	r0, [pc, #92]	; (10000bd8 <__eqdf2+0x70>)
10000b7c:	030d      	lsls	r5, r1, #12
10000b7e:	9201      	str	r2, [sp, #4]
10000b80:	004a      	lsls	r2, r1, #1
10000b82:	0fc9      	lsrs	r1, r1, #31
10000b84:	0b24      	lsrs	r4, r4, #12
10000b86:	0d5b      	lsrs	r3, r3, #21
10000b88:	9703      	str	r7, [sp, #12]
10000b8a:	0b2d      	lsrs	r5, r5, #12
10000b8c:	0d52      	lsrs	r2, r2, #21
10000b8e:	9102      	str	r1, [sp, #8]
10000b90:	4283      	cmp	r3, r0
10000b92:	d106      	bne.n	10000ba2 <__eqdf2+0x3a>
10000b94:	0021      	movs	r1, r4
10000b96:	2001      	movs	r0, #1
10000b98:	4331      	orrs	r1, r6
10000b9a:	d119      	bne.n	10000bd0 <__eqdf2+0x68>
10000b9c:	429a      	cmp	r2, r3
10000b9e:	d117      	bne.n	10000bd0 <__eqdf2+0x68>
10000ba0:	e001      	b.n	10000ba6 <__eqdf2+0x3e>
10000ba2:	4282      	cmp	r2, r0
10000ba4:	d102      	bne.n	10000bac <__eqdf2+0x44>
10000ba6:	2001      	movs	r0, #1
10000ba8:	432f      	orrs	r7, r5
10000baa:	d111      	bne.n	10000bd0 <__eqdf2+0x68>
10000bac:	2001      	movs	r0, #1
10000bae:	4293      	cmp	r3, r2
10000bb0:	d10e      	bne.n	10000bd0 <__eqdf2+0x68>
10000bb2:	42ac      	cmp	r4, r5
10000bb4:	d10c      	bne.n	10000bd0 <__eqdf2+0x68>
10000bb6:	9903      	ldr	r1, [sp, #12]
10000bb8:	428e      	cmp	r6, r1
10000bba:	d109      	bne.n	10000bd0 <__eqdf2+0x68>
10000bbc:	9a01      	ldr	r2, [sp, #4]
10000bbe:	9902      	ldr	r1, [sp, #8]
10000bc0:	428a      	cmp	r2, r1
10000bc2:	d007      	beq.n	10000bd4 <__eqdf2+0x6c>
10000bc4:	2b00      	cmp	r3, #0
10000bc6:	d103      	bne.n	10000bd0 <__eqdf2+0x68>
10000bc8:	0020      	movs	r0, r4
10000bca:	4330      	orrs	r0, r6
10000bcc:	1e43      	subs	r3, r0, #1
10000bce:	4198      	sbcs	r0, r3
10000bd0:	b005      	add	sp, #20
10000bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000bd4:	2000      	movs	r0, #0
10000bd6:	e7fb      	b.n	10000bd0 <__eqdf2+0x68>
10000bd8:	000007ff 	.word	0x000007ff

10000bdc <__gedf2>:
10000bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
10000bde:	001e      	movs	r6, r3
10000be0:	000d      	movs	r5, r1
10000be2:	0017      	movs	r7, r2
10000be4:	b085      	sub	sp, #20
10000be6:	0ff6      	lsrs	r6, r6, #31
10000be8:	9601      	str	r6, [sp, #4]
10000bea:	4e29      	ldr	r6, [pc, #164]	; (10000c90 <__gedf2+0xb4>)
10000bec:	032a      	lsls	r2, r5, #12
10000bee:	006c      	lsls	r4, r5, #1
10000bf0:	0001      	movs	r1, r0
10000bf2:	9002      	str	r0, [sp, #8]
10000bf4:	0fe8      	lsrs	r0, r5, #31
10000bf6:	031d      	lsls	r5, r3, #12
10000bf8:	005b      	lsls	r3, r3, #1
10000bfa:	0b12      	lsrs	r2, r2, #12
10000bfc:	0d64      	lsrs	r4, r4, #21
10000bfe:	9703      	str	r7, [sp, #12]
10000c00:	0b2d      	lsrs	r5, r5, #12
10000c02:	0d5b      	lsrs	r3, r3, #21
10000c04:	42b4      	cmp	r4, r6
10000c06:	d105      	bne.n	10000c14 <__gedf2+0x38>
10000c08:	0016      	movs	r6, r2
10000c0a:	430e      	orrs	r6, r1
10000c0c:	d03a      	beq.n	10000c84 <__gedf2+0xa8>
10000c0e:	2002      	movs	r0, #2
10000c10:	4240      	negs	r0, r0
10000c12:	e022      	b.n	10000c5a <__gedf2+0x7e>
10000c14:	42b3      	cmp	r3, r6
10000c16:	d102      	bne.n	10000c1e <__gedf2+0x42>
10000c18:	002e      	movs	r6, r5
10000c1a:	433e      	orrs	r6, r7
10000c1c:	d1f7      	bne.n	10000c0e <__gedf2+0x32>
10000c1e:	2c00      	cmp	r4, #0
10000c20:	d132      	bne.n	10000c88 <__gedf2+0xac>
10000c22:	4311      	orrs	r1, r2
10000c24:	000e      	movs	r6, r1
10000c26:	4271      	negs	r1, r6
10000c28:	4171      	adcs	r1, r6
10000c2a:	2b00      	cmp	r3, #0
10000c2c:	d101      	bne.n	10000c32 <__gedf2+0x56>
10000c2e:	432f      	orrs	r7, r5
10000c30:	d022      	beq.n	10000c78 <__gedf2+0x9c>
10000c32:	2900      	cmp	r1, #0
10000c34:	d108      	bne.n	10000c48 <__gedf2+0x6c>
10000c36:	9901      	ldr	r1, [sp, #4]
10000c38:	4288      	cmp	r0, r1
10000c3a:	d101      	bne.n	10000c40 <__gedf2+0x64>
10000c3c:	429c      	cmp	r4, r3
10000c3e:	dd08      	ble.n	10000c52 <__gedf2+0x76>
10000c40:	2800      	cmp	r0, #0
10000c42:	d104      	bne.n	10000c4e <__gedf2+0x72>
10000c44:	2001      	movs	r0, #1
10000c46:	e008      	b.n	10000c5a <__gedf2+0x7e>
10000c48:	9b01      	ldr	r3, [sp, #4]
10000c4a:	1e18      	subs	r0, r3, #0
10000c4c:	d105      	bne.n	10000c5a <__gedf2+0x7e>
10000c4e:	2001      	movs	r0, #1
10000c50:	e7de      	b.n	10000c10 <__gedf2+0x34>
10000c52:	429c      	cmp	r4, r3
10000c54:	da03      	bge.n	10000c5e <__gedf2+0x82>
10000c56:	2800      	cmp	r0, #0
10000c58:	d0f9      	beq.n	10000c4e <__gedf2+0x72>
10000c5a:	b005      	add	sp, #20
10000c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000c5e:	42aa      	cmp	r2, r5
10000c60:	d8ee      	bhi.n	10000c40 <__gedf2+0x64>
10000c62:	d10c      	bne.n	10000c7e <__gedf2+0xa2>
10000c64:	9b02      	ldr	r3, [sp, #8]
10000c66:	9a03      	ldr	r2, [sp, #12]
10000c68:	4293      	cmp	r3, r2
10000c6a:	d8e9      	bhi.n	10000c40 <__gedf2+0x64>
10000c6c:	9b02      	ldr	r3, [sp, #8]
10000c6e:	9a03      	ldr	r2, [sp, #12]
10000c70:	4293      	cmp	r3, r2
10000c72:	d3f0      	bcc.n	10000c56 <__gedf2+0x7a>
10000c74:	2000      	movs	r0, #0
10000c76:	e7f0      	b.n	10000c5a <__gedf2+0x7e>
10000c78:	2900      	cmp	r1, #0
10000c7a:	d1fb      	bne.n	10000c74 <__gedf2+0x98>
10000c7c:	e7e0      	b.n	10000c40 <__gedf2+0x64>
10000c7e:	42aa      	cmp	r2, r5
10000c80:	d3e9      	bcc.n	10000c56 <__gedf2+0x7a>
10000c82:	e7f7      	b.n	10000c74 <__gedf2+0x98>
10000c84:	42a3      	cmp	r3, r4
10000c86:	d0c7      	beq.n	10000c18 <__gedf2+0x3c>
10000c88:	2b00      	cmp	r3, #0
10000c8a:	d1d4      	bne.n	10000c36 <__gedf2+0x5a>
10000c8c:	0019      	movs	r1, r3
10000c8e:	e7ce      	b.n	10000c2e <__gedf2+0x52>
10000c90:	000007ff 	.word	0x000007ff

10000c94 <__ledf2>:
10000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
10000c96:	001e      	movs	r6, r3
10000c98:	000d      	movs	r5, r1
10000c9a:	0017      	movs	r7, r2
10000c9c:	b085      	sub	sp, #20
10000c9e:	0ff6      	lsrs	r6, r6, #31
10000ca0:	9601      	str	r6, [sp, #4]
10000ca2:	4e29      	ldr	r6, [pc, #164]	; (10000d48 <__ledf2+0xb4>)
10000ca4:	032a      	lsls	r2, r5, #12
10000ca6:	006c      	lsls	r4, r5, #1
10000ca8:	0001      	movs	r1, r0
10000caa:	9002      	str	r0, [sp, #8]
10000cac:	0fe8      	lsrs	r0, r5, #31
10000cae:	031d      	lsls	r5, r3, #12
10000cb0:	005b      	lsls	r3, r3, #1
10000cb2:	0b12      	lsrs	r2, r2, #12
10000cb4:	0d64      	lsrs	r4, r4, #21
10000cb6:	9703      	str	r7, [sp, #12]
10000cb8:	0b2d      	lsrs	r5, r5, #12
10000cba:	0d5b      	lsrs	r3, r3, #21
10000cbc:	42b4      	cmp	r4, r6
10000cbe:	d104      	bne.n	10000cca <__ledf2+0x36>
10000cc0:	0016      	movs	r6, r2
10000cc2:	430e      	orrs	r6, r1
10000cc4:	d03a      	beq.n	10000d3c <__ledf2+0xa8>
10000cc6:	2002      	movs	r0, #2
10000cc8:	e023      	b.n	10000d12 <__ledf2+0x7e>
10000cca:	42b3      	cmp	r3, r6
10000ccc:	d102      	bne.n	10000cd4 <__ledf2+0x40>
10000cce:	002e      	movs	r6, r5
10000cd0:	433e      	orrs	r6, r7
10000cd2:	d1f8      	bne.n	10000cc6 <__ledf2+0x32>
10000cd4:	2c00      	cmp	r4, #0
10000cd6:	d133      	bne.n	10000d40 <__ledf2+0xac>
10000cd8:	4311      	orrs	r1, r2
10000cda:	000e      	movs	r6, r1
10000cdc:	4271      	negs	r1, r6
10000cde:	4171      	adcs	r1, r6
10000ce0:	2b00      	cmp	r3, #0
10000ce2:	d101      	bne.n	10000ce8 <__ledf2+0x54>
10000ce4:	432f      	orrs	r7, r5
10000ce6:	d023      	beq.n	10000d30 <__ledf2+0x9c>
10000ce8:	2900      	cmp	r1, #0
10000cea:	d108      	bne.n	10000cfe <__ledf2+0x6a>
10000cec:	9901      	ldr	r1, [sp, #4]
10000cee:	4288      	cmp	r0, r1
10000cf0:	d101      	bne.n	10000cf6 <__ledf2+0x62>
10000cf2:	429c      	cmp	r4, r3
10000cf4:	dd09      	ble.n	10000d0a <__ledf2+0x76>
10000cf6:	2800      	cmp	r0, #0
10000cf8:	d104      	bne.n	10000d04 <__ledf2+0x70>
10000cfa:	2001      	movs	r0, #1
10000cfc:	e009      	b.n	10000d12 <__ledf2+0x7e>
10000cfe:	9b01      	ldr	r3, [sp, #4]
10000d00:	1e18      	subs	r0, r3, #0
10000d02:	d106      	bne.n	10000d12 <__ledf2+0x7e>
10000d04:	2001      	movs	r0, #1
10000d06:	4240      	negs	r0, r0
10000d08:	e003      	b.n	10000d12 <__ledf2+0x7e>
10000d0a:	429c      	cmp	r4, r3
10000d0c:	da03      	bge.n	10000d16 <__ledf2+0x82>
10000d0e:	2800      	cmp	r0, #0
10000d10:	d0f8      	beq.n	10000d04 <__ledf2+0x70>
10000d12:	b005      	add	sp, #20
10000d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000d16:	42aa      	cmp	r2, r5
10000d18:	d8ed      	bhi.n	10000cf6 <__ledf2+0x62>
10000d1a:	d10c      	bne.n	10000d36 <__ledf2+0xa2>
10000d1c:	9b02      	ldr	r3, [sp, #8]
10000d1e:	9a03      	ldr	r2, [sp, #12]
10000d20:	4293      	cmp	r3, r2
10000d22:	d8e8      	bhi.n	10000cf6 <__ledf2+0x62>
10000d24:	9b02      	ldr	r3, [sp, #8]
10000d26:	9a03      	ldr	r2, [sp, #12]
10000d28:	4293      	cmp	r3, r2
10000d2a:	d3f0      	bcc.n	10000d0e <__ledf2+0x7a>
10000d2c:	2000      	movs	r0, #0
10000d2e:	e7f0      	b.n	10000d12 <__ledf2+0x7e>
10000d30:	2900      	cmp	r1, #0
10000d32:	d1fb      	bne.n	10000d2c <__ledf2+0x98>
10000d34:	e7df      	b.n	10000cf6 <__ledf2+0x62>
10000d36:	42aa      	cmp	r2, r5
10000d38:	d3e9      	bcc.n	10000d0e <__ledf2+0x7a>
10000d3a:	e7f7      	b.n	10000d2c <__ledf2+0x98>
10000d3c:	42a3      	cmp	r3, r4
10000d3e:	d0c6      	beq.n	10000cce <__ledf2+0x3a>
10000d40:	2b00      	cmp	r3, #0
10000d42:	d1d3      	bne.n	10000cec <__ledf2+0x58>
10000d44:	0019      	movs	r1, r3
10000d46:	e7cd      	b.n	10000ce4 <__ledf2+0x50>
10000d48:	000007ff 	.word	0x000007ff

10000d4c <__aeabi_dmul>:
10000d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10000d4e:	b08b      	sub	sp, #44	; 0x2c
10000d50:	0017      	movs	r7, r2
10000d52:	9302      	str	r3, [sp, #8]
10000d54:	0fca      	lsrs	r2, r1, #31
10000d56:	030e      	lsls	r6, r1, #12
10000d58:	004b      	lsls	r3, r1, #1
10000d5a:	0004      	movs	r4, r0
10000d5c:	0b36      	lsrs	r6, r6, #12
10000d5e:	0d5b      	lsrs	r3, r3, #21
10000d60:	9204      	str	r2, [sp, #16]
10000d62:	9203      	str	r2, [sp, #12]
10000d64:	d046      	beq.n	10000df4 <__aeabi_dmul+0xa8>
10000d66:	4ac8      	ldr	r2, [pc, #800]	; (10001088 <__aeabi_dmul+0x33c>)
10000d68:	4293      	cmp	r3, r2
10000d6a:	d066      	beq.n	10000e3a <__aeabi_dmul+0xee>
10000d6c:	00f6      	lsls	r6, r6, #3
10000d6e:	0f42      	lsrs	r2, r0, #29
10000d70:	4332      	orrs	r2, r6
10000d72:	2680      	movs	r6, #128	; 0x80
10000d74:	0436      	lsls	r6, r6, #16
10000d76:	4316      	orrs	r6, r2
10000d78:	4ac4      	ldr	r2, [pc, #784]	; (1000108c <__aeabi_dmul+0x340>)
10000d7a:	00c5      	lsls	r5, r0, #3
10000d7c:	189b      	adds	r3, r3, r2
10000d7e:	9301      	str	r3, [sp, #4]
10000d80:	2300      	movs	r3, #0
10000d82:	9300      	str	r3, [sp, #0]
10000d84:	9b02      	ldr	r3, [sp, #8]
10000d86:	0038      	movs	r0, r7
10000d88:	031c      	lsls	r4, r3, #12
10000d8a:	005a      	lsls	r2, r3, #1
10000d8c:	0fdb      	lsrs	r3, r3, #31
10000d8e:	0b24      	lsrs	r4, r4, #12
10000d90:	0d52      	lsrs	r2, r2, #21
10000d92:	9305      	str	r3, [sp, #20]
10000d94:	d060      	beq.n	10000e58 <__aeabi_dmul+0x10c>
10000d96:	4bbc      	ldr	r3, [pc, #752]	; (10001088 <__aeabi_dmul+0x33c>)
10000d98:	429a      	cmp	r2, r3
10000d9a:	d100      	bne.n	10000d9e <__aeabi_dmul+0x52>
10000d9c:	e07f      	b.n	10000e9e <__aeabi_dmul+0x152>
10000d9e:	0f7b      	lsrs	r3, r7, #29
10000da0:	00e4      	lsls	r4, r4, #3
10000da2:	431c      	orrs	r4, r3
10000da4:	2380      	movs	r3, #128	; 0x80
10000da6:	49b9      	ldr	r1, [pc, #740]	; (1000108c <__aeabi_dmul+0x340>)
10000da8:	041b      	lsls	r3, r3, #16
10000daa:	431c      	orrs	r4, r3
10000dac:	1850      	adds	r0, r2, r1
10000dae:	00fb      	lsls	r3, r7, #3
10000db0:	2200      	movs	r2, #0
10000db2:	9904      	ldr	r1, [sp, #16]
10000db4:	9f05      	ldr	r7, [sp, #20]
10000db6:	4079      	eors	r1, r7
10000db8:	9102      	str	r1, [sp, #8]
10000dba:	9901      	ldr	r1, [sp, #4]
10000dbc:	1841      	adds	r1, r0, r1
10000dbe:	9106      	str	r1, [sp, #24]
10000dc0:	3101      	adds	r1, #1
10000dc2:	9101      	str	r1, [sp, #4]
10000dc4:	9900      	ldr	r1, [sp, #0]
10000dc6:	0088      	lsls	r0, r1, #2
10000dc8:	4310      	orrs	r0, r2
10000dca:	3801      	subs	r0, #1
10000dcc:	280e      	cmp	r0, #14
10000dce:	d900      	bls.n	10000dd2 <__aeabi_dmul+0x86>
10000dd0:	e084      	b.n	10000edc <__aeabi_dmul+0x190>
10000dd2:	f000 fd8f 	bl	100018f4 <__gnu_thumb1_case_uhi>
10000dd6:	0076      	.short	0x0076
10000dd8:	01760076 	.word	0x01760076
10000ddc:	00730073 	.word	0x00730073
10000de0:	017601bb 	.word	0x017601bb
10000de4:	01bb0073 	.word	0x01bb0073
10000de8:	01760073 	.word	0x01760073
10000dec:	01710171 	.word	0x01710171
10000df0:	01670171 	.word	0x01670171
10000df4:	0035      	movs	r5, r6
10000df6:	4305      	orrs	r5, r0
10000df8:	d026      	beq.n	10000e48 <__aeabi_dmul+0xfc>
10000dfa:	2e00      	cmp	r6, #0
10000dfc:	d013      	beq.n	10000e26 <__aeabi_dmul+0xda>
10000dfe:	0030      	movs	r0, r6
10000e00:	f7ff fa62 	bl	100002c8 <__clzsi2>
10000e04:	0005      	movs	r5, r0
10000e06:	3d0b      	subs	r5, #11
10000e08:	2d1c      	cmp	r5, #28
10000e0a:	dc10      	bgt.n	10000e2e <__aeabi_dmul+0xe2>
10000e0c:	0002      	movs	r2, r0
10000e0e:	231d      	movs	r3, #29
10000e10:	0021      	movs	r1, r4
10000e12:	3a08      	subs	r2, #8
10000e14:	4094      	lsls	r4, r2
10000e16:	1b5b      	subs	r3, r3, r5
10000e18:	4096      	lsls	r6, r2
10000e1a:	40d9      	lsrs	r1, r3
10000e1c:	0025      	movs	r5, r4
10000e1e:	430e      	orrs	r6, r1
10000e20:	4b9b      	ldr	r3, [pc, #620]	; (10001090 <__aeabi_dmul+0x344>)
10000e22:	1a1b      	subs	r3, r3, r0
10000e24:	e7ab      	b.n	10000d7e <__aeabi_dmul+0x32>
10000e26:	f7ff fa4f 	bl	100002c8 <__clzsi2>
10000e2a:	3020      	adds	r0, #32
10000e2c:	e7ea      	b.n	10000e04 <__aeabi_dmul+0xb8>
10000e2e:	0003      	movs	r3, r0
10000e30:	3b28      	subs	r3, #40	; 0x28
10000e32:	409c      	lsls	r4, r3
10000e34:	2500      	movs	r5, #0
10000e36:	0026      	movs	r6, r4
10000e38:	e7f2      	b.n	10000e20 <__aeabi_dmul+0xd4>
10000e3a:	4334      	orrs	r4, r6
10000e3c:	1e25      	subs	r5, r4, #0
10000e3e:	d007      	beq.n	10000e50 <__aeabi_dmul+0x104>
10000e40:	9301      	str	r3, [sp, #4]
10000e42:	0005      	movs	r5, r0
10000e44:	2303      	movs	r3, #3
10000e46:	e79c      	b.n	10000d82 <__aeabi_dmul+0x36>
10000e48:	002e      	movs	r6, r5
10000e4a:	2301      	movs	r3, #1
10000e4c:	9501      	str	r5, [sp, #4]
10000e4e:	e798      	b.n	10000d82 <__aeabi_dmul+0x36>
10000e50:	9301      	str	r3, [sp, #4]
10000e52:	0026      	movs	r6, r4
10000e54:	2302      	movs	r3, #2
10000e56:	e794      	b.n	10000d82 <__aeabi_dmul+0x36>
10000e58:	0023      	movs	r3, r4
10000e5a:	433b      	orrs	r3, r7
10000e5c:	d026      	beq.n	10000eac <__aeabi_dmul+0x160>
10000e5e:	2c00      	cmp	r4, #0
10000e60:	d013      	beq.n	10000e8a <__aeabi_dmul+0x13e>
10000e62:	0020      	movs	r0, r4
10000e64:	f7ff fa30 	bl	100002c8 <__clzsi2>
10000e68:	0001      	movs	r1, r0
10000e6a:	390b      	subs	r1, #11
10000e6c:	291c      	cmp	r1, #28
10000e6e:	dc10      	bgt.n	10000e92 <__aeabi_dmul+0x146>
10000e70:	231d      	movs	r3, #29
10000e72:	1a5b      	subs	r3, r3, r1
10000e74:	0039      	movs	r1, r7
10000e76:	0002      	movs	r2, r0
10000e78:	40d9      	lsrs	r1, r3
10000e7a:	003b      	movs	r3, r7
10000e7c:	3a08      	subs	r2, #8
10000e7e:	4094      	lsls	r4, r2
10000e80:	4093      	lsls	r3, r2
10000e82:	430c      	orrs	r4, r1
10000e84:	4a82      	ldr	r2, [pc, #520]	; (10001090 <__aeabi_dmul+0x344>)
10000e86:	1a10      	subs	r0, r2, r0
10000e88:	e792      	b.n	10000db0 <__aeabi_dmul+0x64>
10000e8a:	f7ff fa1d 	bl	100002c8 <__clzsi2>
10000e8e:	3020      	adds	r0, #32
10000e90:	e7ea      	b.n	10000e68 <__aeabi_dmul+0x11c>
10000e92:	0003      	movs	r3, r0
10000e94:	003c      	movs	r4, r7
10000e96:	3b28      	subs	r3, #40	; 0x28
10000e98:	409c      	lsls	r4, r3
10000e9a:	2300      	movs	r3, #0
10000e9c:	e7f2      	b.n	10000e84 <__aeabi_dmul+0x138>
10000e9e:	003b      	movs	r3, r7
10000ea0:	4323      	orrs	r3, r4
10000ea2:	d007      	beq.n	10000eb4 <__aeabi_dmul+0x168>
10000ea4:	0010      	movs	r0, r2
10000ea6:	003b      	movs	r3, r7
10000ea8:	2203      	movs	r2, #3
10000eaa:	e782      	b.n	10000db2 <__aeabi_dmul+0x66>
10000eac:	001c      	movs	r4, r3
10000eae:	0018      	movs	r0, r3
10000eb0:	2201      	movs	r2, #1
10000eb2:	e77e      	b.n	10000db2 <__aeabi_dmul+0x66>
10000eb4:	0010      	movs	r0, r2
10000eb6:	001c      	movs	r4, r3
10000eb8:	2202      	movs	r2, #2
10000eba:	e77a      	b.n	10000db2 <__aeabi_dmul+0x66>
10000ebc:	0034      	movs	r4, r6
10000ebe:	002b      	movs	r3, r5
10000ec0:	9a00      	ldr	r2, [sp, #0]
10000ec2:	2a02      	cmp	r2, #2
10000ec4:	d100      	bne.n	10000ec8 <__aeabi_dmul+0x17c>
10000ec6:	e150      	b.n	1000116a <__aeabi_dmul+0x41e>
10000ec8:	2a03      	cmp	r2, #3
10000eca:	d100      	bne.n	10000ece <__aeabi_dmul+0x182>
10000ecc:	e14a      	b.n	10001164 <__aeabi_dmul+0x418>
10000ece:	2a01      	cmp	r2, #1
10000ed0:	d000      	beq.n	10000ed4 <__aeabi_dmul+0x188>
10000ed2:	e0aa      	b.n	1000102a <__aeabi_dmul+0x2de>
10000ed4:	2300      	movs	r3, #0
10000ed6:	001d      	movs	r5, r3
10000ed8:	001a      	movs	r2, r3
10000eda:	e0c8      	b.n	1000106e <__aeabi_dmul+0x322>
10000edc:	0c19      	lsrs	r1, r3, #16
10000ede:	b29b      	uxth	r3, r3
10000ee0:	001f      	movs	r7, r3
10000ee2:	0c2a      	lsrs	r2, r5, #16
10000ee4:	b2ad      	uxth	r5, r5
10000ee6:	0028      	movs	r0, r5
10000ee8:	9100      	str	r1, [sp, #0]
10000eea:	4351      	muls	r1, r2
10000eec:	9104      	str	r1, [sp, #16]
10000eee:	9900      	ldr	r1, [sp, #0]
10000ef0:	4357      	muls	r7, r2
10000ef2:	4369      	muls	r1, r5
10000ef4:	19c9      	adds	r1, r1, r7
10000ef6:	4358      	muls	r0, r3
10000ef8:	9303      	str	r3, [sp, #12]
10000efa:	000b      	movs	r3, r1
10000efc:	0c01      	lsrs	r1, r0, #16
10000efe:	18c9      	adds	r1, r1, r3
10000f00:	428f      	cmp	r7, r1
10000f02:	d905      	bls.n	10000f10 <__aeabi_dmul+0x1c4>
10000f04:	2780      	movs	r7, #128	; 0x80
10000f06:	027f      	lsls	r7, r7, #9
10000f08:	46bc      	mov	ip, r7
10000f0a:	9b04      	ldr	r3, [sp, #16]
10000f0c:	4463      	add	r3, ip
10000f0e:	9304      	str	r3, [sp, #16]
10000f10:	0c0b      	lsrs	r3, r1, #16
10000f12:	0c27      	lsrs	r7, r4, #16
10000f14:	0409      	lsls	r1, r1, #16
10000f16:	b280      	uxth	r0, r0
10000f18:	b2a4      	uxth	r4, r4
10000f1a:	469c      	mov	ip, r3
10000f1c:	180b      	adds	r3, r1, r0
10000f1e:	0029      	movs	r1, r5
10000f20:	0020      	movs	r0, r4
10000f22:	4361      	muls	r1, r4
10000f24:	4350      	muls	r0, r2
10000f26:	437d      	muls	r5, r7
10000f28:	9308      	str	r3, [sp, #32]
10000f2a:	182d      	adds	r5, r5, r0
10000f2c:	0c0b      	lsrs	r3, r1, #16
10000f2e:	195d      	adds	r5, r3, r5
10000f30:	437a      	muls	r2, r7
10000f32:	42a8      	cmp	r0, r5
10000f34:	d902      	bls.n	10000f3c <__aeabi_dmul+0x1f0>
10000f36:	2380      	movs	r3, #128	; 0x80
10000f38:	025b      	lsls	r3, r3, #9
10000f3a:	18d2      	adds	r2, r2, r3
10000f3c:	0c28      	lsrs	r0, r5, #16
10000f3e:	1883      	adds	r3, r0, r2
10000f40:	042d      	lsls	r5, r5, #16
10000f42:	b289      	uxth	r1, r1
10000f44:	9305      	str	r3, [sp, #20]
10000f46:	186b      	adds	r3, r5, r1
10000f48:	9307      	str	r3, [sp, #28]
10000f4a:	9a07      	ldr	r2, [sp, #28]
10000f4c:	4663      	mov	r3, ip
10000f4e:	4694      	mov	ip, r2
10000f50:	9a00      	ldr	r2, [sp, #0]
10000f52:	b2b0      	uxth	r0, r6
10000f54:	4342      	muls	r2, r0
10000f56:	0005      	movs	r5, r0
10000f58:	4463      	add	r3, ip
10000f5a:	4694      	mov	ip, r2
10000f5c:	9309      	str	r3, [sp, #36]	; 0x24
10000f5e:	9b03      	ldr	r3, [sp, #12]
10000f60:	0c31      	lsrs	r1, r6, #16
10000f62:	435d      	muls	r5, r3
10000f64:	434b      	muls	r3, r1
10000f66:	9e00      	ldr	r6, [sp, #0]
10000f68:	449c      	add	ip, r3
10000f6a:	0c2a      	lsrs	r2, r5, #16
10000f6c:	4462      	add	r2, ip
10000f6e:	434e      	muls	r6, r1
10000f70:	4293      	cmp	r3, r2
10000f72:	d902      	bls.n	10000f7a <__aeabi_dmul+0x22e>
10000f74:	2380      	movs	r3, #128	; 0x80
10000f76:	025b      	lsls	r3, r3, #9
10000f78:	18f6      	adds	r6, r6, r3
10000f7a:	0c13      	lsrs	r3, r2, #16
10000f7c:	199b      	adds	r3, r3, r6
10000f7e:	9303      	str	r3, [sp, #12]
10000f80:	0003      	movs	r3, r0
10000f82:	4378      	muls	r0, r7
10000f84:	4363      	muls	r3, r4
10000f86:	434c      	muls	r4, r1
10000f88:	4379      	muls	r1, r7
10000f8a:	1900      	adds	r0, r0, r4
10000f8c:	0c1e      	lsrs	r6, r3, #16
10000f8e:	0412      	lsls	r2, r2, #16
10000f90:	b2ad      	uxth	r5, r5
10000f92:	1836      	adds	r6, r6, r0
10000f94:	1955      	adds	r5, r2, r5
10000f96:	9100      	str	r1, [sp, #0]
10000f98:	42b4      	cmp	r4, r6
10000f9a:	d903      	bls.n	10000fa4 <__aeabi_dmul+0x258>
10000f9c:	2280      	movs	r2, #128	; 0x80
10000f9e:	0252      	lsls	r2, r2, #9
10000fa0:	188a      	adds	r2, r1, r2
10000fa2:	9200      	str	r2, [sp, #0]
10000fa4:	9809      	ldr	r0, [sp, #36]	; 0x24
10000fa6:	9a04      	ldr	r2, [sp, #16]
10000fa8:	4684      	mov	ip, r0
10000faa:	4462      	add	r2, ip
10000fac:	0017      	movs	r7, r2
10000fae:	9a07      	ldr	r2, [sp, #28]
10000fb0:	b29b      	uxth	r3, r3
10000fb2:	4297      	cmp	r7, r2
10000fb4:	4180      	sbcs	r0, r0
10000fb6:	0432      	lsls	r2, r6, #16
10000fb8:	18d2      	adds	r2, r2, r3
10000fba:	9b05      	ldr	r3, [sp, #20]
10000fbc:	4240      	negs	r0, r0
10000fbe:	18d3      	adds	r3, r2, r3
10000fc0:	181c      	adds	r4, r3, r0
10000fc2:	0019      	movs	r1, r3
10000fc4:	9b03      	ldr	r3, [sp, #12]
10000fc6:	9a05      	ldr	r2, [sp, #20]
10000fc8:	469c      	mov	ip, r3
10000fca:	197f      	adds	r7, r7, r5
10000fcc:	4291      	cmp	r1, r2
10000fce:	4192      	sbcs	r2, r2
10000fd0:	4284      	cmp	r4, r0
10000fd2:	4180      	sbcs	r0, r0
10000fd4:	44a4      	add	ip, r4
10000fd6:	42af      	cmp	r7, r5
10000fd8:	41ad      	sbcs	r5, r5
10000fda:	4663      	mov	r3, ip
10000fdc:	4240      	negs	r0, r0
10000fde:	4252      	negs	r2, r2
10000fe0:	426d      	negs	r5, r5
10000fe2:	4302      	orrs	r2, r0
10000fe4:	9803      	ldr	r0, [sp, #12]
10000fe6:	195b      	adds	r3, r3, r5
10000fe8:	0c36      	lsrs	r6, r6, #16
10000fea:	42ab      	cmp	r3, r5
10000fec:	41ad      	sbcs	r5, r5
10000fee:	1992      	adds	r2, r2, r6
10000ff0:	4584      	cmp	ip, r0
10000ff2:	41b6      	sbcs	r6, r6
10000ff4:	4268      	negs	r0, r5
10000ff6:	4276      	negs	r6, r6
10000ff8:	9900      	ldr	r1, [sp, #0]
10000ffa:	4330      	orrs	r0, r6
10000ffc:	1812      	adds	r2, r2, r0
10000ffe:	1852      	adds	r2, r2, r1
10001000:	9908      	ldr	r1, [sp, #32]
10001002:	0278      	lsls	r0, r7, #9
10001004:	4308      	orrs	r0, r1
10001006:	1e41      	subs	r1, r0, #1
10001008:	4188      	sbcs	r0, r1
1000100a:	0dff      	lsrs	r7, r7, #23
1000100c:	0ddc      	lsrs	r4, r3, #23
1000100e:	0252      	lsls	r2, r2, #9
10001010:	4307      	orrs	r7, r0
10001012:	025b      	lsls	r3, r3, #9
10001014:	4314      	orrs	r4, r2
10001016:	433b      	orrs	r3, r7
10001018:	01d2      	lsls	r2, r2, #7
1000101a:	d555      	bpl.n	100010c8 <__aeabi_dmul+0x37c>
1000101c:	2101      	movs	r1, #1
1000101e:	085a      	lsrs	r2, r3, #1
10001020:	400b      	ands	r3, r1
10001022:	4313      	orrs	r3, r2
10001024:	07e2      	lsls	r2, r4, #31
10001026:	40cc      	lsrs	r4, r1
10001028:	4313      	orrs	r3, r2
1000102a:	9a01      	ldr	r2, [sp, #4]
1000102c:	4919      	ldr	r1, [pc, #100]	; (10001094 <__aeabi_dmul+0x348>)
1000102e:	1852      	adds	r2, r2, r1
10001030:	2a00      	cmp	r2, #0
10001032:	dd4c      	ble.n	100010ce <__aeabi_dmul+0x382>
10001034:	0759      	lsls	r1, r3, #29
10001036:	d009      	beq.n	1000104c <__aeabi_dmul+0x300>
10001038:	210f      	movs	r1, #15
1000103a:	4019      	ands	r1, r3
1000103c:	2904      	cmp	r1, #4
1000103e:	d005      	beq.n	1000104c <__aeabi_dmul+0x300>
10001040:	1d19      	adds	r1, r3, #4
10001042:	4299      	cmp	r1, r3
10001044:	419b      	sbcs	r3, r3
10001046:	425b      	negs	r3, r3
10001048:	18e4      	adds	r4, r4, r3
1000104a:	000b      	movs	r3, r1
1000104c:	01e1      	lsls	r1, r4, #7
1000104e:	d506      	bpl.n	1000105e <__aeabi_dmul+0x312>
10001050:	2180      	movs	r1, #128	; 0x80
10001052:	00c9      	lsls	r1, r1, #3
10001054:	468c      	mov	ip, r1
10001056:	4a10      	ldr	r2, [pc, #64]	; (10001098 <__aeabi_dmul+0x34c>)
10001058:	4014      	ands	r4, r2
1000105a:	9a01      	ldr	r2, [sp, #4]
1000105c:	4462      	add	r2, ip
1000105e:	490f      	ldr	r1, [pc, #60]	; (1000109c <__aeabi_dmul+0x350>)
10001060:	428a      	cmp	r2, r1
10001062:	dd00      	ble.n	10001066 <__aeabi_dmul+0x31a>
10001064:	e081      	b.n	1000116a <__aeabi_dmul+0x41e>
10001066:	08db      	lsrs	r3, r3, #3
10001068:	0765      	lsls	r5, r4, #29
1000106a:	431d      	orrs	r5, r3
1000106c:	08e3      	lsrs	r3, r4, #3
1000106e:	0514      	lsls	r4, r2, #20
10001070:	4a0b      	ldr	r2, [pc, #44]	; (100010a0 <__aeabi_dmul+0x354>)
10001072:	031b      	lsls	r3, r3, #12
10001074:	4014      	ands	r4, r2
10001076:	0b1b      	lsrs	r3, r3, #12
10001078:	431c      	orrs	r4, r3
1000107a:	9b02      	ldr	r3, [sp, #8]
1000107c:	0028      	movs	r0, r5
1000107e:	07db      	lsls	r3, r3, #31
10001080:	431c      	orrs	r4, r3
10001082:	0021      	movs	r1, r4
10001084:	b00b      	add	sp, #44	; 0x2c
10001086:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001088:	000007ff 	.word	0x000007ff
1000108c:	fffffc01 	.word	0xfffffc01
10001090:	fffffc0d 	.word	0xfffffc0d
10001094:	000003ff 	.word	0x000003ff
10001098:	feffffff 	.word	0xfeffffff
1000109c:	000007fe 	.word	0x000007fe
100010a0:	7ff00000 	.word	0x7ff00000
100010a4:	2280      	movs	r2, #128	; 0x80
100010a6:	0312      	lsls	r2, r2, #12
100010a8:	4216      	tst	r6, r2
100010aa:	d054      	beq.n	10001156 <__aeabi_dmul+0x40a>
100010ac:	4214      	tst	r4, r2
100010ae:	d152      	bne.n	10001156 <__aeabi_dmul+0x40a>
100010b0:	0026      	movs	r6, r4
100010b2:	9a05      	ldr	r2, [sp, #20]
100010b4:	9203      	str	r2, [sp, #12]
100010b6:	e04d      	b.n	10001154 <__aeabi_dmul+0x408>
100010b8:	9a04      	ldr	r2, [sp, #16]
100010ba:	0034      	movs	r4, r6
100010bc:	002b      	movs	r3, r5
100010be:	9202      	str	r2, [sp, #8]
100010c0:	e6fe      	b.n	10000ec0 <__aeabi_dmul+0x174>
100010c2:	9905      	ldr	r1, [sp, #20]
100010c4:	9102      	str	r1, [sp, #8]
100010c6:	e6fc      	b.n	10000ec2 <__aeabi_dmul+0x176>
100010c8:	9a06      	ldr	r2, [sp, #24]
100010ca:	9201      	str	r2, [sp, #4]
100010cc:	e7ad      	b.n	1000102a <__aeabi_dmul+0x2de>
100010ce:	2101      	movs	r1, #1
100010d0:	1a89      	subs	r1, r1, r2
100010d2:	2938      	cmp	r1, #56	; 0x38
100010d4:	dd00      	ble.n	100010d8 <__aeabi_dmul+0x38c>
100010d6:	e6fd      	b.n	10000ed4 <__aeabi_dmul+0x188>
100010d8:	291f      	cmp	r1, #31
100010da:	dc23      	bgt.n	10001124 <__aeabi_dmul+0x3d8>
100010dc:	4824      	ldr	r0, [pc, #144]	; (10001170 <__aeabi_dmul+0x424>)
100010de:	9a01      	ldr	r2, [sp, #4]
100010e0:	4684      	mov	ip, r0
100010e2:	0025      	movs	r5, r4
100010e4:	4462      	add	r2, ip
100010e6:	0018      	movs	r0, r3
100010e8:	4093      	lsls	r3, r2
100010ea:	4095      	lsls	r5, r2
100010ec:	40c8      	lsrs	r0, r1
100010ee:	1e5a      	subs	r2, r3, #1
100010f0:	4193      	sbcs	r3, r2
100010f2:	40cc      	lsrs	r4, r1
100010f4:	4305      	orrs	r5, r0
100010f6:	432b      	orrs	r3, r5
100010f8:	075a      	lsls	r2, r3, #29
100010fa:	d009      	beq.n	10001110 <__aeabi_dmul+0x3c4>
100010fc:	220f      	movs	r2, #15
100010fe:	401a      	ands	r2, r3
10001100:	2a04      	cmp	r2, #4
10001102:	d005      	beq.n	10001110 <__aeabi_dmul+0x3c4>
10001104:	1d1a      	adds	r2, r3, #4
10001106:	429a      	cmp	r2, r3
10001108:	41ad      	sbcs	r5, r5
1000110a:	0013      	movs	r3, r2
1000110c:	426d      	negs	r5, r5
1000110e:	1964      	adds	r4, r4, r5
10001110:	2080      	movs	r0, #128	; 0x80
10001112:	0022      	movs	r2, r4
10001114:	0400      	lsls	r0, r0, #16
10001116:	4002      	ands	r2, r0
10001118:	4204      	tst	r4, r0
1000111a:	d0a4      	beq.n	10001066 <__aeabi_dmul+0x31a>
1000111c:	2300      	movs	r3, #0
1000111e:	2201      	movs	r2, #1
10001120:	001d      	movs	r5, r3
10001122:	e7a4      	b.n	1000106e <__aeabi_dmul+0x322>
10001124:	201f      	movs	r0, #31
10001126:	0025      	movs	r5, r4
10001128:	4240      	negs	r0, r0
1000112a:	1a82      	subs	r2, r0, r2
1000112c:	40d5      	lsrs	r5, r2
1000112e:	2200      	movs	r2, #0
10001130:	2920      	cmp	r1, #32
10001132:	d005      	beq.n	10001140 <__aeabi_dmul+0x3f4>
10001134:	490f      	ldr	r1, [pc, #60]	; (10001174 <__aeabi_dmul+0x428>)
10001136:	9a01      	ldr	r2, [sp, #4]
10001138:	468c      	mov	ip, r1
1000113a:	4462      	add	r2, ip
1000113c:	4094      	lsls	r4, r2
1000113e:	0022      	movs	r2, r4
10001140:	4313      	orrs	r3, r2
10001142:	1e5a      	subs	r2, r3, #1
10001144:	4193      	sbcs	r3, r2
10001146:	2400      	movs	r4, #0
10001148:	432b      	orrs	r3, r5
1000114a:	e7d5      	b.n	100010f8 <__aeabi_dmul+0x3ac>
1000114c:	2680      	movs	r6, #128	; 0x80
1000114e:	2300      	movs	r3, #0
10001150:	0336      	lsls	r6, r6, #12
10001152:	9303      	str	r3, [sp, #12]
10001154:	001d      	movs	r5, r3
10001156:	2380      	movs	r3, #128	; 0x80
10001158:	9a03      	ldr	r2, [sp, #12]
1000115a:	031b      	lsls	r3, r3, #12
1000115c:	4333      	orrs	r3, r6
1000115e:	9202      	str	r2, [sp, #8]
10001160:	4a05      	ldr	r2, [pc, #20]	; (10001178 <__aeabi_dmul+0x42c>)
10001162:	e784      	b.n	1000106e <__aeabi_dmul+0x322>
10001164:	0026      	movs	r6, r4
10001166:	9a02      	ldr	r2, [sp, #8]
10001168:	e7a4      	b.n	100010b4 <__aeabi_dmul+0x368>
1000116a:	2300      	movs	r3, #0
1000116c:	001d      	movs	r5, r3
1000116e:	e7f7      	b.n	10001160 <__aeabi_dmul+0x414>
10001170:	0000041e 	.word	0x0000041e
10001174:	0000043e 	.word	0x0000043e
10001178:	000007ff 	.word	0x000007ff

1000117c <__aeabi_dsub>:
1000117c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000117e:	0005      	movs	r5, r0
10001180:	001e      	movs	r6, r3
10001182:	0008      	movs	r0, r1
10001184:	0011      	movs	r1, r2
10001186:	0303      	lsls	r3, r0, #12
10001188:	0fc2      	lsrs	r2, r0, #31
1000118a:	0044      	lsls	r4, r0, #1
1000118c:	0330      	lsls	r0, r6, #12
1000118e:	0f4f      	lsrs	r7, r1, #29
10001190:	0a40      	lsrs	r0, r0, #9
10001192:	9200      	str	r2, [sp, #0]
10001194:	0a5b      	lsrs	r3, r3, #9
10001196:	0f6a      	lsrs	r2, r5, #29
10001198:	4338      	orrs	r0, r7
1000119a:	4fc0      	ldr	r7, [pc, #768]	; (1000149c <__aeabi_dsub+0x320>)
1000119c:	4313      	orrs	r3, r2
1000119e:	00ea      	lsls	r2, r5, #3
100011a0:	0075      	lsls	r5, r6, #1
100011a2:	0d64      	lsrs	r4, r4, #21
100011a4:	0d6d      	lsrs	r5, r5, #21
100011a6:	0ff6      	lsrs	r6, r6, #31
100011a8:	00c9      	lsls	r1, r1, #3
100011aa:	42bd      	cmp	r5, r7
100011ac:	d103      	bne.n	100011b6 <__aeabi_dsub+0x3a>
100011ae:	0007      	movs	r7, r0
100011b0:	46b4      	mov	ip, r6
100011b2:	430f      	orrs	r7, r1
100011b4:	d102      	bne.n	100011bc <__aeabi_dsub+0x40>
100011b6:	2701      	movs	r7, #1
100011b8:	4077      	eors	r7, r6
100011ba:	46bc      	mov	ip, r7
100011bc:	9f00      	ldr	r7, [sp, #0]
100011be:	1b66      	subs	r6, r4, r5
100011c0:	45bc      	cmp	ip, r7
100011c2:	d000      	beq.n	100011c6 <__aeabi_dsub+0x4a>
100011c4:	e128      	b.n	10001418 <__aeabi_dsub+0x29c>
100011c6:	2e00      	cmp	r6, #0
100011c8:	dc00      	bgt.n	100011cc <__aeabi_dsub+0x50>
100011ca:	e08a      	b.n	100012e2 <__aeabi_dsub+0x166>
100011cc:	2d00      	cmp	r5, #0
100011ce:	d150      	bne.n	10001272 <__aeabi_dsub+0xf6>
100011d0:	0005      	movs	r5, r0
100011d2:	430d      	orrs	r5, r1
100011d4:	d01d      	beq.n	10001212 <__aeabi_dsub+0x96>
100011d6:	1e66      	subs	r6, r4, #1
100011d8:	2c01      	cmp	r4, #1
100011da:	d117      	bne.n	1000120c <__aeabi_dsub+0x90>
100011dc:	1851      	adds	r1, r2, r1
100011de:	4291      	cmp	r1, r2
100011e0:	4192      	sbcs	r2, r2
100011e2:	181b      	adds	r3, r3, r0
100011e4:	4252      	negs	r2, r2
100011e6:	189b      	adds	r3, r3, r2
100011e8:	000a      	movs	r2, r1
100011ea:	0219      	lsls	r1, r3, #8
100011ec:	d511      	bpl.n	10001212 <__aeabi_dsub+0x96>
100011ee:	49ab      	ldr	r1, [pc, #684]	; (1000149c <__aeabi_dsub+0x320>)
100011f0:	3401      	adds	r4, #1
100011f2:	428c      	cmp	r4, r1
100011f4:	d100      	bne.n	100011f8 <__aeabi_dsub+0x7c>
100011f6:	e27c      	b.n	100016f2 <__aeabi_dsub+0x576>
100011f8:	2001      	movs	r0, #1
100011fa:	49a9      	ldr	r1, [pc, #676]	; (100014a0 <__aeabi_dsub+0x324>)
100011fc:	400b      	ands	r3, r1
100011fe:	0851      	lsrs	r1, r2, #1
10001200:	4002      	ands	r2, r0
10001202:	430a      	orrs	r2, r1
10001204:	07d9      	lsls	r1, r3, #31
10001206:	430a      	orrs	r2, r1
10001208:	40c3      	lsrs	r3, r0
1000120a:	e002      	b.n	10001212 <__aeabi_dsub+0x96>
1000120c:	4da3      	ldr	r5, [pc, #652]	; (1000149c <__aeabi_dsub+0x320>)
1000120e:	42ac      	cmp	r4, r5
10001210:	d135      	bne.n	1000127e <__aeabi_dsub+0x102>
10001212:	0751      	lsls	r1, r2, #29
10001214:	d009      	beq.n	1000122a <__aeabi_dsub+0xae>
10001216:	210f      	movs	r1, #15
10001218:	4011      	ands	r1, r2
1000121a:	2904      	cmp	r1, #4
1000121c:	d005      	beq.n	1000122a <__aeabi_dsub+0xae>
1000121e:	1d11      	adds	r1, r2, #4
10001220:	4291      	cmp	r1, r2
10001222:	4192      	sbcs	r2, r2
10001224:	4252      	negs	r2, r2
10001226:	189b      	adds	r3, r3, r2
10001228:	000a      	movs	r2, r1
1000122a:	0219      	lsls	r1, r3, #8
1000122c:	d506      	bpl.n	1000123c <__aeabi_dsub+0xc0>
1000122e:	499b      	ldr	r1, [pc, #620]	; (1000149c <__aeabi_dsub+0x320>)
10001230:	3401      	adds	r4, #1
10001232:	428c      	cmp	r4, r1
10001234:	d100      	bne.n	10001238 <__aeabi_dsub+0xbc>
10001236:	e26b      	b.n	10001710 <__aeabi_dsub+0x594>
10001238:	4999      	ldr	r1, [pc, #612]	; (100014a0 <__aeabi_dsub+0x324>)
1000123a:	400b      	ands	r3, r1
1000123c:	0759      	lsls	r1, r3, #29
1000123e:	08d2      	lsrs	r2, r2, #3
10001240:	430a      	orrs	r2, r1
10001242:	4996      	ldr	r1, [pc, #600]	; (1000149c <__aeabi_dsub+0x320>)
10001244:	08db      	lsrs	r3, r3, #3
10001246:	428c      	cmp	r4, r1
10001248:	d106      	bne.n	10001258 <__aeabi_dsub+0xdc>
1000124a:	0011      	movs	r1, r2
1000124c:	4319      	orrs	r1, r3
1000124e:	d100      	bne.n	10001252 <__aeabi_dsub+0xd6>
10001250:	e261      	b.n	10001716 <__aeabi_dsub+0x59a>
10001252:	2180      	movs	r1, #128	; 0x80
10001254:	0309      	lsls	r1, r1, #12
10001256:	430b      	orrs	r3, r1
10001258:	0010      	movs	r0, r2
1000125a:	4a92      	ldr	r2, [pc, #584]	; (100014a4 <__aeabi_dsub+0x328>)
1000125c:	0524      	lsls	r4, r4, #20
1000125e:	031b      	lsls	r3, r3, #12
10001260:	4014      	ands	r4, r2
10001262:	0b1b      	lsrs	r3, r3, #12
10001264:	431c      	orrs	r4, r3
10001266:	9b00      	ldr	r3, [sp, #0]
10001268:	07db      	lsls	r3, r3, #31
1000126a:	431c      	orrs	r4, r3
1000126c:	0021      	movs	r1, r4
1000126e:	b003      	add	sp, #12
10001270:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001272:	4d8a      	ldr	r5, [pc, #552]	; (1000149c <__aeabi_dsub+0x320>)
10001274:	42ac      	cmp	r4, r5
10001276:	d0cc      	beq.n	10001212 <__aeabi_dsub+0x96>
10001278:	2580      	movs	r5, #128	; 0x80
1000127a:	042d      	lsls	r5, r5, #16
1000127c:	4328      	orrs	r0, r5
1000127e:	2e38      	cmp	r6, #56	; 0x38
10001280:	dc2a      	bgt.n	100012d8 <__aeabi_dsub+0x15c>
10001282:	2e1f      	cmp	r6, #31
10001284:	dc17      	bgt.n	100012b6 <__aeabi_dsub+0x13a>
10001286:	2520      	movs	r5, #32
10001288:	0007      	movs	r7, r0
1000128a:	1bad      	subs	r5, r5, r6
1000128c:	40af      	lsls	r7, r5
1000128e:	46bc      	mov	ip, r7
10001290:	000f      	movs	r7, r1
10001292:	9501      	str	r5, [sp, #4]
10001294:	40f7      	lsrs	r7, r6
10001296:	4665      	mov	r5, ip
10001298:	432f      	orrs	r7, r5
1000129a:	9d01      	ldr	r5, [sp, #4]
1000129c:	40f0      	lsrs	r0, r6
1000129e:	40a9      	lsls	r1, r5
100012a0:	1e4d      	subs	r5, r1, #1
100012a2:	41a9      	sbcs	r1, r5
100012a4:	430f      	orrs	r7, r1
100012a6:	18bf      	adds	r7, r7, r2
100012a8:	18c0      	adds	r0, r0, r3
100012aa:	4297      	cmp	r7, r2
100012ac:	419b      	sbcs	r3, r3
100012ae:	425b      	negs	r3, r3
100012b0:	003a      	movs	r2, r7
100012b2:	18c3      	adds	r3, r0, r3
100012b4:	e799      	b.n	100011ea <__aeabi_dsub+0x6e>
100012b6:	0035      	movs	r5, r6
100012b8:	0007      	movs	r7, r0
100012ba:	3d20      	subs	r5, #32
100012bc:	40ef      	lsrs	r7, r5
100012be:	2500      	movs	r5, #0
100012c0:	2e20      	cmp	r6, #32
100012c2:	d003      	beq.n	100012cc <__aeabi_dsub+0x150>
100012c4:	3540      	adds	r5, #64	; 0x40
100012c6:	1bad      	subs	r5, r5, r6
100012c8:	40a8      	lsls	r0, r5
100012ca:	0005      	movs	r5, r0
100012cc:	4329      	orrs	r1, r5
100012ce:	1e48      	subs	r0, r1, #1
100012d0:	4181      	sbcs	r1, r0
100012d2:	430f      	orrs	r7, r1
100012d4:	2000      	movs	r0, #0
100012d6:	e7e6      	b.n	100012a6 <__aeabi_dsub+0x12a>
100012d8:	4308      	orrs	r0, r1
100012da:	0007      	movs	r7, r0
100012dc:	1e79      	subs	r1, r7, #1
100012de:	418f      	sbcs	r7, r1
100012e0:	e7f8      	b.n	100012d4 <__aeabi_dsub+0x158>
100012e2:	2e00      	cmp	r6, #0
100012e4:	d04f      	beq.n	10001386 <__aeabi_dsub+0x20a>
100012e6:	1b2e      	subs	r6, r5, r4
100012e8:	2c00      	cmp	r4, #0
100012ea:	d114      	bne.n	10001316 <__aeabi_dsub+0x19a>
100012ec:	001c      	movs	r4, r3
100012ee:	4314      	orrs	r4, r2
100012f0:	d100      	bne.n	100012f4 <__aeabi_dsub+0x178>
100012f2:	e1f6      	b.n	100016e2 <__aeabi_dsub+0x566>
100012f4:	1e74      	subs	r4, r6, #1
100012f6:	2e01      	cmp	r6, #1
100012f8:	d107      	bne.n	1000130a <__aeabi_dsub+0x18e>
100012fa:	1852      	adds	r2, r2, r1
100012fc:	428a      	cmp	r2, r1
100012fe:	4189      	sbcs	r1, r1
10001300:	181b      	adds	r3, r3, r0
10001302:	4249      	negs	r1, r1
10001304:	2401      	movs	r4, #1
10001306:	185b      	adds	r3, r3, r1
10001308:	e76f      	b.n	100011ea <__aeabi_dsub+0x6e>
1000130a:	4f64      	ldr	r7, [pc, #400]	; (1000149c <__aeabi_dsub+0x320>)
1000130c:	42be      	cmp	r6, r7
1000130e:	d109      	bne.n	10001324 <__aeabi_dsub+0x1a8>
10001310:	0003      	movs	r3, r0
10001312:	000a      	movs	r2, r1
10001314:	e171      	b.n	100015fa <__aeabi_dsub+0x47e>
10001316:	4c61      	ldr	r4, [pc, #388]	; (1000149c <__aeabi_dsub+0x320>)
10001318:	42a5      	cmp	r5, r4
1000131a:	d0f9      	beq.n	10001310 <__aeabi_dsub+0x194>
1000131c:	2480      	movs	r4, #128	; 0x80
1000131e:	0424      	lsls	r4, r4, #16
10001320:	4323      	orrs	r3, r4
10001322:	0034      	movs	r4, r6
10001324:	2c38      	cmp	r4, #56	; 0x38
10001326:	dc2a      	bgt.n	1000137e <__aeabi_dsub+0x202>
10001328:	2c1f      	cmp	r4, #31
1000132a:	dc17      	bgt.n	1000135c <__aeabi_dsub+0x1e0>
1000132c:	2620      	movs	r6, #32
1000132e:	001f      	movs	r7, r3
10001330:	1b36      	subs	r6, r6, r4
10001332:	40b7      	lsls	r7, r6
10001334:	46bc      	mov	ip, r7
10001336:	0017      	movs	r7, r2
10001338:	9601      	str	r6, [sp, #4]
1000133a:	40e7      	lsrs	r7, r4
1000133c:	4666      	mov	r6, ip
1000133e:	4337      	orrs	r7, r6
10001340:	9e01      	ldr	r6, [sp, #4]
10001342:	40e3      	lsrs	r3, r4
10001344:	40b2      	lsls	r2, r6
10001346:	1e56      	subs	r6, r2, #1
10001348:	41b2      	sbcs	r2, r6
1000134a:	433a      	orrs	r2, r7
1000134c:	1852      	adds	r2, r2, r1
1000134e:	428a      	cmp	r2, r1
10001350:	4189      	sbcs	r1, r1
10001352:	181b      	adds	r3, r3, r0
10001354:	4249      	negs	r1, r1
10001356:	002c      	movs	r4, r5
10001358:	185b      	adds	r3, r3, r1
1000135a:	e746      	b.n	100011ea <__aeabi_dsub+0x6e>
1000135c:	0026      	movs	r6, r4
1000135e:	001f      	movs	r7, r3
10001360:	3e20      	subs	r6, #32
10001362:	40f7      	lsrs	r7, r6
10001364:	2600      	movs	r6, #0
10001366:	2c20      	cmp	r4, #32
10001368:	d003      	beq.n	10001372 <__aeabi_dsub+0x1f6>
1000136a:	3640      	adds	r6, #64	; 0x40
1000136c:	1b34      	subs	r4, r6, r4
1000136e:	40a3      	lsls	r3, r4
10001370:	001e      	movs	r6, r3
10001372:	4332      	orrs	r2, r6
10001374:	1e53      	subs	r3, r2, #1
10001376:	419a      	sbcs	r2, r3
10001378:	433a      	orrs	r2, r7
1000137a:	2300      	movs	r3, #0
1000137c:	e7e6      	b.n	1000134c <__aeabi_dsub+0x1d0>
1000137e:	431a      	orrs	r2, r3
10001380:	1e53      	subs	r3, r2, #1
10001382:	419a      	sbcs	r2, r3
10001384:	e7f9      	b.n	1000137a <__aeabi_dsub+0x1fe>
10001386:	4f48      	ldr	r7, [pc, #288]	; (100014a8 <__aeabi_dsub+0x32c>)
10001388:	1c65      	adds	r5, r4, #1
1000138a:	423d      	tst	r5, r7
1000138c:	d134      	bne.n	100013f8 <__aeabi_dsub+0x27c>
1000138e:	001d      	movs	r5, r3
10001390:	4315      	orrs	r5, r2
10001392:	2c00      	cmp	r4, #0
10001394:	d116      	bne.n	100013c4 <__aeabi_dsub+0x248>
10001396:	2d00      	cmp	r5, #0
10001398:	d100      	bne.n	1000139c <__aeabi_dsub+0x220>
1000139a:	e1a6      	b.n	100016ea <__aeabi_dsub+0x56e>
1000139c:	0005      	movs	r5, r0
1000139e:	430d      	orrs	r5, r1
100013a0:	d100      	bne.n	100013a4 <__aeabi_dsub+0x228>
100013a2:	e736      	b.n	10001212 <__aeabi_dsub+0x96>
100013a4:	1851      	adds	r1, r2, r1
100013a6:	4291      	cmp	r1, r2
100013a8:	4192      	sbcs	r2, r2
100013aa:	181b      	adds	r3, r3, r0
100013ac:	4252      	negs	r2, r2
100013ae:	189b      	adds	r3, r3, r2
100013b0:	000a      	movs	r2, r1
100013b2:	2180      	movs	r1, #128	; 0x80
100013b4:	0409      	lsls	r1, r1, #16
100013b6:	420b      	tst	r3, r1
100013b8:	d100      	bne.n	100013bc <__aeabi_dsub+0x240>
100013ba:	e72a      	b.n	10001212 <__aeabi_dsub+0x96>
100013bc:	4938      	ldr	r1, [pc, #224]	; (100014a0 <__aeabi_dsub+0x324>)
100013be:	3401      	adds	r4, #1
100013c0:	400b      	ands	r3, r1
100013c2:	e726      	b.n	10001212 <__aeabi_dsub+0x96>
100013c4:	2d00      	cmp	r5, #0
100013c6:	d0a3      	beq.n	10001310 <__aeabi_dsub+0x194>
100013c8:	0004      	movs	r4, r0
100013ca:	430c      	orrs	r4, r1
100013cc:	d100      	bne.n	100013d0 <__aeabi_dsub+0x254>
100013ce:	e114      	b.n	100015fa <__aeabi_dsub+0x47e>
100013d0:	075c      	lsls	r4, r3, #29
100013d2:	08d2      	lsrs	r2, r2, #3
100013d4:	4322      	orrs	r2, r4
100013d6:	2480      	movs	r4, #128	; 0x80
100013d8:	08db      	lsrs	r3, r3, #3
100013da:	0324      	lsls	r4, r4, #12
100013dc:	4223      	tst	r3, r4
100013de:	d006      	beq.n	100013ee <__aeabi_dsub+0x272>
100013e0:	08c5      	lsrs	r5, r0, #3
100013e2:	4225      	tst	r5, r4
100013e4:	d103      	bne.n	100013ee <__aeabi_dsub+0x272>
100013e6:	002b      	movs	r3, r5
100013e8:	08ca      	lsrs	r2, r1, #3
100013ea:	0740      	lsls	r0, r0, #29
100013ec:	4302      	orrs	r2, r0
100013ee:	0f51      	lsrs	r1, r2, #29
100013f0:	00db      	lsls	r3, r3, #3
100013f2:	430b      	orrs	r3, r1
100013f4:	00d2      	lsls	r2, r2, #3
100013f6:	e100      	b.n	100015fa <__aeabi_dsub+0x47e>
100013f8:	4c28      	ldr	r4, [pc, #160]	; (1000149c <__aeabi_dsub+0x320>)
100013fa:	42a5      	cmp	r5, r4
100013fc:	d100      	bne.n	10001400 <__aeabi_dsub+0x284>
100013fe:	e177      	b.n	100016f0 <__aeabi_dsub+0x574>
10001400:	1851      	adds	r1, r2, r1
10001402:	4291      	cmp	r1, r2
10001404:	4192      	sbcs	r2, r2
10001406:	181b      	adds	r3, r3, r0
10001408:	4252      	negs	r2, r2
1000140a:	189b      	adds	r3, r3, r2
1000140c:	07da      	lsls	r2, r3, #31
1000140e:	0849      	lsrs	r1, r1, #1
10001410:	002c      	movs	r4, r5
10001412:	430a      	orrs	r2, r1
10001414:	085b      	lsrs	r3, r3, #1
10001416:	e6fc      	b.n	10001212 <__aeabi_dsub+0x96>
10001418:	2e00      	cmp	r6, #0
1000141a:	dd5d      	ble.n	100014d8 <__aeabi_dsub+0x35c>
1000141c:	2d00      	cmp	r5, #0
1000141e:	d134      	bne.n	1000148a <__aeabi_dsub+0x30e>
10001420:	0005      	movs	r5, r0
10001422:	430d      	orrs	r5, r1
10001424:	d100      	bne.n	10001428 <__aeabi_dsub+0x2ac>
10001426:	e6f4      	b.n	10001212 <__aeabi_dsub+0x96>
10001428:	1e66      	subs	r6, r4, #1
1000142a:	2c01      	cmp	r4, #1
1000142c:	d10d      	bne.n	1000144a <__aeabi_dsub+0x2ce>
1000142e:	1a51      	subs	r1, r2, r1
10001430:	428a      	cmp	r2, r1
10001432:	4192      	sbcs	r2, r2
10001434:	1a1b      	subs	r3, r3, r0
10001436:	4252      	negs	r2, r2
10001438:	1a9b      	subs	r3, r3, r2
1000143a:	000a      	movs	r2, r1
1000143c:	0219      	lsls	r1, r3, #8
1000143e:	d400      	bmi.n	10001442 <__aeabi_dsub+0x2c6>
10001440:	e6e7      	b.n	10001212 <__aeabi_dsub+0x96>
10001442:	025b      	lsls	r3, r3, #9
10001444:	0016      	movs	r6, r2
10001446:	0a5d      	lsrs	r5, r3, #9
10001448:	e101      	b.n	1000164e <__aeabi_dsub+0x4d2>
1000144a:	4d14      	ldr	r5, [pc, #80]	; (1000149c <__aeabi_dsub+0x320>)
1000144c:	42ac      	cmp	r4, r5
1000144e:	d100      	bne.n	10001452 <__aeabi_dsub+0x2d6>
10001450:	e6df      	b.n	10001212 <__aeabi_dsub+0x96>
10001452:	2e38      	cmp	r6, #56	; 0x38
10001454:	dc3b      	bgt.n	100014ce <__aeabi_dsub+0x352>
10001456:	2e1f      	cmp	r6, #31
10001458:	dc28      	bgt.n	100014ac <__aeabi_dsub+0x330>
1000145a:	2520      	movs	r5, #32
1000145c:	0007      	movs	r7, r0
1000145e:	1bad      	subs	r5, r5, r6
10001460:	40af      	lsls	r7, r5
10001462:	46bc      	mov	ip, r7
10001464:	000f      	movs	r7, r1
10001466:	9501      	str	r5, [sp, #4]
10001468:	40f7      	lsrs	r7, r6
1000146a:	4665      	mov	r5, ip
1000146c:	432f      	orrs	r7, r5
1000146e:	9d01      	ldr	r5, [sp, #4]
10001470:	40f0      	lsrs	r0, r6
10001472:	40a9      	lsls	r1, r5
10001474:	1e4d      	subs	r5, r1, #1
10001476:	41a9      	sbcs	r1, r5
10001478:	430f      	orrs	r7, r1
1000147a:	1bd7      	subs	r7, r2, r7
1000147c:	1a18      	subs	r0, r3, r0
1000147e:	42ba      	cmp	r2, r7
10001480:	419b      	sbcs	r3, r3
10001482:	425b      	negs	r3, r3
10001484:	003a      	movs	r2, r7
10001486:	1ac3      	subs	r3, r0, r3
10001488:	e7d8      	b.n	1000143c <__aeabi_dsub+0x2c0>
1000148a:	4d04      	ldr	r5, [pc, #16]	; (1000149c <__aeabi_dsub+0x320>)
1000148c:	42ac      	cmp	r4, r5
1000148e:	d100      	bne.n	10001492 <__aeabi_dsub+0x316>
10001490:	e6bf      	b.n	10001212 <__aeabi_dsub+0x96>
10001492:	2580      	movs	r5, #128	; 0x80
10001494:	042d      	lsls	r5, r5, #16
10001496:	4328      	orrs	r0, r5
10001498:	e7db      	b.n	10001452 <__aeabi_dsub+0x2d6>
1000149a:	46c0      	nop			; (mov r8, r8)
1000149c:	000007ff 	.word	0x000007ff
100014a0:	ff7fffff 	.word	0xff7fffff
100014a4:	7ff00000 	.word	0x7ff00000
100014a8:	000007fe 	.word	0x000007fe
100014ac:	0035      	movs	r5, r6
100014ae:	0007      	movs	r7, r0
100014b0:	3d20      	subs	r5, #32
100014b2:	40ef      	lsrs	r7, r5
100014b4:	2500      	movs	r5, #0
100014b6:	2e20      	cmp	r6, #32
100014b8:	d003      	beq.n	100014c2 <__aeabi_dsub+0x346>
100014ba:	3540      	adds	r5, #64	; 0x40
100014bc:	1bad      	subs	r5, r5, r6
100014be:	40a8      	lsls	r0, r5
100014c0:	0005      	movs	r5, r0
100014c2:	4329      	orrs	r1, r5
100014c4:	1e48      	subs	r0, r1, #1
100014c6:	4181      	sbcs	r1, r0
100014c8:	430f      	orrs	r7, r1
100014ca:	2000      	movs	r0, #0
100014cc:	e7d5      	b.n	1000147a <__aeabi_dsub+0x2fe>
100014ce:	4308      	orrs	r0, r1
100014d0:	0007      	movs	r7, r0
100014d2:	1e79      	subs	r1, r7, #1
100014d4:	418f      	sbcs	r7, r1
100014d6:	e7f8      	b.n	100014ca <__aeabi_dsub+0x34e>
100014d8:	2e00      	cmp	r6, #0
100014da:	d053      	beq.n	10001584 <__aeabi_dsub+0x408>
100014dc:	1b2e      	subs	r6, r5, r4
100014de:	2c00      	cmp	r4, #0
100014e0:	d117      	bne.n	10001512 <__aeabi_dsub+0x396>
100014e2:	001c      	movs	r4, r3
100014e4:	4314      	orrs	r4, r2
100014e6:	d100      	bne.n	100014ea <__aeabi_dsub+0x36e>
100014e8:	e106      	b.n	100016f8 <__aeabi_dsub+0x57c>
100014ea:	1e74      	subs	r4, r6, #1
100014ec:	2e01      	cmp	r6, #1
100014ee:	d109      	bne.n	10001504 <__aeabi_dsub+0x388>
100014f0:	1a8a      	subs	r2, r1, r2
100014f2:	4291      	cmp	r1, r2
100014f4:	4189      	sbcs	r1, r1
100014f6:	1ac3      	subs	r3, r0, r3
100014f8:	4249      	negs	r1, r1
100014fa:	1a5b      	subs	r3, r3, r1
100014fc:	4661      	mov	r1, ip
100014fe:	2401      	movs	r4, #1
10001500:	9100      	str	r1, [sp, #0]
10001502:	e79b      	b.n	1000143c <__aeabi_dsub+0x2c0>
10001504:	4f85      	ldr	r7, [pc, #532]	; (1000171c <__aeabi_dsub+0x5a0>)
10001506:	42be      	cmp	r6, r7
10001508:	d10a      	bne.n	10001520 <__aeabi_dsub+0x3a4>
1000150a:	0003      	movs	r3, r0
1000150c:	000a      	movs	r2, r1
1000150e:	4c83      	ldr	r4, [pc, #524]	; (1000171c <__aeabi_dsub+0x5a0>)
10001510:	e04c      	b.n	100015ac <__aeabi_dsub+0x430>
10001512:	4c82      	ldr	r4, [pc, #520]	; (1000171c <__aeabi_dsub+0x5a0>)
10001514:	42a5      	cmp	r5, r4
10001516:	d0f8      	beq.n	1000150a <__aeabi_dsub+0x38e>
10001518:	2480      	movs	r4, #128	; 0x80
1000151a:	0424      	lsls	r4, r4, #16
1000151c:	4323      	orrs	r3, r4
1000151e:	0034      	movs	r4, r6
10001520:	2c38      	cmp	r4, #56	; 0x38
10001522:	dc2b      	bgt.n	1000157c <__aeabi_dsub+0x400>
10001524:	2c1f      	cmp	r4, #31
10001526:	dc18      	bgt.n	1000155a <__aeabi_dsub+0x3de>
10001528:	2620      	movs	r6, #32
1000152a:	001f      	movs	r7, r3
1000152c:	1b36      	subs	r6, r6, r4
1000152e:	40b7      	lsls	r7, r6
10001530:	9600      	str	r6, [sp, #0]
10001532:	003e      	movs	r6, r7
10001534:	0017      	movs	r7, r2
10001536:	40e7      	lsrs	r7, r4
10001538:	4337      	orrs	r7, r6
1000153a:	9e00      	ldr	r6, [sp, #0]
1000153c:	40e3      	lsrs	r3, r4
1000153e:	40b2      	lsls	r2, r6
10001540:	1e56      	subs	r6, r2, #1
10001542:	41b2      	sbcs	r2, r6
10001544:	433a      	orrs	r2, r7
10001546:	1a8a      	subs	r2, r1, r2
10001548:	4291      	cmp	r1, r2
1000154a:	4189      	sbcs	r1, r1
1000154c:	1ac3      	subs	r3, r0, r3
1000154e:	4249      	negs	r1, r1
10001550:	1a5b      	subs	r3, r3, r1
10001552:	4661      	mov	r1, ip
10001554:	002c      	movs	r4, r5
10001556:	9100      	str	r1, [sp, #0]
10001558:	e770      	b.n	1000143c <__aeabi_dsub+0x2c0>
1000155a:	0026      	movs	r6, r4
1000155c:	001f      	movs	r7, r3
1000155e:	3e20      	subs	r6, #32
10001560:	40f7      	lsrs	r7, r6
10001562:	2600      	movs	r6, #0
10001564:	2c20      	cmp	r4, #32
10001566:	d003      	beq.n	10001570 <__aeabi_dsub+0x3f4>
10001568:	3640      	adds	r6, #64	; 0x40
1000156a:	1b34      	subs	r4, r6, r4
1000156c:	40a3      	lsls	r3, r4
1000156e:	001e      	movs	r6, r3
10001570:	4332      	orrs	r2, r6
10001572:	1e53      	subs	r3, r2, #1
10001574:	419a      	sbcs	r2, r3
10001576:	433a      	orrs	r2, r7
10001578:	2300      	movs	r3, #0
1000157a:	e7e4      	b.n	10001546 <__aeabi_dsub+0x3ca>
1000157c:	431a      	orrs	r2, r3
1000157e:	1e53      	subs	r3, r2, #1
10001580:	419a      	sbcs	r2, r3
10001582:	e7f9      	b.n	10001578 <__aeabi_dsub+0x3fc>
10001584:	4e66      	ldr	r6, [pc, #408]	; (10001720 <__aeabi_dsub+0x5a4>)
10001586:	1c65      	adds	r5, r4, #1
10001588:	4235      	tst	r5, r6
1000158a:	d14e      	bne.n	1000162a <__aeabi_dsub+0x4ae>
1000158c:	0005      	movs	r5, r0
1000158e:	001e      	movs	r6, r3
10001590:	430d      	orrs	r5, r1
10001592:	4316      	orrs	r6, r2
10001594:	2c00      	cmp	r4, #0
10001596:	d127      	bne.n	100015e8 <__aeabi_dsub+0x46c>
10001598:	2e00      	cmp	r6, #0
1000159a:	d10a      	bne.n	100015b2 <__aeabi_dsub+0x436>
1000159c:	0023      	movs	r3, r4
1000159e:	0022      	movs	r2, r4
100015a0:	9400      	str	r4, [sp, #0]
100015a2:	2d00      	cmp	r5, #0
100015a4:	d100      	bne.n	100015a8 <__aeabi_dsub+0x42c>
100015a6:	e634      	b.n	10001212 <__aeabi_dsub+0x96>
100015a8:	0003      	movs	r3, r0
100015aa:	000a      	movs	r2, r1
100015ac:	4661      	mov	r1, ip
100015ae:	9100      	str	r1, [sp, #0]
100015b0:	e62f      	b.n	10001212 <__aeabi_dsub+0x96>
100015b2:	2d00      	cmp	r5, #0
100015b4:	d100      	bne.n	100015b8 <__aeabi_dsub+0x43c>
100015b6:	e62c      	b.n	10001212 <__aeabi_dsub+0x96>
100015b8:	1a56      	subs	r6, r2, r1
100015ba:	42b2      	cmp	r2, r6
100015bc:	41bf      	sbcs	r7, r7
100015be:	1a1d      	subs	r5, r3, r0
100015c0:	427f      	negs	r7, r7
100015c2:	1bed      	subs	r5, r5, r7
100015c4:	2780      	movs	r7, #128	; 0x80
100015c6:	043f      	lsls	r7, r7, #16
100015c8:	423d      	tst	r5, r7
100015ca:	d006      	beq.n	100015da <__aeabi_dsub+0x45e>
100015cc:	1a8a      	subs	r2, r1, r2
100015ce:	4291      	cmp	r1, r2
100015d0:	4189      	sbcs	r1, r1
100015d2:	1ac3      	subs	r3, r0, r3
100015d4:	4249      	negs	r1, r1
100015d6:	1a5b      	subs	r3, r3, r1
100015d8:	e7e8      	b.n	100015ac <__aeabi_dsub+0x430>
100015da:	0032      	movs	r2, r6
100015dc:	432a      	orrs	r2, r5
100015de:	d100      	bne.n	100015e2 <__aeabi_dsub+0x466>
100015e0:	e08e      	b.n	10001700 <__aeabi_dsub+0x584>
100015e2:	002b      	movs	r3, r5
100015e4:	0032      	movs	r2, r6
100015e6:	e614      	b.n	10001212 <__aeabi_dsub+0x96>
100015e8:	2e00      	cmp	r6, #0
100015ea:	d108      	bne.n	100015fe <__aeabi_dsub+0x482>
100015ec:	2d00      	cmp	r5, #0
100015ee:	d100      	bne.n	100015f2 <__aeabi_dsub+0x476>
100015f0:	e089      	b.n	10001706 <__aeabi_dsub+0x58a>
100015f2:	000a      	movs	r2, r1
100015f4:	4661      	mov	r1, ip
100015f6:	0003      	movs	r3, r0
100015f8:	9100      	str	r1, [sp, #0]
100015fa:	4c48      	ldr	r4, [pc, #288]	; (1000171c <__aeabi_dsub+0x5a0>)
100015fc:	e609      	b.n	10001212 <__aeabi_dsub+0x96>
100015fe:	2d00      	cmp	r5, #0
10001600:	d0fb      	beq.n	100015fa <__aeabi_dsub+0x47e>
10001602:	075c      	lsls	r4, r3, #29
10001604:	08d2      	lsrs	r2, r2, #3
10001606:	4322      	orrs	r2, r4
10001608:	2480      	movs	r4, #128	; 0x80
1000160a:	08db      	lsrs	r3, r3, #3
1000160c:	0324      	lsls	r4, r4, #12
1000160e:	4223      	tst	r3, r4
10001610:	d100      	bne.n	10001614 <__aeabi_dsub+0x498>
10001612:	e6ec      	b.n	100013ee <__aeabi_dsub+0x272>
10001614:	08c5      	lsrs	r5, r0, #3
10001616:	4225      	tst	r5, r4
10001618:	d000      	beq.n	1000161c <__aeabi_dsub+0x4a0>
1000161a:	e6e8      	b.n	100013ee <__aeabi_dsub+0x272>
1000161c:	08ca      	lsrs	r2, r1, #3
1000161e:	4661      	mov	r1, ip
10001620:	0740      	lsls	r0, r0, #29
10001622:	002b      	movs	r3, r5
10001624:	4302      	orrs	r2, r0
10001626:	9100      	str	r1, [sp, #0]
10001628:	e6e1      	b.n	100013ee <__aeabi_dsub+0x272>
1000162a:	1a56      	subs	r6, r2, r1
1000162c:	42b2      	cmp	r2, r6
1000162e:	41bf      	sbcs	r7, r7
10001630:	1a1d      	subs	r5, r3, r0
10001632:	427f      	negs	r7, r7
10001634:	1bed      	subs	r5, r5, r7
10001636:	2780      	movs	r7, #128	; 0x80
10001638:	043f      	lsls	r7, r7, #16
1000163a:	423d      	tst	r5, r7
1000163c:	d02d      	beq.n	1000169a <__aeabi_dsub+0x51e>
1000163e:	1a8e      	subs	r6, r1, r2
10001640:	42b1      	cmp	r1, r6
10001642:	41ad      	sbcs	r5, r5
10001644:	1ac3      	subs	r3, r0, r3
10001646:	426d      	negs	r5, r5
10001648:	1b5d      	subs	r5, r3, r5
1000164a:	4663      	mov	r3, ip
1000164c:	9300      	str	r3, [sp, #0]
1000164e:	2d00      	cmp	r5, #0
10001650:	d029      	beq.n	100016a6 <__aeabi_dsub+0x52a>
10001652:	0028      	movs	r0, r5
10001654:	f7fe fe38 	bl	100002c8 <__clzsi2>
10001658:	0001      	movs	r1, r0
1000165a:	3908      	subs	r1, #8
1000165c:	291f      	cmp	r1, #31
1000165e:	dc27      	bgt.n	100016b0 <__aeabi_dsub+0x534>
10001660:	2320      	movs	r3, #32
10001662:	0032      	movs	r2, r6
10001664:	1a5b      	subs	r3, r3, r1
10001666:	40da      	lsrs	r2, r3
10001668:	408d      	lsls	r5, r1
1000166a:	4315      	orrs	r5, r2
1000166c:	0032      	movs	r2, r6
1000166e:	408a      	lsls	r2, r1
10001670:	428c      	cmp	r4, r1
10001672:	dc32      	bgt.n	100016da <__aeabi_dsub+0x55e>
10001674:	1b09      	subs	r1, r1, r4
10001676:	1c4b      	adds	r3, r1, #1
10001678:	2b1f      	cmp	r3, #31
1000167a:	dc1e      	bgt.n	100016ba <__aeabi_dsub+0x53e>
1000167c:	2120      	movs	r1, #32
1000167e:	002c      	movs	r4, r5
10001680:	1ac9      	subs	r1, r1, r3
10001682:	0010      	movs	r0, r2
10001684:	408a      	lsls	r2, r1
10001686:	40dd      	lsrs	r5, r3
10001688:	408c      	lsls	r4, r1
1000168a:	40d8      	lsrs	r0, r3
1000168c:	1e51      	subs	r1, r2, #1
1000168e:	418a      	sbcs	r2, r1
10001690:	002b      	movs	r3, r5
10001692:	4320      	orrs	r0, r4
10001694:	4302      	orrs	r2, r0
10001696:	2400      	movs	r4, #0
10001698:	e5bb      	b.n	10001212 <__aeabi_dsub+0x96>
1000169a:	0032      	movs	r2, r6
1000169c:	432a      	orrs	r2, r5
1000169e:	d1d6      	bne.n	1000164e <__aeabi_dsub+0x4d2>
100016a0:	0013      	movs	r3, r2
100016a2:	0014      	movs	r4, r2
100016a4:	e02d      	b.n	10001702 <__aeabi_dsub+0x586>
100016a6:	0030      	movs	r0, r6
100016a8:	f7fe fe0e 	bl	100002c8 <__clzsi2>
100016ac:	3020      	adds	r0, #32
100016ae:	e7d3      	b.n	10001658 <__aeabi_dsub+0x4dc>
100016b0:	0035      	movs	r5, r6
100016b2:	3828      	subs	r0, #40	; 0x28
100016b4:	4085      	lsls	r5, r0
100016b6:	2200      	movs	r2, #0
100016b8:	e7da      	b.n	10001670 <__aeabi_dsub+0x4f4>
100016ba:	0028      	movs	r0, r5
100016bc:	391f      	subs	r1, #31
100016be:	40c8      	lsrs	r0, r1
100016c0:	2100      	movs	r1, #0
100016c2:	2b20      	cmp	r3, #32
100016c4:	d003      	beq.n	100016ce <__aeabi_dsub+0x552>
100016c6:	3140      	adds	r1, #64	; 0x40
100016c8:	1acb      	subs	r3, r1, r3
100016ca:	0029      	movs	r1, r5
100016cc:	4099      	lsls	r1, r3
100016ce:	430a      	orrs	r2, r1
100016d0:	1e53      	subs	r3, r2, #1
100016d2:	419a      	sbcs	r2, r3
100016d4:	2300      	movs	r3, #0
100016d6:	4302      	orrs	r2, r0
100016d8:	e7dd      	b.n	10001696 <__aeabi_dsub+0x51a>
100016da:	4b12      	ldr	r3, [pc, #72]	; (10001724 <__aeabi_dsub+0x5a8>)
100016dc:	1a64      	subs	r4, r4, r1
100016de:	402b      	ands	r3, r5
100016e0:	e597      	b.n	10001212 <__aeabi_dsub+0x96>
100016e2:	0003      	movs	r3, r0
100016e4:	000a      	movs	r2, r1
100016e6:	0034      	movs	r4, r6
100016e8:	e593      	b.n	10001212 <__aeabi_dsub+0x96>
100016ea:	0003      	movs	r3, r0
100016ec:	000a      	movs	r2, r1
100016ee:	e590      	b.n	10001212 <__aeabi_dsub+0x96>
100016f0:	4c0a      	ldr	r4, [pc, #40]	; (1000171c <__aeabi_dsub+0x5a0>)
100016f2:	2300      	movs	r3, #0
100016f4:	001a      	movs	r2, r3
100016f6:	e58c      	b.n	10001212 <__aeabi_dsub+0x96>
100016f8:	0003      	movs	r3, r0
100016fa:	000a      	movs	r2, r1
100016fc:	0034      	movs	r4, r6
100016fe:	e755      	b.n	100015ac <__aeabi_dsub+0x430>
10001700:	0013      	movs	r3, r2
10001702:	9200      	str	r2, [sp, #0]
10001704:	e585      	b.n	10001212 <__aeabi_dsub+0x96>
10001706:	2380      	movs	r3, #128	; 0x80
10001708:	002a      	movs	r2, r5
1000170a:	9500      	str	r5, [sp, #0]
1000170c:	03db      	lsls	r3, r3, #15
1000170e:	e774      	b.n	100015fa <__aeabi_dsub+0x47e>
10001710:	2300      	movs	r3, #0
10001712:	001a      	movs	r2, r3
10001714:	e592      	b.n	1000123c <__aeabi_dsub+0xc0>
10001716:	000b      	movs	r3, r1
10001718:	e59e      	b.n	10001258 <__aeabi_dsub+0xdc>
1000171a:	46c0      	nop			; (mov r8, r8)
1000171c:	000007ff 	.word	0x000007ff
10001720:	000007fe 	.word	0x000007fe
10001724:	ff7fffff 	.word	0xff7fffff

10001728 <__aeabi_ui2d>:
10001728:	b510      	push	{r4, lr}
1000172a:	0003      	movs	r3, r0
1000172c:	0004      	movs	r4, r0
1000172e:	1e02      	subs	r2, r0, #0
10001730:	d00c      	beq.n	1000174c <__aeabi_ui2d+0x24>
10001732:	f7fe fdc9 	bl	100002c8 <__clzsi2>
10001736:	4a0b      	ldr	r2, [pc, #44]	; (10001764 <__aeabi_ui2d+0x3c>)
10001738:	1a12      	subs	r2, r2, r0
1000173a:	280a      	cmp	r0, #10
1000173c:	dc0d      	bgt.n	1000175a <__aeabi_ui2d+0x32>
1000173e:	230b      	movs	r3, #11
10001740:	0021      	movs	r1, r4
10001742:	1a1b      	subs	r3, r3, r0
10001744:	40d9      	lsrs	r1, r3
10001746:	3015      	adds	r0, #21
10001748:	000b      	movs	r3, r1
1000174a:	4084      	lsls	r4, r0
1000174c:	031b      	lsls	r3, r3, #12
1000174e:	0b1b      	lsrs	r3, r3, #12
10001750:	0512      	lsls	r2, r2, #20
10001752:	431a      	orrs	r2, r3
10001754:	0020      	movs	r0, r4
10001756:	0011      	movs	r1, r2
10001758:	bd10      	pop	{r4, pc}
1000175a:	0023      	movs	r3, r4
1000175c:	380b      	subs	r0, #11
1000175e:	4083      	lsls	r3, r0
10001760:	2400      	movs	r4, #0
10001762:	e7f3      	b.n	1000174c <__aeabi_ui2d+0x24>
10001764:	0000041e 	.word	0x0000041e

10001768 <__aeabi_f2d>:
10001768:	22fe      	movs	r2, #254	; 0xfe
1000176a:	b570      	push	{r4, r5, r6, lr}
1000176c:	0044      	lsls	r4, r0, #1
1000176e:	0e24      	lsrs	r4, r4, #24
10001770:	0243      	lsls	r3, r0, #9
10001772:	1c61      	adds	r1, r4, #1
10001774:	0a5d      	lsrs	r5, r3, #9
10001776:	0fc6      	lsrs	r6, r0, #31
10001778:	4211      	tst	r1, r2
1000177a:	d00d      	beq.n	10001798 <__aeabi_f2d+0x30>
1000177c:	22e0      	movs	r2, #224	; 0xe0
1000177e:	0092      	lsls	r2, r2, #2
10001780:	18a4      	adds	r4, r4, r2
10001782:	0b1b      	lsrs	r3, r3, #12
10001784:	076d      	lsls	r5, r5, #29
10001786:	031b      	lsls	r3, r3, #12
10001788:	0b1b      	lsrs	r3, r3, #12
1000178a:	0524      	lsls	r4, r4, #20
1000178c:	07f6      	lsls	r6, r6, #31
1000178e:	431c      	orrs	r4, r3
10001790:	4334      	orrs	r4, r6
10001792:	0028      	movs	r0, r5
10001794:	0021      	movs	r1, r4
10001796:	bd70      	pop	{r4, r5, r6, pc}
10001798:	2c00      	cmp	r4, #0
1000179a:	d118      	bne.n	100017ce <__aeabi_f2d+0x66>
1000179c:	0023      	movs	r3, r4
1000179e:	2d00      	cmp	r5, #0
100017a0:	d0f1      	beq.n	10001786 <__aeabi_f2d+0x1e>
100017a2:	0028      	movs	r0, r5
100017a4:	f7fe fd90 	bl	100002c8 <__clzsi2>
100017a8:	280a      	cmp	r0, #10
100017aa:	dc0a      	bgt.n	100017c2 <__aeabi_f2d+0x5a>
100017ac:	230b      	movs	r3, #11
100017ae:	002a      	movs	r2, r5
100017b0:	1a1b      	subs	r3, r3, r0
100017b2:	40da      	lsrs	r2, r3
100017b4:	0013      	movs	r3, r2
100017b6:	0002      	movs	r2, r0
100017b8:	3215      	adds	r2, #21
100017ba:	4095      	lsls	r5, r2
100017bc:	4c09      	ldr	r4, [pc, #36]	; (100017e4 <__aeabi_f2d+0x7c>)
100017be:	1a24      	subs	r4, r4, r0
100017c0:	e7e1      	b.n	10001786 <__aeabi_f2d+0x1e>
100017c2:	0003      	movs	r3, r0
100017c4:	3b0b      	subs	r3, #11
100017c6:	409d      	lsls	r5, r3
100017c8:	002b      	movs	r3, r5
100017ca:	0025      	movs	r5, r4
100017cc:	e7f6      	b.n	100017bc <__aeabi_f2d+0x54>
100017ce:	2d00      	cmp	r5, #0
100017d0:	d006      	beq.n	100017e0 <__aeabi_f2d+0x78>
100017d2:	2480      	movs	r4, #128	; 0x80
100017d4:	0b1b      	lsrs	r3, r3, #12
100017d6:	0324      	lsls	r4, r4, #12
100017d8:	076d      	lsls	r5, r5, #29
100017da:	4323      	orrs	r3, r4
100017dc:	4c02      	ldr	r4, [pc, #8]	; (100017e8 <__aeabi_f2d+0x80>)
100017de:	e7d2      	b.n	10001786 <__aeabi_f2d+0x1e>
100017e0:	002b      	movs	r3, r5
100017e2:	e7fb      	b.n	100017dc <__aeabi_f2d+0x74>
100017e4:	00000389 	.word	0x00000389
100017e8:	000007ff 	.word	0x000007ff

100017ec <__aeabi_d2f>:
100017ec:	b570      	push	{r4, r5, r6, lr}
100017ee:	0005      	movs	r5, r0
100017f0:	000a      	movs	r2, r1
100017f2:	0308      	lsls	r0, r1, #12
100017f4:	0049      	lsls	r1, r1, #1
100017f6:	0d49      	lsrs	r1, r1, #21
100017f8:	4c39      	ldr	r4, [pc, #228]	; (100018e0 <__aeabi_d2f+0xf4>)
100017fa:	0f6b      	lsrs	r3, r5, #29
100017fc:	0a40      	lsrs	r0, r0, #9
100017fe:	1c4e      	adds	r6, r1, #1
10001800:	4318      	orrs	r0, r3
10001802:	0fd2      	lsrs	r2, r2, #31
10001804:	00eb      	lsls	r3, r5, #3
10001806:	4226      	tst	r6, r4
10001808:	d054      	beq.n	100018b4 <__aeabi_d2f+0xc8>
1000180a:	4c36      	ldr	r4, [pc, #216]	; (100018e4 <__aeabi_d2f+0xf8>)
1000180c:	190c      	adds	r4, r1, r4
1000180e:	2cfe      	cmp	r4, #254	; 0xfe
10001810:	dc5e      	bgt.n	100018d0 <__aeabi_d2f+0xe4>
10001812:	2c00      	cmp	r4, #0
10001814:	dc45      	bgt.n	100018a2 <__aeabi_d2f+0xb6>
10001816:	0025      	movs	r5, r4
10001818:	3517      	adds	r5, #23
1000181a:	db5c      	blt.n	100018d6 <__aeabi_d2f+0xea>
1000181c:	2580      	movs	r5, #128	; 0x80
1000181e:	042d      	lsls	r5, r5, #16
10001820:	4328      	orrs	r0, r5
10001822:	251e      	movs	r5, #30
10001824:	1b2d      	subs	r5, r5, r4
10001826:	2d1f      	cmp	r5, #31
10001828:	dc2a      	bgt.n	10001880 <__aeabi_d2f+0x94>
1000182a:	4c2f      	ldr	r4, [pc, #188]	; (100018e8 <__aeabi_d2f+0xfc>)
1000182c:	1909      	adds	r1, r1, r4
1000182e:	001c      	movs	r4, r3
10001830:	408b      	lsls	r3, r1
10001832:	40ec      	lsrs	r4, r5
10001834:	4088      	lsls	r0, r1
10001836:	1e5d      	subs	r5, r3, #1
10001838:	41ab      	sbcs	r3, r5
1000183a:	4303      	orrs	r3, r0
1000183c:	4323      	orrs	r3, r4
1000183e:	2100      	movs	r1, #0
10001840:	0758      	lsls	r0, r3, #29
10001842:	d004      	beq.n	1000184e <__aeabi_d2f+0x62>
10001844:	200f      	movs	r0, #15
10001846:	4018      	ands	r0, r3
10001848:	2804      	cmp	r0, #4
1000184a:	d000      	beq.n	1000184e <__aeabi_d2f+0x62>
1000184c:	3304      	adds	r3, #4
1000184e:	0158      	lsls	r0, r3, #5
10001850:	d504      	bpl.n	1000185c <__aeabi_d2f+0x70>
10001852:	3101      	adds	r1, #1
10001854:	29ff      	cmp	r1, #255	; 0xff
10001856:	d041      	beq.n	100018dc <__aeabi_d2f+0xf0>
10001858:	4824      	ldr	r0, [pc, #144]	; (100018ec <__aeabi_d2f+0x100>)
1000185a:	4003      	ands	r3, r0
1000185c:	08db      	lsrs	r3, r3, #3
1000185e:	29ff      	cmp	r1, #255	; 0xff
10001860:	d104      	bne.n	1000186c <__aeabi_d2f+0x80>
10001862:	2b00      	cmp	r3, #0
10001864:	d002      	beq.n	1000186c <__aeabi_d2f+0x80>
10001866:	2080      	movs	r0, #128	; 0x80
10001868:	03c0      	lsls	r0, r0, #15
1000186a:	4303      	orrs	r3, r0
1000186c:	05c8      	lsls	r0, r1, #23
1000186e:	21ff      	movs	r1, #255	; 0xff
10001870:	05c9      	lsls	r1, r1, #23
10001872:	025b      	lsls	r3, r3, #9
10001874:	4008      	ands	r0, r1
10001876:	0a5b      	lsrs	r3, r3, #9
10001878:	4303      	orrs	r3, r0
1000187a:	07d0      	lsls	r0, r2, #31
1000187c:	4318      	orrs	r0, r3
1000187e:	bd70      	pop	{r4, r5, r6, pc}
10001880:	2602      	movs	r6, #2
10001882:	4276      	negs	r6, r6
10001884:	1b34      	subs	r4, r6, r4
10001886:	0006      	movs	r6, r0
10001888:	40e6      	lsrs	r6, r4
1000188a:	2400      	movs	r4, #0
1000188c:	2d20      	cmp	r5, #32
1000188e:	d003      	beq.n	10001898 <__aeabi_d2f+0xac>
10001890:	4c17      	ldr	r4, [pc, #92]	; (100018f0 <__aeabi_d2f+0x104>)
10001892:	1909      	adds	r1, r1, r4
10001894:	4088      	lsls	r0, r1
10001896:	0004      	movs	r4, r0
10001898:	4323      	orrs	r3, r4
1000189a:	1e59      	subs	r1, r3, #1
1000189c:	418b      	sbcs	r3, r1
1000189e:	4333      	orrs	r3, r6
100018a0:	e7cd      	b.n	1000183e <__aeabi_d2f+0x52>
100018a2:	0f59      	lsrs	r1, r3, #29
100018a4:	01ab      	lsls	r3, r5, #6
100018a6:	1e5d      	subs	r5, r3, #1
100018a8:	41ab      	sbcs	r3, r5
100018aa:	00c0      	lsls	r0, r0, #3
100018ac:	4303      	orrs	r3, r0
100018ae:	430b      	orrs	r3, r1
100018b0:	0021      	movs	r1, r4
100018b2:	e7c5      	b.n	10001840 <__aeabi_d2f+0x54>
100018b4:	4303      	orrs	r3, r0
100018b6:	2900      	cmp	r1, #0
100018b8:	d102      	bne.n	100018c0 <__aeabi_d2f+0xd4>
100018ba:	1e58      	subs	r0, r3, #1
100018bc:	4183      	sbcs	r3, r0
100018be:	e7bf      	b.n	10001840 <__aeabi_d2f+0x54>
100018c0:	21ff      	movs	r1, #255	; 0xff
100018c2:	2b00      	cmp	r3, #0
100018c4:	d0bc      	beq.n	10001840 <__aeabi_d2f+0x54>
100018c6:	2380      	movs	r3, #128	; 0x80
100018c8:	00c0      	lsls	r0, r0, #3
100018ca:	049b      	lsls	r3, r3, #18
100018cc:	4303      	orrs	r3, r0
100018ce:	e7b7      	b.n	10001840 <__aeabi_d2f+0x54>
100018d0:	21ff      	movs	r1, #255	; 0xff
100018d2:	2300      	movs	r3, #0
100018d4:	e7b4      	b.n	10001840 <__aeabi_d2f+0x54>
100018d6:	2100      	movs	r1, #0
100018d8:	2301      	movs	r3, #1
100018da:	e7b1      	b.n	10001840 <__aeabi_d2f+0x54>
100018dc:	2300      	movs	r3, #0
100018de:	e7bd      	b.n	1000185c <__aeabi_d2f+0x70>
100018e0:	000007fe 	.word	0x000007fe
100018e4:	fffffc80 	.word	0xfffffc80
100018e8:	fffffc82 	.word	0xfffffc82
100018ec:	fbffffff 	.word	0xfbffffff
100018f0:	fffffca2 	.word	0xfffffca2

100018f4 <__gnu_thumb1_case_uhi>:
100018f4:	b403      	push	{r0, r1}
100018f6:	4671      	mov	r1, lr
100018f8:	0849      	lsrs	r1, r1, #1
100018fa:	0040      	lsls	r0, r0, #1
100018fc:	0049      	lsls	r1, r1, #1
100018fe:	5a09      	ldrh	r1, [r1, r0]
10001900:	0049      	lsls	r1, r1, #1
10001902:	448e      	add	lr, r1
10001904:	bc03      	pop	{r0, r1}
10001906:	4770      	bx	lr

10001908 <__aeabi_llsr>:
10001908:	40d0      	lsrs	r0, r2
1000190a:	000b      	movs	r3, r1
1000190c:	40d1      	lsrs	r1, r2
1000190e:	469c      	mov	ip, r3
10001910:	3a20      	subs	r2, #32
10001912:	40d3      	lsrs	r3, r2
10001914:	4318      	orrs	r0, r3
10001916:	4252      	negs	r2, r2
10001918:	4663      	mov	r3, ip
1000191a:	4093      	lsls	r3, r2
1000191c:	4318      	orrs	r0, r3
1000191e:	4770      	bx	lr

10001920 <__aeabi_llsl>:
10001920:	4091      	lsls	r1, r2
10001922:	0003      	movs	r3, r0
10001924:	4090      	lsls	r0, r2
10001926:	469c      	mov	ip, r3
10001928:	3a20      	subs	r2, #32
1000192a:	4093      	lsls	r3, r2
1000192c:	4319      	orrs	r1, r3
1000192e:	4252      	negs	r2, r2
10001930:	4663      	mov	r3, ip
10001932:	40d3      	lsrs	r3, r2
10001934:	4319      	orrs	r1, r3
10001936:	4770      	bx	lr

10001938 <__clzdi2>:
10001938:	b510      	push	{r4, lr}
1000193a:	2900      	cmp	r1, #0
1000193c:	d103      	bne.n	10001946 <__clzdi2+0xe>
1000193e:	f7fe fcc3 	bl	100002c8 <__clzsi2>
10001942:	3020      	adds	r0, #32
10001944:	e002      	b.n	1000194c <__clzdi2+0x14>
10001946:	0008      	movs	r0, r1
10001948:	f7fe fcbe 	bl	100002c8 <__clzsi2>
1000194c:	bd10      	pop	{r4, pc}
1000194e:	46c0      	nop			; (mov r8, r8)

10001950 <__aeabi_d2uiz>:
10001950:	b570      	push	{r4, r5, r6, lr}
10001952:	2200      	movs	r2, #0
10001954:	4b0b      	ldr	r3, [pc, #44]	; (10001984 <__aeabi_d2uiz+0x34>)
10001956:	0004      	movs	r4, r0
10001958:	000d      	movs	r5, r1
1000195a:	f7fe fcab 	bl	100002b4 <__aeabi_dcmpge>
1000195e:	2800      	cmp	r0, #0
10001960:	d00b      	beq.n	1000197a <__aeabi_d2uiz+0x2a>
10001962:	4b08      	ldr	r3, [pc, #32]	; (10001984 <__aeabi_d2uiz+0x34>)
10001964:	2200      	movs	r2, #0
10001966:	0020      	movs	r0, r4
10001968:	0029      	movs	r1, r5
1000196a:	f7ff fc07 	bl	1000117c <__aeabi_dsub>
1000196e:	f000 f80b 	bl	10001988 <__aeabi_d2iz>
10001972:	2380      	movs	r3, #128	; 0x80
10001974:	061b      	lsls	r3, r3, #24
10001976:	18c0      	adds	r0, r0, r3
10001978:	bd70      	pop	{r4, r5, r6, pc}
1000197a:	0020      	movs	r0, r4
1000197c:	0029      	movs	r1, r5
1000197e:	f000 f803 	bl	10001988 <__aeabi_d2iz>
10001982:	e7f9      	b.n	10001978 <__aeabi_d2uiz+0x28>
10001984:	41e00000 	.word	0x41e00000

10001988 <__aeabi_d2iz>:
10001988:	000a      	movs	r2, r1
1000198a:	b530      	push	{r4, r5, lr}
1000198c:	4d11      	ldr	r5, [pc, #68]	; (100019d4 <__aeabi_d2iz+0x4c>)
1000198e:	0053      	lsls	r3, r2, #1
10001990:	0309      	lsls	r1, r1, #12
10001992:	0004      	movs	r4, r0
10001994:	0b09      	lsrs	r1, r1, #12
10001996:	2000      	movs	r0, #0
10001998:	0d5b      	lsrs	r3, r3, #21
1000199a:	0fd2      	lsrs	r2, r2, #31
1000199c:	42ab      	cmp	r3, r5
1000199e:	dd04      	ble.n	100019aa <__aeabi_d2iz+0x22>
100019a0:	480d      	ldr	r0, [pc, #52]	; (100019d8 <__aeabi_d2iz+0x50>)
100019a2:	4283      	cmp	r3, r0
100019a4:	dd02      	ble.n	100019ac <__aeabi_d2iz+0x24>
100019a6:	4b0d      	ldr	r3, [pc, #52]	; (100019dc <__aeabi_d2iz+0x54>)
100019a8:	18d0      	adds	r0, r2, r3
100019aa:	bd30      	pop	{r4, r5, pc}
100019ac:	2080      	movs	r0, #128	; 0x80
100019ae:	0340      	lsls	r0, r0, #13
100019b0:	4308      	orrs	r0, r1
100019b2:	490b      	ldr	r1, [pc, #44]	; (100019e0 <__aeabi_d2iz+0x58>)
100019b4:	1ac9      	subs	r1, r1, r3
100019b6:	291f      	cmp	r1, #31
100019b8:	dc08      	bgt.n	100019cc <__aeabi_d2iz+0x44>
100019ba:	4d0a      	ldr	r5, [pc, #40]	; (100019e4 <__aeabi_d2iz+0x5c>)
100019bc:	40cc      	lsrs	r4, r1
100019be:	195b      	adds	r3, r3, r5
100019c0:	4098      	lsls	r0, r3
100019c2:	4320      	orrs	r0, r4
100019c4:	2a00      	cmp	r2, #0
100019c6:	d0f0      	beq.n	100019aa <__aeabi_d2iz+0x22>
100019c8:	4240      	negs	r0, r0
100019ca:	e7ee      	b.n	100019aa <__aeabi_d2iz+0x22>
100019cc:	4906      	ldr	r1, [pc, #24]	; (100019e8 <__aeabi_d2iz+0x60>)
100019ce:	1acb      	subs	r3, r1, r3
100019d0:	40d8      	lsrs	r0, r3
100019d2:	e7f7      	b.n	100019c4 <__aeabi_d2iz+0x3c>
100019d4:	000003fe 	.word	0x000003fe
100019d8:	0000041d 	.word	0x0000041d
100019dc:	7fffffff 	.word	0x7fffffff
100019e0:	00000433 	.word	0x00000433
100019e4:	fffffbed 	.word	0xfffffbed
100019e8:	00000413 	.word	0x00000413

100019ec <__aeabi_lmul>:
100019ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100019ee:	9301      	str	r3, [sp, #4]
100019f0:	b283      	uxth	r3, r0
100019f2:	469c      	mov	ip, r3
100019f4:	0006      	movs	r6, r0
100019f6:	0c03      	lsrs	r3, r0, #16
100019f8:	4660      	mov	r0, ip
100019fa:	000d      	movs	r5, r1
100019fc:	4661      	mov	r1, ip
100019fe:	b297      	uxth	r7, r2
10001a00:	4378      	muls	r0, r7
10001a02:	0c14      	lsrs	r4, r2, #16
10001a04:	435f      	muls	r7, r3
10001a06:	4363      	muls	r3, r4
10001a08:	434c      	muls	r4, r1
10001a0a:	0c01      	lsrs	r1, r0, #16
10001a0c:	468c      	mov	ip, r1
10001a0e:	19e4      	adds	r4, r4, r7
10001a10:	4464      	add	r4, ip
10001a12:	42a7      	cmp	r7, r4
10001a14:	d902      	bls.n	10001a1c <__aeabi_lmul+0x30>
10001a16:	2180      	movs	r1, #128	; 0x80
10001a18:	0249      	lsls	r1, r1, #9
10001a1a:	185b      	adds	r3, r3, r1
10001a1c:	9901      	ldr	r1, [sp, #4]
10001a1e:	436a      	muls	r2, r5
10001a20:	4371      	muls	r1, r6
10001a22:	0c27      	lsrs	r7, r4, #16
10001a24:	18fb      	adds	r3, r7, r3
10001a26:	0424      	lsls	r4, r4, #16
10001a28:	18c9      	adds	r1, r1, r3
10001a2a:	b280      	uxth	r0, r0
10001a2c:	1820      	adds	r0, r4, r0
10001a2e:	1889      	adds	r1, r1, r2
10001a30:	b003      	add	sp, #12
10001a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001a34 <__udivmoddi4>:
10001a34:	b5f0      	push	{r4, r5, r6, r7, lr}
10001a36:	0006      	movs	r6, r0
10001a38:	000f      	movs	r7, r1
10001a3a:	0015      	movs	r5, r2
10001a3c:	001c      	movs	r4, r3
10001a3e:	b085      	sub	sp, #20
10001a40:	428b      	cmp	r3, r1
10001a42:	d863      	bhi.n	10001b0c <__udivmoddi4+0xd8>
10001a44:	d101      	bne.n	10001a4a <__udivmoddi4+0x16>
10001a46:	4282      	cmp	r2, r0
10001a48:	d860      	bhi.n	10001b0c <__udivmoddi4+0xd8>
10001a4a:	0021      	movs	r1, r4
10001a4c:	0028      	movs	r0, r5
10001a4e:	f7ff ff73 	bl	10001938 <__clzdi2>
10001a52:	0039      	movs	r1, r7
10001a54:	9000      	str	r0, [sp, #0]
10001a56:	0030      	movs	r0, r6
10001a58:	f7ff ff6e 	bl	10001938 <__clzdi2>
10001a5c:	9b00      	ldr	r3, [sp, #0]
10001a5e:	0021      	movs	r1, r4
10001a60:	1a1b      	subs	r3, r3, r0
10001a62:	001a      	movs	r2, r3
10001a64:	0028      	movs	r0, r5
10001a66:	9303      	str	r3, [sp, #12]
10001a68:	f7ff ff5a 	bl	10001920 <__aeabi_llsl>
10001a6c:	9000      	str	r0, [sp, #0]
10001a6e:	9101      	str	r1, [sp, #4]
10001a70:	42b9      	cmp	r1, r7
10001a72:	d845      	bhi.n	10001b00 <__udivmoddi4+0xcc>
10001a74:	d101      	bne.n	10001a7a <__udivmoddi4+0x46>
10001a76:	42b0      	cmp	r0, r6
10001a78:	d842      	bhi.n	10001b00 <__udivmoddi4+0xcc>
10001a7a:	9b00      	ldr	r3, [sp, #0]
10001a7c:	9c01      	ldr	r4, [sp, #4]
10001a7e:	2001      	movs	r0, #1
10001a80:	2100      	movs	r1, #0
10001a82:	9a03      	ldr	r2, [sp, #12]
10001a84:	1af6      	subs	r6, r6, r3
10001a86:	41a7      	sbcs	r7, r4
10001a88:	f7ff ff4a 	bl	10001920 <__aeabi_llsl>
10001a8c:	0004      	movs	r4, r0
10001a8e:	000d      	movs	r5, r1
10001a90:	9b03      	ldr	r3, [sp, #12]
10001a92:	2b00      	cmp	r3, #0
10001a94:	d02b      	beq.n	10001aee <__udivmoddi4+0xba>
10001a96:	9b01      	ldr	r3, [sp, #4]
10001a98:	9a00      	ldr	r2, [sp, #0]
10001a9a:	07db      	lsls	r3, r3, #31
10001a9c:	0850      	lsrs	r0, r2, #1
10001a9e:	4318      	orrs	r0, r3
10001aa0:	9b01      	ldr	r3, [sp, #4]
10001aa2:	0859      	lsrs	r1, r3, #1
10001aa4:	9b03      	ldr	r3, [sp, #12]
10001aa6:	469c      	mov	ip, r3
10001aa8:	42b9      	cmp	r1, r7
10001aaa:	d82c      	bhi.n	10001b06 <__udivmoddi4+0xd2>
10001aac:	d101      	bne.n	10001ab2 <__udivmoddi4+0x7e>
10001aae:	42b0      	cmp	r0, r6
10001ab0:	d829      	bhi.n	10001b06 <__udivmoddi4+0xd2>
10001ab2:	0032      	movs	r2, r6
10001ab4:	003b      	movs	r3, r7
10001ab6:	1a12      	subs	r2, r2, r0
10001ab8:	418b      	sbcs	r3, r1
10001aba:	2601      	movs	r6, #1
10001abc:	1892      	adds	r2, r2, r2
10001abe:	415b      	adcs	r3, r3
10001ac0:	2700      	movs	r7, #0
10001ac2:	18b6      	adds	r6, r6, r2
10001ac4:	415f      	adcs	r7, r3
10001ac6:	2301      	movs	r3, #1
10001ac8:	425b      	negs	r3, r3
10001aca:	449c      	add	ip, r3
10001acc:	4663      	mov	r3, ip
10001ace:	2b00      	cmp	r3, #0
10001ad0:	d1ea      	bne.n	10001aa8 <__udivmoddi4+0x74>
10001ad2:	0030      	movs	r0, r6
10001ad4:	0039      	movs	r1, r7
10001ad6:	9a03      	ldr	r2, [sp, #12]
10001ad8:	f7ff ff16 	bl	10001908 <__aeabi_llsr>
10001adc:	9a03      	ldr	r2, [sp, #12]
10001ade:	19a4      	adds	r4, r4, r6
10001ae0:	417d      	adcs	r5, r7
10001ae2:	0006      	movs	r6, r0
10001ae4:	000f      	movs	r7, r1
10001ae6:	f7ff ff1b 	bl	10001920 <__aeabi_llsl>
10001aea:	1a24      	subs	r4, r4, r0
10001aec:	418d      	sbcs	r5, r1
10001aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001af0:	2b00      	cmp	r3, #0
10001af2:	d001      	beq.n	10001af8 <__udivmoddi4+0xc4>
10001af4:	601e      	str	r6, [r3, #0]
10001af6:	605f      	str	r7, [r3, #4]
10001af8:	0020      	movs	r0, r4
10001afa:	0029      	movs	r1, r5
10001afc:	b005      	add	sp, #20
10001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001b00:	2400      	movs	r4, #0
10001b02:	2500      	movs	r5, #0
10001b04:	e7c4      	b.n	10001a90 <__udivmoddi4+0x5c>
10001b06:	19b6      	adds	r6, r6, r6
10001b08:	417f      	adcs	r7, r7
10001b0a:	e7dc      	b.n	10001ac6 <__udivmoddi4+0x92>
10001b0c:	2400      	movs	r4, #0
10001b0e:	2500      	movs	r5, #0
10001b10:	e7ed      	b.n	10001aee <__udivmoddi4+0xba>
	...

10001b14 <main>:
/* Function prototype ------------------------------------------------------------------------------------------------------------------------------------*/
/* Setup -------------------------------------------------------------------------------------------------------------------------------------------------*/
/* -------------------------------------------------------------------------------------------------------------------------------------------------------*/


void main(void) {	
10001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
10001b16:	b0b7      	sub	sp, #220	; 0xdc
10001b18:	af00      	add	r7, sp, #0
	
	motor_uSetup();
10001b1a:	f000 f895 	bl	10001c48 <motor_uSetup>
	gprs_vSetup();
10001b1e:	f000 f9ed 	bl	10001efc <gprs_vSetup>
	led_vSetup();
10001b22:	f000 f915 	bl	10001d50 <led_vSetup>
	comm_vSetup();
10001b26:	f000 f98d 	bl	10001e44 <comm_vSetup>

	motor_vTurnoff(M1A, M1B);
10001b2a:	2101      	movs	r1, #1
10001b2c:	2000      	movs	r0, #0
10001b2e:	f000 f8e7 	bl	10001d00 <motor_vTurnoff>
	motor_vTurnoff(M2A, M2B);
10001b32:	2103      	movs	r1, #3
10001b34:	2002      	movs	r0, #2
10001b36:	f000 f8e3 	bl	10001d00 <motor_vTurnoff>
	motor_vTurnoff(M3A, M3B);
10001b3a:	2105      	movs	r1, #5
10001b3c:	2004      	movs	r0, #4
10001b3e:	f000 f8df 	bl	10001d00 <motor_vTurnoff>
	motor_vTurnoff(M4A, M4B);
10001b42:	2107      	movs	r1, #7
10001b44:	2006      	movs	r0, #6
10001b46:	f000 f8db 	bl	10001d00 <motor_vTurnoff>

	printk("started \r\n");

	gprs_vDisable();
10001b4a:	f002 fba2 	bl	10004292 <gprs_vDisable>


	char bff[UART_MESSAGE_SIZE] = "";
10001b4e:	2308      	movs	r3, #8
10001b50:	2100      	movs	r1, #0
10001b52:	18f8      	adds	r0, r7, r3
10001b54:	22c8      	movs	r2, #200	; 0xc8
10001b56:	18c0      	adds	r0, r0, r3
10001b58:	60f9      	str	r1, [r7, #12]

	while (true) {

		comm_vGetMessage(UART0, bff, K_FOREVER);
10001b5a:	2401      	movs	r4, #1
10001b5c:	4264      	negs	r4, r4
10001b5e:	17e5      	asrs	r5, r4, #31
	char bff[UART_MESSAGE_SIZE] = "";
10001b60:	f002 fdec 	bl	1000473c <memset>
		comm_vGetMessage(UART0, bff, K_FOREVER);
10001b64:	260c      	movs	r6, #12
10001b66:	0022      	movs	r2, r4
10001b68:	002b      	movs	r3, r5
10001b6a:	19b9      	adds	r1, r7, r6
10001b6c:	2000      	movs	r0, #0
10001b6e:	f000 f913 	bl	10001d98 <comm_vGetMessage>

		comm_uSendStringLn(UART0, bff);
10001b72:	19b9      	adds	r1, r7, r6
10001b74:	2000      	movs	r0, #0
10001b76:	f000 f92d 	bl	10001dd4 <comm_uSendStringLn>

		if (textp_bFindString(bff, "toFront") ) { 
10001b7a:	19b8      	adds	r0, r7, r6
10001b7c:	492e      	ldr	r1, [pc, #184]	; (10001c38 <main+0x124>)
10001b7e:	f002 fb8f 	bl	100042a0 <textp_bFindString>
10001b82:	1e06      	subs	r6, r0, #0
10001b84:	d010      	beq.n	10001ba8 <main+0x94>

			motor_vToFront(M1A, M1B);
10001b86:	2101      	movs	r1, #1
10001b88:	2000      	movs	r0, #0
10001b8a:	f000 f895 	bl	10001cb8 <motor_vToFront>
			motor_vToFront(M2A, M2B);
10001b8e:	2103      	movs	r1, #3
10001b90:	2002      	movs	r0, #2
10001b92:	f000 f891 	bl	10001cb8 <motor_vToFront>
		} else if (textp_bFindString(bff, "turnRight") ) {
		
			motor_vToBack(M1A, M1B);
			motor_vToBack(M2A, M2B);

			motor_vToFront(M3A, M3B);
10001b96:	2105      	movs	r1, #5
10001b98:	2004      	movs	r0, #4
10001b9a:	f000 f88d 	bl	10001cb8 <motor_vToFront>
			motor_vToFront(M4A, M4B);
10001b9e:	2107      	movs	r1, #7
10001ba0:	2006      	movs	r0, #6
10001ba2:	f000 f889 	bl	10001cb8 <motor_vToFront>
10001ba6:	e7dd      	b.n	10001b64 <main+0x50>
		} else if (textp_bFindString(bff, "toBack") ) {
10001ba8:	230c      	movs	r3, #12
10001baa:	4924      	ldr	r1, [pc, #144]	; (10001c3c <main+0x128>)
10001bac:	18f8      	adds	r0, r7, r3
10001bae:	f002 fb77 	bl	100042a0 <textp_bFindString>
10001bb2:	6078      	str	r0, [r7, #4]
10001bb4:	2800      	cmp	r0, #0
10001bb6:	d010      	beq.n	10001bda <main+0xc6>
			motor_vToBack(M1A, M1B);
10001bb8:	2101      	movs	r1, #1
10001bba:	0030      	movs	r0, r6
10001bbc:	f000 f88e 	bl	10001cdc <motor_vToBack>
			motor_vToBack(M2A, M2B);
10001bc0:	2103      	movs	r1, #3
10001bc2:	2002      	movs	r0, #2
10001bc4:	f000 f88a 	bl	10001cdc <motor_vToBack>
			motor_vToBack(M3A, M3B);
10001bc8:	2105      	movs	r1, #5
10001bca:	2004      	movs	r0, #4
10001bcc:	f000 f886 	bl	10001cdc <motor_vToBack>
			motor_vToBack(M4A, M4B);
10001bd0:	2107      	movs	r1, #7
10001bd2:	2006      	movs	r0, #6
10001bd4:	f000 f882 	bl	10001cdc <motor_vToBack>
10001bd8:	e7c4      	b.n	10001b64 <main+0x50>
		} else if (textp_bFindString(bff, "turnLeft") ) {
10001bda:	230c      	movs	r3, #12
10001bdc:	4918      	ldr	r1, [pc, #96]	; (10001c40 <main+0x12c>)
10001bde:	18f8      	adds	r0, r7, r3
10001be0:	f002 fb5e 	bl	100042a0 <textp_bFindString>
10001be4:	1e06      	subs	r6, r0, #0
10001be6:	d008      	beq.n	10001bfa <main+0xe6>
			motor_vToFront(M1A, M1B);
10001be8:	6878      	ldr	r0, [r7, #4]
10001bea:	2101      	movs	r1, #1
10001bec:	f000 f864 	bl	10001cb8 <motor_vToFront>
			motor_vToFront(M2A, M2B);
10001bf0:	2103      	movs	r1, #3
10001bf2:	2002      	movs	r0, #2
10001bf4:	f000 f860 	bl	10001cb8 <motor_vToFront>
10001bf8:	e7e6      	b.n	10001bc8 <main+0xb4>
		} else if (textp_bFindString(bff, "turnRight") ) {
10001bfa:	230c      	movs	r3, #12
10001bfc:	4911      	ldr	r1, [pc, #68]	; (10001c44 <main+0x130>)
10001bfe:	18f8      	adds	r0, r7, r3
10001c00:	f002 fb4e 	bl	100042a0 <textp_bFindString>
			motor_vToBack(M1A, M1B);
10001c04:	2101      	movs	r1, #1
		} else if (textp_bFindString(bff, "turnRight") ) {
10001c06:	2800      	cmp	r0, #0
10001c08:	d007      	beq.n	10001c1a <main+0x106>
			motor_vToBack(M1A, M1B);
10001c0a:	0030      	movs	r0, r6
10001c0c:	f000 f866 	bl	10001cdc <motor_vToBack>
			motor_vToBack(M2A, M2B);
10001c10:	2103      	movs	r1, #3
10001c12:	2002      	movs	r0, #2
10001c14:	f000 f862 	bl	10001cdc <motor_vToBack>
10001c18:	e7bd      	b.n	10001b96 <main+0x82>
		
		} else /*if (textp_bFindString(bff,"turnoff") )*/ {


			motor_vTurnoff(M1A, M1B);
10001c1a:	f000 f871 	bl	10001d00 <motor_vTurnoff>
			motor_vTurnoff(M2A, M2B);
10001c1e:	2103      	movs	r1, #3
10001c20:	2002      	movs	r0, #2
10001c22:	f000 f86d 	bl	10001d00 <motor_vTurnoff>
			motor_vTurnoff(M3A, M3B);
10001c26:	2105      	movs	r1, #5
10001c28:	2004      	movs	r0, #4
10001c2a:	f000 f869 	bl	10001d00 <motor_vTurnoff>
			motor_vTurnoff(M4A, M4B);
10001c2e:	2107      	movs	r1, #7
10001c30:	2006      	movs	r0, #6
10001c32:	f000 f865 	bl	10001d00 <motor_vTurnoff>
	while (true) {
10001c36:	e795      	b.n	10001b64 <main+0x50>
10001c38:	1000599c 	.word	0x1000599c
10001c3c:	100059a4 	.word	0x100059a4
10001c40:	100059ab 	.word	0x100059ab
10001c44:	100059b4 	.word	0x100059b4

10001c48 <motor_uSetup>:
	GPIO_DT_SPEC_GET(M4B_NODE, gpios)
};

/* -------------------------------------------------------------------------------------------------------------------------------------------------------*/

uint8_t motor_uSetup(void){
10001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
10001c4a:	4c19      	ldr	r4, [pc, #100]	; (10001cb0 <motor_uSetup+0x68>)
10001c4c:	b085      	sub	sp, #20
10001c4e:	af00      	add	r7, sp, #0

	for(uint8_t i = M1A; i<QTY_MOTORS; i++ ){
		if (!device_is_ready(scxMotors[i].port)) return 1;
10001c50:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
10001c52:	f003 fa53 	bl	100050fc <z_device_is_ready>
10001c56:	2800      	cmp	r0, #0
10001c58:	d027      	beq.n	10001caa <motor_uSetup+0x62>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
10001c5a:	22c0      	movs	r2, #192	; 0xc0
				  spec->pin,
				  spec->dt_flags | extra_flags);
10001c5c:	88e6      	ldrh	r6, [r4, #6]
	return gpio_pin_configure(spec->port,
10001c5e:	02d2      	lsls	r2, r2, #11
10001c60:	4332      	orrs	r2, r6
10001c62:	6820      	ldr	r0, [r4, #0]
10001c64:	7921      	ldrb	r1, [r4, #4]
10001c66:	607a      	str	r2, [r7, #4]
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001c68:	2501      	movs	r5, #1
10001c6a:	408d      	lsls	r5, r1
	const struct gpio_driver_api *api =
10001c6c:	6883      	ldr	r3, [r0, #8]
10001c6e:	469c      	mov	ip, r3
	struct gpio_driver_data *data =
10001c70:	6903      	ldr	r3, [r0, #16]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
10001c72:	681a      	ldr	r2, [r3, #0]
10001c74:	60ba      	str	r2, [r7, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10001c76:	43aa      	bics	r2, r5
10001c78:	60fa      	str	r2, [r7, #12]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
10001c7a:	2201      	movs	r2, #1
10001c7c:	4216      	tst	r6, r2
10001c7e:	d002      	beq.n	10001c86 <motor_uSetup+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
10001c80:	68ba      	ldr	r2, [r7, #8]
10001c82:	432a      	orrs	r2, r5
10001c84:	60fa      	str	r2, [r7, #12]
10001c86:	68fa      	ldr	r2, [r7, #12]
10001c88:	601a      	str	r2, [r3, #0]
	return api->pin_configure(port, pin, flags);
10001c8a:	4663      	mov	r3, ip
10001c8c:	687a      	ldr	r2, [r7, #4]
10001c8e:	681b      	ldr	r3, [r3, #0]
10001c90:	4798      	blx	r3
		
		gpio_pin_configure_dt(&scxMotors[i], GPIO_OUTPUT_LOW);
		gpio_pin_set_dt(&scxMotors[i], false);
10001c92:	0020      	movs	r0, r4
10001c94:	2100      	movs	r1, #0
10001c96:	f002 fa65 	bl	10004164 <gpio_pin_set_dt.isra.0>
	for(uint8_t i = M1A; i<QTY_MOTORS; i++ ){
10001c9a:	4b06      	ldr	r3, [pc, #24]	; (10001cb4 <motor_uSetup+0x6c>)
10001c9c:	3408      	adds	r4, #8
10001c9e:	42a3      	cmp	r3, r4
10001ca0:	d1d6      	bne.n	10001c50 <motor_uSetup+0x8>
	}

	return 0;
10001ca2:	2000      	movs	r0, #0
}
10001ca4:	46bd      	mov	sp, r7
10001ca6:	b005      	add	sp, #20
10001ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!device_is_ready(scxMotors[i].port)) return 1;
10001caa:	2001      	movs	r0, #1
10001cac:	e7fa      	b.n	10001ca4 <motor_uSetup+0x5c>
10001cae:	46c0      	nop			; (mov r8, r8)
10001cb0:	10005778 	.word	0x10005778
10001cb4:	100057b8 	.word	0x100057b8

10001cb8 <motor_vToFront>:



void motor_vToFront( motors_gpio mxa, motors_gpio mxb  ){
10001cb8:	b5b0      	push	{r4, r5, r7, lr}
10001cba:	000c      	movs	r4, r1
	gpio_pin_set_dt(&scxMotors[mxa], true);
10001cbc:	4d06      	ldr	r5, [pc, #24]	; (10001cd8 <motor_vToFront+0x20>)
10001cbe:	00c0      	lsls	r0, r0, #3
void motor_vToFront( motors_gpio mxa, motors_gpio mxb  ){
10001cc0:	af00      	add	r7, sp, #0
	gpio_pin_set_dt(&scxMotors[mxa], true);
10001cc2:	1828      	adds	r0, r5, r0
10001cc4:	2101      	movs	r1, #1
10001cc6:	f002 fa4d 	bl	10004164 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(&scxMotors[mxb], false);
10001cca:	00e0      	lsls	r0, r4, #3
10001ccc:	1828      	adds	r0, r5, r0
10001cce:	2100      	movs	r1, #0
10001cd0:	f002 fa48 	bl	10004164 <gpio_pin_set_dt.isra.0>
}
10001cd4:	46bd      	mov	sp, r7
10001cd6:	bdb0      	pop	{r4, r5, r7, pc}
10001cd8:	10005778 	.word	0x10005778

10001cdc <motor_vToBack>:

void motor_vToBack( motors_gpio mxa, motors_gpio mxb ){
10001cdc:	b5b0      	push	{r4, r5, r7, lr}
10001cde:	000c      	movs	r4, r1
	gpio_pin_set_dt(&scxMotors[mxa], false);
10001ce0:	4d06      	ldr	r5, [pc, #24]	; (10001cfc <motor_vToBack+0x20>)
10001ce2:	00c0      	lsls	r0, r0, #3
void motor_vToBack( motors_gpio mxa, motors_gpio mxb ){
10001ce4:	af00      	add	r7, sp, #0
	gpio_pin_set_dt(&scxMotors[mxa], false);
10001ce6:	1828      	adds	r0, r5, r0
10001ce8:	2100      	movs	r1, #0
10001cea:	f002 fa3b 	bl	10004164 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(&scxMotors[mxb], true);
10001cee:	00e0      	lsls	r0, r4, #3
10001cf0:	1828      	adds	r0, r5, r0
10001cf2:	2101      	movs	r1, #1
10001cf4:	f002 fa36 	bl	10004164 <gpio_pin_set_dt.isra.0>
}
10001cf8:	46bd      	mov	sp, r7
10001cfa:	bdb0      	pop	{r4, r5, r7, pc}
10001cfc:	10005778 	.word	0x10005778

10001d00 <motor_vTurnoff>:
void motor_vToStop( motors_gpio mxa, motors_gpio mxb ){
	gpio_pin_set_dt(&scxMotors[mxa], true);
	gpio_pin_set_dt(&scxMotors[mxb], true);
}

void motor_vTurnoff( motors_gpio mxa, motors_gpio mxb ){
10001d00:	b5b0      	push	{r4, r5, r7, lr}
10001d02:	000c      	movs	r4, r1
	gpio_pin_set_dt(&scxMotors[mxa], false);
10001d04:	4d06      	ldr	r5, [pc, #24]	; (10001d20 <motor_vTurnoff+0x20>)
10001d06:	00c0      	lsls	r0, r0, #3
void motor_vTurnoff( motors_gpio mxa, motors_gpio mxb ){
10001d08:	af00      	add	r7, sp, #0
	gpio_pin_set_dt(&scxMotors[mxa], false);
10001d0a:	1828      	adds	r0, r5, r0
10001d0c:	2100      	movs	r1, #0
10001d0e:	f002 fa29 	bl	10004164 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(&scxMotors[mxb], false);
10001d12:	00e0      	lsls	r0, r4, #3
10001d14:	1828      	adds	r0, r5, r0
10001d16:	2100      	movs	r1, #0
10001d18:	f002 fa24 	bl	10004164 <gpio_pin_set_dt.isra.0>
}
10001d1c:	46bd      	mov	sp, r7
10001d1e:	bdb0      	pop	{r4, r5, r7, pc}
10001d20:	10005778 	.word	0x10005778

10001d24 <ping_work_handler>:
void led_timer_handler(struct k_timer *timer_id) {
	led_vPing();

}

void ping_work_handler( struct k_work *work ){
10001d24:	b5b0      	push	{r4, r5, r7, lr}
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
10001d26:	4c09      	ldr	r4, [pc, #36]	; (10001d4c <ping_work_handler+0x28>)
10001d28:	af00      	add	r7, sp, #0
10001d2a:	2201      	movs	r2, #1
10001d2c:	2119      	movs	r1, #25
10001d2e:	0020      	movs	r0, r4
10001d30:	f002 fa31 	bl	10004196 <gpio_pin_set.isra.0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
10001d34:	2100      	movs	r1, #0
10001d36:	20c8      	movs	r0, #200	; 0xc8
10001d38:	f001 ffd0 	bl	10003cdc <z_impl_k_sleep>
10001d3c:	2200      	movs	r2, #0
10001d3e:	2119      	movs	r1, #25
10001d40:	0020      	movs	r0, r4
10001d42:	f002 fa28 	bl	10004196 <gpio_pin_set.isra.0>
	gpio_pin_set_dt(&led, true);
	k_sleep(K_MSEC(20));
	gpio_pin_set_dt(&led, false);
}
10001d46:	46bd      	mov	sp, r7
10001d48:	bdb0      	pop	{r4, r5, r7, pc}
10001d4a:	46c0      	nop			; (mov r8, r8)
10001d4c:	100055f4 	.word	0x100055f4

10001d50 <led_vSetup>:
void led_vSetup(void){
10001d50:	b5b0      	push	{r4, r5, r7, lr}
10001d52:	af00      	add	r7, sp, #0
10001d54:	4c09      	ldr	r4, [pc, #36]	; (10001d7c <led_vSetup+0x2c>)
10001d56:	0020      	movs	r0, r4
10001d58:	f003 f9d0 	bl	100050fc <z_device_is_ready>
	if (!device_is_ready(led.port))	 return;
10001d5c:	2800      	cmp	r0, #0
10001d5e:	d00b      	beq.n	10001d78 <led_vSetup+0x28>
	struct gpio_driver_data *data =
10001d60:	6922      	ldr	r2, [r4, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10001d62:	4b07      	ldr	r3, [pc, #28]	; (10001d80 <led_vSetup+0x30>)
10001d64:	6810      	ldr	r0, [r2, #0]
	const struct gpio_driver_api *api =
10001d66:	68a1      	ldr	r1, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10001d68:	4003      	ands	r3, r0
10001d6a:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
10001d6c:	22a0      	movs	r2, #160	; 0xa0
10001d6e:	680b      	ldr	r3, [r1, #0]
10001d70:	0020      	movs	r0, r4
10001d72:	2119      	movs	r1, #25
10001d74:	0312      	lsls	r2, r2, #12
10001d76:	4798      	blx	r3
}
10001d78:	46bd      	mov	sp, r7
10001d7a:	bdb0      	pop	{r4, r5, r7, pc}
10001d7c:	100055f4 	.word	0x100055f4
10001d80:	fdffffff 	.word	0xfdffffff

10001d84 <led_vPing>:
void led_vPing(void){
10001d84:	b580      	push	{r7, lr}
	k_work_submit(&ping_work);
10001d86:	4803      	ldr	r0, [pc, #12]	; (10001d94 <led_vPing+0x10>)
void led_vPing(void){
10001d88:	af00      	add	r7, sp, #0
	k_work_submit(&ping_work);
10001d8a:	f001 fccd 	bl	10003728 <k_work_submit>
}
10001d8e:	46bd      	mov	sp, r7
10001d90:	bd80      	pop	{r7, pc}
10001d92:	46c0      	nop			; (mov r8, r8)
10001d94:	20000000 	.word	0x20000000

10001d98 <comm_vGetMessage>:

	uart_irq_callback_user_data_set(uart_d[UART1].dev, uart1_cb, NULL);
	uart_irq_rx_enable(uart_d[UART1].dev);
}

void comm_vGetMessage(uart_device dev, char *msg, k_timeout_t timeout){
10001d98:	b5b0      	push	{r4, r5, r7, lr}
	k_msgq_get(uart_d[dev].msgq, msg, timeout);
10001d9a:	24d8      	movs	r4, #216	; 0xd8
10001d9c:	4344      	muls	r4, r0
10001d9e:	4804      	ldr	r0, [pc, #16]	; (10001db0 <comm_vGetMessage+0x18>)
void comm_vGetMessage(uart_device dev, char *msg, k_timeout_t timeout){
10001da0:	af00      	add	r7, sp, #0
	k_msgq_get(uart_d[dev].msgq, msg, timeout);
10001da2:	1900      	adds	r0, r0, r4
10001da4:	30d0      	adds	r0, #208	; 0xd0
10001da6:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
10001da8:	f001 fb2c 	bl	10003404 <z_impl_k_msgq_get>
}
10001dac:	46bd      	mov	sp, r7
10001dae:	bdb0      	pop	{r4, r5, r7, pc}
10001db0:	20000010 	.word	0x20000010

10001db4 <comm_uSendChar>:

void comm_uSendChar( uart_device dev, char c ){
	uart_poll_out(uart_d[dev].dev, c);
10001db4:	23d8      	movs	r3, #216	; 0xd8
10001db6:	4343      	muls	r3, r0
void comm_uSendChar( uart_device dev, char c ){
10001db8:	b580      	push	{r7, lr}
	uart_poll_out(uart_d[dev].dev, c);
10001dba:	4805      	ldr	r0, [pc, #20]	; (10001dd0 <comm_uSendChar+0x1c>)
void comm_uSendChar( uart_device dev, char c ){
10001dbc:	af00      	add	r7, sp, #0
	uart_poll_out(uart_d[dev].dev, c);
10001dbe:	18c0      	adds	r0, r0, r3
10001dc0:	30d4      	adds	r0, #212	; 0xd4
10001dc2:	6800      	ldr	r0, [r0, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
10001dc4:	6883      	ldr	r3, [r0, #8]
10001dc6:	685b      	ldr	r3, [r3, #4]
10001dc8:	4798      	blx	r3
}
10001dca:	46bd      	mov	sp, r7
10001dcc:	bd80      	pop	{r7, pc}
10001dce:	46c0      	nop			; (mov r8, r8)
10001dd0:	20000010 	.word	0x20000010

10001dd4 <comm_uSendStringLn>:
	for (size_t i = 0; i < uSize; i++) {
		comm_uSendChar(dev, str[i]);
	}
}

void comm_uSendStringLn( uart_device dev, const char *str ){
10001dd4:	b5b0      	push	{r4, r5, r7, lr}
10001dd6:	0004      	movs	r4, r0
10001dd8:	af00      	add	r7, sp, #0
	comm_uSendString( dev, str );
10001dda:	f002 fa06 	bl	100041ea <comm_uSendString>
	comm_uSendString( dev, "\r\n" );
10001dde:	0020      	movs	r0, r4
10001de0:	4902      	ldr	r1, [pc, #8]	; (10001dec <comm_uSendStringLn+0x18>)
10001de2:	f002 fa02 	bl	100041ea <comm_uSendString>
}
10001de6:	46bd      	mov	sp, r7
10001de8:	bdb0      	pop	{r4, r5, r7, pc}
10001dea:	46c0      	nop			; (mov r8, r8)
10001dec:	100059be 	.word	0x100059be

10001df0 <comm_vMessageSubmit>:
/*-------------------------------------------------------------------- Local Functions -------------------------------------------------------------------*/
/*########################################################################################################################################################*/


void comm_vMessageSubmit(uart_device dev){
	if ( k_msgq_put(uart_d[dev].msgq, uart_d[dev].message, K_NO_WAIT) != 0){
10001df0:	21d8      	movs	r1, #216	; 0xd8
10001df2:	4348      	muls	r0, r1
10001df4:	4908      	ldr	r1, [pc, #32]	; (10001e18 <comm_vMessageSubmit+0x28>)
void comm_vMessageSubmit(uart_device dev){
10001df6:	b5b0      	push	{r4, r5, r7, lr}
	if ( k_msgq_put(uart_d[dev].msgq, uart_d[dev].message, K_NO_WAIT) != 0){
10001df8:	1809      	adds	r1, r1, r0
10001dfa:	000c      	movs	r4, r1
10001dfc:	34d0      	adds	r4, #208	; 0xd0
void comm_vMessageSubmit(uart_device dev){
10001dfe:	af00      	add	r7, sp, #0
	if ( k_msgq_put(uart_d[dev].msgq, uart_d[dev].message, K_NO_WAIT) != 0){
10001e00:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
10001e02:	2200      	movs	r2, #0
10001e04:	2300      	movs	r3, #0
10001e06:	f001 faad 	bl	10003364 <z_impl_k_msgq_put>
10001e0a:	2800      	cmp	r0, #0
10001e0c:	d002      	beq.n	10001e14 <comm_vMessageSubmit+0x24>
		k_msgq_cleanup(uart_d[dev].msgq);
10001e0e:	6820      	ldr	r0, [r4, #0]
10001e10:	f003 f9ce 	bl	100051b0 <k_msgq_cleanup>
	}
}
10001e14:	46bd      	mov	sp, r7
10001e16:	bdb0      	pop	{r4, r5, r7, pc}
10001e18:	20000010 	.word	0x20000010

10001e1c <comm_vCleanMessage>:

void comm_vCleanMessage(uart_device dev){
	uart_d[dev].position = 0;
10001e1c:	23d8      	movs	r3, #216	; 0xd8
10001e1e:	4343      	muls	r3, r0
10001e20:	4807      	ldr	r0, [pc, #28]	; (10001e40 <comm_vCleanMessage+0x24>)
void comm_vCleanMessage(uart_device dev){
10001e22:	b580      	push	{r7, lr}
	uart_d[dev].position = 0;
10001e24:	18c0      	adds	r0, r0, r3
10001e26:	0002      	movs	r2, r0
10001e28:	2300      	movs	r3, #0
10001e2a:	32cc      	adds	r2, #204	; 0xcc
10001e2c:	6013      	str	r3, [r2, #0]

	for (size_t i = 0; i < UART_MESSAGE_SIZE; i++){
		uart_d[dev].message[i] = 0x00;
10001e2e:	001a      	movs	r2, r3
void comm_vCleanMessage(uart_device dev){
10001e30:	af00      	add	r7, sp, #0
		uart_d[dev].message[i] = 0x00;
10001e32:	54c2      	strb	r2, [r0, r3]
	for (size_t i = 0; i < UART_MESSAGE_SIZE; i++){
10001e34:	3301      	adds	r3, #1
10001e36:	2bcc      	cmp	r3, #204	; 0xcc
10001e38:	d1fb      	bne.n	10001e32 <comm_vCleanMessage+0x16>
	}
}
10001e3a:	46bd      	mov	sp, r7
10001e3c:	bd80      	pop	{r7, pc}
10001e3e:	46c0      	nop			; (mov r8, r8)
10001e40:	20000010 	.word	0x20000010

10001e44 <comm_vSetup>:
void comm_vSetup(void){
10001e44:	b5b0      	push	{r4, r5, r7, lr}
	comm_vCleanMessage(UART0);
10001e46:	2000      	movs	r0, #0
void comm_vSetup(void){
10001e48:	af00      	add	r7, sp, #0
	comm_vCleanMessage(UART0);
10001e4a:	f7ff ffe7 	bl	10001e1c <comm_vCleanMessage>
	comm_vCleanMessage(UART1);
10001e4e:	2001      	movs	r0, #1
10001e50:	f7ff ffe4 	bl	10001e1c <comm_vCleanMessage>
	uart_irq_callback_user_data_set(uart_d[UART0].dev, uart0_cb, NULL);
10001e54:	4c0a      	ldr	r4, [pc, #40]	; (10001e80 <comm_vSetup+0x3c>)
10001e56:	490b      	ldr	r1, [pc, #44]	; (10001e84 <comm_vSetup+0x40>)
10001e58:	0025      	movs	r5, r4
10001e5a:	35d4      	adds	r5, #212	; 0xd4
10001e5c:	6828      	ldr	r0, [r5, #0]
10001e5e:	f002 f9b8 	bl	100041d2 <uart_irq_callback_user_data_set.constprop.0>
	uart_irq_rx_enable(uart_d[UART0].dev);
10001e62:	6828      	ldr	r0, [r5, #0]
	uart_irq_callback_user_data_set(uart_d[UART1].dev, uart1_cb, NULL);
10001e64:	25d6      	movs	r5, #214	; 0xd6
10001e66:	006d      	lsls	r5, r5, #1
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
10001e68:	f002 f9aa 	bl	100041c0 <z_impl_uart_irq_rx_enable>
10001e6c:	5960      	ldr	r0, [r4, r5]
10001e6e:	4906      	ldr	r1, [pc, #24]	; (10001e88 <comm_vSetup+0x44>)
10001e70:	f002 f9af 	bl	100041d2 <uart_irq_callback_user_data_set.constprop.0>
	uart_irq_rx_enable(uart_d[UART1].dev);
10001e74:	5960      	ldr	r0, [r4, r5]
10001e76:	f002 f9a3 	bl	100041c0 <z_impl_uart_irq_rx_enable>
}
10001e7a:	46bd      	mov	sp, r7
10001e7c:	bdb0      	pop	{r4, r5, r7, pc}
10001e7e:	46c0      	nop			; (mov r8, r8)
10001e80:	20000010 	.word	0x20000010
10001e84:	1000420f 	.word	0x1000420f
10001e88:	10004251 	.word	0x10004251

10001e8c <uart_vBuildMessage>:

// }

void uart_vBuildMessage(uart_device dev, char data){
	
	uart_d[dev].message[uart_d[dev].position++] = data;
10001e8c:	22d8      	movs	r2, #216	; 0xd8
10001e8e:	4342      	muls	r2, r0
10001e90:	4b0d      	ldr	r3, [pc, #52]	; (10001ec8 <uart_vBuildMessage+0x3c>)
void uart_vBuildMessage(uart_device dev, char data){
10001e92:	b5b0      	push	{r4, r5, r7, lr}
	uart_d[dev].message[uart_d[dev].position++] = data;
10001e94:	189b      	adds	r3, r3, r2
10001e96:	001d      	movs	r5, r3
10001e98:	35cc      	adds	r5, #204	; 0xcc
void uart_vBuildMessage(uart_device dev, char data){
10001e9a:	0004      	movs	r4, r0
	uart_d[dev].message[uart_d[dev].position++] = data;
10001e9c:	6828      	ldr	r0, [r5, #0]
void uart_vBuildMessage(uart_device dev, char data){
10001e9e:	af00      	add	r7, sp, #0
	uart_d[dev].message[uart_d[dev].position++] = data;
10001ea0:	1c42      	adds	r2, r0, #1
10001ea2:	602a      	str	r2, [r5, #0]
10001ea4:	5419      	strb	r1, [r3, r0]



	if( ( uart_d[dev].position >= UART_MESSAGE_SIZE ) || ( data == '\n' ) || ( data == '\r' ) /*|| ( data == UART_END_MESSAGE )*/ ){
10001ea6:	2acb      	cmp	r2, #203	; 0xcb
10001ea8:	d803      	bhi.n	10001eb2 <uart_vBuildMessage+0x26>
10001eaa:	290a      	cmp	r1, #10
10001eac:	d001      	beq.n	10001eb2 <uart_vBuildMessage+0x26>
10001eae:	290d      	cmp	r1, #13
10001eb0:	d107      	bne.n	10001ec2 <uart_vBuildMessage+0x36>

		led_vPing();
10001eb2:	f7ff ff67 	bl	10001d84 <led_vPing>

		comm_vMessageSubmit(dev);
10001eb6:	0020      	movs	r0, r4
10001eb8:	f7ff ff9a 	bl	10001df0 <comm_vMessageSubmit>

		comm_vCleanMessage(dev);
10001ebc:	0020      	movs	r0, r4
10001ebe:	f7ff ffad 	bl	10001e1c <comm_vCleanMessage>
		return;
	}
}
10001ec2:	46bd      	mov	sp, r7
10001ec4:	bdb0      	pop	{r4, r5, r7, pc}
10001ec6:	46c0      	nop			; (mov r8, r8)
10001ec8:	20000010 	.word	0x20000010

10001ecc <gpio_pin_set_dt.constprop.0.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
10001ecc:	0003      	movs	r3, r0
	const struct gpio_driver_data *const data =
10001ece:	480a      	ldr	r0, [pc, #40]	; (10001ef8 <gpio_pin_set_dt.constprop.0.isra.0+0x2c>)
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
10001ed0:	b580      	push	{r7, lr}
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10001ed2:	6902      	ldr	r2, [r0, #16]
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
10001ed4:	af00      	add	r7, sp, #0
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10001ed6:	6812      	ldr	r2, [r2, #0]
10001ed8:	0112      	lsls	r2, r2, #4
10001eda:	d501      	bpl.n	10001ee0 <gpio_pin_set_dt.constprop.0.isra.0+0x14>
		value = (value != 0) ? 0 : 1;
10001edc:	2201      	movs	r2, #1
10001ede:	4053      	eors	r3, r2
	if (value != 0)	{
10001ee0:	2b00      	cmp	r3, #0
10001ee2:	d006      	beq.n	10001ef2 <gpio_pin_set_dt.constprop.0.isra.0+0x26>
	return api->port_set_bits_raw(port, pins);
10001ee4:	6883      	ldr	r3, [r0, #8]
10001ee6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
10001ee8:	2180      	movs	r1, #128	; 0x80
10001eea:	0509      	lsls	r1, r1, #20
10001eec:	4798      	blx	r3
}
10001eee:	46bd      	mov	sp, r7
10001ef0:	bd80      	pop	{r7, pc}
	return api->port_clear_bits_raw(port, pins);
10001ef2:	6883      	ldr	r3, [r0, #8]
10001ef4:	691b      	ldr	r3, [r3, #16]
10001ef6:	e7f7      	b.n	10001ee8 <gpio_pin_set_dt.constprop.0.isra.0+0x1c>
10001ef8:	100055f4 	.word	0x100055f4

10001efc <gprs_vSetup>:
/*########################################################################################################################################################*/
/*-------------------------------------------------------------------- Local Functions -------------------------------------------------------------------*/
/*########################################################################################################################################################*/


void gprs_vSetup(void){
10001efc:	b5b0      	push	{r4, r5, r7, lr}
10001efe:	af00      	add	r7, sp, #0
10001f00:	4c0b      	ldr	r4, [pc, #44]	; (10001f30 <gprs_vSetup+0x34>)
10001f02:	0020      	movs	r0, r4
10001f04:	f003 f8fa 	bl	100050fc <z_device_is_ready>
	if (!device_is_ready(gprs_reset.port))	return;
10001f08:	2800      	cmp	r0, #0
10001f0a:	d00e      	beq.n	10001f2a <gprs_vSetup+0x2e>
	struct gpio_driver_data *data =
10001f0c:	6922      	ldr	r2, [r4, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10001f0e:	4b09      	ldr	r3, [pc, #36]	; (10001f34 <gprs_vSetup+0x38>)
10001f10:	6810      	ldr	r0, [r2, #0]
	const struct gpio_driver_api *api =
10001f12:	68a1      	ldr	r1, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
10001f14:	4003      	ands	r3, r0
10001f16:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
10001f18:	22a0      	movs	r2, #160	; 0xa0
10001f1a:	680b      	ldr	r3, [r1, #0]
10001f1c:	0020      	movs	r0, r4
10001f1e:	211b      	movs	r1, #27
10001f20:	0312      	lsls	r2, r2, #12
10001f22:	4798      	blx	r3
	
	gpio_pin_configure_dt(&gprs_reset, GPIO_OUTPUT_HIGH);

	gpio_pin_set_dt(&gprs_reset, true);
10001f24:	2001      	movs	r0, #1
10001f26:	f7ff ffd1 	bl	10001ecc <gpio_pin_set_dt.constprop.0.isra.0>
}
10001f2a:	46bd      	mov	sp, r7
10001f2c:	bdb0      	pop	{r4, r5, r7, pc}
10001f2e:	46c0      	nop			; (mov r8, r8)
10001f30:	100055f4 	.word	0x100055f4
10001f34:	f7ffffff 	.word	0xf7ffffff

10001f38 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10001f38:	4901      	ldr	r1, [pc, #4]	; (10001f40 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10001f3a:	2210      	movs	r2, #16
	str	r2, [r1]
10001f3c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
10001f3e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
10001f40:	e000ed10 	.word	0xe000ed10

10001f44 <arch_cpu_idle>:

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
10001f44:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
10001f48:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10001f4a:	b662      	cpsie	i
	isb
10001f4c:	f3bf 8f6f 	isb	sy

	bx	lr
10001f50:	4770      	bx	lr
10001f52:	46c0      	nop			; (mov r8, r8)

10001f54 <arch_irq_enable>:
#define NUM_IRQS_PER_REG 32
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
10001f54:	b580      	push	{r7, lr}
10001f56:	af00      	add	r7, sp, #0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
10001f58:	0603      	lsls	r3, r0, #24
10001f5a:	d405      	bmi.n	10001f68 <arch_irq_enable+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10001f5c:	231f      	movs	r3, #31
10001f5e:	4018      	ands	r0, r3
10001f60:	3b1e      	subs	r3, #30
10001f62:	4083      	lsls	r3, r0
10001f64:	4a01      	ldr	r2, [pc, #4]	; (10001f6c <arch_irq_enable+0x18>)
10001f66:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ((IRQn_Type)irq);
}
10001f68:	46bd      	mov	sp, r7
10001f6a:	bd80      	pop	{r7, pc}
10001f6c:	e000e100 	.word	0xe000e100

10001f70 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
10001f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001f72:	26ff      	movs	r6, #255	; 0xff
10001f74:	2503      	movs	r5, #3
10001f76:	0032      	movs	r2, r6
10001f78:	4005      	ands	r5, r0
10001f7a:	00ed      	lsls	r5, r5, #3
10001f7c:	40aa      	lsls	r2, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001f7e:	0149      	lsls	r1, r1, #5
10001f80:	4031      	ands	r1, r6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001f82:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001f84:	40a9      	lsls	r1, r5
10001f86:	af00      	add	r7, sp, #0
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
10001f88:	b244      	sxtb	r4, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001f8a:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
10001f8c:	0600      	lsls	r0, r0, #24
10001f8e:	d40b      	bmi.n	10001fa8 <z_arm_irq_priority_set+0x38>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001f90:	08a3      	lsrs	r3, r4, #2
10001f92:	24c0      	movs	r4, #192	; 0xc0
10001f94:	480a      	ldr	r0, [pc, #40]	; (10001fc0 <z_arm_irq_priority_set+0x50>)
10001f96:	009b      	lsls	r3, r3, #2
10001f98:	181b      	adds	r3, r3, r0
10001f9a:	00a4      	lsls	r4, r4, #2
10001f9c:	5918      	ldr	r0, [r3, r4]
10001f9e:	4002      	ands	r2, r0
10001fa0:	4311      	orrs	r1, r2
10001fa2:	5119      	str	r1, [r3, r4]
}
10001fa4:	46bd      	mov	sp, r7
10001fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001fa8:	200f      	movs	r0, #15
10001faa:	4003      	ands	r3, r0
10001fac:	3b08      	subs	r3, #8
10001fae:	4805      	ldr	r0, [pc, #20]	; (10001fc4 <z_arm_irq_priority_set+0x54>)
10001fb0:	089b      	lsrs	r3, r3, #2
10001fb2:	009b      	lsls	r3, r3, #2
10001fb4:	181b      	adds	r3, r3, r0
10001fb6:	69d8      	ldr	r0, [r3, #28]
10001fb8:	4002      	ands	r2, r0
10001fba:	4311      	orrs	r1, r2
10001fbc:	61d9      	str	r1, [r3, #28]
10001fbe:	e7f1      	b.n	10001fa4 <z_arm_irq_priority_set+0x34>
10001fc0:	e000e100 	.word	0xe000e100
10001fc4:	e000ed00 	.word	0xe000ed00

10001fc8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
10001fc8:	bf30      	wfi
    b z_SysNmiOnReset
10001fca:	e7fd      	b.n	10001fc8 <z_SysNmiOnReset>

10001fcc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10001fcc:	22ff      	movs	r2, #255	; 0xff
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
10001fce:	b580      	push	{r7, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10001fd0:	4b08      	ldr	r3, [pc, #32]	; (10001ff4 <z_arm_prep_c+0x28>)
{
10001fd2:	af00      	add	r7, sp, #0
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10001fd4:	4393      	bics	r3, r2
10001fd6:	4a08      	ldr	r2, [pc, #32]	; (10001ff8 <z_arm_prep_c+0x2c>)
10001fd8:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10001fda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10001fde:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10001fe2:	f001 f861 	bl	100030a8 <z_bss_zero>
	z_data_copy();
10001fe6:	f001 ff0d 	bl	10003e04 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
10001fea:	f000 f901 	bl	100021f0 <z_arm_interrupt_init>
	z_cstart();
10001fee:	f001 f89d 	bl	1000312c <z_cstart>
10001ff2:	46c0      	nop			; (mov r8, r8)
10001ff4:	10000100 	.word	0x10000100
10001ff8:	e000ed00 	.word	0xe000ed00

10001ffc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10001ffc:	4a0a      	ldr	r2, [pc, #40]	; (10002028 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
10001ffe:	490b      	ldr	r1, [pc, #44]	; (1000202c <arch_swap+0x30>)
	_current->arch.basepri = key;
10002000:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
10002002:	6809      	ldr	r1, [r1, #0]
{
10002004:	b580      	push	{r7, lr}
	_current->arch.swap_return_value = _k_neg_eagain;
10002006:	6799      	str	r1, [r3, #120]	; 0x78
	_current->arch.basepri = key;
10002008:	6758      	str	r0, [r3, #116]	; 0x74

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
1000200a:	2380      	movs	r3, #128	; 0x80
1000200c:	4908      	ldr	r1, [pc, #32]	; (10002030 <arch_swap+0x34>)
1000200e:	055b      	lsls	r3, r3, #21
10002010:	6848      	ldr	r0, [r1, #4]
{
10002012:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10002014:	4303      	orrs	r3, r0
10002016:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
10002018:	b662      	cpsie	i
1000201a:	f3bf 8f6f 	isb	sy

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
}
1000201e:	46bd      	mov	sp, r7
	return _current->arch.swap_return_value;
10002020:	6893      	ldr	r3, [r2, #8]
10002022:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
10002024:	bd80      	pop	{r7, pc}
10002026:	46c0      	nop			; (mov r8, r8)
10002028:	200004ac 	.word	0x200004ac
1000202c:	10005998 	.word	0x10005998
10002030:	e000ed00 	.word	0xe000ed00

10002034 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
10002034:	4913      	ldr	r1, [pc, #76]	; (10002084 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
10002036:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
10002038:	4813      	ldr	r0, [pc, #76]	; (10002088 <_thread_irq_disabled+0x22>)
    add r0, r2
1000203a:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
1000203c:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
10002040:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
10002042:	4643      	mov	r3, r8
    mov r4, r9
10002044:	464c      	mov	r4, r9
    mov r5, r10
10002046:	4655      	mov	r5, sl
    mov r6, r11
10002048:	465e      	mov	r6, fp
    mov r7, ip
1000204a:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
1000204c:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
1000204e:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
10002050:	4f0e      	ldr	r7, [pc, #56]	; (1000208c <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
10002052:	4e0f      	ldr	r6, [pc, #60]	; (10002090 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
10002054:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
10002056:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
10002058:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
1000205a:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
1000205c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
1000205e:	6753      	str	r3, [r2, #116]	; 0x74
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
10002060:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
10002062:	d100      	bne.n	10002066 <_thread_irq_disabled>
    cpsie i
10002064:	b662      	cpsie	i

10002066 <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
10002066:	4c08      	ldr	r4, [pc, #32]	; (10002088 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
10002068:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
1000206a:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
1000206c:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
1000206e:	4698      	mov	r8, r3
    mov r9, r4
10002070:	46a1      	mov	r9, r4
    mov r10, r5
10002072:	46aa      	mov	sl, r5
    mov r11, r6
10002074:	46b3      	mov	fp, r6
    mov ip, r7
10002076:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10002078:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
1000207a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
1000207c:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10002080:	4770      	bx	lr
10002082:	0000      	.short	0x0000
    ldr r1, =_kernel
10002084:	200004ac 	.word	0x200004ac
    ldr r0, =_thread_offset_to_callee_saved
10002088:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
1000208c:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
10002090:	08000000 	.word	0x08000000

10002094 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
10002094:	2004      	movs	r0, #4
  mov r1, lr
10002096:	4671      	mov	r1, lr
  tst r1, r0
10002098:	4201      	tst	r1, r0
  beq _stack_frame_msp
1000209a:	d002      	beq.n	100020a2 <_stack_frame_msp>
  mrs r0, PSP
1000209c:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
100020a0:	d101      	bne.n	100020a6 <_stack_frame_endif>

100020a2 <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
100020a2:	f3ef 8008 	mrs	r0, MSP

100020a6 <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
100020a6:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
100020a8:	3902      	subs	r1, #2
    ldrb r1, [r1]
100020aa:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
100020ac:	2902      	cmp	r1, #2
    beq _oops
100020ae:	d0ff      	beq.n	100020b0 <_oops>

100020b0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
100020b0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
100020b2:	f002 fade 	bl	10004672 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
100020b6:	bd01      	pop	{r0, pc}

100020b8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
100020b8:	b590      	push	{r4, r7, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
100020ba:	3a20      	subs	r2, #32
{
100020bc:	af00      	add	r7, sp, #0
#endif
	iframe->a1 = (uint32_t)entry;
100020be:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
100020c0:	68fb      	ldr	r3, [r7, #12]
	iframe->pc &= 0xfffffffe;
100020c2:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
100020c4:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
100020c6:	693b      	ldr	r3, [r7, #16]
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
100020c8:	46bd      	mov	sp, r7
	iframe->a3 = (uint32_t)p2;
100020ca:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
100020cc:	697b      	ldr	r3, [r7, #20]
	iframe->pc &= 0xfffffffe;
100020ce:	4905      	ldr	r1, [pc, #20]	; (100020e4 <arch_new_thread+0x2c>)
	iframe->a4 = (uint32_t)p3;
100020d0:	60d3      	str	r3, [r2, #12]
	iframe->xpsr =
100020d2:	2380      	movs	r3, #128	; 0x80
100020d4:	045b      	lsls	r3, r3, #17
100020d6:	61d3      	str	r3, [r2, #28]
	thread->arch.basepri = 0;
100020d8:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
100020da:	43a1      	bics	r1, r4
100020dc:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
100020de:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
100020e0:	6743      	str	r3, [r0, #116]	; 0x74
}
100020e2:	bd90      	pop	{r4, r7, pc}
100020e4:	100042b3 	.word	0x100042b3

100020e8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
100020e8:	b580      	push	{r7, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
100020ea:	4b07      	ldr	r3, [pc, #28]	; (10002108 <arch_switch_to_main_thread+0x20>)
{
100020ec:	af00      	add	r7, sp, #0
	_current = main_thread;
100020ee:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
100020f0:	1c10      	adds	r0, r2, #0
100020f2:	f381 8809 	msr	PSP, r1
100020f6:	2100      	movs	r1, #0
100020f8:	b662      	cpsie	i
100020fa:	f3bf 8f6f 	isb	sy
100020fe:	2200      	movs	r2, #0
10002100:	2300      	movs	r3, #0
10002102:	f002 f8d6 	bl	100042b2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
10002106:	46c0      	nop			; (mov r8, r8)
10002108:	200004ac 	.word	0x200004ac

1000210c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
1000210c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
1000210e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
10002112:	4905      	ldr	r1, [pc, #20]	; (10002128 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
10002114:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
10002116:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
10002118:	4904      	ldr	r1, [pc, #16]	; (1000212c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
1000211a:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
1000211c:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
1000211e:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
10002120:	bc09      	pop	{r0, r3}
	mov lr, r3
10002122:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
10002124:	4902      	ldr	r1, [pc, #8]	; (10002130 <_isr_wrapper+0x24>)
	bx r1
10002126:	4708      	bx	r1
	ldr r1, =16
10002128:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
1000212c:	1000566c 	.word	0x1000566c
	ldr r1, =z_arm_int_exit
10002130:	10002135 	.word	0x10002135

10002134 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
10002134:	4b06      	ldr	r3, [pc, #24]	; (10002150 <_EXIT_EXC+0xc>)

	ldr r1, [r3, #_kernel_offset_to_current]
10002136:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
10002138:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
1000213a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
1000213c:	d002      	beq.n	10002144 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
1000213e:	4905      	ldr	r1, [pc, #20]	; (10002154 <_EXIT_EXC+0x10>)
	ldr r2, =_SCS_ICSR_PENDSV
10002140:	4a05      	ldr	r2, [pc, #20]	; (10002158 <_EXIT_EXC+0x14>)
	str r2, [r1]
10002142:	600a      	str	r2, [r1, #0]

10002144 <_EXIT_EXC>:

_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
	push {r0, lr}
10002144:	b501      	push	{r0, lr}
	bl z_check_stack_sentinel
10002146:	f001 f84d 	bl	100031e4 <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r1}
1000214a:	bc03      	pop	{r0, r1}
	mov lr, r1
1000214c:	468e      	mov	lr, r1
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
1000214e:	4770      	bx	lr
	ldr r3, =_kernel
10002150:	200004ac 	.word	0x200004ac
	ldr r1, =_SCS_ICSR
10002154:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
10002158:	10000000 	.word	0x10000000

1000215c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
1000215c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
1000215e:	4b1c      	ldr	r3, [pc, #112]	; (100021d0 <z_arm_fault+0x74>)
{
10002160:	b089      	sub	sp, #36	; 0x24
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10002162:	685b      	ldr	r3, [r3, #4]
{
10002164:	000c      	movs	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10002166:	05db      	lsls	r3, r3, #23
{
10002168:	af00      	add	r7, sp, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
1000216a:	0ddb      	lsrs	r3, r3, #23
1000216c:	b662      	cpsie	i
1000216e:	f3bf 8f6f 	isb	sy
	*nested_exc = false;
10002172:	2500      	movs	r5, #0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10002174:	0e16      	lsrs	r6, r2, #24
		return NULL;
10002176:	0029      	movs	r1, r5
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10002178:	2eff      	cmp	r6, #255	; 0xff
1000217a:	d109      	bne.n	10002190 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
1000217c:	3ef3      	subs	r6, #243	; 0xf3
1000217e:	4016      	ands	r6, r2
10002180:	2e08      	cmp	r6, #8
10002182:	d005      	beq.n	10002190 <z_arm_fault+0x34>
			ptr_esf = (z_arch_esf_t *)msp;
10002184:	0001      	movs	r1, r0
			*nested_exc = true;
10002186:	3501      	adds	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
10002188:	0712      	lsls	r2, r2, #28
1000218a:	d501      	bpl.n	10002190 <z_arm_fault+0x34>
			ptr_esf =  (z_arch_esf_t *)psp;
1000218c:	0021      	movs	r1, r4
	*nested_exc = false;
1000218e:	2500      	movs	r5, #0
	uint32_t reason = K_ERR_CPU_EXCEPTION;
10002190:	2400      	movs	r4, #0
	switch (fault) {
10002192:	2b03      	cmp	r3, #3
10002194:	d106      	bne.n	100021a4 <z_arm_fault+0x48>
	uint16_t fault_insn = *(ret_addr - 1);
10002196:	698b      	ldr	r3, [r1, #24]
10002198:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
1000219a:	881a      	ldrh	r2, [r3, #0]
1000219c:	4b0d      	ldr	r3, [pc, #52]	; (100021d4 <z_arm_fault+0x78>)
1000219e:	429a      	cmp	r2, r3
100021a0:	d100      	bne.n	100021a4 <z_arm_fault+0x48>
		reason = esf->basic.r0;
100021a2:	680c      	ldr	r4, [r1, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
100021a4:	2220      	movs	r2, #32
100021a6:	0038      	movs	r0, r7
100021a8:	f002 fabd 	bl	10004726 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
100021ac:	69fb      	ldr	r3, [r7, #28]
100021ae:	2d00      	cmp	r5, #0
100021b0:	d00b      	beq.n	100021ca <z_arm_fault+0x6e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
100021b2:	05da      	lsls	r2, r3, #23
100021b4:	d102      	bne.n	100021bc <z_arm_fault+0x60>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
100021b6:	4a08      	ldr	r2, [pc, #32]	; (100021d8 <z_arm_fault+0x7c>)
100021b8:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
100021ba:	61fb      	str	r3, [r7, #28]
	}

	z_arm_fatal_error(reason, &esf_copy);
100021bc:	0039      	movs	r1, r7
100021be:	0020      	movs	r0, r4
100021c0:	f002 fa51 	bl	10004666 <z_arm_fatal_error>
}
100021c4:	46bd      	mov	sp, r7
100021c6:	b009      	add	sp, #36	; 0x24
100021c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
100021ca:	0a5b      	lsrs	r3, r3, #9
100021cc:	025b      	lsls	r3, r3, #9
100021ce:	e7f4      	b.n	100021ba <z_arm_fault+0x5e>
100021d0:	e000ed00 	.word	0xe000ed00
100021d4:	0000df02 	.word	0x0000df02
100021d8:	000001ff 	.word	0x000001ff

100021dc <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
100021dc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
100021e0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
100021e4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
100021e6:	4672      	mov	r2, lr
	bl z_arm_fault
100021e8:	f7ff ffb8 	bl	1000215c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
100021ec:	bd01      	pop	{r0, pc}
100021ee:	46c0      	nop			; (mov r8, r8)

100021f0 <z_arm_interrupt_init>:
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100021f0:	2303      	movs	r3, #3
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
100021f2:	b5f0      	push	{r4, r5, r6, r7, lr}
100021f4:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
100021f6:	2200      	movs	r2, #0
100021f8:	469c      	mov	ip, r3
100021fa:	25ff      	movs	r5, #255	; 0xff
{
100021fc:	af00      	add	r7, sp, #0
100021fe:	00a4      	lsls	r4, r4, #2
10002200:	0010      	movs	r0, r2
10002202:	4666      	mov	r6, ip
10002204:	4030      	ands	r0, r6
10002206:	002e      	movs	r6, r5
10002208:	00c0      	lsls	r0, r0, #3
1000220a:	4086      	lsls	r6, r0
1000220c:	4905      	ldr	r1, [pc, #20]	; (10002224 <z_arm_interrupt_init+0x34>)
1000220e:	0893      	lsrs	r3, r2, #2
10002210:	009b      	lsls	r3, r3, #2
10002212:	185b      	adds	r3, r3, r1
10002214:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
10002216:	3201      	adds	r2, #1
10002218:	43b1      	bics	r1, r6
1000221a:	5119      	str	r1, [r3, r4]
1000221c:	2a1a      	cmp	r2, #26
1000221e:	d1ef      	bne.n	10002200 <z_arm_interrupt_init+0x10>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
10002220:	46bd      	mov	sp, r7
10002222:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002224:	e000e100 	.word	0xe000e100

10002228 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10002228:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
1000222a:	4807      	ldr	r0, [pc, #28]	; (10002248 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
1000222c:	4907      	ldr	r1, [pc, #28]	; (1000224c <__start+0x24>)
    adds r0, r0, r1
1000222e:	1840      	adds	r0, r0, r1
    msr PSP, r0
10002230:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
10002234:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
10002238:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
1000223a:	4308      	orrs	r0, r1
    msr CONTROL, r0
1000223c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
10002240:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
10002244:	f7ff fec2 	bl	10001fcc <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
10002248:	200009f0 	.word	0x200009f0
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
1000224c:	00000800 	.word	0x00000800

10002250 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
10002250:	b580      	push	{r7, lr}
	if (_current == thread) {
10002252:	4b0b      	ldr	r3, [pc, #44]	; (10002280 <z_impl_k_thread_abort+0x30>)
{
10002254:	af00      	add	r7, sp, #0
	if (_current == thread) {
10002256:	689b      	ldr	r3, [r3, #8]
10002258:	4283      	cmp	r3, r0
1000225a:	d10d      	bne.n	10002278 <z_impl_k_thread_abort+0x28>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
1000225c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
10002260:	2b00      	cmp	r3, #0
10002262:	d009      	beq.n	10002278 <z_impl_k_thread_abort+0x28>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10002264:	2280      	movs	r2, #128	; 0x80
10002266:	4b07      	ldr	r3, [pc, #28]	; (10002284 <z_impl_k_thread_abort+0x34>)
10002268:	0552      	lsls	r2, r2, #21
1000226a:	6859      	ldr	r1, [r3, #4]
1000226c:	430a      	orrs	r2, r1
1000226e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
10002270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002272:	4905      	ldr	r1, [pc, #20]	; (10002288 <z_impl_k_thread_abort+0x38>)
10002274:	400a      	ands	r2, r1
10002276:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
10002278:	f001 fd52 	bl	10003d20 <z_thread_abort>
}
1000227c:	46bd      	mov	sp, r7
1000227e:	bd80      	pop	{r7, pc}
10002280:	200004ac 	.word	0x200004ac
10002284:	e000ed00 	.word	0xe000ed00
10002288:	ffff7fff 	.word	0xffff7fff

1000228c <__stdout_hook_install>:
}

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
1000228c:	b580      	push	{r7, lr}
1000228e:	af00      	add	r7, sp, #0
	_stdout_hook = hook;
}
10002290:	46bd      	mov	sp, r7
	_stdout_hook = hook;
10002292:	4b01      	ldr	r3, [pc, #4]	; (10002298 <__stdout_hook_install+0xc>)
10002294:	6018      	str	r0, [r3, #0]
}
10002296:	bd80      	pop	{r7, pc}
10002298:	200001c0 	.word	0x200001c0

1000229c <rp2040_init>:
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
1000229c:	b5b0      	push	{r4, r5, r7, lr}
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000229e:	4b0f      	ldr	r3, [pc, #60]	; (100022dc <rp2040_init+0x40>)
100022a0:	4a0f      	ldr	r2, [pc, #60]	; (100022e0 <rp2040_init+0x44>)
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100022a2:	4d10      	ldr	r5, [pc, #64]	; (100022e4 <rp2040_init+0x48>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100022a4:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100022a6:	4b10      	ldr	r3, [pc, #64]	; (100022e8 <rp2040_init+0x4c>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
100022a8:	4c10      	ldr	r4, [pc, #64]	; (100022ec <rp2040_init+0x50>)
100022aa:	af00      	add	r7, sp, #0
100022ac:	602b      	str	r3, [r5, #0]
100022ae:	0019      	movs	r1, r3
100022b0:	68a2      	ldr	r2, [r4, #8]
100022b2:	4391      	bics	r1, r2
100022b4:	d1fb      	bne.n	100022ae <rp2040_init+0x12>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
100022b6:	f000 fc89 	bl	10002bcc <clocks_init>
100022ba:	4b0d      	ldr	r3, [pc, #52]	; (100022f0 <rp2040_init+0x54>)
100022bc:	602b      	str	r3, [r5, #0]
100022be:	68a3      	ldr	r3, [r4, #8]
100022c0:	01db      	lsls	r3, r3, #7
100022c2:	3380      	adds	r3, #128	; 0x80
100022c4:	d1fb      	bne.n	100022be <rp2040_init+0x22>
	__asm__ volatile("mrs %0, PRIMASK;"
100022c6:	f3ef 8310 	mrs	r3, PRIMASK
100022ca:	b672      	cpsid	i
	if (key != 0U) {
100022cc:	2b00      	cmp	r3, #0
100022ce:	d102      	bne.n	100022d6 <rp2040_init+0x3a>
	__asm__ volatile(
100022d0:	b662      	cpsie	i
100022d2:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
100022d6:	46bd      	mov	sp, r7
100022d8:	2000      	movs	r0, #0
100022da:	bdb0      	pop	{r4, r5, r7, pc}
100022dc:	4000e000 	.word	0x4000e000
100022e0:	ffffcdbf 	.word	0xffffcdbf
100022e4:	4000f000 	.word	0x4000f000
100022e8:	003c3ffe 	.word	0x003c3ffe
100022ec:	4000c000 	.word	0x4000c000
100022f0:	01ffffff 	.word	0x01ffffff

100022f4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
100022f4:	b580      	push	{r7, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
100022f6:	4808      	ldr	r0, [pc, #32]	; (10002318 <uart_console_init+0x24>)
100022f8:	4b08      	ldr	r3, [pc, #32]	; (1000231c <uart_console_init+0x28>)
{
100022fa:	af00      	add	r7, sp, #0
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
100022fc:	6018      	str	r0, [r3, #0]
100022fe:	f002 fefd 	bl	100050fc <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
10002302:	2800      	cmp	r0, #0
10002304:	d005      	beq.n	10002312 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
10002306:	4806      	ldr	r0, [pc, #24]	; (10002320 <uart_console_init+0x2c>)
10002308:	f7ff ffc0 	bl	1000228c <__stdout_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
1000230c:	2000      	movs	r0, #0
}
1000230e:	46bd      	mov	sp, r7
10002310:	bd80      	pop	{r7, pc}
		return -ENODEV;
10002312:	2013      	movs	r0, #19
10002314:	4240      	negs	r0, r0
10002316:	e7fa      	b.n	1000230e <uart_console_init+0x1a>
10002318:	100055dc 	.word	0x100055dc
1000231c:	20000408 	.word	0x20000408
10002320:	10002325 	.word	0x10002325

10002324 <console_out>:
{
10002324:	b5b0      	push	{r4, r5, r7, lr}
10002326:	0004      	movs	r4, r0
10002328:	4d08      	ldr	r5, [pc, #32]	; (1000234c <console_out+0x28>)
1000232a:	af00      	add	r7, sp, #0
	if ('\n' == c) {
1000232c:	280a      	cmp	r0, #10
1000232e:	d104      	bne.n	1000233a <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
10002330:	6828      	ldr	r0, [r5, #0]
10002332:	6883      	ldr	r3, [r0, #8]
10002334:	210d      	movs	r1, #13
10002336:	685b      	ldr	r3, [r3, #4]
10002338:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
1000233a:	6828      	ldr	r0, [r5, #0]
1000233c:	6883      	ldr	r3, [r0, #8]
1000233e:	b2e1      	uxtb	r1, r4
10002340:	685b      	ldr	r3, [r3, #4]
10002342:	4798      	blx	r3
}
10002344:	46bd      	mov	sp, r7
10002346:	0020      	movs	r0, r4
10002348:	bdb0      	pop	{r4, r5, r7, pc}
1000234a:	46c0      	nop			; (mov r8, r8)
1000234c:	20000408 	.word	0x20000408

10002350 <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
10002350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002352:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10002354:	2400      	movs	r4, #0
	struct gpio_rpi_data *data = dev->data;
10002356:	6903      	ldr	r3, [r0, #16]
{
10002358:	af00      	add	r7, sp, #0
	struct gpio_rpi_data *data = dev->data;
1000235a:	603b      	str	r3, [r7, #0]
		status_reg = &irq_ctrl_base->ints[pin / 8];
1000235c:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
1000235e:	4a15      	ldr	r2, [pc, #84]	; (100023b4 <gpio_rpi_isr+0x64>)
10002360:	3308      	adds	r3, #8
10002362:	009b      	lsls	r3, r3, #2
10002364:	589b      	ldr	r3, [r3, r2]
10002366:	2207      	movs	r2, #7
10002368:	4022      	ands	r2, r4
1000236a:	0092      	lsls	r2, r2, #2
1000236c:	40d3      	lsrs	r3, r2
		if (events) {
1000236e:	220f      	movs	r2, #15
10002370:	4213      	tst	r3, r2
10002372:	d104      	bne.n	1000237e <gpio_rpi_isr+0x2e>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10002374:	3401      	adds	r4, #1
10002376:	2c1e      	cmp	r4, #30
10002378:	d1f0      	bne.n	1000235c <gpio_rpi_isr+0xc>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
1000237a:	46bd      	mov	sp, r7
1000237c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
1000237e:	210f      	movs	r1, #15
10002380:	0020      	movs	r0, r4
10002382:	f000 fd89 	bl	10002e98 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
10002386:	683b      	ldr	r3, [r7, #0]
10002388:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
1000238a:	2900      	cmp	r1, #0
1000238c:	d0f2      	beq.n	10002374 <gpio_rpi_isr+0x24>
1000238e:	2301      	movs	r3, #1
10002390:	40a3      	lsls	r3, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
10002392:	680d      	ldr	r5, [r1, #0]
10002394:	607b      	str	r3, [r7, #4]
		if (cb->pin_mask & pins) {
10002396:	688b      	ldr	r3, [r1, #8]
10002398:	687a      	ldr	r2, [r7, #4]
1000239a:	6878      	ldr	r0, [r7, #4]
1000239c:	401a      	ands	r2, r3
1000239e:	4203      	tst	r3, r0
100023a0:	d002      	beq.n	100023a8 <gpio_rpi_isr+0x58>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
100023a2:	0030      	movs	r0, r6
100023a4:	684b      	ldr	r3, [r1, #4]
100023a6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
100023a8:	2d00      	cmp	r5, #0
100023aa:	d0e3      	beq.n	10002374 <gpio_rpi_isr+0x24>
100023ac:	0029      	movs	r1, r5
100023ae:	682d      	ldr	r5, [r5, #0]
100023b0:	e7f1      	b.n	10002396 <gpio_rpi_isr+0x46>
100023b2:	46c0      	nop			; (mov r8, r8)
100023b4:	40014100 	.word	0x40014100

100023b8 <i2c_dw_initialize>:
	.target_unregister = i2c_dw_slave_unregister,
#endif /* CONFIG_I2C_TARGET */
};

static int i2c_dw_initialize(const struct device *dev)
{
100023b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct i2c_dw_rom_config * const rom = dev->config;
	struct i2c_dw_dev_config * const dw = dev->data;
100023ba:	6903      	ldr	r3, [r0, #16]
{
100023bc:	b085      	sub	sp, #20
100023be:	af00      	add	r7, sp, #0
	struct i2c_dw_dev_config * const dw = dev->data;
100023c0:	607b      	str	r3, [r7, #4]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
100023c2:	230c      	movs	r3, #12
	const struct i2c_dw_rom_config * const rom = dev->config;
100023c4:	6846      	ldr	r6, [r0, #4]
{
100023c6:	0005      	movs	r5, r0
100023c8:	2100      	movs	r1, #0
100023ca:	68f0      	ldr	r0, [r6, #12]
100023cc:	18fa      	adds	r2, r7, r3
100023ce:	f000 fb71 	bl	10002ab4 <pinctrl_lookup_state>
100023d2:	1e04      	subs	r4, r0, #0
	if (ret < 0) {
100023d4:	db17      	blt.n	10002406 <i2c_dw_initialize+0x4e>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
100023d6:	68fb      	ldr	r3, [r7, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
100023d8:	2200      	movs	r2, #0
100023da:	7919      	ldrb	r1, [r3, #4]
100023dc:	6818      	ldr	r0, [r3, #0]
100023de:	f002 fd9f 	bl	10004f20 <pinctrl_configure_pins>
100023e2:	1e04      	subs	r4, r0, #0
	union ic_con_register ic_con;
	int ret = 0;

#if defined(CONFIG_PINCTRL)
	ret = pinctrl_apply_state(rom->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret) {
100023e4:	d10f      	bne.n	10002406 <i2c_dw_initialize+0x4e>
	return z_impl_k_sem_init(sem, initial_count, limit);
100023e6:	2201      	movs	r2, #1
100023e8:	0001      	movs	r1, r0
100023ea:	4252      	negs	r2, r2
100023ec:	6878      	ldr	r0, [r7, #4]
100023ee:	f002 fef8 	bl	100051e2 <z_impl_k_sem_init>
	return (uint32_t)DEVICE_MMIO_GET(dev);
100023f2:	686b      	ldr	r3, [r5, #4]
100023f4:	681b      	ldr	r3, [r3, #0]

DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)

DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
DEFINE_MM_REG_READ(comp_type, DW_IC_REG_COMP_TYPE, 32)
100023f6:	001a      	movs	r2, r3
100023f8:	32fc      	adds	r2, #252	; 0xfc
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
100023fa:	6811      	ldr	r1, [r2, #0]

	k_sem_init(&dw->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	uint32_t reg_base = get_regs(dev);

	/* verify that we have a valid DesignWare register first */
	if (read_comp_type(reg_base) != I2C_DW_MAGIC_KEY) {
100023fc:	4a1d      	ldr	r2, [pc, #116]	; (10002474 <i2c_dw_initialize+0xbc>)
100023fe:	4291      	cmp	r1, r2
10002400:	d005      	beq.n	1000240e <i2c_dw_initialize+0x56>
		LOG_DBG("I2C: DesignWare magic key not found, check base "
			    "address. Stopping initialization");
		return -EIO;
10002402:	2405      	movs	r4, #5
10002404:	4264      	negs	r4, r4
	}

	dw->state = I2C_DW_STATE_READY;

	return ret;
}
10002406:	0020      	movs	r0, r4
10002408:	46bd      	mov	sp, r7
1000240a:	b005      	add	sp, #20
1000240c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
1000240e:	2206      	movs	r2, #6
10002410:	681b      	ldr	r3, [r3, #0]
	rom->config_func(dev);
10002412:	0028      	movs	r0, r5
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
10002414:	4013      	ands	r3, r2
10002416:	3b06      	subs	r3, #6
10002418:	425a      	negs	r2, r3
1000241a:	4153      	adcs	r3, r2
1000241c:	687a      	ldr	r2, [r7, #4]
1000241e:	3208      	adds	r2, #8
10002420:	77d3      	strb	r3, [r2, #31]
	rom->config_func(dev);
10002422:	6873      	ldr	r3, [r6, #4]
10002424:	4798      	blx	r3
	dw->app_config = I2C_MODE_CONTROLLER | i2c_map_dt_bitrate(rom->bitrate);
10002426:	68b3      	ldr	r3, [r6, #8]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
10002428:	4913      	ldr	r1, [pc, #76]	; (10002478 <i2c_dw_initialize+0xc0>)
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST:
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
1000242a:	2206      	movs	r2, #6
	switch (bitrate) {
1000242c:	428b      	cmp	r3, r1
1000242e:	d009      	beq.n	10002444 <i2c_dw_initialize+0x8c>
10002430:	d815      	bhi.n	1000245e <i2c_dw_initialize+0xa6>
10002432:	4912      	ldr	r1, [pc, #72]	; (1000247c <i2c_dw_initialize+0xc4>)
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
10002434:	3a04      	subs	r2, #4
	switch (bitrate) {
10002436:	428b      	cmp	r3, r1
10002438:	d004      	beq.n	10002444 <i2c_dw_initialize+0x8c>
1000243a:	4a11      	ldr	r2, [pc, #68]	; (10002480 <i2c_dw_initialize+0xc8>)
1000243c:	189b      	adds	r3, r3, r2
1000243e:	425a      	negs	r2, r3
10002440:	4153      	adcs	r3, r2
10002442:	009a      	lsls	r2, r3, #2
10002444:	2110      	movs	r1, #16
10002446:	687b      	ldr	r3, [r7, #4]
10002448:	4311      	orrs	r1, r2
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
1000244a:	0028      	movs	r0, r5
	dw->app_config = I2C_MODE_CONTROLLER | i2c_map_dt_bitrate(rom->bitrate);
1000244c:	6119      	str	r1, [r3, #16]
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
1000244e:	f002 fa67 	bl	10004920 <i2c_dw_runtime_configure>
10002452:	1e04      	subs	r4, r0, #0
10002454:	d1d5      	bne.n	10002402 <i2c_dw_initialize+0x4a>
	dw->state = I2C_DW_STATE_READY;
10002456:	687b      	ldr	r3, [r7, #4]
10002458:	3305      	adds	r3, #5
1000245a:	77d8      	strb	r0, [r3, #31]
	return ret;
1000245c:	e7d3      	b.n	10002406 <i2c_dw_initialize+0x4e>
1000245e:	4909      	ldr	r1, [pc, #36]	; (10002484 <i2c_dw_initialize+0xcc>)
	case I2C_BITRATE_HIGH:
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
10002460:	2208      	movs	r2, #8
	switch (bitrate) {
10002462:	428b      	cmp	r3, r1
10002464:	d0ee      	beq.n	10002444 <i2c_dw_initialize+0x8c>
10002466:	4908      	ldr	r1, [pc, #32]	; (10002488 <i2c_dw_initialize+0xd0>)
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");

	return 0;
10002468:	0022      	movs	r2, r4
	switch (bitrate) {
1000246a:	428b      	cmp	r3, r1
1000246c:	d1ea      	bne.n	10002444 <i2c_dw_initialize+0x8c>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
1000246e:	220a      	movs	r2, #10
10002470:	e7e8      	b.n	10002444 <i2c_dw_initialize+0x8c>
10002472:	46c0      	nop			; (mov r8, r8)
10002474:	44570140 	.word	0x44570140
10002478:	000f4240 	.word	0x000f4240
1000247c:	000186a0 	.word	0x000186a0
10002480:	fff9e580 	.word	0xfff9e580
10002484:	0033e140 	.word	0x0033e140
10002488:	004c4b40 	.word	0x004c4b40

1000248c <i2c_dw_transfer>:
{
1000248c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000248e:	b087      	sub	sp, #28
10002490:	af00      	add	r7, sp, #0
10002492:	0004      	movs	r4, r0
10002494:	469c      	mov	ip, r3
		return 0;
10002496:	1e10      	subs	r0, r2, #0
{
10002498:	6139      	str	r1, [r7, #16]
1000249a:	617a      	str	r2, [r7, #20]
	if (!num_msgs) {
1000249c:	d100      	bne.n	100024a0 <i2c_dw_transfer+0x14>
1000249e:	e0b4      	b.n	1000260a <i2c_dw_transfer+0x17e>

static ALWAYS_INLINE int sys_test_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	return temp & (1 << bit);
100024a0:	2101      	movs	r1, #1
	return (uint32_t)DEVICE_MMIO_GET(dev);
100024a2:	6863      	ldr	r3, [r4, #4]
100024a4:	681d      	ldr	r5, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
100024a6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
100024a8:	420b      	tst	r3, r1
100024aa:	d000      	beq.n	100024ae <i2c_dw_transfer+0x22>
100024ac:	e0c3      	b.n	10002636 <i2c_dw_transfer+0x1aa>
	struct i2c_dw_dev_config * const dw = dev->data;
100024ae:	6924      	ldr	r4, [r4, #16]
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
100024b0:	2308      	movs	r3, #8
100024b2:	1d62      	adds	r2, r4, #5
100024b4:	7fd0      	ldrb	r0, [r2, #31]
100024b6:	0006      	movs	r6, r0
100024b8:	401e      	ands	r6, r3
100024ba:	4218      	tst	r0, r3
100024bc:	d000      	beq.n	100024c0 <i2c_dw_transfer+0x34>
100024be:	e0ba      	b.n	10002636 <i2c_dw_transfer+0x1aa>
	dw->state |= I2C_DW_BUSY;
100024c0:	7fd0      	ldrb	r0, [r2, #31]
100024c2:	4303      	orrs	r3, r0
100024c4:	77d3      	strb	r3, [r2, #31]
	uint32_t temp = *(volatile uint32_t *)addr;
100024c6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
100024c8:	438b      	bics	r3, r1
100024ca:	66eb      	str	r3, [r5, #108]	; 0x6c
DEFINE_MM_REG_WRITE(intr_mask, DW_IC_REG_INTR_MASK, 32)
100024cc:	002b      	movs	r3, r5
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
100024ce:	632e      	str	r6, [r5, #48]	; 0x30
	if (I2C_MODE_CONTROLLER & dw->app_config) {
100024d0:	6922      	ldr	r2, [r4, #16]
100024d2:	3330      	adds	r3, #48	; 0x30
100024d4:	60fb      	str	r3, [r7, #12]
	return *(volatile uint32_t *)addr;
100024d6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
100024d8:	06d3      	lsls	r3, r2, #27
100024da:	d50e      	bpl.n	100024fa <i2c_dw_transfer+0x6e>
		ic_con.bits.master_mode = 1U;
100024dc:	2361      	movs	r3, #97	; 0x61
	if (I2C_ADDR_10_BITS & dw->app_config) {
100024de:	420a      	tst	r2, r1
100024e0:	d000      	beq.n	100024e4 <i2c_dw_transfer+0x58>
		ic_con.bits.addr_slave_10bit = 1U;
100024e2:	3318      	adds	r3, #24
	switch (I2C_SPEED_GET(dw->app_config)) {
100024e4:	2107      	movs	r1, #7
100024e6:	2604      	movs	r6, #4
100024e8:	0852      	lsrs	r2, r2, #1
100024ea:	4011      	ands	r1, r2
100024ec:	4232      	tst	r2, r6
100024ee:	d10a      	bne.n	10002506 <i2c_dw_transfer+0x7a>
100024f0:	2006      	movs	r0, #6
100024f2:	4202      	tst	r2, r0
100024f4:	d11c      	bne.n	10002530 <i2c_dw_transfer+0xa4>
100024f6:	2901      	cmp	r1, #1
100024f8:	d012      	beq.n	10002520 <i2c_dw_transfer+0x94>
		dw->state = I2C_DW_STATE_READY;
100024fa:	2300      	movs	r3, #0
		return ret;
100024fc:	2016      	movs	r0, #22
		dw->state = I2C_DW_STATE_READY;
100024fe:	3405      	adds	r4, #5
10002500:	77e3      	strb	r3, [r4, #31]
		return -EIO;
10002502:	4240      	negs	r0, r0
10002504:	e081      	b.n	1000260a <i2c_dw_transfer+0x17e>
	switch (I2C_SPEED_GET(dw->app_config)) {
10002506:	2904      	cmp	r1, #4
10002508:	d1f7      	bne.n	100024fa <i2c_dw_transfer+0x6e>
		if (!dw->support_hs_mode) {
1000250a:	0022      	movs	r2, r4
1000250c:	3208      	adds	r2, #8
1000250e:	7fd2      	ldrb	r2, [r2, #31]
10002510:	2a00      	cmp	r2, #0
10002512:	d0f2      	beq.n	100024fa <i2c_dw_transfer+0x6e>
		write_hs_scl_lcnt(dw->lcnt, reg_base);
10002514:	8c62      	ldrh	r2, [r4, #34]	; 0x22
	*(volatile uint32_t *)addr = data;
10002516:	62aa      	str	r2, [r5, #40]	; 0x28
		write_hs_scl_hcnt(dw->hcnt, reg_base);
10002518:	8c22      	ldrh	r2, [r4, #32]
1000251a:	626a      	str	r2, [r5, #36]	; 0x24
		ic_con.bits.speed = I2C_DW_SPEED_HIGH;
1000251c:	2206      	movs	r2, #6
1000251e:	e005      	b.n	1000252c <i2c_dw_transfer+0xa0>
		write_ss_scl_lcnt(dw->lcnt, reg_base);
10002520:	8c62      	ldrh	r2, [r4, #34]	; 0x22
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
10002522:	4383      	bics	r3, r0
10002524:	61aa      	str	r2, [r5, #24]
		write_ss_scl_hcnt(dw->hcnt, reg_base);
10002526:	8c22      	ldrh	r2, [r4, #32]
10002528:	616a      	str	r2, [r5, #20]
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
1000252a:	2202      	movs	r2, #2
		ic_con.bits.speed = I2C_DW_SPEED_HIGH;
1000252c:	4313      	orrs	r3, r2
		break;
1000252e:	e005      	b.n	1000253c <i2c_dw_transfer+0xb0>
		write_fs_scl_lcnt(dw->lcnt, reg_base);
10002530:	8c62      	ldrh	r2, [r4, #34]	; 0x22
		ic_con.bits.speed = I2C_DW_SPEED_FAST;
10002532:	4383      	bics	r3, r0
10002534:	622a      	str	r2, [r5, #32]
		write_fs_scl_hcnt(dw->hcnt, reg_base);
10002536:	8c22      	ldrh	r2, [r4, #32]
		ic_con.bits.speed = I2C_DW_SPEED_FAST;
10002538:	4333      	orrs	r3, r6
1000253a:	61ea      	str	r2, [r5, #28]
1000253c:	602b      	str	r3, [r5, #0]
1000253e:	2300      	movs	r3, #0
10002540:	63ab      	str	r3, [r5, #56]	; 0x38
10002542:	63eb      	str	r3, [r5, #60]	; 0x3c
	return *(volatile uint32_t *)addr;
10002544:	686a      	ldr	r2, [r5, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
10002546:	682b      	ldr	r3, [r5, #0]
	if (test_bit_con_master_mode(reg_base)) {
10002548:	07db      	lsls	r3, r3, #31
1000254a:	d561      	bpl.n	10002610 <i2c_dw_transfer+0x184>
		ic_tar.bits.ic_tar = slave_address;
1000254c:	4663      	mov	r3, ip
1000254e:	0a92      	lsrs	r2, r2, #10
10002550:	059b      	lsls	r3, r3, #22
10002552:	0d9b      	lsrs	r3, r3, #22
10002554:	0292      	lsls	r2, r2, #10
10002556:	431a      	orrs	r2, r3
	if (I2C_MODE_CONTROLLER & dw->app_config) {
10002558:	6923      	ldr	r3, [r4, #16]
1000255a:	06d9      	lsls	r1, r3, #27
1000255c:	d504      	bpl.n	10002568 <i2c_dw_transfer+0xdc>
		if (I2C_ADDR_10_BITS & dw->app_config) {
1000255e:	07db      	lsls	r3, r3, #31
10002560:	d559      	bpl.n	10002616 <i2c_dw_transfer+0x18a>
			ic_tar.bits.ic_10bitaddr_master = 1U;
10002562:	2380      	movs	r3, #128	; 0x80
10002564:	015b      	lsls	r3, r3, #5
10002566:	431a      	orrs	r2, r3
	*(volatile uint32_t *)addr = temp | (1 << bit);
10002568:	2601      	movs	r6, #1
	*(volatile uint32_t *)addr = data;
1000256a:	606a      	str	r2, [r5, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
1000256c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp | (1 << bit);
1000256e:	4333      	orrs	r3, r6
10002570:	66eb      	str	r3, [r5, #108]	; 0x6c
		dw->rx_pending = 0U;
10002572:	2000      	movs	r0, #0
		pflags = dw->xfr_flags;
10002574:	1de3      	adds	r3, r4, #7
10002576:	7fda      	ldrb	r2, [r3, #31]
10002578:	607a      	str	r2, [r7, #4]
		dw->xfr_buf = cur_msg->buf;
1000257a:	693a      	ldr	r2, [r7, #16]
1000257c:	6812      	ldr	r2, [r2, #0]
1000257e:	6162      	str	r2, [r4, #20]
10002580:	60ba      	str	r2, [r7, #8]
		dw->xfr_len = cur_msg->len;
10002582:	693a      	ldr	r2, [r7, #16]
10002584:	6851      	ldr	r1, [r2, #4]
10002586:	61a1      	str	r1, [r4, #24]
		dw->xfr_flags = cur_msg->flags;
10002588:	7a12      	ldrb	r2, [r2, #8]
1000258a:	77da      	strb	r2, [r3, #31]
		dw->rx_pending = 0U;
1000258c:	61e0      	str	r0, [r4, #28]
		    != (dw->xfr_flags & I2C_MSG_RW_MASK)) {
1000258e:	6878      	ldr	r0, [r7, #4]
10002590:	4050      	eors	r0, r2
		if ((pflags & I2C_MSG_RW_MASK)
10002592:	4230      	tst	r0, r6
10002594:	d002      	beq.n	1000259c <i2c_dw_transfer+0x110>
			dw->xfr_flags |= I2C_MSG_RESTART;
10002596:	2004      	movs	r0, #4
10002598:	4302      	orrs	r2, r0
1000259a:	77da      	strb	r2, [r3, #31]
		if (msg_left == 1U) {
1000259c:	697a      	ldr	r2, [r7, #20]
1000259e:	2a01      	cmp	r2, #1
100025a0:	d103      	bne.n	100025aa <i2c_dw_transfer+0x11e>
			dw->xfr_flags |= I2C_MSG_STOP;
100025a2:	7fd8      	ldrb	r0, [r3, #31]
100025a4:	3201      	adds	r2, #1
100025a6:	4302      	orrs	r2, r0
100025a8:	77da      	strb	r2, [r3, #31]
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
100025aa:	2003      	movs	r0, #3
100025ac:	1d63      	adds	r3, r4, #5
100025ae:	7fda      	ldrb	r2, [r3, #31]
100025b0:	4382      	bics	r2, r0
100025b2:	77da      	strb	r2, [r3, #31]
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
100025b4:	1de2      	adds	r2, r4, #7
100025b6:	7fd2      	ldrb	r2, [r2, #31]
100025b8:	0010      	movs	r0, r2
100025ba:	4030      	ands	r0, r6
100025bc:	4232      	tst	r2, r6
100025be:	d12d      	bne.n	1000261c <i2c_dw_transfer+0x190>
			dw->state |= I2C_DW_CMD_SEND;
100025c0:	7fda      	ldrb	r2, [r3, #31]
100025c2:	4332      	orrs	r2, r6
100025c4:	77da      	strb	r2, [r3, #31]
			dw->request_bytes = 0U;
100025c6:	1da3      	adds	r3, r4, #6
100025c8:	77d8      	strb	r0, [r3, #31]
	uint32_t temp = *(volatile uint32_t *)addr;
100025ca:	682b      	ldr	r3, [r5, #0]
		if (test_bit_con_master_mode(reg_base)) {
100025cc:	4233      	tst	r3, r6
100025ce:	d02c      	beq.n	1000262a <i2c_dw_transfer+0x19e>
100025d0:	4b1a      	ldr	r3, [pc, #104]	; (1000263c <i2c_dw_transfer+0x1b0>)
100025d2:	68fa      	ldr	r2, [r7, #12]
100025d4:	6013      	str	r3, [r2, #0]
	return z_impl_k_sem_take(sem, timeout);
100025d6:	2201      	movs	r2, #1
100025d8:	4252      	negs	r2, r2
100025da:	17d3      	asrs	r3, r2, #31
100025dc:	0020      	movs	r0, r4
100025de:	f000 ff89 	bl	100034f4 <z_impl_k_sem_take>
		if (dw->state & I2C_DW_CMD_ERROR) {
100025e2:	2104      	movs	r1, #4
100025e4:	1d63      	adds	r3, r4, #5
100025e6:	7fda      	ldrb	r2, [r3, #31]
100025e8:	420a      	tst	r2, r1
100025ea:	d121      	bne.n	10002630 <i2c_dw_transfer+0x1a4>
		if (dw->xfr_len > 0) {
100025ec:	69a2      	ldr	r2, [r4, #24]
100025ee:	2a00      	cmp	r2, #0
100025f0:	d11e      	bne.n	10002630 <i2c_dw_transfer+0x1a4>
		cur_msg++;
100025f2:	693a      	ldr	r2, [r7, #16]
100025f4:	320c      	adds	r2, #12
100025f6:	613a      	str	r2, [r7, #16]
		msg_left--;
100025f8:	697a      	ldr	r2, [r7, #20]
100025fa:	3a01      	subs	r2, #1
100025fc:	b2d2      	uxtb	r2, r2
100025fe:	617a      	str	r2, [r7, #20]
	while (msg_left > 0) {
10002600:	2a00      	cmp	r2, #0
10002602:	d1b6      	bne.n	10002572 <i2c_dw_transfer+0xe6>
	ret = i2c_dw_setup(dev, slave_address);
10002604:	0010      	movs	r0, r2
	dw->state = I2C_DW_STATE_READY;
10002606:	2200      	movs	r2, #0
10002608:	77da      	strb	r2, [r3, #31]
}
1000260a:	46bd      	mov	sp, r7
1000260c:	b007      	add	sp, #28
1000260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002610:	4663      	mov	r3, ip
10002612:	60ab      	str	r3, [r5, #8]
DEFINE_MM_REG_READ(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(sar, DW_IC_REG_SAR, 32)
10002614:	e7a0      	b.n	10002558 <i2c_dw_transfer+0xcc>
			ic_tar.bits.ic_10bitaddr_master = 0U;
10002616:	4b0a      	ldr	r3, [pc, #40]	; (10002640 <i2c_dw_transfer+0x1b4>)
10002618:	401a      	ands	r2, r3
1000261a:	e7a5      	b.n	10002568 <i2c_dw_transfer+0xdc>
			dw->state |= I2C_DW_CMD_RECV;
1000261c:	2202      	movs	r2, #2
1000261e:	7fd8      	ldrb	r0, [r3, #31]
10002620:	4302      	orrs	r2, r0
10002622:	77da      	strb	r2, [r3, #31]
			dw->request_bytes = dw->xfr_len;
10002624:	1da3      	adds	r3, r4, #6
10002626:	77d9      	strb	r1, [r3, #31]
10002628:	e7cf      	b.n	100025ca <i2c_dw_transfer+0x13e>
1000262a:	2398      	movs	r3, #152	; 0x98
1000262c:	009b      	lsls	r3, r3, #2
1000262e:	e7d0      	b.n	100025d2 <i2c_dw_transfer+0x146>
10002630:	2005      	movs	r0, #5
10002632:	4240      	negs	r0, r0
10002634:	e7e7      	b.n	10002606 <i2c_dw_transfer+0x17a>
		return -EIO;
10002636:	2005      	movs	r0, #5
10002638:	e763      	b.n	10002502 <i2c_dw_transfer+0x76>
1000263a:	46c0      	nop			; (mov r8, r8)
1000263c:	0000025f 	.word	0x0000025f
10002640:	ffffefff 	.word	0xffffefff

10002644 <pwm_set>:
 * @retval -ENOTSUP If requested period or pulse cycles are not supported.
 * @retval -errno Other negative errno code on failure.
 */
static inline int pwm_set(const struct device *dev, uint32_t channel,
			  uint32_t period, uint32_t pulse, pwm_flags_t flags)
{
10002644:	b5f0      	push	{r4, r5, r6, r7, lr}
10002646:	b08b      	sub	sp, #44	; 0x2c
10002648:	af02      	add	r7, sp, #8
1000264a:	001e      	movs	r6, r3
1000264c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
1000264e:	0004      	movs	r4, r0
10002650:	0015      	movs	r5, r2
10002652:	60f9      	str	r1, [r7, #12]
10002654:	60bb      	str	r3, [r7, #8]
	return api->get_cycles_per_sec(dev, channel, cycles);
10002656:	2218      	movs	r2, #24
10002658:	6883      	ldr	r3, [r0, #8]
1000265a:	68f9      	ldr	r1, [r7, #12]
1000265c:	685b      	ldr	r3, [r3, #4]
1000265e:	18ba      	adds	r2, r7, r2
10002660:	4798      	blx	r3
	uint64_t pulse_cycles;
	uint64_t period_cycles;
	uint64_t cycles_per_sec;

	err = pwm_get_cycles_per_sec(dev, channel, &cycles_per_sec);
	if (err < 0) {
10002662:	2800      	cmp	r0, #0
10002664:	db2c      	blt.n	100026c0 <pwm_set+0x7c>
		return err;
	}

	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10002666:	69ba      	ldr	r2, [r7, #24]
10002668:	69fb      	ldr	r3, [r7, #28]
1000266a:	0028      	movs	r0, r5
1000266c:	2100      	movs	r1, #0
1000266e:	613a      	str	r2, [r7, #16]
10002670:	617b      	str	r3, [r7, #20]
10002672:	f7ff f9bb 	bl	100019ec <__aeabi_lmul>
10002676:	2300      	movs	r3, #0
10002678:	4a15      	ldr	r2, [pc, #84]	; (100026d0 <pwm_set+0x8c>)
1000267a:	6079      	str	r1, [r7, #4]
1000267c:	f7fd fe42 	bl	10000304 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
10002680:	687b      	ldr	r3, [r7, #4]
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10002682:	0005      	movs	r5, r0
	if (period_cycles > UINT32_MAX) {
10002684:	0019      	movs	r1, r3
10002686:	4b13      	ldr	r3, [pc, #76]	; (100026d4 <pwm_set+0x90>)
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
10002688:	6038      	str	r0, [r7, #0]
	if (period_cycles > UINT32_MAX) {
1000268a:	4299      	cmp	r1, r3
1000268c:	d81b      	bhi.n	100026c6 <pwm_set+0x82>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
1000268e:	693a      	ldr	r2, [r7, #16]
10002690:	697b      	ldr	r3, [r7, #20]
10002692:	0030      	movs	r0, r6
10002694:	2100      	movs	r1, #0
10002696:	f7ff f9a9 	bl	100019ec <__aeabi_lmul>
1000269a:	2300      	movs	r3, #0
1000269c:	4a0c      	ldr	r2, [pc, #48]	; (100026d0 <pwm_set+0x8c>)
1000269e:	000e      	movs	r6, r1
100026a0:	f7fd fe30 	bl	10000304 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
100026a4:	4a0b      	ldr	r2, [pc, #44]	; (100026d4 <pwm_set+0x90>)
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
100026a6:	0003      	movs	r3, r0
	if (pulse_cycles > UINT32_MAX) {
100026a8:	4296      	cmp	r6, r2
100026aa:	d80c      	bhi.n	100026c6 <pwm_set+0x82>
	const struct pwm_driver_api *api =
100026ac:	68a2      	ldr	r2, [r4, #8]
	if (pulse > period) {
100026ae:	4285      	cmp	r5, r0
100026b0:	d30c      	bcc.n	100026cc <pwm_set+0x88>
	return api->set_cycles(dev, channel, period, pulse, flags);
100026b2:	68b9      	ldr	r1, [r7, #8]
100026b4:	0020      	movs	r0, r4
100026b6:	9100      	str	r1, [sp, #0]
100026b8:	6816      	ldr	r6, [r2, #0]
100026ba:	68f9      	ldr	r1, [r7, #12]
100026bc:	002a      	movs	r2, r5
100026be:	47b0      	blx	r6
		return -ENOTSUP;
	}

	return pwm_set_cycles(dev, channel, (uint32_t)period_cycles,
			      (uint32_t)pulse_cycles, flags);
}
100026c0:	46bd      	mov	sp, r7
100026c2:	b009      	add	sp, #36	; 0x24
100026c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
100026c6:	2086      	movs	r0, #134	; 0x86
		return -EINVAL;
100026c8:	4240      	negs	r0, r0
100026ca:	e7f9      	b.n	100026c0 <pwm_set+0x7c>
100026cc:	2016      	movs	r0, #22
100026ce:	e7fb      	b.n	100026c8 <pwm_set+0x84>
100026d0:	3b9aca00 	.word	0x3b9aca00
100026d4:	3b9ac9ff 	.word	0x3b9ac9ff

100026d8 <pwm_rpi_init>:
	ret = pinctrl_lookup_state(config, id, &state);
100026d8:	230c      	movs	r3, #12
	.get_cycles_per_sec = pwm_rpi_get_cycles_per_sec,
	.set_cycles = pwm_rpi_set_cycles,
};

static int pwm_rpi_init(const struct device *dev)
{
100026da:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct pwm_rpi_config *cfg = dev->config;
100026dc:	6844      	ldr	r4, [r0, #4]
{
100026de:	b085      	sub	sp, #20
100026e0:	af00      	add	r7, sp, #0
100026e2:	2100      	movs	r1, #0
100026e4:	69e0      	ldr	r0, [r4, #28]
100026e6:	18fa      	adds	r2, r7, r3
100026e8:	f000 f9e4 	bl	10002ab4 <pinctrl_lookup_state>
	if (ret < 0) {
100026ec:	2800      	cmp	r0, #0
100026ee:	db35      	blt.n	1000275c <pwm_rpi_init+0x84>
	return pinctrl_apply_state_direct(config, state);
100026f0:	68fb      	ldr	r3, [r7, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
100026f2:	2200      	movs	r2, #0
100026f4:	7919      	ldrb	r1, [r3, #4]
100026f6:	6818      	ldr	r0, [r3, #0]
100026f8:	f002 fc12 	bl	10004f20 <pinctrl_configure_pins>
	pwm_config slice_cfg;
	size_t slice_idx;
	int err;

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err) {
100026fc:	2800      	cmp	r0, #0
100026fe:	d12d      	bne.n	1000275c <pwm_rpi_init+0x84>
		LOG_ERR("Failed to configure pins for PWM. err=%d", err);
		return err;
	}

	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10002700:	0001      	movs	r1, r0
10002702:	1d23      	adds	r3, r4, #4
	if (err) {
10002704:	4c17      	ldr	r4, [pc, #92]	; (10002764 <pwm_rpi_init+0x8c>)
10002706:	607b      	str	r3, [r7, #4]
 * \param start If true the PWM will be started running once configured. If false you will need to start
 *  manually using \ref pwm_set_enabled() or \ref pwm_set_mask_enabled()
 */
static inline void pwm_init(uint slice_num, pwm_config *c, bool start) {
    check_slice_num_param(slice_num);
    pwm_hw->slice[slice_num].csr = 0;
10002708:	2214      	movs	r2, #20

    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
1000270a:	4e17      	ldr	r6, [pc, #92]	; (10002768 <pwm_rpi_init+0x90>)
1000270c:	434a      	muls	r2, r1
1000270e:	46b4      	mov	ip, r6
10002710:	4494      	add	ip, r2
    pwm_hw->slice[slice_num].csr = 0;
10002712:	2300      	movs	r3, #0
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
10002714:	4666      	mov	r6, ip
10002716:	4d13      	ldr	r5, [pc, #76]	; (10002764 <pwm_rpi_init+0x8c>)
	for (slice_idx = 0; slice_idx < NUM_PWM_SLICES; slice_idx++) {
10002718:	3101      	adds	r1, #1
1000271a:	1955      	adds	r5, r2, r5
    pwm_hw->slice[slice_num].csr = 0;
1000271c:	602b      	str	r3, [r5, #0]
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
1000271e:	6033      	str	r3, [r6, #0]
    pwm_hw->slice[slice_num].cc = PWM_CH0_CC_RESET;
10002720:	4e12      	ldr	r6, [pc, #72]	; (1000276c <pwm_rpi_init+0x94>)
10002722:	46b4      	mov	ip, r6
10002724:	4494      	add	ip, r2
10002726:	4666      	mov	r6, ip
10002728:	6033      	str	r3, [r6, #0]
    pwm_hw->slice[slice_num].top = c->top;
1000272a:	4e11      	ldr	r6, [pc, #68]	; (10002770 <pwm_rpi_init+0x98>)
1000272c:	1992      	adds	r2, r2, r6
1000272e:	4e11      	ldr	r6, [pc, #68]	; (10002774 <pwm_rpi_init+0x9c>)
10002730:	6016      	str	r6, [r2, #0]
    pwm_hw->slice[slice_num].div = c->div;
10002732:	2210      	movs	r2, #16
10002734:	606a      	str	r2, [r5, #4]
    pwm_hw->slice[slice_num].csr = c->csr | (bool_to_bit(start) << PWM_CH0_CSR_EN_LSB);
10002736:	602b      	str	r3, [r5, #0]
 * \param fract 4 bit fractional part of the clock divider
 */
static inline void pwm_set_clkdiv_int_frac(uint slice_num, uint8_t integer, uint8_t fract) {
    check_slice_num_param(slice_num);
    valid_params_if(PWM, fract < 16);
    pwm_hw->slice[slice_num].div = (((uint)integer) << PWM_CH0_DIV_INT_LSB) | (((uint)fract) << PWM_CH0_DIV_FRAC_LSB);
10002738:	687b      	ldr	r3, [r7, #4]
1000273a:	781a      	ldrb	r2, [r3, #0]
1000273c:	785e      	ldrb	r6, [r3, #1]
1000273e:	0112      	lsls	r2, r2, #4
10002740:	4332      	orrs	r2, r6
10002742:	606a      	str	r2, [r5, #4]
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002744:	2501      	movs	r5, #1
10002746:	6822      	ldr	r2, [r4, #0]
10002748:	3303      	adds	r3, #3
1000274a:	4395      	bics	r5, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000274c:	2280      	movs	r2, #128	; 0x80
1000274e:	0152      	lsls	r2, r2, #5
10002750:	4322      	orrs	r2, r4
10002752:	6015      	str	r5, [r2, #0]
10002754:	607b      	str	r3, [r7, #4]
10002756:	3414      	adds	r4, #20
10002758:	2908      	cmp	r1, #8
1000275a:	d1d5      	bne.n	10002708 <pwm_rpi_init+0x30>
					cfg->slice_configs[slice_idx].frac);
		pwm_set_enabled(slice_idx, true);
	}

	return 0;
}
1000275c:	46bd      	mov	sp, r7
1000275e:	b005      	add	sp, #20
10002760:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002762:	46c0      	nop			; (mov r8, r8)
10002764:	40050000 	.word	0x40050000
10002768:	40050008 	.word	0x40050008
1000276c:	4005000c 	.word	0x4005000c
10002770:	40050010 	.word	0x40050010
10002774:	0000ffff 	.word	0x0000ffff

10002778 <pwm_rpi_set_cycles>:
{
10002778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000277a:	af00      	add	r7, sp, #0
1000277c:	607b      	str	r3, [r7, #4]
1000277e:	8c3b      	ldrh	r3, [r7, #32]
	if (ch >= PWM_RPI_NUM_CHANNELS) {
10002780:	290f      	cmp	r1, #15
10002782:	d846      	bhi.n	10002812 <pwm_rpi_set_cycles+0x9a>
	if (period_cycles > PWM_RPI_PICO_COUNTER_TOP_MAX ||
10002784:	2480      	movs	r4, #128	; 0x80
10002786:	0264      	lsls	r4, r4, #9
10002788:	42a2      	cmp	r2, r4
1000278a:	d242      	bcs.n	10002812 <pwm_rpi_set_cycles+0x9a>
1000278c:	687d      	ldr	r5, [r7, #4]
1000278e:	42a5      	cmp	r5, r4
10002790:	d23f      	bcs.n	10002812 <pwm_rpi_set_cycles+0x9a>
	return channel / 2;
10002792:	084c      	lsrs	r4, r1, #1
10002794:	603c      	str	r4, [r7, #0]
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
10002796:	2414      	movs	r4, #20
10002798:	2501      	movs	r5, #1
1000279a:	084e      	lsrs	r6, r1, #1
1000279c:	4374      	muls	r4, r6
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
1000279e:	6840      	ldr	r0, [r0, #4]
	pwm_rpi_set_channel_polarity(dev, slice, pico_channel,
100027a0:	402b      	ands	r3, r5
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
100027a2:	6800      	ldr	r0, [r0, #0]
100027a4:	1900      	adds	r0, r0, r4
100027a6:	6806      	ldr	r6, [r0, #0]
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
100027a8:	6800      	ldr	r0, [r0, #0]
	if (pico_channel == PWM_CHAN_A) {
100027aa:	4229      	tst	r1, r5
100027ac:	d12b      	bne.n	10002806 <pwm_rpi_set_cycles+0x8e>
	bool pwm_polarity_b = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_B_INV_BITS) > 0;
100027ae:	08c0      	lsrs	r0, r0, #3
100027b0:	4028      	ands	r0, r5
 * \param a true to invert output A
 * \param b true to invert output B
 */
static inline void pwm_set_output_polarity(uint slice_num, bool a, bool b) {
    check_slice_num_param(slice_num);
    hw_write_masked(&pwm_hw->slice[slice_num].csr, bool_to_bit(a) << PWM_CH0_CSR_A_INV_LSB | bool_to_bit(b) << PWM_CH0_CSR_B_INV_LSB,
100027b2:	1e46      	subs	r6, r0, #1
100027b4:	41b0      	sbcs	r0, r6
100027b6:	009b      	lsls	r3, r3, #2
100027b8:	00c0      	lsls	r0, r0, #3
100027ba:	4303      	orrs	r3, r0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100027bc:	200c      	movs	r0, #12
100027be:	4d16      	ldr	r5, [pc, #88]	; (10002818 <pwm_rpi_set_cycles+0xa0>)
100027c0:	1965      	adds	r5, r4, r5
100027c2:	682e      	ldr	r6, [r5, #0]
100027c4:	4073      	eors	r3, r6
100027c6:	4003      	ands	r3, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100027c8:	2080      	movs	r0, #128	; 0x80
100027ca:	0140      	lsls	r0, r0, #5
100027cc:	4305      	orrs	r5, r0
100027ce:	602b      	str	r3, [r5, #0]
    pwm_hw->slice[slice_num].top = wrap;
100027d0:	2314      	movs	r3, #20
100027d2:	084e      	lsrs	r6, r1, #1
100027d4:	435e      	muls	r6, r3
    hw_write_masked(
100027d6:	4b11      	ldr	r3, [pc, #68]	; (1000281c <pwm_rpi_set_cycles+0xa4>)
    pwm_hw->slice[slice_num].top = wrap;
100027d8:	4d0f      	ldr	r5, [pc, #60]	; (10002818 <pwm_rpi_set_cycles+0xa0>)
    hw_write_masked(
100027da:	18e4      	adds	r4, r4, r3
        ((uint)level) << (chan ? PWM_CH0_CC_B_LSB : PWM_CH0_CC_A_LSB),
100027dc:	1e4b      	subs	r3, r1, #1
100027de:	4199      	sbcs	r1, r3
    pwm_hw->slice[slice_num].top = wrap;
100027e0:	1976      	adds	r6, r6, r5
100027e2:	6132      	str	r2, [r6, #16]
    hw_write_masked(
100027e4:	687a      	ldr	r2, [r7, #4]
        ((uint)level) << (chan ? PWM_CH0_CC_B_LSB : PWM_CH0_CC_A_LSB),
100027e6:	010b      	lsls	r3, r1, #4
    hw_write_masked(
100027e8:	409a      	lsls	r2, r3
100027ea:	0013      	movs	r3, r2
100027ec:	4a0c      	ldr	r2, [pc, #48]	; (10002820 <pwm_rpi_set_cycles+0xa8>)
100027ee:	4249      	negs	r1, r1
100027f0:	4011      	ands	r1, r2
100027f2:	4a0c      	ldr	r2, [pc, #48]	; (10002824 <pwm_rpi_set_cycles+0xac>)
100027f4:	1889      	adds	r1, r1, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100027f6:	6822      	ldr	r2, [r4, #0]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100027f8:	4304      	orrs	r4, r0
	return 0;
100027fa:	2000      	movs	r0, #0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100027fc:	4053      	eors	r3, r2
100027fe:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002800:	6021      	str	r1, [r4, #0]
};
10002802:	46bd      	mov	sp, r7
10002804:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
10002806:	08b0      	lsrs	r0, r6, #2
10002808:	4684      	mov	ip, r0
		pwm_polarity_b = inverted;
1000280a:	0018      	movs	r0, r3
	bool pwm_polarity_a = (cfg->pwm_controller->slice[slice].csr & PWM_CH0_CSR_A_INV_BITS) > 0;
1000280c:	4663      	mov	r3, ip
1000280e:	402b      	ands	r3, r5
10002810:	e7cf      	b.n	100027b2 <pwm_rpi_set_cycles+0x3a>
		return -EINVAL;
10002812:	2016      	movs	r0, #22
10002814:	4240      	negs	r0, r0
10002816:	e7f4      	b.n	10002802 <pwm_rpi_set_cycles+0x8a>
10002818:	40050000 	.word	0x40050000
1000281c:	4005000c 	.word	0x4005000c
10002820:	fffe0001 	.word	0xfffe0001
10002824:	0000ffff 	.word	0x0000ffff

10002828 <pwm_rpi_get_cycles_per_sec>:
{
10002828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000282a:	af00      	add	r7, sp, #0
1000282c:	607a      	str	r2, [r7, #4]
	return channel / 2;
1000282e:	084b      	lsrs	r3, r1, #1
	if (ch >= PWM_RPI_NUM_CHANNELS) {
10002830:	290f      	cmp	r1, #15
10002832:	d827      	bhi.n	10002884 <pwm_rpi_get_cycles_per_sec+0x5c>
	return (float)cfg->slice_configs[slice].integral +
10002834:	2603      	movs	r6, #3
10002836:	435e      	muls	r6, r3
10002838:	6843      	ldr	r3, [r0, #4]
1000283a:	199e      	adds	r6, r3, r6
		(float)cfg->slice_configs[slice].frac / 16.0;
1000283c:	7970      	ldrb	r0, [r6, #5]
1000283e:	f7fd fe87 	bl	10000550 <__aeabi_ui2f>
10002842:	f7fe ff91 	bl	10001768 <__aeabi_f2d>
10002846:	2200      	movs	r2, #0
10002848:	4b10      	ldr	r3, [pc, #64]	; (1000288c <pwm_rpi_get_cycles_per_sec+0x64>)
1000284a:	f7fe fa7f 	bl	10000d4c <__aeabi_dmul>
1000284e:	0004      	movs	r4, r0
	return (float)cfg->slice_configs[slice].integral +
10002850:	7930      	ldrb	r0, [r6, #4]
		(float)cfg->slice_configs[slice].frac / 16.0;
10002852:	000d      	movs	r5, r1
	return (float)cfg->slice_configs[slice].integral +
10002854:	f7fd fe7c 	bl	10000550 <__aeabi_ui2f>
10002858:	f7fe ff86 	bl	10001768 <__aeabi_f2d>
1000285c:	000b      	movs	r3, r1
1000285e:	0002      	movs	r2, r0
10002860:	0029      	movs	r1, r5
10002862:	0020      	movs	r0, r4
10002864:	f7fd feae 	bl	100005c4 <__aeabi_dadd>
10002868:	f7fe ffc0 	bl	100017ec <__aeabi_d2f>
1000286c:	1c01      	adds	r1, r0, #0
	*cycles = (uint64_t)(f_clock_in / pwm_rpi_get_clkdiv(dev, slice));
1000286e:	4808      	ldr	r0, [pc, #32]	; (10002890 <pwm_rpi_get_cycles_per_sec+0x68>)
10002870:	f7fd fd88 	bl	10000384 <__aeabi_fdiv>
10002874:	f7fd fd66 	bl	10000344 <__aeabi_f2ulz>
10002878:	687b      	ldr	r3, [r7, #4]
1000287a:	6018      	str	r0, [r3, #0]
1000287c:	6059      	str	r1, [r3, #4]
	return 0;
1000287e:	2000      	movs	r0, #0
}
10002880:	46bd      	mov	sp, r7
10002882:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		return -EINVAL;
10002884:	2016      	movs	r0, #22
10002886:	4240      	negs	r0, r0
10002888:	e7fa      	b.n	10002880 <pwm_rpi_get_cycles_per_sec+0x58>
1000288a:	46c0      	nop			; (mov r8, r8)
1000288c:	3fb00000 	.word	0x3fb00000
10002890:	4cee6b28 	.word	0x4cee6b28

10002894 <uart_rpi_irq_err_disable>:
			  UART_UARTIMSC_FEIM_BITS |
			  UART_UARTIMSC_RTIM_BITS);
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
10002894:	b580      	push	{r7, lr}
10002896:	af00      	add	r7, sp, #0
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
10002898:	46bd      	mov	sp, r7
	uart_hw_t * const uart_hw = config->uart_regs;
1000289a:	6843      	ldr	r3, [r0, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
1000289c:	4902      	ldr	r1, [pc, #8]	; (100028a8 <uart_rpi_irq_err_disable+0x14>)
	uart_hw_t * const uart_hw = config->uart_regs;
1000289e:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
100028a0:	6b93      	ldr	r3, [r2, #56]	; 0x38
100028a2:	400b      	ands	r3, r1
100028a4:	6393      	str	r3, [r2, #56]	; 0x38
}
100028a6:	bd80      	pop	{r7, pc}
100028a8:	fffff83f 	.word	0xfffff83f

100028ac <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
100028ac:	b5b0      	push	{r4, r5, r7, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
100028ae:	4b0b      	ldr	r3, [pc, #44]	; (100028dc <elapsed+0x30>)
100028b0:	4a0b      	ldr	r2, [pc, #44]	; (100028e0 <elapsed+0x34>)
100028b2:	6899      	ldr	r1, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
100028b4:	6818      	ldr	r0, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
100028b6:	4d0b      	ldr	r5, [pc, #44]	; (100028e4 <elapsed+0x38>)
100028b8:	689c      	ldr	r4, [r3, #8]
{
100028ba:	af00      	add	r7, sp, #0
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
100028bc:	03c0      	lsls	r0, r0, #15
100028be:	d401      	bmi.n	100028c4 <elapsed+0x18>
	    || (val1 < val2)) {
100028c0:	42a1      	cmp	r1, r4
100028c2:	d204      	bcs.n	100028ce <elapsed+0x22>
		overflow_cyc += last_load;
100028c4:	6811      	ldr	r1, [r2, #0]
100028c6:	6828      	ldr	r0, [r5, #0]
100028c8:	1809      	adds	r1, r1, r0
100028ca:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
100028cc:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
}
100028ce:	46bd      	mov	sp, r7
	return (last_load - val2) + overflow_cyc;
100028d0:	682b      	ldr	r3, [r5, #0]
100028d2:	6810      	ldr	r0, [r2, #0]
100028d4:	18c0      	adds	r0, r0, r3
100028d6:	1b00      	subs	r0, r0, r4
}
100028d8:	bdb0      	pop	{r4, r5, r7, pc}
100028da:	46c0      	nop			; (mov r8, r8)
100028dc:	e000e010 	.word	0xe000e010
100028e0:	20000480 	.word	0x20000480
100028e4:	2000047c 	.word	0x2000047c

100028e8 <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
100028e8:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100028ea:	4a0a      	ldr	r2, [pc, #40]	; (10002914 <sys_clock_driver_init+0x2c>)
{
100028ec:	b580      	push	{r7, lr}
100028ee:	6a13      	ldr	r3, [r2, #32]
100028f0:	af00      	add	r7, sp, #0
100028f2:	021b      	lsls	r3, r3, #8
100028f4:	0a1b      	lsrs	r3, r3, #8
100028f6:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
100028f8:	4a07      	ldr	r2, [pc, #28]	; (10002918 <sys_clock_driver_init+0x30>)
100028fa:	4b08      	ldr	r3, [pc, #32]	; (1000291c <sys_clock_driver_init+0x34>)
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
100028fc:	46bd      	mov	sp, r7
	last_load = CYC_PER_TICK - 1;
100028fe:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
10002900:	4b07      	ldr	r3, [pc, #28]	; (10002920 <sys_clock_driver_init+0x38>)
10002902:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
10002904:	4b07      	ldr	r3, [pc, #28]	; (10002924 <sys_clock_driver_init+0x3c>)
10002906:	605a      	str	r2, [r3, #4]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10002908:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
1000290a:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
1000290c:	6819      	ldr	r1, [r3, #0]
1000290e:	430a      	orrs	r2, r1
10002910:	601a      	str	r2, [r3, #0]
}
10002912:	bd80      	pop	{r7, pc}
10002914:	e000ed00 	.word	0xe000ed00
10002918:	000030d3 	.word	0x000030d3
1000291c:	2000047c 	.word	0x2000047c
10002920:	20000480 	.word	0x20000480
10002924:	e000e010 	.word	0xe000e010

10002928 <sys_clock_isr>:
{
10002928:	b5b0      	push	{r4, r5, r7, lr}
1000292a:	af00      	add	r7, sp, #0
	elapsed();
1000292c:	f7ff ffbe 	bl	100028ac <elapsed>
	cycle_count += overflow_cyc;
10002930:	4b0b      	ldr	r3, [pc, #44]	; (10002960 <sys_clock_isr+0x38>)
10002932:	4a0c      	ldr	r2, [pc, #48]	; (10002964 <sys_clock_isr+0x3c>)
10002934:	6818      	ldr	r0, [r3, #0]
10002936:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002938:	4c0b      	ldr	r4, [pc, #44]	; (10002968 <sys_clock_isr+0x40>)
	cycle_count += overflow_cyc;
1000293a:	1840      	adds	r0, r0, r1
1000293c:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
1000293e:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002940:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
10002942:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002944:	4909      	ldr	r1, [pc, #36]	; (1000296c <sys_clock_isr+0x44>)
10002946:	1b40      	subs	r0, r0, r5
10002948:	f7fd fc38 	bl	100001bc <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
1000294c:	4b07      	ldr	r3, [pc, #28]	; (1000296c <sys_clock_isr+0x44>)
1000294e:	4343      	muls	r3, r0
10002950:	195d      	adds	r5, r3, r5
10002952:	6025      	str	r5, [r4, #0]
		sys_clock_announce(dticks);
10002954:	f001 fb48 	bl	10003fe8 <sys_clock_announce>
	z_arm_int_exit();
10002958:	f7ff fbec 	bl	10002134 <z_arm_exc_exit>
}
1000295c:	46bd      	mov	sp, r7
1000295e:	bdb0      	pop	{r4, r5, r7, pc}
10002960:	20000480 	.word	0x20000480
10002964:	20000478 	.word	0x20000478
10002968:	20000474 	.word	0x20000474
1000296c:	000030d4 	.word	0x000030d4

10002970 <sys_clock_set_timeout>:
{
10002970:	b5f0      	push	{r4, r5, r6, r7, lr}
10002972:	b087      	sub	sp, #28
10002974:	4c37      	ldr	r4, [pc, #220]	; (10002a54 <sys_clock_set_timeout+0xe4>)
10002976:	4d38      	ldr	r5, [pc, #224]	; (10002a58 <sys_clock_set_timeout+0xe8>)
10002978:	af00      	add	r7, sp, #0
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
1000297a:	2900      	cmp	r1, #0
1000297c:	d00b      	beq.n	10002996 <sys_clock_set_timeout+0x26>
1000297e:	1c43      	adds	r3, r0, #1
10002980:	d109      	bne.n	10002996 <sys_clock_set_timeout+0x26>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
10002982:	2201      	movs	r2, #1
10002984:	6823      	ldr	r3, [r4, #0]
10002986:	4393      	bics	r3, r2
10002988:	6023      	str	r3, [r4, #0]
		last_load = TIMER_STOPPED;
1000298a:	23ff      	movs	r3, #255	; 0xff
1000298c:	061b      	lsls	r3, r3, #24
1000298e:	602b      	str	r3, [r5, #0]
}
10002990:	46bd      	mov	sp, r7
10002992:	b007      	add	sp, #28
10002994:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
10002996:	682b      	ldr	r3, [r5, #0]
10002998:	60bb      	str	r3, [r7, #8]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
1000299a:	1c43      	adds	r3, r0, #1
1000299c:	d03b      	beq.n	10002a16 <sys_clock_set_timeout+0xa6>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
1000299e:	2600      	movs	r6, #0
100029a0:	2801      	cmp	r0, #1
100029a2:	dd04      	ble.n	100029ae <sys_clock_set_timeout+0x3e>
100029a4:	4b2d      	ldr	r3, [pc, #180]	; (10002a5c <sys_clock_set_timeout+0xec>)
100029a6:	001e      	movs	r6, r3
100029a8:	4298      	cmp	r0, r3
100029aa:	dc00      	bgt.n	100029ae <sys_clock_set_timeout+0x3e>
100029ac:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
100029ae:	f3ef 8310 	mrs	r3, PRIMASK
100029b2:	b672      	cpsid	i
100029b4:	607b      	str	r3, [r7, #4]
	uint32_t pending = elapsed();
100029b6:	f7ff ff79 	bl	100028ac <elapsed>
	val1 = SysTick->VAL;
100029ba:	68a3      	ldr	r3, [r4, #8]
100029bc:	613b      	str	r3, [r7, #16]
	cycle_count += pending;
100029be:	4b28      	ldr	r3, [pc, #160]	; (10002a60 <sys_clock_set_timeout+0xf0>)
100029c0:	681a      	ldr	r2, [r3, #0]
100029c2:	1882      	adds	r2, r0, r2
100029c4:	601a      	str	r2, [r3, #0]
100029c6:	617a      	str	r2, [r7, #20]
	overflow_cyc = 0U;
100029c8:	2200      	movs	r2, #0
100029ca:	4b26      	ldr	r3, [pc, #152]	; (10002a64 <sys_clock_set_timeout+0xf4>)
100029cc:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
100029ce:	4b26      	ldr	r3, [pc, #152]	; (10002a68 <sys_clock_set_timeout+0xf8>)
100029d0:	681b      	ldr	r3, [r3, #0]
100029d2:	60fb      	str	r3, [r7, #12]
100029d4:	68fa      	ldr	r2, [r7, #12]
100029d6:	697b      	ldr	r3, [r7, #20]
100029d8:	1a98      	subs	r0, r3, r2
	if ((int32_t)unannounced < 0) {
100029da:	d51e      	bpl.n	10002a1a <sys_clock_set_timeout+0xaa>
		last_load = MIN_DELAY;
100029dc:	2380      	movs	r3, #128	; 0x80
100029de:	00db      	lsls	r3, r3, #3
100029e0:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
100029e2:	4a1d      	ldr	r2, [pc, #116]	; (10002a58 <sys_clock_set_timeout+0xe8>)
	val2 = SysTick->VAL;
100029e4:	68a3      	ldr	r3, [r4, #8]
	SysTick->LOAD = last_load - 1;
100029e6:	6812      	ldr	r2, [r2, #0]
100029e8:	3a01      	subs	r2, #1
100029ea:	6062      	str	r2, [r4, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
100029ec:	2200      	movs	r2, #0
100029ee:	60a2      	str	r2, [r4, #8]
	if (val1 < val2) {
100029f0:	693a      	ldr	r2, [r7, #16]
100029f2:	429a      	cmp	r2, r3
100029f4:	d22b      	bcs.n	10002a4e <sys_clock_set_timeout+0xde>
		cycle_count += (val1 + (last_load_ - val2));
100029f6:	6939      	ldr	r1, [r7, #16]
100029f8:	68ba      	ldr	r2, [r7, #8]
100029fa:	468c      	mov	ip, r1
100029fc:	4462      	add	r2, ip
100029fe:	1ad0      	subs	r0, r2, r3
		cycle_count += (val1 - val2);
10002a00:	697b      	ldr	r3, [r7, #20]
10002a02:	18c0      	adds	r0, r0, r3
10002a04:	4b16      	ldr	r3, [pc, #88]	; (10002a60 <sys_clock_set_timeout+0xf0>)
10002a06:	6018      	str	r0, [r3, #0]
	if (key != 0U) {
10002a08:	687b      	ldr	r3, [r7, #4]
10002a0a:	2b00      	cmp	r3, #0
10002a0c:	d1c0      	bne.n	10002990 <sys_clock_set_timeout+0x20>
	__asm__ volatile(
10002a0e:	b662      	cpsie	i
10002a10:	f3bf 8f6f 	isb	sy
10002a14:	e7bc      	b.n	10002990 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
10002a16:	4811      	ldr	r0, [pc, #68]	; (10002a5c <sys_clock_set_timeout+0xec>)
10002a18:	e7c8      	b.n	100029ac <sys_clock_set_timeout+0x3c>
		delay = ticks * CYC_PER_TICK;
10002a1a:	4d14      	ldr	r5, [pc, #80]	; (10002a6c <sys_clock_set_timeout+0xfc>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10002a1c:	4b14      	ldr	r3, [pc, #80]	; (10002a70 <sys_clock_set_timeout+0x100>)
		delay = ticks * CYC_PER_TICK;
10002a1e:	436e      	muls	r6, r5
		delay += unannounced;
10002a20:	1980      	adds	r0, r0, r6
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10002a22:	0029      	movs	r1, r5
10002a24:	18c0      	adds	r0, r0, r3
10002a26:	f7fd fbc9 	bl	100001bc <__udivsi3>
		delay -= unannounced;
10002a2a:	697a      	ldr	r2, [r7, #20]
10002a2c:	68fb      	ldr	r3, [r7, #12]
		delay =
10002a2e:	4345      	muls	r5, r0
		delay -= unannounced;
10002a30:	1a9b      	subs	r3, r3, r2
		delay = MAX(delay, MIN_DELAY);
10002a32:	2280      	movs	r2, #128	; 0x80
		delay -= unannounced;
10002a34:	195d      	adds	r5, r3, r5
		delay = MAX(delay, MIN_DELAY);
10002a36:	00d2      	lsls	r2, r2, #3
10002a38:	4b07      	ldr	r3, [pc, #28]	; (10002a58 <sys_clock_set_timeout+0xe8>)
10002a3a:	4295      	cmp	r5, r2
10002a3c:	d904      	bls.n	10002a48 <sys_clock_set_timeout+0xd8>
		if (delay > MAX_CYCLES) {
10002a3e:	4a0d      	ldr	r2, [pc, #52]	; (10002a74 <sys_clock_set_timeout+0x104>)
10002a40:	4295      	cmp	r5, r2
10002a42:	d902      	bls.n	10002a4a <sys_clock_set_timeout+0xda>
			last_load = MAX_CYCLES;
10002a44:	601a      	str	r2, [r3, #0]
10002a46:	e7cc      	b.n	100029e2 <sys_clock_set_timeout+0x72>
		delay = MAX(delay, MIN_DELAY);
10002a48:	0015      	movs	r5, r2
			last_load = delay;
10002a4a:	601d      	str	r5, [r3, #0]
10002a4c:	e7c9      	b.n	100029e2 <sys_clock_set_timeout+0x72>
		cycle_count += (val1 - val2);
10002a4e:	693a      	ldr	r2, [r7, #16]
10002a50:	1ad0      	subs	r0, r2, r3
10002a52:	e7d5      	b.n	10002a00 <sys_clock_set_timeout+0x90>
10002a54:	e000e010 	.word	0xe000e010
10002a58:	2000047c 	.word	0x2000047c
10002a5c:	0000053d 	.word	0x0000053d
10002a60:	20000478 	.word	0x20000478
10002a64:	20000480 	.word	0x20000480
10002a68:	20000474 	.word	0x20000474
10002a6c:	000030d4 	.word	0x000030d4
10002a70:	000030d3 	.word	0x000030d3
10002a74:	00ffc684 	.word	0x00ffc684

10002a78 <sys_clock_elapsed>:
{
10002a78:	b5b0      	push	{r4, r5, r7, lr}
10002a7a:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10002a7c:	f3ef 8410 	mrs	r4, PRIMASK
10002a80:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
10002a82:	f7ff ff13 	bl	100028ac <elapsed>
10002a86:	4b08      	ldr	r3, [pc, #32]	; (10002aa8 <sys_clock_elapsed+0x30>)
10002a88:	4a08      	ldr	r2, [pc, #32]	; (10002aac <sys_clock_elapsed+0x34>)
10002a8a:	681b      	ldr	r3, [r3, #0]
10002a8c:	6812      	ldr	r2, [r2, #0]
10002a8e:	1a9b      	subs	r3, r3, r2
10002a90:	1818      	adds	r0, r3, r0
	if (key != 0U) {
10002a92:	2c00      	cmp	r4, #0
10002a94:	d102      	bne.n	10002a9c <sys_clock_elapsed+0x24>
	__asm__ volatile(
10002a96:	b662      	cpsie	i
10002a98:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
10002a9c:	4904      	ldr	r1, [pc, #16]	; (10002ab0 <sys_clock_elapsed+0x38>)
10002a9e:	f7fd fb8d 	bl	100001bc <__udivsi3>
}
10002aa2:	46bd      	mov	sp, r7
10002aa4:	bdb0      	pop	{r4, r5, r7, pc}
10002aa6:	46c0      	nop			; (mov r8, r8)
10002aa8:	20000478 	.word	0x20000478
10002aac:	20000474 	.word	0x20000474
10002ab0:	000030d4 	.word	0x000030d4

10002ab4 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
10002ab4:	b5b0      	push	{r4, r5, r7, lr}
	*state = &config->states[0];
10002ab6:	6803      	ldr	r3, [r0, #0]
{
10002ab8:	af00      	add	r7, sp, #0
	*state = &config->states[0];
10002aba:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
10002abc:	7904      	ldrb	r4, [r0, #4]
10002abe:	4b0a      	ldr	r3, [pc, #40]	; (10002ae8 <pinctrl_lookup_state+0x34>)
10002ac0:	18e4      	adds	r4, r4, r3
10002ac2:	00e4      	lsls	r4, r4, #3
10002ac4:	6805      	ldr	r5, [r0, #0]
10002ac6:	6813      	ldr	r3, [r2, #0]
10002ac8:	192d      	adds	r5, r5, r4
10002aca:	42ab      	cmp	r3, r5
10002acc:	d903      	bls.n	10002ad6 <pinctrl_lookup_state+0x22>
		}

		(*state)++;
	}

	return -ENOENT;
10002ace:	2002      	movs	r0, #2
10002ad0:	4240      	negs	r0, r0
}
10002ad2:	46bd      	mov	sp, r7
10002ad4:	bdb0      	pop	{r4, r5, r7, pc}
		if (id == (*state)->id) {
10002ad6:	795d      	ldrb	r5, [r3, #5]
10002ad8:	428d      	cmp	r5, r1
10002ada:	d002      	beq.n	10002ae2 <pinctrl_lookup_state+0x2e>
		(*state)++;
10002adc:	3308      	adds	r3, #8
10002ade:	6013      	str	r3, [r2, #0]
10002ae0:	e7f0      	b.n	10002ac4 <pinctrl_lookup_state+0x10>
			return 0;
10002ae2:	2000      	movs	r0, #0
10002ae4:	e7f5      	b.n	10002ad2 <pinctrl_lookup_state+0x1e>
10002ae6:	46c0      	nop			; (mov r8, r8)
10002ae8:	1fffffff 	.word	0x1fffffff

10002aec <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10002aec:	b5f0      	push	{r4, r5, r6, r7, lr}
10002aee:	b087      	sub	sp, #28
10002af0:	af00      	add	r7, sp, #0
10002af2:	607a      	str	r2, [r7, #4]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10002af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10002af6:	0005      	movs	r5, r0
10002af8:	6179      	str	r1, [r7, #20]
        return false;
10002afa:	2000      	movs	r0, #0
    if (freq > src_freq)
10002afc:	429a      	cmp	r2, r3
10002afe:	d842      	bhi.n	10002b86 <clock_configure+0x9a>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10002b00:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10002b02:	0e1a      	lsrs	r2, r3, #24
10002b04:	021b      	lsls	r3, r3, #8
10002b06:	60ba      	str	r2, [r7, #8]
10002b08:	60fb      	str	r3, [r7, #12]
10002b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10002b0c:	0003      	movs	r3, r0
10002b0e:	68b9      	ldr	r1, [r7, #8]
10002b10:	68f8      	ldr	r0, [r7, #12]
10002b12:	f7fd fbf7 	bl	10000304 <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10002b16:	436c      	muls	r4, r5
10002b18:	4b2a      	ldr	r3, [pc, #168]	; (10002bc4 <clock_configure+0xd8>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10002b1a:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10002b1c:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10002b1e:	6863      	ldr	r3, [r4, #4]
10002b20:	4283      	cmp	r3, r0
10002b22:	d200      	bcs.n	10002b26 <clock_configure+0x3a>
        clock->div = div;
10002b24:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10002b26:	1f2b      	subs	r3, r5, #4
10002b28:	b2db      	uxtb	r3, r3
10002b2a:	613b      	str	r3, [r7, #16]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002b2c:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10002b2e:	693a      	ldr	r2, [r7, #16]
10002b30:	019b      	lsls	r3, r3, #6
10002b32:	4323      	orrs	r3, r4
10002b34:	2a01      	cmp	r2, #1
10002b36:	d829      	bhi.n	10002b8c <clock_configure+0xa0>
10002b38:	697a      	ldr	r2, [r7, #20]
10002b3a:	2a01      	cmp	r2, #1
10002b3c:	d126      	bne.n	10002b8c <clock_configure+0xa0>
10002b3e:	3202      	adds	r2, #2
10002b40:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
10002b42:	68a3      	ldr	r3, [r4, #8]
10002b44:	697a      	ldr	r2, [r7, #20]
10002b46:	4213      	tst	r3, r2
10002b48:	d0fb      	beq.n	10002b42 <clock_configure+0x56>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10002b4a:	687a      	ldr	r2, [r7, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002b4c:	6823      	ldr	r3, [r4, #0]
10002b4e:	0152      	lsls	r2, r2, #5
10002b50:	405a      	eors	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002b52:	2180      	movs	r1, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002b54:	23e0      	movs	r3, #224	; 0xe0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002b56:	0149      	lsls	r1, r1, #5
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002b58:	401a      	ands	r2, r3
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
10002b5a:	693b      	ldr	r3, [r7, #16]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002b5c:	4321      	orrs	r1, r4
10002b5e:	600a      	str	r2, [r1, #0]
10002b60:	2b01      	cmp	r3, #1
10002b62:	d922      	bls.n	10002baa <clock_configure+0xbe>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002b64:	2380      	movs	r3, #128	; 0x80
10002b66:	2280      	movs	r2, #128	; 0x80
10002b68:	019b      	lsls	r3, r3, #6
10002b6a:	4323      	orrs	r3, r4
10002b6c:	0112      	lsls	r2, r2, #4
10002b6e:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10002b70:	68f8      	ldr	r0, [r7, #12]
10002b72:	2300      	movs	r3, #0
10002b74:	0032      	movs	r2, r6
10002b76:	68b9      	ldr	r1, [r7, #8]
    clock->div = div;
10002b78:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10002b7a:	f7fd fbc3 	bl	10000304 <__aeabi_uldivmod>
10002b7e:	4b12      	ldr	r3, [pc, #72]	; (10002bc8 <clock_configure+0xdc>)
10002b80:	00ad      	lsls	r5, r5, #2
10002b82:	5158      	str	r0, [r3, r5]
10002b84:	2001      	movs	r0, #1

    return true;
}
10002b86:	46bd      	mov	sp, r7
10002b88:	b007      	add	sp, #28
10002b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002b8c:	2280      	movs	r2, #128	; 0x80
10002b8e:	0112      	lsls	r2, r2, #4
10002b90:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
10002b92:	4b0d      	ldr	r3, [pc, #52]	; (10002bc8 <clock_configure+0xdc>)
10002b94:	00aa      	lsls	r2, r5, #2
10002b96:	58d1      	ldr	r1, [r2, r3]
10002b98:	2900      	cmp	r1, #0
10002b9a:	d0d6      	beq.n	10002b4a <clock_configure+0x5e>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10002b9c:	6958      	ldr	r0, [r3, #20]
10002b9e:	f7fd fb0d 	bl	100001bc <__udivsi3>
10002ba2:	3001      	adds	r0, #1
            asm volatile (
10002ba4:	3801      	subs	r0, #1
10002ba6:	d1fd      	bne.n	10002ba4 <clock_configure+0xb8>
10002ba8:	e7cf      	b.n	10002b4a <clock_configure+0x5e>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002baa:	6823      	ldr	r3, [r4, #0]
10002bac:	697a      	ldr	r2, [r7, #20]
10002bae:	4053      	eors	r3, r2
10002bb0:	2203      	movs	r2, #3
10002bb2:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002bb4:	600b      	str	r3, [r1, #0]
10002bb6:	2301      	movs	r3, #1
10002bb8:	697a      	ldr	r2, [r7, #20]
10002bba:	4093      	lsls	r3, r2
        while (!(clock->selected & (1u << src)))
10002bbc:	68a2      	ldr	r2, [r4, #8]
10002bbe:	4213      	tst	r3, r2
10002bc0:	d0fc      	beq.n	10002bbc <clock_configure+0xd0>
10002bc2:	e7cf      	b.n	10002b64 <clock_configure+0x78>
10002bc4:	40008000 	.word	0x40008000
10002bc8:	20000484 	.word	0x20000484

10002bcc <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10002bcc:	b5b3      	push	{r0, r1, r4, r5, r7, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
10002bce:	200c      	movs	r0, #12
void clocks_init(void) {
10002bd0:	af02      	add	r7, sp, #8
    watchdog_start_tick(XOSC_MHZ);
10002bd2:	f000 f8e5 	bl	10002da0 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10002bd6:	f000 f8ef 	bl	10002db8 <running_on_fpga>
10002bda:	2800      	cmp	r0, #0
10002bdc:	d00b      	beq.n	10002bf6 <clocks_init+0x2a>
        for (uint i = 0; i < CLK_COUNT; i++) {
10002bde:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
10002be0:	4a2b      	ldr	r2, [pc, #172]	; (10002c90 <clocks_init+0xc4>)
10002be2:	482c      	ldr	r0, [pc, #176]	; (10002c94 <clocks_init+0xc8>)
10002be4:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
10002be6:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
10002be8:	5088      	str	r0, [r1, r2]
        for (uint i = 0; i < CLK_COUNT; i++) {
10002bea:	2b0a      	cmp	r3, #10
10002bec:	d1fa      	bne.n	10002be4 <clocks_init+0x18>
        }
        configured_freq[clk_rtc] = 46875;
10002bee:	4b2a      	ldr	r3, [pc, #168]	; (10002c98 <clocks_init+0xcc>)
10002bf0:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
10002bf2:	46bd      	mov	sp, r7
10002bf4:	bdb0      	pop	{r4, r5, r7, pc}
    clocks_hw->resus.ctrl = 0;
10002bf6:	4d29      	ldr	r5, [pc, #164]	; (10002c9c <clocks_init+0xd0>)
10002bf8:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
10002bfa:	f000 f8bb 	bl	10002d74 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002bfe:	2201      	movs	r2, #1
10002c00:	4b27      	ldr	r3, [pc, #156]	; (10002ca0 <clocks_init+0xd4>)
10002c02:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10002c04:	6c6b      	ldr	r3, [r5, #68]	; 0x44
10002c06:	2b01      	cmp	r3, #1
10002c08:	d1fc      	bne.n	10002c04 <clocks_init+0x38>
10002c0a:	2203      	movs	r2, #3
10002c0c:	4b25      	ldr	r3, [pc, #148]	; (10002ca4 <clocks_init+0xd8>)
10002c0e:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10002c10:	6bac      	ldr	r4, [r5, #56]	; 0x38
10002c12:	2c01      	cmp	r4, #1
10002c14:	d1fc      	bne.n	10002c10 <clocks_init+0x44>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
10002c16:	2502      	movs	r5, #2
10002c18:	0021      	movs	r1, r4
10002c1a:	9500      	str	r5, [sp, #0]
10002c1c:	2306      	movs	r3, #6
10002c1e:	4a22      	ldr	r2, [pc, #136]	; (10002ca8 <clocks_init+0xdc>)
10002c20:	4822      	ldr	r0, [pc, #136]	; (10002cac <clocks_init+0xe0>)
10002c22:	f000 f857 	bl	10002cd4 <pll_init>
    pll_init(pll_usb, 1, 480 * PICO_MHZ, 5, 2);
10002c26:	0021      	movs	r1, r4
10002c28:	9500      	str	r5, [sp, #0]
10002c2a:	2305      	movs	r3, #5
10002c2c:	4a20      	ldr	r2, [pc, #128]	; (10002cb0 <clocks_init+0xe4>)
10002c2e:	4821      	ldr	r0, [pc, #132]	; (10002cb4 <clocks_init+0xe8>)
10002c30:	f000 f850 	bl	10002cd4 <pll_init>
    clock_configure(clk_ref,
10002c34:	4b20      	ldr	r3, [pc, #128]	; (10002cb8 <clocks_init+0xec>)
10002c36:	0029      	movs	r1, r5
    clock_configure(clk_sys,
10002c38:	4d20      	ldr	r5, [pc, #128]	; (10002cbc <clocks_init+0xf0>)
    clock_configure(clk_ref,
10002c3a:	9300      	str	r3, [sp, #0]
10002c3c:	2200      	movs	r2, #0
10002c3e:	2004      	movs	r0, #4
10002c40:	f7ff ff54 	bl	10002aec <clock_configure>
    clock_configure(clk_sys,
10002c44:	002b      	movs	r3, r5
10002c46:	0021      	movs	r1, r4
10002c48:	2200      	movs	r2, #0
10002c4a:	9500      	str	r5, [sp, #0]
10002c4c:	2005      	movs	r0, #5
10002c4e:	f7ff ff4d 	bl	10002aec <clock_configure>
    clock_configure(clk_usb,
10002c52:	2200      	movs	r2, #0
10002c54:	4c0f      	ldr	r4, [pc, #60]	; (10002c94 <clocks_init+0xc8>)
10002c56:	0011      	movs	r1, r2
10002c58:	0023      	movs	r3, r4
10002c5a:	9400      	str	r4, [sp, #0]
10002c5c:	2007      	movs	r0, #7
10002c5e:	f7ff ff45 	bl	10002aec <clock_configure>
    clock_configure(clk_adc,
10002c62:	2200      	movs	r2, #0
10002c64:	0023      	movs	r3, r4
10002c66:	0011      	movs	r1, r2
10002c68:	9400      	str	r4, [sp, #0]
10002c6a:	2008      	movs	r0, #8
10002c6c:	f7ff ff3e 	bl	10002aec <clock_configure>
    clock_configure(clk_rtc,
10002c70:	2200      	movs	r2, #0
10002c72:	4b09      	ldr	r3, [pc, #36]	; (10002c98 <clocks_init+0xcc>)
10002c74:	0011      	movs	r1, r2
10002c76:	9300      	str	r3, [sp, #0]
10002c78:	2009      	movs	r0, #9
10002c7a:	0023      	movs	r3, r4
10002c7c:	f7ff ff36 	bl	10002aec <clock_configure>
    clock_configure(clk_peri,
10002c80:	2200      	movs	r2, #0
10002c82:	002b      	movs	r3, r5
10002c84:	0011      	movs	r1, r2
10002c86:	9500      	str	r5, [sp, #0]
10002c88:	2006      	movs	r0, #6
10002c8a:	f7ff ff2f 	bl	10002aec <clock_configure>
10002c8e:	e7b0      	b.n	10002bf2 <clocks_init+0x26>
10002c90:	20000484 	.word	0x20000484
10002c94:	02dc6c00 	.word	0x02dc6c00
10002c98:	0000b71b 	.word	0x0000b71b
10002c9c:	40008000 	.word	0x40008000
10002ca0:	4000b03c 	.word	0x4000b03c
10002ca4:	4000b030 	.word	0x4000b030
10002ca8:	59682f00 	.word	0x59682f00
10002cac:	40028000 	.word	0x40028000
10002cb0:	1c9c3800 	.word	0x1c9c3800
10002cb4:	4002c000 	.word	0x4002c000
10002cb8:	00b71b00 	.word	0x00b71b00
10002cbc:	07735940 	.word	0x07735940

10002cc0 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
10002cc0:	b580      	push	{r7, lr}
10002cc2:	af00      	add	r7, sp, #0
    return configured_freq[clk_index];
}
10002cc4:	46bd      	mov	sp, r7
    return configured_freq[clk_index];
10002cc6:	4b02      	ldr	r3, [pc, #8]	; (10002cd0 <clock_get_hz+0x10>)
10002cc8:	0080      	lsls	r0, r0, #2
10002cca:	58c0      	ldr	r0, [r0, r3]
}
10002ccc:	bd80      	pop	{r7, pc}
10002cce:	46c0      	nop			; (mov r8, r8)
10002cd0:	20000484 	.word	0x20000484

10002cd4 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10002cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002cd6:	0004      	movs	r4, r0
10002cd8:	af00      	add	r7, sp, #0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10002cda:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10002cdc:	0016      	movs	r6, r2
10002cde:	607b      	str	r3, [r7, #4]
10002ce0:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10002ce2:	f7fd fa6b 	bl	100001bc <__udivsi3>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
10002ce6:	491e      	ldr	r1, [pc, #120]	; (10002d60 <pll_init+0x8c>)
10002ce8:	4341      	muls	r1, r0
10002cea:	0030      	movs	r0, r6
10002cec:	f7fd fa66 	bl	100001bc <__udivsi3>

    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10002cf0:	687b      	ldr	r3, [r7, #4]
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10002cf2:	6a3a      	ldr	r2, [r7, #32]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10002cf4:	041b      	lsls	r3, r3, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10002cf6:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10002cf8:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10002cfa:	6822      	ldr	r2, [r4, #0]
10002cfc:	2a00      	cmp	r2, #0
10002cfe:	da0c      	bge.n	10002d1a <pll_init+0x46>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10002d00:	213f      	movs	r1, #63	; 0x3f
10002d02:	6822      	ldr	r2, [r4, #0]
10002d04:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10002d06:	42aa      	cmp	r2, r5
10002d08:	d107      	bne.n	10002d1a <pll_init+0x46>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10002d0a:	68a2      	ldr	r2, [r4, #8]
10002d0c:	0512      	lsls	r2, r2, #20
10002d0e:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10002d10:	4282      	cmp	r2, r0
10002d12:	d102      	bne.n	10002d1a <pll_init+0x46>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS & PLL_PRIM_POSTDIV2_BITS)))) {
10002d14:	68e2      	ldr	r2, [r4, #12]
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10002d16:	2b00      	cmp	r3, #0
10002d18:	d01d      	beq.n	10002d56 <pll_init+0x82>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10002d1a:	4a12      	ldr	r2, [pc, #72]	; (10002d64 <pll_init+0x90>)
10002d1c:	4294      	cmp	r4, r2
10002d1e:	d01c      	beq.n	10002d5a <pll_init+0x86>
10002d20:	2280      	movs	r2, #128	; 0x80
10002d22:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002d24:	4910      	ldr	r1, [pc, #64]	; (10002d68 <pll_init+0x94>)
10002d26:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002d28:	4910      	ldr	r1, [pc, #64]	; (10002d6c <pll_init+0x98>)
10002d2a:	600a      	str	r2, [r1, #0]
10002d2c:	4910      	ldr	r1, [pc, #64]	; (10002d70 <pll_init+0x9c>)
10002d2e:	468c      	mov	ip, r1
10002d30:	4661      	mov	r1, ip
10002d32:	0016      	movs	r6, r2
10002d34:	6889      	ldr	r1, [r1, #8]
10002d36:	438e      	bics	r6, r1
10002d38:	d1fa      	bne.n	10002d30 <pll_init+0x5c>
10002d3a:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10002d3c:	1d21      	adds	r1, r4, #4
10002d3e:	0192      	lsls	r2, r2, #6
10002d40:	430a      	orrs	r2, r1
10002d42:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
10002d44:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
10002d46:	60a0      	str	r0, [r4, #8]
10002d48:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10002d4a:	6821      	ldr	r1, [r4, #0]
10002d4c:	2900      	cmp	r1, #0
10002d4e:	dafc      	bge.n	10002d4a <pll_init+0x76>

    // Set up post dividers
    pll->prim = pdiv;
10002d50:	60e3      	str	r3, [r4, #12]
10002d52:	2308      	movs	r3, #8
10002d54:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10002d56:	46bd      	mov	sp, r7
10002d58:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10002d5a:	2280      	movs	r2, #128	; 0x80
10002d5c:	0192      	lsls	r2, r2, #6
10002d5e:	e7e1      	b.n	10002d24 <pll_init+0x50>
10002d60:	000f4240 	.word	0x000f4240
10002d64:	4002c000 	.word	0x4002c000
10002d68:	4000e000 	.word	0x4000e000
10002d6c:	4000f000 	.word	0x4000f000
10002d70:	4000c000 	.word	0x4000c000

10002d74 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10002d74:	22aa      	movs	r2, #170	; 0xaa
10002d76:	4b07      	ldr	r3, [pc, #28]	; (10002d94 <xosc_init+0x20>)
10002d78:	0112      	lsls	r2, r2, #4
void xosc_init(void) {
10002d7a:	b580      	push	{r7, lr}
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10002d7c:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
10002d7e:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002d80:	4905      	ldr	r1, [pc, #20]	; (10002d98 <xosc_init+0x24>)
10002d82:	60da      	str	r2, [r3, #12]
10002d84:	4a05      	ldr	r2, [pc, #20]	; (10002d9c <xosc_init+0x28>)
void xosc_init(void) {
10002d86:	af00      	add	r7, sp, #0
10002d88:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10002d8a:	685a      	ldr	r2, [r3, #4]
10002d8c:	2a00      	cmp	r2, #0
10002d8e:	dafc      	bge.n	10002d8a <xosc_init+0x16>
}
10002d90:	46bd      	mov	sp, r7
10002d92:	bd80      	pop	{r7, pc}
10002d94:	40024000 	.word	0x40024000
10002d98:	00fab000 	.word	0x00fab000
10002d9c:	40026000 	.word	0x40026000

10002da0 <watchdog_start_tick>:
#include "hardware/watchdog.h"
#include "hardware/structs/watchdog.h"
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
10002da0:	b580      	push	{r7, lr}
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10002da2:	2380      	movs	r3, #128	; 0x80
void watchdog_start_tick(uint cycles) {
10002da4:	af00      	add	r7, sp, #0
}
10002da6:	46bd      	mov	sp, r7
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10002da8:	4a02      	ldr	r2, [pc, #8]	; (10002db4 <watchdog_start_tick+0x14>)
10002daa:	009b      	lsls	r3, r3, #2
10002dac:	4303      	orrs	r3, r0
10002dae:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10002db0:	bd80      	pop	{r7, pc}
10002db2:	46c0      	nop			; (mov r8, r8)
10002db4:	40058000 	.word	0x40058000

10002db8 <running_on_fpga>:
// (mainly clock generators and oscillators) that aren't present on FPGA.

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
10002db8:	b580      	push	{r7, lr}
10002dba:	af00      	add	r7, sp, #0
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
}
10002dbc:	46bd      	mov	sp, r7
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10002dbe:	4b02      	ldr	r3, [pc, #8]	; (10002dc8 <running_on_fpga+0x10>)
10002dc0:	6818      	ldr	r0, [r3, #0]
10002dc2:	0780      	lsls	r0, r0, #30
10002dc4:	0fc0      	lsrs	r0, r0, #31
}
10002dc6:	bd80      	pop	{r7, pc}
10002dc8:	4006c000 	.word	0x4006c000

10002dcc <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
10002dcc:	4b09      	ldr	r3, [pc, #36]	; (10002df4 <gpio_set_function+0x28>)
10002dce:	0082      	lsls	r2, r0, #2
10002dd0:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002dd2:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
10002dd4:	b590      	push	{r4, r7, lr}
10002dd6:	6814      	ldr	r4, [r2, #0]
10002dd8:	af00      	add	r7, sp, #0
10002dda:	4063      	eors	r3, r4
10002ddc:	24c0      	movs	r4, #192	; 0xc0
10002dde:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002de0:	2480      	movs	r4, #128	; 0x80
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
}
10002de2:	46bd      	mov	sp, r7
10002de4:	0164      	lsls	r4, r4, #5
10002de6:	4322      	orrs	r2, r4
10002de8:	6013      	str	r3, [r2, #0]
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10002dea:	4b03      	ldr	r3, [pc, #12]	; (10002df8 <gpio_set_function+0x2c>)
10002dec:	00c0      	lsls	r0, r0, #3
10002dee:	18c0      	adds	r0, r0, r3
10002df0:	6041      	str	r1, [r0, #4]
}
10002df2:	bd90      	pop	{r4, r7, pc}
10002df4:	4001c004 	.word	0x4001c004
10002df8:	40014000 	.word	0x40014000

10002dfc <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
10002dfc:	4b0a      	ldr	r3, [pc, #40]	; (10002e28 <gpio_set_pulls+0x2c>)
10002dfe:	0080      	lsls	r0, r0, #2
10002e00:	18c0      	adds	r0, r0, r3
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
10002e02:	1e4b      	subs	r3, r1, #1
10002e04:	4199      	sbcs	r1, r3
10002e06:	1e53      	subs	r3, r2, #1
10002e08:	419a      	sbcs	r2, r3
void gpio_set_pulls(uint gpio, bool up, bool down) {
10002e0a:	b580      	push	{r7, lr}
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002e0c:	6803      	ldr	r3, [r0, #0]
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
10002e0e:	0092      	lsls	r2, r2, #2
10002e10:	00c9      	lsls	r1, r1, #3
    hw_write_masked(
10002e12:	4311      	orrs	r1, r2
10002e14:	4059      	eors	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002e16:	2380      	movs	r3, #128	; 0x80
void gpio_set_pulls(uint gpio, bool up, bool down) {
10002e18:	af00      	add	r7, sp, #0
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002e1a:	220c      	movs	r2, #12
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10002e1c:	46bd      	mov	sp, r7
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002e1e:	015b      	lsls	r3, r3, #5
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002e20:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002e22:	4318      	orrs	r0, r3
10002e24:	6001      	str	r1, [r0, #0]
10002e26:	bd80      	pop	{r7, pc}
10002e28:	4001c004 	.word	0x4001c004

10002e2c <gpio_set_input_hysteresis_enabled>:
                   value << IO_BANK0_GPIO0_CTRL_OEOVER_LSB,
                   IO_BANK0_GPIO0_CTRL_OEOVER_BITS
    );
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
10002e2c:	b580      	push	{r7, lr}
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
10002e2e:	4b07      	ldr	r3, [pc, #28]	; (10002e4c <gpio_set_input_hysteresis_enabled+0x20>)
10002e30:	0080      	lsls	r0, r0, #2
10002e32:	18c0      	adds	r0, r0, r3
10002e34:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002e36:	2380      	movs	r3, #128	; 0x80
void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
10002e38:	af00      	add	r7, sp, #0
    if (enabled)
10002e3a:	2900      	cmp	r1, #0
10002e3c:	d100      	bne.n	10002e40 <gpio_set_input_hysteresis_enabled+0x14>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002e3e:	23c0      	movs	r3, #192	; 0xc0
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
10002e40:	46bd      	mov	sp, r7
10002e42:	019b      	lsls	r3, r3, #6
10002e44:	4318      	orrs	r0, r3
10002e46:	6002      	str	r2, [r0, #0]
10002e48:	bd80      	pop	{r7, pc}
10002e4a:	46c0      	nop			; (mov r8, r8)
10002e4c:	4001c004 	.word	0x4001c004

10002e50 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
10002e50:	4b07      	ldr	r3, [pc, #28]	; (10002e70 <gpio_set_slew_rate+0x20>)
10002e52:	0080      	lsls	r0, r0, #2
10002e54:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002e56:	6803      	ldr	r3, [r0, #0]
void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
10002e58:	b580      	push	{r7, lr}
10002e5a:	4059      	eors	r1, r3
10002e5c:	2301      	movs	r3, #1
10002e5e:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002e60:	2380      	movs	r3, #128	; 0x80
10002e62:	af00      	add	r7, sp, #0
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
10002e64:	46bd      	mov	sp, r7
10002e66:	015b      	lsls	r3, r3, #5
10002e68:	4318      	orrs	r0, r3
10002e6a:	6001      	str	r1, [r0, #0]
10002e6c:	bd80      	pop	{r7, pc}
10002e6e:	46c0      	nop			; (mov r8, r8)
10002e70:	4001c004 	.word	0x4001c004

10002e74 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
10002e74:	4b07      	ldr	r3, [pc, #28]	; (10002e94 <gpio_set_drive_strength+0x20>)
10002e76:	0080      	lsls	r0, r0, #2
10002e78:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002e7a:	6803      	ldr	r3, [r0, #0]
10002e7c:	0109      	lsls	r1, r1, #4
10002e7e:	4059      	eors	r1, r3
10002e80:	2330      	movs	r3, #48	; 0x30
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
10002e82:	b580      	push	{r7, lr}
10002e84:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002e86:	2380      	movs	r3, #128	; 0x80
10002e88:	af00      	add	r7, sp, #0
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
10002e8a:	46bd      	mov	sp, r7
10002e8c:	015b      	lsls	r3, r3, #5
10002e8e:	4318      	orrs	r0, r3
10002e90:	6001      	str	r1, [r0, #0]
10002e92:	bd80      	pop	{r7, pc}
10002e94:	4001c004 	.word	0x4001c004

10002e98 <gpio_acknowledge_irq>:
    io_irq_ctrl_hw_t *irq_ctrl_base = &iobank0_hw->dormant_wake_irq_ctrl;
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    iobank0_hw->intr[gpio / 8] = events << 4 * (gpio % 8);
10002e98:	2207      	movs	r2, #7
void gpio_acknowledge_irq(uint gpio, uint32_t events) {
10002e9a:	b580      	push	{r7, lr}
    iobank0_hw->intr[gpio / 8] = events << 4 * (gpio % 8);
10002e9c:	08c3      	lsrs	r3, r0, #3
10002e9e:	4010      	ands	r0, r2
void gpio_acknowledge_irq(uint gpio, uint32_t events) {
10002ea0:	af00      	add	r7, sp, #0
    iobank0_hw->intr[gpio / 8] = events << 4 * (gpio % 8);
10002ea2:	0080      	lsls	r0, r0, #2
10002ea4:	4081      	lsls	r1, r0
}
10002ea6:	46bd      	mov	sp, r7
    iobank0_hw->intr[gpio / 8] = events << 4 * (gpio % 8);
10002ea8:	4a02      	ldr	r2, [pc, #8]	; (10002eb4 <gpio_acknowledge_irq+0x1c>)
10002eaa:	333c      	adds	r3, #60	; 0x3c
10002eac:	009b      	lsls	r3, r3, #2
10002eae:	5099      	str	r1, [r3, r2]
}
10002eb0:	bd80      	pop	{r7, pc}
10002eb2:	46c0      	nop			; (mov r8, r8)
10002eb4:	40014000 	.word	0x40014000

10002eb8 <gpio_set_irq_enabled>:
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10002eb8:	23d0      	movs	r3, #208	; 0xd0
10002eba:	061b      	lsls	r3, r3, #24
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10002ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10002ebe:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10002ec0:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10002ec2:	1e63      	subs	r3, r4, #1
10002ec4:	419c      	sbcs	r4, r3
10002ec6:	2030      	movs	r0, #48	; 0x30
10002ec8:	4b0d      	ldr	r3, [pc, #52]	; (10002f00 <gpio_set_irq_enabled+0x48>)
10002eca:	4264      	negs	r4, r4
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10002ecc:	af00      	add	r7, sp, #0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10002ece:	4004      	ands	r4, r0
    gpio_acknowledge_irq(gpio, events);
10002ed0:	0028      	movs	r0, r5
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10002ed2:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10002ed4:	000e      	movs	r6, r1
10002ed6:	607a      	str	r2, [r7, #4]
    gpio_acknowledge_irq(gpio, events);
10002ed8:	f7ff ffde 	bl	10002e98 <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
10002edc:	2307      	movs	r3, #7
10002ede:	402b      	ands	r3, r5
10002ee0:	009b      	lsls	r3, r3, #2
10002ee2:	409e      	lsls	r6, r3
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10002ee4:	08ed      	lsrs	r5, r5, #3
    if (enabled)
10002ee6:	687b      	ldr	r3, [r7, #4]
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10002ee8:	00ad      	lsls	r5, r5, #2
10002eea:	1965      	adds	r5, r4, r5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002eec:	2480      	movs	r4, #128	; 0x80
    if (enabled)
10002eee:	2b00      	cmp	r3, #0
10002ef0:	d100      	bne.n	10002ef4 <gpio_set_irq_enabled+0x3c>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002ef2:	24c0      	movs	r4, #192	; 0xc0
}
10002ef4:	46bd      	mov	sp, r7
10002ef6:	01a4      	lsls	r4, r4, #6
10002ef8:	4325      	orrs	r5, r4
10002efa:	602e      	str	r6, [r5, #0]
10002efc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10002efe:	46c0      	nop			; (mov r8, r8)
10002f00:	40014100 	.word	0x40014100

10002f04 <gpio_set_input_enabled>:
#if LIB_PICO_BINARY_INFO
    bi_decl_if_func_used(bi_pin_mask_with_names(DEBUG_PIN_MASK, "Debug"));
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
10002f04:	b580      	push	{r7, lr}
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
10002f06:	4b07      	ldr	r3, [pc, #28]	; (10002f24 <gpio_set_input_enabled+0x20>)
10002f08:	0080      	lsls	r0, r0, #2
10002f0a:	18c0      	adds	r0, r0, r3
10002f0c:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002f0e:	2380      	movs	r3, #128	; 0x80
void gpio_set_input_enabled(uint gpio, bool enabled) {
10002f10:	af00      	add	r7, sp, #0
    if (enabled)
10002f12:	2900      	cmp	r1, #0
10002f14:	d100      	bne.n	10002f18 <gpio_set_input_enabled+0x14>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002f16:	23c0      	movs	r3, #192	; 0xc0
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
10002f18:	46bd      	mov	sp, r7
10002f1a:	019b      	lsls	r3, r3, #6
10002f1c:	4318      	orrs	r0, r3
10002f1e:	6002      	str	r2, [r0, #0]
10002f20:	bd80      	pop	{r7, pc}
10002f22:	46c0      	nop			; (mov r8, r8)
10002f24:	4001c004 	.word	0x4001c004

10002f28 <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002f2a:	0006      	movs	r6, r0
10002f2c:	af00      	add	r7, sp, #0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10002f2e:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10002f30:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10002f32:	f7ff fec5 	bl	10002cc0 <clock_get_hz>
10002f36:	0021      	movs	r1, r4
10002f38:	00c0      	lsls	r0, r0, #3
10002f3a:	f7fd f93f 	bl	100001bc <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
10002f3e:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
10002f40:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
10002f42:	d007      	beq.n	10002f54 <uart_set_baudrate+0x2c>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
10002f44:	4b0e      	ldr	r3, [pc, #56]	; (10002f80 <uart_set_baudrate+0x58>)
10002f46:	429d      	cmp	r5, r3
10002f48:	d816      	bhi.n	10002f78 <uart_set_baudrate+0x50>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
10002f4a:	237f      	movs	r3, #127	; 0x7f
10002f4c:	4018      	ands	r0, r3
10002f4e:	1900      	adds	r0, r0, r4
10002f50:	002c      	movs	r4, r5
10002f52:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002f54:	2080      	movs	r0, #128	; 0x80
10002f56:	2300      	movs	r3, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
10002f58:	6274      	str	r4, [r6, #36]	; 0x24
10002f5a:	0180      	lsls	r0, r0, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
10002f5c:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
10002f5e:	362c      	adds	r6, #44	; 0x2c
10002f60:	4306      	orrs	r6, r0
10002f62:	6033      	str	r3, [r6, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
10002f64:	2006      	movs	r0, #6
10002f66:	f7ff feab 	bl	10002cc0 <clock_get_hz>
10002f6a:	01a1      	lsls	r1, r4, #6
10002f6c:	1949      	adds	r1, r1, r5
10002f6e:	0080      	lsls	r0, r0, #2
10002f70:	f7fd f924 	bl	100001bc <__udivsi3>
}
10002f74:	46bd      	mov	sp, r7
10002f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        baud_fbrd = 0;
10002f78:	2500      	movs	r5, #0
        baud_ibrd = 65535;
10002f7a:	4c02      	ldr	r4, [pc, #8]	; (10002f84 <uart_set_baudrate+0x5c>)
10002f7c:	e7ea      	b.n	10002f54 <uart_set_baudrate+0x2c>
10002f7e:	46c0      	nop			; (mov r8, r8)
10002f80:	0000fffe 	.word	0x0000fffe
10002f84:	0000ffff 	.word	0x0000ffff

10002f88 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
10002f88:	b5b0      	push	{r4, r5, r7, lr}
10002f8a:	0004      	movs	r4, r0
10002f8c:	af00      	add	r7, sp, #0
    if (clock_get_hz(clk_peri) == 0)
10002f8e:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
10002f90:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
10002f92:	f7ff fe95 	bl	10002cc0 <clock_get_hz>
10002f96:	2800      	cmp	r0, #0
10002f98:	d02e      	beq.n	10002ff8 <uart_init+0x70>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10002f9a:	4b1a      	ldr	r3, [pc, #104]	; (10003004 <uart_init+0x7c>)
10002f9c:	429c      	cmp	r4, r3
10002f9e:	d02d      	beq.n	10002ffc <uart_init+0x74>
10002fa0:	2380      	movs	r3, #128	; 0x80
10002fa2:	03db      	lsls	r3, r3, #15
10002fa4:	4a18      	ldr	r2, [pc, #96]	; (10003008 <uart_init+0x80>)
10002fa6:	4919      	ldr	r1, [pc, #100]	; (1000300c <uart_init+0x84>)
10002fa8:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002faa:	4a19      	ldr	r2, [pc, #100]	; (10003010 <uart_init+0x88>)
10002fac:	6013      	str	r3, [r2, #0]
10002fae:	0018      	movs	r0, r3
10002fb0:	688a      	ldr	r2, [r1, #8]
10002fb2:	4390      	bics	r0, r2
10002fb4:	d1fb      	bne.n	10002fae <uart_init+0x26>
 * \param uart UART instance
 * \return Number of UART, 0 or 1.
 */
static inline uint uart_get_index(uart_inst_t *uart) {
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    return uart == uart1 ? 1 : 0;
10002fb6:	4b17      	ldr	r3, [pc, #92]	; (10003014 <uart_init+0x8c>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10002fb8:	2180      	movs	r1, #128	; 0x80
10002fba:	18e3      	adds	r3, r4, r3
10002fbc:	425a      	negs	r2, r3
10002fbe:	4153      	adcs	r3, r2
10002fc0:	4a15      	ldr	r2, [pc, #84]	; (10003018 <uart_init+0x90>)
10002fc2:	005b      	lsls	r3, r3, #1
10002fc4:	0049      	lsls	r1, r1, #1
10002fc6:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
10002fc8:	0020      	movs	r0, r4
10002fca:	0029      	movs	r1, r5
10002fcc:	f7ff ffac 	bl	10002f28 <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002fd0:	2360      	movs	r3, #96	; 0x60
10002fd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 */
static inline void uart_set_format(uart_inst_t *uart, uint data_bits, uint stop_bits, uart_parity_t parity) {
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002fd4:	0021      	movs	r1, r4
10002fd6:	4053      	eors	r3, r2
10002fd8:	226e      	movs	r2, #110	; 0x6e
10002fda:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002fdc:	2280      	movs	r2, #128	; 0x80
10002fde:	312c      	adds	r1, #44	; 0x2c
10002fe0:	0152      	lsls	r2, r2, #5
10002fe2:	430a      	orrs	r2, r1
10002fe4:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
10002fe6:	4b0d      	ldr	r3, [pc, #52]	; (1000301c <uart_init+0x94>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002fe8:	2210      	movs	r2, #16
10002fea:	6323      	str	r3, [r4, #48]	; 0x30
10002fec:	2380      	movs	r3, #128	; 0x80
10002fee:	019b      	lsls	r3, r3, #6
10002ff0:	430b      	orrs	r3, r1
10002ff2:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
10002ff4:	2303      	movs	r3, #3
10002ff6:	64a3      	str	r3, [r4, #72]	; 0x48
}
10002ff8:	46bd      	mov	sp, r7
10002ffa:	bdb0      	pop	{r4, r5, r7, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10002ffc:	2380      	movs	r3, #128	; 0x80
10002ffe:	041b      	lsls	r3, r3, #16
10003000:	e7d0      	b.n	10002fa4 <uart_init+0x1c>
10003002:	46c0      	nop			; (mov r8, r8)
10003004:	40038000 	.word	0x40038000
10003008:	4000e000 	.word	0x4000e000
1000300c:	4000c000 	.word	0x4000c000
10003010:	4000f000 	.word	0x4000f000
10003014:	bffc8000 	.word	0xbffc8000
10003018:	200004e8 	.word	0x200004e8
1000301c:	00000301 	.word	0x00000301

10003020 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
10003020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10003022:	4e12      	ldr	r6, [pc, #72]	; (1000306c <z_sys_init_run_level+0x4c>)
10003024:	0083      	lsls	r3, r0, #2
10003026:	3001      	adds	r0, #1
10003028:	599c      	ldr	r4, [r3, r6]
{
1000302a:	af00      	add	r7, sp, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
1000302c:	0083      	lsls	r3, r0, #2
1000302e:	607b      	str	r3, [r7, #4]
10003030:	687b      	ldr	r3, [r7, #4]
10003032:	58f3      	ldr	r3, [r6, r3]
10003034:	603b      	str	r3, [r7, #0]
10003036:	42a3      	cmp	r3, r4
10003038:	d801      	bhi.n	1000303e <z_sys_init_run_level+0x1e>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
1000303a:	46bd      	mov	sp, r7
1000303c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
1000303e:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
10003040:	6823      	ldr	r3, [r4, #0]
10003042:	0028      	movs	r0, r5
10003044:	4798      	blx	r3
		if (dev != NULL) {
10003046:	2d00      	cmp	r5, #0
10003048:	d00d      	beq.n	10003066 <z_sys_init_run_level+0x46>
				dev->state->init_res = rc;
1000304a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
1000304c:	2800      	cmp	r0, #0
1000304e:	d006      	beq.n	1000305e <z_sys_init_run_level+0x3e>
				dev->state->init_res = rc;
10003050:	17c2      	asrs	r2, r0, #31
10003052:	1880      	adds	r0, r0, r2
10003054:	4050      	eors	r0, r2
10003056:	28ff      	cmp	r0, #255	; 0xff
10003058:	dd00      	ble.n	1000305c <z_sys_init_run_level+0x3c>
1000305a:	20ff      	movs	r0, #255	; 0xff
1000305c:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
1000305e:	2101      	movs	r1, #1
10003060:	785a      	ldrb	r2, [r3, #1]
10003062:	430a      	orrs	r2, r1
10003064:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10003066:	3408      	adds	r4, #8
10003068:	e7e2      	b.n	10003030 <z_sys_init_run_level+0x10>
1000306a:	46c0      	nop			; (mov r8, r8)
1000306c:	10005984 	.word	0x10005984

10003070 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
10003070:	b5b0      	push	{r4, r5, r7, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
10003072:	2401      	movs	r4, #1
10003074:	4b0a      	ldr	r3, [pc, #40]	; (100030a0 <bg_thread_main+0x30>)
{
10003076:	af00      	add	r7, sp, #0

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
10003078:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
1000307a:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
1000307c:	f7ff ffd0 	bl	10003020 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
10003080:	f002 fa32 	bl	100054e8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
10003084:	2003      	movs	r0, #3
10003086:	f7ff ffcb 	bl	10003020 <z_sys_init_run_level>

	z_init_static_threads();
1000308a:	f000 f923 	bl	100032d4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
1000308e:	f7fe fd41 	bl	10001b14 <main>

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
10003092:	46bd      	mov	sp, r7
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
10003094:	4a03      	ldr	r2, [pc, #12]	; (100030a4 <bg_thread_main+0x34>)
10003096:	7b13      	ldrb	r3, [r2, #12]
10003098:	43a3      	bics	r3, r4
1000309a:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
1000309c:	bdb0      	pop	{r4, r5, r7, pc}
1000309e:	46c0      	nop			; (mov r8, r8)
100030a0:	200004ec 	.word	0x200004ec
100030a4:	200002e0 	.word	0x200002e0

100030a8 <z_bss_zero>:
{
100030a8:	b580      	push	{r7, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
100030aa:	4804      	ldr	r0, [pc, #16]	; (100030bc <z_bss_zero+0x14>)
100030ac:	4a04      	ldr	r2, [pc, #16]	; (100030c0 <z_bss_zero+0x18>)
{
100030ae:	af00      	add	r7, sp, #0
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
100030b0:	2100      	movs	r1, #0
100030b2:	1a12      	subs	r2, r2, r0
100030b4:	f002 f853 	bl	1000515e <z_early_memset>
}
100030b8:	46bd      	mov	sp, r7
100030ba:	bd80      	pop	{r7, pc}
100030bc:	20000260 	.word	0x20000260
100030c0:	200004f0 	.word	0x200004f0

100030c4 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
100030c4:	4b14      	ldr	r3, [pc, #80]	; (10003118 <z_init_cpu+0x54>)
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
100030c6:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_thread_stack_t *stack = z_idle_stacks[i];
100030c8:	4914      	ldr	r1, [pc, #80]	; (1000311c <z_init_cpu+0x58>)
{
100030ca:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
100030cc:	01c6      	lsls	r6, r0, #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100030ce:	2518      	movs	r5, #24
	struct k_thread *thread = &z_idle_threads[i];
100030d0:	18f6      	adds	r6, r6, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
100030d2:	0203      	lsls	r3, r0, #8
100030d4:	1859      	adds	r1, r3, r1
	z_setup_new_thread(thread, stack,
100030d6:	2300      	movs	r3, #0
100030d8:	2001      	movs	r0, #1
100030da:	2280      	movs	r2, #128	; 0x80
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100030dc:	4365      	muls	r5, r4
{
100030de:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
100030e0:	9305      	str	r3, [sp, #20]
100030e2:	9302      	str	r3, [sp, #8]
100030e4:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100030e6:	4b0e      	ldr	r3, [pc, #56]	; (10003120 <z_init_cpu+0x5c>)
	z_setup_new_thread(thread, stack,
100030e8:	9004      	str	r0, [sp, #16]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100030ea:	195d      	adds	r5, r3, r5
	z_setup_new_thread(thread, stack,
100030ec:	300e      	adds	r0, #14
{
100030ee:	af06      	add	r7, sp, #24
	z_setup_new_thread(thread, stack,
100030f0:	9500      	str	r5, [sp, #0]
100030f2:	9003      	str	r0, [sp, #12]
100030f4:	4b0b      	ldr	r3, [pc, #44]	; (10003124 <z_init_cpu+0x60>)
100030f6:	0030      	movs	r0, r6
100030f8:	0052      	lsls	r2, r2, #1
100030fa:	f000 f889 	bl	10003210 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
100030fe:	2204      	movs	r2, #4
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
10003100:	46bd      	mov	sp, r7
10003102:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[id].id = id;
10003104:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10003106:	4808      	ldr	r0, [pc, #32]	; (10003128 <z_init_cpu+0x64>)
10003108:	3401      	adds	r4, #1
1000310a:	02e4      	lsls	r4, r4, #11
1000310c:	4393      	bics	r3, r2
1000310e:	1824      	adds	r4, r4, r0
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
10003110:	60ee      	str	r6, [r5, #12]
10003112:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
10003114:	606c      	str	r4, [r5, #4]
}
10003116:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
10003118:	20000260 	.word	0x20000260
1000311c:	200008f0 	.word	0x200008f0
10003120:	200004ac 	.word	0x200004ac
10003124:	100051a1 	.word	0x100051a1
10003128:	200009f0 	.word	0x200009f0

1000312c <z_cstart>:
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
1000312c:	2280      	movs	r2, #128	; 0x80
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
1000312e:	b5f0      	push	{r4, r5, r6, r7, lr}
10003130:	4b24      	ldr	r3, [pc, #144]	; (100031c4 <z_cstart+0x98>)
10003132:	b0a9      	sub	sp, #164	; 0xa4
10003134:	0112      	lsls	r2, r2, #4
10003136:	af06      	add	r7, sp, #24
10003138:	189b      	adds	r3, r3, r2
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
1000313a:	f383 8808 	msr	MSP, r3
1000313e:	4922      	ldr	r1, [pc, #136]	; (100031c8 <z_cstart+0x9c>)
10003140:	4a22      	ldr	r2, [pc, #136]	; (100031cc <z_cstart+0xa0>)
10003142:	6a0b      	ldr	r3, [r1, #32]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
10003144:	2400      	movs	r4, #0
10003146:	401a      	ands	r2, r3
10003148:	23e0      	movs	r3, #224	; 0xe0
1000314a:	041b      	lsls	r3, r3, #16
1000314c:	4313      	orrs	r3, r2
1000314e:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
10003150:	f001 faa7 	bl	100046a2 <z_arm_fault_init>
	z_arm_cpu_idle_init();
10003154:	f7fe fef0 	bl	10001f38 <z_arm_cpu_idle_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
10003158:	2302      	movs	r3, #2
1000315a:	33ff      	adds	r3, #255	; 0xff
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
1000315c:	4e1c      	ldr	r6, [pc, #112]	; (100031d0 <z_cstart+0xa4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
1000315e:	82bb      	strh	r3, [r7, #20]
	_current_cpu->current = dummy_thread;
10003160:	3bf9      	subs	r3, #249	; 0xf9
10003162:	18fb      	adds	r3, r7, r3
10003164:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.start = 0U;
10003166:	66fc      	str	r4, [r7, #108]	; 0x6c
	dummy_thread->stack_info.size = 0U;
10003168:	673c      	str	r4, [r7, #112]	; 0x70
	dummy_thread->resource_pool = NULL;
1000316a:	67bc      	str	r4, [r7, #120]	; 0x78
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
1000316c:	f001 ffc2 	bl	100050f4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
10003170:	0020      	movs	r0, r4
10003172:	f7ff ff55 	bl	10003020 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
10003176:	2001      	movs	r0, #1
10003178:	f7ff ff52 	bl	10003020 <z_sys_init_run_level>
	z_sched_init();
1000317c:	f000 fd10 	bl	10003ba0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10003180:	4d14      	ldr	r5, [pc, #80]	; (100031d4 <z_cstart+0xa8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10003182:	4b15      	ldr	r3, [pc, #84]	; (100031d8 <z_cstart+0xac>)
	_kernel.ready_q.cache = &z_main_thread;
10003184:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10003186:	2280      	movs	r2, #128	; 0x80
10003188:	9305      	str	r3, [sp, #20]
1000318a:	2301      	movs	r3, #1
1000318c:	4e13      	ldr	r6, [pc, #76]	; (100031dc <z_cstart+0xb0>)
1000318e:	4914      	ldr	r1, [pc, #80]	; (100031e0 <z_cstart+0xb4>)
10003190:	9304      	str	r3, [sp, #16]
10003192:	00d2      	lsls	r2, r2, #3
10003194:	0033      	movs	r3, r6
10003196:	0028      	movs	r0, r5
10003198:	9403      	str	r4, [sp, #12]
1000319a:	9402      	str	r4, [sp, #8]
1000319c:	9401      	str	r4, [sp, #4]
1000319e:	9400      	str	r4, [sp, #0]
100031a0:	f000 f836 	bl	10003210 <z_setup_new_thread>
100031a4:	2204      	movs	r2, #4
100031a6:	6078      	str	r0, [r7, #4]
100031a8:	7b6b      	ldrb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
100031aa:	0028      	movs	r0, r5
100031ac:	4393      	bics	r3, r2
100031ae:	736b      	strb	r3, [r5, #13]
100031b0:	f002 f8b6 	bl	10005320 <z_ready_thread>
	z_init_cpu(0);
100031b4:	0020      	movs	r0, r4
100031b6:	f7ff ff85 	bl	100030c4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
100031ba:	0032      	movs	r2, r6
100031bc:	0028      	movs	r0, r5
100031be:	6879      	ldr	r1, [r7, #4]
100031c0:	f7fe ff92 	bl	100020e8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
100031c4:	200009f0 	.word	0x200009f0
100031c8:	e000ed00 	.word	0xe000ed00
100031cc:	ff00ffff 	.word	0xff00ffff
100031d0:	200004ac 	.word	0x200004ac
100031d4:	200002e0 	.word	0x200002e0
100031d8:	100059f7 	.word	0x100059f7
100031dc:	10003071 	.word	0x10003071
100031e0:	200004f0 	.word	0x200004f0

100031e4 <z_check_stack_sentinel>:
 *
 * If the check fails, the thread will be terminated appropriately through
 * the system fatal error handler.
 */
void z_check_stack_sentinel(void)
{
100031e4:	b580      	push	{r7, lr}
	uint32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
100031e6:	4b08      	ldr	r3, [pc, #32]	; (10003208 <z_check_stack_sentinel+0x24>)
{
100031e8:	af00      	add	r7, sp, #0
	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
100031ea:	689b      	ldr	r3, [r3, #8]
100031ec:	7b5a      	ldrb	r2, [r3, #13]
100031ee:	07d2      	lsls	r2, r2, #31
100031f0:	d408      	bmi.n	10003204 <z_check_stack_sentinel+0x20>
		return;
	}

	stack = (uint32_t *)_current->stack_info.start;
100031f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
	if (*stack != STACK_SENTINEL) {
100031f4:	4a05      	ldr	r2, [pc, #20]	; (1000320c <z_check_stack_sentinel+0x28>)
100031f6:	6819      	ldr	r1, [r3, #0]
100031f8:	4291      	cmp	r1, r2
100031fa:	d003      	beq.n	10003204 <z_check_stack_sentinel+0x20>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
100031fc:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
100031fe:	2002      	movs	r0, #2
10003200:	b662      	cpsie	i
10003202:	df02      	svc	2
	}
}
10003204:	46bd      	mov	sp, r7
10003206:	bd80      	pop	{r7, pc}
10003208:	200004ac 	.word	0x200004ac
1000320c:	f0f0f0f0 	.word	0xf0f0f0f0

10003210 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
10003210:	b5f0      	push	{r4, r5, r6, r7, lr}
10003212:	0004      	movs	r4, r0
10003214:	b085      	sub	sp, #20
10003216:	af04      	add	r7, sp, #16
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
10003218:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
1000321a:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
1000321c:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
1000321e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	thread_base->pended_on = NULL;
10003220:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
10003222:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
10003224:	2004      	movs	r0, #4
10003226:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
10003228:	6a78      	ldr	r0, [r7, #36]	; 0x24
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
1000322a:	3207      	adds	r2, #7
	thread_base->prio = priority;
1000322c:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
1000322e:	2007      	movs	r0, #7
10003230:	4382      	bics	r2, r0
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
10003232:	480f      	ldr	r0, [pc, #60]	; (10003270 <z_setup_new_thread+0x60>)
	stack_ptr = (char *)stack + stack_obj_size;
10003234:	188e      	adds	r6, r1, r2
	thread_base->pended_on = NULL;
10003236:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
10003238:	73e5      	strb	r5, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
1000323a:	61a5      	str	r5, [r4, #24]
	node->prev = NULL;
1000323c:	61e5      	str	r5, [r4, #28]
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
1000323e:	6008      	str	r0, [r1, #0]
	new_thread->stack_info.size = stack_buf_size;
10003240:	66a2      	str	r2, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10003242:	6a3a      	ldr	r2, [r7, #32]
10003244:	0020      	movs	r0, r4
10003246:	9202      	str	r2, [sp, #8]
10003248:	69fa      	ldr	r2, [r7, #28]
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
1000324a:	6661      	str	r1, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
1000324c:	9201      	str	r2, [sp, #4]
1000324e:	69ba      	ldr	r2, [r7, #24]
	new_thread->stack_info.delta = delta;
10003250:	66e5      	str	r5, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10003252:	9200      	str	r2, [sp, #0]
10003254:	0032      	movs	r2, r6
10003256:	f7fe ff2f 	bl	100020b8 <arch_new_thread>
	if (!_current) {
1000325a:	4b06      	ldr	r3, [pc, #24]	; (10003274 <z_setup_new_thread+0x64>)
	new_thread->init_data = NULL;
1000325c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
1000325e:	689b      	ldr	r3, [r3, #8]
10003260:	42ab      	cmp	r3, r5
10003262:	d000      	beq.n	10003266 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
10003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
10003266:	46bd      	mov	sp, r7
10003268:	0030      	movs	r0, r6
1000326a:	6723      	str	r3, [r4, #112]	; 0x70
1000326c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
1000326e:	46c0      	nop			; (mov r8, r8)
10003270:	f0f0f0f0 	.word	0xf0f0f0f0
10003274:	200004ac 	.word	0x200004ac

10003278 <z_impl_k_thread_create>:
{
10003278:	b5f0      	push	{r4, r5, r6, r7, lr}
1000327a:	0004      	movs	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
1000327c:	2000      	movs	r0, #0
{
1000327e:	b087      	sub	sp, #28
10003280:	af06      	add	r7, sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10003282:	9005      	str	r0, [sp, #20]
10003284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
{
10003286:	6b7d      	ldr	r5, [r7, #52]	; 0x34
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10003288:	9004      	str	r0, [sp, #16]
1000328a:	6a78      	ldr	r0, [r7, #36]	; 0x24
{
1000328c:	6b3e      	ldr	r6, [r7, #48]	; 0x30
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
1000328e:	9003      	str	r0, [sp, #12]
10003290:	6a38      	ldr	r0, [r7, #32]
10003292:	9002      	str	r0, [sp, #8]
10003294:	69f8      	ldr	r0, [r7, #28]
10003296:	9001      	str	r0, [sp, #4]
10003298:	69b8      	ldr	r0, [r7, #24]
1000329a:	9000      	str	r0, [sp, #0]
1000329c:	0020      	movs	r0, r4
1000329e:	f7ff ffb7 	bl	10003210 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
100032a2:	002b      	movs	r3, r5
100032a4:	1c72      	adds	r2, r6, #1
100032a6:	d101      	bne.n	100032ac <z_impl_k_thread_create+0x34>
100032a8:	3301      	adds	r3, #1
100032aa:	d005      	beq.n	100032b8 <z_impl_k_thread_create+0x40>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
100032ac:	002b      	movs	r3, r5
100032ae:	4333      	orrs	r3, r6
100032b0:	d105      	bne.n	100032be <z_impl_k_thread_create+0x46>
	z_sched_start(thread);
100032b2:	0020      	movs	r0, r4
100032b4:	f000 fbc2 	bl	10003a3c <z_sched_start>
}
100032b8:	46bd      	mov	sp, r7
100032ba:	0020      	movs	r0, r4
100032bc:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
100032be:	0020      	movs	r0, r4
100032c0:	0032      	movs	r2, r6
100032c2:	002b      	movs	r3, r5
100032c4:	4902      	ldr	r1, [pc, #8]	; (100032d0 <z_impl_k_thread_create+0x58>)
100032c6:	3018      	adds	r0, #24
100032c8:	f000 fe12 	bl	10003ef0 <z_add_timeout>
100032cc:	e7f4      	b.n	100032b8 <z_impl_k_thread_create+0x40>
100032ce:	46c0      	nop			; (mov r8, r8)
100032d0:	1000533d 	.word	0x1000533d

100032d4 <z_init_static_threads>:
{
100032d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
100032d6:	4c20      	ldr	r4, [pc, #128]	; (10003358 <z_init_static_threads+0x84>)
{
100032d8:	b087      	sub	sp, #28
100032da:	0026      	movs	r6, r4
100032dc:	af06      	add	r7, sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
100032de:	4d1f      	ldr	r5, [pc, #124]	; (1000335c <z_init_static_threads+0x88>)
100032e0:	42ac      	cmp	r4, r5
100032e2:	d308      	bcc.n	100032f6 <z_init_static_threads+0x22>
	k_sched_lock();
100032e4:	f000 fabc 	bl	10003860 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
100032e8:	0034      	movs	r4, r6
100032ea:	42ac      	cmp	r4, r5
100032ec:	d319      	bcc.n	10003322 <z_init_static_threads+0x4e>
	k_sched_unlock();
100032ee:	f000 fc3f 	bl	10003b70 <k_sched_unlock>
}
100032f2:	46bd      	mov	sp, r7
100032f4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
		z_setup_new_thread(
100032f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
100032f8:	9305      	str	r3, [sp, #20]
100032fa:	6a23      	ldr	r3, [r4, #32]
100032fc:	9304      	str	r3, [sp, #16]
100032fe:	69e3      	ldr	r3, [r4, #28]
10003300:	9303      	str	r3, [sp, #12]
10003302:	69a3      	ldr	r3, [r4, #24]
10003304:	9302      	str	r3, [sp, #8]
10003306:	6963      	ldr	r3, [r4, #20]
10003308:	9301      	str	r3, [sp, #4]
1000330a:	6923      	ldr	r3, [r4, #16]
1000330c:	9300      	str	r3, [sp, #0]
1000330e:	68e3      	ldr	r3, [r4, #12]
10003310:	68a2      	ldr	r2, [r4, #8]
10003312:	6861      	ldr	r1, [r4, #4]
10003314:	6820      	ldr	r0, [r4, #0]
10003316:	f7ff ff7b 	bl	10003210 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
1000331a:	6823      	ldr	r3, [r4, #0]
1000331c:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
1000331e:	3430      	adds	r4, #48	; 0x30
10003320:	e7dd      	b.n	100032de <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10003322:	6a60      	ldr	r0, [r4, #36]	; 0x24
10003324:	1c43      	adds	r3, r0, #1
10003326:	d00f      	beq.n	10003348 <z_init_static_threads+0x74>
					    K_MSEC(thread_data->init_delay));
10003328:	43c3      	mvns	r3, r0
1000332a:	17db      	asrs	r3, r3, #31
1000332c:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
1000332e:	220a      	movs	r2, #10
10003330:	2300      	movs	r3, #0
10003332:	17c1      	asrs	r1, r0, #31
10003334:	f7fe fb5a 	bl	100019ec <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
10003338:	6826      	ldr	r6, [r4, #0]
1000333a:	000b      	movs	r3, r1
1000333c:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
1000333e:	4301      	orrs	r1, r0
10003340:	d104      	bne.n	1000334c <z_init_static_threads+0x78>
	z_sched_start(thread);
10003342:	0030      	movs	r0, r6
10003344:	f000 fb7a 	bl	10003a3c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
10003348:	3430      	adds	r4, #48	; 0x30
1000334a:	e7ce      	b.n	100032ea <z_init_static_threads+0x16>
1000334c:	0030      	movs	r0, r6
1000334e:	4904      	ldr	r1, [pc, #16]	; (10003360 <z_init_static_threads+0x8c>)
10003350:	3018      	adds	r0, #24
10003352:	f000 fdcd 	bl	10003ef0 <z_add_timeout>
10003356:	e7f7      	b.n	10003348 <z_init_static_threads+0x74>
10003358:	2000020c 	.word	0x2000020c
1000335c:	2000020c 	.word	0x2000020c
10003360:	1000533d 	.word	0x1000533d

10003364 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
10003364:	b5f0      	push	{r4, r5, r6, r7, lr}
10003366:	b085      	sub	sp, #20
10003368:	af02      	add	r7, sp, #8
1000336a:	6079      	str	r1, [r7, #4]

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
1000336c:	0001      	movs	r1, r0
1000336e:	3108      	adds	r1, #8
{
10003370:	0004      	movs	r4, r0
	key = k_spin_lock(&msgq->lock);
10003372:	6039      	str	r1, [r7, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
10003374:	f3ef 8610 	mrs	r6, PRIMASK
10003378:	b672      	cpsid	i

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
1000337a:	6a01      	ldr	r1, [r0, #32]
1000337c:	68c0      	ldr	r0, [r0, #12]
1000337e:	4281      	cmp	r1, r0
10003380:	d22b      	bcs.n	100033da <z_impl_k_msgq_put+0x76>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
10003382:	0020      	movs	r0, r4
10003384:	f002 f826 	bl	100053d4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
10003388:	68a2      	ldr	r2, [r4, #8]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
1000338a:	1e05      	subs	r5, r0, #0
			(void)memcpy(pending_thread->base.swap_data, data,
1000338c:	6879      	ldr	r1, [r7, #4]
		if (pending_thread != NULL) {
1000338e:	d00e      	beq.n	100033ae <z_impl_k_msgq_put+0x4a>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
10003390:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
10003392:	6940      	ldr	r0, [r0, #20]
10003394:	f001 f9c7 	bl	10004726 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
10003398:	0028      	movs	r0, r5
1000339a:	67ac      	str	r4, [r5, #120]	; 0x78
1000339c:	f001 ffc0 	bl	10005320 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
100033a0:	6838      	ldr	r0, [r7, #0]
100033a2:	0031      	movs	r1, r6
100033a4:	f000 fa44 	bl	10003830 <z_reschedule>
			return 0;
100033a8:	0020      	movs	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
100033aa:	46bd      	mov	sp, r7
100033ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
100033ae:	69e0      	ldr	r0, [r4, #28]
100033b0:	f001 f9b9 	bl	10004726 <memcpy>
			msgq->write_ptr += msgq->msg_size;
100033b4:	69e3      	ldr	r3, [r4, #28]
100033b6:	68a2      	ldr	r2, [r4, #8]
100033b8:	189b      	adds	r3, r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
100033ba:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
100033bc:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
100033be:	4293      	cmp	r3, r2
100033c0:	d101      	bne.n	100033c6 <z_impl_k_msgq_put+0x62>
				msgq->write_ptr = msgq->buffer_start;
100033c2:	6923      	ldr	r3, [r4, #16]
100033c4:	61e3      	str	r3, [r4, #28]
		result = 0;
100033c6:	2000      	movs	r0, #0
			msgq->used_msgs++;
100033c8:	6a23      	ldr	r3, [r4, #32]
100033ca:	3301      	adds	r3, #1
100033cc:	6223      	str	r3, [r4, #32]
	if (key != 0U) {
100033ce:	2e00      	cmp	r6, #0
100033d0:	d1eb      	bne.n	100033aa <z_impl_k_msgq_put+0x46>
	__asm__ volatile(
100033d2:	b662      	cpsie	i
100033d4:	f3bf 8f6f 	isb	sy
100033d8:	e7e7      	b.n	100033aa <z_impl_k_msgq_put+0x46>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
100033da:	0011      	movs	r1, r2
100033dc:	4319      	orrs	r1, r3
100033de:	d00b      	beq.n	100033f8 <z_impl_k_msgq_put+0x94>
		_current->base.swap_data = (void *) data;
100033e0:	4907      	ldr	r1, [pc, #28]	; (10003400 <z_impl_k_msgq_put+0x9c>)
100033e2:	6878      	ldr	r0, [r7, #4]
100033e4:	6889      	ldr	r1, [r1, #8]
100033e6:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
100033e8:	9200      	str	r2, [sp, #0]
100033ea:	0031      	movs	r1, r6
100033ec:	0022      	movs	r2, r4
100033ee:	6838      	ldr	r0, [r7, #0]
100033f0:	9301      	str	r3, [sp, #4]
100033f2:	f000 fb79 	bl	10003ae8 <z_pend_curr>
		return result;
100033f6:	e7d8      	b.n	100033aa <z_impl_k_msgq_put+0x46>
		result = -ENOMSG;
100033f8:	2023      	movs	r0, #35	; 0x23
100033fa:	4240      	negs	r0, r0
100033fc:	e7e7      	b.n	100033ce <z_impl_k_msgq_put+0x6a>
100033fe:	46c0      	nop			; (mov r8, r8)
10003400:	200004ac 	.word	0x200004ac

10003404 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
10003404:	b5f0      	push	{r4, r5, r6, r7, lr}
10003406:	0004      	movs	r4, r0
10003408:	0008      	movs	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
1000340a:	0021      	movs	r1, r4
{
1000340c:	b085      	sub	sp, #20
1000340e:	af02      	add	r7, sp, #8
	key = k_spin_lock(&msgq->lock);
10003410:	3108      	adds	r1, #8
10003412:	6079      	str	r1, [r7, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
10003414:	f3ef 8610 	mrs	r6, PRIMASK
10003418:	b672      	cpsid	i

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
1000341a:	6a21      	ldr	r1, [r4, #32]
1000341c:	2900      	cmp	r1, #0
1000341e:	d033      	beq.n	10003488 <z_impl_k_msgq_get+0x84>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
10003420:	68a2      	ldr	r2, [r4, #8]
10003422:	69a1      	ldr	r1, [r4, #24]
10003424:	f001 f97f 	bl	10004726 <memcpy>
		msgq->read_ptr += msgq->msg_size;
10003428:	69a3      	ldr	r3, [r4, #24]
1000342a:	68a2      	ldr	r2, [r4, #8]
1000342c:	189b      	adds	r3, r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
1000342e:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
10003430:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
10003432:	4293      	cmp	r3, r2
10003434:	d101      	bne.n	1000343a <z_impl_k_msgq_get+0x36>
			msgq->read_ptr = msgq->buffer_start;
10003436:	6923      	ldr	r3, [r4, #16]
10003438:	61a3      	str	r3, [r4, #24]
		}
		msgq->used_msgs--;
1000343a:	6a23      	ldr	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
1000343c:	0020      	movs	r0, r4
		msgq->used_msgs--;
1000343e:	3b01      	subs	r3, #1
10003440:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
10003442:	f001 ffc7 	bl	100053d4 <z_unpend_first_thread>
10003446:	0005      	movs	r5, r0

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
		}
		result = 0;
10003448:	2000      	movs	r0, #0
		if (pending_thread != NULL) {
1000344a:	4285      	cmp	r5, r0
1000344c:	d02c      	beq.n	100034a8 <z_impl_k_msgq_get+0xa4>
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
1000344e:	68a2      	ldr	r2, [r4, #8]
10003450:	6969      	ldr	r1, [r5, #20]
10003452:	69e0      	ldr	r0, [r4, #28]
10003454:	f001 f967 	bl	10004726 <memcpy>
			msgq->write_ptr += msgq->msg_size;
10003458:	69e3      	ldr	r3, [r4, #28]
1000345a:	68a2      	ldr	r2, [r4, #8]
1000345c:	189b      	adds	r3, r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
1000345e:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
10003460:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
10003462:	4293      	cmp	r3, r2
10003464:	d101      	bne.n	1000346a <z_impl_k_msgq_get+0x66>
				msgq->write_ptr = msgq->buffer_start;
10003466:	6923      	ldr	r3, [r4, #16]
10003468:	61e3      	str	r3, [r4, #28]
			msgq->used_msgs++;
1000346a:	6a23      	ldr	r3, [r4, #32]
			z_ready_thread(pending_thread);
1000346c:	0028      	movs	r0, r5
			msgq->used_msgs++;
1000346e:	3301      	adds	r3, #1
10003470:	6223      	str	r3, [r4, #32]
10003472:	2400      	movs	r4, #0
10003474:	67ac      	str	r4, [r5, #120]	; 0x78
			z_ready_thread(pending_thread);
10003476:	f001 ff53 	bl	10005320 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
1000347a:	6878      	ldr	r0, [r7, #4]
1000347c:	0031      	movs	r1, r6
1000347e:	f000 f9d7 	bl	10003830 <z_reschedule>
			return 0;
10003482:	0020      	movs	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
10003484:	46bd      	mov	sp, r7
10003486:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10003488:	0011      	movs	r1, r2
1000348a:	4319      	orrs	r1, r3
1000348c:	d00a      	beq.n	100034a4 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
1000348e:	4909      	ldr	r1, [pc, #36]	; (100034b4 <z_impl_k_msgq_get+0xb0>)
10003490:	6889      	ldr	r1, [r1, #8]
10003492:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
10003494:	9200      	str	r2, [sp, #0]
10003496:	0031      	movs	r1, r6
10003498:	0022      	movs	r2, r4
1000349a:	6878      	ldr	r0, [r7, #4]
1000349c:	9301      	str	r3, [sp, #4]
1000349e:	f000 fb23 	bl	10003ae8 <z_pend_curr>
		return result;
100034a2:	e7ef      	b.n	10003484 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
100034a4:	2023      	movs	r0, #35	; 0x23
100034a6:	4240      	negs	r0, r0
	if (key != 0U) {
100034a8:	2e00      	cmp	r6, #0
100034aa:	d1eb      	bne.n	10003484 <z_impl_k_msgq_get+0x80>
	__asm__ volatile(
100034ac:	b662      	cpsie	i
100034ae:	f3bf 8f6f 	isb	sy
100034b2:	e7e7      	b.n	10003484 <z_impl_k_msgq_get+0x80>
100034b4:	200004ac 	.word	0x200004ac

100034b8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
100034b8:	b5b0      	push	{r4, r5, r7, lr}
100034ba:	0004      	movs	r4, r0
100034bc:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
100034be:	f3ef 8510 	mrs	r5, PRIMASK
100034c2:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
100034c4:	f001 ff86 	bl	100053d4 <z_unpend_first_thread>

	if (thread != NULL) {
100034c8:	2800      	cmp	r0, #0
100034ca:	d009      	beq.n	100034e0 <z_impl_k_sem_give+0x28>
100034cc:	2300      	movs	r3, #0
100034ce:	6783      	str	r3, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
100034d0:	f001 ff26 	bl	10005320 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
100034d4:	0029      	movs	r1, r5
100034d6:	4806      	ldr	r0, [pc, #24]	; (100034f0 <z_impl_k_sem_give+0x38>)
100034d8:	f000 f9aa 	bl	10003830 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
100034dc:	46bd      	mov	sp, r7
100034de:	bdb0      	pop	{r4, r5, r7, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
100034e0:	68a2      	ldr	r2, [r4, #8]
100034e2:	68e3      	ldr	r3, [r4, #12]
100034e4:	1a9b      	subs	r3, r3, r2
100034e6:	1e59      	subs	r1, r3, #1
100034e8:	418b      	sbcs	r3, r1
100034ea:	189b      	adds	r3, r3, r2
100034ec:	60a3      	str	r3, [r4, #8]
}
100034ee:	e7f1      	b.n	100034d4 <z_impl_k_sem_give+0x1c>
100034f0:	200004ed 	.word	0x200004ed

100034f4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
100034f4:	b597      	push	{r0, r1, r2, r4, r7, lr}
100034f6:	0001      	movs	r1, r0
100034f8:	af02      	add	r7, sp, #8
100034fa:	f3ef 8010 	mrs	r0, PRIMASK
100034fe:	b672      	cpsid	i

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
10003500:	688c      	ldr	r4, [r1, #8]
10003502:	2c00      	cmp	r4, #0
10003504:	d008      	beq.n	10003518 <z_impl_k_sem_take+0x24>
		sem->count--;
10003506:	3c01      	subs	r4, #1
10003508:	608c      	str	r4, [r1, #8]
	if (key != 0U) {
1000350a:	2800      	cmp	r0, #0
1000350c:	d116      	bne.n	1000353c <z_impl_k_sem_take+0x48>
	__asm__ volatile(
1000350e:	b662      	cpsie	i
10003510:	f3bf 8f6f 	isb	sy

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
10003514:	46bd      	mov	sp, r7
10003516:	bd92      	pop	{r1, r4, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10003518:	0014      	movs	r4, r2
1000351a:	431c      	orrs	r4, r3
1000351c:	d106      	bne.n	1000352c <z_impl_k_sem_take+0x38>
	if (key != 0U) {
1000351e:	2800      	cmp	r0, #0
10003520:	d10e      	bne.n	10003540 <z_impl_k_sem_take+0x4c>
	__asm__ volatile(
10003522:	b662      	cpsie	i
10003524:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
10003528:	3810      	subs	r0, #16
1000352a:	e7f3      	b.n	10003514 <z_impl_k_sem_take+0x20>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
1000352c:	9200      	str	r2, [sp, #0]
1000352e:	9301      	str	r3, [sp, #4]
10003530:	000a      	movs	r2, r1
10003532:	0001      	movs	r1, r0
10003534:	4804      	ldr	r0, [pc, #16]	; (10003548 <z_impl_k_sem_take+0x54>)
10003536:	f000 fad7 	bl	10003ae8 <z_pend_curr>
1000353a:	e7eb      	b.n	10003514 <z_impl_k_sem_take+0x20>
		ret = 0;
1000353c:	2000      	movs	r0, #0
1000353e:	e7e9      	b.n	10003514 <z_impl_k_sem_take+0x20>
		ret = -EBUSY;
10003540:	2010      	movs	r0, #16
10003542:	4240      	negs	r0, r0
	return ret;
10003544:	e7e6      	b.n	10003514 <z_impl_k_sem_take+0x20>
10003546:	46c0      	nop			; (mov r8, r8)
10003548:	200004ed 	.word	0x200004ed

1000354c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
1000354c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000354e:	b089      	sub	sp, #36	; 0x24
10003550:	af04      	add	r7, sp, #16
10003552:	60b8      	str	r0, [r7, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
10003554:	f3ef 8610 	mrs	r6, PRIMASK
10003558:	b672      	cpsid	i
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
1000355a:	68bb      	ldr	r3, [r7, #8]
1000355c:	68bd      	ldr	r5, [r7, #8]
1000355e:	3304      	adds	r3, #4
10003560:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
10003562:	3598      	adds	r5, #152	; 0x98
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
10003564:	2c00      	cmp	r4, #0
10003566:	d113      	bne.n	10003590 <work_queue_main+0x44>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
10003568:	2102      	movs	r1, #2
1000356a:	0028      	movs	r0, r5
1000356c:	f001 fe49 	bl	10005202 <flag_test_and_clear>
10003570:	2800      	cmp	r0, #0
10003572:	d140      	bne.n	100035f6 <work_queue_main+0xaa>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
10003574:	2300      	movs	r3, #0
10003576:	9302      	str	r3, [sp, #8]
10003578:	2301      	movs	r3, #1
1000357a:	425b      	negs	r3, r3
1000357c:	17dc      	asrs	r4, r3, #31
1000357e:	68ba      	ldr	r2, [r7, #8]
10003580:	0031      	movs	r1, r6
10003582:	9300      	str	r3, [sp, #0]
10003584:	9401      	str	r4, [sp, #4]
10003586:	3288      	adds	r2, #136	; 0x88
10003588:	4837      	ldr	r0, [pc, #220]	; (10003668 <work_queue_main+0x11c>)
1000358a:	f000 fc27 	bl	10003ddc <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
1000358e:	e7e1      	b.n	10003554 <work_queue_main+0x8>
	return node->next;
10003590:	6822      	ldr	r2, [r4, #0]
	return list->tail;
10003592:	3304      	adds	r3, #4
	list->head = node;
10003594:	679a      	str	r2, [r3, #120]	; 0x78
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
10003596:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
10003598:	428c      	cmp	r4, r1
1000359a:	d100      	bne.n	1000359e <work_queue_main+0x52>
	list->tail = node;
1000359c:	67da      	str	r2, [r3, #124]	; 0x7c
	*flagp |= BIT(bit);
1000359e:	2302      	movs	r3, #2
100035a0:	682a      	ldr	r2, [r5, #0]
100035a2:	4313      	orrs	r3, r2
100035a4:	602b      	str	r3, [r5, #0]
	*flagp &= ~BIT(bit);
100035a6:	2304      	movs	r3, #4
100035a8:	68e2      	ldr	r2, [r4, #12]
100035aa:	439a      	bics	r2, r3
100035ac:	3b03      	subs	r3, #3
100035ae:	4313      	orrs	r3, r2
100035b0:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
100035b2:	6863      	ldr	r3, [r4, #4]
	if (key != 0U) {
100035b4:	2e00      	cmp	r6, #0
100035b6:	d102      	bne.n	100035be <work_queue_main+0x72>
	__asm__ volatile(
100035b8:	b662      	cpsie	i
100035ba:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
100035be:	0020      	movs	r0, r4
100035c0:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
100035c2:	f3ef 8310 	mrs	r3, PRIMASK
100035c6:	b672      	cpsid	i
100035c8:	607b      	str	r3, [r7, #4]
	*flagp &= ~BIT(bit);
100035ca:	68e3      	ldr	r3, [r4, #12]
100035cc:	2101      	movs	r1, #1
100035ce:	001a      	movs	r2, r3
100035d0:	438a      	bics	r2, r1
	return (*flagp & BIT(bit)) != 0U;
100035d2:	0850      	lsrs	r0, r2, #1
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
100035d4:	4208      	tst	r0, r1
100035d6:	d118      	bne.n	1000360a <work_queue_main+0xbe>
	*flagp &= ~BIT(bit);
100035d8:	60e2      	str	r2, [r4, #12]
100035da:	2202      	movs	r2, #2
100035dc:	682b      	ldr	r3, [r5, #0]
100035de:	4393      	bics	r3, r2
	if (key != 0U) {
100035e0:	687a      	ldr	r2, [r7, #4]
100035e2:	602b      	str	r3, [r5, #0]
	return (*flagp & BIT(bit)) != 0U;
100035e4:	05db      	lsls	r3, r3, #23
100035e6:	0fdb      	lsrs	r3, r3, #31
100035e8:	2a00      	cmp	r2, #0
100035ea:	d039      	beq.n	10003660 <work_queue_main+0x114>
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
100035ec:	2b00      	cmp	r3, #0
100035ee:	d1b1      	bne.n	10003554 <work_queue_main+0x8>
	z_impl_k_yield();
100035f0:	f000 fae6 	bl	10003bc0 <z_impl_k_yield>
}
100035f4:	e7ae      	b.n	10003554 <work_queue_main+0x8>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
100035f6:	68bc      	ldr	r4, [r7, #8]
100035f8:	3490      	adds	r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
100035fa:	2200      	movs	r2, #0
100035fc:	2101      	movs	r1, #1
100035fe:	0020      	movs	r0, r4
10003600:	f001 ff13 	bl	1000542a <z_sched_wake>
10003604:	2800      	cmp	r0, #0
10003606:	d1f8      	bne.n	100035fa <work_queue_main+0xae>
10003608:	e7b4      	b.n	10003574 <work_queue_main+0x28>
	*flagp &= ~BIT(bit);
1000360a:	2203      	movs	r2, #3
1000360c:	4393      	bics	r3, r2
1000360e:	60e3      	str	r3, [r4, #12]
	return list->head;
10003610:	4b16      	ldr	r3, [pc, #88]	; (1000366c <work_queue_main+0x120>)
10003612:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
10003614:	2800      	cmp	r0, #0
10003616:	d0e0      	beq.n	100035da <work_queue_main+0x8e>
	return node->next;
10003618:	2600      	movs	r6, #0
1000361a:	6803      	ldr	r3, [r0, #0]
1000361c:	60fb      	str	r3, [r7, #12]
		if (wc->work == work) {
1000361e:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
10003620:	0003      	movs	r3, r0
		if (wc->work == work) {
10003622:	4294      	cmp	r4, r2
10003624:	d10e      	bne.n	10003644 <work_queue_main+0xf8>
10003626:	6802      	ldr	r2, [r0, #0]
10003628:	4b10      	ldr	r3, [pc, #64]	; (1000366c <work_queue_main+0x120>)
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
1000362a:	2e00      	cmp	r6, #0
1000362c:	d112      	bne.n	10003654 <work_queue_main+0x108>
1000362e:	6859      	ldr	r1, [r3, #4]
	list->head = node;
10003630:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
10003632:	4281      	cmp	r1, r0
10003634:	d100      	bne.n	10003638 <work_queue_main+0xec>
	list->tail = node;
10003636:	605a      	str	r2, [r3, #4]
	parent->next = child;
10003638:	2300      	movs	r3, #0
1000363a:	6003      	str	r3, [r0, #0]
			k_sem_give(&wc->sem);
1000363c:	3008      	adds	r0, #8
	z_impl_k_sem_give(sem);
1000363e:	f7ff ff3b 	bl	100034b8 <z_impl_k_sem_give>
}
10003642:	0033      	movs	r3, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
10003644:	68fa      	ldr	r2, [r7, #12]
10003646:	2a00      	cmp	r2, #0
10003648:	d0c7      	beq.n	100035da <work_queue_main+0x8e>
	return node->next;
1000364a:	001e      	movs	r6, r3
1000364c:	6813      	ldr	r3, [r2, #0]
1000364e:	0010      	movs	r0, r2
10003650:	60fb      	str	r3, [r7, #12]
10003652:	e7e4      	b.n	1000361e <work_queue_main+0xd2>
	return list->tail;
10003654:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
10003656:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
10003658:	4288      	cmp	r0, r1
1000365a:	d1ed      	bne.n	10003638 <work_queue_main+0xec>
	list->tail = node;
1000365c:	605e      	str	r6, [r3, #4]
}
1000365e:	e7eb      	b.n	10003638 <work_queue_main+0xec>
	__asm__ volatile(
10003660:	b662      	cpsie	i
10003662:	f3bf 8f6f 	isb	sy
10003666:	e7c1      	b.n	100035ec <work_queue_main+0xa0>
10003668:	200004ed 	.word	0x200004ed
1000366c:	200004d0 	.word	0x200004d0

10003670 <submit_to_queue_locked>:
	return (*flagp & BIT(bit)) != 0U;
10003670:	68c3      	ldr	r3, [r0, #12]
{
10003672:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003674:	000e      	movs	r6, r1
	return (*flagp & BIT(bit)) != 0U;
10003676:	0859      	lsrs	r1, r3, #1
10003678:	2201      	movs	r2, #1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
1000367a:	000d      	movs	r5, r1
{
1000367c:	0004      	movs	r4, r0
1000367e:	af00      	add	r7, sp, #0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10003680:	4015      	ands	r5, r2
10003682:	4211      	tst	r1, r2
10003684:	d128      	bne.n	100036d8 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
10003686:	0899      	lsrs	r1, r3, #2
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
10003688:	4211      	tst	r1, r2
1000368a:	d127      	bne.n	100036dc <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
1000368c:	6832      	ldr	r2, [r6, #0]
1000368e:	2a00      	cmp	r2, #0
10003690:	d101      	bne.n	10003696 <submit_to_queue_locked+0x26>
			*queuep = work->queue;
10003692:	6882      	ldr	r2, [r0, #8]
10003694:	6032      	str	r2, [r6, #0]
		ret = 1;
10003696:	2501      	movs	r5, #1
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
10003698:	422b      	tst	r3, r5
1000369a:	d002      	beq.n	100036a2 <submit_to_queue_locked+0x32>
			*queuep = work->queue;
1000369c:	68a3      	ldr	r3, [r4, #8]
			ret = 2;
1000369e:	196d      	adds	r5, r5, r5
			*queuep = work->queue;
100036a0:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
100036a2:	6833      	ldr	r3, [r6, #0]
100036a4:	607b      	str	r3, [r7, #4]
	if (queue == NULL) {
100036a6:	2b00      	cmp	r3, #0
100036a8:	d037      	beq.n	1000371a <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
100036aa:	4b1e      	ldr	r3, [pc, #120]	; (10003724 <submit_to_queue_locked+0xb4>)
100036ac:	687a      	ldr	r2, [r7, #4]
100036ae:	689b      	ldr	r3, [r3, #8]
100036b0:	2000      	movs	r0, #0
100036b2:	4293      	cmp	r3, r2
100036b4:	d104      	bne.n	100036c0 <submit_to_queue_locked+0x50>
100036b6:	f001 fd5e 	bl	10005176 <k_is_in_isr>
100036ba:	2301      	movs	r3, #1
100036bc:	4058      	eors	r0, r3
100036be:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
100036c0:	2201      	movs	r2, #1
100036c2:	687b      	ldr	r3, [r7, #4]
100036c4:	3398      	adds	r3, #152	; 0x98
100036c6:	681b      	ldr	r3, [r3, #0]
100036c8:	0899      	lsrs	r1, r3, #2
100036ca:	4011      	ands	r1, r2
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
100036cc:	4213      	tst	r3, r2
100036ce:	d026      	beq.n	1000371e <submit_to_queue_locked+0xae>
	} else if (draining && !chained) {
100036d0:	2900      	cmp	r1, #0
100036d2:	d006      	beq.n	100036e2 <submit_to_queue_locked+0x72>
100036d4:	2800      	cmp	r0, #0
100036d6:	d107      	bne.n	100036e8 <submit_to_queue_locked+0x78>
		ret = -EBUSY;
100036d8:	2510      	movs	r5, #16
		ret = -ENODEV;
100036da:	426d      	negs	r5, r5
		*queuep = NULL;
100036dc:	2300      	movs	r3, #0
100036de:	6033      	str	r3, [r6, #0]
	return ret;
100036e0:	e015      	b.n	1000370e <submit_to_queue_locked+0x9e>
	return (*flagp & BIT(bit)) != 0U;
100036e2:	08db      	lsrs	r3, r3, #3
	} else if (plugged && !draining) {
100036e4:	4213      	tst	r3, r2
100036e6:	d1f7      	bne.n	100036d8 <submit_to_queue_locked+0x68>
	parent->next = child;
100036e8:	2300      	movs	r3, #0
100036ea:	6023      	str	r3, [r4, #0]
	return list->tail;
100036ec:	687b      	ldr	r3, [r7, #4]
100036ee:	1d19      	adds	r1, r3, #4
100036f0:	3308      	adds	r3, #8
100036f2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
Z_GENLIST_APPEND(slist, snode)
100036f4:	2a00      	cmp	r2, #0
100036f6:	d10d      	bne.n	10003714 <submit_to_queue_locked+0xa4>
	list->tail = node;
100036f8:	67dc      	str	r4, [r3, #124]	; 0x7c
	list->head = node;
100036fa:	67cc      	str	r4, [r1, #124]	; 0x7c
		(void)notify_queue_locked(queue);
100036fc:	6878      	ldr	r0, [r7, #4]
100036fe:	f001 fd8e 	bl	1000521e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
10003702:	2304      	movs	r3, #4
10003704:	68e2      	ldr	r2, [r4, #12]
10003706:	4313      	orrs	r3, r2
10003708:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
1000370a:	6833      	ldr	r3, [r6, #0]
1000370c:	60a3      	str	r3, [r4, #8]
}
1000370e:	46bd      	mov	sp, r7
10003710:	0028      	movs	r0, r5
10003712:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	parent->next = child;
10003714:	6014      	str	r4, [r2, #0]
	list->tail = node;
10003716:	67dc      	str	r4, [r3, #124]	; 0x7c
}
10003718:	e7f0      	b.n	100036fc <submit_to_queue_locked+0x8c>
		return -EINVAL;
1000371a:	2516      	movs	r5, #22
1000371c:	e7dd      	b.n	100036da <submit_to_queue_locked+0x6a>
		ret = -ENODEV;
1000371e:	2513      	movs	r5, #19
10003720:	e7db      	b.n	100036da <submit_to_queue_locked+0x6a>
10003722:	46c0      	nop			; (mov r8, r8)
10003724:	200004ac 	.word	0x200004ac

10003728 <k_work_submit>:
{
10003728:	b580      	push	{r7, lr}
1000372a:	0001      	movs	r1, r0
1000372c:	af00      	add	r7, sp, #0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
1000372e:	4802      	ldr	r0, [pc, #8]	; (10003738 <k_work_submit+0x10>)
10003730:	f001 fd91 	bl	10005256 <k_work_submit_to_queue>
}
10003734:	46bd      	mov	sp, r7
10003736:	bd80      	pop	{r7, pc}
10003738:	20000368 	.word	0x20000368

1000373c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
1000373c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000373e:	0016      	movs	r6, r2
	list->head = NULL;
10003740:	2200      	movs	r2, #0
10003742:	469c      	mov	ip, r3
10003744:	b089      	sub	sp, #36	; 0x24
10003746:	1d03      	adds	r3, r0, #4
10003748:	67da      	str	r2, [r3, #124]	; 0x7c
1000374a:	af08      	add	r7, sp, #32
	list->tail = NULL;
1000374c:	3304      	adds	r3, #4
1000374e:	67da      	str	r2, [r3, #124]	; 0x7c
10003750:	69bd      	ldr	r5, [r7, #24]
10003752:	3380      	adds	r3, #128	; 0x80
	list->head = (sys_dnode_t *)list;
10003754:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
10003756:	605b      	str	r3, [r3, #4]
10003758:	3308      	adds	r3, #8
1000375a:	0004      	movs	r4, r0
	list->head = (sys_dnode_t *)list;
1000375c:	601b      	str	r3, [r3, #0]
	__ASSERT_NO_MSG(queue);
	__ASSERT_NO_MSG(stack);
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
	uint32_t flags = K_WORK_QUEUE_STARTED;
1000375e:	2001      	movs	r0, #1
	list->tail = (sys_dnode_t *)list;
10003760:	605b      	str	r3, [r3, #4]

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
10003762:	4295      	cmp	r5, r2
10003764:	d007      	beq.n	10003776 <k_work_queue_start+0x3a>
10003766:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
10003768:	4243      	negs	r3, r0
1000376a:	4158      	adcs	r0, r3
1000376c:	23ff      	movs	r3, #255	; 0xff
1000376e:	4240      	negs	r0, r0
10003770:	4398      	bics	r0, r3
10003772:	3002      	adds	r0, #2
10003774:	30ff      	adds	r0, #255	; 0xff
	*flagp = flags;
10003776:	0023      	movs	r3, r4
10003778:	3398      	adds	r3, #152	; 0x98
1000377a:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
1000377c:	2201      	movs	r2, #1
1000377e:	4252      	negs	r2, r2
10003780:	17d3      	asrs	r3, r2, #31
10003782:	9206      	str	r2, [sp, #24]
10003784:	9307      	str	r3, [sp, #28]
10003786:	2300      	movs	r3, #0
10003788:	4662      	mov	r2, ip
1000378a:	9304      	str	r3, [sp, #16]
1000378c:	9203      	str	r2, [sp, #12]
1000378e:	9302      	str	r3, [sp, #8]
10003790:	9301      	str	r3, [sp, #4]
10003792:	0032      	movs	r2, r6
10003794:	0020      	movs	r0, r4
10003796:	4b08      	ldr	r3, [pc, #32]	; (100037b8 <k_work_queue_start+0x7c>)
10003798:	9400      	str	r4, [sp, #0]
1000379a:	f7ff fd6d 	bl	10003278 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
1000379e:	2d00      	cmp	r5, #0
100037a0:	d005      	beq.n	100037ae <k_work_queue_start+0x72>
100037a2:	6829      	ldr	r1, [r5, #0]
100037a4:	2900      	cmp	r1, #0
100037a6:	d002      	beq.n	100037ae <k_work_queue_start+0x72>
	return z_impl_k_thread_name_set(thread, str);
100037a8:	0020      	movs	r0, r4
100037aa:	f001 fced 	bl	10005188 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
100037ae:	0020      	movs	r0, r4
100037b0:	f001 fcf0 	bl	10005194 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
100037b4:	46bd      	mov	sp, r7
100037b6:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
100037b8:	1000354d 	.word	0x1000354d

100037bc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
100037bc:	b5b0      	push	{r4, r5, r7, lr}
	int ret = slice_ticks;
100037be:	4d08      	ldr	r5, [pc, #32]	; (100037e0 <z_reset_time_slice+0x24>)
{
100037c0:	af00      	add	r7, sp, #0
	int ret = slice_ticks;
100037c2:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
100037c4:	2c00      	cmp	r4, #0
100037c6:	d008      	beq.n	100037da <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
100037c8:	f7ff f956 	bl	10002a78 <sys_clock_elapsed>
100037cc:	4b05      	ldr	r3, [pc, #20]	; (100037e4 <z_reset_time_slice+0x28>)
100037ce:	1824      	adds	r4, r4, r0
		z_set_timeout_expiry(slice_time(curr), false);
100037d0:	2100      	movs	r1, #0
100037d2:	6828      	ldr	r0, [r5, #0]
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
100037d4:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
100037d6:	f001 fe5f 	bl	10005498 <z_set_timeout_expiry>
	}
}
100037da:	46bd      	mov	sp, r7
100037dc:	bdb0      	pop	{r4, r5, r7, pc}
100037de:	46c0      	nop			; (mov r8, r8)
100037e0:	200004e0 	.word	0x200004e0
100037e4:	200004ac 	.word	0x200004ac

100037e8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
100037e8:	b5b0      	push	{r4, r5, r7, lr}
100037ea:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
100037ec:	f3ef 8410 	mrs	r4, PRIMASK
100037f0:	b672      	cpsid	i
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
100037f2:	2300      	movs	r3, #0
100037f4:	4a0b      	ldr	r2, [pc, #44]	; (10003824 <k_sched_time_slice_set+0x3c>)
100037f6:	4d0c      	ldr	r5, [pc, #48]	; (10003828 <k_sched_time_slice_set+0x40>)
100037f8:	6113      	str	r3, [r2, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
100037fa:	330a      	adds	r3, #10
100037fc:	4343      	muls	r3, r0
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
100037fe:	2800      	cmp	r0, #0
10003800:	dc0c      	bgt.n	1000381c <k_sched_time_slice_set+0x34>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
10003802:	602b      	str	r3, [r5, #0]
		}
		slice_max_prio = prio;
10003804:	4b09      	ldr	r3, [pc, #36]	; (1000382c <k_sched_time_slice_set+0x44>)
		z_reset_time_slice(_current);
10003806:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
10003808:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
1000380a:	f7ff ffd7 	bl	100037bc <z_reset_time_slice>
	if (key != 0U) {
1000380e:	2c00      	cmp	r4, #0
10003810:	d102      	bne.n	10003818 <k_sched_time_slice_set+0x30>
	__asm__ volatile(
10003812:	b662      	cpsie	i
10003814:	f3bf 8f6f 	isb	sy
	}
}
10003818:	46bd      	mov	sp, r7
1000381a:	bdb0      	pop	{r4, r5, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
1000381c:	2b02      	cmp	r3, #2
1000381e:	daf0      	bge.n	10003802 <k_sched_time_slice_set+0x1a>
10003820:	2302      	movs	r3, #2
10003822:	e7ee      	b.n	10003802 <k_sched_time_slice_set+0x1a>
10003824:	200004ac 	.word	0x200004ac
10003828:	200004e0 	.word	0x200004e0
1000382c:	200004dc 	.word	0x200004dc

10003830 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
10003830:	b580      	push	{r7, lr}
10003832:	af00      	add	r7, sp, #0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10003834:	2900      	cmp	r1, #0
10003836:	d10a      	bne.n	1000384e <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10003838:	f3ef 8005 	mrs	r0, IPSR
	if (resched(key.key) && need_swap()) {
1000383c:	2800      	cmp	r0, #0
1000383e:	d108      	bne.n	10003852 <z_reschedule+0x22>
	new_thread = _kernel.ready_q.cache;
10003840:	4b06      	ldr	r3, [pc, #24]	; (1000385c <z_reschedule+0x2c>)
	if (resched(key.key) && need_swap()) {
10003842:	699a      	ldr	r2, [r3, #24]
10003844:	689b      	ldr	r3, [r3, #8]
10003846:	429a      	cmp	r2, r3
10003848:	d003      	beq.n	10003852 <z_reschedule+0x22>
	return z_swap_irqlock(key.key);
1000384a:	f001 fd2a 	bl	100052a2 <z_swap_irqlock>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
1000384e:	46bd      	mov	sp, r7
10003850:	bd80      	pop	{r7, pc}
10003852:	b662      	cpsie	i
10003854:	f3bf 8f6f 	isb	sy
10003858:	e7f9      	b.n	1000384e <z_reschedule+0x1e>
1000385a:	46c0      	nop			; (mov r8, r8)
1000385c:	200004ac 	.word	0x200004ac

10003860 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
10003860:	b580      	push	{r7, lr}
10003862:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10003864:	f3ef 8110 	mrs	r1, PRIMASK
10003868:	b672      	cpsid	i
	--_current->base.sched_locked;
1000386a:	4b06      	ldr	r3, [pc, #24]	; (10003884 <k_sched_lock+0x24>)
1000386c:	689a      	ldr	r2, [r3, #8]
1000386e:	7bd3      	ldrb	r3, [r2, #15]
10003870:	3b01      	subs	r3, #1
10003872:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
10003874:	2900      	cmp	r1, #0
10003876:	d102      	bne.n	1000387e <k_sched_lock+0x1e>
	__asm__ volatile(
10003878:	b662      	cpsie	i
1000387a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
1000387e:	46bd      	mov	sp, r7
10003880:	bd80      	pop	{r7, pc}
10003882:	46c0      	nop			; (mov r8, r8)
10003884:	200004ac 	.word	0x200004ac

10003888 <update_cache>:
{
10003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000388a:	0006      	movs	r6, r0
1000388c:	af00      	add	r7, sp, #0
	return _priq_run_best(curr_cpu_runq());
1000388e:	480e      	ldr	r0, [pc, #56]	; (100038c8 <update_cache+0x40>)
10003890:	f001 fd3d 	bl	1000530e <z_priq_dumb_best>
10003894:	4d0d      	ldr	r5, [pc, #52]	; (100038cc <update_cache+0x44>)
10003896:	1e04      	subs	r4, r0, #0
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10003898:	d100      	bne.n	1000389c <update_cache+0x14>
1000389a:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
1000389c:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
1000389e:	2e00      	cmp	r6, #0
100038a0:	d10b      	bne.n	100038ba <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
100038a2:	7b5a      	ldrb	r2, [r3, #13]
100038a4:	06d2      	lsls	r2, r2, #27
100038a6:	d108      	bne.n	100038ba <update_cache+0x32>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
100038a8:	69a2      	ldr	r2, [r4, #24]
100038aa:	2a00      	cmp	r2, #0
100038ac:	d105      	bne.n	100038ba <update_cache+0x32>
	if (is_preempt(_current) || is_metairq(thread)) {
100038ae:	89da      	ldrh	r2, [r3, #14]
100038b0:	2a7f      	cmp	r2, #127	; 0x7f
100038b2:	d902      	bls.n	100038ba <update_cache+0x32>
		_kernel.ready_q.cache = _current;
100038b4:	61ab      	str	r3, [r5, #24]
}
100038b6:	46bd      	mov	sp, r7
100038b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (thread != _current) {
100038ba:	429c      	cmp	r4, r3
100038bc:	d002      	beq.n	100038c4 <update_cache+0x3c>
			z_reset_time_slice(thread);
100038be:	0020      	movs	r0, r4
100038c0:	f7ff ff7c 	bl	100037bc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
100038c4:	61ac      	str	r4, [r5, #24]
}
100038c6:	e7f6      	b.n	100038b6 <update_cache+0x2e>
100038c8:	200004c8 	.word	0x200004c8
100038cc:	200004ac 	.word	0x200004ac

100038d0 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
100038d0:	220d      	movs	r2, #13
{
100038d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (z_is_thread_queued(thread)) {
100038d4:	5682      	ldrsb	r2, [r0, r2]
{
100038d6:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
100038d8:	7b43      	ldrb	r3, [r0, #13]
100038da:	af00      	add	r7, sp, #0
	if (z_is_thread_queued(thread)) {
100038dc:	2a00      	cmp	r2, #0
100038de:	da04      	bge.n	100038ea <move_thread_to_end_of_prio_q+0x1a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100038e0:	227f      	movs	r2, #127	; 0x7f
100038e2:	4013      	ands	r3, r2
100038e4:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
100038e6:	f001 fcc4 	bl	10005272 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
100038ea:	2380      	movs	r3, #128	; 0x80
100038ec:	7b62      	ldrb	r2, [r4, #13]
100038ee:	425b      	negs	r3, r3
100038f0:	4313      	orrs	r3, r2
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
100038f2:	4a14      	ldr	r2, [pc, #80]	; (10003944 <move_thread_to_end_of_prio_q+0x74>)
100038f4:	7363      	strb	r3, [r4, #13]
100038f6:	69d3      	ldr	r3, [r2, #28]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
100038f8:	4d13      	ldr	r5, [pc, #76]	; (10003948 <move_thread_to_end_of_prio_q+0x78>)
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
100038fa:	6a10      	ldr	r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100038fc:	42ab      	cmp	r3, r5
100038fe:	d01c      	beq.n	1000393a <move_thread_to_end_of_prio_q+0x6a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003900:	2b00      	cmp	r3, #0
10003902:	d01a      	beq.n	1000393a <move_thread_to_end_of_prio_q+0x6a>
	int32_t b1 = thread_1->base.prio;
10003904:	260e      	movs	r6, #14
10003906:	57a6      	ldrsb	r6, [r4, r6]
	int32_t b2 = thread_2->base.prio;
10003908:	210e      	movs	r1, #14
1000390a:	5659      	ldrsb	r1, [r3, r1]
	if (b1 != b2) {
1000390c:	428e      	cmp	r6, r1
1000390e:	d00f      	beq.n	10003930 <move_thread_to_end_of_prio_q+0x60>
		return b2 - b1;
10003910:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
10003912:	2900      	cmp	r1, #0
10003914:	dd0c      	ble.n	10003930 <move_thread_to_end_of_prio_q+0x60>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10003916:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
10003918:	6023      	str	r3, [r4, #0]
	node->prev = prev;
1000391a:	6061      	str	r1, [r4, #4]
	prev->next = node;
1000391c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
1000391e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
10003920:	6890      	ldr	r0, [r2, #8]
10003922:	1b00      	subs	r0, r0, r4
10003924:	4243      	negs	r3, r0
10003926:	4158      	adcs	r0, r3
10003928:	f7ff ffae 	bl	10003888 <update_cache>
}
1000392c:	46bd      	mov	sp, r7
1000392e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
10003930:	4283      	cmp	r3, r0
10003932:	d002      	beq.n	1000393a <move_thread_to_end_of_prio_q+0x6a>
10003934:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003936:	2b00      	cmp	r3, #0
10003938:	d1e6      	bne.n	10003908 <move_thread_to_end_of_prio_q+0x38>
	node->next = list;
1000393a:	6025      	str	r5, [r4, #0]
	node->prev = tail;
1000393c:	6060      	str	r0, [r4, #4]
	tail->next = node;
1000393e:	6004      	str	r4, [r0, #0]
	list->tail = node;
10003940:	6214      	str	r4, [r2, #32]
}
10003942:	e7ed      	b.n	10003920 <move_thread_to_end_of_prio_q+0x50>
10003944:	200004ac 	.word	0x200004ac
10003948:	200004c8 	.word	0x200004c8

1000394c <z_time_slice>:
{
1000394c:	b5b0      	push	{r4, r5, r7, lr}
1000394e:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10003950:	f3ef 8510 	mrs	r5, PRIMASK
10003954:	b672      	cpsid	i
	if (pending_current == _current) {
10003956:	4b18      	ldr	r3, [pc, #96]	; (100039b8 <z_time_slice+0x6c>)
10003958:	4a18      	ldr	r2, [pc, #96]	; (100039bc <z_time_slice+0x70>)
1000395a:	689c      	ldr	r4, [r3, #8]
1000395c:	6811      	ldr	r1, [r2, #0]
1000395e:	428c      	cmp	r4, r1
10003960:	d109      	bne.n	10003976 <z_time_slice+0x2a>
	z_reset_time_slice(curr);
10003962:	0020      	movs	r0, r4
10003964:	f7ff ff2a 	bl	100037bc <z_reset_time_slice>
	if (key != 0U) {
10003968:	2d00      	cmp	r5, #0
1000396a:	d102      	bne.n	10003972 <z_time_slice+0x26>
	__asm__ volatile(
1000396c:	b662      	cpsie	i
1000396e:	f3bf 8f6f 	isb	sy
}
10003972:	46bd      	mov	sp, r7
10003974:	bdb0      	pop	{r4, r5, r7, pc}
	pending_current = NULL;
10003976:	2100      	movs	r1, #0
10003978:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
1000397a:	4a11      	ldr	r2, [pc, #68]	; (100039c0 <z_time_slice+0x74>)
	if (slice_time(_current) && sliceable(_current)) {
1000397c:	6812      	ldr	r2, [r2, #0]
1000397e:	428a      	cmp	r2, r1
10003980:	d018      	beq.n	100039b4 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
10003982:	89e2      	ldrh	r2, [r4, #14]
10003984:	2a7f      	cmp	r2, #127	; 0x7f
10003986:	d815      	bhi.n	100039b4 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
10003988:	7b62      	ldrb	r2, [r4, #13]
1000398a:	06d2      	lsls	r2, r2, #27
1000398c:	d112      	bne.n	100039b4 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
1000398e:	210e      	movs	r1, #14
10003990:	4a0c      	ldr	r2, [pc, #48]	; (100039c4 <z_time_slice+0x78>)
10003992:	5661      	ldrsb	r1, [r4, r1]
10003994:	6812      	ldr	r2, [r2, #0]
10003996:	4291      	cmp	r1, r2
10003998:	db0c      	blt.n	100039b4 <z_time_slice+0x68>
	if (slice_time(_current) && sliceable(_current)) {
1000399a:	4a0b      	ldr	r2, [pc, #44]	; (100039c8 <z_time_slice+0x7c>)
1000399c:	4294      	cmp	r4, r2
1000399e:	d009      	beq.n	100039b4 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
100039a0:	691a      	ldr	r2, [r3, #16]
100039a2:	4282      	cmp	r2, r0
100039a4:	dc03      	bgt.n	100039ae <z_time_slice+0x62>
		move_thread_to_end_of_prio_q(curr);
100039a6:	0020      	movs	r0, r4
100039a8:	f7ff ff92 	bl	100038d0 <move_thread_to_end_of_prio_q>
100039ac:	e7d9      	b.n	10003962 <z_time_slice+0x16>
			_current_cpu->slice_ticks -= ticks;
100039ae:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
100039b0:	611a      	str	r2, [r3, #16]
100039b2:	e7d9      	b.n	10003968 <z_time_slice+0x1c>
100039b4:	2200      	movs	r2, #0
100039b6:	e7fb      	b.n	100039b0 <z_time_slice+0x64>
100039b8:	200004ac 	.word	0x200004ac
100039bc:	200004d8 	.word	0x200004d8
100039c0:	200004e0 	.word	0x200004e0
100039c4:	200004dc 	.word	0x200004dc
100039c8:	20000260 	.word	0x20000260

100039cc <ready_thread>:
{
100039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
100039ce:	230d      	movs	r3, #13
100039d0:	56c3      	ldrsb	r3, [r0, r3]
100039d2:	7b42      	ldrb	r2, [r0, #13]
{
100039d4:	af00      	add	r7, sp, #0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
100039d6:	2b00      	cmp	r3, #0
100039d8:	db20      	blt.n	10003a1c <ready_thread+0x50>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
100039da:	06d3      	lsls	r3, r2, #27
100039dc:	d11e      	bne.n	10003a1c <ready_thread+0x50>
100039de:	6983      	ldr	r3, [r0, #24]
100039e0:	2b00      	cmp	r3, #0
100039e2:	d11b      	bne.n	10003a1c <ready_thread+0x50>
	thread->base.thread_state |= _THREAD_QUEUED;
100039e4:	3b80      	subs	r3, #128	; 0x80
	return list->head == list;
100039e6:	4913      	ldr	r1, [pc, #76]	; (10003a34 <ready_thread+0x68>)
100039e8:	4313      	orrs	r3, r2
100039ea:	7343      	strb	r3, [r0, #13]
100039ec:	69cb      	ldr	r3, [r1, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100039ee:	4d12      	ldr	r5, [pc, #72]	; (10003a38 <ready_thread+0x6c>)
	return (node == list->tail) ? NULL : node->next;
100039f0:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100039f2:	42ab      	cmp	r3, r5
100039f4:	d019      	beq.n	10003a2a <ready_thread+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
100039f6:	2b00      	cmp	r3, #0
100039f8:	d017      	beq.n	10003a2a <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
100039fa:	260e      	movs	r6, #14
100039fc:	5786      	ldrsb	r6, [r0, r6]
	int32_t b2 = thread_2->base.prio;
100039fe:	220e      	movs	r2, #14
10003a00:	569a      	ldrsb	r2, [r3, r2]
	if (b1 != b2) {
10003a02:	4296      	cmp	r6, r2
10003a04:	d00c      	beq.n	10003a20 <ready_thread+0x54>
		return b2 - b1;
10003a06:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
10003a08:	2a00      	cmp	r2, #0
10003a0a:	dd09      	ble.n	10003a20 <ready_thread+0x54>
	sys_dnode_t *const prev = successor->prev;
10003a0c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10003a0e:	6003      	str	r3, [r0, #0]
	node->prev = prev;
10003a10:	6042      	str	r2, [r0, #4]
	prev->next = node;
10003a12:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10003a14:	6058      	str	r0, [r3, #4]
		update_cache(0);
10003a16:	2000      	movs	r0, #0
10003a18:	f7ff ff36 	bl	10003888 <update_cache>
}
10003a1c:	46bd      	mov	sp, r7
10003a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
10003a20:	42a3      	cmp	r3, r4
10003a22:	d002      	beq.n	10003a2a <ready_thread+0x5e>
10003a24:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003a26:	2b00      	cmp	r3, #0
10003a28:	d1e9      	bne.n	100039fe <ready_thread+0x32>
	node->next = list;
10003a2a:	6005      	str	r5, [r0, #0]
	node->prev = tail;
10003a2c:	6044      	str	r4, [r0, #4]
	tail->next = node;
10003a2e:	6020      	str	r0, [r4, #0]
	list->tail = node;
10003a30:	6208      	str	r0, [r1, #32]
}
10003a32:	e7f0      	b.n	10003a16 <ready_thread+0x4a>
10003a34:	200004ac 	.word	0x200004ac
10003a38:	200004c8 	.word	0x200004c8

10003a3c <z_sched_start>:
{
10003a3c:	b5b0      	push	{r4, r5, r7, lr}
10003a3e:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10003a40:	f3ef 8410 	mrs	r4, PRIMASK
10003a44:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10003a46:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
10003a48:	7b43      	ldrb	r3, [r0, #13]
10003a4a:	4213      	tst	r3, r2
10003a4c:	d106      	bne.n	10003a5c <z_sched_start+0x20>
	if (key != 0U) {
10003a4e:	2c00      	cmp	r4, #0
10003a50:	d102      	bne.n	10003a58 <z_sched_start+0x1c>
	__asm__ volatile(
10003a52:	b662      	cpsie	i
10003a54:	f3bf 8f6f 	isb	sy
}
10003a58:	46bd      	mov	sp, r7
10003a5a:	bdb0      	pop	{r4, r5, r7, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
10003a5c:	4393      	bics	r3, r2
10003a5e:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
10003a60:	f7ff ffb4 	bl	100039cc <ready_thread>
	z_reschedule(&sched_spinlock, key);
10003a64:	0021      	movs	r1, r4
10003a66:	4802      	ldr	r0, [pc, #8]	; (10003a70 <z_sched_start+0x34>)
10003a68:	f7ff fee2 	bl	10003830 <z_reschedule>
10003a6c:	e7f4      	b.n	10003a58 <z_sched_start+0x1c>
10003a6e:	46c0      	nop			; (mov r8, r8)
10003a70:	200004ed 	.word	0x200004ed

10003a74 <unready_thread>:
	if (z_is_thread_queued(thread)) {
10003a74:	220d      	movs	r2, #13
{
10003a76:	b5b0      	push	{r4, r5, r7, lr}
	if (z_is_thread_queued(thread)) {
10003a78:	5682      	ldrsb	r2, [r0, r2]
{
10003a7a:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10003a7c:	7b43      	ldrb	r3, [r0, #13]
10003a7e:	af00      	add	r7, sp, #0
	if (z_is_thread_queued(thread)) {
10003a80:	2a00      	cmp	r2, #0
10003a82:	da04      	bge.n	10003a8e <unready_thread+0x1a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003a84:	227f      	movs	r2, #127	; 0x7f
10003a86:	4013      	ands	r3, r2
10003a88:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003a8a:	f001 fbf2 	bl	10005272 <sys_dlist_remove>
	update_cache(thread == _current);
10003a8e:	4b04      	ldr	r3, [pc, #16]	; (10003aa0 <unready_thread+0x2c>)
10003a90:	6898      	ldr	r0, [r3, #8]
10003a92:	1b00      	subs	r0, r0, r4
10003a94:	4243      	negs	r3, r0
10003a96:	4158      	adcs	r0, r3
10003a98:	f7ff fef6 	bl	10003888 <update_cache>
}
10003a9c:	46bd      	mov	sp, r7
10003a9e:	bdb0      	pop	{r4, r5, r7, pc}
10003aa0:	200004ac 	.word	0x200004ac

10003aa4 <pend>:
{
10003aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003aa6:	0004      	movs	r4, r0
10003aa8:	0015      	movs	r5, r2
10003aaa:	001e      	movs	r6, r3
10003aac:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10003aae:	f3ef 8310 	mrs	r3, PRIMASK
10003ab2:	b672      	cpsid	i
10003ab4:	607b      	str	r3, [r7, #4]
		add_to_waitq_locked(thread, wait_q);
10003ab6:	f001 fc5f 	bl	10005378 <add_to_waitq_locked>
	if (key != 0U) {
10003aba:	687b      	ldr	r3, [r7, #4]
10003abc:	2b00      	cmp	r3, #0
10003abe:	d102      	bne.n	10003ac6 <pend+0x22>
	__asm__ volatile(
10003ac0:	b662      	cpsie	i
10003ac2:	f3bf 8f6f 	isb	sy
	add_thread_timeout(thread, timeout);
10003ac6:	0033      	movs	r3, r6
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10003ac8:	1c6a      	adds	r2, r5, #1
10003aca:	d101      	bne.n	10003ad0 <pend+0x2c>
10003acc:	3301      	adds	r3, #1
10003ace:	d006      	beq.n	10003ade <pend+0x3a>
10003ad0:	0020      	movs	r0, r4
10003ad2:	002a      	movs	r2, r5
10003ad4:	0033      	movs	r3, r6
10003ad6:	4903      	ldr	r1, [pc, #12]	; (10003ae4 <pend+0x40>)
10003ad8:	3018      	adds	r0, #24
10003ada:	f000 fa09 	bl	10003ef0 <z_add_timeout>
}
10003ade:	46bd      	mov	sp, r7
10003ae0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10003ae2:	46c0      	nop			; (mov r8, r8)
10003ae4:	1000533d 	.word	0x1000533d

10003ae8 <z_pend_curr>:
{
10003ae8:	b5b0      	push	{r4, r5, r7, lr}
10003aea:	000c      	movs	r4, r1
	pending_current = _current;
10003aec:	4b07      	ldr	r3, [pc, #28]	; (10003b0c <z_pend_curr+0x24>)
{
10003aee:	af00      	add	r7, sp, #0
	pending_current = _current;
10003af0:	6898      	ldr	r0, [r3, #8]
10003af2:	4b07      	ldr	r3, [pc, #28]	; (10003b10 <z_pend_curr+0x28>)
{
10003af4:	0011      	movs	r1, r2
	pending_current = _current;
10003af6:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
10003af8:	693a      	ldr	r2, [r7, #16]
10003afa:	697b      	ldr	r3, [r7, #20]
10003afc:	f7ff ffd2 	bl	10003aa4 <pend>
10003b00:	0020      	movs	r0, r4
10003b02:	f001 fbce 	bl	100052a2 <z_swap_irqlock>
}
10003b06:	46bd      	mov	sp, r7
10003b08:	bdb0      	pop	{r4, r5, r7, pc}
10003b0a:	46c0      	nop			; (mov r8, r8)
10003b0c:	200004ac 	.word	0x200004ac
10003b10:	200004d8 	.word	0x200004d8

10003b14 <z_impl_k_thread_suspend>:
{
10003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003b16:	0004      	movs	r4, r0
10003b18:	af00      	add	r7, sp, #0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
10003b1a:	3018      	adds	r0, #24
10003b1c:	f001 fca7 	bl	1000546e <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
10003b20:	f3ef 8610 	mrs	r6, PRIMASK
10003b24:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
10003b26:	220d      	movs	r2, #13
10003b28:	56a2      	ldrsb	r2, [r4, r2]
10003b2a:	7b63      	ldrb	r3, [r4, #13]
10003b2c:	2a00      	cmp	r2, #0
10003b2e:	da05      	bge.n	10003b3c <z_impl_k_thread_suspend+0x28>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003b30:	227f      	movs	r2, #127	; 0x7f
10003b32:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10003b34:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003b36:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003b38:	f001 fb9b 	bl	10005272 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10003b3c:	2310      	movs	r3, #16
10003b3e:	7b62      	ldrb	r2, [r4, #13]
		update_cache(thread == _current);
10003b40:	4d0a      	ldr	r5, [pc, #40]	; (10003b6c <z_impl_k_thread_suspend+0x58>)
10003b42:	4313      	orrs	r3, r2
10003b44:	7363      	strb	r3, [r4, #13]
10003b46:	68ab      	ldr	r3, [r5, #8]
10003b48:	1b18      	subs	r0, r3, r4
10003b4a:	4243      	negs	r3, r0
10003b4c:	4158      	adcs	r0, r3
10003b4e:	f7ff fe9b 	bl	10003888 <update_cache>
	if (key != 0U) {
10003b52:	2e00      	cmp	r6, #0
10003b54:	d102      	bne.n	10003b5c <z_impl_k_thread_suspend+0x48>
	__asm__ volatile(
10003b56:	b662      	cpsie	i
10003b58:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
10003b5c:	68ab      	ldr	r3, [r5, #8]
10003b5e:	42a3      	cmp	r3, r4
10003b60:	d101      	bne.n	10003b66 <z_impl_k_thread_suspend+0x52>
		z_reschedule_unlocked();
10003b62:	f001 fbcb 	bl	100052fc <z_reschedule_unlocked>
}
10003b66:	46bd      	mov	sp, r7
10003b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003b6a:	46c0      	nop			; (mov r8, r8)
10003b6c:	200004ac 	.word	0x200004ac

10003b70 <k_sched_unlock>:
{
10003b70:	b5b0      	push	{r4, r5, r7, lr}
10003b72:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10003b74:	f3ef 8410 	mrs	r4, PRIMASK
10003b78:	b672      	cpsid	i
		++_current->base.sched_locked;
10003b7a:	4b08      	ldr	r3, [pc, #32]	; (10003b9c <k_sched_unlock+0x2c>)
		update_cache(0);
10003b7c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
10003b7e:	689a      	ldr	r2, [r3, #8]
10003b80:	7bd3      	ldrb	r3, [r2, #15]
10003b82:	3301      	adds	r3, #1
10003b84:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
10003b86:	f7ff fe7f 	bl	10003888 <update_cache>
	if (key != 0U) {
10003b8a:	2c00      	cmp	r4, #0
10003b8c:	d102      	bne.n	10003b94 <k_sched_unlock+0x24>
	__asm__ volatile(
10003b8e:	b662      	cpsie	i
10003b90:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
10003b94:	f001 fbb2 	bl	100052fc <z_reschedule_unlocked>
}
10003b98:	46bd      	mov	sp, r7
10003b9a:	bdb0      	pop	{r4, r5, r7, pc}
10003b9c:	200004ac 	.word	0x200004ac

10003ba0 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10003ba0:	2100      	movs	r1, #0
{
10003ba2:	b580      	push	{r7, lr}
	list->head = (sys_dnode_t *)list;
10003ba4:	4b04      	ldr	r3, [pc, #16]	; (10003bb8 <z_sched_init+0x18>)
10003ba6:	4a05      	ldr	r2, [pc, #20]	; (10003bbc <z_sched_init+0x1c>)
10003ba8:	af00      	add	r7, sp, #0
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10003baa:	0008      	movs	r0, r1
10003bac:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
10003bae:	621a      	str	r2, [r3, #32]
10003bb0:	f7ff fe1a 	bl	100037e8 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
10003bb4:	46bd      	mov	sp, r7
10003bb6:	bd80      	pop	{r7, pc}
10003bb8:	200004ac 	.word	0x200004ac
10003bbc:	200004c8 	.word	0x200004c8

10003bc0 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
10003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003bc2:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10003bc4:	f3ef 8510 	mrs	r5, PRIMASK
10003bc8:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003bca:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
10003bcc:	4c1a      	ldr	r4, [pc, #104]	; (10003c38 <z_impl_k_yield+0x78>)
10003bce:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003bd0:	7b43      	ldrb	r3, [r0, #13]
10003bd2:	4013      	ands	r3, r2
10003bd4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003bd6:	f001 fb4c 	bl	10005272 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10003bda:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
10003bdc:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10003bde:	4252      	negs	r2, r2
10003be0:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003be2:	4816      	ldr	r0, [pc, #88]	; (10003c3c <z_impl_k_yield+0x7c>)
10003be4:	430a      	orrs	r2, r1
10003be6:	735a      	strb	r2, [r3, #13]
	return list->head == list;
10003be8:	69e2      	ldr	r2, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003bea:	4282      	cmp	r2, r0
10003bec:	d01e      	beq.n	10003c2c <z_impl_k_yield+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003bee:	2a00      	cmp	r2, #0
10003bf0:	d01c      	beq.n	10003c2c <z_impl_k_yield+0x6c>
	int32_t b1 = thread_1->base.prio;
10003bf2:	260e      	movs	r6, #14
	return (node == list->tail) ? NULL : node->next;
10003bf4:	6a21      	ldr	r1, [r4, #32]
10003bf6:	579e      	ldrsb	r6, [r3, r6]
10003bf8:	468c      	mov	ip, r1
	int32_t b2 = thread_2->base.prio;
10003bfa:	210e      	movs	r1, #14
10003bfc:	5651      	ldrsb	r1, [r2, r1]
	if (b1 != b2) {
10003bfe:	428e      	cmp	r6, r1
10003c00:	d00f      	beq.n	10003c22 <z_impl_k_yield+0x62>
		return b2 - b1;
10003c02:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
10003c04:	2900      	cmp	r1, #0
10003c06:	dd0c      	ble.n	10003c22 <z_impl_k_yield+0x62>
	sys_dnode_t *const prev = successor->prev;
10003c08:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
10003c0a:	601a      	str	r2, [r3, #0]
	node->prev = prev;
10003c0c:	6059      	str	r1, [r3, #4]
	prev->next = node;
10003c0e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
10003c10:	6053      	str	r3, [r2, #4]
	update_cache(1);
10003c12:	2001      	movs	r0, #1
10003c14:	f7ff fe38 	bl	10003888 <update_cache>
10003c18:	0028      	movs	r0, r5
10003c1a:	f001 fb42 	bl	100052a2 <z_swap_irqlock>
	z_swap(&sched_spinlock, key);
}
10003c1e:	46bd      	mov	sp, r7
10003c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
10003c22:	4562      	cmp	r2, ip
10003c24:	d002      	beq.n	10003c2c <z_impl_k_yield+0x6c>
10003c26:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003c28:	2a00      	cmp	r2, #0
10003c2a:	d1e6      	bne.n	10003bfa <z_impl_k_yield+0x3a>
	sys_dnode_t *const tail = list->tail;
10003c2c:	6a22      	ldr	r2, [r4, #32]
	node->next = list;
10003c2e:	6018      	str	r0, [r3, #0]
	node->prev = tail;
10003c30:	605a      	str	r2, [r3, #4]
	tail->next = node;
10003c32:	6013      	str	r3, [r2, #0]
	list->tail = node;
10003c34:	6223      	str	r3, [r4, #32]
}
10003c36:	e7ec      	b.n	10003c12 <z_impl_k_yield+0x52>
10003c38:	200004ac 	.word	0x200004ac
10003c3c:	200004c8 	.word	0x200004c8

10003c40 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
10003c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
10003c42:	0006      	movs	r6, r0
{
10003c44:	0004      	movs	r4, r0
10003c46:	000d      	movs	r5, r1
10003c48:	af00      	add	r7, sp, #0
	if (ticks == 0) {
10003c4a:	430e      	orrs	r6, r1
10003c4c:	d103      	bne.n	10003c56 <z_tick_sleep+0x16>
	z_impl_k_yield();
10003c4e:	f7ff ffb7 	bl	10003bc0 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
10003c52:	2000      	movs	r0, #0
10003c54:	e035      	b.n	10003cc2 <z_tick_sleep+0x82>
	if (Z_TICK_ABS(ticks) <= 0) {
10003c56:	2202      	movs	r2, #2
10003c58:	4252      	negs	r2, r2
10003c5a:	17d3      	asrs	r3, r2, #31
10003c5c:	1b12      	subs	r2, r2, r4
10003c5e:	41ab      	sbcs	r3, r5
10003c60:	2b00      	cmp	r3, #0
10003c62:	dc30      	bgt.n	10003cc6 <z_tick_sleep+0x86>
10003c64:	d101      	bne.n	10003c6a <z_tick_sleep+0x2a>
10003c66:	2a00      	cmp	r2, #0
10003c68:	d12d      	bne.n	10003cc6 <z_tick_sleep+0x86>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
10003c6a:	f001 fc2d 	bl	100054c8 <sys_clock_tick_get_32>
10003c6e:	1903      	adds	r3, r0, r4
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10003c70:	607b      	str	r3, [r7, #4]
10003c72:	f3ef 8310 	mrs	r3, PRIMASK
10003c76:	b672      	cpsid	i
	pending_current = _current;
10003c78:	4e15      	ldr	r6, [pc, #84]	; (10003cd0 <z_tick_sleep+0x90>)
10003c7a:	603b      	str	r3, [r7, #0]
10003c7c:	68b2      	ldr	r2, [r6, #8]
10003c7e:	4b15      	ldr	r3, [pc, #84]	; (10003cd4 <z_tick_sleep+0x94>)
	unready_thread(_current);
10003c80:	0010      	movs	r0, r2
	pending_current = _current;
10003c82:	601a      	str	r2, [r3, #0]
	unready_thread(_current);
10003c84:	f7ff fef6 	bl	10003a74 <unready_thread>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10003c88:	68b0      	ldr	r0, [r6, #8]
10003c8a:	0022      	movs	r2, r4
10003c8c:	002b      	movs	r3, r5
10003c8e:	4912      	ldr	r1, [pc, #72]	; (10003cd8 <z_tick_sleep+0x98>)
10003c90:	3018      	adds	r0, #24
10003c92:	f000 f92d 	bl	10003ef0 <z_add_timeout>
10003c96:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
10003c98:	68b2      	ldr	r2, [r6, #8]
10003c9a:	6838      	ldr	r0, [r7, #0]
10003c9c:	7b51      	ldrb	r1, [r2, #13]
10003c9e:	430b      	orrs	r3, r1
10003ca0:	7353      	strb	r3, [r2, #13]
10003ca2:	f001 fafe 	bl	100052a2 <z_swap_irqlock>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
10003ca6:	f001 fc0f 	bl	100054c8 <sys_clock_tick_get_32>
10003caa:	2300      	movs	r3, #0
10003cac:	0004      	movs	r4, r0
10003cae:	001d      	movs	r5, r3
10003cb0:	687a      	ldr	r2, [r7, #4]
10003cb2:	1b12      	subs	r2, r2, r4
10003cb4:	41ab      	sbcs	r3, r5
10003cb6:	0010      	movs	r0, r2
	if (ticks > 0) {
10003cb8:	42ab      	cmp	r3, r5
10003cba:	dc02      	bgt.n	10003cc2 <z_tick_sleep+0x82>
10003cbc:	d1c9      	bne.n	10003c52 <z_tick_sleep+0x12>
10003cbe:	42aa      	cmp	r2, r5
10003cc0:	d0c7      	beq.n	10003c52 <z_tick_sleep+0x12>
}
10003cc2:	46bd      	mov	sp, r7
10003cc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10003cc6:	2002      	movs	r0, #2
10003cc8:	4240      	negs	r0, r0
10003cca:	1b03      	subs	r3, r0, r4
10003ccc:	e7d0      	b.n	10003c70 <z_tick_sleep+0x30>
10003cce:	46c0      	nop			; (mov r8, r8)
10003cd0:	200004ac 	.word	0x200004ac
10003cd4:	200004d8 	.word	0x200004d8
10003cd8:	1000533d 	.word	0x1000533d

10003cdc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
10003cdc:	b5b0      	push	{r4, r5, r7, lr}
10003cde:	000b      	movs	r3, r1
10003ce0:	000c      	movs	r4, r1
10003ce2:	af00      	add	r7, sp, #0
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10003ce4:	1c42      	adds	r2, r0, #1
10003ce6:	d108      	bne.n	10003cfa <z_impl_k_sleep+0x1e>
10003ce8:	3301      	adds	r3, #1
10003cea:	d106      	bne.n	10003cfa <z_impl_k_sleep+0x1e>
		k_thread_suspend(_current);
10003cec:	4b07      	ldr	r3, [pc, #28]	; (10003d0c <z_impl_k_sleep+0x30>)
10003cee:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
10003cf0:	f7ff ff10 	bl	10003b14 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
10003cf4:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
10003cf6:	46bd      	mov	sp, r7
10003cf8:	bdb0      	pop	{r4, r5, r7, pc}
	ticks = z_tick_sleep(ticks);
10003cfa:	0021      	movs	r1, r4
10003cfc:	f7ff ffa0 	bl	10003c40 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
10003d00:	220a      	movs	r2, #10
10003d02:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
10003d04:	17c1      	asrs	r1, r0, #31
10003d06:	f7fc fafd 	bl	10000304 <__aeabi_uldivmod>
	return ret;
10003d0a:	e7f4      	b.n	10003cf6 <z_impl_k_sleep+0x1a>
10003d0c:	200004ac 	.word	0x200004ac

10003d10 <z_impl_z_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_z_current_get(void)
{
10003d10:	b580      	push	{r7, lr}
10003d12:	af00      	add	r7, sp, #0

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
10003d14:	46bd      	mov	sp, r7
	k_tid_t ret = _current_cpu->current;
10003d16:	4b01      	ldr	r3, [pc, #4]	; (10003d1c <z_impl_z_current_get+0xc>)
	return ret;
10003d18:	6898      	ldr	r0, [r3, #8]
}
10003d1a:	bd80      	pop	{r7, pc}
10003d1c:	200004ac 	.word	0x200004ac

10003d20 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003d22:	0004      	movs	r4, r0
10003d24:	af00      	add	r7, sp, #0
10003d26:	f3ef 8610 	mrs	r6, PRIMASK
10003d2a:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
10003d2c:	7b03      	ldrb	r3, [r0, #12]
10003d2e:	07db      	lsls	r3, r3, #31
10003d30:	d509      	bpl.n	10003d46 <z_thread_abort+0x26>
	if (key != 0U) {
10003d32:	2e00      	cmp	r6, #0
10003d34:	d102      	bne.n	10003d3c <z_thread_abort+0x1c>
	__asm__ volatile(
10003d36:	b662      	cpsie	i
10003d38:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
10003d3c:	2004      	movs	r0, #4
10003d3e:	b662      	cpsie	i
10003d40:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10003d42:	46bd      	mov	sp, r7
10003d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
10003d46:	2308      	movs	r3, #8
10003d48:	7b42      	ldrb	r2, [r0, #13]
10003d4a:	421a      	tst	r2, r3
10003d4c:	d005      	beq.n	10003d5a <z_thread_abort+0x3a>
	if (key != 0U) {
10003d4e:	2e00      	cmp	r6, #0
10003d50:	d1f7      	bne.n	10003d42 <z_thread_abort+0x22>
	__asm__ volatile(
10003d52:	b662      	cpsie	i
10003d54:	f3bf 8f6f 	isb	sy
10003d58:	e7f3      	b.n	10003d42 <z_thread_abort+0x22>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10003d5a:	2120      	movs	r1, #32
10003d5c:	0010      	movs	r0, r2
10003d5e:	4388      	bics	r0, r1
10003d60:	0001      	movs	r1, r0
10003d62:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
10003d64:	b248      	sxtb	r0, r1
10003d66:	2800      	cmp	r0, #0
10003d68:	db20      	blt.n	10003dac <z_thread_abort+0x8c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
10003d6a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
10003d6c:	68a3      	ldr	r3, [r4, #8]
10003d6e:	2b00      	cmp	r3, #0
10003d70:	d002      	beq.n	10003d78 <z_thread_abort+0x58>
			unpend_thread_no_timeout(thread);
10003d72:	0020      	movs	r0, r4
10003d74:	f001 fa88 	bl	10005288 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
10003d78:	0020      	movs	r0, r4
10003d7a:	3018      	adds	r0, #24
10003d7c:	f001 fb77 	bl	1000546e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
10003d80:	0023      	movs	r3, r4
	return list->head == list;
10003d82:	6da5      	ldr	r5, [r4, #88]	; 0x58
10003d84:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003d86:	429d      	cmp	r5, r3
10003d88:	d001      	beq.n	10003d8e <z_thread_abort+0x6e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
10003d8a:	2d00      	cmp	r5, #0
10003d8c:	d116      	bne.n	10003dbc <z_thread_abort+0x9c>
		update_cache(1);
10003d8e:	2001      	movs	r0, #1
10003d90:	f7ff fd7a 	bl	10003888 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
10003d94:	4b10      	ldr	r3, [pc, #64]	; (10003dd8 <z_thread_abort+0xb8>)
10003d96:	689b      	ldr	r3, [r3, #8]
10003d98:	42a3      	cmp	r3, r4
10003d9a:	d1d8      	bne.n	10003d4e <z_thread_abort+0x2e>
10003d9c:	f3ef 8305 	mrs	r3, IPSR
10003da0:	2b00      	cmp	r3, #0
10003da2:	d1d4      	bne.n	10003d4e <z_thread_abort+0x2e>
10003da4:	0030      	movs	r0, r6
10003da6:	f001 fa7c 	bl	100052a2 <z_swap_irqlock>
10003daa:	e7d0      	b.n	10003d4e <z_thread_abort+0x2e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003dac:	215f      	movs	r1, #95	; 0x5f
10003dae:	400a      	ands	r2, r1
10003db0:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10003db2:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003db4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003db6:	f001 fa5c 	bl	10005272 <sys_dlist_remove>
}
10003dba:	e7d7      	b.n	10003d6c <z_thread_abort+0x4c>
		unpend_thread_no_timeout(thread);
10003dbc:	0028      	movs	r0, r5
10003dbe:	f001 fa63 	bl	10005288 <unpend_thread_no_timeout>
10003dc2:	0028      	movs	r0, r5
10003dc4:	3018      	adds	r0, #24
10003dc6:	f001 fb52 	bl	1000546e <z_abort_timeout>
10003dca:	2300      	movs	r3, #0
		ready_thread(thread);
10003dcc:	0028      	movs	r0, r5
10003dce:	67ab      	str	r3, [r5, #120]	; 0x78
10003dd0:	f7ff fdfc 	bl	100039cc <ready_thread>
10003dd4:	e7d4      	b.n	10003d80 <z_thread_abort+0x60>
10003dd6:	46c0      	nop			; (mov r8, r8)
10003dd8:	200004ac 	.word	0x200004ac

10003ddc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
10003ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003dde:	af02      	add	r7, sp, #8
10003de0:	6a3c      	ldr	r4, [r7, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
10003de2:	69bd      	ldr	r5, [r7, #24]
10003de4:	69fe      	ldr	r6, [r7, #28]
10003de6:	9500      	str	r5, [sp, #0]
10003de8:	9601      	str	r6, [sp, #4]
10003dea:	f7ff fe7d 	bl	10003ae8 <z_pend_curr>

	if (data != NULL) {
10003dee:	2c00      	cmp	r4, #0
10003df0:	d003      	beq.n	10003dfa <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
10003df2:	4b03      	ldr	r3, [pc, #12]	; (10003e00 <z_sched_wait+0x24>)
10003df4:	689b      	ldr	r3, [r3, #8]
10003df6:	695b      	ldr	r3, [r3, #20]
10003df8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
10003dfa:	46bd      	mov	sp, r7
10003dfc:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
10003dfe:	46c0      	nop			; (mov r8, r8)
10003e00:	200004ac 	.word	0x200004ac

10003e04 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
10003e04:	b580      	push	{r7, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
10003e06:	4807      	ldr	r0, [pc, #28]	; (10003e24 <z_data_copy+0x20>)
10003e08:	4a07      	ldr	r2, [pc, #28]	; (10003e28 <z_data_copy+0x24>)
{
10003e0a:	af00      	add	r7, sp, #0
		       __data_region_end - __data_region_start);
10003e0c:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10003e0e:	4907      	ldr	r1, [pc, #28]	; (10003e2c <z_data_copy+0x28>)
10003e10:	f001 f9ab 	bl	1000516a <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
10003e14:	4a06      	ldr	r2, [pc, #24]	; (10003e30 <z_data_copy+0x2c>)
10003e16:	4907      	ldr	r1, [pc, #28]	; (10003e34 <z_data_copy+0x30>)
10003e18:	4807      	ldr	r0, [pc, #28]	; (10003e38 <z_data_copy+0x34>)
10003e1a:	f001 f9a6 	bl	1000516a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
10003e1e:	46bd      	mov	sp, r7
10003e20:	bd80      	pop	{r7, pc}
10003e22:	46c0      	nop			; (mov r8, r8)
10003e24:	20000000 	.word	0x20000000
10003e28:	2000025c 	.word	0x2000025c
10003e2c:	10005a08 	.word	0x10005a08
10003e30:	00000000 	.word	0x00000000
10003e34:	10005a08 	.word	0x10005a08
10003e38:	20000000 	.word	0x20000000

10003e3c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10003e3c:	2000      	movs	r0, #0
{
10003e3e:	b580      	push	{r7, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10003e40:	4b04      	ldr	r3, [pc, #16]	; (10003e54 <elapsed+0x18>)
{
10003e42:	af00      	add	r7, sp, #0
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10003e44:	681b      	ldr	r3, [r3, #0]
10003e46:	4283      	cmp	r3, r0
10003e48:	d101      	bne.n	10003e4e <elapsed+0x12>
10003e4a:	f7fe fe15 	bl	10002a78 <sys_clock_elapsed>
}
10003e4e:	46bd      	mov	sp, r7
10003e50:	bd80      	pop	{r7, pc}
10003e52:	46c0      	nop			; (mov r8, r8)
10003e54:	200004e4 	.word	0x200004e4

10003e58 <next_timeout>:

static int32_t next_timeout(void)
{
10003e58:	b5b0      	push	{r4, r5, r7, lr}
	return list->head == list;
10003e5a:	4b13      	ldr	r3, [pc, #76]	; (10003ea8 <next_timeout+0x50>)
10003e5c:	af00      	add	r7, sp, #0
10003e5e:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003e60:	429c      	cmp	r4, r3
10003e62:	d100      	bne.n	10003e66 <next_timeout+0xe>
10003e64:	2400      	movs	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
10003e66:	f7ff ffe9 	bl	10003e3c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
10003e6a:	2c00      	cmp	r4, #0
10003e6c:	d01a      	beq.n	10003ea4 <next_timeout+0x4c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
10003e6e:	0002      	movs	r2, r0
10003e70:	17c3      	asrs	r3, r0, #31
10003e72:	6920      	ldr	r0, [r4, #16]
10003e74:	6961      	ldr	r1, [r4, #20]
10003e76:	1a80      	subs	r0, r0, r2
10003e78:	4199      	sbcs	r1, r3
10003e7a:	0002      	movs	r2, r0
10003e7c:	1e0b      	subs	r3, r1, #0
	if ((to == NULL) ||
10003e7e:	dc11      	bgt.n	10003ea4 <next_timeout+0x4c>
10003e80:	2900      	cmp	r1, #0
10003e82:	d103      	bne.n	10003e8c <next_timeout+0x34>
10003e84:	2180      	movs	r1, #128	; 0x80
10003e86:	0609      	lsls	r1, r1, #24
10003e88:	428a      	cmp	r2, r1
10003e8a:	d20b      	bcs.n	10003ea4 <next_timeout+0x4c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
10003e8c:	43d8      	mvns	r0, r3
10003e8e:	17c0      	asrs	r0, r0, #31
10003e90:	4010      	ands	r0, r2
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
10003e92:	4b06      	ldr	r3, [pc, #24]	; (10003eac <next_timeout+0x54>)
10003e94:	691b      	ldr	r3, [r3, #16]
10003e96:	2b00      	cmp	r3, #0
10003e98:	d002      	beq.n	10003ea0 <next_timeout+0x48>
10003e9a:	4298      	cmp	r0, r3
10003e9c:	dd00      	ble.n	10003ea0 <next_timeout+0x48>
10003e9e:	0018      	movs	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
10003ea0:	46bd      	mov	sp, r7
10003ea2:	bdb0      	pop	{r4, r5, r7, pc}
		ret = MAX_WAIT;
10003ea4:	4802      	ldr	r0, [pc, #8]	; (10003eb0 <next_timeout+0x58>)
10003ea6:	e7f4      	b.n	10003e92 <next_timeout+0x3a>
10003ea8:	200001e4 	.word	0x200001e4
10003eac:	200004ac 	.word	0x200004ac
10003eb0:	7fffffff 	.word	0x7fffffff

10003eb4 <remove_timeout>:
{
10003eb4:	b5b0      	push	{r4, r5, r7, lr}
	return (node == list->tail) ? NULL : node->next;
10003eb6:	6803      	ldr	r3, [r0, #0]
10003eb8:	af00      	add	r7, sp, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10003eba:	2800      	cmp	r0, #0
10003ebc:	d00d      	beq.n	10003eda <remove_timeout+0x26>
	return (node == list->tail) ? NULL : node->next;
10003ebe:	4a0b      	ldr	r2, [pc, #44]	; (10003eec <remove_timeout+0x38>)
10003ec0:	6852      	ldr	r2, [r2, #4]
10003ec2:	4290      	cmp	r0, r2
10003ec4:	d009      	beq.n	10003eda <remove_timeout+0x26>
	if (next(t) != NULL) {
10003ec6:	2b00      	cmp	r3, #0
10003ec8:	d007      	beq.n	10003eda <remove_timeout+0x26>
		next(t)->dticks += t->dticks;
10003eca:	691c      	ldr	r4, [r3, #16]
10003ecc:	695d      	ldr	r5, [r3, #20]
10003ece:	6901      	ldr	r1, [r0, #16]
10003ed0:	6942      	ldr	r2, [r0, #20]
10003ed2:	1864      	adds	r4, r4, r1
10003ed4:	4155      	adcs	r5, r2
10003ed6:	611c      	str	r4, [r3, #16]
10003ed8:	615d      	str	r5, [r3, #20]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
10003eda:	6842      	ldr	r2, [r0, #4]
}
10003edc:	46bd      	mov	sp, r7
	sys_dnode_t *const next = node->next;

	prev->next = next;
10003ede:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10003ee0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10003ee2:	2300      	movs	r3, #0
10003ee4:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10003ee6:	6043      	str	r3, [r0, #4]
10003ee8:	bdb0      	pop	{r4, r5, r7, pc}
10003eea:	46c0      	nop			; (mov r8, r8)
10003eec:	200001e4 	.word	0x200001e4

10003ef0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
10003ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003ef2:	0006      	movs	r6, r0
10003ef4:	0014      	movs	r4, r2
10003ef6:	001d      	movs	r5, r3
10003ef8:	af00      	add	r7, sp, #0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10003efa:	1c53      	adds	r3, r2, #1
10003efc:	d101      	bne.n	10003f02 <z_add_timeout+0x12>
10003efe:	1c6b      	adds	r3, r5, #1
10003f00:	d06a      	beq.n	10003fd8 <z_add_timeout+0xe8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
10003f02:	60b1      	str	r1, [r6, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
10003f04:	f3ef 8310 	mrs	r3, PRIMASK
10003f08:	b672      	cpsid	i

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
10003f0a:	2002      	movs	r0, #2
10003f0c:	4240      	negs	r0, r0
10003f0e:	17c1      	asrs	r1, r0, #31
10003f10:	607b      	str	r3, [r7, #4]
10003f12:	0002      	movs	r2, r0
10003f14:	000b      	movs	r3, r1
10003f16:	1b12      	subs	r2, r2, r4
10003f18:	41ab      	sbcs	r3, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
10003f1a:	2b00      	cmp	r3, #0
10003f1c:	db1d      	blt.n	10003f5a <z_add_timeout+0x6a>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
10003f1e:	4b2f      	ldr	r3, [pc, #188]	; (10003fdc <z_add_timeout+0xec>)
10003f20:	681a      	ldr	r2, [r3, #0]
10003f22:	685b      	ldr	r3, [r3, #4]
10003f24:	1a80      	subs	r0, r0, r2
10003f26:	4199      	sbcs	r1, r3
10003f28:	1b00      	subs	r0, r0, r4
10003f2a:	41a9      	sbcs	r1, r5

			to->dticks = MAX(1, ticks);
10003f2c:	0002      	movs	r2, r0
10003f2e:	1e0b      	subs	r3, r1, #0
10003f30:	dc05      	bgt.n	10003f3e <z_add_timeout+0x4e>
10003f32:	2900      	cmp	r1, #0
10003f34:	d101      	bne.n	10003f3a <z_add_timeout+0x4a>
10003f36:	2800      	cmp	r0, #0
10003f38:	d101      	bne.n	10003f3e <z_add_timeout+0x4e>
10003f3a:	2201      	movs	r2, #1
10003f3c:	2300      	movs	r3, #0
10003f3e:	6132      	str	r2, [r6, #16]
10003f40:	6173      	str	r3, [r6, #20]
	return list->head == list;
10003f42:	4c27      	ldr	r4, [pc, #156]	; (10003fe0 <z_add_timeout+0xf0>)
	sys_dnode_t *const tail = list->tail;
10003f44:	6863      	ldr	r3, [r4, #4]
	return list->head == list;
10003f46:	6825      	ldr	r5, [r4, #0]
	sys_dnode_t *const tail = list->tail;
10003f48:	469c      	mov	ip, r3
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003f4a:	42a5      	cmp	r5, r4
10003f4c:	d119      	bne.n	10003f82 <z_add_timeout+0x92>
	node->prev = tail;
10003f4e:	4663      	mov	r3, ip
	node->next = list;
10003f50:	6034      	str	r4, [r6, #0]
	node->prev = tail;
10003f52:	6073      	str	r3, [r6, #4]
	tail->next = node;
10003f54:	601e      	str	r6, [r3, #0]
	list->tail = node;
10003f56:	6066      	str	r6, [r4, #4]
}
10003f58:	e027      	b.n	10003faa <z_add_timeout+0xba>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
10003f5a:	f7ff ff6f 	bl	10003e3c <elapsed>
10003f5e:	2201      	movs	r2, #1
10003f60:	2300      	movs	r3, #0
10003f62:	18a4      	adds	r4, r4, r2
10003f64:	415d      	adcs	r5, r3
10003f66:	0002      	movs	r2, r0
10003f68:	17c3      	asrs	r3, r0, #31
10003f6a:	18a4      	adds	r4, r4, r2
10003f6c:	415d      	adcs	r5, r3
10003f6e:	6134      	str	r4, [r6, #16]
10003f70:	6175      	str	r5, [r6, #20]
10003f72:	e7e6      	b.n	10003f42 <z_add_timeout+0x52>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
10003f74:	1a12      	subs	r2, r2, r0
10003f76:	418b      	sbcs	r3, r1
10003f78:	6132      	str	r2, [r6, #16]
10003f7a:	6173      	str	r3, [r6, #20]
	return (node == list->tail) ? NULL : node->next;
10003f7c:	45ac      	cmp	ip, r5
10003f7e:	d0e6      	beq.n	10003f4e <z_add_timeout+0x5e>
10003f80:	682d      	ldr	r5, [r5, #0]
		for (t = first(); t != NULL; t = next(t)) {
10003f82:	2d00      	cmp	r5, #0
10003f84:	d0e3      	beq.n	10003f4e <z_add_timeout+0x5e>
			if (t->dticks > to->dticks) {
10003f86:	6928      	ldr	r0, [r5, #16]
10003f88:	6969      	ldr	r1, [r5, #20]
10003f8a:	6932      	ldr	r2, [r6, #16]
10003f8c:	6973      	ldr	r3, [r6, #20]
10003f8e:	4299      	cmp	r1, r3
10003f90:	dc02      	bgt.n	10003f98 <z_add_timeout+0xa8>
10003f92:	d1ef      	bne.n	10003f74 <z_add_timeout+0x84>
10003f94:	4290      	cmp	r0, r2
10003f96:	d9ed      	bls.n	10003f74 <z_add_timeout+0x84>
				t->dticks -= to->dticks;
10003f98:	1a80      	subs	r0, r0, r2
10003f9a:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
10003f9c:	686b      	ldr	r3, [r5, #4]
10003f9e:	6128      	str	r0, [r5, #16]
10003fa0:	6169      	str	r1, [r5, #20]
	node->prev = prev;
10003fa2:	6073      	str	r3, [r6, #4]
	node->next = successor;
10003fa4:	6035      	str	r5, [r6, #0]
	prev->next = node;
10003fa6:	601e      	str	r6, [r3, #0]
	successor->prev = node;
10003fa8:	606e      	str	r6, [r5, #4]
	return list->head == list;
10003faa:	4a0d      	ldr	r2, [pc, #52]	; (10003fe0 <z_add_timeout+0xf0>)
10003fac:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003fae:	4293      	cmp	r3, r2
10003fb0:	d00c      	beq.n	10003fcc <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
10003fb2:	429e      	cmp	r6, r3
10003fb4:	d10a      	bne.n	10003fcc <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
10003fb6:	f7ff ff4f 	bl	10003e58 <next_timeout>

			if (next_time == 0 ||
10003fba:	2800      	cmp	r0, #0
10003fbc:	d003      	beq.n	10003fc6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
10003fbe:	4b09      	ldr	r3, [pc, #36]	; (10003fe4 <z_add_timeout+0xf4>)
			if (next_time == 0 ||
10003fc0:	691b      	ldr	r3, [r3, #16]
10003fc2:	4283      	cmp	r3, r0
10003fc4:	d002      	beq.n	10003fcc <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
10003fc6:	2100      	movs	r1, #0
10003fc8:	f7fe fcd2 	bl	10002970 <sys_clock_set_timeout>
	if (key != 0U) {
10003fcc:	687b      	ldr	r3, [r7, #4]
10003fce:	2b00      	cmp	r3, #0
10003fd0:	d102      	bne.n	10003fd8 <z_add_timeout+0xe8>
	__asm__ volatile(
10003fd2:	b662      	cpsie	i
10003fd4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
10003fd8:	46bd      	mov	sp, r7
10003fda:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10003fdc:	20000360 	.word	0x20000360
10003fe0:	200001e4 	.word	0x200001e4
10003fe4:	200004ac 	.word	0x200004ac

10003fe8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
10003fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
10003fea:	b089      	sub	sp, #36	; 0x24
10003fec:	af00      	add	r7, sp, #0
10003fee:	0004      	movs	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
10003ff0:	f7ff fcac 	bl	1000394c <z_time_slice>
	__asm__ volatile("mrs %0, PRIMASK;"
10003ff4:	f3ef 8610 	mrs	r6, PRIMASK
10003ff8:	b672      	cpsid	i
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
10003ffa:	4b32      	ldr	r3, [pc, #200]	; (100040c4 <sys_clock_announce+0xdc>)
10003ffc:	601c      	str	r4, [r3, #0]
	return list->head == list;
10003ffe:	4b32      	ldr	r3, [pc, #200]	; (100040c8 <sys_clock_announce+0xe0>)

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
10004000:	4a32      	ldr	r2, [pc, #200]	; (100040cc <sys_clock_announce+0xe4>)
10004002:	681c      	ldr	r4, [r3, #0]
10004004:	6811      	ldr	r1, [r2, #0]
10004006:	6852      	ldr	r2, [r2, #4]
10004008:	60b9      	str	r1, [r7, #8]
1000400a:	60fa      	str	r2, [r7, #12]
	while (first() != NULL && first()->dticks <= announce_remaining) {
1000400c:	4a2d      	ldr	r2, [pc, #180]	; (100040c4 <sys_clock_announce+0xdc>)
1000400e:	4694      	mov	ip, r2
10004010:	6815      	ldr	r5, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004012:	429c      	cmp	r4, r3
10004014:	d019      	beq.n	1000404a <sys_clock_announce+0x62>
10004016:	2c00      	cmp	r4, #0
10004018:	d017      	beq.n	1000404a <sys_clock_announce+0x62>
1000401a:	6922      	ldr	r2, [r4, #16]
1000401c:	6963      	ldr	r3, [r4, #20]
1000401e:	61ba      	str	r2, [r7, #24]
10004020:	61fb      	str	r3, [r7, #28]
10004022:	69fa      	ldr	r2, [r7, #28]
10004024:	17eb      	asrs	r3, r5, #31
10004026:	613d      	str	r5, [r7, #16]
10004028:	617b      	str	r3, [r7, #20]
1000402a:	429a      	cmp	r2, r3
1000402c:	dc03      	bgt.n	10004036 <sys_clock_announce+0x4e>
1000402e:	d125      	bne.n	1000407c <sys_clock_announce+0x94>
10004030:	69ba      	ldr	r2, [r7, #24]
10004032:	42aa      	cmp	r2, r5
10004034:	d922      	bls.n	1000407c <sys_clock_announce+0x94>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
10004036:	693a      	ldr	r2, [r7, #16]
10004038:	697b      	ldr	r3, [r7, #20]
1000403a:	69b8      	ldr	r0, [r7, #24]
1000403c:	69f9      	ldr	r1, [r7, #28]
1000403e:	1a80      	subs	r0, r0, r2
10004040:	4199      	sbcs	r1, r3
10004042:	0002      	movs	r2, r0
10004044:	000b      	movs	r3, r1
10004046:	6122      	str	r2, [r4, #16]
10004048:	6163      	str	r3, [r4, #20]
	}

	curr_tick += announce_remaining;
1000404a:	68b8      	ldr	r0, [r7, #8]
1000404c:	68f9      	ldr	r1, [r7, #12]
1000404e:	002a      	movs	r2, r5
10004050:	17eb      	asrs	r3, r5, #31
10004052:	1812      	adds	r2, r2, r0
10004054:	414b      	adcs	r3, r1
10004056:	481d      	ldr	r0, [pc, #116]	; (100040cc <sys_clock_announce+0xe4>)
	announce_remaining = 0;
10004058:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
1000405a:	6002      	str	r2, [r0, #0]
1000405c:	6043      	str	r3, [r0, #4]
	announce_remaining = 0;
1000405e:	4663      	mov	r3, ip
10004060:	601c      	str	r4, [r3, #0]

	sys_clock_set_timeout(next_timeout(), false);
10004062:	f7ff fef9 	bl	10003e58 <next_timeout>
10004066:	0021      	movs	r1, r4
10004068:	f7fe fc82 	bl	10002970 <sys_clock_set_timeout>
	if (key != 0U) {
1000406c:	42a6      	cmp	r6, r4
1000406e:	d102      	bne.n	10004076 <sys_clock_announce+0x8e>
	__asm__ volatile(
10004070:	b662      	cpsie	i
10004072:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
10004076:	46bd      	mov	sp, r7
10004078:	b009      	add	sp, #36	; 0x24
1000407a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		curr_tick += dt;
1000407c:	69bb      	ldr	r3, [r7, #24]
1000407e:	68b8      	ldr	r0, [r7, #8]
10004080:	68f9      	ldr	r1, [r7, #12]
10004082:	603b      	str	r3, [r7, #0]
10004084:	17db      	asrs	r3, r3, #31
10004086:	607b      	str	r3, [r7, #4]
10004088:	683a      	ldr	r2, [r7, #0]
1000408a:	687b      	ldr	r3, [r7, #4]
1000408c:	1880      	adds	r0, r0, r2
1000408e:	4159      	adcs	r1, r3
10004090:	4b0e      	ldr	r3, [pc, #56]	; (100040cc <sys_clock_announce+0xe4>)
10004092:	6018      	str	r0, [r3, #0]
10004094:	6059      	str	r1, [r3, #4]
		announce_remaining -= dt;
10004096:	69bb      	ldr	r3, [r7, #24]
		remove_timeout(t);
10004098:	0020      	movs	r0, r4
		announce_remaining -= dt;
1000409a:	1aea      	subs	r2, r5, r3
1000409c:	4b09      	ldr	r3, [pc, #36]	; (100040c4 <sys_clock_announce+0xdc>)
1000409e:	601a      	str	r2, [r3, #0]
		t->dticks = 0;
100040a0:	2200      	movs	r2, #0
100040a2:	2300      	movs	r3, #0
100040a4:	6122      	str	r2, [r4, #16]
100040a6:	6163      	str	r3, [r4, #20]
		remove_timeout(t);
100040a8:	f7ff ff04 	bl	10003eb4 <remove_timeout>
	if (key != 0U) {
100040ac:	2e00      	cmp	r6, #0
100040ae:	d102      	bne.n	100040b6 <sys_clock_announce+0xce>
	__asm__ volatile(
100040b0:	b662      	cpsie	i
100040b2:	f3bf 8f6f 	isb	sy
		t->fn(t);
100040b6:	0020      	movs	r0, r4
100040b8:	68a3      	ldr	r3, [r4, #8]
100040ba:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
100040bc:	f3ef 8610 	mrs	r6, PRIMASK
100040c0:	b672      	cpsid	i
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
100040c2:	e79c      	b.n	10003ffe <sys_clock_announce+0x16>
100040c4:	200004e4 	.word	0x200004e4
100040c8:	200001e4 	.word	0x200001e4
100040cc:	20000360 	.word	0x20000360

100040d0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
100040d0:	b5b0      	push	{r4, r5, r7, lr}
100040d2:	af00      	add	r7, sp, #0
100040d4:	f3ef 8410 	mrs	r4, PRIMASK
100040d8:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
100040da:	f7fe fccd 	bl	10002a78 <sys_clock_elapsed>
100040de:	2300      	movs	r3, #0
100040e0:	0002      	movs	r2, r0
100040e2:	4906      	ldr	r1, [pc, #24]	; (100040fc <sys_clock_tick_get+0x2c>)
100040e4:	6808      	ldr	r0, [r1, #0]
100040e6:	6849      	ldr	r1, [r1, #4]
100040e8:	1880      	adds	r0, r0, r2
100040ea:	4159      	adcs	r1, r3
	if (key != 0U) {
100040ec:	429c      	cmp	r4, r3
100040ee:	d102      	bne.n	100040f6 <sys_clock_tick_get+0x26>
	__asm__ volatile(
100040f0:	b662      	cpsie	i
100040f2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
100040f6:	46bd      	mov	sp, r7
100040f8:	bdb0      	pop	{r4, r5, r7, pc}
100040fa:	46c0      	nop			; (mov r8, r8)
100040fc:	20000360 	.word	0x20000360

10004100 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
10004100:	b5b0      	push	{r4, r5, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
10004102:	4c07      	ldr	r4, [pc, #28]	; (10004120 <statics_init+0x20>)
{
10004104:	af00      	add	r7, sp, #0
	STRUCT_SECTION_FOREACH(k_heap, h) {
10004106:	4b07      	ldr	r3, [pc, #28]	; (10004124 <statics_init+0x24>)
10004108:	429c      	cmp	r4, r3
1000410a:	d302      	bcc.n	10004112 <statics_init+0x12>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
1000410c:	46bd      	mov	sp, r7
1000410e:	2000      	movs	r0, #0
10004110:	bdb0      	pop	{r4, r5, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
10004112:	0020      	movs	r0, r4
10004114:	68a2      	ldr	r2, [r4, #8]
10004116:	6861      	ldr	r1, [r4, #4]
10004118:	f001 f9ea 	bl	100054f0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
1000411c:	3414      	adds	r4, #20
1000411e:	e7f2      	b.n	10004106 <statics_init+0x6>
10004120:	2000020c 	.word	0x2000020c
10004124:	2000020c 	.word	0x2000020c

10004128 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
10004128:	b590      	push	{r4, r7, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
1000412a:	4b09      	ldr	r3, [pc, #36]	; (10004150 <k_sys_work_q_init+0x28>)
{
1000412c:	b085      	sub	sp, #20
1000412e:	af02      	add	r7, sp, #8
	struct k_work_queue_config cfg = {
10004130:	603b      	str	r3, [r7, #0]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
10004132:	2280      	movs	r2, #128	; 0x80
10004134:	2301      	movs	r3, #1
	struct k_work_queue_config cfg = {
10004136:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
10004138:	9700      	str	r7, [sp, #0]
1000413a:	4906      	ldr	r1, [pc, #24]	; (10004154 <k_sys_work_q_init+0x2c>)
1000413c:	4806      	ldr	r0, [pc, #24]	; (10004158 <k_sys_work_q_init+0x30>)
1000413e:	425b      	negs	r3, r3
10004140:	00d2      	lsls	r2, r2, #3
	struct k_work_queue_config cfg = {
10004142:	713c      	strb	r4, [r7, #4]
	k_work_queue_start(&k_sys_work_q,
10004144:	f7ff fafa 	bl	1000373c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
10004148:	46bd      	mov	sp, r7
1000414a:	0020      	movs	r0, r4
1000414c:	bd9e      	pop	{r1, r2, r3, r4, r7, pc}
1000414e:	46c0      	nop			; (mov r8, r8)
10004150:	100059fc 	.word	0x100059fc
10004154:	200011f0 	.word	0x200011f0
10004158:	20000368 	.word	0x20000368

1000415c <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
1000415c:	b580      	push	{r7, lr}
1000415e:	af00      	add	r7, sp, #0

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
10004160:	46bd      	mov	sp, r7
10004162:	bd80      	pop	{r7, pc}

10004164 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
10004164:	0002      	movs	r2, r0
10004166:	b5b0      	push	{r4, r5, r7, lr}
10004168:	000b      	movs	r3, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
1000416a:	7911      	ldrb	r1, [r2, #4]
1000416c:	2201      	movs	r2, #1
1000416e:	0014      	movs	r4, r2
10004170:	408c      	lsls	r4, r1
10004172:	0021      	movs	r1, r4
	return gpio_pin_set(spec->port, spec->pin, value);
10004174:	6800      	ldr	r0, [r0, #0]
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
10004176:	af00      	add	r7, sp, #0
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10004178:	6904      	ldr	r4, [r0, #16]
1000417a:	6824      	ldr	r4, [r4, #0]
1000417c:	420c      	tst	r4, r1
1000417e:	d000      	beq.n	10004182 <gpio_pin_set_dt.isra.0+0x1e>
		value = (value != 0) ? 0 : 1;
10004180:	4053      	eors	r3, r2
	if (value != 0)	{
10004182:	2b00      	cmp	r3, #0
10004184:	d004      	beq.n	10004190 <gpio_pin_set_dt.isra.0+0x2c>
	return api->port_set_bits_raw(port, pins);
10004186:	6883      	ldr	r3, [r0, #8]
10004188:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
1000418a:	4798      	blx	r3
}
1000418c:	46bd      	mov	sp, r7
1000418e:	bdb0      	pop	{r4, r5, r7, pc}
	return api->port_clear_bits_raw(port, pins);
10004190:	6883      	ldr	r3, [r0, #8]
10004192:	691b      	ldr	r3, [r3, #16]
10004194:	e7f9      	b.n	1000418a <gpio_pin_set_dt.isra.0+0x26>

10004196 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
10004196:	2301      	movs	r3, #1
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
10004198:	b5b0      	push	{r4, r5, r7, lr}
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
1000419a:	001c      	movs	r4, r3
1000419c:	408c      	lsls	r4, r1
1000419e:	0021      	movs	r1, r4
100041a0:	6904      	ldr	r4, [r0, #16]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
100041a2:	af00      	add	r7, sp, #0
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
100041a4:	6824      	ldr	r4, [r4, #0]
100041a6:	420c      	tst	r4, r1
100041a8:	d000      	beq.n	100041ac <gpio_pin_set.isra.0+0x16>
		value = (value != 0) ? 0 : 1;
100041aa:	405a      	eors	r2, r3
	if (value != 0)	{
100041ac:	2a00      	cmp	r2, #0
100041ae:	d004      	beq.n	100041ba <gpio_pin_set.isra.0+0x24>
	return api->port_set_bits_raw(port, pins);
100041b0:	6883      	ldr	r3, [r0, #8]
100041b2:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
100041b4:	4798      	blx	r3
}
100041b6:	46bd      	mov	sp, r7
100041b8:	bdb0      	pop	{r4, r5, r7, pc}
	return api->port_clear_bits_raw(port, pins);
100041ba:	6883      	ldr	r3, [r0, #8]
100041bc:	691b      	ldr	r3, [r3, #16]
100041be:	e7f9      	b.n	100041b4 <gpio_pin_set.isra.0+0x1e>

100041c0 <z_impl_uart_irq_rx_enable>:
 * @param dev UART device instance.
 */
__syscall void uart_irq_rx_enable(const struct device *dev);

static inline void z_impl_uart_irq_rx_enable(const struct device *dev)
{
100041c0:	b580      	push	{r7, lr}
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_enable != NULL) {
100041c2:	6883      	ldr	r3, [r0, #8]
{
100041c4:	af00      	add	r7, sp, #0
	if (api->irq_rx_enable != NULL) {
100041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100041c8:	2b00      	cmp	r3, #0
100041ca:	d000      	beq.n	100041ce <z_impl_uart_irq_rx_enable+0xe>
		api->irq_rx_enable(dev);
100041cc:	4798      	blx	r3
	}
#else
	ARG_UNUSED(dev);
#endif
}
100041ce:	46bd      	mov	sp, r7
100041d0:	bd80      	pop	{r7, pc}

100041d2 <uart_irq_callback_user_data_set.constprop.0>:
 *
 * @param dev UART device instance.
 * @param cb Pointer to the callback function.
 * @param user_data Data to pass to callback function.
 */
static inline void uart_irq_callback_user_data_set(const struct device *dev,
100041d2:	b580      	push	{r7, lr}
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
100041d4:	6883      	ldr	r3, [r0, #8]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
100041d6:	af00      	add	r7, sp, #0
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
100041d8:	2b00      	cmp	r3, #0
100041da:	d004      	beq.n	100041e6 <uart_irq_callback_user_data_set.constprop.0+0x14>
100041dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100041de:	2b00      	cmp	r3, #0
100041e0:	d001      	beq.n	100041e6 <uart_irq_callback_user_data_set.constprop.0+0x14>
		api->irq_callback_set(dev, cb, user_data);
100041e2:	2200      	movs	r2, #0
100041e4:	4798      	blx	r3
#else
	ARG_UNUSED(dev);
	ARG_UNUSED(cb);
	ARG_UNUSED(user_data);
#endif
}
100041e6:	46bd      	mov	sp, r7
100041e8:	bd80      	pop	{r7, pc}

100041ea <comm_uSendString>:
void comm_uSendString( uart_device dev, const char *str ){
100041ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100041ec:	0005      	movs	r5, r0
100041ee:	af00      	add	r7, sp, #0
	size_t uSize = strlen(str);
100041f0:	0008      	movs	r0, r1
void comm_uSendString( uart_device dev, const char *str ){
100041f2:	000c      	movs	r4, r1
	size_t uSize = strlen(str);
100041f4:	f000 fa7b 	bl	100046ee <strlen>
	for (size_t i = 0; i < uSize; i++) {
100041f8:	1826      	adds	r6, r4, r0
100041fa:	42b4      	cmp	r4, r6
100041fc:	d101      	bne.n	10004202 <comm_uSendString+0x18>
}
100041fe:	46bd      	mov	sp, r7
10004200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		comm_uSendChar(dev, str[i]);
10004202:	7821      	ldrb	r1, [r4, #0]
10004204:	0028      	movs	r0, r5
10004206:	f7fd fdd5 	bl	10001db4 <comm_uSendChar>
	for (size_t i = 0; i < uSize; i++) {
1000420a:	3401      	adds	r4, #1
1000420c:	e7f5      	b.n	100041fa <comm_uSendString+0x10>

1000420e <uart0_cb>:


void uart0_cb(const struct device *dev, void *user_data) {
1000420e:	b597      	push	{r0, r1, r2, r4, r7, lr}
10004210:	0004      	movs	r4, r0
10004212:	af00      	add	r7, sp, #0
	if (api->irq_update == NULL) {
10004214:	6883      	ldr	r3, [r0, #8]
10004216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10004218:	2b00      	cmp	r3, #0
1000421a:	d010      	beq.n	1000423e <uart0_cb+0x30>
	return api->irq_update(dev);
1000421c:	4798      	blx	r3
	uint8_t c;

	if (!uart_irq_update(dev)) {
1000421e:	2800      	cmp	r0, #0
10004220:	d10d      	bne.n	1000423e <uart0_cb+0x30>

	while (uart_irq_rx_ready(dev)) {
		uart_fifo_read(dev, &c, 1);
		uart_vBuildMessage(UART0, c);
	}
}
10004222:	46bd      	mov	sp, r7
10004224:	bd97      	pop	{r0, r1, r2, r4, r7, pc}
	if (api->fifo_read == NULL) {
10004226:	68a3      	ldr	r3, [r4, #8]
10004228:	699b      	ldr	r3, [r3, #24]
1000422a:	2b00      	cmp	r3, #0
1000422c:	d003      	beq.n	10004236 <uart0_cb+0x28>
	return api->fifo_read(dev, rx_data, size);
1000422e:	2201      	movs	r2, #1
10004230:	0020      	movs	r0, r4
10004232:	1df9      	adds	r1, r7, #7
10004234:	4798      	blx	r3
		uart_vBuildMessage(UART0, c);
10004236:	2000      	movs	r0, #0
10004238:	79f9      	ldrb	r1, [r7, #7]
1000423a:	f7fd fe27 	bl	10001e8c <uart_vBuildMessage>
	if (api->irq_rx_ready == NULL) {
1000423e:	68a3      	ldr	r3, [r4, #8]
10004240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004242:	2b00      	cmp	r3, #0
10004244:	d0ef      	beq.n	10004226 <uart0_cb+0x18>
	return api->irq_rx_ready(dev);
10004246:	0020      	movs	r0, r4
10004248:	4798      	blx	r3
	while (uart_irq_rx_ready(dev)) {
1000424a:	2800      	cmp	r0, #0
1000424c:	d1eb      	bne.n	10004226 <uart0_cb+0x18>
1000424e:	e7e8      	b.n	10004222 <uart0_cb+0x14>

10004250 <uart1_cb>:

void uart1_cb(const struct device *dev, void *user_data) {
10004250:	b597      	push	{r0, r1, r2, r4, r7, lr}
10004252:	0004      	movs	r4, r0
10004254:	af00      	add	r7, sp, #0
	if (api->irq_update == NULL) {
10004256:	6883      	ldr	r3, [r0, #8]
10004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000425a:	2b00      	cmp	r3, #0
1000425c:	d010      	beq.n	10004280 <uart1_cb+0x30>
	return api->irq_update(dev);
1000425e:	4798      	blx	r3
	uint8_t c;

	if (!uart_irq_update(dev)) {
10004260:	2800      	cmp	r0, #0
10004262:	d10d      	bne.n	10004280 <uart1_cb+0x30>

	while (uart_irq_rx_ready(dev)) {
		uart_fifo_read(dev, &c, 1);
		uart_vBuildMessage(UART1, c);
	}
10004264:	46bd      	mov	sp, r7
10004266:	bd97      	pop	{r0, r1, r2, r4, r7, pc}
	if (api->fifo_read == NULL) {
10004268:	68a3      	ldr	r3, [r4, #8]
1000426a:	699b      	ldr	r3, [r3, #24]
1000426c:	2b00      	cmp	r3, #0
1000426e:	d003      	beq.n	10004278 <uart1_cb+0x28>
	return api->fifo_read(dev, rx_data, size);
10004270:	2201      	movs	r2, #1
10004272:	0020      	movs	r0, r4
10004274:	1df9      	adds	r1, r7, #7
10004276:	4798      	blx	r3
		uart_vBuildMessage(UART1, c);
10004278:	2001      	movs	r0, #1
1000427a:	79f9      	ldrb	r1, [r7, #7]
1000427c:	f7fd fe06 	bl	10001e8c <uart_vBuildMessage>
	if (api->irq_rx_ready == NULL) {
10004280:	68a3      	ldr	r3, [r4, #8]
10004282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10004284:	2b00      	cmp	r3, #0
10004286:	d0ef      	beq.n	10004268 <uart1_cb+0x18>
	return api->irq_rx_ready(dev);
10004288:	0020      	movs	r0, r4
1000428a:	4798      	blx	r3
	while (uart_irq_rx_ready(dev)) {
1000428c:	2800      	cmp	r0, #0
1000428e:	d1eb      	bne.n	10004268 <uart1_cb+0x18>
10004290:	e7e8      	b.n	10004264 <uart1_cb+0x14>

10004292 <gprs_vDisable>:

void gprs_vDisable(void) {
10004292:	b580      	push	{r7, lr}
	gpio_pin_set_dt(&gprs_reset, true);
10004294:	2001      	movs	r0, #1
void gprs_vDisable(void) {
10004296:	af00      	add	r7, sp, #0
	gpio_pin_set_dt(&gprs_reset, true);
10004298:	f7fd fe18 	bl	10001ecc <gpio_pin_set_dt.constprop.0.isra.0>
}
1000429c:	46bd      	mov	sp, r7
1000429e:	bd80      	pop	{r7, pc}

100042a0 <textp_bFindString>:
 * @param pcFindAt: onde procurar
 * @param pcFindThis: oque procurar
 * @return true: Caso tenha a sting dento da outra
 * @return false: Caso não tenha a sting dento da outra
 */
bool textp_bFindString( const char *pcFindAt, const char *pcFindThis){
100042a0:	b580      	push	{r7, lr}
100042a2:	af00      	add	r7, sp, #0
	if(strstr(pcFindAt, pcFindThis) != NULL)	return true;
100042a4:	f000 fa01 	bl	100046aa <strstr>
	return false;
}
100042a8:	46bd      	mov	sp, r7
	if(strstr(pcFindAt, pcFindThis) != NULL)	return true;
100042aa:	1e43      	subs	r3, r0, #1
100042ac:	4198      	sbcs	r0, r3
}
100042ae:	b2c0      	uxtb	r0, r0
100042b0:	bd80      	pop	{r7, pc}

100042b2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
100042b2:	b5b0      	push	{r4, r5, r7, lr}
100042b4:	0004      	movs	r4, r0
100042b6:	af00      	add	r7, sp, #0
100042b8:	0008      	movs	r0, r1
100042ba:	0011      	movs	r1, r2
100042bc:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
100042be:	47a0      	blx	r4
	return z_impl_z_current_get();
100042c0:	f7ff fd26 	bl	10003d10 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
100042c4:	f7fd ffc4 	bl	10002250 <z_impl_k_thread_abort>

100042c8 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
100042c8:	2380      	movs	r3, #128	; 0x80
{
100042ca:	b580      	push	{r7, lr}
	void *cmem = &buf[c];
100042cc:	00c9      	lsls	r1, r1, #3
100042ce:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
100042d0:	6880      	ldr	r0, [r0, #8]
{
100042d2:	af00      	add	r7, sp, #0
	if (big_heap(h)) {
100042d4:	021b      	lsls	r3, r3, #8
100042d6:	4298      	cmp	r0, r3
100042d8:	d303      	bcc.n	100042e2 <chunk_field+0x1a>
		return ((uint32_t *)cmem)[f];
100042da:	0092      	lsls	r2, r2, #2
100042dc:	5850      	ldr	r0, [r2, r1]
	} else {
		return ((uint16_t *)cmem)[f];
	}
}
100042de:	46bd      	mov	sp, r7
100042e0:	bd80      	pop	{r7, pc}
		return ((uint16_t *)cmem)[f];
100042e2:	0052      	lsls	r2, r2, #1
100042e4:	5a50      	ldrh	r0, [r2, r1]
100042e6:	e7fa      	b.n	100042de <chunk_field+0x16>

100042e8 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
100042e8:	b590      	push	{r4, r7, lr}
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
100042ea:	2480      	movs	r4, #128	; 0x80
	void *cmem = &buf[c];
100042ec:	00c9      	lsls	r1, r1, #3
100042ee:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
100042f0:	6880      	ldr	r0, [r0, #8]
{
100042f2:	af00      	add	r7, sp, #0
	if (big_heap(h)) {
100042f4:	0224      	lsls	r4, r4, #8
100042f6:	42a0      	cmp	r0, r4
100042f8:	d303      	bcc.n	10004302 <chunk_set+0x1a>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
100042fa:	0092      	lsls	r2, r2, #2
100042fc:	5053      	str	r3, [r2, r1]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
	}
}
100042fe:	46bd      	mov	sp, r7
10004300:	bd90      	pop	{r4, r7, pc}
		((uint16_t *)cmem)[f] = val;
10004302:	0052      	lsls	r2, r2, #1
10004304:	5253      	strh	r3, [r2, r1]
}
10004306:	e7fa      	b.n	100042fe <chunk_set+0x16>

10004308 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
10004308:	b580      	push	{r7, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
1000430a:	2201      	movs	r2, #1
{
1000430c:	af00      	add	r7, sp, #0
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
1000430e:	f7ff ffdb 	bl	100042c8 <chunk_field>
}
10004312:	46bd      	mov	sp, r7
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
10004314:	0840      	lsrs	r0, r0, #1
}
10004316:	bd80      	pop	{r7, pc}

10004318 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
10004318:	b590      	push	{r4, r7, lr}
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
1000431a:	2480      	movs	r4, #128	; 0x80
	void *cmem = &buf[c];
1000431c:	00c9      	lsls	r1, r1, #3
1000431e:	1841      	adds	r1, r0, r1
	if (big_heap(h)) {
10004320:	6880      	ldr	r0, [r0, #8]
10004322:	2301      	movs	r3, #1
{
10004324:	af00      	add	r7, sp, #0
	if (big_heap(h)) {
10004326:	0224      	lsls	r4, r4, #8
10004328:	42a0      	cmp	r0, r4
1000432a:	d309      	bcc.n	10004340 <set_chunk_used+0x28>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
1000432c:	6848      	ldr	r0, [r1, #4]
		if (used) {
1000432e:	2a00      	cmp	r2, #0
10004330:	d003      	beq.n	1000433a <set_chunk_used+0x22>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
10004332:	4303      	orrs	r3, r0
10004334:	604b      	str	r3, [r1, #4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
		}
	}
}
10004336:	46bd      	mov	sp, r7
10004338:	bd90      	pop	{r4, r7, pc}
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
1000433a:	4398      	bics	r0, r3
1000433c:	6048      	str	r0, [r1, #4]
1000433e:	e7fa      	b.n	10004336 <set_chunk_used+0x1e>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
10004340:	8848      	ldrh	r0, [r1, #2]
		if (used) {
10004342:	2a00      	cmp	r2, #0
10004344:	d002      	beq.n	1000434c <set_chunk_used+0x34>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
10004346:	4303      	orrs	r3, r0
10004348:	804b      	strh	r3, [r1, #2]
1000434a:	e7f4      	b.n	10004336 <set_chunk_used+0x1e>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
1000434c:	4398      	bics	r0, r3
1000434e:	8048      	strh	r0, [r1, #2]
}
10004350:	e7f1      	b.n	10004336 <set_chunk_used+0x1e>

10004352 <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
10004352:	b580      	push	{r7, lr}
	chunk_set(h, c, SIZE_AND_USED, size << 1);
10004354:	0053      	lsls	r3, r2, #1
{
10004356:	af00      	add	r7, sp, #0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
10004358:	2201      	movs	r2, #1
1000435a:	f7ff ffc5 	bl	100042e8 <chunk_set>
}
1000435e:	46bd      	mov	sp, r7
10004360:	bd80      	pop	{r7, pc}

10004362 <mem_to_chunkid>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
10004362:	2280      	movs	r2, #128	; 0x80
 * Here "closest" is only meaningful in the context of sys_heap_aligned_alloc()
 * where wanted alignment might not always correspond to a chunk header
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
10004364:	b590      	push	{r4, r7, lr}
10004366:	6884      	ldr	r4, [r0, #8]
10004368:	2308      	movs	r3, #8
1000436a:	af00      	add	r7, sp, #0
1000436c:	0212      	lsls	r2, r2, #8
1000436e:	4294      	cmp	r4, r2
10004370:	d200      	bcs.n	10004374 <mem_to_chunkid+0x12>
10004372:	3b04      	subs	r3, #4
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}
10004374:	46bd      	mov	sp, r7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
10004376:	1ac9      	subs	r1, r1, r3
10004378:	1a08      	subs	r0, r1, r0
1000437a:	08c0      	lsrs	r0, r0, #3
}
1000437c:	bd90      	pop	{r4, r7, pc}

1000437e <bucket_idx.isra.0>:
1000437e:	2280      	movs	r2, #128	; 0x80
static inline size_t chunksz_to_bytes(struct z_heap *h, chunksz_t chunksz_in)
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
10004380:	b580      	push	{r7, lr}
	return big_heap(h) ? 8 : 4;
10004382:	2308      	movs	r3, #8
static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
10004384:	af00      	add	r7, sp, #0
	return big_heap(h) ? 8 : 4;
10004386:	0212      	lsls	r2, r2, #8
10004388:	4290      	cmp	r0, r2
1000438a:	d200      	bcs.n	1000438e <bucket_idx.isra.0+0x10>
1000438c:	3b04      	subs	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
1000438e:	3308      	adds	r3, #8
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
10004390:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
10004392:	08d8      	lsrs	r0, r3, #3
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
10004394:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
10004396:	f7fb ff97 	bl	100002c8 <__clzsi2>
1000439a:	231f      	movs	r3, #31
}
1000439c:	46bd      	mov	sp, r7
	return 31 - __builtin_clz(usable_sz);
1000439e:	1a18      	subs	r0, r3, r0
}
100043a0:	bd80      	pop	{r7, pc}

100043a2 <free_list_remove_bidx>:
{
100043a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100043a4:	af00      	add	r7, sp, #0
100043a6:	607a      	str	r2, [r7, #4]
	return chunk_field(h, c, FREE_NEXT);
100043a8:	2203      	movs	r2, #3
100043aa:	0004      	movs	r4, r0
100043ac:	000e      	movs	r6, r1
100043ae:	f7ff ff8b 	bl	100042c8 <chunk_field>
100043b2:	687b      	ldr	r3, [r7, #4]
100043b4:	0005      	movs	r5, r0
100043b6:	3304      	adds	r3, #4
100043b8:	603b      	str	r3, [r7, #0]
	if (next_free_chunk(h, c) == c) {
100043ba:	4286      	cmp	r6, r0
100043bc:	d10b      	bne.n	100043d6 <free_list_remove_bidx+0x34>
		h->avail_buckets &= ~BIT(bidx);
100043be:	2301      	movs	r3, #1
100043c0:	687a      	ldr	r2, [r7, #4]
100043c2:	4093      	lsls	r3, r2
100043c4:	68e2      	ldr	r2, [r4, #12]
100043c6:	439a      	bics	r2, r3
100043c8:	60e2      	str	r2, [r4, #12]
		b->next = 0;
100043ca:	2200      	movs	r2, #0
100043cc:	683b      	ldr	r3, [r7, #0]
100043ce:	009b      	lsls	r3, r3, #2
100043d0:	511a      	str	r2, [r3, r4]
}
100043d2:	46bd      	mov	sp, r7
100043d4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	return chunk_field(h, c, FREE_PREV);
100043d6:	0031      	movs	r1, r6
100043d8:	2202      	movs	r2, #2
100043da:	0020      	movs	r0, r4
100043dc:	f7ff ff74 	bl	100042c8 <chunk_field>
100043e0:	0006      	movs	r6, r0
		b->next = second;
100043e2:	683b      	ldr	r3, [r7, #0]
	chunk_set(h, c, FREE_NEXT, next);
100043e4:	0001      	movs	r1, r0
100043e6:	009b      	lsls	r3, r3, #2
100043e8:	0020      	movs	r0, r4
100043ea:	511d      	str	r5, [r3, r4]
100043ec:	2203      	movs	r2, #3
100043ee:	002b      	movs	r3, r5
100043f0:	f7ff ff7a 	bl	100042e8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
100043f4:	0033      	movs	r3, r6
100043f6:	2202      	movs	r2, #2
100043f8:	0029      	movs	r1, r5
100043fa:	0020      	movs	r0, r4
100043fc:	f7ff ff74 	bl	100042e8 <chunk_set>
}
10004400:	e7e7      	b.n	100043d2 <free_list_remove_bidx+0x30>

10004402 <free_list_remove>:
{
10004402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004404:	af00      	add	r7, sp, #0
10004406:	000d      	movs	r5, r1
10004408:	0004      	movs	r4, r0
	return big_heap_chunks(h->end_chunk);
1000440a:	6886      	ldr	r6, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
1000440c:	f7ff ff7c 	bl	10004308 <chunk_size>
10004410:	2380      	movs	r3, #128	; 0x80
10004412:	0001      	movs	r1, r0
10004414:	021b      	lsls	r3, r3, #8
10004416:	429e      	cmp	r6, r3
10004418:	d301      	bcc.n	1000441e <free_list_remove+0x1c>
	if (!solo_free_header(h, c)) {
1000441a:	2801      	cmp	r0, #1
1000441c:	d007      	beq.n	1000442e <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
1000441e:	0030      	movs	r0, r6
10004420:	f7ff ffad 	bl	1000437e <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
10004424:	0029      	movs	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
10004426:	0002      	movs	r2, r0
		free_list_remove_bidx(h, c, bidx);
10004428:	0020      	movs	r0, r4
1000442a:	f7ff ffba 	bl	100043a2 <free_list_remove_bidx>
}
1000442e:	46bd      	mov	sp, r7
10004430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10004432 <merge_chunks>:
{
10004432:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004434:	af00      	add	r7, sp, #0
10004436:	0015      	movs	r5, r2
10004438:	0004      	movs	r4, r0
1000443a:	6079      	str	r1, [r7, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
1000443c:	f7ff ff64 	bl	10004308 <chunk_size>
10004440:	0029      	movs	r1, r5
10004442:	0006      	movs	r6, r0
10004444:	0020      	movs	r0, r4
10004446:	f7ff ff5f 	bl	10004308 <chunk_size>
1000444a:	1836      	adds	r6, r6, r0
	set_chunk_size(h, lc, newsz);
1000444c:	0032      	movs	r2, r6
1000444e:	6879      	ldr	r1, [r7, #4]
10004450:	0020      	movs	r0, r4
10004452:	f7ff ff7e 	bl	10004352 <set_chunk_size>
	return c + chunk_size(h, c);
10004456:	0029      	movs	r1, r5
10004458:	0020      	movs	r0, r4
1000445a:	f7ff ff55 	bl	10004308 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
1000445e:	0033      	movs	r3, r6
	return c + chunk_size(h, c);
10004460:	1829      	adds	r1, r5, r0
	chunk_set(h, c, LEFT_SIZE, size);
10004462:	2200      	movs	r2, #0
10004464:	0020      	movs	r0, r4
10004466:	f7ff ff3f 	bl	100042e8 <chunk_set>
}
1000446a:	46bd      	mov	sp, r7
1000446c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

1000446e <free_list_add>:
{
1000446e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004470:	af00      	add	r7, sp, #0
10004472:	000d      	movs	r5, r1
10004474:	0004      	movs	r4, r0
	return big_heap_chunks(h->end_chunk);
10004476:	6886      	ldr	r6, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
10004478:	f7ff ff46 	bl	10004308 <chunk_size>
1000447c:	2380      	movs	r3, #128	; 0x80
1000447e:	0001      	movs	r1, r0
10004480:	021b      	lsls	r3, r3, #8
10004482:	429e      	cmp	r6, r3
10004484:	d301      	bcc.n	1000448a <free_list_add+0x1c>
	if (!solo_free_header(h, c)) {
10004486:	2801      	cmp	r0, #1
10004488:	d019      	beq.n	100044be <free_list_add+0x50>
		int bidx = bucket_idx(h, chunk_size(h, c));
1000448a:	0030      	movs	r0, r6
1000448c:	f7ff ff77 	bl	1000437e <bucket_idx.isra.0>
	if (b->next == 0U) {
10004490:	0083      	lsls	r3, r0, #2
10004492:	18e3      	adds	r3, r4, r3
10004494:	691e      	ldr	r6, [r3, #16]
10004496:	2e00      	cmp	r6, #0
10004498:	d113      	bne.n	100044c2 <free_list_add+0x54>
		h->avail_buckets |= BIT(bidx);
1000449a:	2201      	movs	r2, #1
1000449c:	4082      	lsls	r2, r0
1000449e:	68e1      	ldr	r1, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
100044a0:	0020      	movs	r0, r4
100044a2:	430a      	orrs	r2, r1
100044a4:	60e2      	str	r2, [r4, #12]
100044a6:	0029      	movs	r1, r5
100044a8:	2202      	movs	r2, #2
		b->next = c;
100044aa:	611d      	str	r5, [r3, #16]
100044ac:	002b      	movs	r3, r5
100044ae:	f7ff ff1b 	bl	100042e8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
100044b2:	002b      	movs	r3, r5
100044b4:	2203      	movs	r2, #3
100044b6:	0029      	movs	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
100044b8:	0020      	movs	r0, r4
100044ba:	f7ff ff15 	bl	100042e8 <chunk_set>
}
100044be:	46bd      	mov	sp, r7
100044c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	return chunk_field(h, c, FREE_PREV);
100044c2:	2202      	movs	r2, #2
100044c4:	0031      	movs	r1, r6
100044c6:	0020      	movs	r0, r4
100044c8:	f7ff fefe 	bl	100042c8 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
100044cc:	2202      	movs	r2, #2
100044ce:	0003      	movs	r3, r0
100044d0:	0029      	movs	r1, r5
	return chunk_field(h, c, FREE_PREV);
100044d2:	6078      	str	r0, [r7, #4]
	chunk_set(h, c, FREE_PREV, prev);
100044d4:	0020      	movs	r0, r4
100044d6:	f7ff ff07 	bl	100042e8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
100044da:	0033      	movs	r3, r6
100044dc:	2203      	movs	r2, #3
100044de:	0029      	movs	r1, r5
100044e0:	0020      	movs	r0, r4
100044e2:	f7ff ff01 	bl	100042e8 <chunk_set>
100044e6:	002b      	movs	r3, r5
100044e8:	2203      	movs	r2, #3
100044ea:	6879      	ldr	r1, [r7, #4]
100044ec:	0020      	movs	r0, r4
100044ee:	f7ff fefb 	bl	100042e8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
100044f2:	002b      	movs	r3, r5
100044f4:	2202      	movs	r2, #2
100044f6:	0031      	movs	r1, r6
100044f8:	e7de      	b.n	100044b8 <free_list_add+0x4a>

100044fa <free_chunk>:
{
100044fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100044fc:	af00      	add	r7, sp, #0
100044fe:	000c      	movs	r4, r1
10004500:	0005      	movs	r5, r0
	return c + chunk_size(h, c);
10004502:	f7ff ff01 	bl	10004308 <chunk_size>
10004506:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
10004508:	2201      	movs	r2, #1
1000450a:	0031      	movs	r1, r6
1000450c:	0028      	movs	r0, r5
1000450e:	f7ff fedb 	bl	100042c8 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
10004512:	07c3      	lsls	r3, r0, #31
10004514:	d40c      	bmi.n	10004530 <free_chunk+0x36>
		free_list_remove(h, right_chunk(h, c));
10004516:	0031      	movs	r1, r6
10004518:	0028      	movs	r0, r5
1000451a:	f7ff ff72 	bl	10004402 <free_list_remove>
	return c + chunk_size(h, c);
1000451e:	0021      	movs	r1, r4
10004520:	0028      	movs	r0, r5
10004522:	f7ff fef1 	bl	10004308 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
10004526:	0021      	movs	r1, r4
10004528:	1822      	adds	r2, r4, r0
1000452a:	0028      	movs	r0, r5
1000452c:	f7ff ff81 	bl	10004432 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
10004530:	2200      	movs	r2, #0
10004532:	0021      	movs	r1, r4
10004534:	0028      	movs	r0, r5
10004536:	f7ff fec7 	bl	100042c8 <chunk_field>
1000453a:	1a26      	subs	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
1000453c:	2201      	movs	r2, #1
1000453e:	0031      	movs	r1, r6
10004540:	0028      	movs	r0, r5
10004542:	f7ff fec1 	bl	100042c8 <chunk_field>
10004546:	2301      	movs	r3, #1
	if (!chunk_used(h, left_chunk(h, c))) {
10004548:	0002      	movs	r2, r0
1000454a:	401a      	ands	r2, r3
1000454c:	607a      	str	r2, [r7, #4]
1000454e:	4218      	tst	r0, r3
10004550:	d113      	bne.n	1000457a <free_chunk+0x80>
		free_list_remove(h, left_chunk(h, c));
10004552:	0031      	movs	r1, r6
10004554:	0028      	movs	r0, r5
10004556:	f7ff ff54 	bl	10004402 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
1000455a:	0021      	movs	r1, r4
1000455c:	687a      	ldr	r2, [r7, #4]
1000455e:	0028      	movs	r0, r5
10004560:	f7ff feb2 	bl	100042c8 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
10004564:	0022      	movs	r2, r4
10004566:	1a21      	subs	r1, r4, r0
10004568:	0028      	movs	r0, r5
1000456a:	f7ff ff62 	bl	10004432 <merge_chunks>
1000456e:	0021      	movs	r1, r4
10004570:	0028      	movs	r0, r5
10004572:	687a      	ldr	r2, [r7, #4]
10004574:	f7ff fea8 	bl	100042c8 <chunk_field>
10004578:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
1000457a:	0028      	movs	r0, r5
1000457c:	0021      	movs	r1, r4
1000457e:	f7ff ff76 	bl	1000446e <free_list_add>
}
10004582:	46bd      	mov	sp, r7
10004584:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

10004586 <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
10004586:	b5b0      	push	{r4, r5, r7, lr}
10004588:	af00      	add	r7, sp, #0
	if (mem == NULL) {
1000458a:	2900      	cmp	r1, #0
1000458c:	d00d      	beq.n	100045aa <sys_heap_free+0x24>
1000458e:	6805      	ldr	r5, [r0, #0]
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
	chunkid_t c = mem_to_chunkid(h, mem);
10004590:	0028      	movs	r0, r5
10004592:	f7ff fee6 	bl	10004362 <mem_to_chunkid>
10004596:	0004      	movs	r4, r0
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
10004598:	0001      	movs	r1, r0
1000459a:	2200      	movs	r2, #0
1000459c:	0028      	movs	r0, r5
1000459e:	f7ff febb 	bl	10004318 <set_chunk_used>
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
100045a2:	0021      	movs	r1, r4
100045a4:	0028      	movs	r0, r5
100045a6:	f7ff ffa8 	bl	100044fa <free_chunk>
}
100045aa:	46bd      	mov	sp, r7
100045ac:	bdb0      	pop	{r4, r5, r7, pc}

100045ae <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
100045ae:	2380      	movs	r3, #128	; 0x80
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
100045b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100045b2:	02db      	lsls	r3, r3, #11
100045b4:	2408      	movs	r4, #8
100045b6:	af00      	add	r7, sp, #0
100045b8:	429a      	cmp	r2, r3
100045ba:	d200      	bcs.n	100045be <sys_heap_init+0x10>
100045bc:	3c04      	subs	r4, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
100045be:	2307      	movs	r3, #7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
100045c0:	2600      	movs	r6, #0
	bytes -= heap_footer_bytes(bytes);
100045c2:	1b14      	subs	r4, r2, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
100045c4:	1dcd      	adds	r5, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
100045c6:	1909      	adds	r1, r1, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
100045c8:	439d      	bics	r5, r3
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
100045ca:	4399      	bics	r1, r3
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
100045cc:	1b4c      	subs	r4, r1, r5
100045ce:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
100045d0:	6005      	str	r5, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
100045d2:	0021      	movs	r1, r4
100045d4:	0020      	movs	r0, r4
	h->end_chunk = heap_sz;
100045d6:	60ac      	str	r4, [r5, #8]
	h->avail_buckets = 0;
100045d8:	60ee      	str	r6, [r5, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
100045da:	f7ff fed0 	bl	1000437e <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
100045de:	0083      	lsls	r3, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
100045e0:	331b      	adds	r3, #27
100045e2:	08db      	lsrs	r3, r3, #3
100045e4:	607b      	str	r3, [r7, #4]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
100045e6:	002b      	movs	r3, r5
100045e8:	0032      	movs	r2, r6
100045ea:	3310      	adds	r3, #16
	for (int i = 0; i < nb_buckets; i++) {
100045ec:	42b0      	cmp	r0, r6
100045ee:	da32      	bge.n	10004656 <sys_heap_init+0xa8>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
100045f0:	0028      	movs	r0, r5
100045f2:	687a      	ldr	r2, [r7, #4]
100045f4:	2100      	movs	r1, #0
100045f6:	f7ff feac 	bl	10004352 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
100045fa:	2300      	movs	r3, #0
100045fc:	0028      	movs	r0, r5
100045fe:	001a      	movs	r2, r3
10004600:	0019      	movs	r1, r3
10004602:	f7ff fe71 	bl	100042e8 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);
10004606:	0028      	movs	r0, r5
10004608:	2201      	movs	r2, #1
1000460a:	2100      	movs	r1, #0
1000460c:	f7ff fe84 	bl	10004318 <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
10004610:	687b      	ldr	r3, [r7, #4]
10004612:	0028      	movs	r0, r5
10004614:	1ae6      	subs	r6, r4, r3
10004616:	0032      	movs	r2, r6
10004618:	0019      	movs	r1, r3
1000461a:	f7ff fe9a 	bl	10004352 <set_chunk_size>
1000461e:	687b      	ldr	r3, [r7, #4]
10004620:	0028      	movs	r0, r5
10004622:	0019      	movs	r1, r3
10004624:	2200      	movs	r2, #0
10004626:	f7ff fe5f 	bl	100042e8 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
1000462a:	0028      	movs	r0, r5
1000462c:	0021      	movs	r1, r4
1000462e:	2200      	movs	r2, #0
10004630:	f7ff fe8f 	bl	10004352 <set_chunk_size>
10004634:	0033      	movs	r3, r6
10004636:	0028      	movs	r0, r5
10004638:	0021      	movs	r1, r4
1000463a:	2200      	movs	r2, #0
1000463c:	f7ff fe54 	bl	100042e8 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
10004640:	0028      	movs	r0, r5
10004642:	2201      	movs	r2, #1
10004644:	0021      	movs	r1, r4
10004646:	f7ff fe67 	bl	10004318 <set_chunk_used>

	free_list_add(h, chunk0_size);
1000464a:	0028      	movs	r0, r5
1000464c:	6879      	ldr	r1, [r7, #4]
1000464e:	f7ff ff0e 	bl	1000446e <free_list_add>
}
10004652:	46bd      	mov	sp, r7
10004654:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		h->buckets[i].next = 0;
10004656:	00b1      	lsls	r1, r6, #2
10004658:	505a      	str	r2, [r3, r1]
	for (int i = 0; i < nb_buckets; i++) {
1000465a:	3601      	adds	r6, #1
1000465c:	e7c6      	b.n	100045ec <sys_heap_init+0x3e>

1000465e <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <zephyr/toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
1000465e:	b580      	push	{r7, lr}
10004660:	af00      	add	r7, sp, #0
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIPPED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
10004662:	46bd      	mov	sp, r7
10004664:	bd80      	pop	{r7, pc}

10004666 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
10004666:	b580      	push	{r7, lr}
10004668:	af00      	add	r7, sp, #0

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
1000466a:	f000 fd60 	bl	1000512e <z_fatal_error>
}
1000466e:	46bd      	mov	sp, r7
10004670:	bd80      	pop	{r7, pc}

10004672 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
10004672:	b580      	push	{r7, lr}
10004674:	0001      	movs	r1, r0
10004676:	af00      	add	r7, sp, #0
	z_fatal_error(reason, esf);
10004678:	6800      	ldr	r0, [r0, #0]
1000467a:	f000 fd58 	bl	1000512e <z_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
1000467e:	46bd      	mov	sp, r7
10004680:	bd80      	pop	{r7, pc}

10004682 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
10004682:	b580      	push	{r7, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
10004684:	2100      	movs	r1, #0
{
10004686:	af00      	add	r7, sp, #0
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
10004688:	2001      	movs	r0, #1
1000468a:	f7ff ffec 	bl	10004666 <z_arm_fatal_error>
}
1000468e:	46bd      	mov	sp, r7
10004690:	bd80      	pop	{r7, pc}

10004692 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
10004692:	b580      	push	{r7, lr}
10004694:	af00      	add	r7, sp, #0
	handler();
10004696:	f7fd fc97 	bl	10001fc8 <z_SysNmiOnReset>
	z_arm_int_exit();
1000469a:	f7fd fd4b 	bl	10002134 <z_arm_exc_exit>
}
1000469e:	46bd      	mov	sp, r7
100046a0:	bd80      	pop	{r7, pc}

100046a2 <z_arm_fault_init>:
 *
 * Turns on the desired hardware faults.
 *
 */
void z_arm_fault_init(void)
{
100046a2:	b580      	push	{r7, lr}
100046a4:	af00      	add	r7, sp, #0
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
100046a6:	46bd      	mov	sp, r7
100046a8:	bd80      	pop	{r7, pc}

100046aa <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
100046aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char c, sc;
	size_t len;

	c = *find++;
100046ac:	780b      	ldrb	r3, [r1, #0]
{
100046ae:	af00      	add	r7, sp, #0
100046b0:	0004      	movs	r4, r0
100046b2:	000d      	movs	r5, r1
	c = *find++;
100046b4:	607b      	str	r3, [r7, #4]
	if (c != 0) {
100046b6:	2b00      	cmp	r3, #0
100046b8:	d014      	beq.n	100046e4 <strstr+0x3a>
	c = *find++;
100046ba:	3501      	adds	r5, #1
		len = strlen(find);
100046bc:	0028      	movs	r0, r5
100046be:	f000 f816 	bl	100046ee <strlen>
100046c2:	0026      	movs	r6, r4
100046c4:	6038      	str	r0, [r7, #0]
100046c6:	0034      	movs	r4, r6
		do {
			do {
				sc = *s++;
100046c8:	7823      	ldrb	r3, [r4, #0]
100046ca:	3601      	adds	r6, #1
				if (sc == 0) {
100046cc:	2b00      	cmp	r3, #0
100046ce:	d00c      	beq.n	100046ea <strstr+0x40>
					return NULL;
				}
			} while (sc != c);
100046d0:	687a      	ldr	r2, [r7, #4]
100046d2:	429a      	cmp	r2, r3
100046d4:	d1f7      	bne.n	100046c6 <strstr+0x1c>
		} while (strncmp(s, find, len) != 0);
100046d6:	0029      	movs	r1, r5
100046d8:	0030      	movs	r0, r6
100046da:	683a      	ldr	r2, [r7, #0]
100046dc:	f000 f812 	bl	10004704 <strncmp>
100046e0:	2800      	cmp	r0, #0
100046e2:	d1f0      	bne.n	100046c6 <strstr+0x1c>
		s--;
	}
	return (char *)s;
}
100046e4:	46bd      	mov	sp, r7
100046e6:	0020      	movs	r0, r4
100046e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					return NULL;
100046ea:	001c      	movs	r4, r3
100046ec:	e7fa      	b.n	100046e4 <strstr+0x3a>

100046ee <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
100046ee:	0003      	movs	r3, r0
	size_t n = 0;
100046f0:	2000      	movs	r0, #0
{
100046f2:	b580      	push	{r7, lr}
100046f4:	af00      	add	r7, sp, #0

	while (*s != '\0') {
100046f6:	5c1a      	ldrb	r2, [r3, r0]
100046f8:	2a00      	cmp	r2, #0
100046fa:	d101      	bne.n	10004700 <strlen+0x12>
		s++;
		n++;
	}

	return n;
}
100046fc:	46bd      	mov	sp, r7
100046fe:	bd80      	pop	{r7, pc}
		n++;
10004700:	3001      	adds	r0, #1
10004702:	e7f8      	b.n	100046f6 <strlen+0x8>

10004704 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
10004704:	b5b0      	push	{r4, r5, r7, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
10004706:	2400      	movs	r4, #0
{
10004708:	af00      	add	r7, sp, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
1000470a:	42a2      	cmp	r2, r4
1000470c:	d008      	beq.n	10004720 <strncmp+0x1c>
1000470e:	5d03      	ldrb	r3, [r0, r4]
10004710:	5d0d      	ldrb	r5, [r1, r4]
10004712:	42ab      	cmp	r3, r5
10004714:	d102      	bne.n	1000471c <strncmp+0x18>
10004716:	3401      	adds	r4, #1
10004718:	2b00      	cmp	r3, #0
1000471a:	d1f6      	bne.n	1000470a <strncmp+0x6>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
1000471c:	1b58      	subs	r0, r3, r5
1000471e:	e000      	b.n	10004722 <strncmp+0x1e>
10004720:	2000      	movs	r0, #0
}
10004722:	46bd      	mov	sp, r7
10004724:	bdb0      	pop	{r4, r5, r7, pc}

10004726 <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
10004726:	2300      	movs	r3, #0
{
10004728:	b590      	push	{r4, r7, lr}
1000472a:	af00      	add	r7, sp, #0
	while (n > 0) {
1000472c:	429a      	cmp	r2, r3
1000472e:	d101      	bne.n	10004734 <memcpy+0xe>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
10004730:	46bd      	mov	sp, r7
10004732:	bd90      	pop	{r4, r7, pc}
		*(d_byte++) = *(s_byte++);
10004734:	5ccc      	ldrb	r4, [r1, r3]
10004736:	54c4      	strb	r4, [r0, r3]
		n--;
10004738:	3301      	adds	r3, #1
1000473a:	e7f7      	b.n	1000472c <memcpy+0x6>

1000473c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
1000473c:	0003      	movs	r3, r0
{
1000473e:	b580      	push	{r7, lr}
	unsigned char c_byte = (unsigned char)c;
10004740:	b2c9      	uxtb	r1, r1
{
10004742:	af00      	add	r7, sp, #0
10004744:	1882      	adds	r2, r0, r2
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
10004746:	4293      	cmp	r3, r2
10004748:	d101      	bne.n	1000474e <memset+0x12>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
1000474a:	46bd      	mov	sp, r7
1000474c:	bd80      	pop	{r7, pc}
		*(d_byte++) = c_byte;
1000474e:	7019      	strb	r1, [r3, #0]
		n--;
10004750:	3301      	adds	r3, #1
10004752:	e7f8      	b.n	10004746 <memset+0xa>

10004754 <_stdout_hook_default>:
{
10004754:	b580      	push	{r7, lr}
10004756:	af00      	add	r7, sp, #0
}
10004758:	46bd      	mov	sp, r7
	return EOF;
1000475a:	2001      	movs	r0, #1
}
1000475c:	4240      	negs	r0, r0
1000475e:	bd80      	pop	{r7, pc}

10004760 <gpio_rpi_port_get_raw>:
{
10004760:	b580      	push	{r7, lr}
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
10004762:	23d0      	movs	r3, #208	; 0xd0
10004764:	af00      	add	r7, sp, #0
}
10004766:	46bd      	mov	sp, r7
10004768:	061b      	lsls	r3, r3, #24
1000476a:	685b      	ldr	r3, [r3, #4]
1000476c:	2000      	movs	r0, #0
	*value = gpio_get_all();
1000476e:	600b      	str	r3, [r1, #0]
}
10004770:	bd80      	pop	{r7, pc}

10004772 <gpio_rpi_port_set_masked_raw>:
{
10004772:	b580      	push	{r7, lr}
 * corresponding bit in \p value, leaving other pins unchanged.
 * Since this uses the TOGL alias, it is concurrency-safe with e.g. an IRQ
 * bashing different pins from the same core.
 */
static inline void gpio_put_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10004774:	23d0      	movs	r3, #208	; 0xd0
10004776:	af00      	add	r7, sp, #0
}
10004778:	46bd      	mov	sp, r7
1000477a:	061b      	lsls	r3, r3, #24
1000477c:	6918      	ldr	r0, [r3, #16]
1000477e:	4042      	eors	r2, r0
10004780:	4011      	ands	r1, r2
10004782:	2000      	movs	r0, #0
10004784:	61d9      	str	r1, [r3, #28]
10004786:	bd80      	pop	{r7, pc}

10004788 <gpio_rpi_port_set_bits_raw>:
{
10004788:	b580      	push	{r7, lr}
    sio_hw->gpio_set = mask;
1000478a:	23d0      	movs	r3, #208	; 0xd0
1000478c:	af00      	add	r7, sp, #0
}
1000478e:	46bd      	mov	sp, r7
10004790:	061b      	lsls	r3, r3, #24
10004792:	2000      	movs	r0, #0
10004794:	6159      	str	r1, [r3, #20]
10004796:	bd80      	pop	{r7, pc}

10004798 <gpio_rpi_port_clear_bits_raw>:
{
10004798:	b580      	push	{r7, lr}
    sio_hw->gpio_clr = mask;
1000479a:	23d0      	movs	r3, #208	; 0xd0
1000479c:	af00      	add	r7, sp, #0
}
1000479e:	46bd      	mov	sp, r7
100047a0:	061b      	lsls	r3, r3, #24
100047a2:	2000      	movs	r0, #0
100047a4:	6199      	str	r1, [r3, #24]
100047a6:	bd80      	pop	{r7, pc}

100047a8 <gpio_rpi_port_toggle_bits>:
{
100047a8:	b580      	push	{r7, lr}
    sio_hw->gpio_togl = mask;
100047aa:	23d0      	movs	r3, #208	; 0xd0
100047ac:	af00      	add	r7, sp, #0
}
100047ae:	46bd      	mov	sp, r7
100047b0:	061b      	lsls	r3, r3, #24
100047b2:	2000      	movs	r0, #0
100047b4:	61d9      	str	r1, [r3, #28]
100047b6:	bd80      	pop	{r7, pc}

100047b8 <gpio_rpi_manage_callback>:
{
100047b8:	b5b0      	push	{r4, r5, r7, lr}
	struct gpio_rpi_data *data = dev->data;
100047ba:	6903      	ldr	r3, [r0, #16]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100047bc:	2400      	movs	r4, #0
	return list->head;
100047be:	6858      	ldr	r0, [r3, #4]
{
100047c0:	af00      	add	r7, sp, #0
	if (!sys_slist_is_empty(callbacks)) {
100047c2:	2800      	cmp	r0, #0
100047c4:	d105      	bne.n	100047d2 <gpio_rpi_manage_callback+0x1a>
	if (set) {
100047c6:	2a00      	cmp	r2, #0
100047c8:	d11b      	bne.n	10004802 <gpio_rpi_manage_callback+0x4a>
	return 0;
100047ca:	2000      	movs	r0, #0
}
100047cc:	46bd      	mov	sp, r7
100047ce:	bdb0      	pop	{r4, r5, r7, pc}
100047d0:	0028      	movs	r0, r5
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100047d2:	4281      	cmp	r1, r0
100047d4:	d10f      	bne.n	100047f6 <gpio_rpi_manage_callback+0x3e>
	return node->next;
100047d6:	6808      	ldr	r0, [r1, #0]
	return list->tail;
100047d8:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
100047da:	2c00      	cmp	r4, #0
100047dc:	d106      	bne.n	100047ec <gpio_rpi_manage_callback+0x34>
	list->head = node;
100047de:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
100047e0:	428d      	cmp	r5, r1
100047e2:	d100      	bne.n	100047e6 <gpio_rpi_manage_callback+0x2e>
	list->tail = node;
100047e4:	6098      	str	r0, [r3, #8]
	parent->next = child;
100047e6:	2000      	movs	r0, #0
100047e8:	6008      	str	r0, [r1, #0]
100047ea:	e7ec      	b.n	100047c6 <gpio_rpi_manage_callback+0xe>
100047ec:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
100047ee:	428d      	cmp	r5, r1
100047f0:	d1f9      	bne.n	100047e6 <gpio_rpi_manage_callback+0x2e>
	list->tail = node;
100047f2:	609c      	str	r4, [r3, #8]
}
100047f4:	e7f7      	b.n	100047e6 <gpio_rpi_manage_callback+0x2e>
	return node->next;
100047f6:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
100047f8:	0004      	movs	r4, r0
100047fa:	2d00      	cmp	r5, #0
100047fc:	d1e8      	bne.n	100047d0 <gpio_rpi_manage_callback+0x18>
			if (!set) {
100047fe:	2a00      	cmp	r2, #0
10004800:	d007      	beq.n	10004812 <gpio_rpi_manage_callback+0x5a>
	parent->next = child;
10004802:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
10004804:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
10004806:	600a      	str	r2, [r1, #0]
	list->head = node;
10004808:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
1000480a:	2800      	cmp	r0, #0
1000480c:	d1dd      	bne.n	100047ca <gpio_rpi_manage_callback+0x12>
	list->tail = node;
1000480e:	6099      	str	r1, [r3, #8]
}
10004810:	e7dc      	b.n	100047cc <gpio_rpi_manage_callback+0x14>
				return -EINVAL;
10004812:	2016      	movs	r0, #22
10004814:	4240      	negs	r0, r0
	return gpio_manage_callback(&data->callbacks, callback, set);
10004816:	e7d9      	b.n	100047cc <gpio_rpi_manage_callback+0x14>

10004818 <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
10004818:	b580      	push	{r7, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
1000481a:	6843      	ldr	r3, [r0, #4]
{
1000481c:	af00      	add	r7, sp, #0
	config->bank_config_func();
1000481e:	685b      	ldr	r3, [r3, #4]
10004820:	4798      	blx	r3
	return 0;
}
10004822:	46bd      	mov	sp, r7
10004824:	2000      	movs	r0, #0
10004826:	bd80      	pop	{r7, pc}

10004828 <gpio_rpi_pin_interrupt_configure>:
{
10004828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000482a:	000d      	movs	r5, r1
1000482c:	af00      	add	r7, sp, #0
	struct gpio_rpi_data *data = dev->data;
1000482e:	6906      	ldr	r6, [r0, #16]
{
10004830:	603a      	str	r2, [r7, #0]
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10004832:	210f      	movs	r1, #15
10004834:	2200      	movs	r2, #0
10004836:	0028      	movs	r0, r5
{
10004838:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
1000483a:	f7fe fb3d 	bl	10002eb8 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
1000483e:	2301      	movs	r3, #1
10004840:	40ab      	lsls	r3, r5
10004842:	607b      	str	r3, [r7, #4]
	if (mode != GPIO_INT_DISABLE) {
10004844:	2380      	movs	r3, #128	; 0x80
10004846:	683a      	ldr	r2, [r7, #0]
10004848:	039b      	lsls	r3, r3, #14
1000484a:	429a      	cmp	r2, r3
1000484c:	d020      	beq.n	10004890 <gpio_rpi_pin_interrupt_configure+0x68>
			if (trig & GPIO_INT_LOW_0) {
1000484e:	2180      	movs	r1, #128	; 0x80
			if (trig & GPIO_INT_HIGH_1) {
10004850:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
10004852:	0489      	lsls	r1, r1, #18
			if (trig & GPIO_INT_HIGH_1) {
10004854:	04db      	lsls	r3, r3, #19
			if (trig & GPIO_INT_LOW_0) {
10004856:	4021      	ands	r1, r4
			if (trig & GPIO_INT_HIGH_1) {
10004858:	401c      	ands	r4, r3
		if (mode & GPIO_INT_EDGE) {
1000485a:	0013      	movs	r3, r2
1000485c:	01db      	lsls	r3, r3, #7
1000485e:	d510      	bpl.n	10004882 <gpio_rpi_pin_interrupt_configure+0x5a>
			if (trig & GPIO_INT_LOW_0) {
10004860:	2900      	cmp	r1, #0
10004862:	d000      	beq.n	10004866 <gpio_rpi_pin_interrupt_configure+0x3e>
				events |= GPIO_IRQ_EDGE_FALL;
10004864:	2104      	movs	r1, #4
				events |= GPIO_IRQ_EDGE_RISE;
10004866:	2308      	movs	r3, #8
			if (trig & GPIO_INT_HIGH_1) {
10004868:	2c00      	cmp	r4, #0
1000486a:	d10f      	bne.n	1000488c <gpio_rpi_pin_interrupt_configure+0x64>
		gpio_set_irq_enabled(pin, events, true);
1000486c:	2201      	movs	r2, #1
1000486e:	0028      	movs	r0, r5
10004870:	f7fe fb22 	bl	10002eb8 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10004874:	687b      	ldr	r3, [r7, #4]
10004876:	68f2      	ldr	r2, [r6, #12]
10004878:	4313      	orrs	r3, r2
}
1000487a:	46bd      	mov	sp, r7
1000487c:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
1000487e:	60f3      	str	r3, [r6, #12]
}
10004880:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				events |= GPIO_IRQ_LEVEL_LOW;
10004882:	1e4b      	subs	r3, r1, #1
10004884:	4199      	sbcs	r1, r3
			if (trig & GPIO_INT_HIGH_1) {
10004886:	2c00      	cmp	r4, #0
10004888:	d0f0      	beq.n	1000486c <gpio_rpi_pin_interrupt_configure+0x44>
				events |= GPIO_IRQ_LEVEL_HIGH;
1000488a:	2302      	movs	r3, #2
1000488c:	4319      	orrs	r1, r3
1000488e:	e7ed      	b.n	1000486c <gpio_rpi_pin_interrupt_configure+0x44>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10004890:	68f3      	ldr	r3, [r6, #12]
10004892:	687a      	ldr	r2, [r7, #4]
10004894:	4393      	bics	r3, r2
10004896:	e7f0      	b.n	1000487a <gpio_rpi_pin_interrupt_configure+0x52>

10004898 <gpio_rpi_configure>:
	if (flags & GPIO_SINGLE_ENDED) {
10004898:	2302      	movs	r3, #2
{
1000489a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000489c:	000d      	movs	r5, r1
1000489e:	0014      	movs	r4, r2
100048a0:	af00      	add	r7, sp, #0
	if (flags & GPIO_SINGLE_ENDED) {
100048a2:	421a      	tst	r2, r3
100048a4:	d12d      	bne.n	10004902 <gpio_rpi_configure+0x6a>
	gpio_set_function(pin, GPIO_FUNC_SIO);
100048a6:	2105      	movs	r1, #5
100048a8:	0028      	movs	r0, r5
100048aa:	f7fe fa8f 	bl	10002dcc <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
100048ae:	2380      	movs	r3, #128	; 0x80
100048b0:	0022      	movs	r2, r4
100048b2:	029b      	lsls	r3, r3, #10
100048b4:	401a      	ands	r2, r3
100048b6:	607a      	str	r2, [r7, #4]
100048b8:	421c      	tst	r4, r3
100048ba:	d012      	beq.n	100048e2 <gpio_rpi_configure+0x4a>
 *
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
100048bc:	2301      	movs	r3, #1
    sio_hw->gpio_oe_set = mask;
100048be:	22d0      	movs	r2, #208	; 0xd0
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
100048c0:	2180      	movs	r1, #128	; 0x80
    uint32_t mask = 1ul << gpio;
100048c2:	40ab      	lsls	r3, r5
100048c4:	0020      	movs	r0, r4
    sio_hw->gpio_oe_set = mask;
100048c6:	0612      	lsls	r2, r2, #24
100048c8:	0309      	lsls	r1, r1, #12
100048ca:	6253      	str	r3, [r2, #36]	; 0x24
100048cc:	4008      	ands	r0, r1
100048ce:	420c      	tst	r4, r1
100048d0:	d003      	beq.n	100048da <gpio_rpi_configure+0x42>
    sio_hw->gpio_set = mask;
100048d2:	6153      	str	r3, [r2, #20]
	return 0;
100048d4:	2000      	movs	r0, #0
}
100048d6:	46bd      	mov	sp, r7
100048d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
100048da:	0361      	lsls	r1, r4, #13
100048dc:	d5fa      	bpl.n	100048d4 <gpio_rpi_configure+0x3c>
    sio_hw->gpio_clr = mask;
100048de:	6193      	str	r3, [r2, #24]
}
100048e0:	e7f9      	b.n	100048d6 <gpio_rpi_configure+0x3e>
	} else if (flags & GPIO_INPUT) {
100048e2:	03e3      	lsls	r3, r4, #15
100048e4:	d5f6      	bpl.n	100048d4 <gpio_rpi_configure+0x3c>
    uint32_t mask = 1ul << gpio;
100048e6:	2301      	movs	r3, #1
100048e8:	0019      	movs	r1, r3
    sio_hw->gpio_oe_clr = mask;
100048ea:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
100048ec:	40a9      	lsls	r1, r5
    sio_hw->gpio_oe_clr = mask;
100048ee:	0612      	lsls	r2, r2, #24
100048f0:	6291      	str	r1, [r2, #40]	; 0x28
		gpio_set_pulls(pin,
100048f2:	0962      	lsrs	r2, r4, #5
100048f4:	0921      	lsrs	r1, r4, #4
100048f6:	0028      	movs	r0, r5
100048f8:	401a      	ands	r2, r3
100048fa:	4019      	ands	r1, r3
100048fc:	f7fe fa7e 	bl	10002dfc <gpio_set_pulls>
10004900:	e7e8      	b.n	100048d4 <gpio_rpi_configure+0x3c>
		return -ENOTSUP;
10004902:	2086      	movs	r0, #134	; 0x86
10004904:	4240      	negs	r0, r0
10004906:	e7e6      	b.n	100048d6 <gpio_rpi_configure+0x3e>

10004908 <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
10004908:	b580      	push	{r7, lr}
1000490a:	2200      	movs	r2, #0
1000490c:	af00      	add	r7, sp, #0
1000490e:	2103      	movs	r1, #3
10004910:	200d      	movs	r0, #13
10004912:	f7fd fb2d 	bl	10001f70 <z_arm_irq_priority_set>
10004916:	200d      	movs	r0, #13
10004918:	f7fd fb1c 	bl	10001f54 <arch_irq_enable>
1000491c:	46bd      	mov	sp, r7
1000491e:	bd80      	pop	{r7, pc}

10004920 <i2c_dw_runtime_configure>:
{
10004920:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (I2C_SPEED_GET(dw->app_config)) {
10004922:	2407      	movs	r4, #7
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004924:	6842      	ldr	r2, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10004926:	6903      	ldr	r3, [r0, #16]
	switch (I2C_SPEED_GET(dw->app_config)) {
10004928:	084d      	lsrs	r5, r1, #1
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000492a:	6812      	ldr	r2, [r2, #0]
{
1000492c:	af00      	add	r7, sp, #0
	dw->app_config = config;
1000492e:	6119      	str	r1, [r3, #16]
	switch (I2C_SPEED_GET(dw->app_config)) {
10004930:	402c      	ands	r4, r5
10004932:	0768      	lsls	r0, r5, #29
10004934:	d409      	bmi.n	1000494a <i2c_dw_runtime_configure+0x2a>
10004936:	2606      	movs	r6, #6
10004938:	0028      	movs	r0, r5
1000493a:	4030      	ands	r0, r6
1000493c:	4235      	tst	r5, r6
1000493e:	d128      	bne.n	10004992 <i2c_dw_runtime_configure+0x72>
10004940:	2c01      	cmp	r4, #1
10004942:	d00c      	beq.n	1000495e <i2c_dw_runtime_configure+0x3e>
			rc = -EINVAL;
10004944:	2016      	movs	r0, #22
10004946:	4240      	negs	r0, r0
10004948:	e01d      	b.n	10004986 <i2c_dw_runtime_configure+0x66>
	switch (I2C_SPEED_GET(dw->app_config)) {
1000494a:	2c04      	cmp	r4, #4
1000494c:	d1fa      	bne.n	10004944 <i2c_dw_runtime_configure+0x24>
		if (dw->support_hs_mode) {
1000494e:	0018      	movs	r0, r3
10004950:	3008      	adds	r0, #8
10004952:	7fc0      	ldrb	r0, [r0, #31]
10004954:	2800      	cmp	r0, #0
10004956:	d0f5      	beq.n	10004944 <i2c_dw_runtime_configure+0x24>
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)
10004958:	0014      	movs	r4, r2
1000495a:	34a4      	adds	r4, #164	; 0xa4
1000495c:	e01b      	b.n	10004996 <i2c_dw_runtime_configure+0x76>
DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
1000495e:	0015      	movs	r5, r2
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
10004960:	24fa      	movs	r4, #250	; 0xfa
10004962:	35a0      	adds	r5, #160	; 0xa0
	return *(volatile uint32_t *)addr;
10004964:	682e      	ldr	r6, [r5, #0]
10004966:	0064      	lsls	r4, r4, #1
10004968:	3607      	adds	r6, #7
1000496a:	42a6      	cmp	r6, r4
1000496c:	d301      	bcc.n	10004972 <i2c_dw_runtime_configure+0x52>
1000496e:	682c      	ldr	r4, [r5, #0]
			value = read_fs_spklen(reg_base) + 8;
10004970:	3408      	adds	r4, #8
		dw->lcnt = value;
10004972:	845c      	strh	r4, [r3, #34]	; 0x22
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
10004974:	24c8      	movs	r4, #200	; 0xc8
10004976:	682e      	ldr	r6, [r5, #0]
10004978:	0064      	lsls	r4, r4, #1
1000497a:	3605      	adds	r6, #5
1000497c:	42a6      	cmp	r6, r4
1000497e:	d301      	bcc.n	10004984 <i2c_dw_runtime_configure+0x64>
10004980:	682c      	ldr	r4, [r5, #0]
			value = read_fs_spklen(reg_base) + 6;
10004982:	3406      	adds	r4, #6
		dw->hcnt = value;
10004984:	841c      	strh	r4, [r3, #32]
10004986:	6c12      	ldr	r2, [r2, #64]	; 0x40
	dw->app_config |= I2C_MODE_CONTROLLER;
10004988:	2210      	movs	r2, #16
}
1000498a:	46bd      	mov	sp, r7
	dw->app_config |= I2C_MODE_CONTROLLER;
1000498c:	4311      	orrs	r1, r2
1000498e:	6119      	str	r1, [r3, #16]
}
10004990:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004992:	0014      	movs	r4, r2
10004994:	34a0      	adds	r4, #160	; 0xa0
10004996:	6825      	ldr	r5, [r4, #0]
				value = I2C_HS_LCNT;
10004998:	2057      	movs	r0, #87	; 0x57
			if (I2C_HS_LCNT <= (read_hs_spklen(reg_base) + 7)) {
1000499a:	3507      	adds	r5, #7
1000499c:	2d56      	cmp	r5, #86	; 0x56
1000499e:	d901      	bls.n	100049a4 <i2c_dw_runtime_configure+0x84>
100049a0:	6820      	ldr	r0, [r4, #0]
				value = read_hs_spklen(reg_base) + 8;
100049a2:	3008      	adds	r0, #8
100049a4:	6825      	ldr	r5, [r4, #0]
			dw->lcnt = value;
100049a6:	8458      	strh	r0, [r3, #34]	; 0x22
			if (I2C_HS_HCNT <= (read_hs_spklen(reg_base) + 5)) {
100049a8:	3505      	adds	r5, #5
				value = I2C_HS_HCNT;
100049aa:	204b      	movs	r0, #75	; 0x4b
			if (I2C_HS_HCNT <= (read_hs_spklen(reg_base) + 5)) {
100049ac:	2d4a      	cmp	r5, #74	; 0x4a
100049ae:	d901      	bls.n	100049b4 <i2c_dw_runtime_configure+0x94>
100049b0:	6820      	ldr	r0, [r4, #0]
				value = read_hs_spklen(reg_base) + 6;
100049b2:	3006      	adds	r0, #6
			dw->hcnt = value;
100049b4:	8418      	strh	r0, [r3, #32]
	uint32_t	rc = 0U;
100049b6:	2000      	movs	r0, #0
100049b8:	e7e5      	b.n	10004986 <i2c_dw_runtime_configure+0x66>

100049ba <i2c_config_0>:
			      &i2c_##n##_runtime, &i2c_config_dw_##n,         \
			      POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,          \
			      &funcs);                                        \
	I2C_DW_IRQ_CONFIG(n)

DT_INST_FOREACH_STATUS_OKAY(I2C_DEVICE_INIT_DW)
100049ba:	b580      	push	{r7, lr}
100049bc:	2200      	movs	r2, #0
100049be:	af00      	add	r7, sp, #0
100049c0:	2103      	movs	r1, #3
100049c2:	2017      	movs	r0, #23
100049c4:	f7fd fad4 	bl	10001f70 <z_arm_irq_priority_set>
100049c8:	2017      	movs	r0, #23
100049ca:	f7fd fac3 	bl	10001f54 <arch_irq_enable>
100049ce:	46bd      	mov	sp, r7
100049d0:	bd80      	pop	{r7, pc}

100049d2 <i2c_config_1>:
100049d2:	b580      	push	{r7, lr}
100049d4:	2200      	movs	r2, #0
100049d6:	af00      	add	r7, sp, #0
100049d8:	2103      	movs	r1, #3
100049da:	2018      	movs	r0, #24
100049dc:	f7fd fac8 	bl	10001f70 <z_arm_irq_priority_set>
100049e0:	2018      	movs	r0, #24
100049e2:	f7fd fab7 	bl	10001f54 <arch_irq_enable>
100049e6:	46bd      	mov	sp, r7
100049e8:	bd80      	pop	{r7, pc}

100049ea <i2c_dw_isr>:
	return (uint32_t)DEVICE_MMIO_GET(dev);
100049ea:	6843      	ldr	r3, [r0, #4]
{
100049ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (uint32_t)DEVICE_MMIO_GET(dev);
100049ee:	681b      	ldr	r3, [r3, #0]
{
100049f0:	b085      	sub	sp, #20
	return (uint32_t)DEVICE_MMIO_GET(dev);
100049f2:	469c      	mov	ip, r3
100049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
100049f6:	af00      	add	r7, sp, #0
100049f8:	60bb      	str	r3, [r7, #8]
100049fa:	4663      	mov	r3, ip
100049fc:	681b      	ldr	r3, [r3, #0]
100049fe:	60f8      	str	r0, [r7, #12]
	if (test_bit_con_master_mode(reg_base)) {
10004a00:	07db      	lsls	r3, r3, #31
10004a02:	d510      	bpl.n	10004a26 <i2c_dw_isr+0x3c>
		     DW_INTR_STAT_RX_OVER | DW_INTR_STAT_RX_UNDER) &
10004a04:	224b      	movs	r2, #75	; 0x4b
	struct i2c_dw_dev_config * const dw = port->data;
10004a06:	6901      	ldr	r1, [r0, #16]
		if ((DW_INTR_STAT_TX_ABRT | DW_INTR_STAT_TX_OVER |
10004a08:	68b8      	ldr	r0, [r7, #8]
10004a0a:	2304      	movs	r3, #4
10004a0c:	4210      	tst	r0, r2
10004a0e:	d00d      	beq.n	10004a2c <i2c_dw_isr+0x42>
			dw->state = I2C_DW_CMD_ERROR;
10004a10:	3105      	adds	r1, #5
10004a12:	77cb      	strb	r3, [r1, #31]
	*(volatile uint32_t *)addr = data;
10004a14:	2200      	movs	r2, #0
	struct i2c_dw_dev_config * const dw = dev->data;
10004a16:	68fb      	ldr	r3, [r7, #12]
10004a18:	6918      	ldr	r0, [r3, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004a1a:	685b      	ldr	r3, [r3, #4]
10004a1c:	681b      	ldr	r3, [r3, #0]
10004a1e:	631a      	str	r2, [r3, #48]	; 0x30
	return *(volatile uint32_t *)addr;
10004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	z_impl_k_sem_give(sem);
10004a22:	f7fe fd49 	bl	100034b8 <z_impl_k_sem_give>
}
10004a26:	46bd      	mov	sp, r7
10004a28:	b005      	add	sp, #20
10004a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (intr_stat.bits.rx_full) {
10004a2c:	68b8      	ldr	r0, [r7, #8]
	return temp & (1 << bit);
10004a2e:	2408      	movs	r4, #8
10004a30:	7a3a      	ldrb	r2, [r7, #8]
10004a32:	4218      	tst	r0, r3
10004a34:	d124      	bne.n	10004a80 <i2c_dw_isr+0x96>
		if ((dw->xfr_flags & I2C_MSG_RW_MASK)
10004a36:	1dcb      	adds	r3, r1, #7
10004a38:	7fd8      	ldrb	r0, [r3, #31]
10004a3a:	2301      	movs	r3, #1
10004a3c:	0004      	movs	r4, r0
10004a3e:	401c      	ands	r4, r3
10004a40:	4218      	tst	r0, r3
10004a42:	d005      	beq.n	10004a50 <i2c_dw_isr+0x66>
	uint32_t temp = *(volatile uint32_t *)addr;
10004a44:	4663      	mov	r3, ip
10004a46:	6b18      	ldr	r0, [r3, #48]	; 0x30
	*(volatile uint32_t *)addr = temp | (1 << bit);
10004a48:	2310      	movs	r3, #16
10004a4a:	4303      	orrs	r3, r0
10004a4c:	4660      	mov	r0, ip
10004a4e:	6303      	str	r3, [r0, #48]	; 0x30
		if (intr_stat.bits.tx_empty) {
10004a50:	2310      	movs	r3, #16
10004a52:	421a      	tst	r2, r3
10004a54:	d124      	bne.n	10004aa0 <i2c_dw_isr+0xb6>
		if (intr_stat.bits.stop_det) {
10004a56:	68bb      	ldr	r3, [r7, #8]
10004a58:	059b      	lsls	r3, r3, #22
10004a5a:	d5e4      	bpl.n	10004a26 <i2c_dw_isr+0x3c>
10004a5c:	4663      	mov	r3, ip
10004a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
			goto done;
10004a60:	e7d8      	b.n	10004a14 <i2c_dw_isr+0x2a>
10004a62:	4663      	mov	r3, ip
		dw->xfr_buf[0] = (uint8_t)read_cmd_data(reg_base);
10004a64:	6948      	ldr	r0, [r1, #20]
10004a66:	691b      	ldr	r3, [r3, #16]
10004a68:	7003      	strb	r3, [r0, #0]
		dw->xfr_buf++;
10004a6a:	694b      	ldr	r3, [r1, #20]
		dw->rx_pending--;
10004a6c:	69c8      	ldr	r0, [r1, #28]
		dw->xfr_buf++;
10004a6e:	3301      	adds	r3, #1
10004a70:	614b      	str	r3, [r1, #20]
		dw->xfr_len--;
10004a72:	698b      	ldr	r3, [r1, #24]
		dw->rx_pending--;
10004a74:	3801      	subs	r0, #1
		dw->xfr_len--;
10004a76:	3b01      	subs	r3, #1
10004a78:	618b      	str	r3, [r1, #24]
		dw->rx_pending--;
10004a7a:	61c8      	str	r0, [r1, #28]
		if (dw->xfr_len == 0U) {
10004a7c:	2b00      	cmp	r3, #0
10004a7e:	d006      	beq.n	10004a8e <i2c_dw_isr+0xa4>
	uint32_t temp = *(volatile uint32_t *)addr;
10004a80:	4663      	mov	r3, ip
10004a82:	6f18      	ldr	r0, [r3, #112]	; 0x70
	while (test_bit_status_rfne(reg_base) && (dw->xfr_len > 0)) {
10004a84:	698b      	ldr	r3, [r1, #24]
10004a86:	4220      	tst	r0, r4
10004a88:	d007      	beq.n	10004a9a <i2c_dw_isr+0xb0>
10004a8a:	2b00      	cmp	r3, #0
10004a8c:	d1e9      	bne.n	10004a62 <i2c_dw_isr+0x78>
		dw->state &= ~I2C_DW_CMD_RECV;
10004a8e:	2402      	movs	r4, #2
10004a90:	1d48      	adds	r0, r1, #5
10004a92:	7fc3      	ldrb	r3, [r0, #31]
10004a94:	43a3      	bics	r3, r4
10004a96:	77c3      	strb	r3, [r0, #31]
		return;
10004a98:	e7cd      	b.n	10004a36 <i2c_dw_isr+0x4c>
	if (dw->xfr_len == 0U) {
10004a9a:	2b00      	cmp	r3, #0
10004a9c:	d1cb      	bne.n	10004a36 <i2c_dw_isr+0x4c>
10004a9e:	e7f6      	b.n	10004a8e <i2c_dw_isr+0xa4>
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004aa0:	68f8      	ldr	r0, [r7, #12]
	struct i2c_dw_dev_config * const dw = dev->data;
10004aa2:	68fa      	ldr	r2, [r7, #12]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004aa4:	6840      	ldr	r0, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
10004aa6:	6912      	ldr	r2, [r2, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10004aa8:	6800      	ldr	r0, [r0, #0]
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
10004aaa:	2c00      	cmp	r4, #0
10004aac:	d141      	bne.n	10004b32 <i2c_dw_isr+0x148>
	if (dw->xfr_len == 0U) {
10004aae:	6995      	ldr	r5, [r2, #24]
10004ab0:	2d00      	cmp	r5, #0
10004ab2:	d138      	bne.n	10004b26 <i2c_dw_isr+0x13c>
	uint32_t temp = *(volatile uint32_t *)addr;
10004ab4:	6b05      	ldr	r5, [r0, #48]	; 0x30
		dw->state &= ~I2C_DW_CMD_SEND;
10004ab6:	3205      	adds	r2, #5
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10004ab8:	439d      	bics	r5, r3
10004aba:	6305      	str	r5, [r0, #48]	; 0x30
10004abc:	2001      	movs	r0, #1
10004abe:	7fd3      	ldrb	r3, [r2, #31]
10004ac0:	4383      	bics	r3, r0
10004ac2:	77d3      	strb	r3, [r2, #31]
			if (((dw->xfr_len == 0U)
10004ac4:	698b      	ldr	r3, [r1, #24]
10004ac6:	2b00      	cmp	r3, #0
10004ac8:	d103      	bne.n	10004ad2 <i2c_dw_isr+0xe8>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
10004aca:	3107      	adds	r1, #7
10004acc:	7fcb      	ldrb	r3, [r1, #31]
10004ace:	079b      	lsls	r3, r3, #30
10004ad0:	d5a0      	bpl.n	10004a14 <i2c_dw_isr+0x2a>
			    || (ret != 0)) {
10004ad2:	2c00      	cmp	r4, #0
10004ad4:	d0bf      	beq.n	10004a56 <i2c_dw_isr+0x6c>
10004ad6:	e79d      	b.n	10004a14 <i2c_dw_isr+0x2a>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
10004ad8:	6995      	ldr	r5, [r2, #24]
10004ada:	2d00      	cmp	r5, #0
10004adc:	d027      	beq.n	10004b2e <i2c_dw_isr+0x144>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10004ade:	2604      	movs	r6, #4
		data = dw->xfr_buf[0];
10004ae0:	6953      	ldr	r3, [r2, #20]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10004ae2:	1dd4      	adds	r4, r2, #7
		data = dw->xfr_buf[0];
10004ae4:	607b      	str	r3, [r7, #4]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10004ae6:	603c      	str	r4, [r7, #0]
10004ae8:	7fe4      	ldrb	r4, [r4, #31]
		data = dw->xfr_buf[0];
10004aea:	781b      	ldrb	r3, [r3, #0]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10004aec:	4234      	tst	r4, r6
10004aee:	d006      	beq.n	10004afe <i2c_dw_isr+0x114>
			data |= IC_DATA_CMD_RESTART;
10004af0:	2680      	movs	r6, #128	; 0x80
10004af2:	00f6      	lsls	r6, r6, #3
10004af4:	4333      	orrs	r3, r6
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
10004af6:	2604      	movs	r6, #4
10004af8:	43b4      	bics	r4, r6
10004afa:	1dd6      	adds	r6, r2, #7
10004afc:	77f4      	strb	r4, [r6, #31]
		if ((dw->xfr_len == 1U) && (dw->xfr_flags & I2C_MSG_STOP)) {
10004afe:	2d01      	cmp	r5, #1
10004b00:	d107      	bne.n	10004b12 <i2c_dw_isr+0x128>
10004b02:	1dd4      	adds	r4, r2, #7
10004b04:	7fe4      	ldrb	r4, [r4, #31]
10004b06:	3501      	adds	r5, #1
10004b08:	422c      	tst	r4, r5
10004b0a:	d002      	beq.n	10004b12 <i2c_dw_isr+0x128>
			data |= IC_DATA_CMD_STOP;
10004b0c:	2480      	movs	r4, #128	; 0x80
10004b0e:	00a4      	lsls	r4, r4, #2
10004b10:	4323      	orrs	r3, r4
	*(volatile uint32_t *)addr = data;
10004b12:	6103      	str	r3, [r0, #16]
		dw->xfr_len--;
10004b14:	6993      	ldr	r3, [r2, #24]
10004b16:	3b01      	subs	r3, #1
10004b18:	6193      	str	r3, [r2, #24]
		dw->xfr_buf++;
10004b1a:	687b      	ldr	r3, [r7, #4]
10004b1c:	3301      	adds	r3, #1
10004b1e:	6153      	str	r3, [r2, #20]
	uint32_t temp = *(volatile uint32_t *)addr;
10004b20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		if (test_bit_intr_stat_tx_abrt(reg_base)) {
10004b22:	065b      	lsls	r3, r3, #25
10004b24:	d45c      	bmi.n	10004be0 <i2c_dw_isr+0x1f6>
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
10004b26:	2402      	movs	r4, #2
10004b28:	6f03      	ldr	r3, [r0, #112]	; 0x70
10004b2a:	4223      	tst	r3, r4
10004b2c:	d1d4      	bne.n	10004ad8 <i2c_dw_isr+0xee>
	return 0;
10004b2e:	2400      	movs	r4, #0
10004b30:	e7c8      	b.n	10004ac4 <i2c_dw_isr+0xda>
	if (dw->request_bytes == 0U) {
10004b32:	1d94      	adds	r4, r2, #6
10004b34:	7fe4      	ldrb	r4, [r4, #31]
10004b36:	2c00      	cmp	r4, #0
10004b38:	d103      	bne.n	10004b42 <i2c_dw_isr+0x158>
	uint32_t temp = *(volatile uint32_t *)addr;
10004b3a:	6b02      	ldr	r2, [r0, #48]	; 0x30
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10004b3c:	439a      	bics	r2, r3
10004b3e:	6302      	str	r2, [r0, #48]	; 0x30
DEFINE_CLEAR_BIT_OP(intr_mask_tx_empty, DW_IC_REG_INTR_MASK, DW_IC_INTR_MASK_TX_EMPTY_BIT)
10004b40:	e7c0      	b.n	10004ac4 <i2c_dw_isr+0xda>
DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
10004b42:	0003      	movs	r3, r0
10004b44:	33f4      	adds	r3, #244	; 0xf4
	return *(volatile uint32_t *)addr;
10004b46:	681b      	ldr	r3, [r3, #0]
10004b48:	6f86      	ldr	r6, [r0, #120]	; 0x78
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
10004b4a:	041d      	lsls	r5, r3, #16
10004b4c:	0e2d      	lsrs	r5, r5, #24
10004b4e:	3501      	adds	r5, #1
10004b50:	607b      	str	r3, [r7, #4]
10004b52:	b2ed      	uxtb	r5, r5
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
10004b54:	69d3      	ldr	r3, [r2, #28]
10004b56:	1bae      	subs	r6, r5, r6
10004b58:	1af6      	subs	r6, r6, r3
10004b5a:	b273      	sxtb	r3, r6
10004b5c:	603b      	str	r3, [r7, #0]
	if (rx_empty < 0) {
10004b5e:	0033      	movs	r3, r6
10004b60:	061b      	lsls	r3, r3, #24
10004b62:	d4e4      	bmi.n	10004b2e <i2c_dw_isr+0x144>
10004b64:	6f43      	ldr	r3, [r0, #116]	; 0x74
10004b66:	001e      	movs	r6, r3
	tx_buffer_depth = ic_comp_param_1.bits.tx_buffer_depth + 1;
10004b68:	687b      	ldr	r3, [r7, #4]
10004b6a:	021b      	lsls	r3, r3, #8
10004b6c:	0e1b      	lsrs	r3, r3, #24
10004b6e:	3301      	adds	r3, #1
	tx_empty = tx_buffer_depth - read_txflr(reg_base);
10004b70:	1b9b      	subs	r3, r3, r6
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
10004b72:	b2db      	uxtb	r3, r3
10004b74:	001e      	movs	r6, r3
	cnt = MIN(rx_buffer_depth, dw->request_bytes);
10004b76:	1c23      	adds	r3, r4, #0
10004b78:	42ac      	cmp	r4, r5
10004b7a:	d900      	bls.n	10004b7e <i2c_dw_isr+0x194>
10004b7c:	1c2b      	adds	r3, r5, #0
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
10004b7e:	b2dc      	uxtb	r4, r3
10004b80:	0033      	movs	r3, r6
10004b82:	42a6      	cmp	r6, r4
10004b84:	dd00      	ble.n	10004b88 <i2c_dw_isr+0x19e>
10004b86:	0023      	movs	r3, r4
10004b88:	683c      	ldr	r4, [r7, #0]
10004b8a:	42a3      	cmp	r3, r4
10004b8c:	dd00      	ble.n	10004b90 <i2c_dw_isr+0x1a6>
10004b8e:	0023      	movs	r3, r4
		cnt--;
10004b90:	b2db      	uxtb	r3, r3
	while (cnt > 0) {
10004b92:	2b00      	cmp	r3, #0
10004b94:	d0cb      	beq.n	10004b2e <i2c_dw_isr+0x144>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10004b96:	2604      	movs	r6, #4
10004b98:	1dd5      	adds	r5, r2, #7
10004b9a:	7fec      	ldrb	r4, [r5, #31]
10004b9c:	4234      	tst	r4, r6
10004b9e:	d01c      	beq.n	10004bda <i2c_dw_isr+0x1f0>
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
10004ba0:	43b4      	bics	r4, r6
10004ba2:	77ec      	strb	r4, [r5, #31]
			data |= IC_DATA_CMD_RESTART;
10004ba4:	24a0      	movs	r4, #160	; 0xa0
10004ba6:	00e4      	lsls	r4, r4, #3
		if ((dw->xfr_flags & I2C_MSG_STOP)
10004ba8:	2602      	movs	r6, #2
10004baa:	7fed      	ldrb	r5, [r5, #31]
10004bac:	4235      	tst	r5, r6
10004bae:	d006      	beq.n	10004bbe <i2c_dw_isr+0x1d4>
		    && (dw->request_bytes == 1U)) {
10004bb0:	1d95      	adds	r5, r2, #6
10004bb2:	7fed      	ldrb	r5, [r5, #31]
10004bb4:	2d01      	cmp	r5, #1
10004bb6:	d102      	bne.n	10004bbe <i2c_dw_isr+0x1d4>
			data |= IC_DATA_CMD_STOP;
10004bb8:	2580      	movs	r5, #128	; 0x80
10004bba:	00ad      	lsls	r5, r5, #2
10004bbc:	432c      	orrs	r4, r5
10004bbe:	2610      	movs	r6, #16
	uint32_t temp = *(volatile uint32_t *)addr;
10004bc0:	6b05      	ldr	r5, [r0, #48]	; 0x30
		cnt--;
10004bc2:	3b01      	subs	r3, #1
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10004bc4:	43b5      	bics	r5, r6
10004bc6:	6305      	str	r5, [r0, #48]	; 0x30
	*(volatile uint32_t *)addr = data;
10004bc8:	6104      	str	r4, [r0, #16]
		dw->rx_pending++;
10004bca:	69d4      	ldr	r4, [r2, #28]
		dw->request_bytes--;
10004bcc:	1d95      	adds	r5, r2, #6
		dw->rx_pending++;
10004bce:	3401      	adds	r4, #1
10004bd0:	61d4      	str	r4, [r2, #28]
		dw->request_bytes--;
10004bd2:	7fec      	ldrb	r4, [r5, #31]
10004bd4:	3c01      	subs	r4, #1
10004bd6:	77ec      	strb	r4, [r5, #31]
		cnt--;
10004bd8:	e7da      	b.n	10004b90 <i2c_dw_isr+0x1a6>
		data = IC_DATA_CMD_CMD;
10004bda:	2480      	movs	r4, #128	; 0x80
10004bdc:	0064      	lsls	r4, r4, #1
10004bde:	e7e3      	b.n	10004ba8 <i2c_dw_isr+0x1be>
			return -EIO;
10004be0:	2405      	movs	r4, #5
10004be2:	4264      	negs	r4, r4
10004be4:	e76e      	b.n	10004ac4 <i2c_dw_isr+0xda>

10004be6 <led_pwm_blink>:
	const struct pwm_dt_spec *led;
};

static int led_pwm_blink(const struct device *dev, uint32_t led,
			 uint32_t delay_on, uint32_t delay_off)
{
10004be6:	b5b3      	push	{r0, r1, r4, r5, r7, lr}
	const struct led_pwm_config *config = dev->config;
10004be8:	6840      	ldr	r0, [r0, #4]
{
10004bea:	af02      	add	r7, sp, #8
	const struct pwm_dt_spec *dt_led;
	uint32_t period_usec, pulse_usec;

	if (led >= config->num_leds) {
10004bec:	6804      	ldr	r4, [r0, #0]
10004bee:	428c      	cmp	r4, r1
10004bf0:	d933      	bls.n	10004c5a <led_pwm_blink+0x74>
	return __builtin_add_overflow(a, b, result);
}

static inline bool u32_add_overflow(uint32_t a, uint32_t b, uint32_t *result)
{
	return __builtin_add_overflow(a, b, result);
10004bf2:	18d3      	adds	r3, r2, r3
10004bf4:	4293      	cmp	r3, r2
10004bf6:	d330      	bcc.n	10004c5a <led_pwm_blink+0x74>
	return __builtin_mul_overflow(a, b, result);
}

static inline bool u32_mul_overflow(uint32_t a, uint32_t b, uint32_t *result)
{
	return __builtin_mul_overflow(a, b, result);
10004bf8:	25fa      	movs	r5, #250	; 0xfa
10004bfa:	0c1c      	lsrs	r4, r3, #16
10004bfc:	00ad      	lsls	r5, r5, #2
10004bfe:	b29b      	uxth	r3, r3
10004c00:	2c00      	cmp	r4, #0
10004c02:	d116      	bne.n	10004c32 <led_pwm_blink+0x4c>
10004c04:	002c      	movs	r4, r5
10004c06:	435c      	muls	r4, r3
10004c08:	23fa      	movs	r3, #250	; 0xfa
10004c0a:	0c15      	lsrs	r5, r2, #16
10004c0c:	009b      	lsls	r3, r3, #2
10004c0e:	b292      	uxth	r2, r2
10004c10:	2d00      	cmp	r5, #0
10004c12:	d118      	bne.n	10004c46 <led_pwm_blink+0x60>
10004c14:	4353      	muls	r3, r2
		return -EINVAL;
	}

	dt_led = &config->led[led];

	return pwm_set_dt(dt_led, PWM_USEC(period_usec), PWM_USEC(pulse_usec));
10004c16:	22fa      	movs	r2, #250	; 0xfa
	dt_led = &config->led[led];
10004c18:	6840      	ldr	r0, [r0, #4]
10004c1a:	0109      	lsls	r1, r1, #4
10004c1c:	1840      	adds	r0, r0, r1
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
			     uint32_t pulse)
{
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
10004c1e:	8981      	ldrh	r1, [r0, #12]
	return pwm_set_dt(dt_led, PWM_USEC(period_usec), PWM_USEC(pulse_usec));
10004c20:	0092      	lsls	r2, r2, #2
10004c22:	9100      	str	r1, [sp, #0]
10004c24:	4353      	muls	r3, r2
10004c26:	c803      	ldmia	r0, {r0, r1}
10004c28:	4362      	muls	r2, r4
10004c2a:	f7fd fd0b 	bl	10002644 <pwm_set>
}
10004c2e:	46bd      	mov	sp, r7
10004c30:	bdb0      	pop	{r4, r5, r7, pc}
10004c32:	436b      	muls	r3, r5
10004c34:	436c      	muls	r4, r5
10004c36:	0c1d      	lsrs	r5, r3, #16
10004c38:	1964      	adds	r4, r4, r5
10004c3a:	0c25      	lsrs	r5, r4, #16
10004c3c:	d10d      	bne.n	10004c5a <led_pwm_blink+0x74>
10004c3e:	0424      	lsls	r4, r4, #16
10004c40:	b29b      	uxth	r3, r3
10004c42:	431c      	orrs	r4, r3
10004c44:	e7e0      	b.n	10004c08 <led_pwm_blink+0x22>
10004c46:	435a      	muls	r2, r3
10004c48:	436b      	muls	r3, r5
10004c4a:	0c15      	lsrs	r5, r2, #16
10004c4c:	195b      	adds	r3, r3, r5
10004c4e:	0c1d      	lsrs	r5, r3, #16
10004c50:	d103      	bne.n	10004c5a <led_pwm_blink+0x74>
10004c52:	041b      	lsls	r3, r3, #16
10004c54:	b292      	uxth	r2, r2
10004c56:	4313      	orrs	r3, r2
10004c58:	e7dd      	b.n	10004c16 <led_pwm_blink+0x30>
		return -EINVAL;
10004c5a:	2016      	movs	r0, #22
10004c5c:	4240      	negs	r0, r0
10004c5e:	e7e6      	b.n	10004c2e <led_pwm_blink+0x48>

10004c60 <led_pwm_set_brightness>:

static int led_pwm_set_brightness(const struct device *dev,
				  uint32_t led, uint8_t value)
{
10004c60:	b5b3      	push	{r0, r1, r4, r5, r7, lr}
	const struct led_pwm_config *config = dev->config;
10004c62:	6843      	ldr	r3, [r0, #4]
{
10004c64:	af02      	add	r7, sp, #8
	const struct pwm_dt_spec *dt_led;

	if (led >= config->num_leds || value > 100) {
10004c66:	6818      	ldr	r0, [r3, #0]
10004c68:	4288      	cmp	r0, r1
10004c6a:	d913      	bls.n	10004c94 <led_pwm_set_brightness+0x34>
10004c6c:	2a64      	cmp	r2, #100	; 0x64
10004c6e:	d811      	bhi.n	10004c94 <led_pwm_set_brightness+0x34>
		return -EINVAL;
	}

	dt_led = &config->led[led];
10004c70:	685c      	ldr	r4, [r3, #4]
10004c72:	0109      	lsls	r1, r1, #4
10004c74:	1864      	adds	r4, r4, r1

	return pwm_set_pulse_dt(&config->led[led],
				dt_led->period * value / 100);
10004c76:	68a5      	ldr	r5, [r4, #8]
	return pwm_set_pulse_dt(&config->led[led],
10004c78:	2164      	movs	r1, #100	; 0x64
				dt_led->period * value / 100);
10004c7a:	436a      	muls	r2, r5
10004c7c:	0010      	movs	r0, r2
	return pwm_set_pulse_dt(&config->led[led],
10004c7e:	f7fb fa9d 	bl	100001bc <__udivsi3>
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_pulse_dt(const struct pwm_dt_spec *spec,
				   uint32_t pulse)
{
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
10004c82:	89a2      	ldrh	r2, [r4, #12]
10004c84:	0003      	movs	r3, r0
10004c86:	9200      	str	r2, [sp, #0]
10004c88:	cc03      	ldmia	r4!, {r0, r1}
10004c8a:	002a      	movs	r2, r5
10004c8c:	f7fd fcda 	bl	10002644 <pwm_set>
}
10004c90:	46bd      	mov	sp, r7
10004c92:	bdb0      	pop	{r4, r5, r7, pc}
		return -EINVAL;
10004c94:	2016      	movs	r0, #22
10004c96:	4240      	negs	r0, r0
10004c98:	e7fa      	b.n	10004c90 <led_pwm_set_brightness+0x30>

10004c9a <led_pwm_on>:

static int led_pwm_on(const struct device *dev, uint32_t led)
{
10004c9a:	b580      	push	{r7, lr}
	return led_pwm_set_brightness(dev, led, 100);
10004c9c:	2264      	movs	r2, #100	; 0x64
{
10004c9e:	af00      	add	r7, sp, #0
	return led_pwm_set_brightness(dev, led, 100);
10004ca0:	f7ff ffde 	bl	10004c60 <led_pwm_set_brightness>
}
10004ca4:	46bd      	mov	sp, r7
10004ca6:	bd80      	pop	{r7, pc}

10004ca8 <led_pwm_off>:

static int led_pwm_off(const struct device *dev, uint32_t led)
{
10004ca8:	b580      	push	{r7, lr}
	return led_pwm_set_brightness(dev, led, 0);
10004caa:	2200      	movs	r2, #0
{
10004cac:	af00      	add	r7, sp, #0
	return led_pwm_set_brightness(dev, led, 0);
10004cae:	f7ff ffd7 	bl	10004c60 <led_pwm_set_brightness>
}
10004cb2:	46bd      	mov	sp, r7
10004cb4:	bd80      	pop	{r7, pc}

10004cb6 <led_pwm_init>:

static int led_pwm_init(const struct device *dev)
{
10004cb6:	b5b0      	push	{r4, r5, r7, lr}
		LOG_ERR("%s: no LEDs found (DT child nodes missing)",
			dev->name);
		return -ENODEV;
	}

	for (i = 0; i < config->num_leds; i++) {
10004cb8:	2400      	movs	r4, #0
	const struct led_pwm_config *config = dev->config;
10004cba:	6845      	ldr	r5, [r0, #4]
{
10004cbc:	af00      	add	r7, sp, #0
	if (!config->num_leds) {
10004cbe:	682b      	ldr	r3, [r5, #0]
10004cc0:	42a3      	cmp	r3, r4
10004cc2:	d10b      	bne.n	10004cdc <led_pwm_init+0x26>
		return -ENODEV;
10004cc4:	2013      	movs	r0, #19
10004cc6:	4240      	negs	r0, r0
			return -ENODEV;
		}
	}

	return 0;
}
10004cc8:	46bd      	mov	sp, r7
10004cca:	bdb0      	pop	{r4, r5, r7, pc}
		if (!device_is_ready(led->dev)) {
10004ccc:	686a      	ldr	r2, [r5, #4]
10004cce:	0123      	lsls	r3, r4, #4
10004cd0:	5898      	ldr	r0, [r3, r2]
10004cd2:	f000 fa13 	bl	100050fc <z_device_is_ready>
10004cd6:	2800      	cmp	r0, #0
10004cd8:	d0f4      	beq.n	10004cc4 <led_pwm_init+0xe>
	for (i = 0; i < config->num_leds; i++) {
10004cda:	3401      	adds	r4, #1
10004cdc:	682b      	ldr	r3, [r5, #0]
10004cde:	429c      	cmp	r4, r3
10004ce0:	dbf4      	blt.n	10004ccc <led_pwm_init+0x16>
	return 0;
10004ce2:	2000      	movs	r0, #0
10004ce4:	e7f0      	b.n	10004cc8 <led_pwm_init+0x12>

10004ce6 <uart_rpi_poll_in>:
	uart_hw_t * const uart_hw = config->uart_regs;
10004ce6:	6843      	ldr	r3, [r0, #4]
{
10004ce8:	b590      	push	{r4, r7, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10004cea:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10004cec:	2210      	movs	r2, #16
10004cee:	699c      	ldr	r4, [r3, #24]
{
10004cf0:	af00      	add	r7, sp, #0
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10004cf2:	0020      	movs	r0, r4
10004cf4:	4010      	ands	r0, r2
10004cf6:	4214      	tst	r4, r2
10004cf8:	d103      	bne.n	10004d02 <uart_rpi_poll_in+0x1c>
	*c = (unsigned char)uart_hw->dr;
10004cfa:	681b      	ldr	r3, [r3, #0]
10004cfc:	700b      	strb	r3, [r1, #0]
}
10004cfe:	46bd      	mov	sp, r7
10004d00:	bd90      	pop	{r4, r7, pc}
		return -1;
10004d02:	2001      	movs	r0, #1
10004d04:	4240      	negs	r0, r0
10004d06:	e7fa      	b.n	10004cfe <uart_rpi_poll_in+0x18>

10004d08 <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10004d08:	2220      	movs	r2, #32
{
10004d0a:	b580      	push	{r7, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10004d0c:	6843      	ldr	r3, [r0, #4]
{
10004d0e:	af00      	add	r7, sp, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10004d10:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10004d12:	6998      	ldr	r0, [r3, #24]
10004d14:	4210      	tst	r0, r2
10004d16:	d1fc      	bne.n	10004d12 <uart_rpi_poll_out+0xa>
}
10004d18:	46bd      	mov	sp, r7
	uart_hw->dr = c;
10004d1a:	6019      	str	r1, [r3, #0]
}
10004d1c:	bd80      	pop	{r7, pc}

10004d1e <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
10004d1e:	6843      	ldr	r3, [r0, #4]
{
10004d20:	b580      	push	{r7, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10004d22:	685b      	ldr	r3, [r3, #4]
{
10004d24:	af00      	add	r7, sp, #0
	uint32_t data_reg = uart_hw->dr;
10004d26:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
10004d28:	0518      	lsls	r0, r3, #20
10004d2a:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
10004d2c:	055a      	lsls	r2, r3, #21
10004d2e:	d501      	bpl.n	10004d34 <uart_rpi_err_check+0x16>
		errors |= UART_BREAK;
10004d30:	2208      	movs	r2, #8
10004d32:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
10004d34:	059a      	lsls	r2, r3, #22
10004d36:	d501      	bpl.n	10004d3c <uart_rpi_err_check+0x1e>
		errors |= UART_ERROR_PARITY;
10004d38:	2202      	movs	r2, #2
10004d3a:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
10004d3c:	05db      	lsls	r3, r3, #23
10004d3e:	d501      	bpl.n	10004d44 <uart_rpi_err_check+0x26>
		errors |= UART_ERROR_FRAMING;
10004d40:	2304      	movs	r3, #4
10004d42:	4318      	orrs	r0, r3
}
10004d44:	46bd      	mov	sp, r7
10004d46:	bd80      	pop	{r7, pc}

10004d48 <uart_rpi_fifo_fill>:
{
10004d48:	b5b0      	push	{r4, r5, r7, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10004d4a:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10004d4c:	2520      	movs	r5, #32
10004d4e:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10004d50:	685b      	ldr	r3, [r3, #4]
{
10004d52:	af00      	add	r7, sp, #0
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10004d54:	699c      	ldr	r4, [r3, #24]
10004d56:	422c      	tst	r4, r5
10004d58:	d102      	bne.n	10004d60 <uart_rpi_fifo_fill+0x18>
10004d5a:	1a14      	subs	r4, r2, r0
10004d5c:	2c00      	cmp	r4, #0
10004d5e:	dc01      	bgt.n	10004d64 <uart_rpi_fifo_fill+0x1c>
}
10004d60:	46bd      	mov	sp, r7
10004d62:	bdb0      	pop	{r4, r5, r7, pc}
		uart_hw->dr = tx_data[tx_len++];
10004d64:	5c0c      	ldrb	r4, [r1, r0]
10004d66:	3001      	adds	r0, #1
10004d68:	601c      	str	r4, [r3, #0]
10004d6a:	e7f3      	b.n	10004d54 <uart_rpi_fifo_fill+0xc>

10004d6c <uart_rpi_fifo_read>:
{
10004d6c:	b5b0      	push	{r4, r5, r7, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10004d6e:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10004d70:	2510      	movs	r5, #16
10004d72:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10004d74:	685b      	ldr	r3, [r3, #4]
{
10004d76:	af00      	add	r7, sp, #0
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10004d78:	699c      	ldr	r4, [r3, #24]
10004d7a:	422c      	tst	r4, r5
10004d7c:	d102      	bne.n	10004d84 <uart_rpi_fifo_read+0x18>
10004d7e:	1a14      	subs	r4, r2, r0
10004d80:	2c00      	cmp	r4, #0
10004d82:	dc01      	bgt.n	10004d88 <uart_rpi_fifo_read+0x1c>
}
10004d84:	46bd      	mov	sp, r7
10004d86:	bdb0      	pop	{r4, r5, r7, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
10004d88:	681c      	ldr	r4, [r3, #0]
10004d8a:	540c      	strb	r4, [r1, r0]
10004d8c:	3001      	adds	r0, #1
10004d8e:	e7f3      	b.n	10004d78 <uart_rpi_fifo_read+0xc>

10004d90 <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10004d90:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10004d92:	6843      	ldr	r3, [r0, #4]
{
10004d94:	b580      	push	{r7, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10004d96:	685b      	ldr	r3, [r3, #4]
{
10004d98:	af00      	add	r7, sp, #0
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10004d9a:	6b99      	ldr	r1, [r3, #56]	; 0x38
}
10004d9c:	46bd      	mov	sp, r7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10004d9e:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10004da0:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10004da2:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10004da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10004da6:	438a      	bics	r2, r1
10004da8:	635a      	str	r2, [r3, #52]	; 0x34
}
10004daa:	bd80      	pop	{r7, pc}

10004dac <uart_rpi_irq_tx_disable>:
{
10004dac:	b580      	push	{r7, lr}
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10004dae:	2120      	movs	r1, #32
{
10004db0:	af00      	add	r7, sp, #0
}
10004db2:	46bd      	mov	sp, r7
	uart_hw_t * const uart_hw = config->uart_regs;
10004db4:	6843      	ldr	r3, [r0, #4]
10004db6:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10004db8:	6b93      	ldr	r3, [r2, #56]	; 0x38
10004dba:	438b      	bics	r3, r1
10004dbc:	6393      	str	r3, [r2, #56]	; 0x38
}
10004dbe:	bd80      	pop	{r7, pc}

10004dc0 <uart_rpi_irq_tx_ready>:
{
10004dc0:	b580      	push	{r7, lr}
10004dc2:	af00      	add	r7, sp, #0
}
10004dc4:	46bd      	mov	sp, r7
	uart_hw_t * const uart_hw = config->uart_regs;
10004dc6:	6843      	ldr	r3, [r0, #4]
10004dc8:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
10004dca:	6c18      	ldr	r0, [r3, #64]	; 0x40
10004dcc:	0680      	lsls	r0, r0, #26
10004dce:	0fc0      	lsrs	r0, r0, #31
}
10004dd0:	bd80      	pop	{r7, pc}

10004dd2 <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10004dd2:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10004dd4:	6843      	ldr	r3, [r0, #4]
{
10004dd6:	b580      	push	{r7, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10004dd8:	685b      	ldr	r3, [r3, #4]
{
10004dda:	af00      	add	r7, sp, #0
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10004ddc:	6b99      	ldr	r1, [r3, #56]	; 0x38
}
10004dde:	46bd      	mov	sp, r7
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10004de0:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10004de2:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10004de4:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10004de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10004de8:	438a      	bics	r2, r1
10004dea:	635a      	str	r2, [r3, #52]	; 0x34
}
10004dec:	bd80      	pop	{r7, pc}

10004dee <uart_rpi_irq_rx_disable>:
{
10004dee:	b580      	push	{r7, lr}
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10004df0:	2110      	movs	r1, #16
{
10004df2:	af00      	add	r7, sp, #0
}
10004df4:	46bd      	mov	sp, r7
	uart_hw_t * const uart_hw = config->uart_regs;
10004df6:	6843      	ldr	r3, [r0, #4]
10004df8:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10004dfa:	6b93      	ldr	r3, [r2, #56]	; 0x38
10004dfc:	438b      	bics	r3, r1
10004dfe:	6393      	str	r3, [r2, #56]	; 0x38
}
10004e00:	bd80      	pop	{r7, pc}

10004e02 <uart_rpi_irq_tx_complete>:
{
10004e02:	b580      	push	{r7, lr}
10004e04:	af00      	add	r7, sp, #0
}
10004e06:	46bd      	mov	sp, r7
	uart_hw_t * const uart_hw = config->uart_regs;
10004e08:	6843      	ldr	r3, [r0, #4]
10004e0a:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
10004e0c:	6998      	ldr	r0, [r3, #24]
10004e0e:	0600      	lsls	r0, r0, #24
10004e10:	0fc0      	lsrs	r0, r0, #31
}
10004e12:	bd80      	pop	{r7, pc}

10004e14 <uart_rpi_irq_rx_ready>:
{
10004e14:	b580      	push	{r7, lr}
10004e16:	af00      	add	r7, sp, #0
}
10004e18:	46bd      	mov	sp, r7
	uart_hw_t * const uart_hw = config->uart_regs;
10004e1a:	6843      	ldr	r3, [r0, #4]
10004e1c:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
10004e1e:	6c18      	ldr	r0, [r3, #64]	; 0x40
10004e20:	06c0      	lsls	r0, r0, #27
10004e22:	0fc0      	lsrs	r0, r0, #31
}
10004e24:	bd80      	pop	{r7, pc}

10004e26 <uart_rpi_irq_err_enable>:
{
10004e26:	b580      	push	{r7, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10004e28:	6843      	ldr	r3, [r0, #4]
{
10004e2a:	af00      	add	r7, sp, #0
	uart_hw_t * const uart_hw = config->uart_regs;
10004e2c:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
10004e2e:	23f8      	movs	r3, #248	; 0xf8
}
10004e30:	46bd      	mov	sp, r7
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
10004e32:	6b91      	ldr	r1, [r2, #56]	; 0x38
10004e34:	00db      	lsls	r3, r3, #3
10004e36:	430b      	orrs	r3, r1
10004e38:	6393      	str	r3, [r2, #56]	; 0x38
}
10004e3a:	bd80      	pop	{r7, pc}

10004e3c <uart_rpi_irq_update>:
{
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
}

static int uart_rpi_irq_update(const struct device *dev)
{
10004e3c:	b580      	push	{r7, lr}
10004e3e:	af00      	add	r7, sp, #0
	return 1;
}
10004e40:	46bd      	mov	sp, r7
10004e42:	2001      	movs	r0, #1
10004e44:	bd80      	pop	{r7, pc}

10004e46 <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
10004e46:	b580      	push	{r7, lr}
10004e48:	af00      	add	r7, sp, #0
	struct uart_rpi_data * const data = dev->data;

	data->irq_cb = cb;
	data->irq_cb_data = cb_data;
}
10004e4a:	46bd      	mov	sp, r7
	struct uart_rpi_data * const data = dev->data;
10004e4c:	6903      	ldr	r3, [r0, #16]
	data->irq_cb = cb;
10004e4e:	6059      	str	r1, [r3, #4]
	data->irq_cb_data = cb_data;
10004e50:	609a      	str	r2, [r3, #8]
}
10004e52:	bd80      	pop	{r7, pc}

10004e54 <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
10004e54:	b580      	push	{r7, lr}
	struct uart_rpi_data * const data = dev->data;
10004e56:	6902      	ldr	r2, [r0, #16]
{
10004e58:	af00      	add	r7, sp, #0

	if (data->irq_cb) {
10004e5a:	6853      	ldr	r3, [r2, #4]
10004e5c:	2b00      	cmp	r3, #0
10004e5e:	d001      	beq.n	10004e64 <uart_rpi_isr+0x10>
		data->irq_cb(dev, data->irq_cb_data);
10004e60:	6891      	ldr	r1, [r2, #8]
10004e62:	4798      	blx	r3
	}
}
10004e64:	46bd      	mov	sp, r7
10004e66:	bd80      	pop	{r7, pc}

10004e68 <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
10004e68:	b580      	push	{r7, lr}
10004e6a:	2200      	movs	r2, #0
10004e6c:	af00      	add	r7, sp, #0
10004e6e:	2103      	movs	r1, #3
10004e70:	2014      	movs	r0, #20
10004e72:	f7fd f87d 	bl	10001f70 <z_arm_irq_priority_set>
10004e76:	2014      	movs	r0, #20
10004e78:	f7fd f86c 	bl	10001f54 <arch_irq_enable>
10004e7c:	46bd      	mov	sp, r7
10004e7e:	bd80      	pop	{r7, pc}

10004e80 <uart1_rpi_irq_config_func>:
10004e80:	b580      	push	{r7, lr}
10004e82:	2200      	movs	r2, #0
10004e84:	af00      	add	r7, sp, #0
10004e86:	2103      	movs	r1, #3
10004e88:	2015      	movs	r0, #21
10004e8a:	f7fd f871 	bl	10001f70 <z_arm_irq_priority_set>
10004e8e:	2015      	movs	r0, #21
10004e90:	f7fd f860 	bl	10001f54 <arch_irq_enable>
10004e94:	46bd      	mov	sp, r7
10004e96:	bd80      	pop	{r7, pc}

10004e98 <uart_rpi_irq_is_pending>:
{
10004e98:	b5b0      	push	{r4, r5, r7, lr}
10004e9a:	af00      	add	r7, sp, #0
10004e9c:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10004e9e:	f7ff ffb9 	bl	10004e14 <uart_rpi_irq_rx_ready>
10004ea2:	0003      	movs	r3, r0
10004ea4:	2001      	movs	r0, #1
10004ea6:	2b00      	cmp	r3, #0
10004ea8:	d104      	bne.n	10004eb4 <uart_rpi_irq_is_pending+0x1c>
10004eaa:	0020      	movs	r0, r4
10004eac:	f7ff ff88 	bl	10004dc0 <uart_rpi_irq_tx_ready>
10004eb0:	1e43      	subs	r3, r0, #1
10004eb2:	4198      	sbcs	r0, r3
}
10004eb4:	46bd      	mov	sp, r7
10004eb6:	bdb0      	pop	{r4, r5, r7, pc}

10004eb8 <uart_rpi_init>:
{
10004eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
10004eba:	6846      	ldr	r6, [r0, #4]
{
10004ebc:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
10004ebe:	6833      	ldr	r3, [r6, #0]
{
10004ec0:	af00      	add	r7, sp, #0
	uart_inst_t * const uart_inst = config->uart_dev;
10004ec2:	603b      	str	r3, [r7, #0]
	uart_hw_t * const uart_hw = config->uart_regs;
10004ec4:	6873      	ldr	r3, [r6, #4]
{
10004ec6:	0005      	movs	r5, r0
	uart_hw_t * const uart_hw = config->uart_regs;
10004ec8:	607b      	str	r3, [r7, #4]
	ret = pinctrl_lookup_state(config, id, &state);
10004eca:	230c      	movs	r3, #12
	struct uart_rpi_data * const data = dev->data;
10004ecc:	6904      	ldr	r4, [r0, #16]
10004ece:	2100      	movs	r1, #0
10004ed0:	68b0      	ldr	r0, [r6, #8]
10004ed2:	18fa      	adds	r2, r7, r3
10004ed4:	f7fd fdee 	bl	10002ab4 <pinctrl_lookup_state>
	if (ret < 0) {
10004ed8:	2800      	cmp	r0, #0
10004eda:	db1b      	blt.n	10004f14 <uart_rpi_init+0x5c>
	return pinctrl_apply_state_direct(config, state);
10004edc:	68fb      	ldr	r3, [r7, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
10004ede:	2200      	movs	r2, #0
10004ee0:	7919      	ldrb	r1, [r3, #4]
10004ee2:	6818      	ldr	r0, [r3, #0]
10004ee4:	f000 f81c 	bl	10004f20 <pinctrl_configure_pins>
	if (ret < 0) {
10004ee8:	2800      	cmp	r0, #0
10004eea:	db13      	blt.n	10004f14 <uart_rpi_init+0x5c>
	baudrate = uart_init(uart_inst, data->baudrate);
10004eec:	6821      	ldr	r1, [r4, #0]
10004eee:	6838      	ldr	r0, [r7, #0]
10004ef0:	f7fe f84a 	bl	10002f88 <uart_init>
	if (baudrate <= 0) {
10004ef4:	2800      	cmp	r0, #0
10004ef6:	dd10      	ble.n	10004f1a <uart_rpi_init+0x62>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10004ef8:	23c0      	movs	r3, #192	; 0xc0
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
10004efa:	687a      	ldr	r2, [r7, #4]
10004efc:	019b      	lsls	r3, r3, #6
10004efe:	322c      	adds	r2, #44	; 0x2c
10004f00:	4313      	orrs	r3, r2
10004f02:	2210      	movs	r2, #16
	uart_hw->dr = 0U;
10004f04:	2400      	movs	r4, #0
10004f06:	601a      	str	r2, [r3, #0]
10004f08:	687b      	ldr	r3, [r7, #4]
	config->irq_config_func(dev);
10004f0a:	0028      	movs	r0, r5
	uart_hw->dr = 0U;
10004f0c:	601c      	str	r4, [r3, #0]
	config->irq_config_func(dev);
10004f0e:	6973      	ldr	r3, [r6, #20]
10004f10:	4798      	blx	r3
	return 0;
10004f12:	0020      	movs	r0, r4
}
10004f14:	46bd      	mov	sp, r7
10004f16:	b005      	add	sp, #20
10004f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
10004f1a:	2016      	movs	r0, #22
10004f1c:	4240      	negs	r0, r0
10004f1e:	e7f9      	b.n	10004f14 <uart_rpi_init+0x5c>

10004f20 <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
10004f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004f22:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10004f24:	2501      	movs	r5, #1
10004f26:	0089      	lsls	r1, r1, #2
{
10004f28:	af00      	add	r7, sp, #0
10004f2a:	1843      	adds	r3, r0, r1
10004f2c:	607b      	str	r3, [r7, #4]
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
10004f2e:	687b      	ldr	r3, [r7, #4]
10004f30:	429c      	cmp	r4, r3
10004f32:	d102      	bne.n	10004f3a <pinctrl_configure_pins+0x1a>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
10004f34:	46bd      	mov	sp, r7
10004f36:	2000      	movs	r0, #0
10004f38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
10004f3a:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
10004f3c:	1d26      	adds	r6, r4, #4
	gpio_init(pin->pin_num);
10004f3e:	06c0      	lsls	r0, r0, #27
10004f40:	0ec0      	lsrs	r0, r0, #27
10004f42:	f000 f8ca 	bl	100050da <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
10004f46:	8821      	ldrh	r1, [r4, #0]
10004f48:	7820      	ldrb	r0, [r4, #0]
10004f4a:	05c9      	lsls	r1, r1, #23
10004f4c:	06c0      	lsls	r0, r0, #27
10004f4e:	0f09      	lsrs	r1, r1, #28
10004f50:	0ec0      	lsrs	r0, r0, #27
10004f52:	f7fd ff3b 	bl	10002dcc <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
10004f56:	7861      	ldrb	r1, [r4, #1]
10004f58:	7820      	ldrb	r0, [r4, #0]
10004f5a:	09ca      	lsrs	r2, r1, #7
10004f5c:	06c0      	lsls	r0, r0, #27
10004f5e:	0649      	lsls	r1, r1, #25
10004f60:	0fc9      	lsrs	r1, r1, #31
10004f62:	0ec0      	lsrs	r0, r0, #27
10004f64:	f7fd ff4a 	bl	10002dfc <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
10004f68:	7861      	ldrb	r1, [r4, #1]
10004f6a:	7820      	ldrb	r0, [r4, #0]
10004f6c:	06c9      	lsls	r1, r1, #27
10004f6e:	06c0      	lsls	r0, r0, #27
10004f70:	0f09      	lsrs	r1, r1, #28
10004f72:	0ec0      	lsrs	r0, r0, #27
10004f74:	f7fd ff7e 	bl	10002e74 <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10004f78:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10004f7a:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10004f7c:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10004f7e:	06c0      	lsls	r0, r0, #27
10004f80:	4029      	ands	r1, r5
10004f82:	0ec0      	lsrs	r0, r0, #27
10004f84:	f7fd ff64 	bl	10002e50 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
10004f88:	78a1      	ldrb	r1, [r4, #2]
10004f8a:	7820      	ldrb	r0, [r4, #0]
10004f8c:	0789      	lsls	r1, r1, #30
10004f8e:	06c0      	lsls	r0, r0, #27
10004f90:	0fc9      	lsrs	r1, r1, #31
10004f92:	0ec0      	lsrs	r0, r0, #27
10004f94:	f7fd ff4a 	bl	10002e2c <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
10004f98:	78a1      	ldrb	r1, [r4, #2]
10004f9a:	7820      	ldrb	r0, [r4, #0]
10004f9c:	07c9      	lsls	r1, r1, #31
10004f9e:	06c0      	lsls	r0, r0, #27
10004fa0:	0fc9      	lsrs	r1, r1, #31
10004fa2:	0ec0      	lsrs	r0, r0, #27
10004fa4:	f7fd ffae 	bl	10002f04 <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
10004fa8:	0034      	movs	r4, r6
10004faa:	e7c0      	b.n	10004f2e <pinctrl_configure_pins+0xe>

10004fac <reset_rpi_init>:

	return reset_rpi_line_deassert(dev, id);
}

static int reset_rpi_init(const struct device *dev)
{
10004fac:	b580      	push	{r7, lr}
10004fae:	af00      	add	r7, sp, #0
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
10004fb0:	46bd      	mov	sp, r7
10004fb2:	2000      	movs	r0, #0
10004fb4:	bd80      	pop	{r7, pc}

10004fb6 <reset_rpi_read_register.isra.0>:
static int reset_rpi_read_register(const struct device *dev, uint16_t offset, uint32_t *value)
10004fb6:	b580      	push	{r7, lr}
	uint32_t base_address = config->base_address;
10004fb8:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
10004fba:	7900      	ldrb	r0, [r0, #4]
static int reset_rpi_read_register(const struct device *dev, uint16_t offset, uint32_t *value)
10004fbc:	af00      	add	r7, sp, #0
	switch (config->reg_width) {
10004fbe:	2802      	cmp	r0, #2
10004fc0:	d009      	beq.n	10004fd6 <reset_rpi_read_register.isra.0+0x20>
10004fc2:	2804      	cmp	r0, #4
10004fc4:	d00a      	beq.n	10004fdc <reset_rpi_read_register.isra.0+0x26>
10004fc6:	2801      	cmp	r0, #1
10004fc8:	d10b      	bne.n	10004fe2 <reset_rpi_read_register.isra.0+0x2c>
		*value = sys_read8(base_address + offset);
10004fca:	18c9      	adds	r1, r1, r3
	return *(volatile uint8_t *)addr;
10004fcc:	780b      	ldrb	r3, [r1, #0]
	return 0;
10004fce:	2000      	movs	r0, #0
		*value = sys_read32(base_address + offset);
10004fd0:	6013      	str	r3, [r2, #0]
}
10004fd2:	46bd      	mov	sp, r7
10004fd4:	bd80      	pop	{r7, pc}
		*value = sys_read16(base_address + offset);
10004fd6:	18c9      	adds	r1, r1, r3
	return *(volatile uint16_t *)addr;
10004fd8:	880b      	ldrh	r3, [r1, #0]
10004fda:	e7f8      	b.n	10004fce <reset_rpi_read_register.isra.0+0x18>
		*value = sys_read32(base_address + offset);
10004fdc:	18c9      	adds	r1, r1, r3
	return *(volatile uint32_t *)addr;
10004fde:	680b      	ldr	r3, [r1, #0]
10004fe0:	e7f5      	b.n	10004fce <reset_rpi_read_register.isra.0+0x18>
	switch (config->reg_width) {
10004fe2:	2016      	movs	r0, #22
10004fe4:	4240      	negs	r0, r0
10004fe6:	e7f4      	b.n	10004fd2 <reset_rpi_read_register.isra.0+0x1c>

10004fe8 <reset_rpi_update.isra.0>:
static int reset_rpi_update(const struct device *dev, uint32_t id, uint8_t assert)
10004fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
10004fea:	0005      	movs	r5, r0
10004fec:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10004fee:	7929      	ldrb	r1, [r5, #4]
static int reset_rpi_update(const struct device *dev, uint32_t id, uint8_t assert)
10004ff0:	b085      	sub	sp, #20
10004ff2:	af00      	add	r7, sp, #0
	offset = id / (config->reg_width * CHAR_BIT);
10004ff4:	00c9      	lsls	r1, r1, #3
static int reset_rpi_update(const struct device *dev, uint32_t id, uint8_t assert)
10004ff6:	607a      	str	r2, [r7, #4]
10004ff8:	f7fb f91c 	bl	10000234 <__aeabi_uidivmod>
10004ffc:	230c      	movs	r3, #12
10004ffe:	0004      	movs	r4, r0
10005000:	000e      	movs	r6, r1
	ret = reset_rpi_read_register(dev, offset, &value);
10005002:	18fa      	adds	r2, r7, r3
10005004:	b281      	uxth	r1, r0
10005006:	0028      	movs	r0, r5
10005008:	f7ff ffd5 	bl	10004fb6 <reset_rpi_read_register.isra.0>
	if (ret) {
1000500c:	2800      	cmp	r0, #0
1000500e:	d118      	bne.n	10005042 <reset_rpi_update.isra.0+0x5a>
		value |= BIT(regbit);
10005010:	2201      	movs	r2, #1
	if (assert ^ config->active_low) {
10005012:	796b      	ldrb	r3, [r5, #5]
		value |= BIT(regbit);
10005014:	68f9      	ldr	r1, [r7, #12]
10005016:	b2f6      	uxtb	r6, r6
10005018:	40b2      	lsls	r2, r6
	if (assert ^ config->active_low) {
1000501a:	469c      	mov	ip, r3
		value &= ~BIT(regbit);
1000501c:	000b      	movs	r3, r1
	if (assert ^ config->active_low) {
1000501e:	687e      	ldr	r6, [r7, #4]
		value &= ~BIT(regbit);
10005020:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
10005022:	45b4      	cmp	ip, r6
10005024:	d001      	beq.n	1000502a <reset_rpi_update.isra.0+0x42>
		value |= BIT(regbit);
10005026:	0013      	movs	r3, r2
10005028:	430b      	orrs	r3, r1
	switch (config->reg_width) {
1000502a:	7929      	ldrb	r1, [r5, #4]
	uint32_t base_address = config->base_address;
1000502c:	68aa      	ldr	r2, [r5, #8]
	switch (config->reg_width) {
1000502e:	2902      	cmp	r1, #2
10005030:	d00a      	beq.n	10005048 <reset_rpi_update.isra.0+0x60>
10005032:	2904      	cmp	r1, #4
10005034:	d00d      	beq.n	10005052 <reset_rpi_update.isra.0+0x6a>
10005036:	2901      	cmp	r1, #1
10005038:	d10f      	bne.n	1000505a <reset_rpi_update.isra.0+0x72>
		sys_write8(value, base_address + offset);
1000503a:	b2a4      	uxth	r4, r4
1000503c:	b2db      	uxtb	r3, r3
1000503e:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
10005040:	7023      	strb	r3, [r4, #0]
}
10005042:	46bd      	mov	sp, r7
10005044:	b005      	add	sp, #20
10005046:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
10005048:	b2a4      	uxth	r4, r4
1000504a:	b29b      	uxth	r3, r3
1000504c:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
1000504e:	8023      	strh	r3, [r4, #0]
}
10005050:	e7f7      	b.n	10005042 <reset_rpi_update.isra.0+0x5a>
		sys_write32(value, base_address + offset);
10005052:	b2a4      	uxth	r4, r4
10005054:	18a4      	adds	r4, r4, r2
	*(volatile uint32_t *)addr = data;
10005056:	6023      	str	r3, [r4, #0]
}
10005058:	e7f3      	b.n	10005042 <reset_rpi_update.isra.0+0x5a>
	switch (config->reg_width) {
1000505a:	2016      	movs	r0, #22
1000505c:	4240      	negs	r0, r0
1000505e:	e7f0      	b.n	10005042 <reset_rpi_update.isra.0+0x5a>

10005060 <reset_rpi_line_deassert>:
{
10005060:	b580      	push	{r7, lr}
	return reset_rpi_update(dev, id, 0);
10005062:	2200      	movs	r2, #0
{
10005064:	af00      	add	r7, sp, #0
	return reset_rpi_update(dev, id, 0);
10005066:	6840      	ldr	r0, [r0, #4]
10005068:	f7ff ffbe 	bl	10004fe8 <reset_rpi_update.isra.0>
}
1000506c:	46bd      	mov	sp, r7
1000506e:	bd80      	pop	{r7, pc}

10005070 <reset_rpi_line_assert>:
{
10005070:	b580      	push	{r7, lr}
	return reset_rpi_update(dev, id, 1);
10005072:	2201      	movs	r2, #1
{
10005074:	af00      	add	r7, sp, #0
	return reset_rpi_update(dev, id, 1);
10005076:	6840      	ldr	r0, [r0, #4]
10005078:	f7ff ffb6 	bl	10004fe8 <reset_rpi_update.isra.0>
}
1000507c:	46bd      	mov	sp, r7
1000507e:	bd80      	pop	{r7, pc}

10005080 <reset_rpi_line_toggle>:
{
10005080:	b5b0      	push	{r4, r5, r7, lr}
10005082:	af00      	add	r7, sp, #0
10005084:	0004      	movs	r4, r0
10005086:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
10005088:	f7ff fff2 	bl	10005070 <reset_rpi_line_assert>
	if (ret) {
1000508c:	2800      	cmp	r0, #0
1000508e:	d103      	bne.n	10005098 <reset_rpi_line_toggle+0x18>
	return reset_rpi_line_deassert(dev, id);
10005090:	0029      	movs	r1, r5
10005092:	0020      	movs	r0, r4
10005094:	f7ff ffe4 	bl	10005060 <reset_rpi_line_deassert>
}
10005098:	46bd      	mov	sp, r7
1000509a:	bdb0      	pop	{r4, r5, r7, pc}

1000509c <reset_rpi_status>:
{
1000509c:	0003      	movs	r3, r0
1000509e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct reset_rpi_config *config = dev->config;
100050a0:	685e      	ldr	r6, [r3, #4]
{
100050a2:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
100050a4:	7931      	ldrb	r1, [r6, #4]
{
100050a6:	af00      	add	r7, sp, #0
	offset = id / (config->reg_width * CHAR_BIT);
100050a8:	00c9      	lsls	r1, r1, #3
{
100050aa:	0014      	movs	r4, r2
100050ac:	f7fb f8c2 	bl	10000234 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
100050b0:	1d3a      	adds	r2, r7, #4
100050b2:	000d      	movs	r5, r1
100050b4:	b281      	uxth	r1, r0
100050b6:	0030      	movs	r0, r6
100050b8:	f7ff ff7d 	bl	10004fb6 <reset_rpi_read_register.isra.0>
	if (ret) {
100050bc:	2800      	cmp	r0, #0
100050be:	d10a      	bne.n	100050d6 <reset_rpi_status+0x3a>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
100050c0:	687a      	ldr	r2, [r7, #4]
100050c2:	b2ed      	uxtb	r5, r5
100050c4:	40ea      	lsrs	r2, r5
100050c6:	2301      	movs	r3, #1
100050c8:	4393      	bics	r3, r2
100050ca:	001a      	movs	r2, r3
100050cc:	7973      	ldrb	r3, [r6, #5]
100050ce:	4259      	negs	r1, r3
100050d0:	414b      	adcs	r3, r1
100050d2:	4053      	eors	r3, r2
100050d4:	7023      	strb	r3, [r4, #0]
}
100050d6:	46bd      	mov	sp, r7
100050d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100050da <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
100050da:	2301      	movs	r3, #1
100050dc:	22d0      	movs	r2, #208	; 0xd0
100050de:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
100050e0:	b580      	push	{r7, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
100050e2:	0612      	lsls	r2, r2, #24
void gpio_init(uint gpio) {
100050e4:	af00      	add	r7, sp, #0
    sio_hw->gpio_oe_clr = 1ul << gpio;
100050e6:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
100050e8:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
100050ea:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
100050ec:	f7fd fe6e 	bl	10002dcc <gpio_set_function>
}
100050f0:	46bd      	mov	sp, r7
100050f2:	bd80      	pop	{r7, pc}

100050f4 <z_device_state_init>:
{
100050f4:	b580      	push	{r7, lr}
100050f6:	af00      	add	r7, sp, #0
}
100050f8:	46bd      	mov	sp, r7
100050fa:	bd80      	pop	{r7, pc}

100050fc <z_device_is_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_is_ready(const struct device *dev)
{
100050fc:	b580      	push	{r7, lr}
100050fe:	af00      	add	r7, sp, #0
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
10005100:	2800      	cmp	r0, #0
10005102:	d008      	beq.n	10005116 <z_device_is_ready+0x1a>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
10005104:	68c3      	ldr	r3, [r0, #12]
10005106:	8818      	ldrh	r0, [r3, #0]
10005108:	05c0      	lsls	r0, r0, #23
1000510a:	0dc0      	lsrs	r0, r0, #23
1000510c:	3801      	subs	r0, #1
1000510e:	38ff      	subs	r0, #255	; 0xff
10005110:	4243      	negs	r3, r0
10005112:	4158      	adcs	r0, r3
10005114:	b2c0      	uxtb	r0, r0
}
10005116:	46bd      	mov	sp, r7
10005118:	bd80      	pop	{r7, pc}

1000511a <arch_system_halt>:

LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

/* LCOV_EXCL_START */
FUNC_NORETURN __weak void arch_system_halt(unsigned int reason)
{
1000511a:	b580      	push	{r7, lr}
1000511c:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
1000511e:	f3ef 8310 	mrs	r3, PRIMASK
10005122:	b672      	cpsid	i
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
10005124:	e7fe      	b.n	10005124 <arch_system_halt+0xa>

10005126 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
10005126:	b580      	push	{r7, lr}
10005128:	af00      	add	r7, sp, #0
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
1000512a:	f7ff fff6 	bl	1000511a <arch_system_halt>

1000512e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
1000512e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10005130:	af00      	add	r7, sp, #0
10005132:	0005      	movs	r5, r0
10005134:	6079      	str	r1, [r7, #4]
10005136:	f3ef 8610 	mrs	r6, PRIMASK
1000513a:	b672      	cpsid	i
	return z_impl_z_current_get();
1000513c:	f7fe fde8 	bl	10003d10 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
10005140:	6879      	ldr	r1, [r7, #4]
10005142:	0004      	movs	r4, r0
10005144:	0028      	movs	r0, r5
10005146:	f7ff ffee 	bl	10005126 <k_sys_fatal_error_handler>
	if (key != 0U) {
1000514a:	2e00      	cmp	r6, #0
1000514c:	d102      	bne.n	10005154 <z_fatal_error+0x26>
	__asm__ volatile(
1000514e:	b662      	cpsie	i
10005150:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
10005154:	0020      	movs	r0, r4
10005156:	f7fd f87b 	bl	10002250 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
1000515a:	46bd      	mov	sp, r7
1000515c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

1000515e <z_early_memset>:
{
1000515e:	b580      	push	{r7, lr}
10005160:	af00      	add	r7, sp, #0
	(void) memset(dst, c, n);
10005162:	f7ff faeb 	bl	1000473c <memset>
}
10005166:	46bd      	mov	sp, r7
10005168:	bd80      	pop	{r7, pc}

1000516a <z_early_memcpy>:
{
1000516a:	b580      	push	{r7, lr}
1000516c:	af00      	add	r7, sp, #0
	(void) memcpy(dst, src, n);
1000516e:	f7ff fada 	bl	10004726 <memcpy>
}
10005172:	46bd      	mov	sp, r7
10005174:	bd80      	pop	{r7, pc}

10005176 <k_is_in_isr>:
{
10005176:	b580      	push	{r7, lr}
10005178:	af00      	add	r7, sp, #0
1000517a:	f3ef 8005 	mrs	r0, IPSR
 * The current executing vector is found in the IPSR register. All
 * IRQs and system exceptions are considered as interrupt context.
 */
static ALWAYS_INLINE bool arch_is_in_isr(void)
{
	return (__get_IPSR()) ? (true) : (false);
1000517e:	1e43      	subs	r3, r0, #1
10005180:	4198      	sbcs	r0, r3
}
10005182:	46bd      	mov	sp, r7
	return arch_is_in_isr();
10005184:	b2c0      	uxtb	r0, r0
}
10005186:	bd80      	pop	{r7, pc}

10005188 <z_impl_k_thread_name_set>:
{
10005188:	b580      	push	{r7, lr}
1000518a:	af00      	add	r7, sp, #0
}
1000518c:	46bd      	mov	sp, r7
	return -ENOSYS;
1000518e:	2058      	movs	r0, #88	; 0x58
}
10005190:	4240      	negs	r0, r0
10005192:	bd80      	pop	{r7, pc}

10005194 <z_impl_k_thread_start>:
{
10005194:	b580      	push	{r7, lr}
10005196:	af00      	add	r7, sp, #0
	z_sched_start(thread);
10005198:	f7fe fc50 	bl	10003a3c <z_sched_start>
}
1000519c:	46bd      	mov	sp, r7
1000519e:	bd80      	pop	{r7, pc}

100051a0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
100051a0:	b580      	push	{r7, lr}
100051a2:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
100051a4:	f3ef 8310 	mrs	r3, PRIMASK
100051a8:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
100051aa:	f7fc fecb 	bl	10001f44 <arch_cpu_idle>
100051ae:	e7f9      	b.n	100051a4 <idle+0x4>

100051b0 <k_msgq_cleanup>:
{
100051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head == list;
100051b2:	6803      	ldr	r3, [r0, #0]
100051b4:	af00      	add	r7, sp, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
100051b6:	4298      	cmp	r0, r3
100051b8:	d001      	beq.n	100051be <k_msgq_cleanup+0xe>
	CHECKIF(z_waitq_head(&msgq->wait_q) != NULL) {
100051ba:	2b00      	cmp	r3, #0
100051bc:	d10e      	bne.n	100051dc <k_msgq_cleanup+0x2c>
	if ((msgq->flags & K_MSGQ_FLAG_ALLOC) != 0U) {
100051be:	2601      	movs	r6, #1
100051c0:	1d44      	adds	r4, r0, #5
100051c2:	7fe3      	ldrb	r3, [r4, #31]
	return 0;
100051c4:	2500      	movs	r5, #0
	if ((msgq->flags & K_MSGQ_FLAG_ALLOC) != 0U) {
100051c6:	4233      	tst	r3, r6
100051c8:	d005      	beq.n	100051d6 <k_msgq_cleanup+0x26>
		k_free(msgq->buffer_start);
100051ca:	6900      	ldr	r0, [r0, #16]
100051cc:	f000 f982 	bl	100054d4 <k_free>
		msgq->flags &= ~K_MSGQ_FLAG_ALLOC;
100051d0:	7fe3      	ldrb	r3, [r4, #31]
100051d2:	43b3      	bics	r3, r6
100051d4:	77e3      	strb	r3, [r4, #31]
}
100051d6:	46bd      	mov	sp, r7
100051d8:	0028      	movs	r0, r5
100051da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EBUSY;
100051dc:	2510      	movs	r5, #16
100051de:	426d      	negs	r5, r5
100051e0:	e7f9      	b.n	100051d6 <k_msgq_cleanup+0x26>

100051e2 <z_impl_k_sem_init>:
{
100051e2:	b580      	push	{r7, lr}
100051e4:	af00      	add	r7, sp, #0
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
100051e6:	2a00      	cmp	r2, #0
100051e8:	d008      	beq.n	100051fc <z_impl_k_sem_init+0x1a>
100051ea:	428a      	cmp	r2, r1
100051ec:	d306      	bcc.n	100051fc <z_impl_k_sem_init+0x1a>
	sem->count = initial_count;
100051ee:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
100051f0:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
100051f2:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
100051f4:	6040      	str	r0, [r0, #4]
	return 0;
100051f6:	2000      	movs	r0, #0
}
100051f8:	46bd      	mov	sp, r7
100051fa:	bd80      	pop	{r7, pc}
		return -EINVAL;
100051fc:	2016      	movs	r0, #22
100051fe:	4240      	negs	r0, r0
10005200:	e7fa      	b.n	100051f8 <z_impl_k_sem_init+0x16>

10005202 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
10005202:	2201      	movs	r2, #1
{
10005204:	b5b0      	push	{r4, r5, r7, lr}
	*flagp &= ~BIT(bit);
10005206:	0014      	movs	r4, r2
	return (*flagp & BIT(bit)) != 0U;
10005208:	6803      	ldr	r3, [r0, #0]
{
1000520a:	af00      	add	r7, sp, #0
	*flagp &= ~BIT(bit);
1000520c:	408c      	lsls	r4, r1
1000520e:	001d      	movs	r5, r3
	return (*flagp & BIT(bit)) != 0U;
10005210:	40cb      	lsrs	r3, r1
}
10005212:	46bd      	mov	sp, r7
	*flagp &= ~BIT(bit);
10005214:	43a5      	bics	r5, r4
	return ret;
10005216:	4013      	ands	r3, r2
	*flagp &= ~BIT(bit);
10005218:	6005      	str	r5, [r0, #0]
	return ret;
1000521a:	0018      	movs	r0, r3
}
1000521c:	bdb0      	pop	{r4, r5, r7, pc}

1000521e <notify_queue_locked.isra.0>:
static inline bool notify_queue_locked(struct k_work_q *queue)
1000521e:	b580      	push	{r7, lr}
10005220:	af00      	add	r7, sp, #0
	if (queue != NULL) {
10005222:	2800      	cmp	r0, #0
10005224:	d004      	beq.n	10005230 <notify_queue_locked.isra.0+0x12>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
10005226:	2200      	movs	r2, #0
10005228:	3088      	adds	r0, #136	; 0x88
1000522a:	0011      	movs	r1, r2
1000522c:	f000 f8fd 	bl	1000542a <z_sched_wake>
}
10005230:	46bd      	mov	sp, r7
10005232:	bd80      	pop	{r7, pc}

10005234 <z_work_submit_to_queue>:
{
10005234:	b597      	push	{r0, r1, r2, r4, r7, lr}
10005236:	af00      	add	r7, sp, #0
10005238:	6078      	str	r0, [r7, #4]
1000523a:	0008      	movs	r0, r1
1000523c:	f3ef 8410 	mrs	r4, PRIMASK
10005240:	b672      	cpsid	i
	int ret = submit_to_queue_locked(work, &queue);
10005242:	1d39      	adds	r1, r7, #4
10005244:	f7fe fa14 	bl	10003670 <submit_to_queue_locked>
	if (key != 0U) {
10005248:	2c00      	cmp	r4, #0
1000524a:	d102      	bne.n	10005252 <z_work_submit_to_queue+0x1e>
	__asm__ volatile(
1000524c:	b662      	cpsie	i
1000524e:	f3bf 8f6f 	isb	sy
}
10005252:	46bd      	mov	sp, r7
10005254:	bd9e      	pop	{r1, r2, r3, r4, r7, pc}

10005256 <k_work_submit_to_queue>:
{
10005256:	b5b0      	push	{r4, r5, r7, lr}
10005258:	af00      	add	r7, sp, #0
	int ret = z_work_submit_to_queue(queue, work);
1000525a:	f7ff ffeb 	bl	10005234 <z_work_submit_to_queue>
1000525e:	1e04      	subs	r4, r0, #0
	if (ret > 0) {
10005260:	dd04      	ble.n	1000526c <k_work_submit_to_queue+0x16>
	__asm__ volatile("mrs %0, PRIMASK;"
10005262:	f3ef 8010 	mrs	r0, PRIMASK
10005266:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10005268:	f000 f838 	bl	100052dc <z_reschedule_irqlock>
}
1000526c:	46bd      	mov	sp, r7
1000526e:	0020      	movs	r0, r4
10005270:	bdb0      	pop	{r4, r5, r7, pc}

10005272 <sys_dlist_remove>:
{
10005272:	b580      	push	{r7, lr}
	sys_dnode_t *const next = node->next;
10005274:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10005276:	6842      	ldr	r2, [r0, #4]
{
10005278:	af00      	add	r7, sp, #0
	prev->next = next;
1000527a:	6013      	str	r3, [r2, #0]
	sys_dnode_init(node);
}
1000527c:	46bd      	mov	sp, r7
	next->prev = prev;
1000527e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10005280:	2300      	movs	r3, #0
10005282:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10005284:	6043      	str	r3, [r0, #4]
}
10005286:	bd80      	pop	{r7, pc}

10005288 <unpend_thread_no_timeout>:
{
10005288:	b5b0      	push	{r4, r5, r7, lr}
1000528a:	0004      	movs	r4, r0
1000528c:	af00      	add	r7, sp, #0
	sys_dlist_remove(&thread->base.qnode_dlist);
1000528e:	f7ff fff0 	bl	10005272 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
10005292:	2202      	movs	r2, #2
10005294:	7b63      	ldrb	r3, [r4, #13]
}
10005296:	46bd      	mov	sp, r7
10005298:	4393      	bics	r3, r2
1000529a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
1000529c:	2300      	movs	r3, #0
1000529e:	60a3      	str	r3, [r4, #8]
}
100052a0:	bdb0      	pop	{r4, r5, r7, pc}

100052a2 <z_swap_irqlock>:
{
100052a2:	b5b0      	push	{r4, r5, r7, lr}
100052a4:	0004      	movs	r4, r0
100052a6:	af00      	add	r7, sp, #0
	z_check_stack_sentinel();
100052a8:	f7fd ff9c 	bl	100031e4 <z_check_stack_sentinel>
	ret = arch_swap(key);
100052ac:	0020      	movs	r0, r4
100052ae:	f7fc fea5 	bl	10001ffc <arch_swap>
}
100052b2:	46bd      	mov	sp, r7
100052b4:	bdb0      	pop	{r4, r5, r7, pc}

100052b6 <z_unpend_thread>:
{
100052b6:	b5b0      	push	{r4, r5, r7, lr}
100052b8:	0004      	movs	r4, r0
100052ba:	af00      	add	r7, sp, #0
100052bc:	f3ef 8510 	mrs	r5, PRIMASK
100052c0:	b672      	cpsid	i
		unpend_thread_no_timeout(thread);
100052c2:	f7ff ffe1 	bl	10005288 <unpend_thread_no_timeout>
	if (key != 0U) {
100052c6:	2d00      	cmp	r5, #0
100052c8:	d102      	bne.n	100052d0 <z_unpend_thread+0x1a>
	__asm__ volatile(
100052ca:	b662      	cpsie	i
100052cc:	f3bf 8f6f 	isb	sy
100052d0:	0020      	movs	r0, r4
100052d2:	3018      	adds	r0, #24
100052d4:	f000 f8cb 	bl	1000546e <z_abort_timeout>
}
100052d8:	46bd      	mov	sp, r7
100052da:	bdb0      	pop	{r4, r5, r7, pc}

100052dc <z_reschedule_irqlock>:
{
100052dc:	b580      	push	{r7, lr}
100052de:	af00      	add	r7, sp, #0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
100052e0:	2800      	cmp	r0, #0
100052e2:	d105      	bne.n	100052f0 <z_reschedule_irqlock+0x14>
100052e4:	f3ef 8005 	mrs	r0, IPSR
	if (resched(key)) {
100052e8:	2800      	cmp	r0, #0
100052ea:	d103      	bne.n	100052f4 <z_reschedule_irqlock+0x18>
		z_swap_irqlock(key);
100052ec:	f7ff ffd9 	bl	100052a2 <z_swap_irqlock>
}
100052f0:	46bd      	mov	sp, r7
100052f2:	bd80      	pop	{r7, pc}
100052f4:	b662      	cpsie	i
100052f6:	f3bf 8f6f 	isb	sy
100052fa:	e7f9      	b.n	100052f0 <z_reschedule_irqlock+0x14>

100052fc <z_reschedule_unlocked>:
{
100052fc:	b580      	push	{r7, lr}
100052fe:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10005300:	f3ef 8010 	mrs	r0, PRIMASK
10005304:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10005306:	f7ff ffe9 	bl	100052dc <z_reschedule_irqlock>
}
1000530a:	46bd      	mov	sp, r7
1000530c:	bd80      	pop	{r7, pc}

1000530e <z_priq_dumb_best>:
{
1000530e:	b580      	push	{r7, lr}
10005310:	0003      	movs	r3, r0
	return list->head == list;
10005312:	6800      	ldr	r0, [r0, #0]
10005314:	af00      	add	r7, sp, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005316:	4283      	cmp	r3, r0
10005318:	d100      	bne.n	1000531c <z_priq_dumb_best+0xe>
	struct k_thread *thread = NULL;
1000531a:	2000      	movs	r0, #0
}
1000531c:	46bd      	mov	sp, r7
1000531e:	bd80      	pop	{r7, pc}

10005320 <z_ready_thread>:
{
10005320:	b5b0      	push	{r4, r5, r7, lr}
10005322:	af00      	add	r7, sp, #0
10005324:	f3ef 8410 	mrs	r4, PRIMASK
10005328:	b672      	cpsid	i
			ready_thread(thread);
1000532a:	f7fe fb4f 	bl	100039cc <ready_thread>
	if (key != 0U) {
1000532e:	2c00      	cmp	r4, #0
10005330:	d102      	bne.n	10005338 <z_ready_thread+0x18>
	__asm__ volatile(
10005332:	b662      	cpsie	i
10005334:	f3bf 8f6f 	isb	sy
}
10005338:	46bd      	mov	sp, r7
1000533a:	bdb0      	pop	{r4, r5, r7, pc}

1000533c <z_thread_timeout>:
{
1000533c:	b5b0      	push	{r4, r5, r7, lr}
	struct k_thread *thread = CONTAINER_OF(timeout,
1000533e:	3818      	subs	r0, #24
10005340:	0004      	movs	r4, r0
{
10005342:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10005344:	f3ef 8510 	mrs	r5, PRIMASK
10005348:	b672      	cpsid	i
		if (!killed) {
1000534a:	2328      	movs	r3, #40	; 0x28
1000534c:	7b42      	ldrb	r2, [r0, #13]
1000534e:	421a      	tst	r2, r3
10005350:	d10b      	bne.n	1000536a <z_thread_timeout+0x2e>
			if (thread->base.pended_on != NULL) {
10005352:	6883      	ldr	r3, [r0, #8]
10005354:	2b00      	cmp	r3, #0
10005356:	d001      	beq.n	1000535c <z_thread_timeout+0x20>
				unpend_thread_no_timeout(thread);
10005358:	f7ff ff96 	bl	10005288 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
1000535c:	2214      	movs	r2, #20
1000535e:	7b63      	ldrb	r3, [r4, #13]
			ready_thread(thread);
10005360:	0020      	movs	r0, r4
10005362:	4393      	bics	r3, r2
10005364:	7363      	strb	r3, [r4, #13]
10005366:	f7fe fb31 	bl	100039cc <ready_thread>
	if (key != 0U) {
1000536a:	2d00      	cmp	r5, #0
1000536c:	d102      	bne.n	10005374 <z_thread_timeout+0x38>
	__asm__ volatile(
1000536e:	b662      	cpsie	i
10005370:	f3bf 8f6f 	isb	sy
}
10005374:	46bd      	mov	sp, r7
10005376:	bdb0      	pop	{r4, r5, r7, pc}

10005378 <add_to_waitq_locked>:
{
10005378:	b5b0      	push	{r4, r5, r7, lr}
1000537a:	0004      	movs	r4, r0
1000537c:	af00      	add	r7, sp, #0
1000537e:	000d      	movs	r5, r1
	unready_thread(thread);
10005380:	f7fe fb78 	bl	10003a74 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
10005384:	2302      	movs	r3, #2
10005386:	7b62      	ldrb	r2, [r4, #13]
10005388:	4313      	orrs	r3, r2
1000538a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
1000538c:	2d00      	cmp	r5, #0
1000538e:	d013      	beq.n	100053b8 <add_to_waitq_locked+0x40>
	return list->head == list;
10005390:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
10005392:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10005394:	429d      	cmp	r5, r3
10005396:	d017      	beq.n	100053c8 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10005398:	2b00      	cmp	r3, #0
1000539a:	d015      	beq.n	100053c8 <add_to_waitq_locked+0x50>
	int32_t b1 = thread_1->base.prio;
1000539c:	210e      	movs	r1, #14
1000539e:	5661      	ldrsb	r1, [r4, r1]
	int32_t b2 = thread_2->base.prio;
100053a0:	220e      	movs	r2, #14
100053a2:	569a      	ldrsb	r2, [r3, r2]
	if (b1 != b2) {
100053a4:	4291      	cmp	r1, r2
100053a6:	d009      	beq.n	100053bc <add_to_waitq_locked+0x44>
		return b2 - b1;
100053a8:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
100053aa:	2a00      	cmp	r2, #0
100053ac:	dd06      	ble.n	100053bc <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
100053ae:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
100053b0:	6023      	str	r3, [r4, #0]
	node->prev = prev;
100053b2:	6062      	str	r2, [r4, #4]
	prev->next = node;
100053b4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
100053b6:	605c      	str	r4, [r3, #4]
}
100053b8:	46bd      	mov	sp, r7
100053ba:	bdb0      	pop	{r4, r5, r7, pc}
	return (node == list->tail) ? NULL : node->next;
100053bc:	686a      	ldr	r2, [r5, #4]
100053be:	4293      	cmp	r3, r2
100053c0:	d002      	beq.n	100053c8 <add_to_waitq_locked+0x50>
100053c2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
100053c4:	2b00      	cmp	r3, #0
100053c6:	d1eb      	bne.n	100053a0 <add_to_waitq_locked+0x28>
	sys_dnode_t *const tail = list->tail;
100053c8:	686b      	ldr	r3, [r5, #4]
	node->next = list;
100053ca:	6025      	str	r5, [r4, #0]
	node->prev = tail;
100053cc:	6063      	str	r3, [r4, #4]
	tail->next = node;
100053ce:	601c      	str	r4, [r3, #0]
	list->tail = node;
100053d0:	606c      	str	r4, [r5, #4]
}
100053d2:	e7f1      	b.n	100053b8 <add_to_waitq_locked+0x40>

100053d4 <z_unpend_first_thread>:
{
100053d4:	b5b0      	push	{r4, r5, r7, lr}
100053d6:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
100053d8:	f3ef 8510 	mrs	r5, PRIMASK
100053dc:	b672      	cpsid	i
		thread = _priq_wait_best(&wait_q->waitq);
100053de:	f7ff ff96 	bl	1000530e <z_priq_dumb_best>
100053e2:	1e04      	subs	r4, r0, #0
		if (thread != NULL) {
100053e4:	d005      	beq.n	100053f2 <z_unpend_first_thread+0x1e>
			unpend_thread_no_timeout(thread);
100053e6:	f7ff ff4f 	bl	10005288 <unpend_thread_no_timeout>
100053ea:	0020      	movs	r0, r4
100053ec:	3018      	adds	r0, #24
100053ee:	f000 f83e 	bl	1000546e <z_abort_timeout>
	if (key != 0U) {
100053f2:	2d00      	cmp	r5, #0
100053f4:	d102      	bne.n	100053fc <z_unpend_first_thread+0x28>
	__asm__ volatile(
100053f6:	b662      	cpsie	i
100053f8:	f3bf 8f6f 	isb	sy
}
100053fc:	46bd      	mov	sp, r7
100053fe:	0020      	movs	r0, r4
10005400:	bdb0      	pop	{r4, r5, r7, pc}

10005402 <z_unpend_all>:
{
10005402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005404:	0005      	movs	r5, r0
		need_sched = 1;
10005406:	2601      	movs	r6, #1
	int need_sched = 0;
10005408:	2000      	movs	r0, #0
{
1000540a:	af00      	add	r7, sp, #0
	return list->head == list;
1000540c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000540e:	42a5      	cmp	r5, r4
10005410:	d001      	beq.n	10005416 <z_unpend_all+0x14>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
10005412:	2c00      	cmp	r4, #0
10005414:	d101      	bne.n	1000541a <z_unpend_all+0x18>
}
10005416:	46bd      	mov	sp, r7
10005418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_unpend_thread(thread);
1000541a:	0020      	movs	r0, r4
1000541c:	f7ff ff4b 	bl	100052b6 <z_unpend_thread>
		z_ready_thread(thread);
10005420:	0020      	movs	r0, r4
10005422:	f7ff ff7d 	bl	10005320 <z_ready_thread>
		need_sched = 1;
10005426:	0030      	movs	r0, r6
10005428:	e7f0      	b.n	1000540c <z_unpend_all+0xa>

1000542a <z_sched_wake>:
{
1000542a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000542c:	af00      	add	r7, sp, #0
1000542e:	000d      	movs	r5, r1
10005430:	607a      	str	r2, [r7, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
10005432:	f3ef 8610 	mrs	r6, PRIMASK
10005436:	b672      	cpsid	i
		thread = _priq_wait_best(&wait_q->waitq);
10005438:	f7ff ff69 	bl	1000530e <z_priq_dumb_best>
1000543c:	0004      	movs	r4, r0
	bool ret = false;
1000543e:	2000      	movs	r0, #0
		if (thread != NULL) {
10005440:	4284      	cmp	r4, r0
10005442:	d00d      	beq.n	10005460 <z_sched_wake+0x36>
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
10005444:	687b      	ldr	r3, [r7, #4]
			unpend_thread_no_timeout(thread);
10005446:	0020      	movs	r0, r4
10005448:	6163      	str	r3, [r4, #20]
1000544a:	67a5      	str	r5, [r4, #120]	; 0x78
1000544c:	f7ff ff1c 	bl	10005288 <unpend_thread_no_timeout>
10005450:	0020      	movs	r0, r4
10005452:	3018      	adds	r0, #24
10005454:	f000 f80b 	bl	1000546e <z_abort_timeout>
			ready_thread(thread);
10005458:	0020      	movs	r0, r4
1000545a:	f7fe fab7 	bl	100039cc <ready_thread>
			ret = true;
1000545e:	2001      	movs	r0, #1
	if (key != 0U) {
10005460:	2e00      	cmp	r6, #0
10005462:	d102      	bne.n	1000546a <z_sched_wake+0x40>
	__asm__ volatile(
10005464:	b662      	cpsie	i
10005466:	f3bf 8f6f 	isb	sy
}
1000546a:	46bd      	mov	sp, r7
1000546c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000546e <z_abort_timeout>:
{
1000546e:	b5b0      	push	{r4, r5, r7, lr}
10005470:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10005472:	f3ef 8410 	mrs	r4, PRIMASK
10005476:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
10005478:	6803      	ldr	r3, [r0, #0]
1000547a:	2b00      	cmp	r3, #0
1000547c:	d009      	beq.n	10005492 <z_abort_timeout+0x24>
			remove_timeout(to);
1000547e:	f7fe fd19 	bl	10003eb4 <remove_timeout>
			ret = 0;
10005482:	2000      	movs	r0, #0
	if (key != 0U) {
10005484:	2c00      	cmp	r4, #0
10005486:	d102      	bne.n	1000548e <z_abort_timeout+0x20>
	__asm__ volatile(
10005488:	b662      	cpsie	i
1000548a:	f3bf 8f6f 	isb	sy
}
1000548e:	46bd      	mov	sp, r7
10005490:	bdb0      	pop	{r4, r5, r7, pc}
	int ret = -EINVAL;
10005492:	2016      	movs	r0, #22
10005494:	4240      	negs	r0, r0
10005496:	e7f5      	b.n	10005484 <z_abort_timeout+0x16>

10005498 <z_set_timeout_expiry>:
{
10005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000549a:	0004      	movs	r4, r0
1000549c:	af00      	add	r7, sp, #0
1000549e:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
100054a0:	f3ef 8610 	mrs	r6, PRIMASK
100054a4:	b672      	cpsid	i
		int next_to = next_timeout();
100054a6:	f7fe fcd7 	bl	10003e58 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
100054aa:	2801      	cmp	r0, #1
100054ac:	dd05      	ble.n	100054ba <z_set_timeout_expiry+0x22>
100054ae:	42a0      	cmp	r0, r4
100054b0:	db03      	blt.n	100054ba <z_set_timeout_expiry+0x22>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
100054b2:	0029      	movs	r1, r5
100054b4:	0020      	movs	r0, r4
100054b6:	f7fd fa5b 	bl	10002970 <sys_clock_set_timeout>
	if (key != 0U) {
100054ba:	2e00      	cmp	r6, #0
100054bc:	d102      	bne.n	100054c4 <z_set_timeout_expiry+0x2c>
	__asm__ volatile(
100054be:	b662      	cpsie	i
100054c0:	f3bf 8f6f 	isb	sy
}
100054c4:	46bd      	mov	sp, r7
100054c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100054c8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
100054c8:	b580      	push	{r7, lr}
100054ca:	af00      	add	r7, sp, #0
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
100054cc:	f7fe fe00 	bl	100040d0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
100054d0:	46bd      	mov	sp, r7
100054d2:	bd80      	pop	{r7, pc}

100054d4 <k_free>:

	return mem;
}

void k_free(void *ptr)
{
100054d4:	b580      	push	{r7, lr}
100054d6:	af00      	add	r7, sp, #0
	struct k_heap **heap_ref;

	if (ptr != NULL) {
100054d8:	2800      	cmp	r0, #0
100054da:	d003      	beq.n	100054e4 <k_free+0x10>
		heap_ref = ptr;
		ptr = --heap_ref;
100054dc:	1f01      	subs	r1, r0, #4

		SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_free, *heap_ref, heap_ref);

		k_heap_free(*heap_ref, ptr);
100054de:	6808      	ldr	r0, [r1, #0]
100054e0:	f000 f810 	bl	10005504 <k_heap_free>

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_free, *heap_ref, heap_ref);
	}
}
100054e4:	46bd      	mov	sp, r7
100054e6:	bd80      	pop	{r7, pc}

100054e8 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
100054e8:	b580      	push	{r7, lr}
100054ea:	af00      	add	r7, sp, #0
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
100054ec:	46bd      	mov	sp, r7
100054ee:	bd80      	pop	{r7, pc}

100054f0 <k_heap_init>:
	sys_dlist_init(&w->waitq);
100054f0:	0003      	movs	r3, r0
{
100054f2:	b580      	push	{r7, lr}
100054f4:	330c      	adds	r3, #12
100054f6:	af00      	add	r7, sp, #0
	list->head = (sys_dnode_t *)list;
100054f8:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
100054fa:	6103      	str	r3, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
100054fc:	f7ff f857 	bl	100045ae <sys_heap_init>
}
10005500:	46bd      	mov	sp, r7
10005502:	bd80      	pop	{r7, pc}

10005504 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
10005504:	b5b0      	push	{r4, r5, r7, lr}
10005506:	0004      	movs	r4, r0
10005508:	af00      	add	r7, sp, #0
	__asm__ volatile("mrs %0, PRIMASK;"
1000550a:	f3ef 8510 	mrs	r5, PRIMASK
1000550e:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
10005510:	f7ff f839 	bl	10004586 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
10005514:	0020      	movs	r0, r4
10005516:	300c      	adds	r0, #12
10005518:	f7ff ff73 	bl	10005402 <z_unpend_all>
1000551c:	2800      	cmp	r0, #0
1000551e:	d006      	beq.n	1000552e <k_heap_free+0x2a>
	k_spinlock_key_t key = k_spin_lock(&h->lock);
10005520:	0020      	movs	r0, r4
		z_reschedule(&h->lock, key);
10005522:	0029      	movs	r1, r5
	k_spinlock_key_t key = k_spin_lock(&h->lock);
10005524:	3014      	adds	r0, #20
		z_reschedule(&h->lock, key);
10005526:	f7fe f983 	bl	10003830 <z_reschedule>
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
1000552a:	46bd      	mov	sp, r7
1000552c:	bdb0      	pop	{r4, r5, r7, pc}
	if (key != 0U) {
1000552e:	2d00      	cmp	r5, #0
10005530:	d1fb      	bne.n	1000552a <k_heap_free+0x26>
	__asm__ volatile(
10005532:	b662      	cpsie	i
10005534:	f3bf 8f6f 	isb	sy
10005538:	e7f7      	b.n	1000552a <k_heap_free+0x26>
