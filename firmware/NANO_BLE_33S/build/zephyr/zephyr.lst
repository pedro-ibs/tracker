
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_table>:
   10000:	c0 26 00 20 39 2f 01 00 49 9f 01 00 0d 2f 01 00     .&. 9/..I..../..
   10010:	0d 2f 01 00 0d 2f 01 00 0d 2f 01 00 00 00 00 00     ./.../.../......
	...
   1002c:	15 2c 01 00 0d 2f 01 00 00 00 00 00 c1 2b 01 00     .,.../.......+..
   1003c:	0d 2f 01 00                                         ./..

00010040 <_irq_vector_table>:
   10040:	c5 2c 01 00 c5 2c 01 00 c5 2c 01 00 c5 2c 01 00     .,...,...,...,..
   10050:	c5 2c 01 00 c5 2c 01 00 c5 2c 01 00 c5 2c 01 00     .,...,...,...,..
   10060:	c5 2c 01 00 c5 2c 01 00 c5 2c 01 00 c5 2c 01 00     .,...,...,...,..
   10070:	c5 2c 01 00 c5 2c 01 00 c5 2c 01 00 c5 2c 01 00     .,...,...,...,..
   10080:	c5 2c 01 00 c5 2c 01 00 c5 2c 01 00 c5 2c 01 00     .,...,...,...,..
   10090:	c5 2c 01 00 c5 2c 01 00 c5 2c 01 00 c5 2c 01 00     .,...,...,...,..
   100a0:	c5 2c 01 00 c5 2c 01 00 c5 2c 01 00 c5 2c 01 00     .,...,...,...,..
   100b0:	c5 2c 01 00 c5 2c 01 00 c5 2c 01 00 c5 2c 01 00     .,...,...,...,..
   100c0:	c5 2c 01 00 c5 2c 01 00 c5 2c 01 00 c5 2c 01 00     .,...,...,...,..
   100d0:	c5 2c 01 00 c5 2c 01 00 c5 2c 01 00 c5 2c 01 00     .,...,...,...,..
   100e0:	c5 2c 01 00 c5 2c 01 00 c5 2c 01 00 c5 2c 01 00     .,...,...,...,..
   100f0:	c5 2c 01 00 c5 2c 01 00 c5 2c 01 00 c5 2c 01 00     .,...,...,...,..

Disassembly of section text:

00010100 <__aeabi_drsub>:
   10100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   10104:	e002      	b.n	1010c <__adddf3>
   10106:	bf00      	nop

00010108 <__aeabi_dsub>:
   10108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001010c <__adddf3>:
   1010c:	b530      	push	{r4, r5, lr}
   1010e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   10112:	ea4f 0543 	mov.w	r5, r3, lsl #1
   10116:	ea94 0f05 	teq	r4, r5
   1011a:	bf08      	it	eq
   1011c:	ea90 0f02 	teqeq	r0, r2
   10120:	bf1f      	itttt	ne
   10122:	ea54 0c00 	orrsne.w	ip, r4, r0
   10126:	ea55 0c02 	orrsne.w	ip, r5, r2
   1012a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1012e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10132:	f000 80e2 	beq.w	102fa <__adddf3+0x1ee>
   10136:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1013a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1013e:	bfb8      	it	lt
   10140:	426d      	neglt	r5, r5
   10142:	dd0c      	ble.n	1015e <__adddf3+0x52>
   10144:	442c      	add	r4, r5
   10146:	ea80 0202 	eor.w	r2, r0, r2
   1014a:	ea81 0303 	eor.w	r3, r1, r3
   1014e:	ea82 0000 	eor.w	r0, r2, r0
   10152:	ea83 0101 	eor.w	r1, r3, r1
   10156:	ea80 0202 	eor.w	r2, r0, r2
   1015a:	ea81 0303 	eor.w	r3, r1, r3
   1015e:	2d36      	cmp	r5, #54	; 0x36
   10160:	bf88      	it	hi
   10162:	bd30      	pophi	{r4, r5, pc}
   10164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10168:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1016c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   10170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   10174:	d002      	beq.n	1017c <__adddf3+0x70>
   10176:	4240      	negs	r0, r0
   10178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1017c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   10180:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   10188:	d002      	beq.n	10190 <__adddf3+0x84>
   1018a:	4252      	negs	r2, r2
   1018c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10190:	ea94 0f05 	teq	r4, r5
   10194:	f000 80a7 	beq.w	102e6 <__adddf3+0x1da>
   10198:	f1a4 0401 	sub.w	r4, r4, #1
   1019c:	f1d5 0e20 	rsbs	lr, r5, #32
   101a0:	db0d      	blt.n	101be <__adddf3+0xb2>
   101a2:	fa02 fc0e 	lsl.w	ip, r2, lr
   101a6:	fa22 f205 	lsr.w	r2, r2, r5
   101aa:	1880      	adds	r0, r0, r2
   101ac:	f141 0100 	adc.w	r1, r1, #0
   101b0:	fa03 f20e 	lsl.w	r2, r3, lr
   101b4:	1880      	adds	r0, r0, r2
   101b6:	fa43 f305 	asr.w	r3, r3, r5
   101ba:	4159      	adcs	r1, r3
   101bc:	e00e      	b.n	101dc <__adddf3+0xd0>
   101be:	f1a5 0520 	sub.w	r5, r5, #32
   101c2:	f10e 0e20 	add.w	lr, lr, #32
   101c6:	2a01      	cmp	r2, #1
   101c8:	fa03 fc0e 	lsl.w	ip, r3, lr
   101cc:	bf28      	it	cs
   101ce:	f04c 0c02 	orrcs.w	ip, ip, #2
   101d2:	fa43 f305 	asr.w	r3, r3, r5
   101d6:	18c0      	adds	r0, r0, r3
   101d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   101dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   101e0:	d507      	bpl.n	101f2 <__adddf3+0xe6>
   101e2:	f04f 0e00 	mov.w	lr, #0
   101e6:	f1dc 0c00 	rsbs	ip, ip, #0
   101ea:	eb7e 0000 	sbcs.w	r0, lr, r0
   101ee:	eb6e 0101 	sbc.w	r1, lr, r1
   101f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   101f6:	d31b      	bcc.n	10230 <__adddf3+0x124>
   101f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   101fc:	d30c      	bcc.n	10218 <__adddf3+0x10c>
   101fe:	0849      	lsrs	r1, r1, #1
   10200:	ea5f 0030 	movs.w	r0, r0, rrx
   10204:	ea4f 0c3c 	mov.w	ip, ip, rrx
   10208:	f104 0401 	add.w	r4, r4, #1
   1020c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   10210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   10214:	f080 809a 	bcs.w	1034c <__adddf3+0x240>
   10218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1021c:	bf08      	it	eq
   1021e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10222:	f150 0000 	adcs.w	r0, r0, #0
   10226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1022a:	ea41 0105 	orr.w	r1, r1, r5
   1022e:	bd30      	pop	{r4, r5, pc}
   10230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   10234:	4140      	adcs	r0, r0
   10236:	eb41 0101 	adc.w	r1, r1, r1
   1023a:	3c01      	subs	r4, #1
   1023c:	bf28      	it	cs
   1023e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   10242:	d2e9      	bcs.n	10218 <__adddf3+0x10c>
   10244:	f091 0f00 	teq	r1, #0
   10248:	bf04      	itt	eq
   1024a:	4601      	moveq	r1, r0
   1024c:	2000      	moveq	r0, #0
   1024e:	fab1 f381 	clz	r3, r1
   10252:	bf08      	it	eq
   10254:	3320      	addeq	r3, #32
   10256:	f1a3 030b 	sub.w	r3, r3, #11
   1025a:	f1b3 0220 	subs.w	r2, r3, #32
   1025e:	da0c      	bge.n	1027a <__adddf3+0x16e>
   10260:	320c      	adds	r2, #12
   10262:	dd08      	ble.n	10276 <__adddf3+0x16a>
   10264:	f102 0c14 	add.w	ip, r2, #20
   10268:	f1c2 020c 	rsb	r2, r2, #12
   1026c:	fa01 f00c 	lsl.w	r0, r1, ip
   10270:	fa21 f102 	lsr.w	r1, r1, r2
   10274:	e00c      	b.n	10290 <__adddf3+0x184>
   10276:	f102 0214 	add.w	r2, r2, #20
   1027a:	bfd8      	it	le
   1027c:	f1c2 0c20 	rsble	ip, r2, #32
   10280:	fa01 f102 	lsl.w	r1, r1, r2
   10284:	fa20 fc0c 	lsr.w	ip, r0, ip
   10288:	bfdc      	itt	le
   1028a:	ea41 010c 	orrle.w	r1, r1, ip
   1028e:	4090      	lslle	r0, r2
   10290:	1ae4      	subs	r4, r4, r3
   10292:	bfa2      	ittt	ge
   10294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   10298:	4329      	orrge	r1, r5
   1029a:	bd30      	popge	{r4, r5, pc}
   1029c:	ea6f 0404 	mvn.w	r4, r4
   102a0:	3c1f      	subs	r4, #31
   102a2:	da1c      	bge.n	102de <__adddf3+0x1d2>
   102a4:	340c      	adds	r4, #12
   102a6:	dc0e      	bgt.n	102c6 <__adddf3+0x1ba>
   102a8:	f104 0414 	add.w	r4, r4, #20
   102ac:	f1c4 0220 	rsb	r2, r4, #32
   102b0:	fa20 f004 	lsr.w	r0, r0, r4
   102b4:	fa01 f302 	lsl.w	r3, r1, r2
   102b8:	ea40 0003 	orr.w	r0, r0, r3
   102bc:	fa21 f304 	lsr.w	r3, r1, r4
   102c0:	ea45 0103 	orr.w	r1, r5, r3
   102c4:	bd30      	pop	{r4, r5, pc}
   102c6:	f1c4 040c 	rsb	r4, r4, #12
   102ca:	f1c4 0220 	rsb	r2, r4, #32
   102ce:	fa20 f002 	lsr.w	r0, r0, r2
   102d2:	fa01 f304 	lsl.w	r3, r1, r4
   102d6:	ea40 0003 	orr.w	r0, r0, r3
   102da:	4629      	mov	r1, r5
   102dc:	bd30      	pop	{r4, r5, pc}
   102de:	fa21 f004 	lsr.w	r0, r1, r4
   102e2:	4629      	mov	r1, r5
   102e4:	bd30      	pop	{r4, r5, pc}
   102e6:	f094 0f00 	teq	r4, #0
   102ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   102ee:	bf06      	itte	eq
   102f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   102f4:	3401      	addeq	r4, #1
   102f6:	3d01      	subne	r5, #1
   102f8:	e74e      	b.n	10198 <__adddf3+0x8c>
   102fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   102fe:	bf18      	it	ne
   10300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10304:	d029      	beq.n	1035a <__adddf3+0x24e>
   10306:	ea94 0f05 	teq	r4, r5
   1030a:	bf08      	it	eq
   1030c:	ea90 0f02 	teqeq	r0, r2
   10310:	d005      	beq.n	1031e <__adddf3+0x212>
   10312:	ea54 0c00 	orrs.w	ip, r4, r0
   10316:	bf04      	itt	eq
   10318:	4619      	moveq	r1, r3
   1031a:	4610      	moveq	r0, r2
   1031c:	bd30      	pop	{r4, r5, pc}
   1031e:	ea91 0f03 	teq	r1, r3
   10322:	bf1e      	ittt	ne
   10324:	2100      	movne	r1, #0
   10326:	2000      	movne	r0, #0
   10328:	bd30      	popne	{r4, r5, pc}
   1032a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1032e:	d105      	bne.n	1033c <__adddf3+0x230>
   10330:	0040      	lsls	r0, r0, #1
   10332:	4149      	adcs	r1, r1
   10334:	bf28      	it	cs
   10336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1033a:	bd30      	pop	{r4, r5, pc}
   1033c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   10340:	bf3c      	itt	cc
   10342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   10346:	bd30      	popcc	{r4, r5, pc}
   10348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1034c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   10350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10354:	f04f 0000 	mov.w	r0, #0
   10358:	bd30      	pop	{r4, r5, pc}
   1035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1035e:	bf1a      	itte	ne
   10360:	4619      	movne	r1, r3
   10362:	4610      	movne	r0, r2
   10364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   10368:	bf1c      	itt	ne
   1036a:	460b      	movne	r3, r1
   1036c:	4602      	movne	r2, r0
   1036e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10372:	bf06      	itte	eq
   10374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   10378:	ea91 0f03 	teqeq	r1, r3
   1037c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   10380:	bd30      	pop	{r4, r5, pc}
   10382:	bf00      	nop

00010384 <__aeabi_ui2d>:
   10384:	f090 0f00 	teq	r0, #0
   10388:	bf04      	itt	eq
   1038a:	2100      	moveq	r1, #0
   1038c:	4770      	bxeq	lr
   1038e:	b530      	push	{r4, r5, lr}
   10390:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10394:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10398:	f04f 0500 	mov.w	r5, #0
   1039c:	f04f 0100 	mov.w	r1, #0
   103a0:	e750      	b.n	10244 <__adddf3+0x138>
   103a2:	bf00      	nop

000103a4 <__aeabi_i2d>:
   103a4:	f090 0f00 	teq	r0, #0
   103a8:	bf04      	itt	eq
   103aa:	2100      	moveq	r1, #0
   103ac:	4770      	bxeq	lr
   103ae:	b530      	push	{r4, r5, lr}
   103b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   103b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   103b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   103bc:	bf48      	it	mi
   103be:	4240      	negmi	r0, r0
   103c0:	f04f 0100 	mov.w	r1, #0
   103c4:	e73e      	b.n	10244 <__adddf3+0x138>
   103c6:	bf00      	nop

000103c8 <__aeabi_f2d>:
   103c8:	0042      	lsls	r2, r0, #1
   103ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   103ce:	ea4f 0131 	mov.w	r1, r1, rrx
   103d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   103d6:	bf1f      	itttt	ne
   103d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   103dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   103e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   103e4:	4770      	bxne	lr
   103e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   103ea:	bf08      	it	eq
   103ec:	4770      	bxeq	lr
   103ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   103f2:	bf04      	itt	eq
   103f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   103f8:	4770      	bxeq	lr
   103fa:	b530      	push	{r4, r5, lr}
   103fc:	f44f 7460 	mov.w	r4, #896	; 0x380
   10400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10408:	e71c      	b.n	10244 <__adddf3+0x138>
   1040a:	bf00      	nop

0001040c <__aeabi_ul2d>:
   1040c:	ea50 0201 	orrs.w	r2, r0, r1
   10410:	bf08      	it	eq
   10412:	4770      	bxeq	lr
   10414:	b530      	push	{r4, r5, lr}
   10416:	f04f 0500 	mov.w	r5, #0
   1041a:	e00a      	b.n	10432 <__aeabi_l2d+0x16>

0001041c <__aeabi_l2d>:
   1041c:	ea50 0201 	orrs.w	r2, r0, r1
   10420:	bf08      	it	eq
   10422:	4770      	bxeq	lr
   10424:	b530      	push	{r4, r5, lr}
   10426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1042a:	d502      	bpl.n	10432 <__aeabi_l2d+0x16>
   1042c:	4240      	negs	r0, r0
   1042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10432:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10436:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1043a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1043e:	f43f aed8 	beq.w	101f2 <__adddf3+0xe6>
   10442:	f04f 0203 	mov.w	r2, #3
   10446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1044a:	bf18      	it	ne
   1044c:	3203      	addne	r2, #3
   1044e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   10452:	bf18      	it	ne
   10454:	3203      	addne	r2, #3
   10456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1045a:	f1c2 0320 	rsb	r3, r2, #32
   1045e:	fa00 fc03 	lsl.w	ip, r0, r3
   10462:	fa20 f002 	lsr.w	r0, r0, r2
   10466:	fa01 fe03 	lsl.w	lr, r1, r3
   1046a:	ea40 000e 	orr.w	r0, r0, lr
   1046e:	fa21 f102 	lsr.w	r1, r1, r2
   10472:	4414      	add	r4, r2
   10474:	e6bd      	b.n	101f2 <__adddf3+0xe6>
   10476:	bf00      	nop

00010478 <__aeabi_dmul>:
   10478:	b570      	push	{r4, r5, r6, lr}
   1047a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1047e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   10482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   10486:	bf1d      	ittte	ne
   10488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1048c:	ea94 0f0c 	teqne	r4, ip
   10490:	ea95 0f0c 	teqne	r5, ip
   10494:	f000 f8de 	bleq	10654 <__aeabi_dmul+0x1dc>
   10498:	442c      	add	r4, r5
   1049a:	ea81 0603 	eor.w	r6, r1, r3
   1049e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   104a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   104a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   104aa:	bf18      	it	ne
   104ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   104b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   104b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   104b8:	d038      	beq.n	1052c <__aeabi_dmul+0xb4>
   104ba:	fba0 ce02 	umull	ip, lr, r0, r2
   104be:	f04f 0500 	mov.w	r5, #0
   104c2:	fbe1 e502 	umlal	lr, r5, r1, r2
   104c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   104ca:	fbe0 e503 	umlal	lr, r5, r0, r3
   104ce:	f04f 0600 	mov.w	r6, #0
   104d2:	fbe1 5603 	umlal	r5, r6, r1, r3
   104d6:	f09c 0f00 	teq	ip, #0
   104da:	bf18      	it	ne
   104dc:	f04e 0e01 	orrne.w	lr, lr, #1
   104e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   104e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   104e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   104ec:	d204      	bcs.n	104f8 <__aeabi_dmul+0x80>
   104ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   104f2:	416d      	adcs	r5, r5
   104f4:	eb46 0606 	adc.w	r6, r6, r6
   104f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   104fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   10500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   10504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   10508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1050c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10510:	bf88      	it	hi
   10512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10516:	d81e      	bhi.n	10556 <__aeabi_dmul+0xde>
   10518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1051c:	bf08      	it	eq
   1051e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   10522:	f150 0000 	adcs.w	r0, r0, #0
   10526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1052a:	bd70      	pop	{r4, r5, r6, pc}
   1052c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   10530:	ea46 0101 	orr.w	r1, r6, r1
   10534:	ea40 0002 	orr.w	r0, r0, r2
   10538:	ea81 0103 	eor.w	r1, r1, r3
   1053c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   10540:	bfc2      	ittt	gt
   10542:	ebd4 050c 	rsbsgt	r5, r4, ip
   10546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1054a:	bd70      	popgt	{r4, r5, r6, pc}
   1054c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10550:	f04f 0e00 	mov.w	lr, #0
   10554:	3c01      	subs	r4, #1
   10556:	f300 80ab 	bgt.w	106b0 <__aeabi_dmul+0x238>
   1055a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1055e:	bfde      	ittt	le
   10560:	2000      	movle	r0, #0
   10562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   10566:	bd70      	pople	{r4, r5, r6, pc}
   10568:	f1c4 0400 	rsb	r4, r4, #0
   1056c:	3c20      	subs	r4, #32
   1056e:	da35      	bge.n	105dc <__aeabi_dmul+0x164>
   10570:	340c      	adds	r4, #12
   10572:	dc1b      	bgt.n	105ac <__aeabi_dmul+0x134>
   10574:	f104 0414 	add.w	r4, r4, #20
   10578:	f1c4 0520 	rsb	r5, r4, #32
   1057c:	fa00 f305 	lsl.w	r3, r0, r5
   10580:	fa20 f004 	lsr.w	r0, r0, r4
   10584:	fa01 f205 	lsl.w	r2, r1, r5
   10588:	ea40 0002 	orr.w	r0, r0, r2
   1058c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   10590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10598:	fa21 f604 	lsr.w	r6, r1, r4
   1059c:	eb42 0106 	adc.w	r1, r2, r6
   105a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   105a4:	bf08      	it	eq
   105a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   105aa:	bd70      	pop	{r4, r5, r6, pc}
   105ac:	f1c4 040c 	rsb	r4, r4, #12
   105b0:	f1c4 0520 	rsb	r5, r4, #32
   105b4:	fa00 f304 	lsl.w	r3, r0, r4
   105b8:	fa20 f005 	lsr.w	r0, r0, r5
   105bc:	fa01 f204 	lsl.w	r2, r1, r4
   105c0:	ea40 0002 	orr.w	r0, r0, r2
   105c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   105c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   105cc:	f141 0100 	adc.w	r1, r1, #0
   105d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   105d4:	bf08      	it	eq
   105d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   105da:	bd70      	pop	{r4, r5, r6, pc}
   105dc:	f1c4 0520 	rsb	r5, r4, #32
   105e0:	fa00 f205 	lsl.w	r2, r0, r5
   105e4:	ea4e 0e02 	orr.w	lr, lr, r2
   105e8:	fa20 f304 	lsr.w	r3, r0, r4
   105ec:	fa01 f205 	lsl.w	r2, r1, r5
   105f0:	ea43 0302 	orr.w	r3, r3, r2
   105f4:	fa21 f004 	lsr.w	r0, r1, r4
   105f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   105fc:	fa21 f204 	lsr.w	r2, r1, r4
   10600:	ea20 0002 	bic.w	r0, r0, r2
   10604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   10608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1060c:	bf08      	it	eq
   1060e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10612:	bd70      	pop	{r4, r5, r6, pc}
   10614:	f094 0f00 	teq	r4, #0
   10618:	d10f      	bne.n	1063a <__aeabi_dmul+0x1c2>
   1061a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1061e:	0040      	lsls	r0, r0, #1
   10620:	eb41 0101 	adc.w	r1, r1, r1
   10624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10628:	bf08      	it	eq
   1062a:	3c01      	subeq	r4, #1
   1062c:	d0f7      	beq.n	1061e <__aeabi_dmul+0x1a6>
   1062e:	ea41 0106 	orr.w	r1, r1, r6
   10632:	f095 0f00 	teq	r5, #0
   10636:	bf18      	it	ne
   10638:	4770      	bxne	lr
   1063a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1063e:	0052      	lsls	r2, r2, #1
   10640:	eb43 0303 	adc.w	r3, r3, r3
   10644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   10648:	bf08      	it	eq
   1064a:	3d01      	subeq	r5, #1
   1064c:	d0f7      	beq.n	1063e <__aeabi_dmul+0x1c6>
   1064e:	ea43 0306 	orr.w	r3, r3, r6
   10652:	4770      	bx	lr
   10654:	ea94 0f0c 	teq	r4, ip
   10658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1065c:	bf18      	it	ne
   1065e:	ea95 0f0c 	teqne	r5, ip
   10662:	d00c      	beq.n	1067e <__aeabi_dmul+0x206>
   10664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   10668:	bf18      	it	ne
   1066a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1066e:	d1d1      	bne.n	10614 <__aeabi_dmul+0x19c>
   10670:	ea81 0103 	eor.w	r1, r1, r3
   10674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10678:	f04f 0000 	mov.w	r0, #0
   1067c:	bd70      	pop	{r4, r5, r6, pc}
   1067e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   10682:	bf06      	itte	eq
   10684:	4610      	moveq	r0, r2
   10686:	4619      	moveq	r1, r3
   10688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1068c:	d019      	beq.n	106c2 <__aeabi_dmul+0x24a>
   1068e:	ea94 0f0c 	teq	r4, ip
   10692:	d102      	bne.n	1069a <__aeabi_dmul+0x222>
   10694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   10698:	d113      	bne.n	106c2 <__aeabi_dmul+0x24a>
   1069a:	ea95 0f0c 	teq	r5, ip
   1069e:	d105      	bne.n	106ac <__aeabi_dmul+0x234>
   106a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   106a4:	bf1c      	itt	ne
   106a6:	4610      	movne	r0, r2
   106a8:	4619      	movne	r1, r3
   106aa:	d10a      	bne.n	106c2 <__aeabi_dmul+0x24a>
   106ac:	ea81 0103 	eor.w	r1, r1, r3
   106b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   106b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   106b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   106bc:	f04f 0000 	mov.w	r0, #0
   106c0:	bd70      	pop	{r4, r5, r6, pc}
   106c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   106c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   106ca:	bd70      	pop	{r4, r5, r6, pc}

000106cc <__aeabi_ddiv>:
   106cc:	b570      	push	{r4, r5, r6, lr}
   106ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   106d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   106d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   106da:	bf1d      	ittte	ne
   106dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   106e0:	ea94 0f0c 	teqne	r4, ip
   106e4:	ea95 0f0c 	teqne	r5, ip
   106e8:	f000 f8a7 	bleq	1083a <__aeabi_ddiv+0x16e>
   106ec:	eba4 0405 	sub.w	r4, r4, r5
   106f0:	ea81 0e03 	eor.w	lr, r1, r3
   106f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   106f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   106fc:	f000 8088 	beq.w	10810 <__aeabi_ddiv+0x144>
   10700:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   10708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1070c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   10710:	ea4f 2202 	mov.w	r2, r2, lsl #8
   10714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   10718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1071c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   10720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   10724:	429d      	cmp	r5, r3
   10726:	bf08      	it	eq
   10728:	4296      	cmpeq	r6, r2
   1072a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1072e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   10732:	d202      	bcs.n	1073a <__aeabi_ddiv+0x6e>
   10734:	085b      	lsrs	r3, r3, #1
   10736:	ea4f 0232 	mov.w	r2, r2, rrx
   1073a:	1ab6      	subs	r6, r6, r2
   1073c:	eb65 0503 	sbc.w	r5, r5, r3
   10740:	085b      	lsrs	r3, r3, #1
   10742:	ea4f 0232 	mov.w	r2, r2, rrx
   10746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1074a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1074e:	ebb6 0e02 	subs.w	lr, r6, r2
   10752:	eb75 0e03 	sbcs.w	lr, r5, r3
   10756:	bf22      	ittt	cs
   10758:	1ab6      	subcs	r6, r6, r2
   1075a:	4675      	movcs	r5, lr
   1075c:	ea40 000c 	orrcs.w	r0, r0, ip
   10760:	085b      	lsrs	r3, r3, #1
   10762:	ea4f 0232 	mov.w	r2, r2, rrx
   10766:	ebb6 0e02 	subs.w	lr, r6, r2
   1076a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1076e:	bf22      	ittt	cs
   10770:	1ab6      	subcs	r6, r6, r2
   10772:	4675      	movcs	r5, lr
   10774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   10778:	085b      	lsrs	r3, r3, #1
   1077a:	ea4f 0232 	mov.w	r2, r2, rrx
   1077e:	ebb6 0e02 	subs.w	lr, r6, r2
   10782:	eb75 0e03 	sbcs.w	lr, r5, r3
   10786:	bf22      	ittt	cs
   10788:	1ab6      	subcs	r6, r6, r2
   1078a:	4675      	movcs	r5, lr
   1078c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   10790:	085b      	lsrs	r3, r3, #1
   10792:	ea4f 0232 	mov.w	r2, r2, rrx
   10796:	ebb6 0e02 	subs.w	lr, r6, r2
   1079a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1079e:	bf22      	ittt	cs
   107a0:	1ab6      	subcs	r6, r6, r2
   107a2:	4675      	movcs	r5, lr
   107a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   107a8:	ea55 0e06 	orrs.w	lr, r5, r6
   107ac:	d018      	beq.n	107e0 <__aeabi_ddiv+0x114>
   107ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   107b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   107b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   107ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   107be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   107c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   107c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   107ca:	d1c0      	bne.n	1074e <__aeabi_ddiv+0x82>
   107cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   107d0:	d10b      	bne.n	107ea <__aeabi_ddiv+0x11e>
   107d2:	ea41 0100 	orr.w	r1, r1, r0
   107d6:	f04f 0000 	mov.w	r0, #0
   107da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   107de:	e7b6      	b.n	1074e <__aeabi_ddiv+0x82>
   107e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   107e4:	bf04      	itt	eq
   107e6:	4301      	orreq	r1, r0
   107e8:	2000      	moveq	r0, #0
   107ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   107ee:	bf88      	it	hi
   107f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   107f4:	f63f aeaf 	bhi.w	10556 <__aeabi_dmul+0xde>
   107f8:	ebb5 0c03 	subs.w	ip, r5, r3
   107fc:	bf04      	itt	eq
   107fe:	ebb6 0c02 	subseq.w	ip, r6, r2
   10802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10806:	f150 0000 	adcs.w	r0, r0, #0
   1080a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1080e:	bd70      	pop	{r4, r5, r6, pc}
   10810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   10814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   10818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1081c:	bfc2      	ittt	gt
   1081e:	ebd4 050c 	rsbsgt	r5, r4, ip
   10822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   10826:	bd70      	popgt	{r4, r5, r6, pc}
   10828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1082c:	f04f 0e00 	mov.w	lr, #0
   10830:	3c01      	subs	r4, #1
   10832:	e690      	b.n	10556 <__aeabi_dmul+0xde>
   10834:	ea45 0e06 	orr.w	lr, r5, r6
   10838:	e68d      	b.n	10556 <__aeabi_dmul+0xde>
   1083a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1083e:	ea94 0f0c 	teq	r4, ip
   10842:	bf08      	it	eq
   10844:	ea95 0f0c 	teqeq	r5, ip
   10848:	f43f af3b 	beq.w	106c2 <__aeabi_dmul+0x24a>
   1084c:	ea94 0f0c 	teq	r4, ip
   10850:	d10a      	bne.n	10868 <__aeabi_ddiv+0x19c>
   10852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10856:	f47f af34 	bne.w	106c2 <__aeabi_dmul+0x24a>
   1085a:	ea95 0f0c 	teq	r5, ip
   1085e:	f47f af25 	bne.w	106ac <__aeabi_dmul+0x234>
   10862:	4610      	mov	r0, r2
   10864:	4619      	mov	r1, r3
   10866:	e72c      	b.n	106c2 <__aeabi_dmul+0x24a>
   10868:	ea95 0f0c 	teq	r5, ip
   1086c:	d106      	bne.n	1087c <__aeabi_ddiv+0x1b0>
   1086e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   10872:	f43f aefd 	beq.w	10670 <__aeabi_dmul+0x1f8>
   10876:	4610      	mov	r0, r2
   10878:	4619      	mov	r1, r3
   1087a:	e722      	b.n	106c2 <__aeabi_dmul+0x24a>
   1087c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   10880:	bf18      	it	ne
   10882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   10886:	f47f aec5 	bne.w	10614 <__aeabi_dmul+0x19c>
   1088a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1088e:	f47f af0d 	bne.w	106ac <__aeabi_dmul+0x234>
   10892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   10896:	f47f aeeb 	bne.w	10670 <__aeabi_dmul+0x1f8>
   1089a:	e712      	b.n	106c2 <__aeabi_dmul+0x24a>

0001089c <__aeabi_uldivmod>:
   1089c:	b953      	cbnz	r3, 108b4 <__aeabi_uldivmod+0x18>
   1089e:	b94a      	cbnz	r2, 108b4 <__aeabi_uldivmod+0x18>
   108a0:	2900      	cmp	r1, #0
   108a2:	bf08      	it	eq
   108a4:	2800      	cmpeq	r0, #0
   108a6:	bf1c      	itt	ne
   108a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   108ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   108b0:	f000 b80c 	b.w	108cc <__aeabi_idiv0>
   108b4:	f1ad 0c08 	sub.w	ip, sp, #8
   108b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   108bc:	f000 f808 	bl	108d0 <__udivmoddi4>
   108c0:	f8dd e004 	ldr.w	lr, [sp, #4]
   108c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   108c8:	b004      	add	sp, #16
   108ca:	4770      	bx	lr

000108cc <__aeabi_idiv0>:
   108cc:	4770      	bx	lr
   108ce:	bf00      	nop

000108d0 <__udivmoddi4>:
   108d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108d4:	4607      	mov	r7, r0
   108d6:	468c      	mov	ip, r1
   108d8:	4608      	mov	r0, r1
   108da:	9e09      	ldr	r6, [sp, #36]	; 0x24
   108dc:	4615      	mov	r5, r2
   108de:	463c      	mov	r4, r7
   108e0:	4619      	mov	r1, r3
   108e2:	2b00      	cmp	r3, #0
   108e4:	f040 80c6 	bne.w	10a74 <__udivmoddi4+0x1a4>
   108e8:	4282      	cmp	r2, r0
   108ea:	fab2 f782 	clz	r7, r2
   108ee:	d946      	bls.n	1097e <__udivmoddi4+0xae>
   108f0:	b14f      	cbz	r7, 10906 <__udivmoddi4+0x36>
   108f2:	f1c7 0e20 	rsb	lr, r7, #32
   108f6:	fa24 fe0e 	lsr.w	lr, r4, lr
   108fa:	fa00 f307 	lsl.w	r3, r0, r7
   108fe:	40bd      	lsls	r5, r7
   10900:	ea4e 0c03 	orr.w	ip, lr, r3
   10904:	40bc      	lsls	r4, r7
   10906:	ea4f 4815 	mov.w	r8, r5, lsr #16
   1090a:	fa1f fe85 	uxth.w	lr, r5
   1090e:	fbbc f9f8 	udiv	r9, ip, r8
   10912:	0c22      	lsrs	r2, r4, #16
   10914:	fb08 c319 	mls	r3, r8, r9, ip
   10918:	fb09 fa0e 	mul.w	sl, r9, lr
   1091c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   10920:	459a      	cmp	sl, r3
   10922:	d928      	bls.n	10976 <__udivmoddi4+0xa6>
   10924:	18eb      	adds	r3, r5, r3
   10926:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1092a:	d204      	bcs.n	10936 <__udivmoddi4+0x66>
   1092c:	459a      	cmp	sl, r3
   1092e:	d902      	bls.n	10936 <__udivmoddi4+0x66>
   10930:	f1a9 0002 	sub.w	r0, r9, #2
   10934:	442b      	add	r3, r5
   10936:	eba3 030a 	sub.w	r3, r3, sl
   1093a:	b2a4      	uxth	r4, r4
   1093c:	fbb3 f2f8 	udiv	r2, r3, r8
   10940:	fb08 3312 	mls	r3, r8, r2, r3
   10944:	fb02 fe0e 	mul.w	lr, r2, lr
   10948:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1094c:	45a6      	cmp	lr, r4
   1094e:	d914      	bls.n	1097a <__udivmoddi4+0xaa>
   10950:	192c      	adds	r4, r5, r4
   10952:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   10956:	d203      	bcs.n	10960 <__udivmoddi4+0x90>
   10958:	45a6      	cmp	lr, r4
   1095a:	d901      	bls.n	10960 <__udivmoddi4+0x90>
   1095c:	1e93      	subs	r3, r2, #2
   1095e:	442c      	add	r4, r5
   10960:	eba4 040e 	sub.w	r4, r4, lr
   10964:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   10968:	b11e      	cbz	r6, 10972 <__udivmoddi4+0xa2>
   1096a:	40fc      	lsrs	r4, r7
   1096c:	2300      	movs	r3, #0
   1096e:	6034      	str	r4, [r6, #0]
   10970:	6073      	str	r3, [r6, #4]
   10972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10976:	4648      	mov	r0, r9
   10978:	e7dd      	b.n	10936 <__udivmoddi4+0x66>
   1097a:	4613      	mov	r3, r2
   1097c:	e7f0      	b.n	10960 <__udivmoddi4+0x90>
   1097e:	b902      	cbnz	r2, 10982 <__udivmoddi4+0xb2>
   10980:	deff      	udf	#255	; 0xff
   10982:	bb87      	cbnz	r7, 109e6 <__udivmoddi4+0x116>
   10984:	1a83      	subs	r3, r0, r2
   10986:	2101      	movs	r1, #1
   10988:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1098c:	b2aa      	uxth	r2, r5
   1098e:	fbb3 fcfe 	udiv	ip, r3, lr
   10992:	0c20      	lsrs	r0, r4, #16
   10994:	fb0e 331c 	mls	r3, lr, ip, r3
   10998:	fb0c f802 	mul.w	r8, ip, r2
   1099c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   109a0:	4598      	cmp	r8, r3
   109a2:	d963      	bls.n	10a6c <__udivmoddi4+0x19c>
   109a4:	18eb      	adds	r3, r5, r3
   109a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   109aa:	d204      	bcs.n	109b6 <__udivmoddi4+0xe6>
   109ac:	4598      	cmp	r8, r3
   109ae:	d902      	bls.n	109b6 <__udivmoddi4+0xe6>
   109b0:	f1ac 0002 	sub.w	r0, ip, #2
   109b4:	442b      	add	r3, r5
   109b6:	eba3 0308 	sub.w	r3, r3, r8
   109ba:	b2a4      	uxth	r4, r4
   109bc:	fbb3 fcfe 	udiv	ip, r3, lr
   109c0:	fb0e 331c 	mls	r3, lr, ip, r3
   109c4:	fb0c f202 	mul.w	r2, ip, r2
   109c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   109cc:	42a2      	cmp	r2, r4
   109ce:	d94f      	bls.n	10a70 <__udivmoddi4+0x1a0>
   109d0:	192c      	adds	r4, r5, r4
   109d2:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   109d6:	d204      	bcs.n	109e2 <__udivmoddi4+0x112>
   109d8:	42a2      	cmp	r2, r4
   109da:	d902      	bls.n	109e2 <__udivmoddi4+0x112>
   109dc:	f1ac 0302 	sub.w	r3, ip, #2
   109e0:	442c      	add	r4, r5
   109e2:	1aa4      	subs	r4, r4, r2
   109e4:	e7be      	b.n	10964 <__udivmoddi4+0x94>
   109e6:	f1c7 0c20 	rsb	ip, r7, #32
   109ea:	fa20 f80c 	lsr.w	r8, r0, ip
   109ee:	fa00 f307 	lsl.w	r3, r0, r7
   109f2:	fa24 fc0c 	lsr.w	ip, r4, ip
   109f6:	40bd      	lsls	r5, r7
   109f8:	ea4c 0203 	orr.w	r2, ip, r3
   109fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10a00:	b2ab      	uxth	r3, r5
   10a02:	fbb8 fcfe 	udiv	ip, r8, lr
   10a06:	0c11      	lsrs	r1, r2, #16
   10a08:	fb0e 801c 	mls	r0, lr, ip, r8
   10a0c:	fb0c f903 	mul.w	r9, ip, r3
   10a10:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   10a14:	4581      	cmp	r9, r0
   10a16:	fa04 f407 	lsl.w	r4, r4, r7
   10a1a:	d923      	bls.n	10a64 <__udivmoddi4+0x194>
   10a1c:	1828      	adds	r0, r5, r0
   10a1e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   10a22:	d204      	bcs.n	10a2e <__udivmoddi4+0x15e>
   10a24:	4581      	cmp	r9, r0
   10a26:	d902      	bls.n	10a2e <__udivmoddi4+0x15e>
   10a28:	f1ac 0102 	sub.w	r1, ip, #2
   10a2c:	4428      	add	r0, r5
   10a2e:	eba0 0009 	sub.w	r0, r0, r9
   10a32:	b292      	uxth	r2, r2
   10a34:	fbb0 fcfe 	udiv	ip, r0, lr
   10a38:	fb0e 001c 	mls	r0, lr, ip, r0
   10a3c:	fb0c f803 	mul.w	r8, ip, r3
   10a40:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
   10a44:	4598      	cmp	r8, r3
   10a46:	d90f      	bls.n	10a68 <__udivmoddi4+0x198>
   10a48:	18eb      	adds	r3, r5, r3
   10a4a:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   10a4e:	d204      	bcs.n	10a5a <__udivmoddi4+0x18a>
   10a50:	4598      	cmp	r8, r3
   10a52:	d902      	bls.n	10a5a <__udivmoddi4+0x18a>
   10a54:	f1ac 0202 	sub.w	r2, ip, #2
   10a58:	442b      	add	r3, r5
   10a5a:	eba3 0308 	sub.w	r3, r3, r8
   10a5e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   10a62:	e791      	b.n	10988 <__udivmoddi4+0xb8>
   10a64:	4661      	mov	r1, ip
   10a66:	e7e2      	b.n	10a2e <__udivmoddi4+0x15e>
   10a68:	4662      	mov	r2, ip
   10a6a:	e7f6      	b.n	10a5a <__udivmoddi4+0x18a>
   10a6c:	4660      	mov	r0, ip
   10a6e:	e7a2      	b.n	109b6 <__udivmoddi4+0xe6>
   10a70:	4663      	mov	r3, ip
   10a72:	e7b6      	b.n	109e2 <__udivmoddi4+0x112>
   10a74:	4283      	cmp	r3, r0
   10a76:	d905      	bls.n	10a84 <__udivmoddi4+0x1b4>
   10a78:	b10e      	cbz	r6, 10a7e <__udivmoddi4+0x1ae>
   10a7a:	e9c6 7000 	strd	r7, r0, [r6]
   10a7e:	2100      	movs	r1, #0
   10a80:	4608      	mov	r0, r1
   10a82:	e776      	b.n	10972 <__udivmoddi4+0xa2>
   10a84:	fab3 f183 	clz	r1, r3
   10a88:	b981      	cbnz	r1, 10aac <__udivmoddi4+0x1dc>
   10a8a:	4283      	cmp	r3, r0
   10a8c:	d301      	bcc.n	10a92 <__udivmoddi4+0x1c2>
   10a8e:	42ba      	cmp	r2, r7
   10a90:	d80a      	bhi.n	10aa8 <__udivmoddi4+0x1d8>
   10a92:	1abc      	subs	r4, r7, r2
   10a94:	eb60 0303 	sbc.w	r3, r0, r3
   10a98:	2001      	movs	r0, #1
   10a9a:	469c      	mov	ip, r3
   10a9c:	2e00      	cmp	r6, #0
   10a9e:	d068      	beq.n	10b72 <__udivmoddi4+0x2a2>
   10aa0:	e9c6 4c00 	strd	r4, ip, [r6]
   10aa4:	2100      	movs	r1, #0
   10aa6:	e764      	b.n	10972 <__udivmoddi4+0xa2>
   10aa8:	4608      	mov	r0, r1
   10aaa:	e7f7      	b.n	10a9c <__udivmoddi4+0x1cc>
   10aac:	f1c1 0c20 	rsb	ip, r1, #32
   10ab0:	408b      	lsls	r3, r1
   10ab2:	fa22 f40c 	lsr.w	r4, r2, ip
   10ab6:	431c      	orrs	r4, r3
   10ab8:	fa02 f501 	lsl.w	r5, r2, r1
   10abc:	fa00 f301 	lsl.w	r3, r0, r1
   10ac0:	fa27 f20c 	lsr.w	r2, r7, ip
   10ac4:	fa20 fb0c 	lsr.w	fp, r0, ip
   10ac8:	ea4f 4914 	mov.w	r9, r4, lsr #16
   10acc:	4313      	orrs	r3, r2
   10ace:	fbbb f8f9 	udiv	r8, fp, r9
   10ad2:	fa1f fe84 	uxth.w	lr, r4
   10ad6:	fb09 bb18 	mls	fp, r9, r8, fp
   10ada:	0c1a      	lsrs	r2, r3, #16
   10adc:	fb08 fa0e 	mul.w	sl, r8, lr
   10ae0:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   10ae4:	4592      	cmp	sl, r2
   10ae6:	fa07 f701 	lsl.w	r7, r7, r1
   10aea:	d93e      	bls.n	10b6a <__udivmoddi4+0x29a>
   10aec:	18a2      	adds	r2, r4, r2
   10aee:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   10af2:	d204      	bcs.n	10afe <__udivmoddi4+0x22e>
   10af4:	4592      	cmp	sl, r2
   10af6:	d902      	bls.n	10afe <__udivmoddi4+0x22e>
   10af8:	f1a8 0002 	sub.w	r0, r8, #2
   10afc:	4422      	add	r2, r4
   10afe:	eba2 020a 	sub.w	r2, r2, sl
   10b02:	b29b      	uxth	r3, r3
   10b04:	fbb2 f8f9 	udiv	r8, r2, r9
   10b08:	fb09 2218 	mls	r2, r9, r8, r2
   10b0c:	fb08 fe0e 	mul.w	lr, r8, lr
   10b10:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   10b14:	4596      	cmp	lr, r2
   10b16:	d92a      	bls.n	10b6e <__udivmoddi4+0x29e>
   10b18:	18a2      	adds	r2, r4, r2
   10b1a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   10b1e:	d204      	bcs.n	10b2a <__udivmoddi4+0x25a>
   10b20:	4596      	cmp	lr, r2
   10b22:	d902      	bls.n	10b2a <__udivmoddi4+0x25a>
   10b24:	f1a8 0302 	sub.w	r3, r8, #2
   10b28:	4422      	add	r2, r4
   10b2a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   10b2e:	fba0 9305 	umull	r9, r3, r0, r5
   10b32:	eba2 020e 	sub.w	r2, r2, lr
   10b36:	429a      	cmp	r2, r3
   10b38:	46ce      	mov	lr, r9
   10b3a:	4698      	mov	r8, r3
   10b3c:	d302      	bcc.n	10b44 <__udivmoddi4+0x274>
   10b3e:	d106      	bne.n	10b4e <__udivmoddi4+0x27e>
   10b40:	454f      	cmp	r7, r9
   10b42:	d204      	bcs.n	10b4e <__udivmoddi4+0x27e>
   10b44:	ebb9 0e05 	subs.w	lr, r9, r5
   10b48:	eb63 0804 	sbc.w	r8, r3, r4
   10b4c:	3801      	subs	r0, #1
   10b4e:	b186      	cbz	r6, 10b72 <__udivmoddi4+0x2a2>
   10b50:	ebb7 030e 	subs.w	r3, r7, lr
   10b54:	eb62 0708 	sbc.w	r7, r2, r8
   10b58:	fa07 fc0c 	lsl.w	ip, r7, ip
   10b5c:	40cb      	lsrs	r3, r1
   10b5e:	ea4c 0303 	orr.w	r3, ip, r3
   10b62:	40cf      	lsrs	r7, r1
   10b64:	e9c6 3700 	strd	r3, r7, [r6]
   10b68:	e79c      	b.n	10aa4 <__udivmoddi4+0x1d4>
   10b6a:	4640      	mov	r0, r8
   10b6c:	e7c7      	b.n	10afe <__udivmoddi4+0x22e>
   10b6e:	4643      	mov	r3, r8
   10b70:	e7db      	b.n	10b2a <__udivmoddi4+0x25a>
   10b72:	4631      	mov	r1, r6
   10b74:	e6fd      	b.n	10972 <__udivmoddi4+0xa2>
	...

00010b78 <vl53l0x>:

void blink( void ) {
	gpio_pin_toggle_dt(&led);
}

void vl53l0x(void){
   10b78:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   10b7c:	4828      	ldr	r0, [pc, #160]	; (10c20 <vl53l0x+0xa8>)
   10b7e:	f007 fa55 	bl	1802c <z_impl_device_get_binding>
	const struct device *dev = device_get_binding(DT_LABEL(DT_INST(0, st_vl53l0x)));
	struct sensor_value value;
	int ret;

	if (dev == NULL) {
   10b82:	4604      	mov	r4, r0
   10b84:	b190      	cbz	r0, 10bac <vl53l0x+0x34>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
   10b86:	a724      	add	r7, pc, #144	; (adr r7, 10c18 <vl53l0x+0xa0>)
   10b88:	e9d7 6700 	ldrd	r6, r7, [r7]
			printk("sensor_sample_fetch failed ret %d\n", ret);
			return;
		}

		ret = sensor_channel_get(dev, SENSOR_CHAN_PROX, &value);
		printk("prox is %d\n", value.val1);
   10b8c:	f8df a094 	ldr.w	sl, [pc, #148]	; 10c24 <vl53l0x+0xac>

		ret = sensor_channel_get(dev,
					 SENSOR_CHAN_DISTANCE,
					 &value);
		printk("distance is %f m\n", sensor_value_to_double(&value));
   10b90:	4d25      	ldr	r5, [pc, #148]	; (10c28 <vl53l0x+0xb0>)
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   10b92:	68a3      	ldr	r3, [r4, #8]
   10b94:	2139      	movs	r1, #57	; 0x39
   10b96:	68db      	ldr	r3, [r3, #12]
   10b98:	4620      	mov	r0, r4
   10b9a:	4798      	blx	r3
		if (ret) {
   10b9c:	4601      	mov	r1, r0
   10b9e:	b158      	cbz	r0, 10bb8 <vl53l0x+0x40>
			printk("sensor_sample_fetch failed ret %d\n", ret);
   10ba0:	4822      	ldr	r0, [pc, #136]	; (10c2c <vl53l0x+0xb4>)
   10ba2:	f008 fc9a 	bl	194da <printk>

		k_sleep(K_MSEC(1000));
	}
   10ba6:	b002      	add	sp, #8
   10ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printk("Could not get VL53L0X device\n");
   10bac:	4820      	ldr	r0, [pc, #128]	; (10c30 <vl53l0x+0xb8>)
   10bae:	b002      	add	sp, #8
   10bb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printk("Could not get VL53L0X device\n");
   10bb4:	f008 bc91 	b.w	194da <printk>
	return api->channel_get(dev, chan, val);
   10bb8:	68a3      	ldr	r3, [r4, #8]
   10bba:	466a      	mov	r2, sp
   10bbc:	691b      	ldr	r3, [r3, #16]
   10bbe:	210f      	movs	r1, #15
   10bc0:	4620      	mov	r0, r4
   10bc2:	4798      	blx	r3
		printk("prox is %d\n", value.val1);
   10bc4:	9900      	ldr	r1, [sp, #0]
   10bc6:	4650      	mov	r0, sl
   10bc8:	f008 fc87 	bl	194da <printk>
   10bcc:	68a3      	ldr	r3, [r4, #8]
   10bce:	466a      	mov	r2, sp
   10bd0:	691b      	ldr	r3, [r3, #16]
   10bd2:	211a      	movs	r1, #26
   10bd4:	4620      	mov	r0, r4
   10bd6:	4798      	blx	r3
	return (double)val->val1 + (double)val->val2 / 1000000;
   10bd8:	9801      	ldr	r0, [sp, #4]
   10bda:	f7ff fbe3 	bl	103a4 <__aeabi_i2d>
   10bde:	4632      	mov	r2, r6
   10be0:	463b      	mov	r3, r7
   10be2:	f7ff fd73 	bl	106cc <__aeabi_ddiv>
   10be6:	4680      	mov	r8, r0
   10be8:	9800      	ldr	r0, [sp, #0]
   10bea:	4689      	mov	r9, r1
   10bec:	f7ff fbda 	bl	103a4 <__aeabi_i2d>
   10bf0:	4602      	mov	r2, r0
   10bf2:	460b      	mov	r3, r1
   10bf4:	4640      	mov	r0, r8
   10bf6:	4649      	mov	r1, r9
   10bf8:	f7ff fa88 	bl	1010c <__adddf3>
   10bfc:	4602      	mov	r2, r0
   10bfe:	460b      	mov	r3, r1
		printk("distance is %f m\n", sensor_value_to_double(&value));
   10c00:	4628      	mov	r0, r5
   10c02:	f008 fc6a 	bl	194da <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   10c06:	2100      	movs	r1, #0
   10c08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10c0c:	f008 f97c 	bl	18f08 <z_impl_k_sleep>
	while (1) {
   10c10:	e7bf      	b.n	10b92 <vl53l0x+0x1a>
   10c12:	bf00      	nop
   10c14:	f3af 8000 	nop.w
   10c18:	00000000 	.word	0x00000000
   10c1c:	412e8480 	.word	0x412e8480
   10c20:	0001daf0 	.word	0x0001daf0
   10c24:	0001db39 	.word	0x0001db39
   10c28:	0001db45 	.word	0x0001db45
   10c2c:	0001db16 	.word	0x0001db16
   10c30:	0001daf8 	.word	0x0001daf8

00010c34 <gpio_pin_toggle_dt.constprop.0.isra.0>:
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
   10c34:	4802      	ldr	r0, [pc, #8]	; (10c40 <gpio_pin_toggle_dt.constprop.0.isra.0+0xc>)
   10c36:	6883      	ldr	r3, [r0, #8]
   10c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   10c3c:	695b      	ldr	r3, [r3, #20]
   10c3e:	4718      	bx	r3
   10c40:	0001d4d8 	.word	0x0001d4d8

00010c44 <usb_setup>:
void usb_setup(void){
   10c44:	b513      	push	{r0, r1, r4, lr}
	uint32_t dtr = 0;
   10c46:	2000      	movs	r0, #0
   10c48:	9001      	str	r0, [sp, #4]
	if (usb_enable(NULL)) {
   10c4a:	f001 f899 	bl	11d80 <usb_enable>
   10c4e:	b910      	cbnz	r0, 10c56 <usb_setup+0x12>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
   10c50:	4c08      	ldr	r4, [pc, #32]	; (10c74 <usb_setup+0x30>)
	while (!dtr) {
   10c52:	9b01      	ldr	r3, [sp, #4]
   10c54:	b10b      	cbz	r3, 10c5a <usb_setup+0x16>
}
   10c56:	b002      	add	sp, #8
   10c58:	bd10      	pop	{r4, pc}
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
   10c5a:	68a3      	ldr	r3, [r4, #8]
   10c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10c5e:	b11b      	cbz	r3, 10c68 <usb_setup+0x24>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
   10c60:	aa01      	add	r2, sp, #4
   10c62:	2104      	movs	r1, #4
   10c64:	4620      	mov	r0, r4
   10c66:	4798      	blx	r3
   10c68:	2100      	movs	r1, #0
   10c6a:	f640 40cd 	movw	r0, #3277	; 0xccd
   10c6e:	f008 f94b 	bl	18f08 <z_impl_k_sleep>
   10c72:	e7ee      	b.n	10c52 <usb_setup+0xe>
   10c74:	0001d508 	.word	0x0001d508

00010c78 <main>:
void main(void) {	
   10c78:	b513      	push	{r0, r1, r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   10c7a:	4c13      	ldr	r4, [pc, #76]	; (10cc8 <main+0x50>)
   10c7c:	4620      	mov	r0, r4
   10c7e:	f00c f888 	bl	1cd92 <z_device_is_ready>
	if (!device_is_ready(led.port)) return;
   10c82:	b1f8      	cbz	r0, 10cc4 <main+0x4c>
	struct gpio_driver_data *data =
   10c84:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
   10c86:	68a1      	ldr	r1, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   10c88:	6813      	ldr	r3, [r2, #0]
   10c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   10c8e:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   10c90:	4620      	mov	r0, r4
   10c92:	680b      	ldr	r3, [r1, #0]
   10c94:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   10c98:	210d      	movs	r1, #13
   10c9a:	4798      	blx	r3
	usb_setup();
   10c9c:	f7ff ffd2 	bl	10c44 <usb_setup>
		(void) arch_syscall_invoke5(parm0.x, parm1.split.lo, parm1.split.hi, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
   10ca0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   10ca4:	2300      	movs	r3, #0
   10ca6:	e9cd 2300 	strd	r2, r3, [sp]
   10caa:	4808      	ldr	r0, [pc, #32]	; (10ccc <main+0x54>)
   10cac:	2200      	movs	r2, #0
   10cae:	2300      	movs	r3, #0
   10cb0:	f008 fb46 	bl	19340 <z_impl_k_timer_start>
	printk("started \r\n");
   10cb4:	4806      	ldr	r0, [pc, #24]	; (10cd0 <main+0x58>)
   10cb6:	f008 fc10 	bl	194da <printk>
}
   10cba:	b002      	add	sp, #8
   10cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	vl53l0x();
   10cc0:	f7ff bf5a 	b.w	10b78 <vl53l0x>
}
   10cc4:	b002      	add	sp, #8
   10cc6:	bd10      	pop	{r4, pc}
   10cc8:	0001d4d8 	.word	0x0001d4d8
   10ccc:	20000558 	.word	0x20000558
   10cd0:	0001db57 	.word	0x0001db57

00010cd4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   10cd4:	680b      	ldr	r3, [r1, #0]
   10cd6:	3301      	adds	r3, #1
   10cd8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   10cda:	4b01      	ldr	r3, [pc, #4]	; (10ce0 <char_out+0xc>)
   10cdc:	681b      	ldr	r3, [r3, #0]
   10cde:	4718      	bx	r3
   10ce0:	20000000 	.word	0x20000000

00010ce4 <__printk_hook_install>:
	_char_out = fn;
   10ce4:	4b01      	ldr	r3, [pc, #4]	; (10cec <__printk_hook_install+0x8>)
   10ce6:	6018      	str	r0, [r3, #0]
}
   10ce8:	4770      	bx	lr
   10cea:	bf00      	nop
   10cec:	20000000 	.word	0x20000000

00010cf0 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   10cf0:	b507      	push	{r0, r1, r2, lr}
   10cf2:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   10cf4:	2100      	movs	r1, #0
{
   10cf6:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   10cf8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   10cfa:	4803      	ldr	r0, [pc, #12]	; (10d08 <vprintk+0x18>)
   10cfc:	a901      	add	r1, sp, #4
   10cfe:	f000 f8e5 	bl	10ecc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   10d02:	b003      	add	sp, #12
   10d04:	f85d fb04 	ldr.w	pc, [sp], #4
   10d08:	00010cd5 	.word	0x00010cd5

00010d0c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10d10:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10d14:	f019 0808 	ands.w	r8, r9, #8
{
   10d18:	4604      	mov	r4, r0
   10d1a:	4693      	mov	fp, r2
	if (processing) {
   10d1c:	d00d      	beq.n	10d3a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   10d1e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10d20:	bf0c      	ite	eq
   10d22:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10d26:	f049 0920 	orrne.w	r9, r9, #32
   10d2a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10d2e:	f38b 8811 	msr	BASEPRI, fp
   10d32:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10d36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10d3a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   10d3e:	2902      	cmp	r1, #2
   10d40:	d107      	bne.n	10d52 <process_event+0x46>
			evt = process_recheck(mgr);
   10d42:	4620      	mov	r0, r4
   10d44:	f008 fbf0 	bl	19528 <process_recheck>
		if (evt == EVT_NOP) {
   10d48:	2800      	cmp	r0, #0
   10d4a:	d0f0      	beq.n	10d2e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   10d4c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10d4e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   10d50:	d14e      	bne.n	10df0 <process_event+0xe4>
			res = mgr->last_res;
   10d52:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10d54:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   10d56:	2f00      	cmp	r7, #0
   10d58:	da15      	bge.n	10d86 <process_event+0x7a>
		*clients = mgr->clients;
   10d5a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10d5c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   10d60:	e9c4 8800 	strd	r8, r8, [r4]
   10d64:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10d68:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   10d6a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10d6c:	8b21      	ldrh	r1, [r4, #24]
   10d6e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10d72:	45ca      	cmp	sl, r9
   10d74:	d002      	beq.n	10d7c <process_event+0x70>
		if (do_monitors
   10d76:	68a3      	ldr	r3, [r4, #8]
   10d78:	2b00      	cmp	r3, #0
   10d7a:	d15a      	bne.n	10e32 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   10d7c:	b90d      	cbnz	r5, 10d82 <process_event+0x76>
		    || (transit != NULL)) {
   10d7e:	2e00      	cmp	r6, #0
   10d80:	d071      	beq.n	10e66 <process_event+0x15a>
   10d82:	2300      	movs	r3, #0
   10d84:	e056      	b.n	10e34 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10d86:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   10d8a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   10d8c:	2a01      	cmp	r2, #1
   10d8e:	d81e      	bhi.n	10dce <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10d90:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   10d94:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   10d96:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10d98:	b289      	uxth	r1, r1
   10d9a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   10d9e:	d10a      	bne.n	10db6 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10da0:	b13d      	cbz	r5, 10db2 <process_event+0xa6>
   10da2:	8b63      	ldrh	r3, [r4, #26]
   10da4:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   10da6:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   10da8:	3301      	adds	r3, #1
   10daa:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10dac:	2a00      	cmp	r2, #0
   10dae:	d1fa      	bne.n	10da6 <process_event+0x9a>
   10db0:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10db2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   10db6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10db8:	4620      	mov	r0, r4
   10dba:	f008 fbb5 	bl	19528 <process_recheck>
   10dbe:	4606      	mov	r6, r0
   10dc0:	2800      	cmp	r0, #0
   10dc2:	d0d3      	beq.n	10d6c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10dc4:	8b23      	ldrh	r3, [r4, #24]
   10dc6:	f043 0320 	orr.w	r3, r3, #32
   10dca:	8323      	strh	r3, [r4, #24]
   10dcc:	e7cd      	b.n	10d6a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   10dce:	2b04      	cmp	r3, #4
   10dd0:	d10c      	bne.n	10dec <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10dd2:	f021 0107 	bic.w	r1, r1, #7
   10dd6:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10dd8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10dda:	4620      	mov	r0, r4
   10ddc:	f008 fba4 	bl	19528 <process_recheck>
   10de0:	4605      	mov	r5, r0
   10de2:	2800      	cmp	r0, #0
   10de4:	d0c1      	beq.n	10d6a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10de6:	f041 0120 	orr.w	r1, r1, #32
   10dea:	8321      	strh	r1, [r4, #24]
   10dec:	2500      	movs	r5, #0
   10dee:	e7bc      	b.n	10d6a <process_event+0x5e>
		} else if (evt == EVT_START) {
   10df0:	2803      	cmp	r0, #3
   10df2:	d109      	bne.n	10e08 <process_event+0xfc>
			transit = mgr->transitions->start;
   10df4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10df6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   10dfa:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10dfc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   10e00:	8323      	strh	r3, [r4, #24]
}
   10e02:	2500      	movs	r5, #0
		res = 0;
   10e04:	462f      	mov	r7, r5
   10e06:	e7b1      	b.n	10d6c <process_event+0x60>
		} else if (evt == EVT_STOP) {
   10e08:	2804      	cmp	r0, #4
   10e0a:	d106      	bne.n	10e1a <process_event+0x10e>
			transit = mgr->transitions->stop;
   10e0c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10e0e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   10e12:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10e14:	f043 0304 	orr.w	r3, r3, #4
   10e18:	e7f2      	b.n	10e00 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   10e1a:	2805      	cmp	r0, #5
   10e1c:	d106      	bne.n	10e2c <process_event+0x120>
			transit = mgr->transitions->reset;
   10e1e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10e20:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   10e24:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10e26:	f043 0305 	orr.w	r3, r3, #5
   10e2a:	e7e9      	b.n	10e00 <process_event+0xf4>
   10e2c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   10e2e:	462e      	mov	r6, r5
   10e30:	e7e8      	b.n	10e04 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   10e32:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10e34:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   10e38:	8321      	strh	r1, [r4, #24]
   10e3a:	f38b 8811 	msr	BASEPRI, fp
   10e3e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10e42:	b9fb      	cbnz	r3, 10e84 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
   10e44:	bb85      	cbnz	r5, 10ea8 <process_event+0x19c>
			if (transit != NULL) {
   10e46:	b116      	cbz	r6, 10e4e <process_event+0x142>
				transit(mgr, transition_complete);
   10e48:	491f      	ldr	r1, [pc, #124]	; (10ec8 <process_event+0x1bc>)
   10e4a:	4620      	mov	r0, r4
   10e4c:	47b0      	blx	r6
	__asm__ volatile(
   10e4e:	f04f 0320 	mov.w	r3, #32
   10e52:	f3ef 8b11 	mrs	fp, BASEPRI
   10e56:	f383 8812 	msr	BASEPRI_MAX, r3
   10e5a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10e5e:	8b23      	ldrh	r3, [r4, #24]
   10e60:	f023 0308 	bic.w	r3, r3, #8
   10e64:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10e66:	8b23      	ldrh	r3, [r4, #24]
   10e68:	06da      	lsls	r2, r3, #27
   10e6a:	d525      	bpl.n	10eb8 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10e6c:	f023 0310 	bic.w	r3, r3, #16
   10e70:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   10e72:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   10e74:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   10e78:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   10e7c:	2900      	cmp	r1, #0
   10e7e:	f47f af5e 	bne.w	10d3e <process_event+0x32>
out:
   10e82:	e754      	b.n	10d2e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10e84:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10e86:	2900      	cmp	r1, #0
   10e88:	d0dc      	beq.n	10e44 <process_event+0x138>
	return node->next;
   10e8a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   10e8e:	f8d1 b004 	ldr.w	fp, [r1, #4]
   10e92:	463b      	mov	r3, r7
   10e94:	4652      	mov	r2, sl
   10e96:	4620      	mov	r0, r4
   10e98:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10e9a:	f1b9 0f00 	cmp.w	r9, #0
   10e9e:	d0d1      	beq.n	10e44 <process_event+0x138>
   10ea0:	4649      	mov	r1, r9
   10ea2:	f8d9 9000 	ldr.w	r9, [r9]
   10ea6:	e7f2      	b.n	10e8e <process_event+0x182>
   10ea8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   10eaa:	463b      	mov	r3, r7
   10eac:	4652      	mov	r2, sl
   10eae:	4620      	mov	r0, r4
   10eb0:	682d      	ldr	r5, [r5, #0]
   10eb2:	f008 fb55 	bl	19560 <notify_one>
   10eb6:	e7c5      	b.n	10e44 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10eb8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10ebc:	bf1e      	ittt	ne
   10ebe:	f023 0320 	bicne.w	r3, r3, #32
   10ec2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   10ec4:	2102      	movne	r1, #2
   10ec6:	e7d5      	b.n	10e74 <process_event+0x168>
   10ec8:	0001958d 	.word	0x0001958d

00010ecc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ed0:	b091      	sub	sp, #68	; 0x44
   10ed2:	468b      	mov	fp, r1
   10ed4:	9002      	str	r0, [sp, #8]
   10ed6:	4692      	mov	sl, r2
   10ed8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10eda:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10edc:	f89a 0000 	ldrb.w	r0, [sl]
   10ee0:	b908      	cbnz	r0, 10ee6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10ee2:	4628      	mov	r0, r5
   10ee4:	e35f      	b.n	115a6 <cbvprintf+0x6da>
		if (*fp != '%') {
   10ee6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   10ee8:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
   10eec:	d007      	beq.n	10efe <cbvprintf+0x32>
			OUTC('%');
   10eee:	9b02      	ldr	r3, [sp, #8]
   10ef0:	4659      	mov	r1, fp
   10ef2:	4798      	blx	r3
   10ef4:	2800      	cmp	r0, #0
   10ef6:	f2c0 8356 	blt.w	115a6 <cbvprintf+0x6da>
   10efa:	3501      	adds	r5, #1
			break;
   10efc:	e212      	b.n	11324 <cbvprintf+0x458>
		} state = {
   10efe:	2218      	movs	r2, #24
   10f00:	2100      	movs	r1, #0
   10f02:	a80a      	add	r0, sp, #40	; 0x28
   10f04:	f009 f858 	bl	19fb8 <memset>
	if (*sp == '%') {
   10f08:	f89a 3001 	ldrb.w	r3, [sl, #1]
   10f0c:	2b25      	cmp	r3, #37	; 0x25
   10f0e:	d078      	beq.n	11002 <cbvprintf+0x136>
   10f10:	2200      	movs	r2, #0
   10f12:	4610      	mov	r0, r2
   10f14:	4696      	mov	lr, r2
   10f16:	4694      	mov	ip, r2
   10f18:	4616      	mov	r6, r2
   10f1a:	4639      	mov	r1, r7
		switch (*sp) {
   10f1c:	f817 3b01 	ldrb.w	r3, [r7], #1
   10f20:	2b2b      	cmp	r3, #43	; 0x2b
   10f22:	f000 809d 	beq.w	11060 <cbvprintf+0x194>
   10f26:	f200 8094 	bhi.w	11052 <cbvprintf+0x186>
   10f2a:	2b20      	cmp	r3, #32
   10f2c:	f000 809b 	beq.w	11066 <cbvprintf+0x19a>
   10f30:	2b23      	cmp	r3, #35	; 0x23
   10f32:	f000 809b 	beq.w	1106c <cbvprintf+0x1a0>
   10f36:	b12e      	cbz	r6, 10f44 <cbvprintf+0x78>
   10f38:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   10f3c:	f046 0604 	orr.w	r6, r6, #4
   10f40:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   10f44:	f1bc 0f00 	cmp.w	ip, #0
   10f48:	d005      	beq.n	10f56 <cbvprintf+0x8a>
   10f4a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   10f4e:	f046 0608 	orr.w	r6, r6, #8
   10f52:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   10f56:	f1be 0f00 	cmp.w	lr, #0
   10f5a:	d005      	beq.n	10f68 <cbvprintf+0x9c>
   10f5c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   10f60:	f046 0610 	orr.w	r6, r6, #16
   10f64:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   10f68:	b128      	cbz	r0, 10f76 <cbvprintf+0xaa>
   10f6a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   10f6e:	f040 0020 	orr.w	r0, r0, #32
   10f72:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   10f76:	b12a      	cbz	r2, 10f84 <cbvprintf+0xb8>
   10f78:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10f80:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   10f84:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10f88:	f002 0044 	and.w	r0, r2, #68	; 0x44
   10f8c:	2844      	cmp	r0, #68	; 0x44
   10f8e:	d103      	bne.n	10f98 <cbvprintf+0xcc>
		conv->flag_zero = false;
   10f90:	f36f 1286 	bfc	r2, #6, #1
   10f94:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   10f98:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   10f9c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   10f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10fa2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   10fa6:	d17b      	bne.n	110a0 <cbvprintf+0x1d4>
		conv->width_star = true;
   10fa8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   10fac:	f042 0201 	orr.w	r2, r2, #1
			++sp;
   10fb0:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   10fb2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   10fb6:	781a      	ldrb	r2, [r3, #0]
   10fb8:	2a2e      	cmp	r2, #46	; 0x2e
   10fba:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   10fbe:	bf0c      	ite	eq
   10fc0:	2101      	moveq	r1, #1
   10fc2:	2100      	movne	r1, #0
   10fc4:	f361 0241 	bfi	r2, r1, #1, #1
   10fc8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   10fcc:	d174      	bne.n	110b8 <cbvprintf+0x1ec>
	if (*sp == '*') {
   10fce:	785a      	ldrb	r2, [r3, #1]
   10fd0:	2a2a      	cmp	r2, #42	; 0x2a
   10fd2:	d06a      	beq.n	110aa <cbvprintf+0x1de>
	++sp;
   10fd4:	3301      	adds	r3, #1
	size_t val = 0;
   10fd6:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   10fd8:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   10fda:	4618      	mov	r0, r3
   10fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
   10fe0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10fe4:	2f09      	cmp	r7, #9
   10fe6:	f240 808e 	bls.w	11106 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   10fea:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   10fee:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   10ff0:	f3c2 0040 	ubfx	r0, r2, #1, #1
   10ff4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   10ff8:	f361 0241 	bfi	r2, r1, #1, #1
   10ffc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11000:	e05a      	b.n	110b8 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   11002:	f10a 0702 	add.w	r7, sl, #2
   11006:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   1100a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1100e:	07d9      	lsls	r1, r3, #31
   11010:	f140 8149 	bpl.w	112a6 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   11014:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   11018:	f1b9 0f00 	cmp.w	r9, #0
   1101c:	da07      	bge.n	1102e <cbvprintf+0x162>
				conv->flag_dash = true;
   1101e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11022:	f042 0204 	orr.w	r2, r2, #4
   11026:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   1102a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   1102e:	075a      	lsls	r2, r3, #29
   11030:	f140 8142 	bpl.w	112b8 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   11034:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   11038:	f1b8 0f00 	cmp.w	r8, #0
   1103c:	f280 8141 	bge.w	112c2 <cbvprintf+0x3f6>
				conv->prec_present = false;
   11040:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11044:	f36f 0341 	bfc	r3, #1, #1
   11048:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   1104c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   11050:	e137      	b.n	112c2 <cbvprintf+0x3f6>
		switch (*sp) {
   11052:	2b2d      	cmp	r3, #45	; 0x2d
   11054:	d00c      	beq.n	11070 <cbvprintf+0x1a4>
   11056:	2b30      	cmp	r3, #48	; 0x30
   11058:	f47f af6d 	bne.w	10f36 <cbvprintf+0x6a>
			conv->flag_zero = true;
   1105c:	2201      	movs	r2, #1
	} while (loop);
   1105e:	e75c      	b.n	10f1a <cbvprintf+0x4e>
			conv->flag_plus = true;
   11060:	f04f 0c01 	mov.w	ip, #1
   11064:	e759      	b.n	10f1a <cbvprintf+0x4e>
			conv->flag_space = true;
   11066:	f04f 0e01 	mov.w	lr, #1
   1106a:	e756      	b.n	10f1a <cbvprintf+0x4e>
			conv->flag_hash = true;
   1106c:	2001      	movs	r0, #1
   1106e:	e754      	b.n	10f1a <cbvprintf+0x4e>
		switch (*sp) {
   11070:	2601      	movs	r6, #1
   11072:	e752      	b.n	10f1a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   11074:	fb0c 0202 	mla	r2, ip, r2, r0
   11078:	3a30      	subs	r2, #48	; 0x30
   1107a:	4633      	mov	r3, r6
   1107c:	461e      	mov	r6, r3
   1107e:	f816 0b01 	ldrb.w	r0, [r6], #1
   11082:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11086:	2f09      	cmp	r7, #9
   11088:	d9f4      	bls.n	11074 <cbvprintf+0x1a8>
	if (sp != wp) {
   1108a:	4299      	cmp	r1, r3
   1108c:	d093      	beq.n	10fb6 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   1108e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   11092:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   11094:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   11096:	f362 0141 	bfi	r1, r2, #1, #1
   1109a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1109e:	e78a      	b.n	10fb6 <cbvprintf+0xea>
   110a0:	460b      	mov	r3, r1
	size_t val = 0;
   110a2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   110a4:	f04f 0c0a 	mov.w	ip, #10
   110a8:	e7e8      	b.n	1107c <cbvprintf+0x1b0>
		conv->prec_star = true;
   110aa:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   110ae:	f042 0204 	orr.w	r2, r2, #4
   110b2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   110b6:	3302      	adds	r3, #2
	switch (*sp) {
   110b8:	461f      	mov	r7, r3
   110ba:	f817 2b01 	ldrb.w	r2, [r7], #1
   110be:	2a6c      	cmp	r2, #108	; 0x6c
   110c0:	d041      	beq.n	11146 <cbvprintf+0x27a>
   110c2:	d825      	bhi.n	11110 <cbvprintf+0x244>
   110c4:	2a68      	cmp	r2, #104	; 0x68
   110c6:	d02b      	beq.n	11120 <cbvprintf+0x254>
   110c8:	2a6a      	cmp	r2, #106	; 0x6a
   110ca:	d046      	beq.n	1115a <cbvprintf+0x28e>
   110cc:	2a4c      	cmp	r2, #76	; 0x4c
   110ce:	d04c      	beq.n	1116a <cbvprintf+0x29e>
   110d0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   110d2:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   110d6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
   110da:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   110de:	2a78      	cmp	r2, #120	; 0x78
   110e0:	f200 80d9 	bhi.w	11296 <cbvprintf+0x3ca>
   110e4:	2a57      	cmp	r2, #87	; 0x57
   110e6:	d84d      	bhi.n	11184 <cbvprintf+0x2b8>
   110e8:	2a41      	cmp	r2, #65	; 0x41
   110ea:	d003      	beq.n	110f4 <cbvprintf+0x228>
   110ec:	3a45      	subs	r2, #69	; 0x45
   110ee:	2a02      	cmp	r2, #2
   110f0:	f200 80d1 	bhi.w	11296 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   110f4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   110f8:	2204      	movs	r2, #4
   110fa:	f362 0302 	bfi	r3, r2, #0, #3
   110fe:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   11102:	2301      	movs	r3, #1
			break;
   11104:	e09e      	b.n	11244 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   11106:	fb06 2101 	mla	r1, r6, r1, r2
   1110a:	3930      	subs	r1, #48	; 0x30
   1110c:	4603      	mov	r3, r0
   1110e:	e764      	b.n	10fda <cbvprintf+0x10e>
	switch (*sp) {
   11110:	2a74      	cmp	r2, #116	; 0x74
   11112:	d026      	beq.n	11162 <cbvprintf+0x296>
   11114:	2a7a      	cmp	r2, #122	; 0x7a
   11116:	d1db      	bne.n	110d0 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   11118:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1111c:	2206      	movs	r2, #6
   1111e:	e00d      	b.n	1113c <cbvprintf+0x270>
		if (*++sp == 'h') {
   11120:	785a      	ldrb	r2, [r3, #1]
   11122:	2a68      	cmp	r2, #104	; 0x68
   11124:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11128:	d106      	bne.n	11138 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   1112a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1112c:	f361 02c6 	bfi	r2, r1, #3, #4
   11130:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   11134:	1c9f      	adds	r7, r3, #2
   11136:	e7cc      	b.n	110d2 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   11138:	4613      	mov	r3, r2
   1113a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   1113c:	f362 03c6 	bfi	r3, r2, #3, #4
   11140:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   11144:	e7c5      	b.n	110d2 <cbvprintf+0x206>
		if (*++sp == 'l') {
   11146:	785a      	ldrb	r2, [r3, #1]
   11148:	2a6c      	cmp	r2, #108	; 0x6c
   1114a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1114e:	d101      	bne.n	11154 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   11150:	2104      	movs	r1, #4
   11152:	e7eb      	b.n	1112c <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   11154:	4613      	mov	r3, r2
   11156:	2203      	movs	r2, #3
   11158:	e7f0      	b.n	1113c <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   1115a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1115e:	2205      	movs	r2, #5
   11160:	e7ec      	b.n	1113c <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   11162:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11166:	2207      	movs	r2, #7
   11168:	e7e8      	b.n	1113c <cbvprintf+0x270>
		conv->unsupported = true;
   1116a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1116e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   11172:	f023 0302 	bic.w	r3, r3, #2
   11176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1117a:	f043 0302 	orr.w	r3, r3, #2
   1117e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   11182:	e7a6      	b.n	110d2 <cbvprintf+0x206>
	switch (conv->specifier) {
   11184:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   11188:	2920      	cmp	r1, #32
   1118a:	f200 8084 	bhi.w	11296 <cbvprintf+0x3ca>
   1118e:	a001      	add	r0, pc, #4	; (adr r0, 11194 <cbvprintf+0x2c8>)
   11190:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   11194:	00011259 	.word	0x00011259
   11198:	00011297 	.word	0x00011297
   1119c:	00011297 	.word	0x00011297
   111a0:	00011297 	.word	0x00011297
   111a4:	00011297 	.word	0x00011297
   111a8:	00011297 	.word	0x00011297
   111ac:	00011297 	.word	0x00011297
   111b0:	00011297 	.word	0x00011297
   111b4:	00011297 	.word	0x00011297
   111b8:	000110f5 	.word	0x000110f5
   111bc:	00011297 	.word	0x00011297
   111c0:	00011259 	.word	0x00011259
   111c4:	00011219 	.word	0x00011219
   111c8:	000110f5 	.word	0x000110f5
   111cc:	000110f5 	.word	0x000110f5
   111d0:	000110f5 	.word	0x000110f5
   111d4:	00011297 	.word	0x00011297
   111d8:	00011219 	.word	0x00011219
   111dc:	00011297 	.word	0x00011297
   111e0:	00011297 	.word	0x00011297
   111e4:	00011297 	.word	0x00011297
   111e8:	00011297 	.word	0x00011297
   111ec:	00011261 	.word	0x00011261
   111f0:	00011259 	.word	0x00011259
   111f4:	0001127d 	.word	0x0001127d
   111f8:	00011297 	.word	0x00011297
   111fc:	00011297 	.word	0x00011297
   11200:	0001127d 	.word	0x0001127d
   11204:	00011297 	.word	0x00011297
   11208:	00011259 	.word	0x00011259
   1120c:	00011297 	.word	0x00011297
   11210:	00011297 	.word	0x00011297
   11214:	00011259 	.word	0x00011259
		conv->specifier_cat = SPECIFIER_SINT;
   11218:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1121c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1121e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   11222:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11226:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   11228:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   1122c:	bf02      	ittt	eq
   1122e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   11232:	f041 0101 	orreq.w	r1, r1, #1
   11236:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   1123a:	2a63      	cmp	r2, #99	; 0x63
   1123c:	d131      	bne.n	112a2 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1123e:	3b00      	subs	r3, #0
   11240:	bf18      	it	ne
   11242:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   11244:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11248:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1124c:	430b      	orrs	r3, r1
   1124e:	f363 0241 	bfi	r2, r3, #1, #1
   11252:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11256:	e6d8      	b.n	1100a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   11258:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1125c:	2002      	movs	r0, #2
   1125e:	e7de      	b.n	1121e <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   11260:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   11264:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11268:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1126c:	2103      	movs	r1, #3
   1126e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11272:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   11274:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   11278:	4143      	adcs	r3, r0
   1127a:	e7e3      	b.n	11244 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   1127c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   11280:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   11282:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   11286:	f361 0202 	bfi	r2, r1, #0, #3
   1128a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1128e:	bf14      	ite	ne
   11290:	2301      	movne	r3, #1
   11292:	2300      	moveq	r3, #0
   11294:	e7d6      	b.n	11244 <cbvprintf+0x378>
		conv->invalid = true;
   11296:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1129a:	f043 0301 	orr.w	r3, r3, #1
   1129e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   112a2:	2300      	movs	r3, #0
   112a4:	e7ce      	b.n	11244 <cbvprintf+0x378>
		} else if (conv->width_present) {
   112a6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   112aa:	2a00      	cmp	r2, #0
			width = conv->width_value;
   112ac:	bfb4      	ite	lt
   112ae:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   112b2:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
   112b6:	e6ba      	b.n	1102e <cbvprintf+0x162>
		} else if (conv->prec_present) {
   112b8:	079b      	lsls	r3, r3, #30
   112ba:	f57f aec7 	bpl.w	1104c <cbvprintf+0x180>
			precision = conv->prec_value;
   112be:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   112c2:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   112c6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   112c8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   112cc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   112d0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   112d4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   112d6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   112da:	d138      	bne.n	1134e <cbvprintf+0x482>
			switch (length_mod) {
   112dc:	1ecb      	subs	r3, r1, #3
   112de:	2b04      	cmp	r3, #4
   112e0:	d822      	bhi.n	11328 <cbvprintf+0x45c>
   112e2:	e8df f003 	tbb	[pc, r3]
   112e6:	0903      	.short	0x0903
   112e8:	2109      	.short	0x2109
   112ea:	21          	.byte	0x21
   112eb:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   112ec:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   112f0:	17da      	asrs	r2, r3, #31
   112f2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   112f6:	e006      	b.n	11306 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
   112f8:	3407      	adds	r4, #7
   112fa:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   112fe:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   11302:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   11306:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1130a:	f013 0603 	ands.w	r6, r3, #3
   1130e:	d056      	beq.n	113be <cbvprintf+0x4f2>
			OUTS(sp, fp);
   11310:	9802      	ldr	r0, [sp, #8]
   11312:	463b      	mov	r3, r7
   11314:	4652      	mov	r2, sl
   11316:	4659      	mov	r1, fp
   11318:	f008 fc34 	bl	19b84 <outs>
   1131c:	2800      	cmp	r0, #0
   1131e:	f2c0 8142 	blt.w	115a6 <cbvprintf+0x6da>
   11322:	4405      	add	r5, r0
			continue;
   11324:	46ba      	mov	sl, r7
   11326:	e5d9      	b.n	10edc <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11328:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1132c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1132e:	ea4f 72e3 	mov.w	r2, r3, asr #31
   11332:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   11336:	d105      	bne.n	11344 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
   11338:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   1133c:	930a      	str	r3, [sp, #40]	; 0x28
   1133e:	2300      	movs	r3, #0
   11340:	930b      	str	r3, [sp, #44]	; 0x2c
   11342:	e7e0      	b.n	11306 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
   11344:	2902      	cmp	r1, #2
   11346:	d1de      	bne.n	11306 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
   11348:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   1134c:	e7d0      	b.n	112f0 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1134e:	2b02      	cmp	r3, #2
   11350:	d123      	bne.n	1139a <cbvprintf+0x4ce>
			switch (length_mod) {
   11352:	1ecb      	subs	r3, r1, #3
   11354:	2b04      	cmp	r3, #4
   11356:	d813      	bhi.n	11380 <cbvprintf+0x4b4>
   11358:	e8df f003 	tbb	[pc, r3]
   1135c:	120a0a03 	.word	0x120a0a03
   11360:	12          	.byte	0x12
   11361:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   11362:	6822      	ldr	r2, [r4, #0]
   11364:	920a      	str	r2, [sp, #40]	; 0x28
   11366:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   11368:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   1136a:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   1136c:	4604      	mov	r4, r0
   1136e:	e7ca      	b.n	11306 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
   11370:	1de0      	adds	r0, r4, #7
   11372:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   11376:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   1137a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   1137e:	e7f5      	b.n	1136c <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
   11380:	f854 3b04 	ldr.w	r3, [r4], #4
   11384:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   11386:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   11388:	f04f 0300 	mov.w	r3, #0
   1138c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   1138e:	d0d3      	beq.n	11338 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
   11390:	2902      	cmp	r1, #2
   11392:	d1b8      	bne.n	11306 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
   11394:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11398:	e7d0      	b.n	1133c <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
   1139a:	2b04      	cmp	r3, #4
   1139c:	d109      	bne.n	113b2 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
   1139e:	1de3      	adds	r3, r4, #7
   113a0:	f023 0307 	bic.w	r3, r3, #7
   113a4:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   113a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   113ac:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   113b0:	e7a9      	b.n	11306 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   113b2:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   113b4:	bf04      	itt	eq
   113b6:	f854 3b04 	ldreq.w	r3, [r4], #4
   113ba:	930a      	streq	r3, [sp, #40]	; 0x28
   113bc:	e7a3      	b.n	11306 <cbvprintf+0x43a>
		switch (conv->specifier) {
   113be:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   113c2:	2878      	cmp	r0, #120	; 0x78
   113c4:	d8ae      	bhi.n	11324 <cbvprintf+0x458>
   113c6:	2862      	cmp	r0, #98	; 0x62
   113c8:	d822      	bhi.n	11410 <cbvprintf+0x544>
   113ca:	2825      	cmp	r0, #37	; 0x25
   113cc:	f43f ad8f 	beq.w	10eee <cbvprintf+0x22>
   113d0:	2858      	cmp	r0, #88	; 0x58
   113d2:	d1a7      	bne.n	11324 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
   113d4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   113d8:	9300      	str	r3, [sp, #0]
   113da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   113de:	ab04      	add	r3, sp, #16
   113e0:	aa0c      	add	r2, sp, #48	; 0x30
   113e2:	f008 fb89 	bl	19af8 <encode_uint>
   113e6:	4682      	mov	sl, r0
			if (precision >= 0) {
   113e8:	f1b8 0f00 	cmp.w	r8, #0
   113ec:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   113f0:	db0c      	blt.n	1140c <cbvprintf+0x540>
				conv->flag_zero = false;
   113f2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   113f6:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   113fa:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   113fe:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   11400:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   11404:	d902      	bls.n	1140c <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
   11406:	eba8 0303 	sub.w	r3, r8, r3
   1140a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   1140c:	4680      	mov	r8, r0
   1140e:	e03d      	b.n	1148c <cbvprintf+0x5c0>
		switch (conv->specifier) {
   11410:	3863      	subs	r0, #99	; 0x63
   11412:	2815      	cmp	r0, #21
   11414:	d886      	bhi.n	11324 <cbvprintf+0x458>
   11416:	a201      	add	r2, pc, #4	; (adr r2, 1141c <cbvprintf+0x550>)
   11418:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1141c:	0001149d 	.word	0x0001149d
   11420:	00011501 	.word	0x00011501
   11424:	00011325 	.word	0x00011325
   11428:	00011325 	.word	0x00011325
   1142c:	00011325 	.word	0x00011325
   11430:	00011325 	.word	0x00011325
   11434:	00011501 	.word	0x00011501
   11438:	00011325 	.word	0x00011325
   1143c:	00011325 	.word	0x00011325
   11440:	00011325 	.word	0x00011325
   11444:	00011325 	.word	0x00011325
   11448:	0001155b 	.word	0x0001155b
   1144c:	00011529 	.word	0x00011529
   11450:	0001152d 	.word	0x0001152d
   11454:	00011325 	.word	0x00011325
   11458:	00011325 	.word	0x00011325
   1145c:	00011475 	.word	0x00011475
   11460:	00011325 	.word	0x00011325
   11464:	00011529 	.word	0x00011529
   11468:	00011325 	.word	0x00011325
   1146c:	00011325 	.word	0x00011325
   11470:	00011529 	.word	0x00011529
			if (precision >= 0) {
   11474:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   11478:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   1147c:	db0a      	blt.n	11494 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
   1147e:	4641      	mov	r1, r8
   11480:	4650      	mov	r0, sl
   11482:	f008 fd79 	bl	19f78 <strnlen>
			bpe = bps + len;
   11486:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   1148a:	2600      	movs	r6, #0
		if (bps == NULL) {
   1148c:	f1ba 0f00 	cmp.w	sl, #0
   11490:	d10c      	bne.n	114ac <cbvprintf+0x5e0>
   11492:	e747      	b.n	11324 <cbvprintf+0x458>
				len = strlen(bps);
   11494:	4650      	mov	r0, sl
   11496:	f008 fd68 	bl	19f6a <strlen>
   1149a:	e7f4      	b.n	11486 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1149c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1149e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   114a2:	2600      	movs	r6, #0
			bps = buf;
   114a4:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
   114a8:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
   114ac:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   114b0:	b106      	cbz	r6, 114b4 <cbvprintf+0x5e8>
			nj_len += 1U;
   114b2:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   114b4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   114b8:	06d0      	lsls	r0, r2, #27
   114ba:	d568      	bpl.n	1158e <cbvprintf+0x6c2>
			nj_len += 2U;
   114bc:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   114be:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   114c0:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   114c2:	bf48      	it	mi
   114c4:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   114c6:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   114c8:	bf48      	it	mi
   114ca:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   114cc:	f1b9 0f00 	cmp.w	r9, #0
   114d0:	dd76      	ble.n	115c0 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
   114d2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   114d6:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   114da:	f3c2 0380 	ubfx	r3, r2, #2, #1
   114de:	9303      	str	r3, [sp, #12]
   114e0:	0753      	lsls	r3, r2, #29
   114e2:	d46d      	bmi.n	115c0 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
   114e4:	0650      	lsls	r0, r2, #25
   114e6:	d561      	bpl.n	115ac <cbvprintf+0x6e0>
					if (sign != 0) {
   114e8:	b146      	cbz	r6, 114fc <cbvprintf+0x630>
						OUTC(sign);
   114ea:	9b02      	ldr	r3, [sp, #8]
   114ec:	4659      	mov	r1, fp
   114ee:	4630      	mov	r0, r6
   114f0:	4798      	blx	r3
   114f2:	2800      	cmp	r0, #0
   114f4:	db57      	blt.n	115a6 <cbvprintf+0x6da>
						sign = 0;
   114f6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   114f8:	3501      	adds	r5, #1
						sign = 0;
   114fa:	461e      	mov	r6, r3
					pad = '0';
   114fc:	2330      	movs	r3, #48	; 0x30
   114fe:	e056      	b.n	115ae <cbvprintf+0x6e2>
			if (conv->flag_plus) {
   11500:	071e      	lsls	r6, r3, #28
   11502:	d40f      	bmi.n	11524 <cbvprintf+0x658>
				sign = ' ';
   11504:	f013 0610 	ands.w	r6, r3, #16
   11508:	bf18      	it	ne
   1150a:	2620      	movne	r6, #32
			sint = value->sint;
   1150c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   11510:	2b00      	cmp	r3, #0
   11512:	f6bf af5f 	bge.w	113d4 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
   11516:	4252      	negs	r2, r2
   11518:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1151c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   11520:	262d      	movs	r6, #45	; 0x2d
   11522:	e757      	b.n	113d4 <cbvprintf+0x508>
				sign = '+';
   11524:	262b      	movs	r6, #43	; 0x2b
   11526:	e7f1      	b.n	1150c <cbvprintf+0x640>
		switch (conv->specifier) {
   11528:	2600      	movs	r6, #0
   1152a:	e753      	b.n	113d4 <cbvprintf+0x508>
			if (value->ptr != NULL) {
   1152c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1152e:	b340      	cbz	r0, 11582 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11530:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   11534:	9300      	str	r3, [sp, #0]
   11536:	aa0c      	add	r2, sp, #48	; 0x30
   11538:	ab04      	add	r3, sp, #16
   1153a:	2100      	movs	r1, #0
   1153c:	f008 fadc 	bl	19af8 <encode_uint>
				conv->altform_0c = true;
   11540:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   11544:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11548:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1154c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11550:	4682      	mov	sl, r0
				conv->altform_0c = true;
   11552:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   11556:	2600      	movs	r6, #0
				goto prec_int_pad0;
   11558:	e746      	b.n	113e8 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
   1155a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   1155c:	2907      	cmp	r1, #7
   1155e:	f63f aee1 	bhi.w	11324 <cbvprintf+0x458>
   11562:	e8df f001 	tbb	[pc, r1]
   11566:	040c      	.short	0x040c
   11568:	08080c06 	.word	0x08080c06
   1156c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   1156e:	701d      	strb	r5, [r3, #0]
		break;
   11570:	e6d8      	b.n	11324 <cbvprintf+0x458>
		*(short *)dp = (short)count;
   11572:	801d      	strh	r5, [r3, #0]
		break;
   11574:	e6d6      	b.n	11324 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
   11576:	17ea      	asrs	r2, r5, #31
   11578:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   1157c:	e6d2      	b.n	11324 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1157e:	601d      	str	r5, [r3, #0]
		break;
   11580:	e6d0      	b.n	11324 <cbvprintf+0x458>
			bps = "(nil)";
   11582:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1164c <cbvprintf+0x780>
   11586:	4606      	mov	r6, r0
			bpe = bps + 5;
   11588:	f10a 0805 	add.w	r8, sl, #5
   1158c:	e78e      	b.n	114ac <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
   1158e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   11590:	bf48      	it	mi
   11592:	3301      	addmi	r3, #1
   11594:	e793      	b.n	114be <cbvprintf+0x5f2>
					OUTC(pad);
   11596:	4618      	mov	r0, r3
   11598:	9303      	str	r3, [sp, #12]
   1159a:	4659      	mov	r1, fp
   1159c:	9b02      	ldr	r3, [sp, #8]
   1159e:	4798      	blx	r3
   115a0:	2800      	cmp	r0, #0
   115a2:	9b03      	ldr	r3, [sp, #12]
   115a4:	da04      	bge.n	115b0 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
   115a6:	b011      	add	sp, #68	; 0x44
   115a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   115ac:	2320      	movs	r3, #32
   115ae:	444d      	add	r5, r9
   115b0:	464a      	mov	r2, r9
				while (width-- > 0) {
   115b2:	2a00      	cmp	r2, #0
   115b4:	eba5 0109 	sub.w	r1, r5, r9
   115b8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   115bc:	dceb      	bgt.n	11596 <cbvprintf+0x6ca>
   115be:	460d      	mov	r5, r1
		if (sign != 0) {
   115c0:	b136      	cbz	r6, 115d0 <cbvprintf+0x704>
			OUTC(sign);
   115c2:	9b02      	ldr	r3, [sp, #8]
   115c4:	4659      	mov	r1, fp
   115c6:	4630      	mov	r0, r6
   115c8:	4798      	blx	r3
   115ca:	2800      	cmp	r0, #0
   115cc:	dbeb      	blt.n	115a6 <cbvprintf+0x6da>
   115ce:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   115d0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   115d4:	06d9      	lsls	r1, r3, #27
   115d6:	d401      	bmi.n	115dc <cbvprintf+0x710>
   115d8:	071a      	lsls	r2, r3, #28
   115da:	d506      	bpl.n	115ea <cbvprintf+0x71e>
				OUTC('0');
   115dc:	9b02      	ldr	r3, [sp, #8]
   115de:	4659      	mov	r1, fp
   115e0:	2030      	movs	r0, #48	; 0x30
   115e2:	4798      	blx	r3
   115e4:	2800      	cmp	r0, #0
   115e6:	dbde      	blt.n	115a6 <cbvprintf+0x6da>
   115e8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   115ea:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   115ee:	06db      	lsls	r3, r3, #27
   115f0:	d507      	bpl.n	11602 <cbvprintf+0x736>
				OUTC(conv->specifier);
   115f2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   115f6:	9b02      	ldr	r3, [sp, #8]
   115f8:	4659      	mov	r1, fp
   115fa:	4798      	blx	r3
   115fc:	2800      	cmp	r0, #0
   115fe:	dbd2      	blt.n	115a6 <cbvprintf+0x6da>
   11600:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11602:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   11604:	442e      	add	r6, r5
   11606:	1b73      	subs	r3, r6, r5
   11608:	2b00      	cmp	r3, #0
   1160a:	dc16      	bgt.n	1163a <cbvprintf+0x76e>
			OUTS(bps, bpe);
   1160c:	9802      	ldr	r0, [sp, #8]
   1160e:	4643      	mov	r3, r8
   11610:	4652      	mov	r2, sl
   11612:	4659      	mov	r1, fp
   11614:	f008 fab6 	bl	19b84 <outs>
   11618:	2800      	cmp	r0, #0
   1161a:	dbc4      	blt.n	115a6 <cbvprintf+0x6da>
   1161c:	4405      	add	r5, r0
		while (width > 0) {
   1161e:	44a9      	add	r9, r5
   11620:	eba9 0305 	sub.w	r3, r9, r5
   11624:	2b00      	cmp	r3, #0
   11626:	f77f ae7d 	ble.w	11324 <cbvprintf+0x458>
			OUTC(' ');
   1162a:	9b02      	ldr	r3, [sp, #8]
   1162c:	4659      	mov	r1, fp
   1162e:	2020      	movs	r0, #32
   11630:	4798      	blx	r3
   11632:	2800      	cmp	r0, #0
   11634:	dbb7      	blt.n	115a6 <cbvprintf+0x6da>
   11636:	3501      	adds	r5, #1
			--width;
   11638:	e7f2      	b.n	11620 <cbvprintf+0x754>
				OUTC('0');
   1163a:	9b02      	ldr	r3, [sp, #8]
   1163c:	4659      	mov	r1, fp
   1163e:	2030      	movs	r0, #48	; 0x30
   11640:	4798      	blx	r3
   11642:	2800      	cmp	r0, #0
   11644:	dbaf      	blt.n	115a6 <cbvprintf+0x6da>
   11646:	3501      	adds	r5, #1
   11648:	e7dd      	b.n	11606 <cbvprintf+0x73a>
   1164a:	bf00      	nop
   1164c:	0001db62 	.word	0x0001db62

00011650 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   11650:	4b0c      	ldr	r3, [pc, #48]	; (11684 <class_handler+0x34>)
{
   11652:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   11654:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11656:	4e0c      	ldr	r6, [pc, #48]	; (11688 <class_handler+0x38>)
   11658:	4b0c      	ldr	r3, [pc, #48]	; (1168c <class_handler+0x3c>)
   1165a:	42b3      	cmp	r3, r6
   1165c:	d303      	bcc.n	11666 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
   1165e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11662:	bcf0      	pop	{r4, r5, r6, r7}
   11664:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
   11666:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   11668:	42bd      	cmp	r5, r7
   1166a:	d309      	bcc.n	11680 <class_handler+0x30>
		if (iface->class_handler &&
   1166c:	691c      	ldr	r4, [r3, #16]
   1166e:	b13c      	cbz	r4, 11680 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   11670:	f895 c002 	ldrb.w	ip, [r5, #2]
   11674:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   11676:	45ac      	cmp	ip, r5
   11678:	d102      	bne.n	11680 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
   1167a:	4623      	mov	r3, r4
}
   1167c:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
   1167e:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11680:	3324      	adds	r3, #36	; 0x24
   11682:	e7ea      	b.n	1165a <class_handler+0xa>
   11684:	20000a00 	.word	0x20000a00
   11688:	2000069c 	.word	0x2000069c
   1168c:	20000678 	.word	0x20000678

00011690 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   11690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11694:	4c13      	ldr	r4, [pc, #76]	; (116e4 <custom_handler+0x54>)
   11696:	f8df 8050 	ldr.w	r8, [pc, #80]	; 116e8 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   1169a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 116ec <custom_handler+0x5c>
{
   1169e:	4605      	mov	r5, r0
   116a0:	460e      	mov	r6, r1
   116a2:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   116a4:	4544      	cmp	r4, r8
   116a6:	d303      	bcc.n	116b0 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
   116a8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   116ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
   116b0:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   116b2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   116b6:	429a      	cmp	r2, r3
   116b8:	d312      	bcc.n	116e0 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
   116ba:	69a3      	ldr	r3, [r4, #24]
   116bc:	b183      	cbz	r3, 116e0 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   116be:	7890      	ldrb	r0, [r2, #2]
   116c0:	7929      	ldrb	r1, [r5, #4]
   116c2:	4288      	cmp	r0, r1
   116c4:	d105      	bne.n	116d2 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
   116c6:	463a      	mov	r2, r7
   116c8:	4631      	mov	r1, r6
   116ca:	4628      	mov	r0, r5
}
   116cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
   116d0:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   116d2:	7952      	ldrb	r2, [r2, #5]
   116d4:	2a01      	cmp	r2, #1
   116d6:	d103      	bne.n	116e0 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
   116d8:	463a      	mov	r2, r7
   116da:	4631      	mov	r1, r6
   116dc:	4628      	mov	r0, r5
   116de:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   116e0:	3424      	adds	r4, #36	; 0x24
   116e2:	e7df      	b.n	116a4 <custom_handler+0x14>
   116e4:	20000678 	.word	0x20000678
   116e8:	2000069c 	.word	0x2000069c
   116ec:	20000a00 	.word	0x20000a00

000116f0 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   116f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   116f4:	4c0b      	ldr	r4, [pc, #44]	; (11724 <vendor_handler+0x34>)
   116f6:	f8df 8030 	ldr.w	r8, [pc, #48]	; 11728 <vendor_handler+0x38>
{
   116fa:	4605      	mov	r5, r0
   116fc:	460e      	mov	r6, r1
   116fe:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11700:	4544      	cmp	r4, r8
   11702:	d302      	bcc.n	1170a <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   11704:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11708:	e009      	b.n	1171e <vendor_handler+0x2e>
		if (iface->vendor_handler) {
   1170a:	6963      	ldr	r3, [r4, #20]
   1170c:	b90b      	cbnz	r3, 11712 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   1170e:	3424      	adds	r4, #36	; 0x24
   11710:	e7f6      	b.n	11700 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
   11712:	463a      	mov	r2, r7
   11714:	4631      	mov	r1, r6
   11716:	4628      	mov	r0, r5
   11718:	4798      	blx	r3
   1171a:	2800      	cmp	r0, #0
   1171c:	d1f7      	bne.n	1170e <vendor_handler+0x1e>
}
   1171e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11722:	bf00      	nop
   11724:	20000678 	.word	0x20000678
   11728:	2000069c 	.word	0x2000069c

0001172c <set_endpoint>:
{
   1172c:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   1172e:	7883      	ldrb	r3, [r0, #2]
   11730:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   11734:	7903      	ldrb	r3, [r0, #4]
   11736:	7942      	ldrb	r2, [r0, #5]
   11738:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1173c:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   11740:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
   11742:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   11744:	f003 0303 	and.w	r3, r3, #3
   11748:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
   1174c:	f002 f8ce 	bl	138ec <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   11750:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11754:	d004      	beq.n	11760 <set_endpoint+0x34>
	} else if (ret) {
   11756:	b118      	cbz	r0, 11760 <set_endpoint+0x34>
		return false;
   11758:	2000      	movs	r0, #0
}
   1175a:	b003      	add	sp, #12
   1175c:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   11760:	f89d 0000 	ldrb.w	r0, [sp]
   11764:	f002 f948 	bl	139f8 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   11768:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1176c:	d001      	beq.n	11772 <set_endpoint+0x46>
	} else if (ret) {
   1176e:	2800      	cmp	r0, #0
   11770:	d1f2      	bne.n	11758 <set_endpoint+0x2c>
	usb_dev.configured = true;
   11772:	4b02      	ldr	r3, [pc, #8]	; (1177c <set_endpoint+0x50>)
   11774:	2001      	movs	r0, #1
   11776:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
   1177a:	e7ee      	b.n	1175a <set_endpoint+0x2e>
   1177c:	20000a00 	.word	0x20000a00

00011780 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   11780:	4802      	ldr	r0, [pc, #8]	; (1178c <usb_reset_alt_setting+0xc>)
   11782:	2208      	movs	r2, #8
   11784:	2100      	movs	r1, #0
   11786:	f008 bc17 	b.w	19fb8 <memset>
   1178a:	bf00      	nop
   1178c:	20000abb 	.word	0x20000abb

00011790 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
   11790:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11792:	4b0b      	ldr	r3, [pc, #44]	; (117c0 <is_ep_valid.part.0+0x30>)
   11794:	4c0b      	ldr	r4, [pc, #44]	; (117c4 <is_ep_valid.part.0+0x34>)
   11796:	42a3      	cmp	r3, r4
   11798:	d301      	bcc.n	1179e <is_ep_valid.part.0+0xe>
	return false;
   1179a:	2000      	movs	r0, #0
}
   1179c:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
   1179e:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   117a0:	7f1e      	ldrb	r6, [r3, #28]
   117a2:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
   117a4:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   117a6:	b2d5      	uxtb	r5, r2
   117a8:	42ae      	cmp	r6, r5
   117aa:	d801      	bhi.n	117b0 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   117ac:	3324      	adds	r3, #36	; 0x24
   117ae:	e7f2      	b.n	11796 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
   117b0:	3201      	adds	r2, #1
   117b2:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
   117b6:	4285      	cmp	r5, r0
   117b8:	d1f5      	bne.n	117a6 <is_ep_valid.part.0+0x16>
				return true;
   117ba:	2001      	movs	r0, #1
   117bc:	e7ee      	b.n	1179c <is_ep_valid.part.0+0xc>
   117be:	bf00      	nop
   117c0:	20000678 	.word	0x20000678
   117c4:	2000069c 	.word	0x2000069c

000117c8 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
   117c8:	4809      	ldr	r0, [pc, #36]	; (117f0 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
   117ca:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
   117cc:	7803      	ldrb	r3, [r0, #0]
   117ce:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   117d2:	330a      	adds	r3, #10
   117d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
   117d8:	b13b      	cbz	r3, 117ea <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
   117da:	f100 0208 	add.w	r2, r0, #8
   117de:	f100 0110 	add.w	r1, r0, #16
   117e2:	4798      	blx	r3
   117e4:	43c0      	mvns	r0, r0
   117e6:	0fc0      	lsrs	r0, r0, #31
}
   117e8:	bd08      	pop	{r3, pc}
		return false;
   117ea:	4618      	mov	r0, r3
   117ec:	e7fc      	b.n	117e8 <usb_handle_request.constprop.0+0x20>
   117ee:	bf00      	nop
   117f0:	20000a00 	.word	0x20000a00

000117f4 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
   117f4:	2804      	cmp	r0, #4
{
   117f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   117fa:	f8df 8088 	ldr.w	r8, [pc, #136]	; 11884 <forward_status_cb+0x90>
   117fe:	4604      	mov	r4, r0
   11800:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
   11802:	d10e      	bne.n	11822 <forward_status_cb+0x2e>
		usb_reset_alt_setting();
   11804:	f7ff ffbc 	bl	11780 <usb_reset_alt_setting>
		if (usb_dev.configured) {
   11808:	f8df 907c 	ldr.w	r9, [pc, #124]	; 11888 <forward_status_cb+0x94>
   1180c:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
   11810:	b15b      	cbz	r3, 1182a <forward_status_cb+0x36>
			usb_cancel_transfers();
   11812:	f000 fdb3 	bl	1237c <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   11816:	2c04      	cmp	r4, #4
   11818:	d001      	beq.n	1181e <forward_status_cb+0x2a>
   1181a:	2c01      	cmp	r4, #1
   1181c:	d105      	bne.n	1182a <forward_status_cb+0x36>
   1181e:	4d1b      	ldr	r5, [pc, #108]	; (1188c <forward_status_cb+0x98>)
   11820:	e016      	b.n	11850 <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
   11822:	2805      	cmp	r0, #5
   11824:	d0f0      	beq.n	11808 <forward_status_cb+0x14>
   11826:	2801      	cmp	r0, #1
   11828:	d0ee      	beq.n	11808 <forward_status_cb+0x14>
   1182a:	4d18      	ldr	r5, [pc, #96]	; (1188c <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   1182c:	4545      	cmp	r5, r8
   1182e:	d31e      	bcc.n	1186e <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
   11830:	4b15      	ldr	r3, [pc, #84]	; (11888 <forward_status_cb+0x94>)
   11832:	6a1b      	ldr	r3, [r3, #32]
   11834:	b31b      	cbz	r3, 1187e <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
   11836:	4631      	mov	r1, r6
   11838:	4620      	mov	r0, r4
}
   1183a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
   1183e:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
   11840:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   11844:	2700      	movs	r7, #0
   11846:	7f2a      	ldrb	r2, [r5, #28]
   11848:	b2fb      	uxtb	r3, r7
   1184a:	429a      	cmp	r2, r3
   1184c:	d803      	bhi.n	11856 <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   1184e:	3524      	adds	r5, #36	; 0x24
   11850:	4545      	cmp	r5, r8
   11852:	d3f5      	bcc.n	11840 <forward_status_cb+0x4c>
   11854:	e007      	b.n	11866 <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
   11856:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
   1185a:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
   1185c:	7918      	ldrb	r0, [r3, #4]
   1185e:	f002 f8f5 	bl	13a4c <usb_dc_ep_disable>
			if (ret < 0) {
   11862:	2800      	cmp	r0, #0
   11864:	daef      	bge.n	11846 <forward_status_cb+0x52>
				usb_dev.configured = false;
   11866:	2300      	movs	r3, #0
   11868:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
   1186c:	e7dd      	b.n	1182a <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
   1186e:	68eb      	ldr	r3, [r5, #12]
   11870:	b11b      	cbz	r3, 1187a <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
   11872:	4632      	mov	r2, r6
   11874:	4621      	mov	r1, r4
   11876:	4628      	mov	r0, r5
   11878:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   1187a:	3524      	adds	r5, #36	; 0x24
   1187c:	e7d6      	b.n	1182c <forward_status_cb+0x38>
}
   1187e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11882:	bf00      	nop
   11884:	2000069c 	.word	0x2000069c
   11888:	20000a00 	.word	0x20000a00
   1188c:	20000678 	.word	0x20000678

00011890 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   11890:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
   11892:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
   11894:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   11896:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   11898:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
   1189c:	d007      	beq.n	118ae <usb_halt_endpoint_req.isra.0+0x1e>
   1189e:	4620      	mov	r0, r4
   118a0:	f7ff ff76 	bl	11790 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   118a4:	b188      	cbz	r0, 118ca <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
   118a6:	4b0f      	ldr	r3, [pc, #60]	; (118e4 <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   118a8:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
   118ac:	b168      	cbz	r0, 118ca <usb_halt_endpoint_req.isra.0+0x3a>
		if (halt) {
   118ae:	4e0d      	ldr	r6, [pc, #52]	; (118e4 <usb_halt_endpoint_req.isra.0+0x54>)
			usb_dc_ep_set_stall(ep);
   118b0:	4620      	mov	r0, r4
		if (halt) {
   118b2:	b165      	cbz	r5, 118ce <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
   118b4:	f002 f83c 	bl	13930 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   118b8:	69f3      	ldr	r3, [r6, #28]
   118ba:	b90b      	cbnz	r3, 118c0 <usb_halt_endpoint_req.isra.0+0x30>
		return true;
   118bc:	2001      	movs	r0, #1
   118be:	e004      	b.n	118ca <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   118c0:	2008      	movs	r0, #8
   118c2:	f10d 0107 	add.w	r1, sp, #7
   118c6:	4798      	blx	r3
		return true;
   118c8:	4628      	mov	r0, r5
}
   118ca:	b002      	add	sp, #8
   118cc:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
   118ce:	f002 f857 	bl	13980 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   118d2:	69f3      	ldr	r3, [r6, #28]
   118d4:	2b00      	cmp	r3, #0
   118d6:	d0f1      	beq.n	118bc <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   118d8:	f10d 0107 	add.w	r1, sp, #7
   118dc:	2009      	movs	r0, #9
   118de:	4798      	blx	r3
   118e0:	e7ec      	b.n	118bc <usb_halt_endpoint_req.isra.0+0x2c>
   118e2:	bf00      	nop
   118e4:	20000a00 	.word	0x20000a00

000118e8 <usb_handle_standard_request>:
{
   118e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
   118ec:	4ea8      	ldr	r6, [pc, #672]	; (11b90 <usb_handle_standard_request+0x2a8>)
   118ee:	69b3      	ldr	r3, [r6, #24]
{
   118f0:	4605      	mov	r5, r0
   118f2:	460f      	mov	r7, r1
   118f4:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
   118f6:	b963      	cbnz	r3, 11912 <usb_handle_standard_request+0x2a>
	switch (setup->RequestType.recipient) {
   118f8:	7828      	ldrb	r0, [r5, #0]
   118fa:	f000 001f 	and.w	r0, r0, #31
   118fe:	2801      	cmp	r0, #1
   11900:	f000 80a6 	beq.w	11a50 <usb_handle_standard_request+0x168>
   11904:	2802      	cmp	r0, #2
   11906:	f000 810e 	beq.w	11b26 <usb_handle_standard_request+0x23e>
   1190a:	b138      	cbz	r0, 1191c <usb_handle_standard_request+0x34>
		switch (setup->bRequest) {
   1190c:	f06f 0015 	mvn.w	r0, #21
   11910:	e095      	b.n	11a3e <usb_handle_standard_request+0x156>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   11912:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   11914:	2800      	cmp	r0, #0
   11916:	d1ef      	bne.n	118f8 <usb_handle_standard_request+0x10>
	int rc = 0;
   11918:	2000      	movs	r0, #0
   1191a:	e090      	b.n	11a3e <usb_handle_standard_request+0x156>
	if (usb_reqtype_is_to_host(setup)) {
   1191c:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
   11920:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   11922:	2a00      	cmp	r2, #0
   11924:	da31      	bge.n	1198a <usb_handle_standard_request+0xa2>
		switch (setup->bRequest) {
   11926:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
   11928:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
   1192c:	d010      	beq.n	11950 <usb_handle_standard_request+0x68>
   1192e:	2b08      	cmp	r3, #8
   11930:	d025      	beq.n	1197e <usb_handle_standard_request+0x96>
   11932:	2b00      	cmp	r3, #0
   11934:	d1ea      	bne.n	1190c <usb_handle_standard_request+0x24>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   11936:	2101      	movs	r1, #1
	data[1] = 0U;
   11938:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   1193a:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
   1193c:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
   11940:	2900      	cmp	r1, #0
   11942:	bf18      	it	ne
   11944:	2302      	movne	r3, #2
   11946:	f043 0301 	orr.w	r3, r3, #1
   1194a:	7013      	strb	r3, [r2, #0]
		*len = 2;
   1194c:	2302      	movs	r3, #2
   1194e:	e01a      	b.n	11986 <usb_handle_standard_request+0x9e>
			return usb_get_descriptor(setup, len, data_buf);
   11950:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   11952:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   11954:	1f11      	subs	r1, r2, #4
   11956:	2901      	cmp	r1, #1
   11958:	d9d8      	bls.n	1190c <usb_handle_standard_request+0x24>
   1195a:	2a07      	cmp	r2, #7
   1195c:	d8d6      	bhi.n	1190c <usb_handle_standard_request+0x24>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
   1195e:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
   11960:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
   11962:	781c      	ldrb	r4, [r3, #0]
   11964:	2c00      	cmp	r4, #0
   11966:	d0d1      	beq.n	1190c <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == type) {
   11968:	785d      	ldrb	r5, [r3, #1]
   1196a:	4295      	cmp	r5, r2
   1196c:	d103      	bne.n	11976 <usb_handle_standard_request+0x8e>
			if (cur_index == index) {
   1196e:	4281      	cmp	r1, r0
   11970:	f000 8112 	beq.w	11b98 <usb_handle_standard_request+0x2b0>
			cur_index++;
   11974:	3001      	adds	r0, #1
		p += p[DESC_bLength];
   11976:	4423      	add	r3, r4
   11978:	e7f3      	b.n	11962 <usb_handle_standard_request+0x7a>
			*len = p[DESC_bLength];
   1197a:	781b      	ldrb	r3, [r3, #0]
   1197c:	e112      	b.n	11ba4 <usb_handle_standard_request+0x2bc>
			data[0] = usb_dev.configuration;
   1197e:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   11982:	7013      	strb	r3, [r2, #0]
			*len = 1;
   11984:	2301      	movs	r3, #1
		*len = 2;
   11986:	603b      	str	r3, [r7, #0]
		return true;
   11988:	e059      	b.n	11a3e <usb_handle_standard_request+0x156>
		switch (setup->bRequest) {
   1198a:	3b01      	subs	r3, #1
   1198c:	2b08      	cmp	r3, #8
   1198e:	d8bd      	bhi.n	1190c <usb_handle_standard_request+0x24>
   11990:	a201      	add	r2, pc, #4	; (adr r2, 11998 <usb_handle_standard_request+0xb0>)
   11992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11996:	bf00      	nop
   11998:	00011a31 	.word	0x00011a31
   1199c:	0001190d 	.word	0x0001190d
   119a0:	00011a43 	.word	0x00011a43
   119a4:	0001190d 	.word	0x0001190d
   119a8:	000119bd 	.word	0x000119bd
   119ac:	0001190d 	.word	0x0001190d
   119b0:	0001190d 	.word	0x0001190d
   119b4:	0001190d 	.word	0x0001190d
   119b8:	000119c9 	.word	0x000119c9
			return !usb_dc_set_address(setup->wValue);
   119bc:	78a8      	ldrb	r0, [r5, #2]
   119be:	f001 ff83 	bl	138c8 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   119c2:	2800      	cmp	r0, #0
   119c4:	d0a8      	beq.n	11918 <usb_handle_standard_request+0x30>
   119c6:	e7a1      	b.n	1190c <usb_handle_standard_request+0x24>
	if (setup->wValue == 0U) {
   119c8:	886c      	ldrh	r4, [r5, #2]
   119ca:	b144      	cbz	r4, 119de <usb_handle_standard_request+0xf6>
	uint8_t cur_config = 0xFF;
   119cc:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   119d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
	bool found = false;
   119d2:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
   119d4:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
   119d6:	783c      	ldrb	r4, [r7, #0]
   119d8:	b96c      	cbnz	r4, 119f6 <usb_handle_standard_request+0x10e>
	if (found) {
   119da:	2800      	cmp	r0, #0
   119dc:	d096      	beq.n	1190c <usb_handle_standard_request+0x24>
		usb_reset_alt_setting();
   119de:	f7ff fecf 	bl	11780 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   119e2:	886b      	ldrh	r3, [r5, #2]
   119e4:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
   119e8:	69f3      	ldr	r3, [r6, #28]
   119ea:	2b00      	cmp	r3, #0
   119ec:	d094      	beq.n	11918 <usb_handle_standard_request+0x30>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   119ee:	4969      	ldr	r1, [pc, #420]	; (11b94 <usb_handle_standard_request+0x2ac>)
   119f0:	2003      	movs	r0, #3
   119f2:	4798      	blx	r3
   119f4:	e790      	b.n	11918 <usb_handle_standard_request+0x30>
		switch (p[DESC_bDescriptorType]) {
   119f6:	787b      	ldrb	r3, [r7, #1]
   119f8:	2b04      	cmp	r3, #4
   119fa:	d00c      	beq.n	11a16 <usb_handle_standard_request+0x12e>
   119fc:	2b05      	cmp	r3, #5
   119fe:	d00d      	beq.n	11a1c <usb_handle_standard_request+0x134>
   11a00:	2b02      	cmp	r3, #2
   11a02:	d105      	bne.n	11a10 <usb_handle_standard_request+0x128>
			cur_config = p[CONF_DESC_bConfigurationValue];
   11a04:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
   11a08:	886a      	ldrh	r2, [r5, #2]
				found = true;
   11a0a:	4542      	cmp	r2, r8
   11a0c:	bf08      	it	eq
   11a0e:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
   11a10:	783b      	ldrb	r3, [r7, #0]
   11a12:	441f      	add	r7, r3
   11a14:	e7df      	b.n	119d6 <usb_handle_standard_request+0xee>
			cur_alt_setting =
   11a16:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
   11a1a:	e7f9      	b.n	11a10 <usb_handle_standard_request+0x128>
			if ((cur_config != setup->wValue) ||
   11a1c:	886b      	ldrh	r3, [r5, #2]
   11a1e:	4543      	cmp	r3, r8
   11a20:	d1f6      	bne.n	11a10 <usb_handle_standard_request+0x128>
   11a22:	f1b9 0f00 	cmp.w	r9, #0
   11a26:	d1f3      	bne.n	11a10 <usb_handle_standard_request+0x128>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   11a28:	4638      	mov	r0, r7
   11a2a:	f7ff fe7f 	bl	1172c <set_endpoint>
			break;
   11a2e:	e7ef      	b.n	11a10 <usb_handle_standard_request+0x128>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   11a30:	886b      	ldrh	r3, [r5, #2]
   11a32:	2b01      	cmp	r3, #1
   11a34:	f47f af6a 	bne.w	1190c <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = false;
   11a38:	2000      	movs	r0, #0
   11a3a:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
   11a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   11a42:	886b      	ldrh	r3, [r5, #2]
   11a44:	2b01      	cmp	r3, #1
   11a46:	f47f af61 	bne.w	1190c <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = true;
   11a4a:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
   11a4e:	e763      	b.n	11918 <usb_handle_standard_request+0x30>
	if (!is_device_configured() ||
   11a50:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   11a54:	2b00      	cmp	r3, #0
   11a56:	f43f af59 	beq.w	1190c <usb_handle_standard_request+0x24>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   11a5a:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   11a5c:	f8b5 c004 	ldrh.w	ip, [r5, #4]
   11a60:	7928      	ldrb	r0, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   11a62:	4623      	mov	r3, r4
	while (p[DESC_bLength] != 0U) {
   11a64:	781a      	ldrb	r2, [r3, #0]
   11a66:	2a00      	cmp	r2, #0
   11a68:	f43f af50 	beq.w	1190c <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   11a6c:	7859      	ldrb	r1, [r3, #1]
   11a6e:	2902      	cmp	r1, #2
   11a70:	d104      	bne.n	11a7c <usb_handle_standard_request+0x194>
			if (interface < cfg_descr->bNumInterfaces) {
   11a72:	f893 e004 	ldrb.w	lr, [r3, #4]
   11a76:	4586      	cmp	lr, r0
   11a78:	f200 8096 	bhi.w	11ba8 <usb_handle_standard_request+0x2c0>
		p += p[DESC_bLength];
   11a7c:	4413      	add	r3, r2
   11a7e:	e7f1      	b.n	11a64 <usb_handle_standard_request+0x17c>
			data[0] = 0U;
   11a80:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
   11a82:	7050      	strb	r0, [r2, #1]
			*len = 2;
   11a84:	6039      	str	r1, [r7, #0]
			return true;
   11a86:	e7da      	b.n	11a3e <usb_handle_standard_request+0x156>
		p += p[DESC_bLength];
   11a88:	440c      	add	r4, r1
   11a8a:	e09b      	b.n	11bc4 <usb_handle_standard_request+0x2dc>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   11a8c:	280b      	cmp	r0, #11
   11a8e:	f47f af3d 	bne.w	1190c <usb_handle_standard_request+0x24>
	bool ret = false;
   11a92:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
   11a94:	f04f 0aff 	mov.w	sl, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   11a98:	46d0      	mov	r8, sl
	const uint8_t *if_desc = NULL;
   11a9a:	46b9      	mov	r9, r7
   11a9c:	e006      	b.n	11aac <usb_handle_standard_request+0x1c4>
		switch (p[DESC_bDescriptorType]) {
   11a9e:	7863      	ldrb	r3, [r4, #1]
   11aa0:	2b04      	cmp	r3, #4
   11aa2:	d00f      	beq.n	11ac4 <usb_handle_standard_request+0x1dc>
   11aa4:	2b05      	cmp	r3, #5
   11aa6:	d022      	beq.n	11aee <usb_handle_standard_request+0x206>
		p += p[DESC_bLength];
   11aa8:	7823      	ldrb	r3, [r4, #0]
   11aaa:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
   11aac:	7823      	ldrb	r3, [r4, #0]
   11aae:	2b00      	cmp	r3, #0
   11ab0:	d1f5      	bne.n	11a9e <usb_handle_standard_request+0x1b6>
	if (usb_dev.status_callback) {
   11ab2:	69f3      	ldr	r3, [r6, #28]
   11ab4:	b113      	cbz	r3, 11abc <usb_handle_standard_request+0x1d4>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   11ab6:	4649      	mov	r1, r9
   11ab8:	2007      	movs	r0, #7
   11aba:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   11abc:	2f00      	cmp	r7, #0
   11abe:	f47f af2b 	bne.w	11918 <usb_handle_standard_request+0x30>
   11ac2:	e723      	b.n	1190c <usb_handle_standard_request+0x24>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   11ac4:	f894 a002 	ldrb.w	sl, [r4, #2]
			if (cur_iface == setup->wIndex &&
   11ac8:	88aa      	ldrh	r2, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   11aca:	f894 8003 	ldrb.w	r8, [r4, #3]
			if (cur_iface == setup->wIndex &&
   11ace:	4592      	cmp	sl, r2
   11ad0:	4653      	mov	r3, sl
   11ad2:	d1e9      	bne.n	11aa8 <usb_handle_standard_request+0x1c0>
			    cur_alt_setting == setup->wValue) {
   11ad4:	8869      	ldrh	r1, [r5, #2]
			if (cur_iface == setup->wIndex &&
   11ad6:	4588      	cmp	r8, r1
   11ad8:	fa1f f288 	uxth.w	r2, r8
   11adc:	d1e4      	bne.n	11aa8 <usb_handle_standard_request+0x1c0>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   11ade:	2b07      	cmp	r3, #7
   11ae0:	d81e      	bhi.n	11b20 <usb_handle_standard_request+0x238>
		usb_dev.alt_setting[iface] = alt_setting;
   11ae2:	4433      	add	r3, r6
		return true;
   11ae4:	46a1      	mov	r9, r4
				ret = usb_set_alt_setting(setup->wIndex,
   11ae6:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
   11aea:	2701      	movs	r7, #1
   11aec:	e7dc      	b.n	11aa8 <usb_handle_standard_request+0x1c0>
			if (cur_iface == setup->wIndex) {
   11aee:	88ab      	ldrh	r3, [r5, #4]
   11af0:	4553      	cmp	r3, sl
   11af2:	d1d9      	bne.n	11aa8 <usb_handle_standard_request+0x1c0>
	if (cur_alt_setting != alt_setting) {
   11af4:	78ab      	ldrb	r3, [r5, #2]
   11af6:	4543      	cmp	r3, r8
   11af8:	d00d      	beq.n	11b16 <usb_handle_standard_request+0x22e>
		ret = reset_endpoint(ep_desc);
   11afa:	78a7      	ldrb	r7, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   11afc:	4638      	mov	r0, r7
   11afe:	f000 fc1f 	bl	12340 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
   11b02:	4638      	mov	r0, r7
   11b04:	f001 ffa2 	bl	13a4c <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   11b08:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11b0c:	d0ed      	beq.n	11aea <usb_handle_standard_request+0x202>
	} else if (ret) {
   11b0e:	fab0 f780 	clz	r7, r0
   11b12:	097f      	lsrs	r7, r7, #5
   11b14:	e7c8      	b.n	11aa8 <usb_handle_standard_request+0x1c0>
		ret = set_endpoint(ep_desc);
   11b16:	4620      	mov	r0, r4
   11b18:	f7ff fe08 	bl	1172c <set_endpoint>
   11b1c:	4607      	mov	r7, r0
   11b1e:	e7c3      	b.n	11aa8 <usb_handle_standard_request+0x1c0>
   11b20:	46a1      	mov	r9, r4
	return false;
   11b22:	2700      	movs	r7, #0
   11b24:	e7c0      	b.n	11aa8 <usb_handle_standard_request+0x1c0>
	if (usb_reqtype_is_to_host(setup)) {
   11b26:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
   11b2a:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   11b2c:	2a00      	cmp	r2, #0
   11b2e:	da19      	bge.n	11b64 <usb_handle_standard_request+0x27c>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   11b30:	2b00      	cmp	r3, #0
   11b32:	f47f aeeb 	bne.w	1190c <usb_handle_standard_request+0x24>
	uint8_t ep = setup->wIndex;
   11b36:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
   11b38:	0663      	lsls	r3, r4, #25
   11b3a:	d00a      	beq.n	11b52 <usb_handle_standard_request+0x26a>
   11b3c:	4620      	mov	r0, r4
   11b3e:	f7ff fe27 	bl	11790 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   11b42:	2800      	cmp	r0, #0
   11b44:	f43f aee2 	beq.w	1190c <usb_handle_standard_request+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   11b48:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   11b4c:	2b00      	cmp	r3, #0
   11b4e:	f43f aedd 	beq.w	1190c <usb_handle_standard_request+0x24>
   11b52:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
   11b56:	4620      	mov	r0, r4
   11b58:	4629      	mov	r1, r5
   11b5a:	f001 ff31 	bl	139c0 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   11b5e:	2000      	movs	r0, #0
   11b60:	7068      	strb	r0, [r5, #1]
   11b62:	e6f3      	b.n	1194c <usb_handle_standard_request+0x64>
		switch (setup->bRequest) {
   11b64:	2b01      	cmp	r3, #1
   11b66:	d008      	beq.n	11b7a <usb_handle_standard_request+0x292>
   11b68:	2b03      	cmp	r3, #3
   11b6a:	f47f aecf 	bne.w	1190c <usb_handle_standard_request+0x24>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   11b6e:	886b      	ldrh	r3, [r5, #2]
   11b70:	2b00      	cmp	r3, #0
   11b72:	f47f aecb 	bne.w	1190c <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
   11b76:	2101      	movs	r1, #1
   11b78:	e003      	b.n	11b82 <usb_handle_standard_request+0x29a>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   11b7a:	8869      	ldrh	r1, [r5, #2]
   11b7c:	2900      	cmp	r1, #0
   11b7e:	f47f aec5 	bne.w	1190c <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
   11b82:	88a8      	ldrh	r0, [r5, #4]
   11b84:	f7ff fe84 	bl	11890 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   11b88:	2800      	cmp	r0, #0
   11b8a:	f47f aec5 	bne.w	11918 <usb_handle_standard_request+0x30>
   11b8e:	e6bd      	b.n	1190c <usb_handle_standard_request+0x24>
   11b90:	20000a00 	.word	0x20000a00
   11b94:	20000aba 	.word	0x20000aba
		if (type == USB_DESC_CONFIGURATION) {
   11b98:	2a02      	cmp	r2, #2
		*data = p;
   11b9a:	f8c8 3000 	str.w	r3, [r8]
		if (type == USB_DESC_CONFIGURATION) {
   11b9e:	f47f aeec 	bne.w	1197a <usb_handle_standard_request+0x92>
			*len = (p[CONF_DESC_wTotalLength]) |
   11ba2:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
   11ba4:	603b      	str	r3, [r7, #0]
   11ba6:	e6b7      	b.n	11918 <usb_handle_standard_request+0x30>
	if (usb_reqtype_is_to_host(setup)) {
   11ba8:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
   11bac:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   11bae:	2b00      	cmp	r3, #0
   11bb0:	f6bf af6c 	bge.w	11a8c <usb_handle_standard_request+0x1a4>
   11bb4:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
   11bb8:	2800      	cmp	r0, #0
   11bba:	f43f af61 	beq.w	11a80 <usb_handle_standard_request+0x198>
   11bbe:	280a      	cmp	r0, #10
   11bc0:	f47f aea4 	bne.w	1190c <usb_handle_standard_request+0x24>
	while (p[DESC_bLength] != 0U) {
   11bc4:	7821      	ldrb	r1, [r4, #0]
   11bc6:	2900      	cmp	r1, #0
   11bc8:	f43f aea0 	beq.w	1190c <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   11bcc:	7863      	ldrb	r3, [r4, #1]
   11bce:	2b04      	cmp	r3, #4
   11bd0:	f47f af5a 	bne.w	11a88 <usb_handle_standard_request+0x1a0>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   11bd4:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
   11bd6:	459c      	cmp	ip, r3
   11bd8:	f47f af56 	bne.w	11a88 <usb_handle_standard_request+0x1a0>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   11bdc:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
   11bde:	bf96      	itet	ls
   11be0:	199b      	addls	r3, r3, r6
	return 0;
   11be2:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
   11be4:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
   11be8:	7013      	strb	r3, [r2, #0]
				*len = 1;
   11bea:	2301      	movs	r3, #1
   11bec:	e7da      	b.n	11ba4 <usb_handle_standard_request+0x2bc>
   11bee:	bf00      	nop

00011bf0 <usb_data_to_host>:
{
   11bf0:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
   11bf2:	4c13      	ldr	r4, [pc, #76]	; (11c40 <usb_data_to_host+0x50>)
   11bf4:	7d23      	ldrb	r3, [r4, #20]
   11bf6:	b9cb      	cbnz	r3, 11c2c <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
   11bf8:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   11bfa:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
   11bfc:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   11bfe:	ab01      	add	r3, sp, #4
   11c00:	2080      	movs	r0, #128	; 0x80
   11c02:	f008 f87b 	bl	19cfc <usb_write>
		usb_dev.data_buf += chunk;
   11c06:	9a01      	ldr	r2, [sp, #4]
   11c08:	68a3      	ldr	r3, [r4, #8]
   11c0a:	4413      	add	r3, r2
   11c0c:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   11c0e:	68e3      	ldr	r3, [r4, #12]
   11c10:	1a9b      	subs	r3, r3, r2
   11c12:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   11c14:	b943      	cbnz	r3, 11c28 <usb_data_to_host+0x38>
   11c16:	b13a      	cbz	r2, 11c28 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   11c18:	6923      	ldr	r3, [r4, #16]
   11c1a:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
   11c1c:	429a      	cmp	r2, r3
   11c1e:	dd03      	ble.n	11c28 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   11c20:	069b      	lsls	r3, r3, #26
   11c22:	d101      	bne.n	11c28 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
   11c24:	2301      	movs	r3, #1
   11c26:	7523      	strb	r3, [r4, #20]
}
   11c28:	b002      	add	sp, #8
   11c2a:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
   11c2c:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   11c2e:	461a      	mov	r2, r3
   11c30:	4619      	mov	r1, r3
   11c32:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
   11c34:	7523      	strb	r3, [r4, #20]
}
   11c36:	b002      	add	sp, #8
   11c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   11c3c:	f001 bf2c 	b.w	13a98 <usb_dc_ep_write>
   11c40:	20000a00 	.word	0x20000a00

00011c44 <usb_handle_control_transfer>:
{
   11c44:	b530      	push	{r4, r5, lr}
   11c46:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
   11c48:	2300      	movs	r3, #0
{
   11c4a:	4602      	mov	r2, r0
   11c4c:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
   11c4e:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   11c50:	2800      	cmp	r0, #0
   11c52:	d15f      	bne.n	11d14 <usb_handle_control_transfer+0xd0>
   11c54:	2900      	cmp	r1, #0
   11c56:	d13c      	bne.n	11cd2 <usb_handle_control_transfer+0x8e>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   11c58:	2208      	movs	r2, #8
   11c5a:	460b      	mov	r3, r1
   11c5c:	eb0d 0102 	add.w	r1, sp, r2
   11c60:	f008 f9f7 	bl	1a052 <usb_dc_ep_read>
   11c64:	2800      	cmp	r0, #0
   11c66:	da04      	bge.n	11c72 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   11c68:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   11c6a:	f001 fe61 	bl	13930 <usb_dc_ep_set_stall>
}
   11c6e:	b005      	add	sp, #20
   11c70:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
   11c72:	4c2d      	ldr	r4, [pc, #180]	; (11d28 <usb_handle_control_transfer+0xe4>)
		setup->bRequest = setup_raw.bRequest;
   11c74:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
   11c78:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
   11c7c:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
   11c7e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   11c82:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   11c84:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
   11c88:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   11c8a:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
   11c8c:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   11c90:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11c94:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
   11c96:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
   11c98:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
   11c9c:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
   11c9e:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
   11ca0:	d40a      	bmi.n	11cb8 <usb_handle_control_transfer+0x74>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   11ca2:	2b80      	cmp	r3, #128	; 0x80
   11ca4:	d904      	bls.n	11cb0 <usb_handle_control_transfer+0x6c>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   11ca6:	2080      	movs	r0, #128	; 0x80
   11ca8:	f001 fe42 	bl	13930 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   11cac:	2000      	movs	r0, #0
   11cae:	e7dc      	b.n	11c6a <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
   11cb0:	b113      	cbz	r3, 11cb8 <usb_handle_control_transfer+0x74>
				usb_dev.data_buf_residue = setup->wLength;
   11cb2:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
   11cb6:	e7da      	b.n	11c6e <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
   11cb8:	f7ff fd86 	bl	117c8 <usb_handle_request.constprop.0>
   11cbc:	2800      	cmp	r0, #0
   11cbe:	d0d3      	beq.n	11c68 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   11cc0:	88e2      	ldrh	r2, [r4, #6]
   11cc2:	6923      	ldr	r3, [r4, #16]
   11cc4:	429a      	cmp	r2, r3
   11cc6:	bfd4      	ite	le
   11cc8:	60e2      	strle	r2, [r4, #12]
   11cca:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
   11ccc:	f7ff ff90 	bl	11bf0 <usb_data_to_host>
   11cd0:	e7cd      	b.n	11c6e <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
   11cd2:	4c15      	ldr	r4, [pc, #84]	; (11d28 <usb_handle_control_transfer+0xe4>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   11cd4:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
   11cd8:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   11cda:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
   11cdc:	dc04      	bgt.n	11ce8 <usb_handle_control_transfer+0xa4>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   11cde:	f008 f9b8 	bl	1a052 <usb_dc_ep_read>
   11ce2:	2800      	cmp	r0, #0
   11ce4:	dac3      	bge.n	11c6e <usb_handle_control_transfer+0x2a>
   11ce6:	e7bf      	b.n	11c68 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   11ce8:	462a      	mov	r2, r5
   11cea:	f008 f9b2 	bl	1a052 <usb_dc_ep_read>
   11cee:	2800      	cmp	r0, #0
   11cf0:	dbd9      	blt.n	11ca6 <usb_handle_control_transfer+0x62>
		usb_dev.data_buf += chunk;
   11cf2:	9901      	ldr	r1, [sp, #4]
   11cf4:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   11cf6:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
   11cf8:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
   11cfa:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
   11cfc:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   11cfe:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
   11d00:	2b00      	cmp	r3, #0
   11d02:	d1b4      	bne.n	11c6e <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
   11d04:	f104 0338 	add.w	r3, r4, #56	; 0x38
   11d08:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
   11d0a:	f7ff fd5d 	bl	117c8 <usb_handle_request.constprop.0>
   11d0e:	2800      	cmp	r0, #0
   11d10:	d1dc      	bne.n	11ccc <usb_handle_control_transfer+0x88>
   11d12:	e7a9      	b.n	11c68 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
   11d14:	2880      	cmp	r0, #128	; 0x80
   11d16:	d1aa      	bne.n	11c6e <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   11d18:	4b03      	ldr	r3, [pc, #12]	; (11d28 <usb_handle_control_transfer+0xe4>)
   11d1a:	68da      	ldr	r2, [r3, #12]
   11d1c:	2a00      	cmp	r2, #0
   11d1e:	d1d5      	bne.n	11ccc <usb_handle_control_transfer+0x88>
   11d20:	7d1b      	ldrb	r3, [r3, #20]
   11d22:	2b00      	cmp	r3, #0
   11d24:	d1d2      	bne.n	11ccc <usb_handle_control_transfer+0x88>
   11d26:	e7a2      	b.n	11c6e <usb_handle_control_transfer+0x2a>
   11d28:	20000a00 	.word	0x20000a00

00011d2c <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
   11d2c:	4b05      	ldr	r3, [pc, #20]	; (11d44 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
   11d2e:	4a06      	ldr	r2, [pc, #24]	; (11d48 <usb_set_config+0x1c>)
   11d30:	629a      	str	r2, [r3, #40]	; 0x28
   11d32:	4a06      	ldr	r2, [pc, #24]	; (11d4c <usb_set_config+0x20>)
   11d34:	62da      	str	r2, [r3, #44]	; 0x2c
   11d36:	4a06      	ldr	r2, [pc, #24]	; (11d50 <usb_set_config+0x24>)
   11d38:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
   11d3a:	4a06      	ldr	r2, [pc, #24]	; (11d54 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
   11d3c:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
   11d3e:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
   11d40:	2000      	movs	r0, #0
   11d42:	4770      	bx	lr
   11d44:	20000a00 	.word	0x20000a00
   11d48:	000118e9 	.word	0x000118e9
   11d4c:	00011651 	.word	0x00011651
   11d50:	000116f1 	.word	0x000116f1
   11d54:	00011691 	.word	0x00011691

00011d58 <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   11d58:	4b08      	ldr	r3, [pc, #32]	; (11d7c <usb_device_init+0x24>)
{
   11d5a:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
   11d5c:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   11d60:	b934      	cbnz	r4, 11d70 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   11d62:	f000 f9a3 	bl	120ac <usb_get_device_descriptor>
	if (!device_descriptor) {
   11d66:	b130      	cbz	r0, 11d76 <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   11d68:	f7ff ffe0 	bl	11d2c <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
   11d6c:	4620      	mov	r0, r4
}
   11d6e:	bd10      	pop	{r4, pc}
		return -EALREADY;
   11d70:	f06f 0077 	mvn.w	r0, #119	; 0x77
   11d74:	e7fb      	b.n	11d6e <usb_device_init+0x16>
		return -1;
   11d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11d7a:	e7f8      	b.n	11d6e <usb_device_init+0x16>
   11d7c:	20000a00 	.word	0x20000a00

00011d80 <usb_enable>:
{
   11d80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11d84:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
   11d86:	4d35      	ldr	r5, [pc, #212]	; (11e5c <usb_enable+0xdc>)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   11d88:	4835      	ldr	r0, [pc, #212]	; (11e60 <usb_enable+0xe0>)
   11d8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d92:	f006 fb63 	bl	1845c <z_impl_k_mutex_lock>
   11d96:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
   11d9a:	2e00      	cmp	r6, #0
   11d9c:	d15b      	bne.n	11e56 <usb_enable+0xd6>
	usb_dev.status_callback = cb;
   11d9e:	4831      	ldr	r0, [pc, #196]	; (11e64 <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
   11da0:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
   11da2:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
   11da4:	f001 ff8e 	bl	13cc4 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
   11da8:	f001 fd50 	bl	1384c <usb_dc_attach>
	if (ret < 0) {
   11dac:	1e04      	subs	r4, r0, #0
   11dae:	db36      	blt.n	11e1e <usb_enable+0x9e>
	ret = usb_transfer_init();
   11db0:	f000 fb0c 	bl	123cc <usb_transfer_init>
	if (ret < 0) {
   11db4:	1e04      	subs	r4, r0, #0
   11db6:	db32      	blt.n	11e1e <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   11db8:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
   11dba:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   11dbc:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   11dc0:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   11dc4:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   11dc8:	f001 fd90 	bl	138ec <usb_dc_ep_configure>
	if (ret < 0) {
   11dcc:	1e04      	subs	r4, r0, #0
   11dce:	db26      	blt.n	11e1e <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   11dd0:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
   11dd2:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   11dd4:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   11dd8:	f001 fd88 	bl	138ec <usb_dc_ep_configure>
	if (ret < 0) {
   11ddc:	1e04      	subs	r4, r0, #0
   11dde:	db1e      	blt.n	11e1e <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   11de0:	4921      	ldr	r1, [pc, #132]	; (11e68 <usb_enable+0xe8>)
   11de2:	4630      	mov	r0, r6
   11de4:	f001 ff5a 	bl	13c9c <usb_dc_ep_set_callback>
	if (ret < 0) {
   11de8:	1e04      	subs	r4, r0, #0
   11dea:	db18      	blt.n	11e1e <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   11dec:	491e      	ldr	r1, [pc, #120]	; (11e68 <usb_enable+0xe8>)
   11dee:	4638      	mov	r0, r7
   11df0:	f001 ff54 	bl	13c9c <usb_dc_ep_set_callback>
	if (ret < 0) {
   11df4:	1e04      	subs	r4, r0, #0
   11df6:	db12      	blt.n	11e1e <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11df8:	4c1c      	ldr	r4, [pc, #112]	; (11e6c <usb_enable+0xec>)
   11dfa:	f8df 8074 	ldr.w	r8, [pc, #116]	; 11e70 <usb_enable+0xf0>
   11dfe:	4544      	cmp	r4, r8
   11e00:	d314      	bcc.n	11e2c <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   11e02:	2000      	movs	r0, #0
   11e04:	f001 fdf8 	bl	139f8 <usb_dc_ep_enable>
	if (ret < 0) {
   11e08:	1e04      	subs	r4, r0, #0
   11e0a:	db08      	blt.n	11e1e <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   11e0c:	2080      	movs	r0, #128	; 0x80
   11e0e:	f001 fdf3 	bl	139f8 <usb_dc_ep_enable>
	if (ret < 0) {
   11e12:	1e04      	subs	r4, r0, #0
   11e14:	db03      	blt.n	11e1e <usb_enable+0x9e>
	usb_dev.enabled = true;
   11e16:	2301      	movs	r3, #1
   11e18:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
   11e1c:	2400      	movs	r4, #0
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   11e1e:	4810      	ldr	r0, [pc, #64]	; (11e60 <usb_enable+0xe0>)
   11e20:	f006 fb94 	bl	1854c <z_impl_k_mutex_unlock>
}
   11e24:	4620      	mov	r0, r4
   11e26:	b002      	add	sp, #8
   11e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
   11e2c:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   11e2e:	2600      	movs	r6, #0
   11e30:	7f22      	ldrb	r2, [r4, #28]
   11e32:	b2f3      	uxtb	r3, r6
   11e34:	429a      	cmp	r2, r3
   11e36:	d801      	bhi.n	11e3c <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11e38:	3424      	adds	r4, #36	; 0x24
   11e3a:	e7e0      	b.n	11dfe <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   11e3c:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   11e40:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   11e44:	7910      	ldrb	r0, [r2, #4]
   11e46:	f001 ff29 	bl	13c9c <usb_dc_ep_set_callback>
   11e4a:	3601      	adds	r6, #1
   11e4c:	2800      	cmp	r0, #0
   11e4e:	d0ef      	beq.n	11e30 <usb_enable+0xb0>
   11e50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11e54:	e7e3      	b.n	11e1e <usb_enable+0x9e>
		ret = -EALREADY;
   11e56:	f06f 0477 	mvn.w	r4, #119	; 0x77
   11e5a:	e7e0      	b.n	11e1e <usb_enable+0x9e>
   11e5c:	20000a00 	.word	0x20000a00
   11e60:	200005ac 	.word	0x200005ac
   11e64:	000117f5 	.word	0x000117f5
   11e68:	00011c45 	.word	0x00011c45
   11e6c:	20000678 	.word	0x20000678
   11e70:	2000069c 	.word	0x2000069c

00011e74 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   11e74:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   11e76:	4b1f      	ldr	r3, [pc, #124]	; (11ef4 <usb_update_sn_string_descriptor+0x80>)
{
   11e78:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
   11e7a:	aa05      	add	r2, sp, #20
   11e7c:	f103 0510 	add.w	r5, r3, #16
   11e80:	6818      	ldr	r0, [r3, #0]
   11e82:	6859      	ldr	r1, [r3, #4]
   11e84:	4614      	mov	r4, r2
   11e86:	c403      	stmia	r4!, {r0, r1}
   11e88:	3308      	adds	r3, #8
   11e8a:	42ab      	cmp	r3, r5
   11e8c:	4622      	mov	r2, r4
   11e8e:	d1f7      	bne.n	11e80 <usb_update_sn_string_descriptor+0xc>
   11e90:	781b      	ldrb	r3, [r3, #0]
   11e92:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   11e94:	2210      	movs	r2, #16
   11e96:	2100      	movs	r1, #0
   11e98:	a801      	add	r0, sp, #4
   11e9a:	f008 f88d 	bl	19fb8 <memset>
	memset(sn, 0, sizeof(sn));
   11e9e:	2212      	movs	r2, #18
   11ea0:	2100      	movs	r1, #0
   11ea2:	4815      	ldr	r0, [pc, #84]	; (11ef8 <usb_update_sn_string_descriptor+0x84>)
   11ea4:	f008 f888 	bl	19fb8 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   11ea8:	2110      	movs	r1, #16
   11eaa:	a801      	add	r0, sp, #4
   11eac:	f008 fd1b 	bl	1a8e6 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   11eb0:	2800      	cmp	r0, #0
   11eb2:	dd1b      	ble.n	11eec <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   11eb4:	2808      	cmp	r0, #8
   11eb6:	bfb8      	it	lt
   11eb8:	2008      	movlt	r0, #8
   11eba:	3808      	subs	r0, #8
   11ebc:	ab01      	add	r3, sp, #4
   11ebe:	4a0e      	ldr	r2, [pc, #56]	; (11ef8 <usb_update_sn_string_descriptor+0x84>)
   11ec0:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   11ec2:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   11ec4:	f810 3b01 	ldrb.w	r3, [r0], #1
   11ec8:	ac0a      	add	r4, sp, #40	; 0x28
   11eca:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   11ece:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   11ed2:	f814 4c14 	ldrb.w	r4, [r4, #-20]
   11ed6:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   11ed8:	ac0a      	add	r4, sp, #40	; 0x28
   11eda:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
   11edc:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   11ede:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   11ee2:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
   11ee4:	2908      	cmp	r1, #8
   11ee6:	f102 0202 	add.w	r2, r2, #2
   11eea:	d1eb      	bne.n	11ec4 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
   11eec:	4802      	ldr	r0, [pc, #8]	; (11ef8 <usb_update_sn_string_descriptor+0x84>)
   11eee:	b00b      	add	sp, #44	; 0x2c
   11ef0:	bd30      	pop	{r4, r5, pc}
   11ef2:	bf00      	nop
   11ef4:	0001db68 	.word	0x0001db68
   11ef8:	200019c8 	.word	0x200019c8

00011efc <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
   11efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f00:	4604      	mov	r4, r0
   11f02:	b085      	sub	sp, #20
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
   11f04:	2500      	movs	r5, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
   11f06:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
   11f0a:	46a9      	mov	r9, r5
	struct usb_cfg_data *cfg_data = NULL;
   11f0c:	462e      	mov	r6, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
   11f0e:	46aa      	mov	sl, r5

	while (head->bLength != 0U) {
   11f10:	7820      	ldrb	r0, [r4, #0]
   11f12:	b920      	cbnz	r0, 11f1e <usb_fix_descriptor+0x22>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
   11f14:	4b61      	ldr	r3, [pc, #388]	; (1209c <usb_fix_descriptor+0x1a0>)
   11f16:	3402      	adds	r4, #2
   11f18:	429c      	cmp	r4, r3
   11f1a:	d01f      	beq.n	11f5c <usb_fix_descriptor+0x60>
   11f1c:	e7f2      	b.n	11f04 <usb_fix_descriptor+0x8>
		switch (head->bDescriptorType) {
   11f1e:	7863      	ldrb	r3, [r4, #1]
   11f20:	2b05      	cmp	r3, #5
   11f22:	d805      	bhi.n	11f30 <usb_fix_descriptor+0x34>
   11f24:	e8df f003 	tbb	[pc, r3]
   11f28:	78030478 	.word	0x78030478
   11f2c:	2007      	.short	0x2007
   11f2e:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   11f30:	7823      	ldrb	r3, [r4, #0]
   11f32:	441c      	add	r4, r3
   11f34:	e7ec      	b.n	11f10 <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
   11f36:	78e3      	ldrb	r3, [r4, #3]
   11f38:	2b00      	cmp	r3, #0
   11f3a:	d1f9      	bne.n	11f30 <usb_fix_descriptor+0x34>
			if (if_descr->bInterfaceNumber == 0U) {
   11f3c:	78a3      	ldrb	r3, [r4, #2]
   11f3e:	b183      	cbz	r3, 11f62 <usb_fix_descriptor+0x66>
			numof_ifaces++;
   11f40:	f109 0901 	add.w	r9, r9, #1
   11f44:	fa5f f989 	uxtb.w	r9, r9
			break;
   11f48:	e7f2      	b.n	11f30 <usb_fix_descriptor+0x34>
		if (cfg_data->interface_descriptor == iface) {
   11f4a:	6872      	ldr	r2, [r6, #4]
   11f4c:	4294      	cmp	r4, r2
   11f4e:	f000 809d 	beq.w	1208c <usb_fix_descriptor+0x190>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11f52:	3624      	adds	r6, #36	; 0x24
   11f54:	429e      	cmp	r6, r3
   11f56:	d3f8      	bcc.n	11f4a <usb_fix_descriptor+0x4e>
					return -1;
   11f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
   11f5c:	b005      	add	sp, #20
   11f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11f62:	4e4f      	ldr	r6, [pc, #316]	; (120a0 <usb_fix_descriptor+0x1a4>)
   11f64:	4b4f      	ldr	r3, [pc, #316]	; (120a4 <usb_fix_descriptor+0x1a8>)
   11f66:	e7f5      	b.n	11f54 <usb_fix_descriptor+0x58>
			if (!cfg_data) {
   11f68:	2e00      	cmp	r6, #0
   11f6a:	d0f5      	beq.n	11f58 <usb_fix_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   11f6c:	2300      	movs	r3, #0
   11f6e:	2101      	movs	r1, #1
   11f70:	7f32      	ldrb	r2, [r6, #28]
   11f72:	4293      	cmp	r3, r2
   11f74:	d2f0      	bcs.n	11f58 <usb_fix_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   11f76:	6a32      	ldr	r2, [r6, #32]
   11f78:	78a7      	ldrb	r7, [r4, #2]
   11f7a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   11f7e:	7910      	ldrb	r0, [r2, #4]
   11f80:	4287      	cmp	r7, r0
   11f82:	d001      	beq.n	11f88 <usb_fix_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   11f84:	3301      	adds	r3, #1
   11f86:	e7f3      	b.n	11f70 <usb_fix_descriptor+0x74>
   11f88:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   11f8a:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   11f8c:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   11f90:	f000 0003 	and.w	r0, r0, #3
   11f94:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   11f98:	7920      	ldrb	r0, [r4, #4]
   11f9a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   11f9e:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   11fa2:	f994 0002 	ldrsb.w	r0, [r4, #2]
   11fa6:	2800      	cmp	r0, #0
   11fa8:	fa5f f887 	uxtb.w	r8, r7
   11fac:	da28      	bge.n	12000 <usb_fix_descriptor+0x104>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   11fae:	f107 0010 	add.w	r0, r7, #16
   11fb2:	fa01 f000 	lsl.w	r0, r1, r0
   11fb6:	ea10 0f0b 	tst.w	r0, fp
   11fba:	d129      	bne.n	12010 <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   11fbc:	f068 007f 	orn	r0, r8, #127	; 0x7f
   11fc0:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   11fc4:	a802      	add	r0, sp, #8
   11fc6:	e9cd 3200 	strd	r3, r2, [sp]
   11fca:	f008 f82a 	bl	1a022 <usb_dc_ep_check_cap>
   11fce:	e9dd 3200 	ldrd	r3, r2, [sp]
   11fd2:	2101      	movs	r1, #1
   11fd4:	b9e0      	cbnz	r0, 12010 <usb_fix_descriptor+0x114>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   11fd6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   11fda:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   11fdc:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
   11fe0:	bf1c      	itt	ne
   11fe2:	f108 0810 	addne.w	r8, r8, #16
   11fe6:	fa5f f888 	uxtbne.w	r8, r8
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   11fea:	7113      	strb	r3, [r2, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   11fec:	460b      	mov	r3, r1
					*requested_ep |= (1U << (idx + 16U));
   11fee:	bf15      	itete	ne
   11ff0:	fa01 f808 	lslne.w	r8, r1, r8
					*requested_ep |= (1U << idx);
   11ff4:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
   11ff6:	ea4b 0b08 	orrne.w	fp, fp, r8
					*requested_ep |= (1U << idx);
   11ffa:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
   11ffe:	e797      	b.n	11f30 <usb_fix_descriptor+0x34>
				if ((*requested_ep & (1U << (idx)))) {
   12000:	fa01 f007 	lsl.w	r0, r1, r7
   12004:	ea10 0f0b 	tst.w	r0, fp
   12008:	d102      	bne.n	12010 <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = idx;
   1200a:	f88d 8008 	strb.w	r8, [sp, #8]
   1200e:	e7d9      	b.n	11fc4 <usb_fix_descriptor+0xc8>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   12010:	3701      	adds	r7, #1
   12012:	2f10      	cmp	r7, #16
   12014:	d1b9      	bne.n	11f8a <usb_fix_descriptor+0x8e>
   12016:	e7b5      	b.n	11f84 <usb_fix_descriptor+0x88>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   12018:	2d03      	cmp	r5, #3
   1201a:	d11d      	bne.n	12058 <usb_fix_descriptor+0x15c>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   1201c:	f7ff ff2a 	bl	11e74 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   12020:	4607      	mov	r7, r0
   12022:	b168      	cbz	r0, 12040 <usb_fix_descriptor+0x144>
	runtime_sn_len = strlen(runtime_sn);
   12024:	f007 ffa1 	bl	19f6a <strlen>
	if (!runtime_sn_len) {
   12028:	4680      	mov	r8, r0
   1202a:	b148      	cbz	r0, 12040 <usb_fix_descriptor+0x144>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   1202c:	481e      	ldr	r0, [pc, #120]	; (120a8 <usb_fix_descriptor+0x1ac>)
   1202e:	f007 ff9c 	bl	19f6a <strlen>
	if (runtime_sn_len != default_sn_len) {
   12032:	4580      	cmp	r8, r0
   12034:	d104      	bne.n	12040 <usb_fix_descriptor+0x144>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   12036:	4642      	mov	r2, r8
   12038:	4639      	mov	r1, r7
   1203a:	1ca0      	adds	r0, r4, #2
   1203c:	f007 ffb1 	bl	19fa2 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   12040:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   12042:	f06f 0102 	mvn.w	r1, #2
   12046:	18e2      	adds	r2, r4, r3
   12048:	1b09      	subs	r1, r1, r4
   1204a:	eb04 0353 	add.w	r3, r4, r3, lsr #1
   1204e:	42d1      	cmn	r1, r2
   12050:	d513      	bpl.n	1207a <usb_fix_descriptor+0x17e>
			str_descr_idx += 1U;
   12052:	3501      	adds	r5, #1
   12054:	b2ed      	uxtb	r5, r5
			break;
   12056:	e76b      	b.n	11f30 <usb_fix_descriptor+0x34>
			if (str_descr_idx) {
   12058:	2d00      	cmp	r5, #0
   1205a:	d1f1      	bne.n	12040 <usb_fix_descriptor+0x144>
				if (!cfg_descr) {
   1205c:	f1ba 0f00 	cmp.w	sl, #0
   12060:	f43f af7a 	beq.w	11f58 <usb_fix_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   12064:	eba4 030a 	sub.w	r3, r4, sl
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   12068:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
   1206c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   12070:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
   12074:	f88a 9004 	strb.w	r9, [sl, #4]
   12078:	e7eb      	b.n	12052 <usb_fix_descriptor+0x156>
		buf[i] = 0U;
   1207a:	f04f 0000 	mov.w	r0, #0
   1207e:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
   12082:	f813 0901 	ldrb.w	r0, [r3], #-1
   12086:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
   1208a:	e7e0      	b.n	1204e <usb_fix_descriptor+0x152>
				if (cfg_data->interface_config) {
   1208c:	68b3      	ldr	r3, [r6, #8]
   1208e:	2b00      	cmp	r3, #0
   12090:	f43f af56 	beq.w	11f40 <usb_fix_descriptor+0x44>
					cfg_data->interface_config(head,
   12094:	4649      	mov	r1, r9
   12096:	4620      	mov	r0, r4
   12098:	4798      	blx	r3
   1209a:	e751      	b.n	11f40 <usb_fix_descriptor+0x44>
   1209c:	20000675 	.word	0x20000675
   120a0:	20000678 	.word	0x20000678
   120a4:	2000069c 	.word	0x2000069c
   120a8:	0001db68 	.word	0x0001db68

000120ac <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
   120ac:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
   120ae:	4804      	ldr	r0, [pc, #16]	; (120c0 <usb_get_device_descriptor+0x14>)
   120b0:	f7ff ff24 	bl	11efc <usb_fix_descriptor>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
   120b4:	2800      	cmp	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
   120b6:	4802      	ldr	r0, [pc, #8]	; (120c0 <usb_get_device_descriptor+0x14>)
   120b8:	bf18      	it	ne
   120ba:	2000      	movne	r0, #0
   120bc:	bd08      	pop	{r3, pc}
   120be:	bf00      	nop
   120c0:	200005d0 	.word	0x200005d0

000120c4 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
   120c4:	b510      	push	{r4, lr}
   120c6:	4b09      	ldr	r3, [pc, #36]	; (120ec <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   120c8:	2100      	movs	r1, #0
   120ca:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   120cc:	781c      	ldrb	r4, [r3, #0]
   120ce:	4284      	cmp	r4, r0
   120d0:	d104      	bne.n	120dc <usb_ep_get_transfer+0x18>
   120d2:	685c      	ldr	r4, [r3, #4]
   120d4:	b114      	cbz	r4, 120dc <usb_ep_get_transfer+0x18>
			return &ut_data[i];
   120d6:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
   120da:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   120dc:	3101      	adds	r1, #1
   120de:	2904      	cmp	r1, #4
   120e0:	f103 0340 	add.w	r3, r3, #64	; 0x40
   120e4:	d1f2      	bne.n	120cc <usb_ep_get_transfer+0x8>
	return NULL;
   120e6:	2000      	movs	r0, #0
   120e8:	e7f7      	b.n	120da <usb_ep_get_transfer+0x16>
   120ea:	bf00      	nop
   120ec:	20000ac4 	.word	0x20000ac4

000120f0 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   120f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   120f4:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
   120f8:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
   120fc:	3310      	adds	r3, #16
{
   120fe:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   12100:	d110      	bne.n	12124 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   12102:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
   12104:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
   12108:	0799      	lsls	r1, r3, #30
   1210a:	d53c      	bpl.n	12186 <usb_transfer_work+0x96>
		if (!trans->bsize) {
   1210c:	bb02      	cbnz	r2, 12150 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   1210e:	f013 0304 	ands.w	r3, r3, #4
   12112:	d104      	bne.n	1211e <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
   12114:	461a      	mov	r2, r3
   12116:	4619      	mov	r1, r3
   12118:	4630      	mov	r0, r6
   1211a:	f007 fdef 	bl	19cfc <usb_write>
			}
			trans->status = 0;
   1211e:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
   12120:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   12124:	f854 3c28 	ldr.w	r3, [r4, #-40]
   12128:	3310      	adds	r3, #16
   1212a:	d00e      	beq.n	1214a <usb_transfer_work+0x5a>
   1212c:	f854 5c18 	ldr.w	r5, [r4, #-24]
   12130:	b15d      	cbz	r5, 1214a <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   12132:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
   12136:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
   1213a:	f00a fe88 	bl	1ce4e <k_is_in_isr>
   1213e:	2800      	cmp	r0, #0
   12140:	d04c      	beq.n	121dc <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   12142:	482e      	ldr	r0, [pc, #184]	; (121fc <usb_transfer_work+0x10c>)
   12144:	4621      	mov	r1, r4
   12146:	f00a ff60 	bl	1d00a <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
   1214a:	b002      	add	sp, #8
   1214c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   12150:	f850 1c24 	ldr.w	r1, [r0, #-36]
   12154:	ab01      	add	r3, sp, #4
   12156:	4630      	mov	r0, r6
   12158:	f007 fdd0 	bl	19cfc <usb_write>
		if (ret) {
   1215c:	b110      	cbz	r0, 12164 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
   1215e:	f06f 0315 	mvn.w	r3, #21
   12162:	e7dd      	b.n	12120 <usb_transfer_work+0x30>
		trans->buffer += bytes;
   12164:	9a01      	ldr	r2, [sp, #4]
   12166:	f854 3c24 	ldr.w	r3, [r4, #-36]
   1216a:	4413      	add	r3, r2
   1216c:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
   12170:	f854 3c20 	ldr.w	r3, [r4, #-32]
   12174:	1a9b      	subs	r3, r3, r2
   12176:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
   1217a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1217e:	4413      	add	r3, r2
   12180:	f844 3c1c 	str.w	r3, [r4, #-28]
   12184:	e7ce      	b.n	12124 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   12186:	f850 1c24 	ldr.w	r1, [r0, #-36]
   1218a:	ab01      	add	r3, sp, #4
   1218c:	4630      	mov	r0, r6
   1218e:	f001 fcfb 	bl	13b88 <usb_dc_ep_read_wait>
		if (ret) {
   12192:	2800      	cmp	r0, #0
   12194:	d1e3      	bne.n	1215e <usb_transfer_work+0x6e>
		trans->buffer += bytes;
   12196:	9d01      	ldr	r5, [sp, #4]
   12198:	f854 3c24 	ldr.w	r3, [r4, #-36]
   1219c:	442b      	add	r3, r5
   1219e:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
   121a2:	f854 3c20 	ldr.w	r3, [r4, #-32]
   121a6:	1b5b      	subs	r3, r3, r5
   121a8:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
   121ac:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   121b0:	442b      	add	r3, r5
   121b2:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   121b6:	2d00      	cmp	r5, #0
   121b8:	d0b1      	beq.n	1211e <usb_transfer_work+0x2e>
   121ba:	4630      	mov	r0, r6
   121bc:	f001 fd88 	bl	13cd0 <usb_dc_ep_mps>
   121c0:	fbb5 f3f0 	udiv	r3, r5, r0
   121c4:	fb03 5510 	mls	r5, r3, r0, r5
   121c8:	2d00      	cmp	r5, #0
   121ca:	d1a8      	bne.n	1211e <usb_transfer_work+0x2e>
   121cc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   121d0:	2b00      	cmp	r3, #0
   121d2:	d0a4      	beq.n	1211e <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
   121d4:	4630      	mov	r0, r6
   121d6:	f001 fd1f 	bl	13c18 <usb_dc_ep_read_continue>
   121da:	e7a3      	b.n	12124 <usb_transfer_work+0x34>
		trans->cb = NULL;
   121dc:	f844 0c18 	str.w	r0, [r4, #-24]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   121e0:	f1a4 0010 	sub.w	r0, r4, #16
   121e4:	f006 fa22 	bl	1862c <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
   121e8:	f854 3c28 	ldr.w	r3, [r4, #-40]
   121ec:	338c      	adds	r3, #140	; 0x8c
   121ee:	d0ac      	beq.n	1214a <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
   121f0:	4642      	mov	r2, r8
   121f2:	4639      	mov	r1, r7
   121f4:	4630      	mov	r0, r6
   121f6:	47a8      	blx	r5
   121f8:	e7a7      	b.n	1214a <usb_transfer_work+0x5a>
   121fa:	bf00      	nop
   121fc:	200006a0 	.word	0x200006a0

00012200 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   12200:	1e4b      	subs	r3, r1, #1
   12202:	2b01      	cmp	r3, #1
{
   12204:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12206:	4606      	mov	r6, r0
   12208:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   1220a:	d80f      	bhi.n	1222c <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   1220c:	f7ff ff5a 	bl	120c4 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
   12210:	4604      	mov	r4, r0
   12212:	b968      	cbnz	r0, 12230 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
   12214:	2d01      	cmp	r5, #1
   12216:	d109      	bne.n	1222c <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
   12218:	ab01      	add	r3, sp, #4
   1221a:	2201      	movs	r2, #1
   1221c:	f10d 0103 	add.w	r1, sp, #3
   12220:	4630      	mov	r0, r6
   12222:	f001 fcb1 	bl	13b88 <usb_dc_ep_read_wait>
			} while (bytes);
   12226:	9b01      	ldr	r3, [sp, #4]
   12228:	2b00      	cmp	r3, #0
   1222a:	d1f5      	bne.n	12218 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
   1222c:	b002      	add	sp, #8
   1222e:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   12230:	f00a fe0d 	bl	1ce4e <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   12234:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   12238:	b108      	cbz	r0, 1223e <usb_transfer_ep_callback+0x3e>
   1223a:	2d01      	cmp	r5, #1
   1223c:	d105      	bne.n	1224a <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
   1223e:	4608      	mov	r0, r1
}
   12240:	b002      	add	sp, #8
   12242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
   12246:	f7ff bf53 	b.w	120f0 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   1224a:	4803      	ldr	r0, [pc, #12]	; (12258 <usb_transfer_ep_callback+0x58>)
}
   1224c:	b002      	add	sp, #8
   1224e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   12252:	f00a beda 	b.w	1d00a <k_work_submit_to_queue>
   12256:	bf00      	nop
   12258:	200006a0 	.word	0x200006a0

0001225c <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
   1225c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12260:	4606      	mov	r6, r0
   12262:	9101      	str	r1, [sp, #4]
   12264:	4615      	mov	r5, r2
   12266:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
   12268:	f007 fd90 	bl	19d8c <usb_transfer_is_busy>
   1226c:	4604      	mov	r4, r0
   1226e:	2800      	cmp	r0, #0
   12270:	d15c      	bne.n	1232c <usb_transfer+0xd0>
   12272:	f04f 0320 	mov.w	r3, #32
   12276:	f3ef 8a11 	mrs	sl, BASEPRI
   1227a:	f383 8812 	msr	BASEPRI_MAX, r3
   1227e:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
   12282:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 12334 <usb_transfer+0xd8>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
   12286:	01a7      	lsls	r7, r4, #6
	return z_impl_k_sem_take(sem, timeout);
   12288:	2200      	movs	r2, #0
   1228a:	2300      	movs	r3, #0
   1228c:	4658      	mov	r0, fp
   1228e:	f006 f9ed 	bl	1866c <z_impl_k_sem_take>
   12292:	b968      	cbnz	r0, 122b0 <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
   12294:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 12338 <usb_transfer+0xdc>
   12298:	eb09 0407 	add.w	r4, r9, r7
   1229c:	6863      	ldr	r3, [r4, #4]
   1229e:	f113 0f10 	cmn.w	r3, #16
   122a2:	d114      	bne.n	122ce <usb_transfer+0x72>
   122a4:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
   122a6:	4658      	mov	r0, fp
   122a8:	f006 f9c0 	bl	1862c <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
   122ac:	9b01      	ldr	r3, [sp, #4]
   122ae:	e006      	b.n	122be <usb_transfer+0x62>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
   122b0:	3401      	adds	r4, #1
   122b2:	2c04      	cmp	r4, #4
   122b4:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
   122b8:	d1e5      	bne.n	12286 <usb_transfer+0x2a>
		ret = -ENOMEM;
   122ba:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
   122be:	f38a 8811 	msr	BASEPRI, sl
   122c2:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
   122c6:	4618      	mov	r0, r3
   122c8:	b003      	add	sp, #12
   122ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
   122ce:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
   122d0:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
   122d2:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
   122d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   122d8:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
   122da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   122dc:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
   122de:	f06f 030f 	mvn.w	r3, #15
	trans->flags = flags;
   122e2:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
   122e6:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   122e8:	4630      	mov	r0, r6
	trans->ep = ep;
   122ea:	f809 6007 	strb.w	r6, [r9, r7]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   122ee:	f001 fcef 	bl	13cd0 <usb_dc_ep_mps>
   122f2:	b158      	cbz	r0, 1230c <usb_transfer+0xb0>
   122f4:	4630      	mov	r0, r6
   122f6:	f001 fceb 	bl	13cd0 <usb_dc_ep_mps>
   122fa:	fbb5 f2f0 	udiv	r2, r5, r0
   122fe:	fb02 5510 	mls	r5, r2, r0, r5
   12302:	b11d      	cbz	r5, 1230c <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
   12304:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12306:	f043 0304 	orr.w	r3, r3, #4
   1230a:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
   1230c:	f018 0f02 	tst.w	r8, #2
   12310:	d007      	beq.n	12322 <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   12312:	372c      	adds	r7, #44	; 0x2c
   12314:	4809      	ldr	r0, [pc, #36]	; (1233c <usb_transfer+0xe0>)
   12316:	eb09 0107 	add.w	r1, r9, r7
   1231a:	f00a fe76 	bl	1d00a <k_work_submit_to_queue>
	int i, key, ret = 0;
   1231e:	2300      	movs	r3, #0
   12320:	e7cd      	b.n	122be <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
   12322:	4630      	mov	r0, r6
   12324:	f001 fc78 	bl	13c18 <usb_dc_ep_read_continue>
   12328:	4603      	mov	r3, r0
   1232a:	e7c8      	b.n	122be <usb_transfer+0x62>
		return -EBUSY;
   1232c:	f06f 030f 	mvn.w	r3, #15
   12330:	e7c9      	b.n	122c6 <usb_transfer+0x6a>
   12332:	bf00      	nop
   12334:	20000ae0 	.word	0x20000ae0
   12338:	20000ac4 	.word	0x20000ac4
   1233c:	200006a0 	.word	0x200006a0

00012340 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
   12340:	b510      	push	{r4, lr}
	__asm__ volatile(
   12342:	f04f 0320 	mov.w	r3, #32
   12346:	f3ef 8411 	mrs	r4, BASEPRI
   1234a:	f383 8812 	msr	BASEPRI_MAX, r3
   1234e:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   12352:	f7ff feb7 	bl	120c4 <usb_ep_get_transfer>
	if (!trans) {
   12356:	b150      	cbz	r0, 1236e <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
   12358:	6843      	ldr	r3, [r0, #4]
   1235a:	3310      	adds	r3, #16
   1235c:	d107      	bne.n	1236e <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
   1235e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   12362:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   12364:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   12368:	4803      	ldr	r0, [pc, #12]	; (12378 <usb_cancel_transfer+0x38>)
   1236a:	f00a fe4e 	bl	1d00a <k_work_submit_to_queue>
	__asm__ volatile(
   1236e:	f384 8811 	msr	BASEPRI, r4
   12372:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
   12376:	bd10      	pop	{r4, pc}
   12378:	200006a0 	.word	0x200006a0

0001237c <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   1237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12380:	4c10      	ldr	r4, [pc, #64]	; (123c4 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   12382:	f8df 8044 	ldr.w	r8, [pc, #68]	; 123c8 <usb_cancel_transfers+0x4c>
{
   12386:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
   12388:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
   1238c:	f04f 0320 	mov.w	r3, #32
   12390:	f3ef 8611 	mrs	r6, BASEPRI
   12394:	f383 8812 	msr	BASEPRI_MAX, r3
   12398:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
   1239c:	6863      	ldr	r3, [r4, #4]
   1239e:	3310      	adds	r3, #16
   123a0:	d105      	bne.n	123ae <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   123a2:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   123a6:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
   123a8:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   123aa:	f00a fe2e 	bl	1d00a <k_work_submit_to_queue>
	__asm__ volatile(
   123ae:	f386 8811 	msr	BASEPRI, r6
   123b2:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   123b6:	3d01      	subs	r5, #1
   123b8:	f104 0440 	add.w	r4, r4, #64	; 0x40
   123bc:	d1e6      	bne.n	1238c <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   123be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123c2:	bf00      	nop
   123c4:	20000ac4 	.word	0x20000ac4
   123c8:	200006a0 	.word	0x200006a0

000123cc <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   123cc:	b570      	push	{r4, r5, r6, lr}
   123ce:	4c0a      	ldr	r4, [pc, #40]	; (123f8 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
   123d0:	4e0a      	ldr	r6, [pc, #40]	; (123fc <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   123d2:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
   123d4:	4631      	mov	r1, r6
   123d6:	4620      	mov	r0, r4
   123d8:	f00a fe0e 	bl	1cff8 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   123dc:	2201      	movs	r2, #1
   123de:	f1a4 0010 	sub.w	r0, r4, #16
   123e2:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   123e4:	3501      	adds	r5, #1
   123e6:	f00a fdca 	bl	1cf7e <z_impl_k_sem_init>
   123ea:	2d04      	cmp	r5, #4
   123ec:	f104 0440 	add.w	r4, r4, #64	; 0x40
   123f0:	d1f0      	bne.n	123d4 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
   123f2:	2000      	movs	r0, #0
   123f4:	bd70      	pop	{r4, r5, r6, pc}
   123f6:	bf00      	nop
   123f8:	20000af0 	.word	0x20000af0
   123fc:	000120f1 	.word	0x000120f1

00012400 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
   12400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12402:	4605      	mov	r5, r0
   12404:	460f      	mov	r7, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
   12406:	7901      	ldrb	r1, [r0, #4]
   12408:	4818      	ldr	r0, [pc, #96]	; (1246c <cdc_acm_class_handle_req+0x6c>)
{
   1240a:	4616      	mov	r6, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
   1240c:	f007 fc9a 	bl	19d44 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
   12410:	4604      	mov	r4, r0
   12412:	b340      	cbz	r0, 12466 <cdc_acm_class_handle_req+0x66>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
   12414:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
   12418:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_device(setup)) {
   1241a:	2a00      	cmp	r2, #0
   1241c:	db1b      	blt.n	12456 <cdc_acm_class_handle_req+0x56>
		switch (setup->bRequest) {
   1241e:	2b20      	cmp	r3, #32
   12420:	d004      	beq.n	1242c <cdc_acm_class_handle_req+0x2c>
   12422:	2b22      	cmp	r3, #34	; 0x22
   12424:	d013      	beq.n	1244e <cdc_acm_class_handle_req+0x4e>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
   12426:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1242a:	e01e      	b.n	1246a <cdc_acm_class_handle_req+0x6a>
			rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   1242c:	f850 5d0c 	ldr.w	r5, [r0, #-12]!
			memcpy(&dev_data->line_coding, *data,
   12430:	6831      	ldr	r1, [r6, #0]
   12432:	2207      	movs	r2, #7
   12434:	f007 fdb5 	bl	19fa2 <memcpy>
			new_rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   12438:	f854 1c0c 	ldr.w	r1, [r4, #-12]
			if (rate != new_rate && dev_data->rate_cb != NULL) {
   1243c:	42a9      	cmp	r1, r5
   1243e:	d004      	beq.n	1244a <cdc_acm_class_handle_req+0x4a>
   12440:	f854 3c6c 	ldr.w	r3, [r4, #-108]
   12444:	b10b      	cbz	r3, 1244a <cdc_acm_class_handle_req+0x4a>
				dev_data->rate_cb(common->dev, new_rate);
   12446:	6820      	ldr	r0, [r4, #0]
   12448:	4798      	blx	r3
			return 0;
   1244a:	2000      	movs	r0, #0
   1244c:	e00d      	b.n	1246a <cdc_acm_class_handle_req+0x6a>
			dev_data->line_state = (uint8_t)setup->wValue;
   1244e:	886b      	ldrh	r3, [r5, #2]
   12450:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
   12454:	e7f9      	b.n	1244a <cdc_acm_class_handle_req+0x4a>
		if (setup->bRequest == GET_LINE_CODING) {
   12456:	2b21      	cmp	r3, #33	; 0x21
   12458:	d1e5      	bne.n	12426 <cdc_acm_class_handle_req+0x26>
			*data = (uint8_t *)(&dev_data->line_coding);
   1245a:	f1a0 040c 	sub.w	r4, r0, #12
			*len = sizeof(dev_data->line_coding);
   1245e:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
   12460:	6034      	str	r4, [r6, #0]
			*len = sizeof(dev_data->line_coding);
   12462:	603b      	str	r3, [r7, #0]
			return 0;
   12464:	e7f1      	b.n	1244a <cdc_acm_class_handle_req+0x4a>
		return -ENODEV;
   12466:	f06f 0012 	mvn.w	r0, #18
}
   1246a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1246c:	20000bc4 	.word	0x20000bc4

00012470 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   12470:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
   12472:	2301      	movs	r3, #1
   12474:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

	if (dev_data->cb && dev_data->rx_ready) {
   12478:	680b      	ldr	r3, [r1, #0]
   1247a:	b133      	cbz	r3, 1248a <cdc_acm_irq_rx_enable+0x1a>
   1247c:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   12480:	b11b      	cbz	r3, 1248a <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   12482:	4802      	ldr	r0, [pc, #8]	; (1248c <cdc_acm_irq_rx_enable+0x1c>)
   12484:	3108      	adds	r1, #8
   12486:	f00a bdc0 	b.w	1d00a <k_work_submit_to_queue>
	}
}
   1248a:	4770      	bx	lr
   1248c:	200006a0 	.word	0x200006a0

00012490 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   12490:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
   12492:	2301      	movs	r3, #1
   12494:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
	if (dev_data->cb && dev_data->tx_ready) {
   12498:	680b      	ldr	r3, [r1, #0]
   1249a:	b133      	cbz	r3, 124aa <cdc_acm_irq_tx_enable+0x1a>
   1249c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
   124a0:	b11b      	cbz	r3, 124aa <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   124a2:	4802      	ldr	r0, [pc, #8]	; (124ac <cdc_acm_irq_tx_enable+0x1c>)
   124a4:	3108      	adds	r1, #8
   124a6:	f00a bdb0 	b.w	1d00a <k_work_submit_to_queue>
}
   124aa:	4770      	bx	lr
   124ac:	200006a0 	.word	0x200006a0

000124b0 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
   124b0:	2301      	movs	r3, #1
{
   124b2:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
   124b4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
	if (dev_data->cb && dev_data->tx_irq_ena) {
   124b8:	6813      	ldr	r3, [r2, #0]
{
   124ba:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
   124bc:	b13b      	cbz	r3, 124ce <cdc_acm_write_cb+0x1e>
   124be:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
   124c2:	b123      	cbz	r3, 124ce <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   124c4:	4808      	ldr	r0, [pc, #32]	; (124e8 <cdc_acm_write_cb+0x38>)
   124c6:	f102 0108 	add.w	r1, r2, #8
   124ca:	f00a fd9e 	bl	1d00a <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
   124ce:	6f63      	ldr	r3, [r4, #116]	; 0x74
   124d0:	691a      	ldr	r2, [r3, #16]
   124d2:	689b      	ldr	r3, [r3, #8]
   124d4:	429a      	cmp	r2, r3
   124d6:	d006      	beq.n	124e6 <cdc_acm_write_cb+0x36>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
   124d8:	f104 011c 	add.w	r1, r4, #28
   124dc:	4802      	ldr	r0, [pc, #8]	; (124e8 <cdc_acm_write_cb+0x38>)
}
   124de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
   124e2:	f00a bd92 	b.w	1d00a <k_work_submit_to_queue>
}
   124e6:	bd10      	pop	{r4, pc}
   124e8:	200006a0 	.word	0x200006a0

000124ec <cdc_acm_fifo_fill>:
{
   124ec:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   124ee:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
   124f0:	f895 0082 	ldrb.w	r0, [r5, #130]	; 0x82
   124f4:	b170      	cbz	r0, 12514 <cdc_acm_fifo_fill+0x28>
   124f6:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
   124fa:	b963      	cbnz	r3, 12516 <cdc_acm_fifo_fill+0x2a>
	dev_data->tx_ready = false;
   124fc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
   12500:	6f68      	ldr	r0, [r5, #116]	; 0x74
   12502:	f007 fb88 	bl	19c16 <ring_buf_put>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
   12506:	f105 011c 	add.w	r1, r5, #28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
   1250a:	4604      	mov	r4, r0
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
   1250c:	4803      	ldr	r0, [pc, #12]	; (1251c <cdc_acm_fifo_fill+0x30>)
   1250e:	f00a fd7c 	bl	1d00a <k_work_submit_to_queue>
	return wrote;
   12512:	4620      	mov	r0, r4
}
   12514:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   12516:	2000      	movs	r0, #0
   12518:	e7fc      	b.n	12514 <cdc_acm_fifo_fill+0x28>
   1251a:	bf00      	nop
   1251c:	200006a0 	.word	0x200006a0

00012520 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
   12520:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   12522:	6904      	ldr	r4, [r0, #16]
{
   12524:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
   12528:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
   1252c:	b18b      	cbz	r3, 12552 <cdc_acm_poll_out+0x32>
   1252e:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
   12532:	b973      	cbnz	r3, 12552 <cdc_acm_poll_out+0x32>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   12534:	f10d 0107 	add.w	r1, sp, #7
   12538:	6f60      	ldr	r0, [r4, #116]	; 0x74
	dev_data->tx_ready = false;
   1253a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   1253e:	2201      	movs	r2, #1
   12540:	f007 fb69 	bl	19c16 <ring_buf_put>
   12544:	4601      	mov	r1, r0
   12546:	b130      	cbz	r0, 12556 <cdc_acm_poll_out+0x36>
			LOG_ERR("Failed to drain buffer");
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
   12548:	480a      	ldr	r0, [pc, #40]	; (12574 <cdc_acm_poll_out+0x54>)
   1254a:	f104 011c 	add.w	r1, r4, #28
   1254e:	f00a fd5c 	bl	1d00a <k_work_submit_to_queue>
}
   12552:	b002      	add	sp, #8
   12554:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   12556:	6f60      	ldr	r0, [r4, #116]	; 0x74
   12558:	2201      	movs	r2, #1
   1255a:	f007 fbae 	bl	19cba <ring_buf_get>
   1255e:	2800      	cmp	r0, #0
   12560:	d0f7      	beq.n	12552 <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   12562:	6f60      	ldr	r0, [r4, #116]	; 0x74
   12564:	2201      	movs	r2, #1
   12566:	f10d 0107 	add.w	r1, sp, #7
   1256a:	f007 fb54 	bl	19c16 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   1256e:	2800      	cmp	r0, #0
   12570:	d1ea      	bne.n	12548 <cdc_acm_poll_out+0x28>
   12572:	e7ee      	b.n	12552 <cdc_acm_poll_out+0x32>
   12574:	200006a0 	.word	0x200006a0

00012578 <cdc_acm_int_in>:
{
   12578:	b508      	push	{r3, lr}
   1257a:	4601      	mov	r1, r0
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
   1257c:	4803      	ldr	r0, [pc, #12]	; (1258c <cdc_acm_int_in+0x14>)
   1257e:	f007 fbef 	bl	19d60 <usb_get_dev_data_by_ep>
	if (common == NULL) {
   12582:	b110      	cbz	r0, 1258a <cdc_acm_int_in+0x12>
	dev_data->notification_sent = 1U;
   12584:	2301      	movs	r3, #1
   12586:	f800 3c03 	strb.w	r3, [r0, #-3]
}
   1258a:	bd08      	pop	{r3, pc}
   1258c:	20000bc4 	.word	0x20000bc4

00012590 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
   12590:	4a0b      	ldr	r2, [pc, #44]	; (125c0 <cdc_acm_reset_port+0x30>)
{
   12592:	4603      	mov	r3, r0
	dev_data->configured = false;
   12594:	2100      	movs	r1, #0
   12596:	f8a0 1082 	strh.w	r1, [r0, #130]	; 0x82
	dev_data->tx_ready = false;
   1259a:	8581      	strh	r1, [r0, #44]	; 0x2c
	dev_data->line_coding = (struct cdc_acm_line_coding)
   1259c:	6810      	ldr	r0, [r2, #0]
   1259e:	6798      	str	r0, [r3, #120]	; 0x78
   125a0:	8890      	ldrh	r0, [r2, #4]
   125a2:	7992      	ldrb	r2, [r2, #6]
   125a4:	f8a3 007c 	strh.w	r0, [r3, #124]	; 0x7c
   125a8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	dev_data->serial_state = 0;
   125ac:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	dev_data->line_state = 0;
   125b0:	f883 107f 	strb.w	r1, [r3, #127]	; 0x7f
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
   125b4:	2240      	movs	r2, #64	; 0x40
   125b6:	f103 0030 	add.w	r0, r3, #48	; 0x30
   125ba:	f007 bcfd 	b.w	19fb8 <memset>
   125be:	bf00      	nop
   125c0:	0001d7a0 	.word	0x0001d7a0

000125c4 <cdc_acm_read_cb>:
{
   125c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   125c6:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
   125c8:	f102 0630 	add.w	r6, r2, #48	; 0x30
	if (size <= 0) {
   125cc:	1e0a      	subs	r2, r1, #0
{
   125ce:	4605      	mov	r5, r0
	if (size <= 0) {
   125d0:	dd10      	ble.n	125f4 <cdc_acm_read_cb+0x30>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
   125d2:	6f20      	ldr	r0, [r4, #112]	; 0x70
   125d4:	4631      	mov	r1, r6
   125d6:	f007 fb1e 	bl	19c16 <ring_buf_put>
	dev_data->rx_ready = true;
   125da:	2301      	movs	r3, #1
   125dc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (dev_data->cb && dev_data->rx_irq_ena) {
   125e0:	6823      	ldr	r3, [r4, #0]
   125e2:	b13b      	cbz	r3, 125f4 <cdc_acm_read_cb+0x30>
   125e4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   125e8:	b123      	cbz	r3, 125f4 <cdc_acm_read_cb+0x30>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   125ea:	4808      	ldr	r0, [pc, #32]	; (1260c <cdc_acm_read_cb+0x48>)
   125ec:	f104 0108 	add.w	r1, r4, #8
   125f0:	f00a fd0b 	bl	1d00a <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
   125f4:	4b06      	ldr	r3, [pc, #24]	; (12610 <cdc_acm_read_cb+0x4c>)
   125f6:	9300      	str	r3, [sp, #0]
   125f8:	9401      	str	r4, [sp, #4]
   125fa:	2301      	movs	r3, #1
   125fc:	2240      	movs	r2, #64	; 0x40
   125fe:	4631      	mov	r1, r6
   12600:	4628      	mov	r0, r5
   12602:	f7ff fe2b 	bl	1225c <usb_transfer>
}
   12606:	b002      	add	sp, #8
   12608:	bd70      	pop	{r4, r5, r6, pc}
   1260a:	bf00      	nop
   1260c:	200006a0 	.word	0x200006a0
   12610:	000125c5 	.word	0x000125c5

00012614 <tx_work_handler>:
{
   12614:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
   12616:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
   12618:	685b      	ldr	r3, [r3, #4]
   1261a:	6a1b      	ldr	r3, [r3, #32]
   1261c:	7d1e      	ldrb	r6, [r3, #20]
{
   1261e:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
   12620:	4630      	mov	r0, r6
   12622:	f007 fbb3 	bl	19d8c <usb_transfer_is_busy>
   12626:	b9d0      	cbnz	r0, 1265e <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
   12628:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1262a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1262e:	a903      	add	r1, sp, #12
   12630:	f007 fb10 	bl	19c54 <ring_buf_get_claim>
	if (!len) {
   12634:	4604      	mov	r4, r0
   12636:	b190      	cbz	r0, 1265e <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
   12638:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
   1263a:	f1a5 031c 	sub.w	r3, r5, #28
		len -= 1;
   1263e:	bf08      	it	eq
   12640:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
   12644:	9301      	str	r3, [sp, #4]
   12646:	4b07      	ldr	r3, [pc, #28]	; (12664 <tx_work_handler+0x50>)
   12648:	9903      	ldr	r1, [sp, #12]
   1264a:	9300      	str	r3, [sp, #0]
   1264c:	4622      	mov	r2, r4
   1264e:	2302      	movs	r3, #2
   12650:	4630      	mov	r0, r6
   12652:	f7ff fe03 	bl	1225c <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
   12656:	6da8      	ldr	r0, [r5, #88]	; 0x58
   12658:	4621      	mov	r1, r4
   1265a:	f007 fb1a 	bl	19c92 <ring_buf_get_finish>
}
   1265e:	b004      	add	sp, #16
   12660:	bd70      	pop	{r4, r5, r6, pc}
   12662:	bf00      	nop
   12664:	000124b1 	.word	0x000124b1

00012668 <cdc_acm_dev_status_cb>:
{
   12668:	b538      	push	{r3, r4, r5, lr}
   1266a:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
   1266c:	4601      	mov	r1, r0
   1266e:	4824      	ldr	r0, [pc, #144]	; (12700 <cdc_acm_dev_status_cb+0x98>)
   12670:	f007 fb5c 	bl	19d2c <usb_get_dev_data_by_cfg>
	if (common == NULL) {
   12674:	4604      	mov	r4, r0
   12676:	b380      	cbz	r0, 126da <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
   12678:	4602      	mov	r2, r0
	switch (status) {
   1267a:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
   1267c:	f852 3984 	ldr.w	r3, [r2], #-132
   12680:	685b      	ldr	r3, [r3, #4]
	switch (status) {
   12682:	2905      	cmp	r1, #5
   12684:	d829      	bhi.n	126da <cdc_acm_dev_status_cb+0x72>
   12686:	e8df f001 	tbb	[pc, r1]
   1268a:	2820      	.short	0x2820
   1268c:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
   12690:	f814 1c02 	ldrb.w	r1, [r4, #-2]
   12694:	b931      	cbnz	r1, 126a4 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
   12696:	6a1b      	ldr	r3, [r3, #32]
   12698:	7b18      	ldrb	r0, [r3, #12]
   1269a:	f7ff ff93 	bl	125c4 <cdc_acm_read_cb>
			dev_data->configured = true;
   1269e:	2301      	movs	r3, #1
   126a0:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
   126a4:	f814 3c58 	ldrb.w	r3, [r4, #-88]
   126a8:	b9bb      	cbnz	r3, 126da <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
   126aa:	2301      	movs	r3, #1
   126ac:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
   126b0:	f854 3c84 	ldr.w	r3, [r4, #-132]
   126b4:	b18b      	cbz	r3, 126da <cdc_acm_dev_status_cb+0x72>
   126b6:	f814 3c56 	ldrb.w	r3, [r4, #-86]
   126ba:	b173      	cbz	r3, 126da <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   126bc:	f1a4 017c 	sub.w	r1, r4, #124	; 0x7c
   126c0:	4810      	ldr	r0, [pc, #64]	; (12704 <cdc_acm_dev_status_cb+0x9c>)
}
   126c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   126c6:	f00a bca0 	b.w	1d00a <k_work_submit_to_queue>
}
   126ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
   126ce:	4610      	mov	r0, r2
   126d0:	f7ff bf5e 	b.w	12590 <cdc_acm_reset_port>
		dev_data->suspended = true;
   126d4:	2301      	movs	r3, #1
   126d6:	f804 3c01 	strb.w	r3, [r4, #-1]
}
   126da:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
   126dc:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   126e0:	2900      	cmp	r1, #0
   126e2:	d0fa      	beq.n	126da <cdc_acm_dev_status_cb+0x72>
			if (dev_data->configured) {
   126e4:	f814 0c02 	ldrb.w	r0, [r4, #-2]
			dev_data->suspended = false;
   126e8:	2100      	movs	r1, #0
   126ea:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
   126ee:	2800      	cmp	r0, #0
   126f0:	d0f3      	beq.n	126da <cdc_acm_dev_status_cb+0x72>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
   126f2:	6a1b      	ldr	r3, [r3, #32]
   126f4:	7b18      	ldrb	r0, [r3, #12]
}
   126f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
   126fa:	f7ff bf63 	b.w	125c4 <cdc_acm_read_cb>
   126fe:	bf00      	nop
   12700:	20000bc4 	.word	0x20000bc4
   12704:	200006a0 	.word	0x200006a0

00012708 <cdc_acm_init>:
{
   12708:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   1270a:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
   1270c:	2300      	movs	r3, #0
   1270e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   12712:	4b0c      	ldr	r3, [pc, #48]	; (12744 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
   12714:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
   12718:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
   1271a:	f104 0288 	add.w	r2, r4, #136	; 0x88
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1271e:	b969      	cbnz	r1, 1273c <cdc_acm_init+0x34>
	list->head = node;
   12720:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
   12724:	f104 0008 	add.w	r0, r4, #8
   12728:	4907      	ldr	r1, [pc, #28]	; (12748 <cdc_acm_init+0x40>)
   1272a:	f00a fc65 	bl	1cff8 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
   1272e:	f104 001c 	add.w	r0, r4, #28
   12732:	4906      	ldr	r1, [pc, #24]	; (1274c <cdc_acm_init+0x44>)
   12734:	f00a fc60 	bl	1cff8 <k_work_init>
}
   12738:	2000      	movs	r0, #0
   1273a:	bd10      	pop	{r4, pc}
	parent->next = child;
   1273c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1273e:	605a      	str	r2, [r3, #4]
}
   12740:	e7f0      	b.n	12724 <cdc_acm_init+0x1c>
   12742:	bf00      	nop
   12744:	20000bc4 	.word	0x20000bc4
   12748:	00019db7 	.word	0x00019db7
   1274c:	00012615 	.word	0x00012615

00012750 <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
   12750:	b530      	push	{r4, r5, lr}
   12752:	b085      	sub	sp, #20
	notification.bmRequestType = 0xA1;
   12754:	23a1      	movs	r3, #161	; 0xa1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   12756:	6905      	ldr	r5, [r0, #16]
	notification.bmRequestType = 0xA1;
   12758:	f88d 3004 	strb.w	r3, [sp, #4]
	notification.bNotificationType = 0x20;
   1275c:	2320      	movs	r3, #32
	struct usb_cfg_data * const cfg = (void *)dev->config;
   1275e:	6842      	ldr	r2, [r0, #4]
	notification.bNotificationType = 0x20;
   12760:	f88d 3005 	strb.w	r3, [sp, #5]
	notification.wValue = 0U;
   12764:	2300      	movs	r3, #0
	dev_data->notification_sent = 0U;
   12766:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
   1276a:	2002      	movs	r0, #2
   1276c:	f8ad 000a 	strh.w	r0, [sp, #10]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
   12770:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
   12772:	f8ad 100c 	strh.w	r1, [sp, #12]
	notification.wIndex = 0U;
   12776:	f8ad 3008 	strh.w	r3, [sp, #8]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
   1277a:	7900      	ldrb	r0, [r0, #4]
	notification.wValue = 0U;
   1277c:	f8ad 3006 	strh.w	r3, [sp, #6]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
   12780:	220a      	movs	r2, #10
   12782:	a901      	add	r1, sp, #4
   12784:	f007 faba 	bl	19cfc <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
   12788:	4c05      	ldr	r4, [pc, #20]	; (127a0 <cdc_acm_send_notification.isra.0+0x50>)
   1278a:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
   1278e:	b923      	cbnz	r3, 1279a <cdc_acm_send_notification.isra.0+0x4a>
	z_impl_k_busy_wait(usec_to_wait);
   12790:	2001      	movs	r0, #1
   12792:	f00a fd9f 	bl	1d2d4 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
   12796:	3c01      	subs	r4, #1
   12798:	d1f7      	bne.n	1278a <cdc_acm_send_notification.isra.0+0x3a>
}
   1279a:	b005      	add	sp, #20
   1279c:	bd30      	pop	{r4, r5, pc}
   1279e:	bf00      	nop
   127a0:	000186a1 	.word	0x000186a1

000127a4 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
   127a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
   127a6:	4d09      	ldr	r5, [pc, #36]	; (127cc <z_usb_work_q_init+0x28>)
   127a8:	4909      	ldr	r1, [pc, #36]	; (127d0 <z_usb_work_q_init+0x2c>)
   127aa:	2400      	movs	r4, #0
   127ac:	9400      	str	r4, [sp, #0]
   127ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   127b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   127b6:	4628      	mov	r0, r5
   127b8:	f006 f866 	bl	18888 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   127bc:	4905      	ldr	r1, [pc, #20]	; (127d4 <z_usb_work_q_init+0x30>)
   127be:	4628      	mov	r0, r5
   127c0:	f00a fb4b 	bl	1ce5a <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
   127c4:	4620      	mov	r0, r4
   127c6:	b003      	add	sp, #12
   127c8:	bd30      	pop	{r4, r5, pc}
   127ca:	bf00      	nop
   127cc:	200006a0 	.word	0x200006a0
   127d0:	20001a40 	.word	0x20001a40
   127d4:	0001db83 	.word	0x0001db83

000127d8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   127d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   127dc:	4605      	mov	r5, r0
	__asm__ volatile(
   127de:	f04f 0320 	mov.w	r3, #32
   127e2:	f3ef 8611 	mrs	r6, BASEPRI
   127e6:	f383 8812 	msr	BASEPRI_MAX, r3
   127ea:	f3bf 8f6f 	isb	sy
	return list->head;
   127ee:	4b0e      	ldr	r3, [pc, #56]	; (12828 <pm_state_notify+0x50>)
   127f0:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   127f2:	b19c      	cbz	r4, 1281c <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   127f4:	4f0d      	ldr	r7, [pc, #52]	; (1282c <pm_state_notify+0x54>)
   127f6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 12830 <pm_state_notify+0x58>
   127fa:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   127fe:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   12802:	2d00      	cmp	r5, #0
   12804:	bf08      	it	eq
   12806:	4613      	moveq	r3, r2
		if (callback) {
   12808:	b12b      	cbz	r3, 12816 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1280a:	f898 2014 	ldrb.w	r2, [r8, #20]
   1280e:	fb09 f202 	mul.w	r2, r9, r2
   12812:	5cb8      	ldrb	r0, [r7, r2]
   12814:	4798      	blx	r3
	return node->next;
   12816:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12818:	2c00      	cmp	r4, #0
   1281a:	d1f0      	bne.n	127fe <pm_state_notify+0x26>
	__asm__ volatile(
   1281c:	f386 8811 	msr	BASEPRI, r6
   12820:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   12824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12828:	20000bcc 	.word	0x20000bcc
   1282c:	20000bd4 	.word	0x20000bd4
   12830:	20001988 	.word	0x20001988

00012834 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12834:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   12836:	2301      	movs	r3, #1
   12838:	f000 001f 	and.w	r0, r0, #31
   1283c:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12840:	4b07      	ldr	r3, [pc, #28]	; (12860 <atomic_clear_bit.constprop.0+0x2c>)
   12842:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12846:	43c0      	mvns	r0, r0
   12848:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1284c:	e853 2f00 	ldrex	r2, [r3]
   12850:	4002      	ands	r2, r0
   12852:	e843 2100 	strex	r1, r2, [r3]
   12856:	2900      	cmp	r1, #0
   12858:	d1f8      	bne.n	1284c <atomic_clear_bit.constprop.0+0x18>
   1285a:	f3bf 8f5b 	dmb	ish
}
   1285e:	4770      	bx	lr
   12860:	20000be0 	.word	0x20000be0

00012864 <pm_system_resume>:

void pm_system_resume(void)
{
   12864:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
   12866:	4b1a      	ldr	r3, [pc, #104]	; (128d0 <pm_system_resume+0x6c>)
   12868:	7d1c      	ldrb	r4, [r3, #20]
   1286a:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   1286e:	f004 031f 	and.w	r3, r4, #31
   12872:	2201      	movs	r2, #1
   12874:	409a      	lsls	r2, r3
   12876:	4b17      	ldr	r3, [pc, #92]	; (128d4 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12878:	0961      	lsrs	r1, r4, #5
   1287a:	43d0      	mvns	r0, r2
   1287c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12880:	e853 1f00 	ldrex	r1, [r3]
   12884:	ea01 0500 	and.w	r5, r1, r0
   12888:	e843 5c00 	strex	ip, r5, [r3]
   1288c:	f1bc 0f00 	cmp.w	ip, #0
   12890:	d1f6      	bne.n	12880 <pm_system_resume+0x1c>
   12892:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   12896:	4211      	tst	r1, r2
   12898:	d013      	beq.n	128c2 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   1289a:	4b0f      	ldr	r3, [pc, #60]	; (128d8 <pm_system_resume+0x74>)
   1289c:	4d0f      	ldr	r5, [pc, #60]	; (128dc <pm_system_resume+0x78>)
   1289e:	b18b      	cbz	r3, 128c4 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   128a0:	230c      	movs	r3, #12
   128a2:	4363      	muls	r3, r4
   128a4:	18ea      	adds	r2, r5, r3
   128a6:	5ce8      	ldrb	r0, [r5, r3]
   128a8:	7851      	ldrb	r1, [r2, #1]
   128aa:	f007 fb9d 	bl	19fe8 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   128ae:	2000      	movs	r0, #0
   128b0:	f7ff ff92 	bl	127d8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   128b4:	230c      	movs	r3, #12
   128b6:	435c      	muls	r4, r3
   128b8:	192a      	adds	r2, r5, r4
   128ba:	2300      	movs	r3, #0
   128bc:	512b      	str	r3, [r5, r4]
   128be:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   128c2:	bd38      	pop	{r3, r4, r5, pc}
   128c4:	f383 8811 	msr	BASEPRI, r3
   128c8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   128cc:	e7ef      	b.n	128ae <pm_system_resume+0x4a>
   128ce:	bf00      	nop
   128d0:	20001988 	.word	0x20001988
   128d4:	20000be4 	.word	0x20000be4
   128d8:	00019fe9 	.word	0x00019fe9
   128dc:	20000bd4 	.word	0x20000bd4

000128e0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   128e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   128e4:	4b32      	ldr	r3, [pc, #200]	; (129b0 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   128e6:	4a33      	ldr	r2, [pc, #204]	; (129b4 <pm_system_suspend+0xd4>)
   128e8:	7d1c      	ldrb	r4, [r3, #20]
   128ea:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   128ee:	0963      	lsrs	r3, r4, #5
   128f0:	ea4f 0983 	mov.w	r9, r3, lsl #2
   128f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128f8:	4e2f      	ldr	r6, [pc, #188]	; (129b8 <pm_system_suspend+0xd8>)
   128fa:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   128fe:	f004 081f 	and.w	r8, r4, #31
   12902:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   12906:	f013 0f01 	tst.w	r3, #1
{
   1290a:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   1290c:	d10a      	bne.n	12924 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   1290e:	4601      	mov	r1, r0
   12910:	4620      	mov	r0, r4
   12912:	f000 f85b 	bl	129cc <pm_policy_next_state>
		if (info != NULL) {
   12916:	b128      	cbz	r0, 12924 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   12918:	c807      	ldmia	r0, {r0, r1, r2}
   1291a:	230c      	movs	r3, #12
   1291c:	fb03 6304 	mla	r3, r3, r4, r6
   12920:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   12924:	230c      	movs	r3, #12
   12926:	4363      	muls	r3, r4
   12928:	18f2      	adds	r2, r6, r3
   1292a:	5cf5      	ldrb	r5, [r6, r3]
   1292c:	b92d      	cbnz	r5, 1293a <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   1292e:	4620      	mov	r0, r4
   12930:	f7ff ff80 	bl	12834 <atomic_clear_bit.constprop.0>
		ret = false;
   12934:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   12936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   1293a:	1c7b      	adds	r3, r7, #1
   1293c:	d00f      	beq.n	1295e <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1293e:	f8d2 c008 	ldr.w	ip, [r2, #8]
   12942:	481e      	ldr	r0, [pc, #120]	; (129bc <pm_system_suspend+0xdc>)
   12944:	4a1e      	ldr	r2, [pc, #120]	; (129c0 <pm_system_suspend+0xe0>)
   12946:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1294a:	2100      	movs	r1, #0
   1294c:	2300      	movs	r3, #0
   1294e:	fbec 0105 	umlal	r0, r1, ip, r5
   12952:	f7fd ffa3 	bl	1089c <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   12956:	2101      	movs	r1, #1
   12958:	1a38      	subs	r0, r7, r0
   1295a:	f00a fc9d 	bl	1d298 <z_set_timeout_expiry>
	k_sched_lock();
   1295e:	f006 f853 	bl	18a08 <k_sched_lock>
	pm_state_notify(true);
   12962:	2001      	movs	r0, #1
   12964:	f7ff ff38 	bl	127d8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12968:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1296c:	2301      	movs	r3, #1
   1296e:	fa03 f808 	lsl.w	r8, r3, r8
   12972:	4b14      	ldr	r3, [pc, #80]	; (129c4 <pm_system_suspend+0xe4>)
   12974:	4499      	add	r9, r3
   12976:	e859 3f00 	ldrex	r3, [r9]
   1297a:	ea43 0308 	orr.w	r3, r3, r8
   1297e:	e849 3200 	strex	r2, r3, [r9]
   12982:	2a00      	cmp	r2, #0
   12984:	d1f7      	bne.n	12976 <pm_system_suspend+0x96>
   12986:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   1298a:	4b0f      	ldr	r3, [pc, #60]	; (129c8 <pm_system_suspend+0xe8>)
   1298c:	b133      	cbz	r3, 1299c <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
   1298e:	230c      	movs	r3, #12
   12990:	4363      	muls	r3, r4
   12992:	18f2      	adds	r2, r6, r3
   12994:	5cf0      	ldrb	r0, [r6, r3]
   12996:	7851      	ldrb	r1, [r2, #1]
   12998:	f007 fb1a 	bl	19fd0 <pm_state_set>
	pm_system_resume();
   1299c:	f7ff ff62 	bl	12864 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   129a0:	4620      	mov	r0, r4
   129a2:	f7ff ff47 	bl	12834 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   129a6:	f006 f9ff 	bl	18da8 <k_sched_unlock>
	bool ret = true;
   129aa:	2001      	movs	r0, #1
   129ac:	e7c3      	b.n	12936 <pm_system_suspend+0x56>
   129ae:	bf00      	nop
   129b0:	20001988 	.word	0x20001988
   129b4:	20000be0 	.word	0x20000be0
   129b8:	20000bd4 	.word	0x20000bd4
   129bc:	000f423f 	.word	0x000f423f
   129c0:	000f4240 	.word	0x000f4240
   129c4:	20000be4 	.word	0x20000be4
   129c8:	00019fd1 	.word	0x00019fd1

000129cc <pm_policy_next_state>:
	max_latency_ticks = new_max_latency_ticks;
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   129cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129d0:	b085      	sub	sp, #20
   129d2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   129d4:	a903      	add	r1, sp, #12
   129d6:	f000 f841 	bl	12a5c <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
   129da:	9b03      	ldr	r3, [sp, #12]
   129dc:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   129de:	4b1c      	ldr	r3, [pc, #112]	; (12a50 <pm_policy_next_state+0x84>)
   129e0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 12a54 <pm_policy_next_state+0x88>
   129e4:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   129e8:	1e44      	subs	r4, r0, #1
   129ea:	b224      	sxth	r4, r4
   129ec:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   129f0:	f04f 0b00 	mov.w	fp, #0
   129f4:	1c63      	adds	r3, r4, #1
   129f6:	d104      	bne.n	12a02 <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   129f8:	2500      	movs	r5, #0
}
   129fa:	4628      	mov	r0, r5
   129fc:	b005      	add	sp, #20
   129fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   12a02:	9b01      	ldr	r3, [sp, #4]
   12a04:	4a14      	ldr	r2, [pc, #80]	; (12a58 <pm_policy_next_state+0x8c>)
   12a06:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   12a0a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   12a0e:	46c4      	mov	ip, r8
   12a10:	6868      	ldr	r0, [r5, #4]
   12a12:	4659      	mov	r1, fp
   12a14:	fbe0 c107 	umlal	ip, r1, r0, r7
   12a18:	2300      	movs	r3, #0
   12a1a:	4660      	mov	r0, ip
   12a1c:	f7fd ff3e 	bl	1089c <__aeabi_uldivmod>
   12a20:	4681      	mov	r9, r0
   12a22:	68a8      	ldr	r0, [r5, #8]
   12a24:	4a0c      	ldr	r2, [pc, #48]	; (12a58 <pm_policy_next_state+0x8c>)
   12a26:	46c4      	mov	ip, r8
   12a28:	4659      	mov	r1, fp
   12a2a:	fbe0 c107 	umlal	ip, r1, r0, r7
   12a2e:	2300      	movs	r3, #0
   12a30:	4660      	mov	r0, ip
   12a32:	f7fd ff33 	bl	1089c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12a36:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   12a3a:	d001      	beq.n	12a40 <pm_policy_next_state+0x74>
   12a3c:	4582      	cmp	sl, r0
   12a3e:	d904      	bls.n	12a4a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   12a40:	1c72      	adds	r2, r6, #1
   12a42:	d0da      	beq.n	129fa <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
   12a44:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
   12a46:	42b0      	cmp	r0, r6
   12a48:	d9d7      	bls.n	129fa <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12a4a:	3c01      	subs	r4, #1
   12a4c:	b224      	sxth	r4, r4
   12a4e:	e7d1      	b.n	129f4 <pm_policy_next_state+0x28>
   12a50:	200000e8 	.word	0x200000e8
   12a54:	000f423f 	.word	0x000f423f
   12a58:	000f4240 	.word	0x000f4240

00012a5c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   12a5c:	b908      	cbnz	r0, 12a62 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   12a5e:	4b02      	ldr	r3, [pc, #8]	; (12a68 <pm_state_cpu_get_all+0xc>)
   12a60:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   12a62:	2000      	movs	r0, #0
   12a64:	4770      	bx	lr
   12a66:	bf00      	nop
   12a68:	0001d80c 	.word	0x0001d80c

00012a6c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12a6c:	4901      	ldr	r1, [pc, #4]	; (12a74 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   12a6e:	2210      	movs	r2, #16
	str	r2, [r1]
   12a70:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12a72:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12a74:	e000ed10 	.word	0xe000ed10

00012a78 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12a78:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   12a7a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12a7c:	f380 8811 	msr	BASEPRI, r0
	isb
   12a80:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12a84:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12a88:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12a8a:	b662      	cpsie	i
	isb
   12a8c:	f3bf 8f6f 	isb	sy

	bx	lr
   12a90:	4770      	bx	lr
   12a92:	bf00      	nop

00012a94 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12a94:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12a96:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12a98:	f381 8811 	msr	BASEPRI, r1

	wfe
   12a9c:	bf20      	wfe

	msr	BASEPRI, r0
   12a9e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12aa2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12aa4:	4770      	bx	lr
   12aa6:	bf00      	nop

00012aa8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   12aa8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12aaa:	2b00      	cmp	r3, #0
   12aac:	db08      	blt.n	12ac0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12aae:	2201      	movs	r2, #1
   12ab0:	f000 001f 	and.w	r0, r0, #31
   12ab4:	fa02 f000 	lsl.w	r0, r2, r0
   12ab8:	095b      	lsrs	r3, r3, #5
   12aba:	4a02      	ldr	r2, [pc, #8]	; (12ac4 <arch_irq_enable+0x1c>)
   12abc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   12ac0:	4770      	bx	lr
   12ac2:	bf00      	nop
   12ac4:	e000e100 	.word	0xe000e100

00012ac8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   12ac8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12aca:	2b00      	cmp	r3, #0
   12acc:	db0d      	blt.n	12aea <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12ace:	2201      	movs	r2, #1
   12ad0:	095b      	lsrs	r3, r3, #5
   12ad2:	f000 001f 	and.w	r0, r0, #31
   12ad6:	fa02 f000 	lsl.w	r0, r2, r0
   12ada:	3320      	adds	r3, #32
   12adc:	4a03      	ldr	r2, [pc, #12]	; (12aec <arch_irq_disable+0x24>)
   12ade:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12ae2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12ae6:	f3bf 8f6f 	isb	sy
}
   12aea:	4770      	bx	lr
   12aec:	e000e100 	.word	0xe000e100

00012af0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12af0:	4b05      	ldr	r3, [pc, #20]	; (12b08 <arch_irq_is_enabled+0x18>)
   12af2:	0942      	lsrs	r2, r0, #5
   12af4:	f000 001f 	and.w	r0, r0, #31
   12af8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12afc:	2301      	movs	r3, #1
   12afe:	fa03 f000 	lsl.w	r0, r3, r0
}
   12b02:	4010      	ands	r0, r2
   12b04:	4770      	bx	lr
   12b06:	bf00      	nop
   12b08:	e000e100 	.word	0xe000e100

00012b0c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12b0c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   12b0e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12b10:	bfa8      	it	ge
   12b12:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   12b16:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12b1a:	bfb8      	it	lt
   12b1c:	4b06      	ldrlt	r3, [pc, #24]	; (12b38 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12b1e:	ea4f 1141 	mov.w	r1, r1, lsl #5
   12b22:	bfac      	ite	ge
   12b24:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12b28:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12b2c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12b2e:	bfb4      	ite	lt
   12b30:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12b32:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
   12b36:	4770      	bx	lr
   12b38:	e000ed14 	.word	0xe000ed14

00012b3c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12b3c:	bf30      	wfi
    b z_SysNmiOnReset
   12b3e:	f7ff bffd 	b.w	12b3c <z_SysNmiOnReset>
   12b42:	bf00      	nop

00012b44 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12b44:	4a0f      	ldr	r2, [pc, #60]	; (12b84 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   12b46:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12b48:	4b0f      	ldr	r3, [pc, #60]	; (12b88 <z_arm_prep_c+0x44>)
   12b4a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12b4e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12b50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12b54:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12b58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12b5c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   12b64:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   12b68:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   12b6c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   12b70:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12b74:	f005 fa9e 	bl	180b4 <z_bss_zero>
	z_data_copy();
   12b78:	f006 fa4a 	bl	19010 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12b7c:	f000 f9d0 	bl	12f20 <z_arm_interrupt_init>
	z_cstart();
   12b80:	f005 fadc 	bl	1813c <z_cstart>
   12b84:	00010000 	.word	0x00010000
   12b88:	e000ed00 	.word	0xe000ed00

00012b8c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   12b8c:	4a09      	ldr	r2, [pc, #36]	; (12bb4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   12b8e:	490a      	ldr	r1, [pc, #40]	; (12bb8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   12b90:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   12b92:	6809      	ldr	r1, [r1, #0]
   12b94:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12b96:	4909      	ldr	r1, [pc, #36]	; (12bbc <arch_swap+0x30>)
	_current->arch.basepri = key;
   12b98:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12b9a:	684b      	ldr	r3, [r1, #4]
   12b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12ba0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   12ba2:	2300      	movs	r3, #0
   12ba4:	f383 8811 	msr	BASEPRI, r3
   12ba8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12bac:	6893      	ldr	r3, [r2, #8]
}
   12bae:	6f98      	ldr	r0, [r3, #120]	; 0x78
   12bb0:	4770      	bx	lr
   12bb2:	bf00      	nop
   12bb4:	20001988 	.word	0x20001988
   12bb8:	0001dac8 	.word	0x0001dac8
   12bbc:	e000ed00 	.word	0xe000ed00

00012bc0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12bc0:	4912      	ldr	r1, [pc, #72]	; (12c0c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   12bc2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   12bc4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   12bc8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   12bca:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   12bce:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12bd2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   12bd4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12bd8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12bdc:	4f0c      	ldr	r7, [pc, #48]	; (12c10 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   12bde:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   12be2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   12be4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   12be6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12be8:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
   12bea:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12bec:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   12bee:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   12bf2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   12bf4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   12bf6:	f000 f9d9 	bl	12fac <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   12bfa:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   12bfe:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   12c02:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   12c06:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   12c0a:	4770      	bx	lr
    ldr r1, =_kernel
   12c0c:	20001988 	.word	0x20001988
    ldr v4, =_SCS_ICSR
   12c10:	e000ed04 	.word	0xe000ed04

00012c14 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   12c14:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   12c18:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   12c1a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   12c1e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   12c22:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   12c24:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   12c28:	2902      	cmp	r1, #2
    beq _oops
   12c2a:	d0ff      	beq.n	12c2c <_oops>

00012c2c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   12c2c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   12c2e:	f007 f983 	bl	19f38 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   12c32:	bd01      	pop	{r0, pc}

00012c34 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   12c34:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   12c38:	9b00      	ldr	r3, [sp, #0]
   12c3a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   12c3e:	490a      	ldr	r1, [pc, #40]	; (12c68 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   12c40:	9b01      	ldr	r3, [sp, #4]
   12c42:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   12c46:	9b02      	ldr	r3, [sp, #8]
   12c48:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   12c4c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   12c50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   12c54:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   12c58:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   12c5c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   12c5e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   12c60:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   12c62:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12c64:	4770      	bx	lr
   12c66:	bf00      	nop
   12c68:	00019759 	.word	0x00019759

00012c6c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   12c6c:	4a09      	ldr	r2, [pc, #36]	; (12c94 <z_check_thread_stack_fail+0x28>)
{
   12c6e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   12c70:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   12c72:	b170      	cbz	r0, 12c92 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   12c74:	f113 0f16 	cmn.w	r3, #22
   12c78:	6e40      	ldr	r0, [r0, #100]	; 0x64
   12c7a:	d005      	beq.n	12c88 <z_check_thread_stack_fail+0x1c>
   12c7c:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   12c80:	429a      	cmp	r2, r3
   12c82:	d805      	bhi.n	12c90 <z_check_thread_stack_fail+0x24>
   12c84:	4283      	cmp	r3, r0
   12c86:	d203      	bcs.n	12c90 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   12c88:	4281      	cmp	r1, r0
   12c8a:	bf28      	it	cs
   12c8c:	2000      	movcs	r0, #0
   12c8e:	4770      	bx	lr
   12c90:	2000      	movs	r0, #0
}
   12c92:	4770      	bx	lr
   12c94:	20001988 	.word	0x20001988

00012c98 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   12c98:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   12c9a:	4b09      	ldr	r3, [pc, #36]	; (12cc0 <arch_switch_to_main_thread+0x28>)
   12c9c:	6098      	str	r0, [r3, #8]
{
   12c9e:	460d      	mov	r5, r1
   12ca0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   12ca2:	f000 f983 	bl	12fac <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   12ca6:	4620      	mov	r0, r4
   12ca8:	f385 8809 	msr	PSP, r5
   12cac:	2100      	movs	r1, #0
   12cae:	b663      	cpsie	if
   12cb0:	f381 8811 	msr	BASEPRI, r1
   12cb4:	f3bf 8f6f 	isb	sy
   12cb8:	2200      	movs	r2, #0
   12cba:	2300      	movs	r3, #0
   12cbc:	f006 fd4c 	bl	19758 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12cc0:	20001988 	.word	0x20001988

00012cc4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12cc4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   12cc6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12cc8:	4a0b      	ldr	r2, [pc, #44]	; (12cf8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12cca:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   12ccc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12cce:	bf1e      	ittt	ne
	movne	r1, #0
   12cd0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   12cd2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   12cd4:	f00a f8c6 	blne	1ce64 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12cd8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   12cda:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   12cde:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   12ce2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   12ce6:	4905      	ldr	r1, [pc, #20]	; (12cfc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12ce8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   12cea:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12cec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   12cee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   12cf2:	4903      	ldr	r1, [pc, #12]	; (12d00 <_isr_wrapper+0x3c>)
	bx r1
   12cf4:	4708      	bx	r1
   12cf6:	0000      	.short	0x0000
	ldr r2, =_kernel
   12cf8:	20001988 	.word	0x20001988
	ldr r1, =_sw_isr_table
   12cfc:	0001d5c8 	.word	0x0001d5c8
	ldr r1, =z_arm_int_exit
   12d00:	00012d05 	.word	0x00012d05

00012d04 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   12d04:	4b04      	ldr	r3, [pc, #16]	; (12d18 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   12d06:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   12d08:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   12d0a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   12d0c:	d003      	beq.n	12d16 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   12d0e:	4903      	ldr	r1, [pc, #12]	; (12d1c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   12d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   12d14:	600a      	str	r2, [r1, #0]

00012d16 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   12d16:	4770      	bx	lr
	ldr r3, =_kernel
   12d18:	20001988 	.word	0x20001988
	ldr r1, =_SCS_ICSR
   12d1c:	e000ed04 	.word	0xe000ed04

00012d20 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   12d20:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12d22:	4b1c      	ldr	r3, [pc, #112]	; (12d94 <mem_manage_fault+0x74>)
{
   12d24:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12d26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   12d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   12d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   12d2c:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   12d2e:	0790      	lsls	r0, r2, #30
   12d30:	d520      	bpl.n	12d74 <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   12d32:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   12d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12d36:	0612      	lsls	r2, r2, #24
   12d38:	d51c      	bpl.n	12d74 <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   12d3a:	b119      	cbz	r1, 12d44 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   12d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12d3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   12d42:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   12d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12d46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12d4a:	06d2      	lsls	r2, r2, #27
   12d4c:	d415      	bmi.n	12d7a <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   12d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12d50:	079b      	lsls	r3, r3, #30
   12d52:	d412      	bmi.n	12d7a <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12d54:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12d56:	4b0f      	ldr	r3, [pc, #60]	; (12d94 <mem_manage_fault+0x74>)
   12d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12d5a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   12d5c:	bf42      	ittt	mi
   12d5e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   12d60:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   12d64:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   12d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12d68:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   12d6c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   12d6e:	2300      	movs	r3, #0
   12d70:	7023      	strb	r3, [r4, #0]

	return reason;
}
   12d72:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
   12d74:	f06f 0015 	mvn.w	r0, #21
   12d78:	e7e4      	b.n	12d44 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   12d7a:	4b06      	ldr	r3, [pc, #24]	; (12d94 <mem_manage_fault+0x74>)
   12d7c:	685b      	ldr	r3, [r3, #4]
   12d7e:	0519      	lsls	r1, r3, #20
   12d80:	d5e8      	bpl.n	12d54 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   12d82:	4629      	mov	r1, r5
   12d84:	f7ff ff72 	bl	12c6c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   12d88:	2800      	cmp	r0, #0
   12d8a:	d0e3      	beq.n	12d54 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   12d8c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   12d90:	2002      	movs	r0, #2
   12d92:	e7e0      	b.n	12d56 <mem_manage_fault+0x36>
   12d94:	e000ed00 	.word	0xe000ed00

00012d98 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12d98:	4b0d      	ldr	r3, [pc, #52]	; (12dd0 <bus_fault.constprop.0+0x38>)
   12d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   12d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12d9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12da0:	0592      	lsls	r2, r2, #22
   12da2:	d508      	bpl.n	12db6 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   12da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   12da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12da8:	0412      	lsls	r2, r2, #16
   12daa:	d504      	bpl.n	12db6 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   12dac:	b118      	cbz	r0, 12db6 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   12dae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   12db4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   12db6:	4b06      	ldr	r3, [pc, #24]	; (12dd0 <bus_fault.constprop.0+0x38>)
   12db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   12dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12dbc:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12dbe:	bf58      	it	pl
   12dc0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   12dc4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12dc6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   12dca:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12dcc:	7008      	strb	r0, [r1, #0]

	return reason;
}
   12dce:	4770      	bx	lr
   12dd0:	e000ed00 	.word	0xe000ed00

00012dd4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   12dd4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12dd6:	4b48      	ldr	r3, [pc, #288]	; (12ef8 <z_arm_fault+0x124>)
   12dd8:	685b      	ldr	r3, [r3, #4]
{
   12dda:	b08a      	sub	sp, #40	; 0x28
   12ddc:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
   12de2:	2600      	movs	r6, #0
   12de4:	f386 8811 	msr	BASEPRI, r6
   12de8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   12dec:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   12df0:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   12df4:	d111      	bne.n	12e1a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   12df6:	f002 010c 	and.w	r1, r2, #12
   12dfa:	2908      	cmp	r1, #8
   12dfc:	d00d      	beq.n	12e1a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   12dfe:	0711      	lsls	r1, r2, #28
   12e00:	d401      	bmi.n	12e06 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   12e02:	4605      	mov	r5, r0
			*nested_exc = true;
   12e04:	2601      	movs	r6, #1
	*recoverable = false;
   12e06:	2200      	movs	r2, #0
	switch (fault) {
   12e08:	3b03      	subs	r3, #3
	*recoverable = false;
   12e0a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   12e0e:	2b03      	cmp	r3, #3
   12e10:	d86b      	bhi.n	12eea <z_arm_fault+0x116>
   12e12:	e8df f003 	tbb	[pc, r3]
   12e16:	5504      	.short	0x5504
   12e18:	5d59      	.short	0x5d59
		return NULL;
   12e1a:	4635      	mov	r5, r6
   12e1c:	e7f3      	b.n	12e06 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12e1e:	4b36      	ldr	r3, [pc, #216]	; (12ef8 <z_arm_fault+0x124>)
   12e20:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   12e22:	f014 0402 	ands.w	r4, r4, #2
   12e26:	d160      	bne.n	12eea <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   12e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12e2a:	2a00      	cmp	r2, #0
   12e2c:	db15      	blt.n	12e5a <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   12e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12e30:	0052      	lsls	r2, r2, #1
   12e32:	d512      	bpl.n	12e5a <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
   12e34:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   12e36:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   12e3a:	f64d 7202 	movw	r2, #57090	; 0xdf02
   12e3e:	4291      	cmp	r1, r2
   12e40:	d00a      	beq.n	12e58 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
   12e42:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   12e46:	b30a      	cbz	r2, 12e8c <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
   12e48:	f10d 0207 	add.w	r2, sp, #7
   12e4c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   12e4e:	4628      	mov	r0, r5
   12e50:	f7ff ff66 	bl	12d20 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   12e54:	4604      	mov	r4, r0
		break;
   12e56:	e000      	b.n	12e5a <z_arm_fault+0x86>
			reason = esf->basic.r0;
   12e58:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   12e5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12e5e:	b99b      	cbnz	r3, 12e88 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   12e60:	2220      	movs	r2, #32
   12e62:	4629      	mov	r1, r5
   12e64:	a802      	add	r0, sp, #8
   12e66:	f007 f89c 	bl	19fa2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   12e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12e6c:	2e00      	cmp	r6, #0
   12e6e:	d03e      	beq.n	12eee <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   12e70:	f3c3 0208 	ubfx	r2, r3, #0, #9
   12e74:	b922      	cbnz	r2, 12e80 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   12e76:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   12e7a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12e7e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   12e80:	a902      	add	r1, sp, #8
   12e82:	4620      	mov	r0, r4
   12e84:	f007 f856 	bl	19f34 <z_arm_fatal_error>
}
   12e88:	b00a      	add	sp, #40	; 0x28
   12e8a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   12e8c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   12e90:	b12a      	cbz	r2, 12e9e <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
   12e92:	f10d 0107 	add.w	r1, sp, #7
   12e96:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   12e98:	f7ff ff7e 	bl	12d98 <bus_fault.constprop.0>
   12e9c:	e7da      	b.n	12e54 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
   12e9e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   12ea0:	b292      	uxth	r2, r2
   12ea2:	2a00      	cmp	r2, #0
   12ea4:	d0d9      	beq.n	12e5a <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12ea6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   12eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12eb4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   12eb8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   12ebc:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
   12ebe:	e7cc      	b.n	12e5a <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
   12ec0:	f10d 0207 	add.w	r2, sp, #7
   12ec4:	2100      	movs	r1, #0
   12ec6:	e7c2      	b.n	12e4e <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
   12ec8:	f10d 0107 	add.w	r1, sp, #7
   12ecc:	2000      	movs	r0, #0
   12ece:	e7e3      	b.n	12e98 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12ed0:	4b09      	ldr	r3, [pc, #36]	; (12ef8 <z_arm_fault+0x124>)
   12ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   12ed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12eda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12ede:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12ee0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   12ee4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   12ee8:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12eea:	2400      	movs	r4, #0
   12eec:	e7b5      	b.n	12e5a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12eee:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   12ef2:	f023 0301 	bic.w	r3, r3, #1
   12ef6:	e7c2      	b.n	12e7e <z_arm_fault+0xaa>
   12ef8:	e000ed00 	.word	0xe000ed00

00012efc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   12efc:	4a02      	ldr	r2, [pc, #8]	; (12f08 <z_arm_fault_init+0xc>)
   12efe:	6953      	ldr	r3, [r2, #20]
   12f00:	f043 0310 	orr.w	r3, r3, #16
   12f04:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   12f06:	4770      	bx	lr
   12f08:	e000ed00 	.word	0xe000ed00

00012f0c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   12f0c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   12f10:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   12f14:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   12f16:	4672      	mov	r2, lr
	bl z_arm_fault
   12f18:	f7ff ff5c 	bl	12dd4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   12f1c:	bd01      	pop	{r0, pc}
   12f1e:	bf00      	nop

00012f20 <z_arm_interrupt_init>:
   12f20:	4804      	ldr	r0, [pc, #16]	; (12f34 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   12f22:	2300      	movs	r3, #0
   12f24:	2120      	movs	r1, #32
   12f26:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12f28:	3301      	adds	r3, #1
   12f2a:	2b30      	cmp	r3, #48	; 0x30
   12f2c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   12f30:	d1f9      	bne.n	12f26 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   12f32:	4770      	bx	lr
   12f34:	e000e100 	.word	0xe000e100

00012f38 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   12f38:	f00a fa68 	bl	1d40c <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12f3c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   12f3e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12f42:	4808      	ldr	r0, [pc, #32]	; (12f64 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12f44:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   12f48:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12f4a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12f4e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12f52:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12f54:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12f56:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12f5a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12f5e:	f7ff fdf1 	bl	12b44 <z_arm_prep_c>
   12f62:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   12f64:	20002880 	.word	0x20002880

00012f68 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   12f68:	4b08      	ldr	r3, [pc, #32]	; (12f8c <z_impl_k_thread_abort+0x24>)
   12f6a:	689b      	ldr	r3, [r3, #8]
   12f6c:	4283      	cmp	r3, r0
   12f6e:	d10b      	bne.n	12f88 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12f70:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   12f74:	b143      	cbz	r3, 12f88 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12f76:	4b06      	ldr	r3, [pc, #24]	; (12f90 <z_impl_k_thread_abort+0x28>)
   12f78:	685a      	ldr	r2, [r3, #4]
   12f7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   12f7e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   12f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   12f82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   12f86:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   12f88:	f005 bfde 	b.w	18f48 <z_thread_abort>
   12f8c:	20001988 	.word	0x20001988
   12f90:	e000ed00 	.word	0xe000ed00

00012f94 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   12f94:	4b02      	ldr	r3, [pc, #8]	; (12fa0 <z_arm_configure_static_mpu_regions+0xc>)
   12f96:	4a03      	ldr	r2, [pc, #12]	; (12fa4 <z_arm_configure_static_mpu_regions+0x10>)
   12f98:	4803      	ldr	r0, [pc, #12]	; (12fa8 <z_arm_configure_static_mpu_regions+0x14>)
   12f9a:	2101      	movs	r1, #1
   12f9c:	f000 b86e 	b.w	1307c <arm_core_mpu_configure_static_mpu_regions>
   12fa0:	20040000 	.word	0x20040000
   12fa4:	20000000 	.word	0x20000000
   12fa8:	0001d80c 	.word	0x0001d80c

00012fac <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   12fac:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   12fae:	4b05      	ldr	r3, [pc, #20]	; (12fc4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   12fb0:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   12fb2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   12fb4:	4a04      	ldr	r2, [pc, #16]	; (12fc8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   12fb6:	2140      	movs	r1, #64	; 0x40
   12fb8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   12fbc:	4618      	mov	r0, r3
   12fbe:	2101      	movs	r1, #1
   12fc0:	f000 b866 	b.w	13090 <arm_core_mpu_configure_dynamic_mpu_regions>
   12fc4:	20000be8 	.word	0x20000be8
   12fc8:	150b0000 	.word	0x150b0000

00012fcc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   12fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   12fce:	4f1f      	ldr	r7, [pc, #124]	; (1304c <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   12fd0:	2600      	movs	r6, #0
   12fd2:	428e      	cmp	r6, r1
   12fd4:	db01      	blt.n	12fda <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   12fd6:	4610      	mov	r0, r2
   12fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   12fda:	6844      	ldr	r4, [r0, #4]
   12fdc:	b39c      	cbz	r4, 13046 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
   12fde:	b153      	cbz	r3, 12ff6 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   12fe0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   12fe4:	ea14 0f0c 	tst.w	r4, ip
   12fe8:	d118      	bne.n	1301c <mpu_configure_regions+0x50>
		&&
   12fea:	2c1f      	cmp	r4, #31
   12fec:	d916      	bls.n	1301c <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   12fee:	6805      	ldr	r5, [r0, #0]
		&&
   12ff0:	ea1c 0f05 	tst.w	ip, r5
   12ff4:	d112      	bne.n	1301c <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   12ff6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   12ff8:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12ffa:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12ffe:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   13000:	d90f      	bls.n	13022 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
   13002:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   13006:	d80e      	bhi.n	13026 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   13008:	3c01      	subs	r4, #1
   1300a:	fab4 f484 	clz	r4, r4
   1300e:	f1c4 041f 	rsb	r4, r4, #31
   13012:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   13014:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   13016:	ea4c 0404 	orr.w	r4, ip, r4
   1301a:	d906      	bls.n	1302a <mpu_configure_regions+0x5e>
			return -EINVAL;
   1301c:	f06f 0215 	mvn.w	r2, #21
   13020:	e7d9      	b.n	12fd6 <mpu_configure_regions+0xa>
		return REGION_32B;
   13022:	2408      	movs	r4, #8
   13024:	e7f6      	b.n	13014 <mpu_configure_regions+0x48>
		return REGION_4G;
   13026:	243e      	movs	r4, #62	; 0x3e
   13028:	e7f4      	b.n	13014 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1302a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   1302e:	4315      	orrs	r5, r2
   13030:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13034:	f044 0401 	orr.w	r4, r4, #1
   13038:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1303c:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
   13040:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13042:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   13046:	3601      	adds	r6, #1
   13048:	300c      	adds	r0, #12
   1304a:	e7c2      	b.n	12fd2 <mpu_configure_regions+0x6>
   1304c:	e000ed00 	.word	0xe000ed00

00013050 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13050:	4b04      	ldr	r3, [pc, #16]	; (13064 <arm_core_mpu_enable+0x14>)
   13052:	2205      	movs	r2, #5
   13054:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   13058:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1305c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13060:	4770      	bx	lr
   13062:	bf00      	nop
   13064:	e000ed00 	.word	0xe000ed00

00013068 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   13068:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1306c:	4b02      	ldr	r3, [pc, #8]	; (13078 <arm_core_mpu_disable+0x10>)
   1306e:	2200      	movs	r2, #0
   13070:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   13074:	4770      	bx	lr
   13076:	bf00      	nop
   13078:	e000ed00 	.word	0xe000ed00

0001307c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1307c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1307e:	4c03      	ldr	r4, [pc, #12]	; (1308c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13080:	2301      	movs	r3, #1
   13082:	7822      	ldrb	r2, [r4, #0]
   13084:	f7ff ffa2 	bl	12fcc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13088:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1308a:	bd10      	pop	{r4, pc}
   1308c:	200019da 	.word	0x200019da

00013090 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   13090:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13092:	4a09      	ldr	r2, [pc, #36]	; (130b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   13094:	2300      	movs	r3, #0
   13096:	7812      	ldrb	r2, [r2, #0]
   13098:	f7ff ff98 	bl	12fcc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   1309c:	f110 0f16 	cmn.w	r0, #22
   130a0:	d002      	beq.n	130a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   130a2:	4a06      	ldr	r2, [pc, #24]	; (130bc <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   130a4:	2807      	cmp	r0, #7
   130a6:	dd00      	ble.n	130aa <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   130a8:	bd08      	pop	{r3, pc}
   130aa:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   130ae:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
   130b2:	3001      	adds	r0, #1
   130b4:	e7f6      	b.n	130a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
   130b6:	bf00      	nop
   130b8:	200019da 	.word	0x200019da
   130bc:	e000ed00 	.word	0xe000ed00

000130c0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   130c0:	4914      	ldr	r1, [pc, #80]	; (13114 <z_arm_mpu_init+0x54>)
   130c2:	6808      	ldr	r0, [r1, #0]
   130c4:	2808      	cmp	r0, #8
{
   130c6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   130c8:	d821      	bhi.n	1310e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   130ca:	f7ff ffcd 	bl	13068 <arm_core_mpu_disable>
   130ce:	4c12      	ldr	r4, [pc, #72]	; (13118 <z_arm_mpu_init+0x58>)
   130d0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   130d2:	2200      	movs	r2, #0
   130d4:	4290      	cmp	r0, r2
   130d6:	f101 010c 	add.w	r1, r1, #12
   130da:	d105      	bne.n	130e8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   130dc:	4b0f      	ldr	r3, [pc, #60]	; (1311c <z_arm_mpu_init+0x5c>)
   130de:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   130e0:	f7ff ffb6 	bl	13050 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   130e4:	2000      	movs	r0, #0
}
   130e6:	bd10      	pop	{r4, pc}
   130e8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   130ec:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   130f0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   130f4:	4313      	orrs	r3, r2
   130f6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   130fa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   130fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
   13102:	f043 0301 	orr.w	r3, r3, #1
   13106:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1310a:	3201      	adds	r2, #1
   1310c:	e7e2      	b.n	130d4 <z_arm_mpu_init+0x14>
		return -1;
   1310e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13112:	e7e8      	b.n	130e6 <z_arm_mpu_init+0x26>
   13114:	0001d818 	.word	0x0001d818
   13118:	e000ed00 	.word	0xe000ed00
   1311c:	200019da 	.word	0x200019da

00013120 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   13120:	4b01      	ldr	r3, [pc, #4]	; (13128 <__stdout_hook_install+0x8>)
   13122:	6018      	str	r0, [r3, #0]
}
   13124:	4770      	bx	lr
   13126:	bf00      	nop
   13128:	200000ec 	.word	0x200000ec

0001312c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   1312c:	f04f 0220 	mov.w	r2, #32
   13130:	f3ef 8311 	mrs	r3, BASEPRI
   13134:	f382 8812 	msr	BASEPRI_MAX, r2
   13138:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1313c:	4a04      	ldr	r2, [pc, #16]	; (13150 <nordicsemi_nrf52_init+0x24>)
   1313e:	2101      	movs	r1, #1
   13140:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   13144:	f383 8811 	msr	BASEPRI, r3
   13148:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1314c:	2000      	movs	r0, #0
   1314e:	4770      	bx	lr
   13150:	4001e000 	.word	0x4001e000

00013154 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13154:	b120      	cbz	r0, 13160 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   13156:	4b03      	ldr	r3, [pc, #12]	; (13164 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13158:	0180      	lsls	r0, r0, #6
   1315a:	f043 0301 	orr.w	r3, r3, #1
   1315e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   13160:	4770      	bx	lr
   13162:	bf00      	nop
   13164:	0001d7b0 	.word	0x0001d7b0

00013168 <board_init>:

#include <init.h>
#include <drivers/gpio.h>

static int board_init(const struct device *dev)
{
   13168:	b510      	push	{r4, lr}
   1316a:	4c0b      	ldr	r4, [pc, #44]	; (13198 <board_init+0x30>)
   1316c:	4620      	mov	r0, r4
   1316e:	f009 fe10 	bl	1cd92 <z_device_is_ready>
	const struct gpio_dt_spec pull_up =
		GPIO_DT_SPEC_GET(DT_PATH(zephyr_user), pull_up_gpios);

	ARG_UNUSED(dev);

	if (!device_is_ready(pull_up.port)) {
   13172:	b168      	cbz	r0, 13190 <board_init+0x28>
	struct gpio_driver_data *data =
   13174:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
   13176:	68a1      	ldr	r1, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   13178:	6813      	ldr	r3, [r2, #0]
   1317a:	f023 0301 	bic.w	r3, r3, #1
   1317e:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   13180:	4620      	mov	r0, r4
   13182:	680b      	ldr	r3, [r1, #0]
		return -ENODEV;
	}

	return gpio_pin_configure_dt(&pull_up, GPIO_OUTPUT_INIT_HIGH);
}
   13184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13188:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   1318c:	2100      	movs	r1, #0
   1318e:	4718      	bx	r3
   13190:	f06f 0012 	mvn.w	r0, #18
   13194:	bd10      	pop	{r4, pc}
   13196:	bf00      	nop
   13198:	0001d4f0 	.word	0x0001d4f0

0001319c <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   1319c:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   131a0:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
   131a2:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   131a4:	d004      	beq.n	131b0 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
   131a6:	f010 0f78 	tst.w	r0, #120	; 0x78
   131aa:	d001      	beq.n	131b0 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
   131ac:	2000      	movs	r0, #0
   131ae:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   131b0:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
   131b2:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
   131b6:	f000 0008 	and.w	r0, r0, #8
   131ba:	da05      	bge.n	131c8 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   131bc:	b958      	cbnz	r0, 131d6 <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
   131be:	4808      	ldr	r0, [pc, #32]	; (131e0 <endpoint_ctx+0x44>)
   131c0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   131c4:	304c      	adds	r0, #76	; 0x4c
   131c6:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   131c8:	b938      	cbnz	r0, 131da <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   131ca:	4805      	ldr	r0, [pc, #20]	; (131e0 <endpoint_ctx+0x44>)
   131cc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   131d0:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
   131d4:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   131d6:	4803      	ldr	r0, [pc, #12]	; (131e4 <endpoint_ctx+0x48>)
   131d8:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   131da:	4803      	ldr	r0, [pc, #12]	; (131e8 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
   131dc:	4770      	bx	lr
   131de:	bf00      	nop
   131e0:	200011f4 	.word	0x200011f4
   131e4:	20001340 	.word	0x20001340
   131e8:	20001460 	.word	0x20001460

000131ec <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   131ec:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   131ee:	4801      	ldr	r0, [pc, #4]	; (131f4 <usbd_evt_put+0x8>)
   131f0:	f009 beba 	b.w	1cf68 <k_queue_append>
   131f4:	200005c0 	.word	0x200005c0

000131f8 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   131f8:	4901      	ldr	r1, [pc, #4]	; (13200 <usbd_work_schedule+0x8>)
   131fa:	4802      	ldr	r0, [pc, #8]	; (13204 <usbd_work_schedule+0xc>)
   131fc:	f009 bf05 	b.w	1d00a <k_work_submit_to_queue>
   13200:	2000121c 	.word	0x2000121c
   13204:	20000740 	.word	0x20000740

00013208 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   13208:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   1320a:	480b      	ldr	r0, [pc, #44]	; (13238 <usb_init+0x30>)
   1320c:	f002 fd94 	bl	15d38 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   13210:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   13212:	480a      	ldr	r0, [pc, #40]	; (1323c <usb_init+0x34>)
   13214:	f002 fdd6 	bl	15dc4 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   13218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1321c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13220:	4907      	ldr	r1, [pc, #28]	; (13240 <usb_init+0x38>)
   13222:	4808      	ldr	r0, [pc, #32]	; (13244 <usb_init+0x3c>)
   13224:	9400      	str	r4, [sp, #0]
   13226:	f005 fb2f 	bl	18888 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   1322a:	4907      	ldr	r1, [pc, #28]	; (13248 <usb_init+0x40>)
   1322c:	4807      	ldr	r0, [pc, #28]	; (1324c <usb_init+0x44>)
   1322e:	f009 fee3 	bl	1cff8 <k_work_init>

	return 0;
}
   13232:	4620      	mov	r0, r4
   13234:	b002      	add	sp, #8
   13236:	bd10      	pop	{r4, pc}
   13238:	0001db9e 	.word	0x0001db9e
   1323c:	0001d838 	.word	0x0001d838
   13240:	20001e80 	.word	0x20001e80
   13244:	20000740 	.word	0x20000740
   13248:	00013565 	.word	0x00013565
   1324c:	2000121c 	.word	0x2000121c

00013250 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
   13250:	4802      	ldr	r0, [pc, #8]	; (1325c <usbd_evt_get+0xc>)
   13252:	2200      	movs	r2, #0
   13254:	2300      	movs	r3, #0
   13256:	f005 b9b5 	b.w	185c4 <z_impl_k_queue_get>
   1325a:	bf00      	nop
   1325c:	200005c0 	.word	0x200005c0

00013260 <usbd_evt_flush>:
{
   13260:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   13262:	4c05      	ldr	r4, [pc, #20]	; (13278 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   13264:	f7ff fff4 	bl	13250 <usbd_evt_get>
		if (ev) {
   13268:	b120      	cbz	r0, 13274 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1326a:	1d01      	adds	r1, r0, #4
   1326c:	4620      	mov	r0, r4
   1326e:	f009 fdc5 	bl	1cdfc <k_mem_slab_free>
	} while (ev != NULL);
   13272:	e7f7      	b.n	13264 <usbd_evt_flush+0x4>
}
   13274:	bd10      	pop	{r4, pc}
   13276:	bf00      	nop
   13278:	20000590 	.word	0x20000590

0001327c <usbd_evt_alloc>:
{
   1327c:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1327e:	2300      	movs	r3, #0
   13280:	480e      	ldr	r0, [pc, #56]	; (132bc <usbd_evt_alloc+0x40>)
   13282:	2200      	movs	r2, #0
   13284:	a901      	add	r1, sp, #4
   13286:	f004 ffe5 	bl	18254 <k_mem_slab_alloc>
   1328a:	b190      	cbz	r0, 132b2 <usbd_evt_alloc+0x36>
		usbd_evt_flush();
   1328c:	f7ff ffe8 	bl	13260 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   13290:	480a      	ldr	r0, [pc, #40]	; (132bc <usbd_evt_alloc+0x40>)
   13292:	2200      	movs	r2, #0
   13294:	2300      	movs	r3, #0
   13296:	a901      	add	r1, sp, #4
   13298:	f004 ffdc 	bl	18254 <k_mem_slab_alloc>
   1329c:	b938      	cbnz	r0, 132ae <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
   1329e:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
   132a0:	2304      	movs	r3, #4
		ev->block = block;
   132a2:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   132a4:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   132a6:	f7ff ffa1 	bl	131ec <usbd_evt_put>
		usbd_work_schedule();
   132aa:	f7ff ffa5 	bl	131f8 <usbd_work_schedule>
		return NULL;
   132ae:	2000      	movs	r0, #0
   132b0:	e001      	b.n	132b6 <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
   132b2:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   132b4:	6040      	str	r0, [r0, #4]
}
   132b6:	b003      	add	sp, #12
   132b8:	f85d fb04 	ldr.w	pc, [sp], #4
   132bc:	20000590 	.word	0x20000590

000132c0 <usbd_event_transfer_data>:
		endpoint_ctx(p_event->data.eptransfer.ep);
   132c0:	7881      	ldrb	r1, [r0, #2]
{
   132c2:	b570      	push	{r4, r5, r6, lr}
   132c4:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   132c6:	4608      	mov	r0, r1
   132c8:	f7ff ff68 	bl	1319c <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   132cc:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   132ce:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   132d0:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   132d2:	d512      	bpl.n	132fa <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
   132d4:	2d00      	cmp	r5, #0
   132d6:	d143      	bne.n	13360 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   132d8:	f7ff ffd0 	bl	1327c <usbd_evt_alloc>
			if (!ev) {
   132dc:	4603      	mov	r3, r0
   132de:	2800      	cmp	r0, #0
   132e0:	d03e      	beq.n	13360 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
   132e2:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   132e4:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   132e6:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   132e8:	2203      	movs	r2, #3
   132ea:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   132ec:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
   132ee:	f7ff ff7d 	bl	131ec <usbd_evt_put>
}
   132f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usbd_work_schedule();
   132f6:	f7ff bf7f 	b.w	131f8 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   132fa:	b14d      	cbz	r5, 13310 <usbd_event_transfer_data+0x50>
   132fc:	2d01      	cmp	r5, #1
   132fe:	d12f      	bne.n	13360 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   13300:	f7ff ffbc 	bl	1327c <usbd_evt_alloc>
			if (!ev) {
   13304:	4603      	mov	r3, r0
   13306:	b358      	cbz	r0, 13360 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
   13308:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   1330a:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1330c:	7305      	strb	r5, [r0, #12]
   1330e:	e7ed      	b.n	132ec <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
   13310:	f7ff ffb4 	bl	1327c <usbd_evt_alloc>
			if (!ev) {
   13314:	b320      	cbz	r0, 13360 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
   13316:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   13318:	4b12      	ldr	r3, [pc, #72]	; (13364 <usbd_event_transfer_data+0xa4>)
   1331a:	f012 0f80 	tst.w	r2, #128	; 0x80
   1331e:	f002 0108 	and.w	r1, r2, #8
   13322:	d011      	beq.n	13348 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   13324:	b141      	cbz	r1, 13338 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
   13326:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   1332a:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
   1332c:	2301      	movs	r3, #1
   1332e:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   13330:	2302      	movs	r3, #2
   13332:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   13334:	6084      	str	r4, [r0, #8]
   13336:	e7da      	b.n	132ee <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   13338:	f002 020f 	and.w	r2, r2, #15
   1333c:	2114      	movs	r1, #20
   1333e:	fb01 3302 	mla	r3, r1, r2, r3
   13342:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   13346:	e7f0      	b.n	1332a <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   13348:	b111      	cbz	r1, 13350 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   1334a:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   1334e:	e7ec      	b.n	1332a <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   13350:	f002 020f 	and.w	r2, r2, #15
   13354:	2114      	movs	r1, #20
   13356:	fb01 3302 	mla	r3, r1, r2, r3
   1335a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   1335e:	e7e4      	b.n	1332a <usbd_event_transfer_data+0x6a>
}
   13360:	bd70      	pop	{r4, r5, r6, pc}
   13362:	bf00      	nop
   13364:	40027000 	.word	0x40027000

00013368 <usb_dc_power_event_handler>:
	switch (event) {
   13368:	2802      	cmp	r0, #2
{
   1336a:	b510      	push	{r4, lr}
   1336c:	d811      	bhi.n	13392 <usb_dc_power_event_handler+0x2a>
   1336e:	4b09      	ldr	r3, [pc, #36]	; (13394 <usb_dc_power_event_handler+0x2c>)
   13370:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   13372:	f7ff ff83 	bl	1327c <usbd_evt_alloc>
	if (!ev) {
   13376:	b160      	cbz	r0, 13392 <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
   13378:	2200      	movs	r2, #0
   1337a:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   1337c:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   1337e:	f7ff ff35 	bl	131ec <usbd_evt_put>
	if (usbd_ctx.attached) {
   13382:	4b05      	ldr	r3, [pc, #20]	; (13398 <usb_dc_power_event_handler+0x30>)
   13384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   13388:	b11b      	cbz	r3, 13392 <usb_dc_power_event_handler+0x2a>
}
   1338a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   1338e:	f7ff bf33 	b.w	131f8 <usbd_work_schedule>
}
   13392:	bd10      	pop	{r4, pc}
   13394:	0001db9b 	.word	0x0001db9b
   13398:	200011f4 	.word	0x200011f4

0001339c <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   1339c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1339e:	490f      	ldr	r1, [pc, #60]	; (133dc <hfxo_stop.constprop.0.isra.0+0x40>)
   133a0:	f3bf 8f5b 	dmb	ish
   133a4:	f101 0320 	add.w	r3, r1, #32
   133a8:	2200      	movs	r2, #0
   133aa:	e853 0f00 	ldrex	r0, [r3]
   133ae:	2801      	cmp	r0, #1
   133b0:	d103      	bne.n	133ba <hfxo_stop.constprop.0.isra.0+0x1e>
   133b2:	e843 2400 	strex	r4, r2, [r3]
   133b6:	2c00      	cmp	r4, #0
   133b8:	d1f7      	bne.n	133aa <hfxo_stop.constprop.0.isra.0+0xe>
   133ba:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   133be:	d10b      	bne.n	133d8 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   133c0:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   133c2:	310c      	adds	r1, #12
   133c4:	4620      	mov	r0, r4
   133c6:	f006 f97f 	bl	196c8 <onoff_cancel>

	if (rv == -EALREADY) {
   133ca:	3078      	adds	r0, #120	; 0x78
   133cc:	d104      	bne.n	133d8 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
   133ce:	4620      	mov	r0, r4
}
   133d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   133d4:	f006 b953 	b.w	1967e <onoff_release>
   133d8:	bd10      	pop	{r4, pc}
   133da:	bf00      	nop
   133dc:	200011f4 	.word	0x200011f4

000133e0 <usbd_event_handler>:
{
   133e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   133e2:	4606      	mov	r6, r0
   133e4:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
   133e6:	2214      	movs	r2, #20
   133e8:	2100      	movs	r1, #0
   133ea:	a803      	add	r0, sp, #12
   133ec:	f006 fde4 	bl	19fb8 <memset>
	switch (p_event->type) {
   133f0:	7833      	ldrb	r3, [r6, #0]
   133f2:	3b01      	subs	r3, #1
   133f4:	2b05      	cmp	r3, #5
   133f6:	d821      	bhi.n	1343c <usbd_event_handler+0x5c>
   133f8:	e8df f003 	tbb	[pc, r3]
   133fc:	1414037a 	.word	0x1414037a
   13400:	166a      	.short	0x166a
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   13402:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
   13404:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
   13408:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   1340a:	f7ff ff37 	bl	1327c <usbd_evt_alloc>
		if (!ev) {
   1340e:	4603      	mov	r3, r0
   13410:	b1a0      	cbz	r0, 1343c <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   13412:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   13414:	f100 0208 	add.w	r2, r0, #8
   13418:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
   1341c:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   13420:	4618      	mov	r0, r3
   13422:	e01d      	b.n	13460 <usbd_event_handler+0x80>
		evt.evt.pwr_evt.state = USBD_RESUMED;
   13424:	2304      	movs	r3, #4
   13426:	e7ed      	b.n	13404 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   13428:	78b1      	ldrb	r1, [r6, #2]
   1342a:	4608      	mov	r0, r1
   1342c:	f7ff feb6 	bl	1319c <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   13430:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   13432:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
   13434:	b123      	cbz	r3, 13440 <usbd_event_handler+0x60>
   13436:	3b01      	subs	r3, #1
   13438:	2b02      	cmp	r3, #2
   1343a:	d943      	bls.n	134c4 <usbd_event_handler+0xe4>
}
   1343c:	b009      	add	sp, #36	; 0x24
   1343e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   13440:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   13442:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   13444:	d513      	bpl.n	1346e <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
   13446:	2d00      	cmp	r5, #0
   13448:	d1f8      	bne.n	1343c <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   1344a:	f7ff ff17 	bl	1327c <usbd_evt_alloc>
			if (!ev) {
   1344e:	4603      	mov	r3, r0
   13450:	2800      	cmp	r0, #0
   13452:	d0f3      	beq.n	1343c <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   13454:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   13456:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   13458:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   1345a:	2203      	movs	r2, #3
   1345c:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1345e:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
   13460:	f7ff fec4 	bl	131ec <usbd_evt_put>
}
   13464:	b009      	add	sp, #36	; 0x24
   13466:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
   1346a:	f7ff bec5 	b.w	131f8 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   1346e:	b155      	cbz	r5, 13486 <usbd_event_handler+0xa6>
   13470:	2d01      	cmp	r5, #1
   13472:	d1e3      	bne.n	1343c <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   13474:	f7ff ff02 	bl	1327c <usbd_evt_alloc>
			if (!ev) {
   13478:	4603      	mov	r3, r0
   1347a:	2800      	cmp	r0, #0
   1347c:	d0de      	beq.n	1343c <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   1347e:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   13480:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   13482:	7305      	strb	r5, [r0, #12]
   13484:	e7eb      	b.n	1345e <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
   13486:	f7ff fef9 	bl	1327c <usbd_evt_alloc>
			if (!ev) {
   1348a:	4607      	mov	r7, r0
   1348c:	2800      	cmp	r0, #0
   1348e:	d0d5      	beq.n	1343c <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   13490:	2301      	movs	r3, #1
   13492:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   13494:	2302      	movs	r3, #2
   13496:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   13498:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   1349a:	f104 010c 	add.w	r1, r4, #12
   1349e:	78b0      	ldrb	r0, [r6, #2]
   134a0:	f007 fd95 	bl	1afce <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   134a4:	4a13      	ldr	r2, [pc, #76]	; (134f4 <usbd_event_handler+0x114>)
   134a6:	68e1      	ldr	r1, [r4, #12]
   134a8:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   134ac:	428b      	cmp	r3, r1
   134ae:	d906      	bls.n	134be <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   134b0:	1a5b      	subs	r3, r3, r1
   134b2:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   134b6:	f003 fead 	bl	17214 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   134ba:	4638      	mov	r0, r7
   134bc:	e7d0      	b.n	13460 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
   134be:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
   134c2:	e7fa      	b.n	134ba <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
   134c4:	4630      	mov	r0, r6
}
   134c6:	b009      	add	sp, #36	; 0x24
   134c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
   134cc:	f7ff bef8 	b.w	132c0 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
   134d0:	a801      	add	r0, sp, #4
   134d2:	f003 fe79 	bl	171c8 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   134d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   134da:	2b05      	cmp	r3, #5
   134dc:	d104      	bne.n	134e8 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   134de:	f89d 3004 	ldrb.w	r3, [sp, #4]
   134e2:	f013 0f60 	tst.w	r3, #96	; 0x60
   134e6:	d0a9      	beq.n	1343c <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   134e8:	4b03      	ldr	r3, [pc, #12]	; (134f8 <usbd_event_handler+0x118>)
   134ea:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
   134ec:	2401      	movs	r4, #1
   134ee:	e78c      	b.n	1340a <usbd_event_handler+0x2a>
	switch (p_event->type) {
   134f0:	2402      	movs	r4, #2
   134f2:	e78a      	b.n	1340a <usbd_event_handler+0x2a>
   134f4:	200011f4 	.word	0x200011f4
   134f8:	20001360 	.word	0x20001360

000134fc <eps_ctx_init>:
{
   134fc:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   134fe:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   13500:	f064 007f 	orn	r0, r4, #127	; 0x7f
   13504:	b2c0      	uxtb	r0, r0
   13506:	f7ff fe49 	bl	1319c <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1350a:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   1350c:	f006 fd72 	bl	19ff4 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   13510:	2c08      	cmp	r4, #8
   13512:	d1f5      	bne.n	13500 <eps_ctx_init+0x4>
   13514:	4d0f      	ldr	r5, [pc, #60]	; (13554 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   13516:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   13518:	b2e0      	uxtb	r0, r4
   1351a:	f7ff fe3f 	bl	1319c <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   1351e:	6903      	ldr	r3, [r0, #16]
   13520:	b903      	cbnz	r3, 13524 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   13522:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   13524:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   13526:	f006 fd65 	bl	19ff4 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1352a:	2c08      	cmp	r4, #8
   1352c:	f105 0540 	add.w	r5, r5, #64	; 0x40
   13530:	d1f2      	bne.n	13518 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   13532:	4c09      	ldr	r4, [pc, #36]	; (13558 <eps_ctx_init+0x5c>)
   13534:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   13538:	f006 fd5c 	bl	19ff4 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   1353c:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
   13540:	b913      	cbnz	r3, 13548 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   13542:	4b06      	ldr	r3, [pc, #24]	; (1355c <eps_ctx_init+0x60>)
   13544:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   13548:	4805      	ldr	r0, [pc, #20]	; (13560 <eps_ctx_init+0x64>)
   1354a:	f006 fd53 	bl	19ff4 <ep_ctx_reset>
}
   1354e:	2000      	movs	r0, #0
   13550:	bd38      	pop	{r3, r4, r5, pc}
   13552:	bf00      	nop
   13554:	20000ff4 	.word	0x20000ff4
   13558:	200011f4 	.word	0x200011f4
   1355c:	20000bf4 	.word	0x20000bf4
   13560:	20001460 	.word	0x20001460

00013564 <usbd_work_handler>:
{
   13564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   13568:	4ca8      	ldr	r4, [pc, #672]	; (1380c <usbd_work_handler+0x2a8>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1356a:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 13810 <usbd_work_handler+0x2ac>
{
   1356e:	b085      	sub	sp, #20
   13570:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   13572:	f7ff fe6d 	bl	13250 <usbd_evt_get>
   13576:	b910      	cbnz	r0, 1357e <usbd_work_handler+0x1a>
}
   13578:	b005      	add	sp, #20
   1357a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   1357e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   13582:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   13584:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   13588:	b93b      	cbnz	r3, 1359a <usbd_work_handler+0x36>
   1358a:	2a00      	cmp	r2, #0
   1358c:	f000 8086 	beq.w	1369c <usbd_work_handler+0x138>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   13590:	4649      	mov	r1, r9
   13592:	4640      	mov	r0, r8
   13594:	f009 fc32 	bl	1cdfc <k_mem_slab_free>
}
   13598:	e7eb      	b.n	13572 <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   1359a:	2a04      	cmp	r2, #4
   1359c:	d8f8      	bhi.n	13590 <usbd_work_handler+0x2c>
   1359e:	e8df f012 	tbh	[pc, r2, lsl #1]
   135a2:	007d      	.short	0x007d
   135a4:	01030005 	.word	0x01030005
   135a8:	01430119 	.word	0x01430119
	switch (ep_evt->evt_type) {
   135ac:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   135ae:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
   135b0:	2b03      	cmp	r3, #3
   135b2:	d8ed      	bhi.n	13590 <usbd_work_handler+0x2c>
   135b4:	e8df f003 	tbb	[pc, r3]
   135b8:	5f5a3d02 	.word	0x5f5a3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   135bc:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   135be:	2208      	movs	r2, #8
   135c0:	2100      	movs	r1, #0
   135c2:	4630      	mov	r0, r6
   135c4:	f006 fcf8 	bl	19fb8 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   135c8:	4b92      	ldr	r3, [pc, #584]	; (13814 <usbd_work_handler+0x2b0>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   135ca:	4893      	ldr	r0, [pc, #588]	; (13818 <usbd_work_handler+0x2b4>)
   135cc:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   135d0:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   135d2:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   135d6:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   135d8:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   135dc:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   135e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   135e4:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   135e6:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   135ea:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   135ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   135f2:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   135f4:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   135f8:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   135fc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   13600:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   13602:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   13604:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   13606:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   13608:	f006 fccb 	bl	19fa2 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   1360c:	682b      	ldr	r3, [r5, #0]
   1360e:	7a68      	ldrb	r0, [r5, #9]
   13610:	2100      	movs	r1, #0
   13612:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   13614:	f996 3000 	ldrsb.w	r3, [r6]
   13618:	2b00      	cmp	r3, #0
   1361a:	db06      	blt.n	1362a <usbd_work_handler+0xc6>
   1361c:	88f3      	ldrh	r3, [r6, #6]
   1361e:	b123      	cbz	r3, 1362a <usbd_work_handler+0xc6>
		ctx->ctrl_read_len = usbd_setup->wLength;
   13620:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   13624:	f003 fdf6 	bl	17214 <nrfx_usbd_setup_data_clear>
   13628:	e7b2      	b.n	13590 <usbd_work_handler+0x2c>
		ctx->ctrl_read_len = 0U;
   1362a:	2300      	movs	r3, #0
   1362c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   13630:	e7ae      	b.n	13590 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_pending) {
   13632:	7f6b      	ldrb	r3, [r5, #29]
   13634:	2b00      	cmp	r3, #0
   13636:	d0ab      	beq.n	13590 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_complete) {
   13638:	7f2b      	ldrb	r3, [r5, #28]
   1363a:	2b00      	cmp	r3, #0
   1363c:	d0a8      	beq.n	13590 <usbd_work_handler+0x2c>
	ep_ctx->read_pending = false;
   1363e:	2600      	movs	r6, #0
   13640:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   13642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13646:	4875      	ldr	r0, [pc, #468]	; (1381c <usbd_work_handler+0x2b8>)
	ep_ctx->read_complete = false;
   13648:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1364a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1364e:	f006 fce4 	bl	1a01a <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   13652:	696b      	ldr	r3, [r5, #20]
   13654:	9301      	str	r3, [sp, #4]
   13656:	686b      	ldr	r3, [r5, #4]
   13658:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   1365c:	a901      	add	r1, sp, #4
   1365e:	7a68      	ldrb	r0, [r5, #9]
   13660:	f003 fbe2 	bl	16e28 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
   13664:	486d      	ldr	r0, [pc, #436]	; (1381c <usbd_work_handler+0x2b8>)
   13666:	f006 fcda 	bl	1a01e <k_mutex_unlock.isra.0>
   1366a:	e791      	b.n	13590 <usbd_work_handler+0x2c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1366c:	682b      	ldr	r3, [r5, #0]
   1366e:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   13670:	7a68      	ldrb	r0, [r5, #9]
   13672:	4798      	blx	r3
		break;
   13674:	e78c      	b.n	13590 <usbd_work_handler+0x2c>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   13676:	7aab      	ldrb	r3, [r5, #10]
   13678:	b96b      	cbnz	r3, 13696 <usbd_work_handler+0x132>
   1367a:	7feb      	ldrb	r3, [r5, #31]
   1367c:	b95b      	cbnz	r3, 13696 <usbd_work_handler+0x132>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1367e:	4867      	ldr	r0, [pc, #412]	; (1381c <usbd_work_handler+0x2b8>)
   13680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13688:	f006 fcc7 	bl	1a01a <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   1368c:	f003 fdf2 	bl	17274 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   13690:	4862      	ldr	r0, [pc, #392]	; (1381c <usbd_work_handler+0x2b8>)
   13692:	f006 fcc4 	bl	1a01e <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   13696:	682b      	ldr	r3, [r5, #0]
   13698:	2102      	movs	r1, #2
   1369a:	e7e9      	b.n	13670 <usbd_work_handler+0x10c>
	switch (pwr_evt->state) {
   1369c:	7a02      	ldrb	r2, [r0, #8]
   1369e:	2a04      	cmp	r2, #4
   136a0:	f63f af76 	bhi.w	13590 <usbd_work_handler+0x2c>
   136a4:	e8df f002 	tbb	[pc, r2]
   136a8:	6925035b 	.word	0x6925035b
   136ac:	75          	.byte	0x75
   136ad:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   136ae:	f003 fb6b 	bl	16d88 <nrfx_usbd_is_enabled>
   136b2:	4605      	mov	r5, r0
   136b4:	2800      	cmp	r0, #0
   136b6:	f47f af6b 	bne.w	13590 <usbd_work_handler+0x2c>
			nrfx_usbd_enable();
   136ba:	f003 faa9 	bl	16c10 <nrfx_usbd_enable>
   136be:	f3bf 8f5b 	dmb	ish
   136c2:	4957      	ldr	r1, [pc, #348]	; (13820 <usbd_work_handler+0x2bc>)
   136c4:	2301      	movs	r3, #1
   136c6:	e851 2f00 	ldrex	r2, [r1]
   136ca:	2a00      	cmp	r2, #0
   136cc:	d103      	bne.n	136d6 <usbd_work_handler+0x172>
   136ce:	e841 3000 	strex	r0, r3, [r1]
   136d2:	2800      	cmp	r0, #0
   136d4:	d1f7      	bne.n	136c6 <usbd_work_handler+0x162>
   136d6:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   136da:	f47f af59 	bne.w	13590 <usbd_work_handler+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   136de:	f841 5c10 	str.w	r5, [r1, #-16]
   136e2:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   136e6:	69e0      	ldr	r0, [r4, #28]
   136e8:	6163      	str	r3, [r4, #20]
   136ea:	3914      	subs	r1, #20
   136ec:	f005 ff7e 	bl	195ec <onoff_request>
   136f0:	e74e      	b.n	13590 <usbd_work_handler+0x2c>
	switch (pwr_evt->state) {
   136f2:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   136f4:	f065 007f 	orn	r0, r5, #127	; 0x7f
   136f8:	b2c0      	uxtb	r0, r0
   136fa:	f7ff fd4f 	bl	1319c <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   136fe:	7a03      	ldrb	r3, [r0, #8]
   13700:	b113      	cbz	r3, 13708 <usbd_work_handler+0x1a4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   13702:	7a40      	ldrb	r0, [r0, #9]
   13704:	f003 ffa2 	bl	1764c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   13708:	3501      	adds	r5, #1
   1370a:	2d08      	cmp	r5, #8
   1370c:	d1f2      	bne.n	136f4 <usbd_work_handler+0x190>
		if (ep_ctx->cfg.en) {
   1370e:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   13712:	b11b      	cbz	r3, 1371c <usbd_work_handler+0x1b8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   13714:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   13718:	f003 ff98 	bl	1764c <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   1371c:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   1371e:	b2e8      	uxtb	r0, r5
   13720:	f7ff fd3c 	bl	1319c <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   13724:	7a03      	ldrb	r3, [r0, #8]
   13726:	b113      	cbz	r3, 1372e <usbd_work_handler+0x1ca>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   13728:	7a40      	ldrb	r0, [r0, #9]
   1372a:	f003 ff8f 	bl	1764c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   1372e:	3501      	adds	r5, #1
   13730:	2d08      	cmp	r5, #8
   13732:	d1f4      	bne.n	1371e <usbd_work_handler+0x1ba>
		if (ep_ctx->cfg.en) {
   13734:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   13738:	b11b      	cbz	r3, 13742 <usbd_work_handler+0x1de>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1373a:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   1373e:	f003 ff85 	bl	1764c <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   13742:	2001      	movs	r0, #1
   13744:	f003 fb02 	bl	16d4c <nrfx_usbd_start>
		ctx->ready = true;
   13748:	2301      	movs	r3, #1
   1374a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   1374e:	6823      	ldr	r3, [r4, #0]
   13750:	2b00      	cmp	r3, #0
   13752:	f43f af1d 	beq.w	13590 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   13756:	2100      	movs	r1, #0
   13758:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
   1375a:	4798      	blx	r3
   1375c:	e718      	b.n	13590 <usbd_work_handler+0x2c>
		ctx->ready = false;
   1375e:	2500      	movs	r5, #0
   13760:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   13764:	f003 fefe 	bl	17564 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   13768:	f7ff fe18 	bl	1339c <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   1376c:	6823      	ldr	r3, [r4, #0]
   1376e:	2b00      	cmp	r3, #0
   13770:	f43f af0e 	beq.w	13590 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   13774:	4629      	mov	r1, r5
   13776:	2004      	movs	r0, #4
   13778:	e7ef      	b.n	1375a <usbd_work_handler+0x1f6>
		if (dev_ready()) {
   1377a:	2b00      	cmp	r3, #0
   1377c:	f43f af08 	beq.w	13590 <usbd_work_handler+0x2c>
			nrfx_usbd_suspend();
   13780:	f003 ff08 	bl	17594 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   13784:	6823      	ldr	r3, [r4, #0]
   13786:	2b00      	cmp	r3, #0
   13788:	f43f af02 	beq.w	13590 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   1378c:	2100      	movs	r1, #0
   1378e:	2005      	movs	r0, #5
   13790:	e7e3      	b.n	1375a <usbd_work_handler+0x1f6>
		if (ctx->status_cb && dev_ready()) {
   13792:	6822      	ldr	r2, [r4, #0]
   13794:	2a00      	cmp	r2, #0
   13796:	f43f aefb 	beq.w	13590 <usbd_work_handler+0x2c>
   1379a:	2b00      	cmp	r3, #0
   1379c:	f43f aef8 	beq.w	13590 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_RESUME, NULL);
   137a0:	2100      	movs	r1, #0
   137a2:	2006      	movs	r0, #6
   137a4:	4790      	blx	r2
   137a6:	e6f3      	b.n	13590 <usbd_work_handler+0x2c>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   137a8:	f107 0510 	add.w	r5, r7, #16
   137ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   137b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   137b4:	4628      	mov	r0, r5
   137b6:	f006 fc30 	bl	1a01a <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   137ba:	f7ff fe9f 	bl	134fc <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   137be:	4628      	mov	r0, r5
   137c0:	f006 fc2d 	bl	1a01e <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   137c4:	f857 3c28 	ldr.w	r3, [r7, #-40]
   137c8:	2b00      	cmp	r3, #0
   137ca:	f43f aee1 	beq.w	13590 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_RESET, NULL);
   137ce:	2100      	movs	r1, #0
   137d0:	2001      	movs	r0, #1
   137d2:	e7c2      	b.n	1375a <usbd_work_handler+0x1f6>
	if (ep_ctx->cfg.en) {
   137d4:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   137d8:	b17b      	cbz	r3, 137fa <usbd_work_handler+0x296>
		ep_ctx->read_pending = true;
   137da:	2501      	movs	r5, #1
   137dc:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   137e0:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   137e4:	f7ff fd4a 	bl	1327c <usbd_evt_alloc>
		if (!ev) {
   137e8:	b138      	cbz	r0, 137fa <usbd_work_handler+0x296>
		ev->evt.ep_evt.ep = ep_ctx;
   137ea:	4a0e      	ldr	r2, [pc, #56]	; (13824 <usbd_work_handler+0x2c0>)
		ev->evt_type = USBD_EVT_EP;
   137ec:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   137ee:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   137f0:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   137f2:	f7ff fcfb 	bl	131ec <usbd_evt_put>
		usbd_work_schedule();
   137f6:	f7ff fcff 	bl	131f8 <usbd_work_schedule>
			if (ctx->status_cb) {
   137fa:	f857 3c28 	ldr.w	r3, [r7, #-40]
   137fe:	2b00      	cmp	r3, #0
   13800:	f43f aec6 	beq.w	13590 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SOF, NULL);
   13804:	2100      	movs	r1, #0
   13806:	200a      	movs	r0, #10
   13808:	e7a7      	b.n	1375a <usbd_work_handler+0x1f6>
   1380a:	bf00      	nop
   1380c:	200011f4 	.word	0x200011f4
   13810:	20000590 	.word	0x20000590
   13814:	40027000 	.word	0x40027000
   13818:	200011f8 	.word	0x200011f8
   1381c:	2000122c 	.word	0x2000122c
   13820:	20001214 	.word	0x20001214
   13824:	20001460 	.word	0x20001460
	nrfx_power_usbevt_disable();
   13828:	f007 fade 	bl	1ade8 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   1382c:	f003 fe9a 	bl	17564 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   13830:	f003 f9e4 	bl	16bfc <nrfx_usbd_uninit>
	usbd_evt_flush();
   13834:	f7ff fd14 	bl	13260 <usbd_evt_flush>
	ret = eps_ctx_init();
   13838:	f7ff fe60 	bl	134fc <eps_ctx_init>
	nrfx_power_usbevt_enable();
   1383c:	f007 facd 	bl	1adda <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   13840:	4801      	ldr	r0, [pc, #4]	; (13848 <usbd_work_handler+0x2e4>)
   13842:	f003 faab 	bl	16d9c <nrfx_usbd_init>
}
   13846:	e6a3      	b.n	13590 <usbd_work_handler+0x2c>
   13848:	000133e1 	.word	0x000133e1

0001384c <usb_dc_attach>:
{
   1384c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   1384e:	4d1a      	ldr	r5, [pc, #104]	; (138b8 <usb_dc_attach+0x6c>)
   13850:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   13854:	bb5c      	cbnz	r4, 138ae <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   13856:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1385a:	f009 fb12 	bl	1ce82 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   1385e:	4620      	mov	r0, r4
   13860:	f000 fb38 	bl	13ed4 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13864:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   13866:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13868:	2101      	movs	r1, #1
   1386a:	2027      	movs	r0, #39	; 0x27
   1386c:	f7ff f94e 	bl	12b0c <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   13870:	4812      	ldr	r0, [pc, #72]	; (138bc <usb_dc_attach+0x70>)
   13872:	f003 fa93 	bl	16d9c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   13876:	4b12      	ldr	r3, [pc, #72]	; (138c0 <usb_dc_attach+0x74>)
   13878:	4298      	cmp	r0, r3
   1387a:	d11a      	bne.n	138b2 <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   1387c:	f007 faad 	bl	1adda <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   13880:	f7ff fe3c 	bl	134fc <eps_ctx_init>
	if (ret == 0) {
   13884:	4604      	mov	r4, r0
   13886:	b910      	cbnz	r0, 1388e <usb_dc_attach+0x42>
		ctx->attached = true;
   13888:	2301      	movs	r3, #1
   1388a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1388e:	4b0d      	ldr	r3, [pc, #52]	; (138c4 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   13890:	681b      	ldr	r3, [r3, #0]
   13892:	b10b      	cbz	r3, 13898 <usb_dc_attach+0x4c>
		usbd_work_schedule();
   13894:	f7ff fcb0 	bl	131f8 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   13898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1389c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   138a0:	07db      	lsls	r3, r3, #31
   138a2:	d502      	bpl.n	138aa <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   138a4:	2000      	movs	r0, #0
   138a6:	f7ff fd5f 	bl	13368 <usb_dc_power_event_handler>
}
   138aa:	4620      	mov	r0, r4
   138ac:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   138ae:	2400      	movs	r4, #0
   138b0:	e7fb      	b.n	138aa <usb_dc_attach+0x5e>
		return -EIO;
   138b2:	f06f 0404 	mvn.w	r4, #4
   138b6:	e7f8      	b.n	138aa <usb_dc_attach+0x5e>
   138b8:	200011f4 	.word	0x200011f4
   138bc:	000133e1 	.word	0x000133e1
   138c0:	0bad0000 	.word	0x0bad0000
   138c4:	200005c0 	.word	0x200005c0

000138c8 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   138c8:	4b07      	ldr	r3, [pc, #28]	; (138e8 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   138ca:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   138ce:	b13a      	cbz	r2, 138e0 <usb_dc_set_address+0x18>
   138d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
   138d4:	2b00      	cmp	r3, #0
   138d6:	bf0c      	ite	eq
   138d8:	f06f 0012 	mvneq.w	r0, #18
   138dc:	2000      	movne	r0, #0
   138de:	4770      	bx	lr
		return -ENODEV;
   138e0:	f06f 0012 	mvn.w	r0, #18
}
   138e4:	4770      	bx	lr
   138e6:	bf00      	nop
   138e8:	200011f4 	.word	0x200011f4

000138ec <usb_dc_ep_configure>:
	return get_usbd_ctx()->attached;
   138ec:	4b0f      	ldr	r3, [pc, #60]	; (1392c <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
   138ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   138f2:	b510      	push	{r4, lr}
   138f4:	4601      	mov	r1, r0
	if (!dev_attached()) {
   138f6:	b1b3      	cbz	r3, 13926 <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   138f8:	7804      	ldrb	r4, [r0, #0]
   138fa:	4620      	mov	r0, r4
   138fc:	f7ff fc4e 	bl	1319c <endpoint_ctx>
	if (!ep_ctx) {
   13900:	b910      	cbnz	r0, 13908 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
   13902:	f06f 0015 	mvn.w	r0, #21
}
   13906:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   13908:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   1390a:	790b      	ldrb	r3, [r1, #4]
   1390c:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   1390e:	8849      	ldrh	r1, [r1, #2]
   13910:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   13912:	0723      	lsls	r3, r4, #28
   13914:	d402      	bmi.n	1391c <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   13916:	1e4b      	subs	r3, r1, #1
   13918:	420b      	tst	r3, r1
   1391a:	d1f2      	bne.n	13902 <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   1391c:	4620      	mov	r0, r4
   1391e:	f007 fb51 	bl	1afc4 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   13922:	2000      	movs	r0, #0
   13924:	e7ef      	b.n	13906 <usb_dc_ep_configure+0x1a>
		return -ENODEV;
   13926:	f06f 0012 	mvn.w	r0, #18
   1392a:	e7ec      	b.n	13906 <usb_dc_ep_configure+0x1a>
   1392c:	200011f4 	.word	0x200011f4

00013930 <usb_dc_ep_set_stall>:
	return get_usbd_ctx()->attached;
   13930:	4b12      	ldr	r3, [pc, #72]	; (1397c <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
   13932:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   13936:	b510      	push	{r4, lr}
   13938:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   1393a:	b1ca      	cbz	r2, 13970 <usb_dc_ep_set_stall+0x40>
   1393c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   13940:	b1b3      	cbz	r3, 13970 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
   13942:	f7ff fc2b 	bl	1319c <endpoint_ctx>
	if (!ep_ctx) {
   13946:	4604      	mov	r4, r0
   13948:	b1a8      	cbz	r0, 13976 <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
   1394a:	7a83      	ldrb	r3, [r0, #10]
   1394c:	2b01      	cmp	r3, #1
   1394e:	d012      	beq.n	13976 <usb_dc_ep_set_stall+0x46>
   13950:	d907      	bls.n	13962 <usb_dc_ep_set_stall+0x32>
   13952:	3b02      	subs	r3, #2
   13954:	2b01      	cmp	r3, #1
   13956:	d907      	bls.n	13968 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   13958:	6963      	ldr	r3, [r4, #20]
   1395a:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   1395c:	2000      	movs	r0, #0
   1395e:	60e0      	str	r0, [r4, #12]
}
   13960:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
   13962:	f003 fc8f 	bl	17284 <nrfx_usbd_setup_stall>
		break;
   13966:	e7f7      	b.n	13958 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   13968:	4608      	mov	r0, r1
   1396a:	f003 fbff 	bl	1716c <nrfx_usbd_ep_stall>
		break;
   1396e:	e7f3      	b.n	13958 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
   13970:	f06f 0012 	mvn.w	r0, #18
   13974:	e7f4      	b.n	13960 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
   13976:	f06f 0015 	mvn.w	r0, #21
   1397a:	e7f1      	b.n	13960 <usb_dc_ep_set_stall+0x30>
   1397c:	200011f4 	.word	0x200011f4

00013980 <usb_dc_ep_clear_stall>:
{
   13980:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   13982:	4b0e      	ldr	r3, [pc, #56]	; (139bc <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   13984:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   13988:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   1398a:	b182      	cbz	r2, 139ae <usb_dc_ep_clear_stall+0x2e>
   1398c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   13990:	b16b      	cbz	r3, 139ae <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   13992:	f7ff fc03 	bl	1319c <endpoint_ctx>
	if (!ep_ctx) {
   13996:	b168      	cbz	r0, 139b4 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   13998:	f015 0408 	ands.w	r4, r5, #8
   1399c:	d10a      	bne.n	139b4 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   1399e:	4628      	mov	r0, r5
   139a0:	f003 fc06 	bl	171b0 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   139a4:	4628      	mov	r0, r5
   139a6:	f003 fea3 	bl	176f0 <nrfx_usbd_ep_stall_clear>
	return 0;
   139aa:	4620      	mov	r0, r4
}
   139ac:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   139ae:	f06f 0012 	mvn.w	r0, #18
   139b2:	e7fb      	b.n	139ac <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   139b4:	f06f 0015 	mvn.w	r0, #21
   139b8:	e7f8      	b.n	139ac <usb_dc_ep_clear_stall+0x2c>
   139ba:	bf00      	nop
   139bc:	200011f4 	.word	0x200011f4

000139c0 <usb_dc_ep_is_stalled>:
{
   139c0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   139c2:	4b0c      	ldr	r3, [pc, #48]	; (139f4 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   139c4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   139c8:	4605      	mov	r5, r0
   139ca:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   139cc:	b162      	cbz	r2, 139e8 <usb_dc_ep_is_stalled+0x28>
   139ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   139d2:	b14b      	cbz	r3, 139e8 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   139d4:	f7ff fbe2 	bl	1319c <endpoint_ctx>
	if (!ep_ctx) {
   139d8:	b148      	cbz	r0, 139ee <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   139da:	b141      	cbz	r1, 139ee <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   139dc:	4628      	mov	r0, r5
   139de:	f003 fbcd 	bl	1717c <nrfx_usbd_ep_stall_check>
   139e2:	7020      	strb	r0, [r4, #0]
	return 0;
   139e4:	2000      	movs	r0, #0
}
   139e6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   139e8:	f06f 0012 	mvn.w	r0, #18
   139ec:	e7fb      	b.n	139e6 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   139ee:	f06f 0015 	mvn.w	r0, #21
   139f2:	e7f8      	b.n	139e6 <usb_dc_ep_is_stalled+0x26>
   139f4:	200011f4 	.word	0x200011f4

000139f8 <usb_dc_ep_enable>:
{
   139f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   139fa:	4f13      	ldr	r7, [pc, #76]	; (13a48 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   139fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
   13a00:	4604      	mov	r4, r0
	if (!dev_attached()) {
   13a02:	b1bb      	cbz	r3, 13a34 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
   13a04:	f7ff fbca 	bl	1319c <endpoint_ctx>
	if (!ep_ctx) {
   13a08:	4605      	mov	r5, r0
   13a0a:	b1b0      	cbz	r0, 13a3a <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   13a0c:	0723      	lsls	r3, r4, #28
   13a0e:	d405      	bmi.n	13a1c <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   13a10:	4620      	mov	r0, r4
   13a12:	f003 fbcd 	bl	171b0 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   13a16:	4620      	mov	r0, r4
   13a18:	f003 fe6a 	bl	176f0 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   13a1c:	7a2e      	ldrb	r6, [r5, #8]
   13a1e:	b97e      	cbnz	r6, 13a40 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
   13a20:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
   13a24:	2301      	movs	r3, #1
   13a26:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   13a28:	b118      	cbz	r0, 13a32 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   13a2a:	4620      	mov	r0, r4
   13a2c:	f003 fe0e 	bl	1764c <nrfx_usbd_ep_enable>
	return 0;
   13a30:	4630      	mov	r0, r6
}
   13a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   13a34:	f06f 0012 	mvn.w	r0, #18
   13a38:	e7fb      	b.n	13a32 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
   13a3a:	f06f 0015 	mvn.w	r0, #21
   13a3e:	e7f8      	b.n	13a32 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
   13a40:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13a44:	e7f5      	b.n	13a32 <usb_dc_ep_enable+0x3a>
   13a46:	bf00      	nop
   13a48:	200011f4 	.word	0x200011f4

00013a4c <usb_dc_ep_disable>:
{
   13a4c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   13a4e:	4b11      	ldr	r3, [pc, #68]	; (13a94 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   13a50:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   13a54:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   13a56:	b19a      	cbz	r2, 13a80 <usb_dc_ep_disable+0x34>
   13a58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   13a5c:	b183      	cbz	r3, 13a80 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   13a5e:	f7ff fb9d 	bl	1319c <endpoint_ctx>
	if (!ep_ctx) {
   13a62:	4605      	mov	r5, r0
   13a64:	b178      	cbz	r0, 13a86 <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   13a66:	7a03      	ldrb	r3, [r0, #8]
   13a68:	b183      	cbz	r3, 13a8c <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   13a6a:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
   13a6c:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   13a6e:	f003 fdc1 	bl	175f4 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   13a72:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   13a74:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   13a76:	f006 fabd 	bl	19ff4 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   13a7a:	722c      	strb	r4, [r5, #8]
	return 0;
   13a7c:	4620      	mov	r0, r4
}
   13a7e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   13a80:	f06f 0012 	mvn.w	r0, #18
   13a84:	e7fb      	b.n	13a7e <usb_dc_ep_disable+0x32>
		return -EINVAL;
   13a86:	f06f 0015 	mvn.w	r0, #21
   13a8a:	e7f8      	b.n	13a7e <usb_dc_ep_disable+0x32>
		return -EALREADY;
   13a8c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13a90:	e7f5      	b.n	13a7e <usb_dc_ep_disable+0x32>
   13a92:	bf00      	nop
   13a94:	200011f4 	.word	0x200011f4

00013a98 <usb_dc_ep_write>:
{
   13a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   13a9c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 13b7c <usb_dc_ep_write+0xe4>
{
   13aa0:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
   13aa2:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   13aa6:	b085      	sub	sp, #20
   13aa8:	4607      	mov	r7, r0
   13aaa:	4689      	mov	r9, r1
   13aac:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
   13aae:	2b00      	cmp	r3, #0
   13ab0:	d05d      	beq.n	13b6e <usb_dc_ep_write+0xd6>
   13ab2:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   13ab6:	2b00      	cmp	r3, #0
   13ab8:	d059      	beq.n	13b6e <usb_dc_ep_write+0xd6>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   13aba:	0603      	lsls	r3, r0, #24
   13abc:	d55a      	bpl.n	13b74 <usb_dc_ep_write+0xdc>
	ep_ctx = endpoint_ctx(ep);
   13abe:	f7ff fb6d 	bl	1319c <endpoint_ctx>
	if (!ep_ctx) {
   13ac2:	4605      	mov	r5, r0
   13ac4:	2800      	cmp	r0, #0
   13ac6:	d055      	beq.n	13b74 <usb_dc_ep_write+0xdc>
	if (!ep_ctx->cfg.en) {
   13ac8:	7a03      	ldrb	r3, [r0, #8]
   13aca:	2b00      	cmp	r3, #0
   13acc:	d052      	beq.n	13b74 <usb_dc_ep_write+0xdc>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   13ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ad2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13ad6:	f108 0038 	add.w	r0, r8, #56	; 0x38
   13ada:	f006 fa9e 	bl	1a01a <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   13ade:	7fab      	ldrb	r3, [r5, #30]
   13ae0:	b14b      	cbz	r3, 13af6 <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
   13ae2:	f108 0038 	add.w	r0, r8, #56	; 0x38
   13ae6:	f006 fa9a 	bl	1a01e <k_mutex_unlock.isra.0>
		return -EAGAIN;
   13aea:	f06f 040a 	mvn.w	r4, #10
}
   13aee:	4620      	mov	r0, r4
   13af0:	b005      	add	sp, #20
   13af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
   13af6:	b916      	cbnz	r6, 13afe <usb_dc_ep_write+0x66>
   13af8:	7feb      	ldrb	r3, [r5, #31]
   13afa:	b103      	cbz	r3, 13afe <usb_dc_ep_write+0x66>
		ep_ctx->trans_zlp = false;
   13afc:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   13afe:	7aab      	ldrb	r3, [r5, #10]
   13b00:	b9bb      	cbnz	r3, 13b32 <usb_dc_ep_write+0x9a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   13b02:	b15e      	cbz	r6, 13b1c <usb_dc_ep_write+0x84>
   13b04:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   13b08:	42b3      	cmp	r3, r6
   13b0a:	d907      	bls.n	13b1c <usb_dc_ep_write+0x84>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   13b0c:	686a      	ldr	r2, [r5, #4]
   13b0e:	fbb6 f3f2 	udiv	r3, r6, r2
   13b12:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   13b16:	b90b      	cbnz	r3, 13b1c <usb_dc_ep_write+0x84>
			ep_ctx->trans_zlp = true;
   13b18:	2301      	movs	r3, #1
   13b1a:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   13b1c:	f003 fbba 	bl	17294 <nrfx_usbd_last_setup_dir_get>
   13b20:	42b8      	cmp	r0, r7
   13b22:	d006      	beq.n	13b32 <usb_dc_ep_write+0x9a>
		nrfx_usbd_setup_clear();
   13b24:	f003 fba6 	bl	17274 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   13b28:	4815      	ldr	r0, [pc, #84]	; (13b80 <usb_dc_ep_write+0xe8>)
   13b2a:	f006 fa78 	bl	1a01e <k_mutex_unlock.isra.0>
		return 0;
   13b2e:	2400      	movs	r4, #0
   13b30:	e7dd      	b.n	13aee <usb_dc_ep_write+0x56>
	ep_ctx->write_in_progress = true;
   13b32:	2301      	movs	r3, #1
   13b34:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   13b36:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   13b3a:	a901      	add	r1, sp, #4
   13b3c:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   13b3e:	e9cd 9601 	strd	r9, r6, [sp, #4]
   13b42:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   13b46:	f003 f96f 	bl	16e28 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   13b4a:	4b0e      	ldr	r3, [pc, #56]	; (13b84 <usb_dc_ep_write+0xec>)
   13b4c:	4298      	cmp	r0, r3
   13b4e:	d007      	beq.n	13b60 <usb_dc_ep_write+0xc8>
		ep_ctx->write_in_progress = false;
   13b50:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
   13b54:	b10c      	cbz	r4, 13b5a <usb_dc_ep_write+0xc2>
			*ret_bytes = 0;
   13b56:	f8c4 8000 	str.w	r8, [r4]
		result = -EIO;
   13b5a:	f06f 0404 	mvn.w	r4, #4
   13b5e:	e002      	b.n	13b66 <usb_dc_ep_write+0xce>
		if (ret_bytes) {
   13b60:	b10c      	cbz	r4, 13b66 <usb_dc_ep_write+0xce>
			*ret_bytes = data_len;
   13b62:	6026      	str	r6, [r4, #0]
	int result = 0;
   13b64:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
   13b66:	4806      	ldr	r0, [pc, #24]	; (13b80 <usb_dc_ep_write+0xe8>)
   13b68:	f006 fa59 	bl	1a01e <k_mutex_unlock.isra.0>
	return result;
   13b6c:	e7bf      	b.n	13aee <usb_dc_ep_write+0x56>
		return -ENODEV;
   13b6e:	f06f 0412 	mvn.w	r4, #18
   13b72:	e7bc      	b.n	13aee <usb_dc_ep_write+0x56>
		return -EINVAL;
   13b74:	f06f 0415 	mvn.w	r4, #21
   13b78:	e7b9      	b.n	13aee <usb_dc_ep_write+0x56>
   13b7a:	bf00      	nop
   13b7c:	200011f4 	.word	0x200011f4
   13b80:	2000122c 	.word	0x2000122c
   13b84:	0bad0000 	.word	0x0bad0000

00013b88 <usb_dc_ep_read_wait>:
{
   13b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b8c:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   13b8e:	4b20      	ldr	r3, [pc, #128]	; (13c10 <usb_dc_ep_read_wait+0x88>)
{
   13b90:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   13b92:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   13b96:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   13b98:	2a00      	cmp	r2, #0
   13b9a:	d033      	beq.n	13c04 <usb_dc_ep_read_wait+0x7c>
   13b9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   13ba0:	b383      	cbz	r3, 13c04 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   13ba2:	0603      	lsls	r3, r0, #24
   13ba4:	d431      	bmi.n	13c0a <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
   13ba6:	b901      	cbnz	r1, 13baa <usb_dc_ep_read_wait+0x22>
   13ba8:	bb7f      	cbnz	r7, 13c0a <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
   13baa:	f7ff faf7 	bl	1319c <endpoint_ctx>
	if (!ep_ctx) {
   13bae:	4604      	mov	r4, r0
   13bb0:	b358      	cbz	r0, 13c0a <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
   13bb2:	7a03      	ldrb	r3, [r0, #8]
   13bb4:	b34b      	cbz	r3, 13c0a <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   13bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bba:	4816      	ldr	r0, [pc, #88]	; (13c14 <usb_dc_ep_read_wait+0x8c>)
   13bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13bc0:	f006 fa2b 	bl	1a01a <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   13bc4:	68e3      	ldr	r3, [r4, #12]
   13bc6:	429f      	cmp	r7, r3
   13bc8:	46b8      	mov	r8, r7
   13bca:	bf28      	it	cs
   13bcc:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   13bce:	b946      	cbnz	r6, 13be2 <usb_dc_ep_read_wait+0x5a>
   13bd0:	b93f      	cbnz	r7, 13be2 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
   13bd2:	b105      	cbz	r5, 13bd6 <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
   13bd4:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   13bd6:	480f      	ldr	r0, [pc, #60]	; (13c14 <usb_dc_ep_read_wait+0x8c>)
   13bd8:	f006 fa21 	bl	1a01e <k_mutex_unlock.isra.0>
		return 0;
   13bdc:	2000      	movs	r0, #0
}
   13bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   13be2:	69a1      	ldr	r1, [r4, #24]
   13be4:	4642      	mov	r2, r8
   13be6:	4630      	mov	r0, r6
   13be8:	f006 f9db 	bl	19fa2 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   13bec:	69a3      	ldr	r3, [r4, #24]
   13bee:	4443      	add	r3, r8
   13bf0:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   13bf2:	68e3      	ldr	r3, [r4, #12]
   13bf4:	eba3 0308 	sub.w	r3, r3, r8
   13bf8:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   13bfa:	2d00      	cmp	r5, #0
   13bfc:	d0eb      	beq.n	13bd6 <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
   13bfe:	f8c5 8000 	str.w	r8, [r5]
   13c02:	e7e8      	b.n	13bd6 <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
   13c04:	f06f 0012 	mvn.w	r0, #18
   13c08:	e7e9      	b.n	13bde <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
   13c0a:	f06f 0015 	mvn.w	r0, #21
   13c0e:	e7e6      	b.n	13bde <usb_dc_ep_read_wait+0x56>
   13c10:	200011f4 	.word	0x200011f4
   13c14:	2000122c 	.word	0x2000122c

00013c18 <usb_dc_ep_read_continue>:
{
   13c18:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   13c1a:	4d1e      	ldr	r5, [pc, #120]	; (13c94 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
   13c1c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   13c20:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
   13c22:	b382      	cbz	r2, 13c86 <usb_dc_ep_read_continue+0x6e>
   13c24:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   13c28:	b36a      	cbz	r2, 13c86 <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   13c2a:	061b      	lsls	r3, r3, #24
   13c2c:	d42e      	bmi.n	13c8c <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
   13c2e:	f7ff fab5 	bl	1319c <endpoint_ctx>
	if (!ep_ctx) {
   13c32:	4604      	mov	r4, r0
   13c34:	b350      	cbz	r0, 13c8c <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
   13c36:	7a03      	ldrb	r3, [r0, #8]
   13c38:	b343      	cbz	r3, 13c8c <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   13c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13c42:	f105 0038 	add.w	r0, r5, #56	; 0x38
   13c46:	f006 f9e8 	bl	1a01a <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   13c4a:	68e3      	ldr	r3, [r4, #12]
   13c4c:	b9b3      	cbnz	r3, 13c7c <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
   13c4e:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   13c50:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   13c52:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   13c54:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   13c56:	7f63      	ldrb	r3, [r4, #29]
   13c58:	b183      	cbz	r3, 13c7c <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   13c5a:	f7ff fb0f 	bl	1327c <usbd_evt_alloc>
			if (!ev) {
   13c5e:	b930      	cbnz	r0, 13c6e <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
   13c60:	f105 0038 	add.w	r0, r5, #56	; 0x38
   13c64:	f006 f9db 	bl	1a01e <k_mutex_unlock.isra.0>
				return -ENOMEM;
   13c68:	f06f 000b 	mvn.w	r0, #11
}
   13c6c:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   13c6e:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   13c70:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   13c72:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   13c74:	f7ff faba 	bl	131ec <usbd_evt_put>
			usbd_work_schedule();
   13c78:	f7ff fabe 	bl	131f8 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   13c7c:	4806      	ldr	r0, [pc, #24]	; (13c98 <usb_dc_ep_read_continue+0x80>)
   13c7e:	f006 f9ce 	bl	1a01e <k_mutex_unlock.isra.0>
	return 0;
   13c82:	2000      	movs	r0, #0
   13c84:	e7f2      	b.n	13c6c <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   13c86:	f06f 0012 	mvn.w	r0, #18
   13c8a:	e7ef      	b.n	13c6c <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   13c8c:	f06f 0015 	mvn.w	r0, #21
   13c90:	e7ec      	b.n	13c6c <usb_dc_ep_read_continue+0x54>
   13c92:	bf00      	nop
   13c94:	200011f4 	.word	0x200011f4
   13c98:	2000122c 	.word	0x2000122c

00013c9c <usb_dc_ep_set_callback>:
{
   13c9c:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   13c9e:	4b08      	ldr	r3, [pc, #32]	; (13cc0 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   13ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   13ca4:	b12b      	cbz	r3, 13cb2 <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
   13ca6:	f7ff fa79 	bl	1319c <endpoint_ctx>
	if (!ep_ctx) {
   13caa:	b128      	cbz	r0, 13cb8 <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
   13cac:	6001      	str	r1, [r0, #0]
	return 0;
   13cae:	2000      	movs	r0, #0
}
   13cb0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   13cb2:	f06f 0012 	mvn.w	r0, #18
   13cb6:	e7fb      	b.n	13cb0 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
   13cb8:	f06f 0015 	mvn.w	r0, #21
   13cbc:	e7f8      	b.n	13cb0 <usb_dc_ep_set_callback+0x14>
   13cbe:	bf00      	nop
   13cc0:	200011f4 	.word	0x200011f4

00013cc4 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   13cc4:	4b01      	ldr	r3, [pc, #4]	; (13ccc <usb_dc_set_status_callback+0x8>)
   13cc6:	6018      	str	r0, [r3, #0]
}
   13cc8:	4770      	bx	lr
   13cca:	bf00      	nop
   13ccc:	200011f4 	.word	0x200011f4

00013cd0 <usb_dc_ep_mps>:
{
   13cd0:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   13cd2:	4b07      	ldr	r3, [pc, #28]	; (13cf0 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   13cd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   13cd8:	b123      	cbz	r3, 13ce4 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   13cda:	f7ff fa5f 	bl	1319c <endpoint_ctx>
	if (!ep_ctx) {
   13cde:	b120      	cbz	r0, 13cea <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   13ce0:	6840      	ldr	r0, [r0, #4]
}
   13ce2:	bd08      	pop	{r3, pc}
		return -ENODEV;
   13ce4:	f06f 0012 	mvn.w	r0, #18
   13ce8:	e7fb      	b.n	13ce2 <usb_dc_ep_mps+0x12>
		return -EINVAL;
   13cea:	f06f 0015 	mvn.w	r0, #21
   13cee:	e7f8      	b.n	13ce2 <usb_dc_ep_mps+0x12>
   13cf0:	200011f4 	.word	0x200011f4

00013cf4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   13cf4:	4b08      	ldr	r3, [pc, #32]	; (13d18 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13cf6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   13cf8:	1ac3      	subs	r3, r0, r3
{
   13cfa:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13cfc:	4907      	ldr	r1, [pc, #28]	; (13d1c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   13cfe:	109b      	asrs	r3, r3, #2
{
   13d00:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13d02:	4359      	muls	r1, r3
   13d04:	4806      	ldr	r0, [pc, #24]	; (13d20 <onoff_stop+0x2c>)
   13d06:	2240      	movs	r2, #64	; 0x40
   13d08:	f006 f9ce 	bl	1a0a8 <stop>
	notify(mgr, res);
   13d0c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13d0e:	4601      	mov	r1, r0
	notify(mgr, res);
   13d10:	4620      	mov	r0, r4
}
   13d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   13d16:	4718      	bx	r3
   13d18:	20001494 	.word	0x20001494
   13d1c:	b6db6db7 	.word	0xb6db6db7
   13d20:	0001d4c0 	.word	0x0001d4c0

00013d24 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13d24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   13d26:	4c0c      	ldr	r4, [pc, #48]	; (13d58 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13d28:	4a0c      	ldr	r2, [pc, #48]	; (13d5c <onoff_start+0x38>)
   13d2a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   13d2c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13d2e:	9300      	str	r3, [sp, #0]
{
   13d30:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13d32:	460b      	mov	r3, r1
   13d34:	490a      	ldr	r1, [pc, #40]	; (13d60 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   13d36:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13d38:	4361      	muls	r1, r4
{
   13d3a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13d3c:	4809      	ldr	r0, [pc, #36]	; (13d64 <onoff_start+0x40>)
   13d3e:	f006 f9df 	bl	1a100 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   13d42:	1e01      	subs	r1, r0, #0
   13d44:	da05      	bge.n	13d52 <onoff_start+0x2e>
		notify(mgr, err);
   13d46:	4630      	mov	r0, r6
   13d48:	462b      	mov	r3, r5
	}
}
   13d4a:	b002      	add	sp, #8
   13d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   13d50:	4718      	bx	r3
}
   13d52:	b002      	add	sp, #8
   13d54:	bd70      	pop	{r4, r5, r6, pc}
   13d56:	bf00      	nop
   13d58:	20001494 	.word	0x20001494
   13d5c:	0001a171 	.word	0x0001a171
   13d60:	b6db6db7 	.word	0xb6db6db7
   13d64:	0001d4c0 	.word	0x0001d4c0

00013d68 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13d68:	2200      	movs	r2, #0
{
   13d6a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13d6c:	2101      	movs	r1, #1
{
   13d6e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13d70:	4610      	mov	r0, r2
   13d72:	f7fe fecb 	bl	12b0c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   13d76:	480f      	ldr	r0, [pc, #60]	; (13db4 <clk_init+0x4c>)
   13d78:	f001 fc28 	bl	155cc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   13d7c:	4b0e      	ldr	r3, [pc, #56]	; (13db8 <clk_init+0x50>)
   13d7e:	4298      	cmp	r0, r3
   13d80:	d115      	bne.n	13dae <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   13d82:	f001 fc33 	bl	155ec <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   13d86:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   13d88:	490c      	ldr	r1, [pc, #48]	; (13dbc <clk_init+0x54>)
   13d8a:	4630      	mov	r0, r6
   13d8c:	f005 fc1b 	bl	195c6 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   13d90:	2800      	cmp	r0, #0
   13d92:	db0b      	blt.n	13dac <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   13d94:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   13d96:	4909      	ldr	r1, [pc, #36]	; (13dbc <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13d98:	2501      	movs	r5, #1
   13d9a:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   13d9c:	f104 001c 	add.w	r0, r4, #28
   13da0:	f005 fc11 	bl	195c6 <onoff_manager_init>
		if (err < 0) {
   13da4:	2800      	cmp	r0, #0
   13da6:	db01      	blt.n	13dac <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13da8:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   13daa:	2000      	movs	r0, #0
}
   13dac:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   13dae:	f06f 0004 	mvn.w	r0, #4
   13db2:	e7fb      	b.n	13dac <clk_init+0x44>
   13db4:	00013df5 	.word	0x00013df5
   13db8:	0bad0000 	.word	0x0bad0000
   13dbc:	0001d864 	.word	0x0001d864

00013dc0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   13dc0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   13dc2:	230c      	movs	r3, #12
   13dc4:	4809      	ldr	r0, [pc, #36]	; (13dec <clkstarted_handle.constprop.0+0x2c>)
   13dc6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   13dc8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   13dca:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   13dcc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   13dd0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   13dd2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   13dd4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   13dd6:	4418      	add	r0, r3
   13dd8:	f006 f953 	bl	1a082 <set_on_state>
	if (callback) {
   13ddc:	b12d      	cbz	r5, 13dea <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   13dde:	4632      	mov	r2, r6
   13de0:	462b      	mov	r3, r5
   13de2:	4803      	ldr	r0, [pc, #12]	; (13df0 <clkstarted_handle.constprop.0+0x30>)
}
   13de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   13de8:	4718      	bx	r3
}
   13dea:	bd70      	pop	{r4, r5, r6, pc}
   13dec:	20001494 	.word	0x20001494
   13df0:	0001d4c0 	.word	0x0001d4c0

00013df4 <clock_event_handler>:
	switch (event) {
   13df4:	b110      	cbz	r0, 13dfc <clock_event_handler+0x8>
   13df6:	2801      	cmp	r0, #1
   13df8:	d004      	beq.n	13e04 <clock_event_handler+0x10>
   13dfa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   13dfc:	4b03      	ldr	r3, [pc, #12]	; (13e0c <clock_event_handler+0x18>)
   13dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   13e00:	075b      	lsls	r3, r3, #29
   13e02:	d101      	bne.n	13e08 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13e04:	f7ff bfdc 	b.w	13dc0 <clkstarted_handle.constprop.0>
}
   13e08:	4770      	bx	lr
   13e0a:	bf00      	nop
   13e0c:	20001494 	.word	0x20001494

00013e10 <generic_hfclk_start>:
{
   13e10:	b508      	push	{r3, lr}
	__asm__ volatile(
   13e12:	f04f 0320 	mov.w	r3, #32
   13e16:	f3ef 8111 	mrs	r1, BASEPRI
   13e1a:	f383 8812 	msr	BASEPRI_MAX, r3
   13e1e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   13e22:	4a12      	ldr	r2, [pc, #72]	; (13e6c <generic_hfclk_start+0x5c>)
   13e24:	6813      	ldr	r3, [r2, #0]
   13e26:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   13e2a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   13e2e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   13e30:	d00c      	beq.n	13e4c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   13e36:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13e3a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   13e3e:	f013 0301 	ands.w	r3, r3, #1
   13e42:	d003      	beq.n	13e4c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   13e44:	480a      	ldr	r0, [pc, #40]	; (13e70 <generic_hfclk_start+0x60>)
   13e46:	f006 f91c 	bl	1a082 <set_on_state>
			already_started = true;
   13e4a:	2301      	movs	r3, #1
	__asm__ volatile(
   13e4c:	f381 8811 	msr	BASEPRI, r1
   13e50:	f3bf 8f6f 	isb	sy
	if (already_started) {
   13e54:	b123      	cbz	r3, 13e60 <generic_hfclk_start+0x50>
}
   13e56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   13e5a:	2000      	movs	r0, #0
   13e5c:	f7ff bfb0 	b.w	13dc0 <clkstarted_handle.constprop.0>
}
   13e60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   13e64:	2001      	movs	r0, #1
   13e66:	f006 bf17 	b.w	1ac98 <nrfx_clock_start>
   13e6a:	bf00      	nop
   13e6c:	200014e4 	.word	0x200014e4
   13e70:	200014d4 	.word	0x200014d4

00013e74 <api_blocking_start>:
{
   13e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13e76:	2200      	movs	r2, #0
   13e78:	2301      	movs	r3, #1
   13e7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13e7e:	4a09      	ldr	r2, [pc, #36]	; (13ea4 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13e80:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13e84:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13e86:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13e8a:	f006 f96a 	bl	1a162 <api_start>
	if (err < 0) {
   13e8e:	2800      	cmp	r0, #0
   13e90:	db05      	blt.n	13e9e <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
   13e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13e96:	2300      	movs	r3, #0
   13e98:	4668      	mov	r0, sp
   13e9a:	f004 fbe7 	bl	1866c <z_impl_k_sem_take>
}
   13e9e:	b005      	add	sp, #20
   13ea0:	f85d fb04 	ldr.w	pc, [sp], #4
   13ea4:	0001a18f 	.word	0x0001a18f

00013ea8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13ea8:	4b09      	ldr	r3, [pc, #36]	; (13ed0 <generic_hfclk_stop+0x28>)
   13eaa:	f3bf 8f5b 	dmb	ish
   13eae:	e853 2f00 	ldrex	r2, [r3]
   13eb2:	f022 0102 	bic.w	r1, r2, #2
   13eb6:	e843 1000 	strex	r0, r1, [r3]
   13eba:	2800      	cmp	r0, #0
   13ebc:	d1f7      	bne.n	13eae <generic_hfclk_stop+0x6>
   13ebe:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   13ec2:	07d3      	lsls	r3, r2, #31
   13ec4:	d402      	bmi.n	13ecc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   13ec6:	2001      	movs	r0, #1
   13ec8:	f006 bf23 	b.w	1ad12 <nrfx_clock_stop>
}
   13ecc:	4770      	bx	lr
   13ece:	bf00      	nop
   13ed0:	200014e4 	.word	0x200014e4

00013ed4 <z_nrf_clock_control_get_onoff>:
}
   13ed4:	4a02      	ldr	r2, [pc, #8]	; (13ee0 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   13ed6:	b2c3      	uxtb	r3, r0
}
   13ed8:	201c      	movs	r0, #28
   13eda:	fb03 2000 	mla	r0, r3, r0, r2
   13ede:	4770      	bx	lr
   13ee0:	20001494 	.word	0x20001494

00013ee4 <z_nrf_clock_control_lf_on>:
{
   13ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13ee8:	4939      	ldr	r1, [pc, #228]	; (13fd0 <z_nrf_clock_control_lf_on+0xec>)
   13eea:	f3bf 8f5b 	dmb	ish
   13eee:	4607      	mov	r7, r0
   13ef0:	2201      	movs	r2, #1
   13ef2:	e851 3f00 	ldrex	r3, [r1]
   13ef6:	e841 2000 	strex	r0, r2, [r1]
   13efa:	2800      	cmp	r0, #0
   13efc:	d1f9      	bne.n	13ef2 <z_nrf_clock_control_lf_on+0xe>
   13efe:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   13f02:	b933      	cbnz	r3, 13f12 <z_nrf_clock_control_lf_on+0x2e>
   13f04:	4933      	ldr	r1, [pc, #204]	; (13fd4 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   13f06:	4834      	ldr	r0, [pc, #208]	; (13fd8 <z_nrf_clock_control_lf_on+0xf4>)
   13f08:	604b      	str	r3, [r1, #4]
   13f0a:	60cb      	str	r3, [r1, #12]
   13f0c:	608a      	str	r2, [r1, #8]
   13f0e:	f005 fb6d 	bl	195ec <onoff_request>
	switch (start_mode) {
   13f12:	1e7b      	subs	r3, r7, #1
   13f14:	2b01      	cmp	r3, #1
   13f16:	d82f      	bhi.n	13f78 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   13f18:	2f01      	cmp	r7, #1
   13f1a:	d107      	bne.n	13f2c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   13f1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13f20:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   13f24:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   13f28:	2b01      	cmp	r3, #1
   13f2a:	d025      	beq.n	13f78 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13f2c:	f008 ff8f 	bl	1ce4e <k_is_in_isr>
   13f30:	4604      	mov	r4, r0
   13f32:	b918      	cbnz	r0, 13f3c <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   13f34:	4b29      	ldr	r3, [pc, #164]	; (13fdc <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   13f36:	781b      	ldrb	r3, [r3, #0]
   13f38:	2b00      	cmp	r3, #0
   13f3a:	d141      	bne.n	13fc0 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   13f3c:	f04f 0320 	mov.w	r3, #32
   13f40:	f3ef 8611 	mrs	r6, BASEPRI
   13f44:	f383 8812 	msr	BASEPRI_MAX, r3
   13f48:	f3bf 8f6f 	isb	sy
   13f4c:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13f4e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 13fe0 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13f52:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   13f56:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13f5a:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   13f5e:	03d2      	lsls	r2, r2, #15
   13f60:	d50c      	bpl.n	13f7c <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   13f62:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   13f66:	2b01      	cmp	r3, #1
   13f68:	d001      	beq.n	13f6e <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   13f6a:	2f01      	cmp	r7, #1
   13f6c:	d106      	bne.n	13f7c <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   13f6e:	b30c      	cbz	r4, 13fb4 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   13f70:	f386 8811 	msr	BASEPRI, r6
   13f74:	f3bf 8f6f 	isb	sy
}
   13f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   13f7c:	b1ac      	cbz	r4, 13faa <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   13f7e:	4630      	mov	r0, r6
   13f80:	f7fe fd88 	bl	12a94 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   13f84:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   13f88:	2b00      	cmp	r3, #0
   13f8a:	d1e4      	bne.n	13f56 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13f8c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   13f90:	2a00      	cmp	r2, #0
   13f92:	d0e0      	beq.n	13f56 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13f94:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   13f98:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   13f9c:	2301      	movs	r3, #1
   13f9e:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   13fa2:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13fa6:	60ab      	str	r3, [r5, #8]
}
   13fa8:	e7d5      	b.n	13f56 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   13faa:	2100      	movs	r1, #0
   13fac:	2021      	movs	r0, #33	; 0x21
   13fae:	f004 ffab 	bl	18f08 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   13fb2:	e7e7      	b.n	13f84 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   13fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13fb8:	2202      	movs	r2, #2
   13fba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   13fbe:	e7db      	b.n	13f78 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   13fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13fc4:	2202      	movs	r2, #2
   13fc6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   13fca:	4606      	mov	r6, r0
}
   13fcc:	e7bf      	b.n	13f4e <z_nrf_clock_control_lf_on+0x6a>
   13fce:	bf00      	nop
   13fd0:	200014e8 	.word	0x200014e8
   13fd4:	20001484 	.word	0x20001484
   13fd8:	200014b0 	.word	0x200014b0
   13fdc:	20001a03 	.word	0x20001a03
   13fe0:	e000e100 	.word	0xe000e100

00013fe4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   13fe4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   13fe6:	4b08      	ldr	r3, [pc, #32]	; (14008 <uart_console_init+0x24>)
   13fe8:	4808      	ldr	r0, [pc, #32]	; (1400c <uart_console_init+0x28>)
   13fea:	6018      	str	r0, [r3, #0]
   13fec:	f008 fed1 	bl	1cd92 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   13ff0:	b138      	cbz	r0, 14002 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   13ff2:	4807      	ldr	r0, [pc, #28]	; (14010 <uart_console_init+0x2c>)
   13ff4:	f7ff f894 	bl	13120 <__stdout_hook_install>
	__printk_hook_install(console_out);
   13ff8:	4805      	ldr	r0, [pc, #20]	; (14010 <uart_console_init+0x2c>)
   13ffa:	f7fc fe73 	bl	10ce4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   13ffe:	2000      	movs	r0, #0
}
   14000:	bd08      	pop	{r3, pc}
		return -ENODEV;
   14002:	f06f 0012 	mvn.w	r0, #18
   14006:	e7fb      	b.n	14000 <uart_console_init+0x1c>
   14008:	200014ec 	.word	0x200014ec
   1400c:	0001d508 	.word	0x0001d508
   14010:	00014015 	.word	0x00014015

00014014 <console_out>:
	if ('\n' == c) {
   14014:	280a      	cmp	r0, #10
{
   14016:	b538      	push	{r3, r4, r5, lr}
   14018:	4d07      	ldr	r5, [pc, #28]	; (14038 <console_out+0x24>)
   1401a:	4604      	mov	r4, r0
	if ('\n' == c) {
   1401c:	d104      	bne.n	14028 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   1401e:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
   14020:	6883      	ldr	r3, [r0, #8]
   14022:	210d      	movs	r1, #13
   14024:	685b      	ldr	r3, [r3, #4]
   14026:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   14028:	6828      	ldr	r0, [r5, #0]
   1402a:	6883      	ldr	r3, [r0, #8]
   1402c:	b2e1      	uxtb	r1, r4
   1402e:	685b      	ldr	r3, [r3, #4]
   14030:	4798      	blx	r3
}
   14032:	4620      	mov	r0, r4
   14034:	bd38      	pop	{r3, r4, r5, pc}
   14036:	bf00      	nop
   14038:	200014ec 	.word	0x200014ec

0001403c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1403c:	b530      	push	{r4, r5, lr}
	return port->config;
   1403e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14040:	7b04      	ldrb	r4, [r0, #12]
   14042:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   14046:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1404a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   1404e:	b085      	sub	sp, #20
   14050:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   14054:	d104      	bne.n	14060 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   14056:	4628      	mov	r0, r5
   14058:	f001 fd4c 	bl	15af4 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   1405c:	2000      	movs	r0, #0
   1405e:	e032      	b.n	140c6 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   14060:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   14064:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   14068:	d12f      	bne.n	140ca <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1406a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1406e:	bf0c      	ite	eq
   14070:	2304      	moveq	r3, #4
   14072:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   14074:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   14078:	6883      	ldr	r3, [r0, #8]
   1407a:	fa23 f101 	lsr.w	r1, r3, r1
   1407e:	07c9      	lsls	r1, r1, #31
   14080:	d42f      	bmi.n	140e2 <gpio_nrfx_pin_interrupt_configure+0xa6>
   14082:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   14086:	d12c      	bne.n	140e2 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   14088:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   1408a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1408c:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   14090:	4a1c      	ldr	r2, [pc, #112]	; (14104 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   14092:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   14096:	bf18      	it	ne
   14098:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1409c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   140a0:	07db      	lsls	r3, r3, #31
   140a2:	d41e      	bmi.n	140e2 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   140a4:	f10d 0407 	add.w	r4, sp, #7
   140a8:	4621      	mov	r1, r4
   140aa:	4628      	mov	r0, r5
   140ac:	f001 fc86 	bl	159bc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   140b0:	4b15      	ldr	r3, [pc, #84]	; (14108 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   140b2:	4298      	cmp	r0, r3
   140b4:	d114      	bne.n	140e0 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   140b6:	4620      	mov	r0, r4
   140b8:	f001 fcce 	bl	15a58 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   140bc:	4b13      	ldr	r3, [pc, #76]	; (1410c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   140be:	4298      	cmp	r0, r3
   140c0:	d00e      	beq.n	140e0 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   140c2:	f06f 000b 	mvn.w	r0, #11
}
   140c6:	b005      	add	sp, #20
   140c8:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   140ca:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   140ce:	d005      	beq.n	140dc <gpio_nrfx_pin_interrupt_configure+0xa0>
   140d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   140d4:	bf0c      	ite	eq
   140d6:	2302      	moveq	r3, #2
   140d8:	2301      	movne	r3, #1
   140da:	e7cb      	b.n	14074 <gpio_nrfx_pin_interrupt_configure+0x38>
   140dc:	2303      	movs	r3, #3
   140de:	e7c9      	b.n	14074 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   140e0:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   140e2:	2300      	movs	r3, #0
   140e4:	4619      	mov	r1, r3
   140e6:	aa02      	add	r2, sp, #8
   140e8:	4628      	mov	r0, r5
   140ea:	f001 fb41 	bl	15770 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   140ee:	4b07      	ldr	r3, [pc, #28]	; (1410c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   140f0:	4298      	cmp	r0, r3
   140f2:	d104      	bne.n	140fe <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   140f4:	2101      	movs	r1, #1
   140f6:	4628      	mov	r0, r5
   140f8:	f001 fcb4 	bl	15a64 <nrfx_gpiote_trigger_enable>
   140fc:	e7ae      	b.n	1405c <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   140fe:	f06f 0004 	mvn.w	r0, #4
   14102:	e7e0      	b.n	140c6 <gpio_nrfx_pin_interrupt_configure+0x8a>
   14104:	50000300 	.word	0x50000300
   14108:	0bad0004 	.word	0x0bad0004
   1410c:	0bad0000 	.word	0x0bad0000

00014110 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   14110:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   14112:	f001 fc91 	bl	15a38 <nrfx_gpiote_is_init>
   14116:	4604      	mov	r4, r0
   14118:	b968      	cbnz	r0, 14136 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1411a:	f001 fc65 	bl	159e8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1411e:	4b08      	ldr	r3, [pc, #32]	; (14140 <gpio_nrfx_init+0x30>)
   14120:	4298      	cmp	r0, r3
   14122:	d10a      	bne.n	1413a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   14124:	4807      	ldr	r0, [pc, #28]	; (14144 <gpio_nrfx_init+0x34>)
   14126:	4621      	mov	r1, r4
   14128:	f001 fc42 	bl	159b0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1412c:	4622      	mov	r2, r4
   1412e:	2105      	movs	r1, #5
   14130:	2006      	movs	r0, #6
   14132:	f7fe fceb 	bl	12b0c <z_arm_irq_priority_set>
		return 0;
   14136:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   14138:	bd10      	pop	{r4, pc}
		return -EIO;
   1413a:	f06f 0004 	mvn.w	r0, #4
   1413e:	e7fb      	b.n	14138 <gpio_nrfx_init+0x28>
   14140:	0bad0000 	.word	0x0bad0000
   14144:	00014149 	.word	0x00014149

00014148 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   14148:	0942      	lsrs	r2, r0, #5
{
   1414a:	b570      	push	{r4, r5, r6, lr}
   1414c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1414e:	d002      	beq.n	14156 <nrfx_gpio_handler+0xe>
   14150:	2a01      	cmp	r2, #1
   14152:	d015      	beq.n	14180 <nrfx_gpio_handler+0x38>
}
   14154:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   14156:	4e0b      	ldr	r6, [pc, #44]	; (14184 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   14158:	6932      	ldr	r2, [r6, #16]
   1415a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1415c:	2900      	cmp	r1, #0
   1415e:	d0f9      	beq.n	14154 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   14160:	f003 031f 	and.w	r3, r3, #31
   14164:	2501      	movs	r5, #1
   14166:	680c      	ldr	r4, [r1, #0]
   14168:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   1416a:	688a      	ldr	r2, [r1, #8]
   1416c:	402a      	ands	r2, r5
   1416e:	d002      	beq.n	14176 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   14170:	684b      	ldr	r3, [r1, #4]
   14172:	4630      	mov	r0, r6
   14174:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14176:	2c00      	cmp	r4, #0
   14178:	d0ec      	beq.n	14154 <nrfx_gpio_handler+0xc>
   1417a:	4621      	mov	r1, r4
   1417c:	6824      	ldr	r4, [r4, #0]
   1417e:	e7f4      	b.n	1416a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   14180:	4e01      	ldr	r6, [pc, #4]	; (14188 <nrfx_gpio_handler+0x40>)
   14182:	e7e9      	b.n	14158 <nrfx_gpio_handler+0x10>
   14184:	0001d4d8 	.word	0x0001d4d8
   14188:	0001d4f0 	.word	0x0001d4f0

0001418c <gpio_nrfx_pin_configure>:
{
   1418c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   14190:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14192:	7b3b      	ldrb	r3, [r7, #12]
   14194:	f001 051f 	and.w	r5, r1, #31
{
   14198:	b085      	sub	sp, #20
   1419a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1419c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   141a0:	4614      	mov	r4, r2
   141a2:	b9ca      	cbnz	r2, 141d8 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   141a4:	a902      	add	r1, sp, #8
   141a6:	4628      	mov	r0, r5
   141a8:	f001 fc08 	bl	159bc <nrfx_gpiote_channel_get>
   141ac:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   141ae:	4628      	mov	r0, r5
   141b0:	f001 fcc8 	bl	15b44 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   141b4:	4b4a      	ldr	r3, [pc, #296]	; (142e0 <gpio_nrfx_pin_configure+0x154>)
   141b6:	4298      	cmp	r0, r3
   141b8:	d004      	beq.n	141c4 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   141ba:	f06f 0004 	mvn.w	r0, #4
}
   141be:	b005      	add	sp, #20
   141c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   141c4:	4284      	cmp	r4, r0
   141c6:	d105      	bne.n	141d4 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   141c8:	f89d 0008 	ldrb.w	r0, [sp, #8]
   141cc:	f001 fc3e 	bl	15a4c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   141d0:	42a0      	cmp	r0, r4
   141d2:	d1f2      	bne.n	141ba <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   141d4:	2000      	movs	r0, #0
   141d6:	e7f2      	b.n	141be <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   141d8:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   141dc:	f10d 0103 	add.w	r1, sp, #3
   141e0:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   141e2:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   141e6:	f001 fbe9 	bl	159bc <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   141ea:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   141ec:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   141ee:	aa02      	add	r2, sp, #8
   141f0:	4649      	mov	r1, r9
   141f2:	4628      	mov	r0, r5
   141f4:	f001 fabc 	bl	15770 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   141f8:	4b39      	ldr	r3, [pc, #228]	; (142e0 <gpio_nrfx_pin_configure+0x154>)
   141fa:	4298      	cmp	r0, r3
   141fc:	d002      	beq.n	14204 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   141fe:	f06f 0015 	mvn.w	r0, #21
   14202:	e7dc      	b.n	141be <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   14204:	4580      	cmp	r8, r0
   14206:	d103      	bne.n	14210 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   14208:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1420c:	f001 fc1e 	bl	15a4c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   14210:	03a3      	lsls	r3, r4, #14
   14212:	d551      	bpl.n	142b8 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   14214:	f240 6306 	movw	r3, #1542	; 0x606
   14218:	4023      	ands	r3, r4
   1421a:	f240 2206 	movw	r2, #518	; 0x206
   1421e:	4293      	cmp	r3, r2
   14220:	d03b      	beq.n	1429a <gpio_nrfx_pin_configure+0x10e>
   14222:	d80c      	bhi.n	1423e <gpio_nrfx_pin_configure+0xb2>
   14224:	2b06      	cmp	r3, #6
   14226:	d015      	beq.n	14254 <gpio_nrfx_pin_configure+0xc8>
   14228:	d804      	bhi.n	14234 <gpio_nrfx_pin_configure+0xa8>
   1422a:	b19b      	cbz	r3, 14254 <gpio_nrfx_pin_configure+0xc8>
   1422c:	2b02      	cmp	r3, #2
   1422e:	d1e6      	bne.n	141fe <gpio_nrfx_pin_configure+0x72>
   14230:	2304      	movs	r3, #4
   14232:	e00f      	b.n	14254 <gpio_nrfx_pin_configure+0xc8>
   14234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   14238:	d1e1      	bne.n	141fe <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   1423a:	2301      	movs	r3, #1
   1423c:	e00a      	b.n	14254 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   1423e:	f240 4202 	movw	r2, #1026	; 0x402
   14242:	4293      	cmp	r3, r2
   14244:	d02b      	beq.n	1429e <gpio_nrfx_pin_configure+0x112>
   14246:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   1424a:	d02a      	beq.n	142a2 <gpio_nrfx_pin_configure+0x116>
   1424c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   14250:	d1d5      	bne.n	141fe <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   14252:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   14254:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   14258:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1425c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   14260:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   14262:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   14266:	bf54      	ite	pl
   14268:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1426c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1426e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   14270:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   14274:	d517      	bpl.n	142a6 <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   14276:	687b      	ldr	r3, [r7, #4]
   14278:	2101      	movs	r1, #1
   1427a:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   1427e:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   14282:	2200      	movs	r2, #0
   14284:	a901      	add	r1, sp, #4
   14286:	4628      	mov	r0, r5
   14288:	f001 fb20 	bl	158cc <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1428c:	4b14      	ldr	r3, [pc, #80]	; (142e0 <gpio_nrfx_pin_configure+0x154>)
   1428e:	4298      	cmp	r0, r3
   14290:	bf14      	ite	ne
   14292:	f06f 0015 	mvnne.w	r0, #21
   14296:	2000      	moveq	r0, #0
   14298:	e791      	b.n	141be <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   1429a:	2307      	movs	r3, #7
   1429c:	e7da      	b.n	14254 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
   1429e:	2305      	movs	r3, #5
   142a0:	e7d8      	b.n	14254 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   142a2:	2303      	movs	r3, #3
   142a4:	e7d6      	b.n	14254 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   142a6:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   142a8:	bf41      	itttt	mi
   142aa:	687b      	ldrmi	r3, [r7, #4]
   142ac:	2101      	movmi	r1, #1
   142ae:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   142b2:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   142b6:	e7e4      	b.n	14282 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
   142b8:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   142ba:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   142be:	bf54      	ite	pl
   142c0:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   142c4:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   142c6:	461a      	mov	r2, r3
   142c8:	a901      	add	r1, sp, #4
   142ca:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   142cc:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   142d0:	f001 fa4e 	bl	15770 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   142d4:	4b02      	ldr	r3, [pc, #8]	; (142e0 <gpio_nrfx_pin_configure+0x154>)
   142d6:	4298      	cmp	r0, r3
   142d8:	f43f af7c 	beq.w	141d4 <gpio_nrfx_pin_configure+0x48>
   142dc:	e78f      	b.n	141fe <gpio_nrfx_pin_configure+0x72>
   142de:	bf00      	nop
   142e0:	0bad0000 	.word	0x0bad0000

000142e4 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   142e4:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   142e6:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   142e8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
   142ec:	f003 fa1e 	bl	1772c <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   142f0:	4b03      	ldr	r3, [pc, #12]	; (14300 <i2c_nrfx_twim_recover_bus+0x1c>)
   142f2:	4298      	cmp	r0, r3
}
   142f4:	bf14      	ite	ne
   142f6:	f06f 000f 	mvnne.w	r0, #15
   142fa:	2000      	moveq	r0, #0
   142fc:	bd08      	pop	{r3, pc}
   142fe:	bf00      	nop
   14300:	0bad0000 	.word	0x0bad0000

00014304 <init_twim>:
{
   14304:	b510      	push	{r4, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   14306:	6904      	ldr	r4, [r0, #16]
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
   14308:	4a08      	ldr	r2, [pc, #32]	; (1432c <init_twim+0x28>)
   1430a:	6840      	ldr	r0, [r0, #4]
   1430c:	4623      	mov	r3, r4
   1430e:	f104 0120 	add.w	r1, r4, #32
   14312:	f002 f81d 	bl	16350 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   14316:	4b06      	ldr	r3, [pc, #24]	; (14330 <init_twim+0x2c>)
   14318:	4298      	cmp	r0, r3
	dev_data->twim_initialized = true;
   1431a:	bf03      	ittte	eq
   1431c:	2301      	moveq	r3, #1
   1431e:	f884 3030 	strbeq.w	r3, [r4, #48]	; 0x30
	return 0;
   14322:	2000      	moveq	r0, #0
		return -EIO;
   14324:	f06f 0004 	mvnne.w	r0, #4
}
   14328:	bd10      	pop	{r4, pc}
   1432a:	bf00      	nop
   1432c:	00014335 	.word	0x00014335
   14330:	0bad0000 	.word	0x0bad0000

00014334 <event_handler>:
	switch (p_event->type) {
   14334:	7803      	ldrb	r3, [r0, #0]
   14336:	2b01      	cmp	r3, #1
   14338:	d008      	beq.n	1434c <event_handler+0x18>
   1433a:	2b02      	cmp	r3, #2
   1433c:	d008      	beq.n	14350 <event_handler+0x1c>
   1433e:	b94b      	cbnz	r3, 14354 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   14340:	4b05      	ldr	r3, [pc, #20]	; (14358 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   14342:	634b      	str	r3, [r1, #52]	; 0x34
	z_impl_k_sem_give(sem);
   14344:	f101 0010 	add.w	r0, r1, #16
   14348:	f004 b970 	b.w	1862c <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1434c:	4b03      	ldr	r3, [pc, #12]	; (1435c <event_handler+0x28>)
   1434e:	e7f8      	b.n	14342 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   14350:	4b03      	ldr	r3, [pc, #12]	; (14360 <event_handler+0x2c>)
   14352:	e7f6      	b.n	14342 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   14354:	4b03      	ldr	r3, [pc, #12]	; (14364 <event_handler+0x30>)
   14356:	e7f4      	b.n	14342 <event_handler+0xe>
   14358:	0bad0000 	.word	0x0bad0000
   1435c:	0bae0001 	.word	0x0bae0001
   14360:	0bae0002 	.word	0x0bae0002
   14364:	0bad0001 	.word	0x0bad0001

00014368 <i2c_nrfx_twim_transfer>:
{
   14368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1436c:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1436e:	6906      	ldr	r6, [r0, #16]
{
   14370:	b089      	sub	sp, #36	; 0x24
   14372:	4698      	mov	r8, r3
   14374:	4605      	mov	r5, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   14376:	893b      	ldrh	r3, [r7, #8]
   14378:	9300      	str	r3, [sp, #0]
{
   1437a:	460c      	mov	r4, r1
   1437c:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   1437e:	2100      	movs	r1, #0
   14380:	2214      	movs	r2, #20
   14382:	a803      	add	r0, sp, #12
	uint8_t *msg_buf = dev_data->msg_buf;
   14384:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
	nrfx_twim_xfer_desc_t cur_xfer = {
   14388:	f005 fe16 	bl	19fb8 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   1438c:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
	nrfx_twim_xfer_desc_t cur_xfer = {
   14390:	f88d 800d 	strb.w	r8, [sp, #13]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   14394:	b1bb      	cbz	r3, 143c6 <i2c_nrfx_twim_transfer+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   14396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1439a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1439e:	4630      	mov	r0, r6
   143a0:	f004 f964 	bl	1866c <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   143a4:	f106 0a10 	add.w	sl, r6, #16
   143a8:	2200      	movs	r2, #0
   143aa:	2300      	movs	r3, #0
   143ac:	4650      	mov	r0, sl
   143ae:	f004 f95d 	bl	1866c <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   143b2:	4638      	mov	r0, r7
   143b4:	f002 f82e 	bl	16414 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   143b8:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
   143bc:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   143be:	45d8      	cmp	r8, fp
   143c0:	d309      	bcc.n	143d6 <i2c_nrfx_twim_transfer+0x6e>
   143c2:	2400      	movs	r4, #0
   143c4:	e051      	b.n	1446a <i2c_nrfx_twim_transfer+0x102>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   143c6:	4628      	mov	r0, r5
   143c8:	f7ff ff9c 	bl	14304 <init_twim>
   143cc:	2800      	cmp	r0, #0
   143ce:	dae2      	bge.n	14396 <i2c_nrfx_twim_transfer+0x2e>
		return -EIO;
   143d0:	f06f 0404 	mvn.w	r4, #4
   143d4:	e04f      	b.n	14476 <i2c_nrfx_twim_transfer+0x10e>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   143d6:	7a21      	ldrb	r1, [r4, #8]
   143d8:	070a      	lsls	r2, r1, #28
   143da:	f100 808f 	bmi.w	144fc <i2c_nrfx_twim_transfer+0x194>
		bool concat_next = ((i + 1) < num_msgs)
   143de:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   143e2:	45d8      	cmp	r8, fp
   143e4:	6862      	ldr	r2, [r4, #4]
   143e6:	d20a      	bcs.n	143fe <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   143e8:	078b      	lsls	r3, r1, #30
   143ea:	d408      	bmi.n	143fe <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   143ec:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   143ee:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   143f2:	f000 0001 	and.w	r0, r0, #1
   143f6:	f003 0304 	and.w	r3, r3, #4
   143fa:	4303      	orrs	r3, r0
   143fc:	d016      	beq.n	1442c <i2c_nrfx_twim_transfer+0xc4>
		if (concat_next || (msg_buf_used != 0)) {
   143fe:	b1bd      	cbz	r5, 14430 <i2c_nrfx_twim_transfer+0xc8>
				&& ((msgs[i].flags & I2C_MSG_READ)
   14400:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   14402:	f8dd c000 	ldr.w	ip, [sp]
   14406:	18a8      	adds	r0, r5, r2
   14408:	4560      	cmp	r0, ip
   1440a:	d87a      	bhi.n	14502 <i2c_nrfx_twim_transfer+0x19a>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   1440c:	07c8      	lsls	r0, r1, #31
   1440e:	d406      	bmi.n	1441e <i2c_nrfx_twim_transfer+0xb6>
				memcpy(msg_buf + msg_buf_used,
   14410:	6821      	ldr	r1, [r4, #0]
   14412:	9301      	str	r3, [sp, #4]
   14414:	eb09 0005 	add.w	r0, r9, r5
   14418:	f005 fdc3 	bl	19fa2 <memcpy>
   1441c:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
   1441e:	6862      	ldr	r2, [r4, #4]
   14420:	4415      	add	r5, r2
   14422:	b2ad      	uxth	r5, r5
		if (concat_next) {
   14424:	2b00      	cmp	r3, #0
   14426:	d037      	beq.n	14498 <i2c_nrfx_twim_transfer+0x130>
   14428:	340c      	adds	r4, #12
   1442a:	e7c8      	b.n	143be <i2c_nrfx_twim_transfer+0x56>
				&& ((msgs[i].flags & I2C_MSG_READ)
   1442c:	2301      	movs	r3, #1
   1442e:	e7e8      	b.n	14402 <i2c_nrfx_twim_transfer+0x9a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   14430:	07c9      	lsls	r1, r1, #31
   14432:	d524      	bpl.n	1447e <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.p_primary_buf = msgs[i].buf;
   14434:	6823      	ldr	r3, [r4, #0]
   14436:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
   14438:	6863      	ldr	r3, [r4, #4]
   1443a:	9304      	str	r3, [sp, #16]
   1443c:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1443e:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   14440:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   14444:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   14448:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1444c:	a903      	add	r1, sp, #12
   1444e:	bf0c      	ite	eq
   14450:	2220      	moveq	r2, #32
   14452:	2200      	movne	r2, #0
   14454:	4638      	mov	r0, r7
   14456:	f002 f84f 	bl	164f8 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1445a:	4b2e      	ldr	r3, [pc, #184]	; (14514 <i2c_nrfx_twim_transfer+0x1ac>)
   1445c:	4298      	cmp	r0, r3
   1445e:	d021      	beq.n	144a4 <i2c_nrfx_twim_transfer+0x13c>
			if (res == NRFX_ERROR_BUSY) {
   14460:	330b      	adds	r3, #11
   14462:	4298      	cmp	r0, r3
   14464:	d053      	beq.n	1450e <i2c_nrfx_twim_transfer+0x1a6>
			ret = -EIO;
   14466:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
   1446a:	4638      	mov	r0, r7
   1446c:	f001 ffe2 	bl	16434 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   14470:	4630      	mov	r0, r6
   14472:	f004 f8db 	bl	1862c <z_impl_k_sem_give>
}
   14476:	4620      	mov	r0, r4
   14478:	b009      	add	sp, #36	; 0x24
   1447a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
   1447e:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   14480:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   14484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   14488:	d0d4      	beq.n	14434 <i2c_nrfx_twim_transfer+0xcc>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   1448a:	897b      	ldrh	r3, [r7, #10]
   1448c:	4293      	cmp	r3, r2
   1448e:	d33b      	bcc.n	14508 <i2c_nrfx_twim_transfer+0x1a0>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
   14490:	4648      	mov	r0, r9
   14492:	f005 fd86 	bl	19fa2 <memcpy>
			msg_buf_used = msgs[i].len;
   14496:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   14498:	2d00      	cmp	r5, #0
   1449a:	d0cb      	beq.n	14434 <i2c_nrfx_twim_transfer+0xcc>
			cur_xfer.p_primary_buf = msg_buf;
   1449c:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
   144a0:	9504      	str	r5, [sp, #16]
   144a2:	e7cc      	b.n	1443e <i2c_nrfx_twim_transfer+0xd6>
	return z_impl_k_sem_take(sem, timeout);
   144a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   144a8:	2300      	movs	r3, #0
   144aa:	4650      	mov	r0, sl
   144ac:	f004 f8de 	bl	1866c <z_impl_k_sem_take>
		if (ret != 0) {
   144b0:	b138      	cbz	r0, 144c2 <i2c_nrfx_twim_transfer+0x15a>
			nrfx_twim_disable(&dev_config->twim);
   144b2:	4638      	mov	r0, r7
   144b4:	f001 ffbe 	bl	16434 <nrfx_twim_disable>
   144b8:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
   144bc:	f003 f936 	bl	1772c <nrfx_twi_twim_bus_recover>
   144c0:	e7d1      	b.n	14466 <i2c_nrfx_twim_transfer+0xfe>
		res = dev_data->res;
   144c2:	6b73      	ldr	r3, [r6, #52]	; 0x34
		if (res != NRFX_SUCCESS) {
   144c4:	4a13      	ldr	r2, [pc, #76]	; (14514 <i2c_nrfx_twim_transfer+0x1ac>)
   144c6:	4293      	cmp	r3, r2
   144c8:	d1cd      	bne.n	14466 <i2c_nrfx_twim_transfer+0xfe>
		if ((msgs[i].flags & I2C_MSG_READ)
   144ca:	7a23      	ldrb	r3, [r4, #8]
   144cc:	07db      	lsls	r3, r3, #31
   144ce:	d401      	bmi.n	144d4 <i2c_nrfx_twim_transfer+0x16c>
		msg_buf_used = 0;
   144d0:	2500      	movs	r5, #0
   144d2:	e7a9      	b.n	14428 <i2c_nrfx_twim_transfer+0xc0>
		    && cur_xfer.p_primary_buf == msg_buf) {
   144d4:	9b06      	ldr	r3, [sp, #24]
   144d6:	4599      	cmp	r9, r3
   144d8:	d1fa      	bne.n	144d0 <i2c_nrfx_twim_transfer+0x168>
   144da:	4623      	mov	r3, r4
   144dc:	e008      	b.n	144f0 <i2c_nrfx_twim_transfer+0x188>
				msg_buf_used -= msgs[j].len;
   144de:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
   144e0:	68d8      	ldr	r0, [r3, #12]
   144e2:	9301      	str	r3, [sp, #4]
				msg_buf_used -= msgs[j].len;
   144e4:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
   144e6:	fa19 f181 	uxtah	r1, r9, r1
   144ea:	f005 fd5a 	bl	19fa2 <memcpy>
				j--;
   144ee:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
   144f0:	685a      	ldr	r2, [r3, #4]
   144f2:	4295      	cmp	r5, r2
   144f4:	f1a3 030c 	sub.w	r3, r3, #12
   144f8:	d2f1      	bcs.n	144de <i2c_nrfx_twim_transfer+0x176>
   144fa:	e7e9      	b.n	144d0 <i2c_nrfx_twim_transfer+0x168>
			ret = -ENOTSUP;
   144fc:	f06f 0485 	mvn.w	r4, #133	; 0x85
   14500:	e7b3      	b.n	1446a <i2c_nrfx_twim_transfer+0x102>
				ret = -ENOSPC;
   14502:	f06f 041b 	mvn.w	r4, #27
   14506:	e7b0      	b.n	1446a <i2c_nrfx_twim_transfer+0x102>
				ret = -EINVAL;
   14508:	f06f 0415 	mvn.w	r4, #21
   1450c:	e7ad      	b.n	1446a <i2c_nrfx_twim_transfer+0x102>
				ret = -EBUSY;
   1450e:	f06f 040f 	mvn.w	r4, #15
   14512:	e7aa      	b.n	1446a <i2c_nrfx_twim_transfer+0x102>
   14514:	0bad0000 	.word	0x0bad0000

00014518 <transfer_next_chunk>:
	return 0;
}
#endif

static void transfer_next_chunk(const struct device *dev)
{
   14518:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1451a:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1451c:	6cab      	ldr	r3, [r5, #72]	; 0x48
		return ctx->rx_len;
   1451e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
{
   14520:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
   14522:	b97b      	cbnz	r3, 14544 <transfer_next_chunk+0x2c>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   14524:	b99c      	cbnz	r4, 1454e <transfer_next_chunk+0x36>
	_spi_context_cs_control(ctx, on, false);
   14526:	2200      	movs	r2, #0
   14528:	4611      	mov	r1, r2
   1452a:	4628      	mov	r0, r5
   1452c:	f006 f8f9 	bl	1a722 <_spi_context_cs_control>
	ctx->sync_status = status;
   14530:	632c      	str	r4, [r5, #48]	; 0x30
	z_impl_k_sem_give(sem);
   14532:	f105 0020 	add.w	r0, r5, #32
   14536:	f004 f879 	bl	1862c <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
   1453a:	2300      	movs	r3, #0
   1453c:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
   14540:	b005      	add	sp, #20
   14542:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (!ctx->rx_len) {
   14544:	2c00      	cmp	r4, #0
   14546:	d035      	beq.n	145b4 <transfer_next_chunk+0x9c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   14548:	429c      	cmp	r4, r3
   1454a:	bf28      	it	cs
   1454c:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
   1454e:	6c69      	ldr	r1, [r5, #68]	; 0x44
	const struct spi_nrfx_config *dev_config = dev->config;
   14550:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
   14552:	b179      	cbz	r1, 14574 <transfer_next_chunk+0x5c>
   14554:	b173      	cbz	r3, 14574 <transfer_next_chunk+0x5c>
   14556:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1455a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1455e:	d009      	beq.n	14574 <transfer_next_chunk+0x5c>
			if (chunk_len > sizeof(dev_data->buffer)) {
   14560:	2c08      	cmp	r4, #8
   14562:	bf28      	it	cs
   14564:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
   14566:	f105 075e 	add.w	r7, r5, #94	; 0x5e
   1456a:	4622      	mov	r2, r4
   1456c:	4638      	mov	r0, r7
   1456e:	f005 fd18 	bl	19fa2 <memcpy>
			tx_buf = dev_data->buffer;
   14572:	4639      	mov	r1, r7
		if (chunk_len > dev_config->max_chunk_len) {
   14574:	68b2      	ldr	r2, [r6, #8]
   14576:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		xfer.p_tx_buffer = tx_buf;
   14578:	9100      	str	r1, [sp, #0]
   1457a:	4294      	cmp	r4, r2
   1457c:	bf28      	it	cs
   1457e:	4614      	movcs	r4, r2
		dev_data->chunk_len = chunk_len;
   14580:	65ac      	str	r4, [r5, #88]	; 0x58
   14582:	b11b      	cbz	r3, 1458c <transfer_next_chunk+0x74>
   14584:	6cab      	ldr	r3, [r5, #72]	; 0x48
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   14586:	2b00      	cmp	r3, #0
   14588:	bf18      	it	ne
   1458a:	4623      	movne	r3, r4
   1458c:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1458e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   14590:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   14592:	b11b      	cbz	r3, 1459c <transfer_next_chunk+0x84>
   14594:	6d2b      	ldr	r3, [r5, #80]	; 0x50
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   14596:	2b00      	cmp	r3, #0
   14598:	bf18      	it	ne
   1459a:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1459c:	2200      	movs	r2, #0
   1459e:	4669      	mov	r1, sp
   145a0:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   145a2:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   145a4:	f001 fd80 	bl	160a8 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   145a8:	4b03      	ldr	r3, [pc, #12]	; (145b8 <transfer_next_chunk+0xa0>)
   145aa:	4298      	cmp	r0, r3
   145ac:	d0c8      	beq.n	14540 <transfer_next_chunk+0x28>
			error = -EIO;
   145ae:	f06f 0404 	mvn.w	r4, #4
   145b2:	e7b8      	b.n	14526 <transfer_next_chunk+0xe>
   145b4:	461c      	mov	r4, r3
   145b6:	e7ca      	b.n	1454e <transfer_next_chunk+0x36>
   145b8:	0bad0000 	.word	0x0bad0000

000145bc <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
   145bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145c0:	461f      	mov	r7, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   145c2:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   145c4:	6904      	ldr	r4, [r0, #16]
{
   145c6:	4681      	mov	r9, r0
   145c8:	0498      	lsls	r0, r3, #18
   145ca:	b08b      	sub	sp, #44	; 0x2c
   145cc:	460d      	mov	r5, r1
   145ce:	4690      	mov	r8, r2
   145d0:	f100 80d4 	bmi.w	1477c <spi_nrfx_transceive+0x1c0>
	return z_impl_k_sem_take(sem, timeout);
   145d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   145d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   145dc:	f104 0010 	add.w	r0, r4, #16
   145e0:	f004 f844 	bl	1866c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   145e4:	6065      	str	r5, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   145e6:	f8d9 b004 	ldr.w	fp, [r9, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   145ea:	f8d9 a010 	ldr.w	sl, [r9, #16]
	uint32_t max_freq = dev_config->max_freq;
   145ee:	f8db 300c 	ldr.w	r3, [fp, #12]
   145f2:	9303      	str	r3, [sp, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   145f4:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
   145f8:	9301      	str	r3, [sp, #4]
   145fa:	b11b      	cbz	r3, 14604 <spi_nrfx_transceive+0x48>
   145fc:	f8da 3000 	ldr.w	r3, [sl]
   14600:	429d      	cmp	r5, r3
   14602:	d06d      	beq.n	146e0 <spi_nrfx_transceive+0x124>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   14604:	88ae      	ldrh	r6, [r5, #4]
   14606:	0531      	lsls	r1, r6, #20
   14608:	f100 80ed 	bmi.w	147e6 <spi_nrfx_transceive+0x22a>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1460c:	f016 0f09 	tst.w	r6, #9
   14610:	f040 80e6 	bne.w	147e0 <spi_nrfx_transceive+0x224>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   14614:	f3c6 1345 	ubfx	r3, r6, #5, #6
   14618:	2b08      	cmp	r3, #8
   1461a:	f040 80e1 	bne.w	147e0 <spi_nrfx_transceive+0x224>
	if (spi_cfg->frequency < 125000) {
   1461e:	682b      	ldr	r3, [r5, #0]
   14620:	9302      	str	r3, [sp, #8]
   14622:	9a02      	ldr	r2, [sp, #8]
   14624:	4b7b      	ldr	r3, [pc, #492]	; (14814 <spi_nrfx_transceive+0x258>)
   14626:	429a      	cmp	r2, r3
   14628:	f240 80da 	bls.w	147e0 <spi_nrfx_transceive+0x224>
	config = dev_config->def_config;
   1462c:	f10b 0e10 	add.w	lr, fp, #16
   14630:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   14634:	f10d 0c14 	add.w	ip, sp, #20
   14638:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1463c:	f8de 3000 	ldr.w	r3, [lr]
   14640:	f8cc 3000 	str.w	r3, [ip]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   14644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14648:	4293      	cmp	r3, r2
   1464a:	bf28      	it	cs
   1464c:	4613      	movcs	r3, r2
	if (frequency < 250000) {
   1464e:	4a72      	ldr	r2, [pc, #456]	; (14818 <spi_nrfx_transceive+0x25c>)
   14650:	4293      	cmp	r3, r2
   14652:	f240 809c 	bls.w	1478e <spi_nrfx_transceive+0x1d2>
	} else if (frequency < 500000) {
   14656:	4a71      	ldr	r2, [pc, #452]	; (1481c <spi_nrfx_transceive+0x260>)
   14658:	4293      	cmp	r3, r2
   1465a:	f240 809b 	bls.w	14794 <spi_nrfx_transceive+0x1d8>
	} else if (frequency < 1000000) {
   1465e:	4a70      	ldr	r2, [pc, #448]	; (14820 <spi_nrfx_transceive+0x264>)
   14660:	4293      	cmp	r3, r2
   14662:	f240 809a 	bls.w	1479a <spi_nrfx_transceive+0x1de>
	} else if (frequency < 2000000) {
   14666:	4a6f      	ldr	r2, [pc, #444]	; (14824 <spi_nrfx_transceive+0x268>)
   14668:	4293      	cmp	r3, r2
   1466a:	f240 8099 	bls.w	147a0 <spi_nrfx_transceive+0x1e4>
	} else if (frequency < 4000000) {
   1466e:	4a6e      	ldr	r2, [pc, #440]	; (14828 <spi_nrfx_transceive+0x26c>)
   14670:	4293      	cmp	r3, r2
   14672:	f240 8098 	bls.w	147a6 <spi_nrfx_transceive+0x1ea>
	} else if (frequency < 8000000) {
   14676:	4a6d      	ldr	r2, [pc, #436]	; (1482c <spi_nrfx_transceive+0x270>)
   14678:	4293      	cmp	r3, r2
   1467a:	f0c0 8097 	bcc.w	147ac <spi_nrfx_transceive+0x1f0>
	} else if (frequency < 16000000) {
   1467e:	4a6c      	ldr	r2, [pc, #432]	; (14830 <spi_nrfx_transceive+0x274>)
   14680:	4293      	cmp	r3, r2
   14682:	f0c0 8096 	bcc.w	147b2 <spi_nrfx_transceive+0x1f6>
		return NRF_SPIM_FREQ_32M;
   14686:	4a6b      	ldr	r2, [pc, #428]	; (14834 <spi_nrfx_transceive+0x278>)
   14688:	4293      	cmp	r3, r2
   1468a:	bf34      	ite	cc
   1468c:	f04f 6320 	movcc.w	r3, #167772160	; 0xa000000
   14690:	f04f 53a0 	movcs.w	r3, #335544320	; 0x14000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   14694:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   14696:	9307      	str	r3, [sp, #28]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   14698:	f006 0304 	and.w	r3, r6, #4
   1469c:	f140 808c 	bpl.w	147b8 <spi_nrfx_transceive+0x1fc>
			return NRF_SPIM_MODE_2;
   146a0:	2b00      	cmp	r3, #0
   146a2:	bf14      	ite	ne
   146a4:	2303      	movne	r3, #3
   146a6:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   146a8:	f88d 3020 	strb.w	r3, [sp, #32]
	if (dev_data->initialized) {
   146ac:	9b01      	ldr	r3, [sp, #4]
	if (operation & SPI_TRANSFER_LSB) {
   146ae:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   146b2:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
	if (dev_data->initialized) {
   146b6:	b12b      	cbz	r3, 146c4 <spi_nrfx_transceive+0x108>
		nrfx_spim_uninit(&dev_config->spim);
   146b8:	4658      	mov	r0, fp
   146ba:	f001 fcad 	bl	16018 <nrfx_spim_uninit>
		dev_data->initialized = false;
   146be:	2300      	movs	r3, #0
   146c0:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	result = nrfx_spim_init(&dev_config->spim, &config,
   146c4:	4653      	mov	r3, sl
   146c6:	4a5c      	ldr	r2, [pc, #368]	; (14838 <spi_nrfx_transceive+0x27c>)
   146c8:	a905      	add	r1, sp, #20
   146ca:	4658      	mov	r0, fp
   146cc:	f001 fbe2 	bl	15e94 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   146d0:	4b5a      	ldr	r3, [pc, #360]	; (1483c <spi_nrfx_transceive+0x280>)
   146d2:	4298      	cmp	r0, r3
   146d4:	d174      	bne.n	147c0 <spi_nrfx_transceive+0x204>
	dev_data->initialized = true;
   146d6:	2301      	movs	r3, #1
   146d8:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	ctx->config = spi_cfg;
   146dc:	f8ca 5000 	str.w	r5, [sl]
		dev_data->busy = true;
   146e0:	2301      	movs	r3, #1
   146e2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   146e6:	f1b8 0f00 	cmp.w	r8, #0
   146ea:	d17f      	bne.n	147ec <spi_nrfx_transceive+0x230>
   146ec:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   146f0:	4642      	mov	r2, r8
   146f2:	63a2      	str	r2, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   146f4:	f104 0138 	add.w	r1, r4, #56	; 0x38
   146f8:	f104 0248 	add.w	r2, r4, #72	; 0x48
   146fc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   14700:	f005 ffea 	bl	1a6d8 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   14704:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   14706:	2f00      	cmp	r7, #0
   14708:	d179      	bne.n	147fe <spi_nrfx_transceive+0x242>
   1470a:	63e7      	str	r7, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1470c:	6427      	str	r7, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1470e:	f104 0250 	add.w	r2, r4, #80	; 0x50
   14712:	f104 0140 	add.w	r1, r4, #64	; 0x40
   14716:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1471a:	f005 ffdd 	bl	1a6d8 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1471e:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   14720:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   14722:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
   14724:	2101      	movs	r1, #1
   14726:	4620      	mov	r0, r4
	ctx->sync_status = 0;
   14728:	6326      	str	r6, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
   1472a:	f005 fffa 	bl	1a722 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1472e:	4648      	mov	r0, r9
   14730:	f7ff fef2 	bl	14518 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   14734:	6d25      	ldr	r5, [r4, #80]	; 0x50
   14736:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			     ctx->config->frequency;
   14738:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1473a:	429d      	cmp	r5, r3
   1473c:	bf38      	it	cc
   1473e:	461d      	movcc	r5, r3
   14740:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   14744:	435d      	muls	r5, r3
			     ctx->config->frequency;
   14746:	f857 3b20 	ldr.w	r3, [r7], #32
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1474a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1474e:	681b      	ldr	r3, [r3, #0]
   14750:	fbb5 f5f3 	udiv	r5, r5, r3
   14754:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   14756:	35c8      	adds	r5, #200	; 0xc8
   14758:	f240 30e7 	movw	r0, #999	; 0x3e7
   1475c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14760:	2300      	movs	r3, #0
   14762:	fbe5 010c 	umlal	r0, r1, r5, ip
   14766:	f7fc f899 	bl	1089c <__aeabi_uldivmod>
   1476a:	4602      	mov	r2, r0
   1476c:	460b      	mov	r3, r1
   1476e:	4638      	mov	r0, r7
   14770:	f003 ff7c 	bl	1866c <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   14774:	2800      	cmp	r0, #0
   14776:	d149      	bne.n	1480c <spi_nrfx_transceive+0x250>
	status = ctx->sync_status;
   14778:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
   1477a:	e023      	b.n	147c4 <spi_nrfx_transceive+0x208>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1477c:	69a3      	ldr	r3, [r4, #24]
   1477e:	2b00      	cmp	r3, #0
   14780:	f47f af28 	bne.w	145d4 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   14784:	6863      	ldr	r3, [r4, #4]
   14786:	4299      	cmp	r1, r3
   14788:	f47f af24 	bne.w	145d4 <spi_nrfx_transceive+0x18>
   1478c:	e72b      	b.n	145e6 <spi_nrfx_transceive+0x2a>
		return NRF_SPIM_FREQ_125K;
   1478e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   14792:	e77f      	b.n	14694 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_250K;
   14794:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   14798:	e77c      	b.n	14694 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_500K;
   1479a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1479e:	e779      	b.n	14694 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_1M;
   147a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   147a4:	e776      	b.n	14694 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_2M;
   147a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   147aa:	e773      	b.n	14694 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_4M;
   147ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   147b0:	e770      	b.n	14694 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_8M;
   147b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   147b6:	e76d      	b.n	14694 <spi_nrfx_transceive+0xd8>
			return NRF_SPIM_MODE_0;
   147b8:	3b00      	subs	r3, #0
   147ba:	bf18      	it	ne
   147bc:	2301      	movne	r3, #1
   147be:	e773      	b.n	146a8 <spi_nrfx_transceive+0xec>
		return -EIO;
   147c0:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   147c4:	6823      	ldr	r3, [r4, #0]
   147c6:	889b      	ldrh	r3, [r3, #4]
   147c8:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   147cc:	d104      	bne.n	147d8 <spi_nrfx_transceive+0x21c>
		ctx->owner = NULL;
   147ce:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   147d0:	f104 0010 	add.w	r0, r4, #16
   147d4:	f003 ff2a 	bl	1862c <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
}
   147d8:	4628      	mov	r0, r5
   147da:	b00b      	add	sp, #44	; 0x2c
   147dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   147e0:	f06f 0515 	mvn.w	r5, #21
   147e4:	e7ee      	b.n	147c4 <spi_nrfx_transceive+0x208>
		return -ENOTSUP;
   147e6:	f06f 0585 	mvn.w	r5, #133	; 0x85
   147ea:	e7eb      	b.n	147c4 <spi_nrfx_transceive+0x208>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   147ec:	f8d8 2000 	ldr.w	r2, [r8]
   147f0:	6362      	str	r2, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   147f2:	2a00      	cmp	r2, #0
   147f4:	f43f af7d 	beq.w	146f2 <spi_nrfx_transceive+0x136>
   147f8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   147fc:	e779      	b.n	146f2 <spi_nrfx_transceive+0x136>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   147fe:	683b      	ldr	r3, [r7, #0]
   14800:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   14802:	b10b      	cbz	r3, 14808 <spi_nrfx_transceive+0x24c>
   14804:	687f      	ldr	r7, [r7, #4]
   14806:	e781      	b.n	1470c <spi_nrfx_transceive+0x150>
   14808:	461f      	mov	r7, r3
   1480a:	e77f      	b.n	1470c <spi_nrfx_transceive+0x150>
		return -ETIMEDOUT;
   1480c:	f06f 0573 	mvn.w	r5, #115	; 0x73
   14810:	e7d8      	b.n	147c4 <spi_nrfx_transceive+0x208>
   14812:	bf00      	nop
   14814:	0001e847 	.word	0x0001e847
   14818:	0003d08f 	.word	0x0003d08f
   1481c:	0007a11f 	.word	0x0007a11f
   14820:	000f423f 	.word	0x000f423f
   14824:	001e847f 	.word	0x001e847f
   14828:	003d08ff 	.word	0x003d08ff
   1482c:	007a1200 	.word	0x007a1200
   14830:	00f42400 	.word	0x00f42400
   14834:	01e84800 	.word	0x01e84800
   14838:	0001a85f 	.word	0x0001a85f
   1483c:	0bad0000 	.word	0x0bad0000

00014840 <regulator_fixed_init_onoff>:
	.enable = enable_onoff,
	.disable = disable_onoff,
};

static int regulator_fixed_init_onoff(const struct device *dev)
{
   14840:	b538      	push	{r3, r4, r5, lr}
	struct driver_data_onoff *data = dev->data;
   14842:	6905      	ldr	r5, [r0, #16]
	int rc;

	data->dev = dev;
	rc = onoff_manager_init(&data->mgr, &transitions);
   14844:	4908      	ldr	r1, [pc, #32]	; (14868 <regulator_fixed_init_onoff+0x28>)
{
   14846:	4604      	mov	r4, r0
	data->dev = dev;
   14848:	4628      	mov	r0, r5
   1484a:	f840 4b04 	str.w	r4, [r0], #4
	rc = onoff_manager_init(&data->mgr, &transitions);
   1484e:	f004 feba 	bl	195c6 <onoff_manager_init>
	__ASSERT_NO_MSG(rc == 0);

#ifdef CONFIG_MULTITHREADING
	k_work_init_delayable(&data->dwork, onoff_worker);
   14852:	4906      	ldr	r1, [pc, #24]	; (1486c <regulator_fixed_init_onoff+0x2c>)
   14854:	f105 0020 	add.w	r0, r5, #32
   14858:	f008 fbf9 	bl	1d04e <k_work_init_delayable>
#endif /* CONFIG_MULTITHREADING */

	rc = common_init(dev);
   1485c:	6860      	ldr	r0, [r4, #4]
   1485e:	f006 f8b2 	bl	1a9c6 <common_init.isra.0>
	}

	LOG_INF("%s onoff: %d", dev->name, rc);

	return rc;
}
   14862:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   14866:	bd38      	pop	{r3, r4, r5, pc}
   14868:	0001d9d0 	.word	0x0001d9d0
   1486c:	0001aa31 	.word	0x0001aa31

00014870 <finalize_transition>:
{
   14870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((rc >= 0) && (delay_us > 0)) {
   14874:	1e1c      	subs	r4, r3, #0
{
   14876:	4605      	mov	r5, r0
   14878:	460f      	mov	r7, r1
   1487a:	4690      	mov	r8, r2
	if ((rc >= 0) && (delay_us > 0)) {
   1487c:	db10      	blt.n	148a0 <finalize_transition+0x30>
   1487e:	b17a      	cbz	r2, 148a0 <finalize_transition+0x30>
			return (uint32_t)((t * to_hz + off) / from_hz);
   14880:	ea4f 4952 	mov.w	r9, r2, lsr #17
   14884:	03d6      	lsls	r6, r2, #15
   14886:	2300      	movs	r3, #0
   14888:	4a14      	ldr	r2, [pc, #80]	; (148dc <finalize_transition+0x6c>)
   1488a:	4630      	mov	r0, r6
   1488c:	4649      	mov	r1, r9
   1488e:	f7fc f805 	bl	1089c <__aeabi_uldivmod>
		    || k_is_pre_kernel()
   14892:	b110      	cbz	r0, 1489a <finalize_transition+0x2a>
	return !z_sys_post_kernel;
   14894:	4b12      	ldr	r3, [pc, #72]	; (148e0 <finalize_transition+0x70>)
   14896:	781b      	ldrb	r3, [r3, #0]
   14898:	b943      	cbnz	r3, 148ac <finalize_transition+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
   1489a:	4640      	mov	r0, r8
   1489c:	f008 fd1a 	bl	1d2d4 <z_impl_k_busy_wait>
	notify(&data->mgr, rc);
   148a0:	4621      	mov	r1, r4
   148a2:	1d28      	adds	r0, r5, #4
   148a4:	463b      	mov	r3, r7
}
   148a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	notify(&data->mgr, rc);
   148aa:	4718      	bx	r3
			return ((t * to_hz + off) / from_hz);
   148ac:	480d      	ldr	r0, [pc, #52]	; (148e4 <finalize_transition+0x74>)
   148ae:	4a0b      	ldr	r2, [pc, #44]	; (148dc <finalize_transition+0x6c>)
			data->notify = notify;
   148b0:	652f      	str	r7, [r5, #80]	; 0x50
   148b2:	1830      	adds	r0, r6, r0
			data->task = WORK_TASK_DELAY;
   148b4:	f04f 0303 	mov.w	r3, #3
   148b8:	f149 0100 	adc.w	r1, r9, #0
   148bc:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
   148c0:	2300      	movs	r3, #0
   148c2:	f7fb ffeb 	bl	1089c <__aeabi_uldivmod>
   148c6:	4602      	mov	r2, r0
   148c8:	460b      	mov	r3, r1
			rc = k_work_schedule(&data->dwork, K_USEC(delay_us));
   148ca:	f105 0020 	add.w	r0, r5, #32
   148ce:	f004 f83d 	bl	1894c <k_work_schedule>
			if (rc >= 0) {
   148d2:	1e04      	subs	r4, r0, #0
   148d4:	dbe4      	blt.n	148a0 <finalize_transition+0x30>
}
   148d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   148da:	bf00      	nop
   148dc:	000f4240 	.word	0x000f4240
   148e0:	20001a03 	.word	0x20001a03
   148e4:	000f423f 	.word	0x000f423f

000148e8 <event_txdrdy_check>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   148e8:	4b05      	ldr	r3, [pc, #20]	; (14900 <event_txdrdy_check+0x18>)
   148ea:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
   148ee:	b92b      	cbnz	r3, 148fc <event_txdrdy_check+0x14>
   148f0:	4b04      	ldr	r3, [pc, #16]	; (14904 <event_txdrdy_check+0x1c>)
   148f2:	7818      	ldrb	r0, [r3, #0]
   148f4:	3800      	subs	r0, #0
   148f6:	bf18      	it	ne
   148f8:	2001      	movne	r0, #1
   148fa:	4770      	bx	lr
   148fc:	2001      	movs	r0, #1
#endif
	       );
}
   148fe:	4770      	bx	lr
   14900:	40002000 	.word	0x40002000
   14904:	200019fc 	.word	0x200019fc

00014908 <uart_nrfx_poll_in>:
   14908:	4b07      	ldr	r3, [pc, #28]	; (14928 <uart_nrfx_poll_in+0x20>)
   1490a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1490e:	b142      	cbz	r2, 14922 <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14910:	2000      	movs	r0, #0
   14912:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
   14916:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   1491a:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1491e:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   14920:	4770      	bx	lr
		return -1;
   14922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   14926:	4770      	bx	lr
   14928:	40002000 	.word	0x40002000

0001492c <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1492c:	4b02      	ldr	r3, [pc, #8]	; (14938 <uart_nrfx_err_check+0xc>)
   1492e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   14932:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   14936:	4770      	bx	lr
   14938:	40002000 	.word	0x40002000

0001493c <uart_nrfx_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrfx_fifo_read(const struct device *dev,
			       uint8_t *rx_data,
			       const int size)
{
   1493c:	b570      	push	{r4, r5, r6, lr}
	uint8_t num_rx = 0U;

	while ((size - num_rx > 0) &&
   1493e:	2300      	movs	r3, #0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14940:	4c09      	ldr	r4, [pc, #36]	; (14968 <uart_nrfx_fifo_read+0x2c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14942:	461e      	mov	r6, r3
   14944:	b2d8      	uxtb	r0, r3
   14946:	1a15      	subs	r5, r2, r0
   14948:	2d00      	cmp	r5, #0
   1494a:	dd03      	ble.n	14954 <uart_nrfx_fifo_read+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1494c:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
   14950:	3301      	adds	r3, #1
   14952:	b905      	cbnz	r5, 14956 <uart_nrfx_fifo_read+0x1a>
		/* Receive a character */
		rx_data[num_rx++] = (uint8_t)nrf_uart_rxd_get(uart0_addr);
	}

	return num_rx;
}
   14954:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14956:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
   1495a:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    return p_reg->RXD;
   1495e:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
   14962:	540d      	strb	r5, [r1, r0]
   14964:	e7ee      	b.n	14944 <uart_nrfx_fifo_read+0x8>
   14966:	bf00      	nop
   14968:	40002000 	.word	0x40002000

0001496c <uart_nrfx_irq_tx_enable>:
/** Interrupt driven transfer enabling function */
static void uart_nrfx_irq_tx_enable(const struct device *dev)
{
	uint32_t key;

	disable_tx_irq = false;
   1496c:	4b0e      	ldr	r3, [pc, #56]	; (149a8 <uart_nrfx_irq_tx_enable+0x3c>)
   1496e:	2200      	movs	r2, #0
   14970:	701a      	strb	r2, [r3, #0]
    p_reg->TXD = txd;
}

NRF_STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14972:	4b0e      	ldr	r3, [pc, #56]	; (149ac <uart_nrfx_irq_tx_enable+0x40>)
   14974:	2201      	movs	r2, #1
   14976:	609a      	str	r2, [r3, #8]
    p_reg->INTENSET = mask;
   14978:	2280      	movs	r2, #128	; 0x80
   1497a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	__asm__ volatile(
   1497e:	f04f 0220 	mov.w	r2, #32
   14982:	f3ef 8311 	mrs	r3, BASEPRI
   14986:	f382 8812 	msr	BASEPRI_MAX, r2
   1498a:	f3bf 8f6f 	isb	sy
	/* Critical section is used to avoid any UART related interrupt which
	 * can occur after the if statement and before call of the function
	 * forcing an interrupt.
	 */
	key = irq_lock();
	if (uart_sw_event_txdrdy) {
   1498e:	4a08      	ldr	r2, [pc, #32]	; (149b0 <uart_nrfx_irq_tx_enable+0x44>)
   14990:	7812      	ldrb	r2, [r2, #0]
   14992:	b11a      	cbz	r2, 1499c <uart_nrfx_irq_tx_enable+0x30>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14994:	4a07      	ldr	r2, [pc, #28]	; (149b4 <uart_nrfx_irq_tx_enable+0x48>)
   14996:	2104      	movs	r1, #4
   14998:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
   1499c:	f383 8811 	msr	BASEPRI, r3
   149a0:	f3bf 8f6f 	isb	sy
		 * triggered by the software.
		 */
		NVIC_SetPendingIRQ(IRQN);
	}
	irq_unlock(key);
}
   149a4:	4770      	bx	lr
   149a6:	bf00      	nop
   149a8:	200019fb 	.word	0x200019fb
   149ac:	40002000 	.word	0x40002000
   149b0:	200019fc 	.word	0x200019fc
   149b4:	e000e100 	.word	0xe000e100

000149b8 <uart_nrfx_irq_tx_disable>:

/** Interrupt driven transfer disabling function */
static void uart_nrfx_irq_tx_disable(const struct device *dev)
{
	/* Disable TX interrupt in uart_nrfx_isr() when transmission is done. */
	disable_tx_irq = true;
   149b8:	4b01      	ldr	r3, [pc, #4]	; (149c0 <uart_nrfx_irq_tx_disable+0x8>)
   149ba:	2201      	movs	r2, #1
   149bc:	701a      	strb	r2, [r3, #0]
}
   149be:	4770      	bx	lr
   149c0:	200019fb 	.word	0x200019fb

000149c4 <uart_nrfx_irq_rx_enable>:
   149c4:	4b02      	ldr	r3, [pc, #8]	; (149d0 <uart_nrfx_irq_rx_enable+0xc>)
   149c6:	2204      	movs	r2, #4
   149c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(const struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
   149cc:	4770      	bx	lr
   149ce:	bf00      	nop
   149d0:	40002000 	.word	0x40002000

000149d4 <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   149d4:	4b02      	ldr	r3, [pc, #8]	; (149e0 <uart_nrfx_irq_rx_disable+0xc>)
   149d6:	2204      	movs	r2, #4
   149d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(const struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
   149dc:	4770      	bx	lr
   149de:	bf00      	nop
   149e0:	40002000 	.word	0x40002000

000149e4 <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   149e4:	4b03      	ldr	r3, [pc, #12]	; (149f4 <uart_nrfx_irq_rx_ready+0x10>)
   149e6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(const struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
   149ea:	3800      	subs	r0, #0
   149ec:	bf18      	it	ne
   149ee:	2001      	movne	r0, #1
   149f0:	4770      	bx	lr
   149f2:	bf00      	nop
   149f4:	40002000 	.word	0x40002000

000149f8 <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   149f8:	4b02      	ldr	r3, [pc, #8]	; (14a04 <uart_nrfx_irq_err_enable+0xc>)
   149fa:	f44f 7200 	mov.w	r2, #512	; 0x200
   149fe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(const struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
   14a02:	4770      	bx	lr
   14a04:	40002000 	.word	0x40002000

00014a08 <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   14a08:	4b02      	ldr	r3, [pc, #8]	; (14a14 <uart_nrfx_irq_err_disable+0xc>)
   14a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
   14a0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(const struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
   14a12:	4770      	bx	lr
   14a14:	40002000 	.word	0x40002000

00014a18 <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(const struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
   14a18:	4b02      	ldr	r3, [pc, #8]	; (14a24 <uart_nrfx_irq_callback_set+0xc>)
   14a1a:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
   14a1c:	4b02      	ldr	r3, [pc, #8]	; (14a28 <uart_nrfx_irq_callback_set+0x10>)
   14a1e:	601a      	str	r2, [r3, #0]
}
   14a20:	4770      	bx	lr
   14a22:	bf00      	nop
   14a24:	20001690 	.word	0x20001690
   14a28:	20001694 	.word	0x20001694

00014a2c <uart_nrfx_irq_tx_ready_complete>:
{
   14a2c:	b508      	push	{r3, lr}
    return p_reg->INTENSET & mask;
   14a2e:	4b07      	ldr	r3, [pc, #28]	; (14a4c <uart_nrfx_irq_tx_ready_complete+0x20>)
   14a30:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       !disable_tx_irq &&
   14a34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   14a38:	d004      	beq.n	14a44 <uart_nrfx_irq_tx_ready_complete+0x18>
   14a3a:	4b05      	ldr	r3, [pc, #20]	; (14a50 <uart_nrfx_irq_tx_ready_complete+0x24>)
   14a3c:	781b      	ldrb	r3, [r3, #0]
					 NRF_UART_INT_MASK_TXDRDY) &&
   14a3e:	b913      	cbnz	r3, 14a46 <uart_nrfx_irq_tx_ready_complete+0x1a>
	       event_txdrdy_check();
   14a40:	f7ff ff52 	bl	148e8 <event_txdrdy_check>
}
   14a44:	bd08      	pop	{r3, pc}
	       !disable_tx_irq &&
   14a46:	2000      	movs	r0, #0
   14a48:	e7fc      	b.n	14a44 <uart_nrfx_irq_tx_ready_complete+0x18>
   14a4a:	bf00      	nop
   14a4c:	40002000 	.word	0x40002000
   14a50:	200019fb 	.word	0x200019fb

00014a54 <uart_nrfx_irq_is_pending>:
   14a54:	4a0b      	ldr	r2, [pc, #44]	; (14a84 <uart_nrfx_irq_is_pending+0x30>)
{
   14a56:	b508      	push	{r3, lr}
   14a58:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
		||
   14a5c:	061b      	lsls	r3, r3, #24
   14a5e:	d405      	bmi.n	14a6c <uart_nrfx_irq_is_pending+0x18>
   14a60:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
   14a64:	f010 0004 	ands.w	r0, r0, #4
   14a68:	d106      	bne.n	14a78 <uart_nrfx_irq_is_pending+0x24>
}
   14a6a:	bd08      	pop	{r3, pc}
		 uart_nrfx_irq_tx_ready_complete(dev))
   14a6c:	f7ff ffde 	bl	14a2c <uart_nrfx_irq_tx_ready_complete>
					   NRF_UART_INT_MASK_TXDRDY) &&
   14a70:	2800      	cmp	r0, #0
   14a72:	d0f5      	beq.n	14a60 <uart_nrfx_irq_is_pending+0xc>
		||
   14a74:	2001      	movs	r0, #1
   14a76:	e7f8      	b.n	14a6a <uart_nrfx_irq_is_pending+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14a78:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
					   NRF_UART_INT_MASK_RXDRDY) &&
   14a7c:	3800      	subs	r0, #0
   14a7e:	bf18      	it	ne
   14a80:	2001      	movne	r0, #1
   14a82:	e7f2      	b.n	14a6a <uart_nrfx_irq_is_pending+0x16>
   14a84:	40002000 	.word	0x40002000

00014a88 <uart_nrfx_isr>:
 *
 * @param arg Argument to ISR.
 */
static void uart_nrfx_isr(const struct device *dev)
{
	if (disable_tx_irq &&
   14a88:	4a0e      	ldr	r2, [pc, #56]	; (14ac4 <uart_nrfx_isr+0x3c>)
   14a8a:	4b0f      	ldr	r3, [pc, #60]	; (14ac8 <uart_nrfx_isr+0x40>)
   14a8c:	7811      	ldrb	r1, [r2, #0]
   14a8e:	b151      	cbz	r1, 14aa6 <uart_nrfx_isr+0x1e>
   14a90:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
   14a94:	b139      	cbz	r1, 14aa6 <uart_nrfx_isr+0x1e>
    p_reg->INTENCLR = mask;
   14a96:	2180      	movs	r1, #128	; 0x80
   14a98:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14a9c:	2101      	movs	r1, #1
   14a9e:	60d9      	str	r1, [r3, #12]
		/* The transaction is over. It is okay to enter the deep sleep
		 * mode if needed.
		 */
		pm_device_busy_clear(dev);

		disable_tx_irq = false;
   14aa0:	2300      	movs	r3, #0
   14aa2:	7013      	strb	r3, [r2, #0]

		return;
   14aa4:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14aa6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
	}

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
   14aaa:	b122      	cbz	r2, 14ab6 <uart_nrfx_isr+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14aac:	2200      	movs	r2, #0
   14aae:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   14ab2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_ERROR);
	}

	if (irq_callback) {
   14ab6:	4b05      	ldr	r3, [pc, #20]	; (14acc <uart_nrfx_isr+0x44>)
   14ab8:	681b      	ldr	r3, [r3, #0]
   14aba:	b113      	cbz	r3, 14ac2 <uart_nrfx_isr+0x3a>
		irq_callback(dev, irq_cb_data);
   14abc:	4a04      	ldr	r2, [pc, #16]	; (14ad0 <uart_nrfx_isr+0x48>)
   14abe:	6811      	ldr	r1, [r2, #0]
   14ac0:	4718      	bx	r3
	}
}
   14ac2:	4770      	bx	lr
   14ac4:	200019fb 	.word	0x200019fb
   14ac8:	40002000 	.word	0x40002000
   14acc:	20001690 	.word	0x20001690
   14ad0:	20001694 	.word	0x20001694

00014ad4 <uart_nrfx_configure>:
{
   14ad4:	b530      	push	{r4, r5, lr}
	switch (cfg->stop_bits) {
   14ad6:	794b      	ldrb	r3, [r1, #5]
   14ad8:	2b01      	cmp	r3, #1
   14ada:	d022      	beq.n	14b22 <uart_nrfx_configure+0x4e>
   14adc:	2b03      	cmp	r3, #3
   14ade:	d11d      	bne.n	14b1c <uart_nrfx_configure+0x48>
		uart_cfg.stop = NRF_UART_STOP_TWO;
   14ae0:	2510      	movs	r5, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   14ae2:	798b      	ldrb	r3, [r1, #6]
   14ae4:	2b03      	cmp	r3, #3
   14ae6:	d119      	bne.n	14b1c <uart_nrfx_configure+0x48>
	switch (cfg->flow_ctrl) {
   14ae8:	79cb      	ldrb	r3, [r1, #7]
   14aea:	b9bb      	cbnz	r3, 14b1c <uart_nrfx_configure+0x48>
	switch (cfg->parity) {
   14aec:	790a      	ldrb	r2, [r1, #4]
   14aee:	b112      	cbz	r2, 14af6 <uart_nrfx_configure+0x22>
   14af0:	2a02      	cmp	r2, #2
   14af2:	d113      	bne.n	14b1c <uart_nrfx_configure+0x48>
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   14af4:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   14af6:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   14af8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   14afc:	d061      	beq.n	14bc2 <uart_nrfx_configure+0xee>
   14afe:	d82d      	bhi.n	14b5c <uart_nrfx_configure+0x88>
   14b00:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14b04:	d05f      	beq.n	14bc6 <uart_nrfx_configure+0xf2>
   14b06:	d816      	bhi.n	14b36 <uart_nrfx_configure+0x62>
   14b08:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   14b0c:	d05d      	beq.n	14bca <uart_nrfx_configure+0xf6>
   14b0e:	d80a      	bhi.n	14b26 <uart_nrfx_configure+0x52>
   14b10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   14b14:	d05c      	beq.n	14bd0 <uart_nrfx_configure+0xfc>
   14b16:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   14b1a:	d05c      	beq.n	14bd6 <uart_nrfx_configure+0x102>
   14b1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14b20:	e04e      	b.n	14bc0 <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
   14b22:	2500      	movs	r5, #0
   14b24:	e7dd      	b.n	14ae2 <uart_nrfx_configure+0xe>
	switch (baudrate) {
   14b26:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   14b2a:	d057      	beq.n	14bdc <uart_nrfx_configure+0x108>
   14b2c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   14b30:	d1f4      	bne.n	14b1c <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   14b32:	4b34      	ldr	r3, [pc, #208]	; (14c04 <uart_nrfx_configure+0x130>)
   14b34:	e039      	b.n	14baa <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   14b36:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   14b3a:	d052      	beq.n	14be2 <uart_nrfx_configure+0x10e>
   14b3c:	d807      	bhi.n	14b4e <uart_nrfx_configure+0x7a>
   14b3e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   14b42:	d050      	beq.n	14be6 <uart_nrfx_configure+0x112>
   14b44:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   14b48:	d1e8      	bne.n	14b1c <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   14b4a:	4b2f      	ldr	r3, [pc, #188]	; (14c08 <uart_nrfx_configure+0x134>)
   14b4c:	e02d      	b.n	14baa <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   14b4e:	f647 2412 	movw	r4, #31250	; 0x7a12
   14b52:	42a3      	cmp	r3, r4
   14b54:	d1e2      	bne.n	14b1c <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   14b56:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   14b5a:	e026      	b.n	14baa <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   14b5c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   14b60:	d044      	beq.n	14bec <uart_nrfx_configure+0x118>
   14b62:	d811      	bhi.n	14b88 <uart_nrfx_configure+0xb4>
   14b64:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   14b68:	d042      	beq.n	14bf0 <uart_nrfx_configure+0x11c>
   14b6a:	d808      	bhi.n	14b7e <uart_nrfx_configure+0xaa>
   14b6c:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   14b70:	42a3      	cmp	r3, r4
   14b72:	d03f      	beq.n	14bf4 <uart_nrfx_configure+0x120>
   14b74:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   14b78:	d1d0      	bne.n	14b1c <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   14b7a:	4b24      	ldr	r3, [pc, #144]	; (14c0c <uart_nrfx_configure+0x138>)
   14b7c:	e015      	b.n	14baa <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   14b7e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   14b82:	d1cb      	bne.n	14b1c <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   14b84:	4b22      	ldr	r3, [pc, #136]	; (14c10 <uart_nrfx_configure+0x13c>)
   14b86:	e010      	b.n	14baa <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   14b88:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   14b8c:	d035      	beq.n	14bfa <uart_nrfx_configure+0x126>
   14b8e:	d807      	bhi.n	14ba0 <uart_nrfx_configure+0xcc>
   14b90:	4c20      	ldr	r4, [pc, #128]	; (14c14 <uart_nrfx_configure+0x140>)
   14b92:	42a3      	cmp	r3, r4
   14b94:	d033      	beq.n	14bfe <uart_nrfx_configure+0x12a>
   14b96:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   14b9a:	d1bf      	bne.n	14b1c <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   14b9c:	4b1e      	ldr	r3, [pc, #120]	; (14c18 <uart_nrfx_configure+0x144>)
   14b9e:	e004      	b.n	14baa <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   14ba0:	4c1e      	ldr	r4, [pc, #120]	; (14c1c <uart_nrfx_configure+0x148>)
   14ba2:	42a3      	cmp	r3, r4
   14ba4:	d1ba      	bne.n	14b1c <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   14ba6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uart_nrfx_data *data = dev->data;
   14baa:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   14bac:	481c      	ldr	r0, [pc, #112]	; (14c20 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   14bae:	432a      	orrs	r2, r5
    p_reg->BAUDRATE = baudrate;
   14bb0:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   14bb4:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
   14bb8:	c903      	ldmia	r1, {r0, r1}
   14bba:	e884 0003 	stmia.w	r4, {r0, r1}
	return 0;
   14bbe:	2000      	movs	r0, #0
}
   14bc0:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   14bc2:	4b18      	ldr	r3, [pc, #96]	; (14c24 <uart_nrfx_configure+0x150>)
   14bc4:	e7f1      	b.n	14baa <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   14bc6:	4b18      	ldr	r3, [pc, #96]	; (14c28 <uart_nrfx_configure+0x154>)
   14bc8:	e7ef      	b.n	14baa <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   14bca:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   14bce:	e7ec      	b.n	14baa <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   14bd0:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   14bd4:	e7e9      	b.n	14baa <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   14bd6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   14bda:	e7e6      	b.n	14baa <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   14bdc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   14be0:	e7e3      	b.n	14baa <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   14be2:	4b12      	ldr	r3, [pc, #72]	; (14c2c <uart_nrfx_configure+0x158>)
   14be4:	e7e1      	b.n	14baa <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   14be6:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   14bea:	e7de      	b.n	14baa <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   14bec:	4b10      	ldr	r3, [pc, #64]	; (14c30 <uart_nrfx_configure+0x15c>)
   14bee:	e7dc      	b.n	14baa <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   14bf0:	4b10      	ldr	r3, [pc, #64]	; (14c34 <uart_nrfx_configure+0x160>)
   14bf2:	e7da      	b.n	14baa <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   14bf4:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   14bf8:	e7d7      	b.n	14baa <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   14bfa:	4b0f      	ldr	r3, [pc, #60]	; (14c38 <uart_nrfx_configure+0x164>)
   14bfc:	e7d5      	b.n	14baa <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   14bfe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   14c02:	e7d2      	b.n	14baa <uart_nrfx_configure+0xd6>
   14c04:	0013b000 	.word	0x0013b000
   14c08:	004ea000 	.word	0x004ea000
   14c0c:	00ebf000 	.word	0x00ebf000
   14c10:	01d7e000 	.word	0x01d7e000
   14c14:	0003d090 	.word	0x0003d090
   14c18:	075f7000 	.word	0x075f7000
   14c1c:	000f4240 	.word	0x000f4240
   14c20:	40002000 	.word	0x40002000
   14c24:	009d5000 	.word	0x009d5000
   14c28:	00275000 	.word	0x00275000
   14c2c:	0075f000 	.word	0x0075f000
   14c30:	03afb000 	.word	0x03afb000
   14c34:	013a9000 	.word	0x013a9000
   14c38:	0ebed000 	.word	0x0ebed000

00014c3c <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   14c3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct uart_nrfx_data *data = dev->data;
	int err;
#ifdef CONFIG_PINCTRL
	const struct uart_nrfx_config *config = dev->config;
   14c40:	6843      	ldr	r3, [r0, #4]
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   14c42:	4d19      	ldr	r5, [pc, #100]	; (14ca8 <uart_nrfx_init+0x6c>)
#endif /* CONFIG_PINCTRL */

	nrf_uart_disable(uart0_addr);

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   14c44:	681f      	ldr	r7, [r3, #0]
	struct uart_nrfx_data *data = dev->data;
   14c46:	f8d0 8010 	ldr.w	r8, [r0, #16]
   14c4a:	2100      	movs	r1, #0
{
   14c4c:	4606      	mov	r6, r0
   14c4e:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   14c52:	aa01      	add	r2, sp, #4
   14c54:	4638      	mov	r0, r7
   14c56:	f005 ff72 	bl	1ab3e <pinctrl_lookup_state>
	if (ret < 0) {
   14c5a:	1e04      	subs	r4, r0, #0
   14c5c:	db1f      	blt.n	14c9e <uart_nrfx_init+0x62>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   14c5e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   14c60:	683a      	ldr	r2, [r7, #0]
   14c62:	7919      	ldrb	r1, [r3, #4]
   14c64:	6818      	ldr	r0, [r3, #0]
   14c66:	f005 ff87 	bl	1ab78 <pinctrl_configure_pins>
	if (err < 0) {
   14c6a:	1e04      	subs	r4, r0, #0
   14c6c:	db17      	blt.n	14c9e <uart_nrfx_init+0x62>
#else
	uart_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &data->uart_config);
   14c6e:	4641      	mov	r1, r8
   14c70:	4630      	mov	r0, r6
   14c72:	f7ff ff2f 	bl	14ad4 <uart_nrfx_configure>
	if (err) {
   14c76:	4604      	mov	r4, r0
   14c78:	b988      	cbnz	r0, 14c9e <uart_nrfx_init+0x62>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   14c7a:	2304      	movs	r3, #4
   14c7c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c80:	f8c5 0108 	str.w	r0, [r5, #264]	; 0x108
   14c84:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108

#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	/* Simulate that the TXDRDY event is set, so that the transmitter status
	 * is indicated correctly.
	 */
	uart_sw_event_txdrdy = 1U;
   14c88:	4b08      	ldr	r3, [pc, #32]	; (14cac <uart_nrfx_init+0x70>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c8a:	2101      	movs	r1, #1
   14c8c:	6029      	str	r1, [r5, #0]
#endif

#if defined(CONFIG_UART_0_ASYNC) || defined(CONFIG_UART_0_INTERRUPT_DRIVEN)

	IRQ_CONNECT(IRQN,
   14c8e:	4602      	mov	r2, r0
   14c90:	2002      	movs	r0, #2
	uart_sw_event_txdrdy = 1U;
   14c92:	7019      	strb	r1, [r3, #0]
	IRQ_CONNECT(IRQN,
   14c94:	f7fd ff3a 	bl	12b0c <z_arm_irq_priority_set>
		    IRQ_PRIO,
		    uart_nrfx_isr,
		    DEVICE_DT_INST_GET(0),
		    0);
	irq_enable(IRQN);
   14c98:	2002      	movs	r0, #2
   14c9a:	f7fd ff05 	bl	12aa8 <arch_irq_enable>
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   14c9e:	4620      	mov	r0, r4
   14ca0:	b002      	add	sp, #8
   14ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ca6:	bf00      	nop
   14ca8:	40002000 	.word	0x40002000
   14cac:	200019fc 	.word	0x200019fc

00014cb0 <uart_nrfx_poll_out>:
{
   14cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14cb2:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   14cb4:	f008 f8cb 	bl	1ce4e <k_is_in_isr>
   14cb8:	4d1b      	ldr	r5, [pc, #108]	; (14d28 <uart_nrfx_poll_out+0x78>)
   14cba:	bb90      	cbnz	r0, 14d22 <uart_nrfx_poll_out+0x72>
   14cbc:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14cbe:	2701      	movs	r7, #1
   14cc0:	f3bf 8f5b 	dmb	ish
   14cc4:	e855 3f00 	ldrex	r3, [r5]
   14cc8:	2b00      	cmp	r3, #0
   14cca:	d103      	bne.n	14cd4 <uart_nrfx_poll_out+0x24>
   14ccc:	e845 7200 	strex	r2, r7, [r5]
   14cd0:	2a00      	cmp	r2, #0
   14cd2:	d1f7      	bne.n	14cc4 <uart_nrfx_poll_out+0x14>
   14cd4:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   14cd8:	d007      	beq.n	14cea <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   14cda:	2021      	movs	r0, #33	; 0x21
   14cdc:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
   14cde:	3c01      	subs	r4, #1
   14ce0:	f004 f912 	bl	18f08 <z_impl_k_sleep>
   14ce4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   14ce8:	d1ea      	bne.n	14cc0 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14cea:	4b10      	ldr	r3, [pc, #64]	; (14d2c <uart_nrfx_poll_out+0x7c>)
   14cec:	2200      	movs	r2, #0
   14cee:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   14cf2:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
	uart_sw_event_txdrdy = 0U;
   14cf6:	490e      	ldr	r1, [pc, #56]	; (14d30 <uart_nrfx_poll_out+0x80>)
   14cf8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14cfa:	2201      	movs	r2, #1
   14cfc:	609a      	str	r2, [r3, #8]
    p_reg->TXD = txd;
   14cfe:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   14d02:	f8c3 651c 	str.w	r6, [r3, #1308]	; 0x51c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   14d06:	f7ff fdef 	bl	148e8 <event_txdrdy_check>
   14d0a:	b920      	cbnz	r0, 14d16 <uart_nrfx_poll_out+0x66>
   14d0c:	2001      	movs	r0, #1
   14d0e:	f005 ffc1 	bl	1ac94 <nrfx_busy_wait>
   14d12:	3c01      	subs	r4, #1
   14d14:	d1f7      	bne.n	14d06 <uart_nrfx_poll_out+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14d16:	4b05      	ldr	r3, [pc, #20]	; (14d2c <uart_nrfx_poll_out+0x7c>)
   14d18:	2201      	movs	r2, #1
   14d1a:	60da      	str	r2, [r3, #12]
	*lock = 0;
   14d1c:	2300      	movs	r3, #0
   14d1e:	602b      	str	r3, [r5, #0]
}
   14d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   14d22:	2301      	movs	r3, #1
   14d24:	602b      	str	r3, [r5, #0]
   14d26:	e7e0      	b.n	14cea <uart_nrfx_poll_out+0x3a>
   14d28:	20001698 	.word	0x20001698
   14d2c:	40002000 	.word	0x40002000
   14d30:	200019fc 	.word	0x200019fc

00014d34 <uart_nrfx_fifo_fill>:
{
   14d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while ((len - num_tx > 0) &&
   14d38:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d3a:	4e0c      	ldr	r6, [pc, #48]	; (14d6c <uart_nrfx_fifo_fill+0x38>)
	uart_sw_event_txdrdy = 0U;
   14d3c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 14d70 <uart_nrfx_fifo_fill+0x3c>
   14d40:	4627      	mov	r7, r4
	while ((len - num_tx > 0) &&
   14d42:	b2e5      	uxtb	r5, r4
   14d44:	1b53      	subs	r3, r2, r5
   14d46:	2b00      	cmp	r3, #0
   14d48:	dd03      	ble.n	14d52 <uart_nrfx_fifo_fill+0x1e>
	       event_txdrdy_check()) {
   14d4a:	f7ff fdcd 	bl	148e8 <event_txdrdy_check>
	while ((len - num_tx > 0) &&
   14d4e:	3401      	adds	r4, #1
   14d50:	b910      	cbnz	r0, 14d58 <uart_nrfx_fifo_fill+0x24>
}
   14d52:	4628      	mov	r0, r5
   14d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14d58:	f8c6 711c 	str.w	r7, [r6, #284]	; 0x11c
   14d5c:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
    p_reg->TXD = txd;
   14d60:	5d4b      	ldrb	r3, [r1, r5]
	uart_sw_event_txdrdy = 0U;
   14d62:	f888 7000 	strb.w	r7, [r8]
   14d66:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
}
   14d6a:	e7ea      	b.n	14d42 <uart_nrfx_fifo_fill+0xe>
   14d6c:	40002000 	.word	0x40002000
   14d70:	200019fc 	.word	0x200019fc

00014d74 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   14d74:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   14d76:	2301      	movs	r3, #1
   14d78:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14d7a:	4a11      	ldr	r2, [pc, #68]	; (14dc0 <compare_int_lock+0x4c>)
   14d7c:	f3bf 8f5b 	dmb	ish
   14d80:	43dc      	mvns	r4, r3
   14d82:	e852 1f00 	ldrex	r1, [r2]
   14d86:	ea01 0c04 	and.w	ip, r1, r4
   14d8a:	e842 ce00 	strex	lr, ip, [r2]
   14d8e:	f1be 0f00 	cmp.w	lr, #0
   14d92:	d1f6      	bne.n	14d82 <compare_int_lock+0xe>
   14d94:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14d98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14d9c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   14da0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   14da4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   14da8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   14dac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14db0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   14db4:	420b      	tst	r3, r1
}
   14db6:	bf14      	ite	ne
   14db8:	2001      	movne	r0, #1
   14dba:	2000      	moveq	r0, #0
   14dbc:	bd10      	pop	{r4, pc}
   14dbe:	bf00      	nop
   14dc0:	200016a0 	.word	0x200016a0

00014dc4 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14dc4:	4919      	ldr	r1, [pc, #100]	; (14e2c <sys_clock_timeout_handler+0x68>)
{
   14dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14dc8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   14dca:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14dce:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   14dd0:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   14dd4:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14dd8:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   14dda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   14dde:	d222      	bcs.n	14e26 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   14de0:	4b13      	ldr	r3, [pc, #76]	; (14e30 <sys_clock_timeout_handler+0x6c>)
   14de2:	681b      	ldr	r3, [r3, #0]
   14de4:	0a1a      	lsrs	r2, r3, #8
   14de6:	061b      	lsls	r3, r3, #24
   14de8:	195e      	adds	r6, r3, r5
   14dea:	4b12      	ldr	r3, [pc, #72]	; (14e34 <sys_clock_timeout_handler+0x70>)
   14dec:	f142 0700 	adc.w	r7, r2, #0
   14df0:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   14df4:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   14df6:	f004 f9e9 	bl	191cc <sys_clock_announce>
    return p_reg->CC[ch];
   14dfa:	00a3      	lsls	r3, r4, #2
   14dfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14e00:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   14e04:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   14e08:	42aa      	cmp	r2, r5
   14e0a:	d10b      	bne.n	14e24 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   14e0c:	b91e      	cbnz	r6, 14e16 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   14e0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   14e12:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   14e16:	4b08      	ldr	r3, [pc, #32]	; (14e38 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14e18:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   14e1c:	fa00 f404 	lsl.w	r4, r0, r4
   14e20:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   14e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   14e26:	2600      	movs	r6, #0
   14e28:	e7e5      	b.n	14df6 <sys_clock_timeout_handler+0x32>
   14e2a:	bf00      	nop
   14e2c:	20000850 	.word	0x20000850
   14e30:	200016a4 	.word	0x200016a4
   14e34:	20000838 	.word	0x20000838
   14e38:	40011000 	.word	0x40011000

00014e3c <compare_int_unlock>:
	if (key) {
   14e3c:	b319      	cbz	r1, 14e86 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14e3e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   14e42:	2301      	movs	r3, #1
   14e44:	4a10      	ldr	r2, [pc, #64]	; (14e88 <compare_int_unlock+0x4c>)
   14e46:	4083      	lsls	r3, r0
   14e48:	e852 1f00 	ldrex	r1, [r2]
   14e4c:	4319      	orrs	r1, r3
   14e4e:	e842 1c00 	strex	ip, r1, [r2]
   14e52:	f1bc 0f00 	cmp.w	ip, #0
   14e56:	d1f7      	bne.n	14e48 <compare_int_unlock+0xc>
   14e58:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   14e5c:	4a0b      	ldr	r2, [pc, #44]	; (14e8c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14e62:	4083      	lsls	r3, r0
   14e64:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14e68:	4b09      	ldr	r3, [pc, #36]	; (14e90 <compare_int_unlock+0x54>)
   14e6a:	f3bf 8f5b 	dmb	ish
   14e6e:	681b      	ldr	r3, [r3, #0]
   14e70:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   14e74:	fa23 f000 	lsr.w	r0, r3, r0
   14e78:	07c3      	lsls	r3, r0, #31
   14e7a:	bf42      	ittt	mi
   14e7c:	4b05      	ldrmi	r3, [pc, #20]	; (14e94 <compare_int_unlock+0x58>)
   14e7e:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   14e82:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   14e86:	4770      	bx	lr
   14e88:	200016a0 	.word	0x200016a0
   14e8c:	40011000 	.word	0x40011000
   14e90:	2000169c 	.word	0x2000169c
   14e94:	e000e100 	.word	0xe000e100

00014e98 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   14e98:	4b0d      	ldr	r3, [pc, #52]	; (14ed0 <z_nrf_rtc_timer_read+0x38>)
   14e9a:	6818      	ldr	r0, [r3, #0]
   14e9c:	0a01      	lsrs	r1, r0, #8
   14e9e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   14ea0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   14ea4:	4b0b      	ldr	r3, [pc, #44]	; (14ed4 <z_nrf_rtc_timer_read+0x3c>)
   14ea6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   14eaa:	1818      	adds	r0, r3, r0
   14eac:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   14eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14eb4:	d20a      	bcs.n	14ecc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   14eb6:	4b08      	ldr	r3, [pc, #32]	; (14ed8 <z_nrf_rtc_timer_read+0x40>)
   14eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ebc:	4290      	cmp	r0, r2
   14ebe:	eb71 0303 	sbcs.w	r3, r1, r3
   14ec2:	d203      	bcs.n	14ecc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   14ec4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   14ec8:	f141 0100 	adc.w	r1, r1, #0
}
   14ecc:	4770      	bx	lr
   14ece:	bf00      	nop
   14ed0:	200016a4 	.word	0x200016a4
   14ed4:	40011000 	.word	0x40011000
   14ed8:	20000838 	.word	0x20000838

00014edc <compare_set>:
{
   14edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ee0:	b085      	sub	sp, #20
   14ee2:	4616      	mov	r6, r2
   14ee4:	4698      	mov	r8, r3
   14ee6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   14ee8:	f7ff ff44 	bl	14d74 <compare_int_lock>
   14eec:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   14eee:	f7ff ffd3 	bl	14e98 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   14ef2:	42b0      	cmp	r0, r6
   14ef4:	eb71 0308 	sbcs.w	r3, r1, r8
   14ef8:	d278      	bcs.n	14fec <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   14efa:	4b46      	ldr	r3, [pc, #280]	; (15014 <compare_set+0x138>)
   14efc:	1a30      	subs	r0, r6, r0
   14efe:	eb68 0101 	sbc.w	r1, r8, r1
   14f02:	4298      	cmp	r0, r3
   14f04:	f171 0300 	sbcs.w	r3, r1, #0
   14f08:	f080 8081 	bcs.w	1500e <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   14f0c:	4b42      	ldr	r3, [pc, #264]	; (15018 <compare_set+0x13c>)
   14f0e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   14f12:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   14f16:	45d8      	cmp	r8, fp
   14f18:	bf08      	it	eq
   14f1a:	4556      	cmpeq	r6, sl
   14f1c:	d051      	beq.n	14fc2 <compare_set+0xe6>
   14f1e:	ea4f 0985 	mov.w	r9, r5, lsl #2
   14f22:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   14f26:	f105 0750 	add.w	r7, r5, #80	; 0x50
   14f2a:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   14f2e:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14f30:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   14f34:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14f38:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   14f3a:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   14f3e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14f42:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   14f44:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   14f48:	4b34      	ldr	r3, [pc, #208]	; (1501c <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14f4a:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   14f4e:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   14f50:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   14f54:	1a40      	subs	r0, r0, r1
   14f56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   14f5a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   14f5e:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   14f60:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   14f64:	d107      	bne.n	14f76 <compare_set+0x9a>
   14f66:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   14f6a:	2013      	movs	r0, #19
   14f6c:	f008 f9b2 	bl	1d2d4 <z_impl_k_busy_wait>
   14f70:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   14f74:	4b29      	ldr	r3, [pc, #164]	; (1501c <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   14f76:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   14f7a:	eba4 000c 	sub.w	r0, r4, ip
   14f7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   14f82:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   14f86:	bf88      	it	hi
   14f88:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14f8a:	2000      	movs	r0, #0
   14f8c:	6038      	str	r0, [r7, #0]
   14f8e:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   14f90:	9801      	ldr	r0, [sp, #4]
   14f92:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   14f96:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   14f9a:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   14f9e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   14fa2:	4281      	cmp	r1, r0
   14fa4:	d006      	beq.n	14fb4 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   14fa6:	1a20      	subs	r0, r4, r0
   14fa8:	3802      	subs	r0, #2
   14faa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   14fae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   14fb2:	d819      	bhi.n	14fe8 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   14fb4:	1aa4      	subs	r4, r4, r2
   14fb6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   14fba:	eb14 0a06 	adds.w	sl, r4, r6
   14fbe:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   14fc2:	4915      	ldr	r1, [pc, #84]	; (15018 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   14fc4:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   14fc6:	012b      	lsls	r3, r5, #4
   14fc8:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   14fcc:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   14fd0:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   14fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14fd4:	6053      	str	r3, [r2, #4]
	return ret;
   14fd6:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   14fd8:	4628      	mov	r0, r5
   14fda:	9900      	ldr	r1, [sp, #0]
   14fdc:	f7ff ff2e 	bl	14e3c <compare_int_unlock>
}
   14fe0:	4620      	mov	r0, r4
   14fe2:	b005      	add	sp, #20
   14fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fe8:	4620      	mov	r0, r4
   14fea:	e7b1      	b.n	14f50 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   14fec:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14fee:	4a0c      	ldr	r2, [pc, #48]	; (15020 <compare_set+0x144>)
   14ff0:	f3bf 8f5b 	dmb	ish
   14ff4:	40ab      	lsls	r3, r5
   14ff6:	e852 1f00 	ldrex	r1, [r2]
   14ffa:	4319      	orrs	r1, r3
   14ffc:	e842 1000 	strex	r0, r1, [r2]
   15000:	2800      	cmp	r0, #0
   15002:	d1f8      	bne.n	14ff6 <compare_set+0x11a>
   15004:	f3bf 8f5b 	dmb	ish
   15008:	46b2      	mov	sl, r6
   1500a:	46c3      	mov	fp, r8
   1500c:	e7d9      	b.n	14fc2 <compare_set+0xe6>
			return -EINVAL;
   1500e:	f06f 0415 	mvn.w	r4, #21
   15012:	e7e1      	b.n	14fd8 <compare_set+0xfc>
   15014:	01000001 	.word	0x01000001
   15018:	20000840 	.word	0x20000840
   1501c:	40011000 	.word	0x40011000
   15020:	2000169c 	.word	0x2000169c

00015024 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   15024:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   15026:	4b19      	ldr	r3, [pc, #100]	; (1508c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   15028:	4d19      	ldr	r5, [pc, #100]	; (15090 <sys_clock_driver_init+0x6c>)
   1502a:	2400      	movs	r4, #0
   1502c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15030:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15034:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   15038:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1503c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   15040:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15044:	4b13      	ldr	r3, [pc, #76]	; (15094 <sys_clock_driver_init+0x70>)
   15046:	2602      	movs	r6, #2
   15048:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1504c:	2101      	movs	r1, #1
   1504e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   15052:	2011      	movs	r0, #17
   15054:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   15058:	4622      	mov	r2, r4
   1505a:	f7fd fd57 	bl	12b0c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1505e:	2011      	movs	r0, #17
   15060:	f7fd fd22 	bl	12aa8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   15064:	4a0c      	ldr	r2, [pc, #48]	; (15098 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   15066:	2301      	movs	r3, #1
   15068:	60ab      	str	r3, [r5, #8]
   1506a:	602b      	str	r3, [r5, #0]
   1506c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1506e:	4b0b      	ldr	r3, [pc, #44]	; (1509c <sys_clock_driver_init+0x78>)
   15070:	4a0b      	ldr	r2, [pc, #44]	; (150a0 <sys_clock_driver_init+0x7c>)
   15072:	9300      	str	r3, [sp, #0]
   15074:	9401      	str	r4, [sp, #4]
   15076:	2300      	movs	r3, #0
   15078:	4620      	mov	r0, r4
   1507a:	f7ff ff2f 	bl	14edc <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1507e:	4630      	mov	r0, r6
   15080:	f7fe ff30 	bl	13ee4 <z_nrf_clock_control_lf_on>

	return 0;
}
   15084:	4620      	mov	r0, r4
   15086:	b002      	add	sp, #8
   15088:	bd70      	pop	{r4, r5, r6, pc}
   1508a:	bf00      	nop
   1508c:	20000840 	.word	0x20000840
   15090:	40011000 	.word	0x40011000
   15094:	e000e100 	.word	0xe000e100
   15098:	200016a0 	.word	0x200016a0
   1509c:	00014dc5 	.word	0x00014dc5
   150a0:	007fffff 	.word	0x007fffff

000150a4 <rtc_nrf_isr>:
{
   150a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   150a8:	4c35      	ldr	r4, [pc, #212]	; (15180 <rtc_nrf_isr+0xdc>)
   150aa:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   150ae:	079a      	lsls	r2, r3, #30
   150b0:	d50b      	bpl.n	150ca <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   150b2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   150b6:	b143      	cbz	r3, 150ca <rtc_nrf_isr+0x26>
		overflow_cnt++;
   150b8:	4a32      	ldr	r2, [pc, #200]	; (15184 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   150ba:	2300      	movs	r3, #0
   150bc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   150c0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   150c4:	6813      	ldr	r3, [r2, #0]
   150c6:	3301      	adds	r3, #1
   150c8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   150ca:	f04f 0320 	mov.w	r3, #32
   150ce:	f3ef 8211 	mrs	r2, BASEPRI
   150d2:	f383 8812 	msr	BASEPRI_MAX, r3
   150d6:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   150da:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   150de:	03db      	lsls	r3, r3, #15
   150e0:	d512      	bpl.n	15108 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   150e2:	f3bf 8f5b 	dmb	ish
   150e6:	4b28      	ldr	r3, [pc, #160]	; (15188 <rtc_nrf_isr+0xe4>)
   150e8:	e853 1f00 	ldrex	r1, [r3]
   150ec:	f021 0001 	bic.w	r0, r1, #1
   150f0:	e843 0600 	strex	r6, r0, [r3]
   150f4:	2e00      	cmp	r6, #0
   150f6:	d1f7      	bne.n	150e8 <rtc_nrf_isr+0x44>
   150f8:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   150fc:	2900      	cmp	r1, #0
   150fe:	d136      	bne.n	1516e <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15100:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   15104:	2b00      	cmp	r3, #0
   15106:	d132      	bne.n	1516e <rtc_nrf_isr+0xca>
{
   15108:	2300      	movs	r3, #0
	__asm__ volatile(
   1510a:	f382 8811 	msr	BASEPRI, r2
   1510e:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   15112:	b34b      	cbz	r3, 15168 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   15114:	f7ff fec0 	bl	14e98 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   15118:	f04f 0320 	mov.w	r3, #32
   1511c:	f3ef 8c11 	mrs	ip, BASEPRI
   15120:	f383 8812 	msr	BASEPRI_MAX, r3
   15124:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   15128:	4b18      	ldr	r3, [pc, #96]	; (1518c <rtc_nrf_isr+0xe8>)
   1512a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1512e:	42b0      	cmp	r0, r6
   15130:	eb71 0207 	sbcs.w	r2, r1, r7
   15134:	f04f 0200 	mov.w	r2, #0
   15138:	d320      	bcc.n	1517c <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1513a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1513e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   15142:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   15146:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   1514a:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1514c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   15150:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   15154:	f38c 8811 	msr	BASEPRI, ip
   15158:	f3bf 8f6f 	isb	sy
		if (handler) {
   1515c:	b121      	cbz	r1, 15168 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   1515e:	9500      	str	r5, [sp, #0]
   15160:	4632      	mov	r2, r6
   15162:	463b      	mov	r3, r7
   15164:	2000      	movs	r0, #0
   15166:	4788      	blx	r1
}
   15168:	b003      	add	sp, #12
   1516a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1516e:	2300      	movs	r3, #0
   15170:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   15174:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   15178:	2301      	movs	r3, #1
}
   1517a:	e7c6      	b.n	1510a <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1517c:	4611      	mov	r1, r2
   1517e:	e7e9      	b.n	15154 <rtc_nrf_isr+0xb0>
   15180:	40011000 	.word	0x40011000
   15184:	200016a4 	.word	0x200016a4
   15188:	2000169c 	.word	0x2000169c
   1518c:	20000840 	.word	0x20000840

00015190 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   15190:	1c43      	adds	r3, r0, #1
{
   15192:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   15194:	d021      	beq.n	151da <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   15196:	2801      	cmp	r0, #1
   15198:	dd21      	ble.n	151de <sys_clock_set_timeout+0x4e>
   1519a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1519e:	da20      	bge.n	151e2 <sys_clock_set_timeout+0x52>
   151a0:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   151a2:	f7ff fe79 	bl	14e98 <z_nrf_rtc_timer_read>
   151a6:	4b10      	ldr	r3, [pc, #64]	; (151e8 <sys_clock_set_timeout+0x58>)
   151a8:	e9d3 1300 	ldrd	r1, r3, [r3]
   151ac:	1a40      	subs	r0, r0, r1
		ticks = 0;
   151ae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   151b2:	bf28      	it	cs
   151b4:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   151b6:	3001      	adds	r0, #1
   151b8:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   151ba:	480c      	ldr	r0, [pc, #48]	; (151ec <sys_clock_set_timeout+0x5c>)
   151bc:	4282      	cmp	r2, r0
   151be:	bf28      	it	cs
   151c0:	4602      	movcs	r2, r0
   151c2:	1852      	adds	r2, r2, r1
   151c4:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   151c8:	4909      	ldr	r1, [pc, #36]	; (151f0 <sys_clock_set_timeout+0x60>)
   151ca:	9001      	str	r0, [sp, #4]
   151cc:	9100      	str	r1, [sp, #0]
   151ce:	f143 0300 	adc.w	r3, r3, #0
   151d2:	f7ff fe83 	bl	14edc <compare_set>
}
   151d6:	b002      	add	sp, #8
   151d8:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   151da:	4804      	ldr	r0, [pc, #16]	; (151ec <sys_clock_set_timeout+0x5c>)
   151dc:	e7e0      	b.n	151a0 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   151de:	2400      	movs	r4, #0
   151e0:	e7df      	b.n	151a2 <sys_clock_set_timeout+0x12>
   151e2:	4c02      	ldr	r4, [pc, #8]	; (151ec <sys_clock_set_timeout+0x5c>)
   151e4:	e7dd      	b.n	151a2 <sys_clock_set_timeout+0x12>
   151e6:	bf00      	nop
   151e8:	20000850 	.word	0x20000850
   151ec:	007fffff 	.word	0x007fffff
   151f0:	00014dc5 	.word	0x00014dc5

000151f4 <sys_clock_elapsed>:
{
   151f4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   151f6:	f7ff fe4f 	bl	14e98 <z_nrf_rtc_timer_read>
   151fa:	4b02      	ldr	r3, [pc, #8]	; (15204 <sys_clock_elapsed+0x10>)
   151fc:	681b      	ldr	r3, [r3, #0]
}
   151fe:	1ac0      	subs	r0, r0, r3
   15200:	bd08      	pop	{r3, pc}
   15202:	bf00      	nop
   15204:	20000850 	.word	0x20000850

00015208 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
   15208:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1520c:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1520e:	2801      	cmp	r0, #1
   15210:	4b04      	ldr	r3, [pc, #16]	; (15224 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   15212:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   15216:	bf18      	it	ne
   15218:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1521c:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   1521e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   15222:	4770      	bx	lr
   15224:	50000300 	.word	0x50000300

00015228 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   15228:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1522c:	2b00      	cmp	r3, #0
{
   1522e:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   15230:	bf07      	ittee	eq
   15232:	4614      	moveq	r4, r2
   15234:	460d      	moveq	r5, r1
   15236:	2401      	movne	r4, #1
   15238:	2500      	movne	r5, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   1523a:	f3c0 1281 	ubfx	r2, r0, #6, #2
    *p_pin = pin_number & 0x1F;
   1523e:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
   15242:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   15246:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1524a:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
        case 1: return NRF_P1;
   1524e:	4b06      	ldr	r3, [pc, #24]	; (15268 <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15250:	ea42 0205 	orr.w	r2, r2, r5
        case 1: return NRF_P1;
   15254:	bf08      	it	eq
   15256:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1525a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1525e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   15262:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
   15266:	bd30      	pop	{r4, r5, pc}
   15268:	50000300 	.word	0x50000300

0001526c <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   1526c:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   15270:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   15272:	2801      	cmp	r0, #1
   15274:	4b04      	ldr	r3, [pc, #16]	; (15288 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15276:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   1527a:	bf18      	it	ne
   1527c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15280:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   15282:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   15286:	4770      	bx	lr
   15288:	50000300 	.word	0x50000300

0001528c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1528c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   15290:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   15294:	2a08      	cmp	r2, #8
   15296:	d106      	bne.n	152a6 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   15298:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1529c:	2b05      	cmp	r3, #5
   1529e:	d802      	bhi.n	152a6 <nrf52_errata_103+0x1a>
   152a0:	4a02      	ldr	r2, [pc, #8]	; (152ac <nrf52_errata_103+0x20>)
   152a2:	5cd0      	ldrb	r0, [r2, r3]
   152a4:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   152a6:	2000      	movs	r0, #0
    #endif
}
   152a8:	4770      	bx	lr
   152aa:	bf00      	nop
   152ac:	0001dbe2 	.word	0x0001dbe2

000152b0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   152b0:	4a02      	ldr	r2, [pc, #8]	; (152bc <nvmc_wait+0xc>)
   152b2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   152b6:	2b00      	cmp	r3, #0
   152b8:	d0fb      	beq.n	152b2 <nvmc_wait+0x2>
}
   152ba:	4770      	bx	lr
   152bc:	4001e000 	.word	0x4001e000

000152c0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   152c0:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   152c2:	f005 fcdd 	bl	1ac80 <nrf52_errata_136>
   152c6:	b140      	cbz	r0, 152da <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   152c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   152cc:	2200      	movs	r2, #0
   152ce:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   152d2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   152d6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   152da:	f005 fcd1 	bl	1ac80 <nrf52_errata_136>
   152de:	2800      	cmp	r0, #0
   152e0:	d046      	beq.n	15370 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   152e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   152e6:	4b60      	ldr	r3, [pc, #384]	; (15468 <SystemInit+0x1a8>)
   152e8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   152ec:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   152f0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   152f4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   152f8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   152fc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   15300:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   15304:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   15308:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1530c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   15310:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   15314:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   15318:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1531c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   15320:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   15324:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   15328:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1532c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   15330:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   15334:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   15338:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1533c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   15340:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   15344:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   15348:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1534c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   15350:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   15354:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   15358:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1535c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   15360:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   15364:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   15368:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1536c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   15370:	f7ff ff8c 	bl	1528c <nrf52_errata_103>
   15374:	b118      	cbz	r0, 1537e <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   15376:	4b3d      	ldr	r3, [pc, #244]	; (1546c <SystemInit+0x1ac>)
   15378:	4a3d      	ldr	r2, [pc, #244]	; (15470 <SystemInit+0x1b0>)
   1537a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1537e:	f7ff ff85 	bl	1528c <nrf52_errata_103>
   15382:	b118      	cbz	r0, 1538c <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   15384:	4b3b      	ldr	r3, [pc, #236]	; (15474 <SystemInit+0x1b4>)
   15386:	22fb      	movs	r2, #251	; 0xfb
   15388:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1538c:	f7ff ff7e 	bl	1528c <nrf52_errata_103>
   15390:	b170      	cbz	r0, 153b0 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   15392:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   15396:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1539a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1539e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   153a2:	f022 020f 	bic.w	r2, r2, #15
   153a6:	f003 030f 	and.w	r3, r3, #15
   153aa:	4313      	orrs	r3, r2
   153ac:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   153b0:	f7ff ff6c 	bl	1528c <nrf52_errata_103>
   153b4:	b120      	cbz	r0, 153c0 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   153b6:	4b30      	ldr	r3, [pc, #192]	; (15478 <SystemInit+0x1b8>)
   153b8:	f44f 7200 	mov.w	r2, #512	; 0x200
   153bc:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   153c0:	f005 fc5e 	bl	1ac80 <nrf52_errata_136>
   153c4:	b148      	cbz	r0, 153da <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   153c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   153ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   153ce:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   153d0:	bf44      	itt	mi
   153d2:	f06f 0201 	mvnmi.w	r2, #1
   153d6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   153da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   153de:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   153e2:	2a08      	cmp	r2, #8
   153e4:	d10e      	bne.n	15404 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   153e6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   153ea:	2b05      	cmp	r3, #5
   153ec:	d802      	bhi.n	153f4 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   153ee:	4a23      	ldr	r2, [pc, #140]	; (1547c <SystemInit+0x1bc>)
   153f0:	5cd3      	ldrb	r3, [r2, r3]
   153f2:	b13b      	cbz	r3, 15404 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   153f4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   153f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   153fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15400:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   15404:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   15408:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1540c:	2a00      	cmp	r2, #0
   1540e:	db03      	blt.n	15418 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   15410:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   15414:	2b00      	cmp	r3, #0
   15416:	da22      	bge.n	1545e <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   15418:	4919      	ldr	r1, [pc, #100]	; (15480 <SystemInit+0x1c0>)
   1541a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1541c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   15420:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   15424:	2412      	movs	r4, #18
    nvmc_wait();
   15426:	f7ff ff43 	bl	152b0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1542a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1542e:	f7ff ff3f 	bl	152b0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   15432:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   15436:	f7ff ff3b 	bl	152b0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1543a:	2300      	movs	r3, #0
   1543c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   15440:	f7ff ff36 	bl	152b0 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   15444:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   15448:	490e      	ldr	r1, [pc, #56]	; (15484 <SystemInit+0x1c4>)
   1544a:	4b0f      	ldr	r3, [pc, #60]	; (15488 <SystemInit+0x1c8>)
   1544c:	68ca      	ldr	r2, [r1, #12]
   1544e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15452:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   15454:	60cb      	str	r3, [r1, #12]
   15456:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1545a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1545c:	e7fd      	b.n	1545a <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1545e:	4b0b      	ldr	r3, [pc, #44]	; (1548c <SystemInit+0x1cc>)
   15460:	4a0b      	ldr	r2, [pc, #44]	; (15490 <SystemInit+0x1d0>)
   15462:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   15464:	bd10      	pop	{r4, pc}
   15466:	bf00      	nop
   15468:	4000c000 	.word	0x4000c000
   1546c:	40005000 	.word	0x40005000
   15470:	00038148 	.word	0x00038148
   15474:	4000f000 	.word	0x4000f000
   15478:	40029000 	.word	0x40029000
   1547c:	0001dbdc 	.word	0x0001dbdc
   15480:	4001e000 	.word	0x4001e000
   15484:	e000ed00 	.word	0xe000ed00
   15488:	05fa0004 	.word	0x05fa0004
   1548c:	200001e8 	.word	0x200001e8
   15490:	03d09000 	.word	0x03d09000

00015494 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   15494:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   15496:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   15498:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1549a:	fab2 f382 	clz	r3, r2
   1549e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   154a2:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   154a4:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   154a6:	d014      	beq.n	154d2 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   154a8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   154ac:	fa05 f303 	lsl.w	r3, r5, r3
   154b0:	ea22 0303 	bic.w	r3, r2, r3
   154b4:	e850 6f00 	ldrex	r6, [r0]
   154b8:	4296      	cmp	r6, r2
   154ba:	d104      	bne.n	154c6 <nrfx_flag32_alloc+0x32>
   154bc:	e840 3c00 	strex	ip, r3, [r0]
   154c0:	f1bc 0f00 	cmp.w	ip, #0
   154c4:	d1f6      	bne.n	154b4 <nrfx_flag32_alloc+0x20>
   154c6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   154ca:	d1e5      	bne.n	15498 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   154cc:	4802      	ldr	r0, [pc, #8]	; (154d8 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   154ce:	700c      	strb	r4, [r1, #0]
}
   154d0:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   154d2:	4802      	ldr	r0, [pc, #8]	; (154dc <nrfx_flag32_alloc+0x48>)
   154d4:	e7fc      	b.n	154d0 <nrfx_flag32_alloc+0x3c>
   154d6:	bf00      	nop
   154d8:	0bad0000 	.word	0x0bad0000
   154dc:	0bad0002 	.word	0x0bad0002

000154e0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   154e0:	6803      	ldr	r3, [r0, #0]
   154e2:	40cb      	lsrs	r3, r1
   154e4:	07db      	lsls	r3, r3, #31
{
   154e6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   154e8:	d415      	bmi.n	15516 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   154ea:	2301      	movs	r3, #1
   154ec:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   154f0:	6803      	ldr	r3, [r0, #0]
   154f2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   154f6:	ea41 0203 	orr.w	r2, r1, r3
   154fa:	e850 4f00 	ldrex	r4, [r0]
   154fe:	429c      	cmp	r4, r3
   15500:	d104      	bne.n	1550c <nrfx_flag32_free+0x2c>
   15502:	e840 2c00 	strex	ip, r2, [r0]
   15506:	f1bc 0f00 	cmp.w	ip, #0
   1550a:	d1f6      	bne.n	154fa <nrfx_flag32_free+0x1a>
   1550c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   15510:	d1ee      	bne.n	154f0 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   15512:	4802      	ldr	r0, [pc, #8]	; (1551c <nrfx_flag32_free+0x3c>)
}
   15514:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   15516:	4802      	ldr	r0, [pc, #8]	; (15520 <nrfx_flag32_free+0x40>)
   15518:	e7fc      	b.n	15514 <nrfx_flag32_free+0x34>
   1551a:	bf00      	nop
   1551c:	0bad0000 	.word	0x0bad0000
   15520:	0bad0004 	.word	0x0bad0004

00015524 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   15524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   15526:	4604      	mov	r4, r0
   15528:	b118      	cbz	r0, 15532 <clock_stop+0xe>
   1552a:	2801      	cmp	r0, #1
   1552c:	d029      	beq.n	15582 <clock_stop+0x5e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1552e:	b003      	add	sp, #12
   15530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   15532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15536:	2202      	movs	r2, #2
   15538:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1553c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   15540:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15544:	2201      	movs	r2, #1
   15546:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   15548:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1554a:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1554c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   15550:	bf14      	ite	ne
   15552:	2500      	movne	r5, #0
   15554:	f10d 0507 	addeq.w	r5, sp, #7
   15558:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1555c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
   15560:	b1d4      	cbz	r4, 15598 <clock_stop+0x74>
   15562:	2c01      	cmp	r4, #1
   15564:	d1e3      	bne.n	1552e <clock_stop+0xa>
            if (p_clk_src != NULL)
   15566:	b125      	cbz	r5, 15572 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15568:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1556c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   15570:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15572:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   15576:	03db      	lsls	r3, r3, #15
   15578:	d418      	bmi.n	155ac <clock_stop+0x88>
            m_clock_cb.hfclk_started = false;
   1557a:	4b13      	ldr	r3, [pc, #76]	; (155c8 <clock_stop+0xa4>)
   1557c:	2200      	movs	r2, #0
   1557e:	715a      	strb	r2, [r3, #5]
   15580:	e7d5      	b.n	1552e <clock_stop+0xa>
    p_reg->INTENCLR = mask;
   15582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15586:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   15588:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1558c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15590:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15594:	6058      	str	r0, [r3, #4]
}
   15596:	e7d7      	b.n	15548 <clock_stop+0x24>
            if (p_clk_src != NULL)
   15598:	b125      	cbz	r5, 155a4 <clock_stop+0x80>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1559a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1559e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   155a2:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   155a4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   155a8:	03da      	lsls	r2, r3, #15
   155aa:	d5c0      	bpl.n	1552e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   155ac:	b92d      	cbnz	r5, 155ba <clock_stop+0x96>
   155ae:	2001      	movs	r0, #1
   155b0:	f005 fb70 	bl	1ac94 <nrfx_busy_wait>
   155b4:	3f01      	subs	r7, #1
   155b6:	d1d3      	bne.n	15560 <clock_stop+0x3c>
   155b8:	e003      	b.n	155c2 <clock_stop+0x9e>
   155ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   155be:	2b01      	cmp	r3, #1
   155c0:	d0f5      	beq.n	155ae <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   155c2:	2c01      	cmp	r4, #1
   155c4:	d0d9      	beq.n	1557a <clock_stop+0x56>
   155c6:	e7b2      	b.n	1552e <clock_stop+0xa>
   155c8:	200016a8 	.word	0x200016a8

000155cc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   155cc:	4b04      	ldr	r3, [pc, #16]	; (155e0 <nrfx_clock_init+0x14>)
   155ce:	791a      	ldrb	r2, [r3, #4]
   155d0:	b922      	cbnz	r2, 155dc <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   155d2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   155d4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   155d6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   155d8:	4802      	ldr	r0, [pc, #8]	; (155e4 <nrfx_clock_init+0x18>)
   155da:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   155dc:	4802      	ldr	r0, [pc, #8]	; (155e8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   155de:	4770      	bx	lr
   155e0:	200016a8 	.word	0x200016a8
   155e4:	0bad0000 	.word	0x0bad0000
   155e8:	0bad000c 	.word	0x0bad000c

000155ec <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   155ec:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   155ee:	2000      	movs	r0, #0
   155f0:	f7fd fa7e 	bl	12af0 <arch_irq_is_enabled>
   155f4:	b908      	cbnz	r0, 155fa <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   155f6:	f7fd fa57 	bl	12aa8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   155fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   155fe:	2200      	movs	r2, #0
   15600:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   15604:	4b01      	ldr	r3, [pc, #4]	; (1560c <nrfx_clock_enable+0x20>)
   15606:	2201      	movs	r2, #1
   15608:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1560a:	bd08      	pop	{r3, pc}
   1560c:	200019fd 	.word	0x200019fd

00015610 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   15614:	b510      	push	{r4, lr}
   15616:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1561a:	b16a      	cbz	r2, 15638 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1561c:	2200      	movs	r2, #0
   1561e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15622:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   15626:	2201      	movs	r2, #1
   15628:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1562c:	4b11      	ldr	r3, [pc, #68]	; (15674 <nrfx_clock_irq_handler+0x64>)
   1562e:	7958      	ldrb	r0, [r3, #5]
   15630:	b910      	cbnz	r0, 15638 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   15632:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   15634:	681b      	ldr	r3, [r3, #0]
   15636:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1563c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   15640:	b172      	cbz	r2, 15660 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15642:	2200      	movs	r2, #0
   15644:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15648:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1564c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15650:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   15654:	0792      	lsls	r2, r2, #30
   15656:	d104      	bne.n	15662 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15658:	2201      	movs	r2, #1
   1565a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1565e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   15660:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   15662:	2202      	movs	r2, #2
   15664:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   15668:	4b02      	ldr	r3, [pc, #8]	; (15674 <nrfx_clock_irq_handler+0x64>)
}
   1566a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1566e:	681b      	ldr	r3, [r3, #0]
   15670:	2001      	movs	r0, #1
   15672:	4718      	bx	r3
   15674:	200016a8 	.word	0x200016a8

00015678 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   15678:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1567a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1567e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   15680:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   15682:	6002      	str	r2, [r0, #0]
}
   15684:	4802      	ldr	r0, [pc, #8]	; (15690 <nrf_gpio_pin_port_decode+0x18>)
   15686:	bf18      	it	ne
   15688:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1568c:	4770      	bx	lr
   1568e:	bf00      	nop
   15690:	50000300 	.word	0x50000300

00015694 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   15694:	4b03      	ldr	r3, [pc, #12]	; (156a4 <pin_in_use_by_te+0x10>)
   15696:	3008      	adds	r0, #8
   15698:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1569c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   156a0:	4770      	bx	lr
   156a2:	bf00      	nop
   156a4:	200001ec 	.word	0x200001ec

000156a8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   156a8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   156aa:	f100 0308 	add.w	r3, r0, #8
   156ae:	4c0c      	ldr	r4, [pc, #48]	; (156e0 <call_handler+0x38>)
   156b0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   156b4:	05da      	lsls	r2, r3, #23
{
   156b6:	4605      	mov	r5, r0
   156b8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   156ba:	d507      	bpl.n	156cc <call_handler+0x24>
   156bc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   156c0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   156c4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   156c8:	6852      	ldr	r2, [r2, #4]
   156ca:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   156cc:	68a3      	ldr	r3, [r4, #8]
   156ce:	b12b      	cbz	r3, 156dc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   156d0:	68e2      	ldr	r2, [r4, #12]
   156d2:	4631      	mov	r1, r6
   156d4:	4628      	mov	r0, r5
    }
}
   156d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   156da:	4718      	bx	r3
}
   156dc:	bd70      	pop	{r4, r5, r6, pc}
   156de:	bf00      	nop
   156e0:	200001ec 	.word	0x200001ec

000156e4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   156e4:	4a12      	ldr	r2, [pc, #72]	; (15730 <release_handler+0x4c>)
   156e6:	3008      	adds	r0, #8
{
   156e8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   156ea:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   156ee:	05d9      	lsls	r1, r3, #23
   156f0:	d51b      	bpl.n	1572a <release_handler+0x46>
   156f2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   156f6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   156fa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   156fe:	f102 0410 	add.w	r4, r2, #16
   15702:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   15704:	f834 3b02 	ldrh.w	r3, [r4], #2
   15708:	f413 7f80 	tst.w	r3, #256	; 0x100
   1570c:	d003      	beq.n	15716 <release_handler+0x32>
   1570e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   15712:	4299      	cmp	r1, r3
   15714:	d009      	beq.n	1572a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   15716:	3001      	adds	r0, #1
   15718:	2830      	cmp	r0, #48	; 0x30
   1571a:	d1f3      	bne.n	15704 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1571c:	2300      	movs	r3, #0
   1571e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   15722:	4804      	ldr	r0, [pc, #16]	; (15734 <release_handler+0x50>)
}
   15724:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   15726:	f7ff bedb 	b.w	154e0 <nrfx_flag32_free>
}
   1572a:	bc10      	pop	{r4}
   1572c:	4770      	bx	lr
   1572e:	bf00      	nop
   15730:	200001ec 	.word	0x200001ec
   15734:	20000260 	.word	0x20000260

00015738 <pin_handler_trigger_uninit>:
{
   15738:	b538      	push	{r3, r4, r5, lr}
   1573a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1573c:	f7ff ffaa 	bl	15694 <pin_in_use_by_te>
   15740:	4c09      	ldr	r4, [pc, #36]	; (15768 <pin_handler_trigger_uninit+0x30>)
   15742:	f102 0508 	add.w	r5, r2, #8
   15746:	b140      	cbz	r0, 1575a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   15748:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1574c:	4907      	ldr	r1, [pc, #28]	; (1576c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1574e:	0b5b      	lsrs	r3, r3, #13
   15750:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   15754:	2000      	movs	r0, #0
   15756:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1575a:	4610      	mov	r0, r2
   1575c:	f7ff ffc2 	bl	156e4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   15760:	2300      	movs	r3, #0
   15762:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   15766:	bd38      	pop	{r3, r4, r5, pc}
   15768:	200001ec 	.word	0x200001ec
   1576c:	40006000 	.word	0x40006000

00015770 <nrfx_gpiote_input_configure>:
{
   15770:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15774:	4604      	mov	r4, r0
   15776:	4617      	mov	r7, r2
   15778:	461d      	mov	r5, r3
    if (p_input_config)
   1577a:	b321      	cbz	r1, 157c6 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1577c:	4e4e      	ldr	r6, [pc, #312]	; (158b8 <nrfx_gpiote_input_configure+0x148>)
   1577e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   15782:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   15786:	079b      	lsls	r3, r3, #30
   15788:	d506      	bpl.n	15798 <nrfx_gpiote_input_configure+0x28>
   1578a:	f7ff ff83 	bl	15694 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   1578e:	b118      	cbz	r0, 15798 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   15790:	484a      	ldr	r0, [pc, #296]	; (158bc <nrfx_gpiote_input_configure+0x14c>)
}
   15792:	b004      	add	sp, #16
   15794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   15798:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1579a:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1579e:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   157a2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   157a6:	f10d 020f 	add.w	r2, sp, #15
   157aa:	460b      	mov	r3, r1
   157ac:	4620      	mov	r0, r4
   157ae:	f10d 010e 	add.w	r1, sp, #14
   157b2:	f005 fab0 	bl	1ad16 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   157b6:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   157ba:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   157be:	f043 0301 	orr.w	r3, r3, #1
   157c2:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   157c6:	b197      	cbz	r7, 157ee <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   157c8:	4b3b      	ldr	r3, [pc, #236]	; (158b8 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   157ca:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   157cc:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   157ce:	f104 0008 	add.w	r0, r4, #8
   157d2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   157d6:	078f      	lsls	r7, r1, #30
   157d8:	d50c      	bpl.n	157f4 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   157da:	2a00      	cmp	r2, #0
   157dc:	d1d8      	bne.n	15790 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   157de:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   157e2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   157e6:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   157ea:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   157ee:	bbcd      	cbnz	r5, 15864 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   157f0:	4833      	ldr	r0, [pc, #204]	; (158c0 <nrfx_gpiote_input_configure+0x150>)
   157f2:	e7ce      	b.n	15792 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   157f4:	f021 0120 	bic.w	r1, r1, #32
   157f8:	04c9      	lsls	r1, r1, #19
   157fa:	0cc9      	lsrs	r1, r1, #19
   157fc:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   15800:	2a00      	cmp	r2, #0
   15802:	d0ec      	beq.n	157de <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   15804:	2e03      	cmp	r6, #3
   15806:	d8c3      	bhi.n	15790 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   15808:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1580a:	b92e      	cbnz	r6, 15818 <nrfx_gpiote_input_configure+0xa8>
   1580c:	4a2d      	ldr	r2, [pc, #180]	; (158c4 <nrfx_gpiote_input_configure+0x154>)
   1580e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   15812:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   15816:	e7e2      	b.n	157de <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   15818:	00ba      	lsls	r2, r7, #2
   1581a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1581e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   15822:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   15826:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1582a:	f02c 0c03 	bic.w	ip, ip, #3
   1582e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15832:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   15836:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   1583a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   1583e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15842:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   15846:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   1584a:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   1584e:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   15852:	ea4c 0c0e 	orr.w	ip, ip, lr
   15856:	f041 0120 	orr.w	r1, r1, #32
   1585a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   1585e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   15862:	e7bc      	b.n	157de <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   15864:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   15868:	4620      	mov	r0, r4
   1586a:	f7ff ff3b 	bl	156e4 <release_handler>
    if (!handler)
   1586e:	2e00      	cmp	r6, #0
   15870:	d0be      	beq.n	157f0 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   15872:	4d11      	ldr	r5, [pc, #68]	; (158b8 <nrfx_gpiote_input_configure+0x148>)
   15874:	682b      	ldr	r3, [r5, #0]
   15876:	429e      	cmp	r6, r3
   15878:	d104      	bne.n	15884 <nrfx_gpiote_input_configure+0x114>
   1587a:	686b      	ldr	r3, [r5, #4]
   1587c:	429f      	cmp	r7, r3
   1587e:	d101      	bne.n	15884 <nrfx_gpiote_input_configure+0x114>
   15880:	2200      	movs	r2, #0
   15882:	e00a      	b.n	1589a <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   15884:	4810      	ldr	r0, [pc, #64]	; (158c8 <nrfx_gpiote_input_configure+0x158>)
   15886:	f10d 010f 	add.w	r1, sp, #15
   1588a:	f7ff fe03 	bl	15494 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1588e:	4b0c      	ldr	r3, [pc, #48]	; (158c0 <nrfx_gpiote_input_configure+0x150>)
   15890:	4298      	cmp	r0, r3
   15892:	f47f af7e 	bne.w	15792 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   15896:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1589a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1589e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   158a2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   158a4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   158a6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   158aa:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   158ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   158b2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   158b6:	e79b      	b.n	157f0 <nrfx_gpiote_input_configure+0x80>
   158b8:	200001ec 	.word	0x200001ec
   158bc:	0bad0004 	.word	0x0bad0004
   158c0:	0bad0000 	.word	0x0bad0000
   158c4:	40006000 	.word	0x40006000
   158c8:	20000260 	.word	0x20000260

000158cc <nrfx_gpiote_output_configure>:
{
   158cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   158ce:	4604      	mov	r4, r0
   158d0:	b085      	sub	sp, #20
   158d2:	4615      	mov	r5, r2
    if (p_config)
   158d4:	b319      	cbz	r1, 1591e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   158d6:	4e33      	ldr	r6, [pc, #204]	; (159a4 <nrfx_gpiote_output_configure+0xd8>)
   158d8:	f100 0708 	add.w	r7, r0, #8
   158dc:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   158e0:	0793      	lsls	r3, r2, #30
   158e2:	d403      	bmi.n	158ec <nrfx_gpiote_output_configure+0x20>
   158e4:	f7ff fed6 	bl	15694 <pin_in_use_by_te>
   158e8:	2800      	cmp	r0, #0
   158ea:	d158      	bne.n	1599e <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   158ec:	f012 0f1c 	tst.w	r2, #28
   158f0:	d002      	beq.n	158f8 <nrfx_gpiote_output_configure+0x2c>
   158f2:	784b      	ldrb	r3, [r1, #1]
   158f4:	2b01      	cmp	r3, #1
   158f6:	d052      	beq.n	1599e <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   158f8:	2301      	movs	r3, #1
   158fa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   158fe:	2300      	movs	r3, #0
   15900:	e9cd 1300 	strd	r1, r3, [sp]
   15904:	1c4a      	adds	r2, r1, #1
   15906:	1c8b      	adds	r3, r1, #2
   15908:	4620      	mov	r0, r4
   1590a:	f10d 010f 	add.w	r1, sp, #15
   1590e:	f005 fa02 	bl	1ad16 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   15912:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   15916:	f043 0303 	orr.w	r3, r3, #3
   1591a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1591e:	b915      	cbnz	r5, 15926 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   15920:	4821      	ldr	r0, [pc, #132]	; (159a8 <nrfx_gpiote_output_configure+0xdc>)
}
   15922:	b005      	add	sp, #20
   15924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   15926:	4e1f      	ldr	r6, [pc, #124]	; (159a4 <nrfx_gpiote_output_configure+0xd8>)
   15928:	f104 0708 	add.w	r7, r4, #8
   1592c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   15930:	0783      	lsls	r3, r0, #30
   15932:	d534      	bpl.n	1599e <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   15934:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   15938:	4661      	mov	r1, ip
   1593a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1593c:	f020 0020 	bic.w	r0, r0, #32
   15940:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   15944:	04c0      	lsls	r0, r0, #19
   15946:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1594a:	0cc0      	lsrs	r0, r0, #19
   1594c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   15950:	2300      	movs	r3, #0
   15952:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   15956:	786a      	ldrb	r2, [r5, #1]
   15958:	2a00      	cmp	r2, #0
   1595a:	d0e1      	beq.n	15920 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1595c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   15960:	78ad      	ldrb	r5, [r5, #2]
   15962:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   15966:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1596a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1596e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   15972:	0223      	lsls	r3, r4, #8
   15974:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   15978:	0412      	lsls	r2, r2, #16
   1597a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1597e:	ea43 030e 	orr.w	r3, r3, lr
   15982:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   15984:	052a      	lsls	r2, r5, #20
   15986:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1598a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1598e:	4313      	orrs	r3, r2
   15990:	f040 0020 	orr.w	r0, r0, #32
   15994:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   15998:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1599c:	e7c0      	b.n	15920 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   1599e:	4803      	ldr	r0, [pc, #12]	; (159ac <nrfx_gpiote_output_configure+0xe0>)
   159a0:	e7bf      	b.n	15922 <nrfx_gpiote_output_configure+0x56>
   159a2:	bf00      	nop
   159a4:	200001ec 	.word	0x200001ec
   159a8:	0bad0000 	.word	0x0bad0000
   159ac:	0bad0004 	.word	0x0bad0004

000159b0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   159b0:	4b01      	ldr	r3, [pc, #4]	; (159b8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   159b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   159b6:	4770      	bx	lr
   159b8:	200001ec 	.word	0x200001ec

000159bc <nrfx_gpiote_channel_get>:
{
   159bc:	b508      	push	{r3, lr}
   159be:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   159c0:	f7ff fe68 	bl	15694 <pin_in_use_by_te>
   159c4:	b138      	cbz	r0, 159d6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   159c6:	4b05      	ldr	r3, [pc, #20]	; (159dc <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   159c8:	4805      	ldr	r0, [pc, #20]	; (159e0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   159ca:	3208      	adds	r2, #8
   159cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   159d0:	0b5b      	lsrs	r3, r3, #13
   159d2:	700b      	strb	r3, [r1, #0]
}
   159d4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   159d6:	4803      	ldr	r0, [pc, #12]	; (159e4 <nrfx_gpiote_channel_get+0x28>)
   159d8:	e7fc      	b.n	159d4 <nrfx_gpiote_channel_get+0x18>
   159da:	bf00      	nop
   159dc:	200001ec 	.word	0x200001ec
   159e0:	0bad0000 	.word	0x0bad0000
   159e4:	0bad0004 	.word	0x0bad0004

000159e8 <nrfx_gpiote_init>:
{
   159e8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   159ea:	4c0f      	ldr	r4, [pc, #60]	; (15a28 <nrfx_gpiote_init+0x40>)
   159ec:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   159f0:	b9bd      	cbnz	r5, 15a22 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   159f2:	2260      	movs	r2, #96	; 0x60
   159f4:	4629      	mov	r1, r5
   159f6:	f104 0010 	add.w	r0, r4, #16
   159fa:	f004 fadd 	bl	19fb8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   159fe:	2006      	movs	r0, #6
   15a00:	f7fd f852 	bl	12aa8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15a04:	4b09      	ldr	r3, [pc, #36]	; (15a2c <nrfx_gpiote_init+0x44>)
    return err_code;
   15a06:	480a      	ldr	r0, [pc, #40]	; (15a30 <nrfx_gpiote_init+0x48>)
   15a08:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   15a0c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   15a10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15a14:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   15a18:	2301      	movs	r3, #1
   15a1a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   15a1e:	6763      	str	r3, [r4, #116]	; 0x74
}
   15a20:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   15a22:	4804      	ldr	r0, [pc, #16]	; (15a34 <nrfx_gpiote_init+0x4c>)
   15a24:	e7fc      	b.n	15a20 <nrfx_gpiote_init+0x38>
   15a26:	bf00      	nop
   15a28:	200001ec 	.word	0x200001ec
   15a2c:	40006000 	.word	0x40006000
   15a30:	0bad0000 	.word	0x0bad0000
   15a34:	0bad0005 	.word	0x0bad0005

00015a38 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   15a38:	4b03      	ldr	r3, [pc, #12]	; (15a48 <nrfx_gpiote_is_init+0x10>)
   15a3a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   15a3e:	3800      	subs	r0, #0
   15a40:	bf18      	it	ne
   15a42:	2001      	movne	r0, #1
   15a44:	4770      	bx	lr
   15a46:	bf00      	nop
   15a48:	200001ec 	.word	0x200001ec

00015a4c <nrfx_gpiote_channel_free>:
{
   15a4c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   15a4e:	4801      	ldr	r0, [pc, #4]	; (15a54 <nrfx_gpiote_channel_free+0x8>)
   15a50:	f7ff bd46 	b.w	154e0 <nrfx_flag32_free>
   15a54:	2000025c 	.word	0x2000025c

00015a58 <nrfx_gpiote_channel_alloc>:
{
   15a58:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   15a5a:	4801      	ldr	r0, [pc, #4]	; (15a60 <nrfx_gpiote_channel_alloc+0x8>)
   15a5c:	f7ff bd1a 	b.w	15494 <nrfx_flag32_alloc>
   15a60:	2000025c 	.word	0x2000025c

00015a64 <nrfx_gpiote_trigger_enable>:
{
   15a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15a66:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   15a68:	f7ff fe14 	bl	15694 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   15a6c:	f104 0208 	add.w	r2, r4, #8
   15a70:	4b1e      	ldr	r3, [pc, #120]	; (15aec <nrfx_gpiote_trigger_enable+0x88>)
   15a72:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   15a76:	b1e8      	cbz	r0, 15ab4 <nrfx_gpiote_trigger_enable+0x50>
   15a78:	f013 0502 	ands.w	r5, r3, #2
   15a7c:	d11a      	bne.n	15ab4 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   15a7e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   15a80:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   15a82:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   15a86:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   15a8a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   15a8e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15a92:	6005      	str	r5, [r0, #0]
   15a94:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15a96:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   15a9a:	f040 0001 	orr.w	r0, r0, #1
   15a9e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   15aa2:	b129      	cbz	r1, 15ab0 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   15aa4:	2201      	movs	r2, #1
   15aa6:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   15aaa:	4a11      	ldr	r2, [pc, #68]	; (15af0 <nrfx_gpiote_trigger_enable+0x8c>)
   15aac:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   15ab0:	b003      	add	sp, #12
   15ab2:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   15ab4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   15ab8:	2b04      	cmp	r3, #4
   15aba:	d012      	beq.n	15ae2 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   15abc:	2b05      	cmp	r3, #5
   15abe:	d012      	beq.n	15ae6 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15ac0:	a801      	add	r0, sp, #4
   15ac2:	9401      	str	r4, [sp, #4]
   15ac4:	f7ff fdd8 	bl	15678 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   15ac8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   15aca:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   15ace:	40d9      	lsrs	r1, r3
   15ad0:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   15ad4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   15ad6:	4620      	mov	r0, r4
}
   15ad8:	b003      	add	sp, #12
   15ada:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   15ade:	f005 b961 	b.w	1ada4 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   15ae2:	2103      	movs	r1, #3
   15ae4:	e7f7      	b.n	15ad6 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   15ae6:	2102      	movs	r1, #2
   15ae8:	e7f5      	b.n	15ad6 <nrfx_gpiote_trigger_enable+0x72>
   15aea:	bf00      	nop
   15aec:	200001ec 	.word	0x200001ec
   15af0:	40006000 	.word	0x40006000

00015af4 <nrfx_gpiote_trigger_disable>:
{
   15af4:	b508      	push	{r3, lr}
   15af6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   15af8:	f7ff fdcc 	bl	15694 <pin_in_use_by_te>
   15afc:	b1c0      	cbz	r0, 15b30 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   15afe:	f102 0108 	add.w	r1, r2, #8
   15b02:	4b0e      	ldr	r3, [pc, #56]	; (15b3c <nrfx_gpiote_trigger_disable+0x48>)
   15b04:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   15b08:	0799      	lsls	r1, r3, #30
   15b0a:	d411      	bmi.n	15b30 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   15b0c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   15b0e:	2201      	movs	r2, #1
   15b10:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   15b12:	009b      	lsls	r3, r3, #2
   15b14:	490a      	ldr	r1, [pc, #40]	; (15b40 <nrfx_gpiote_trigger_disable+0x4c>)
   15b16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15b1a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   15b1e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   15b22:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15b26:	f022 0203 	bic.w	r2, r2, #3
   15b2a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   15b2e:	bd08      	pop	{r3, pc}
   15b30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   15b34:	2100      	movs	r1, #0
   15b36:	4610      	mov	r0, r2
   15b38:	f005 b934 	b.w	1ada4 <nrf_gpio_cfg_sense_set>
   15b3c:	200001ec 	.word	0x200001ec
   15b40:	40006000 	.word	0x40006000

00015b44 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   15b44:	4b0e      	ldr	r3, [pc, #56]	; (15b80 <nrfx_gpiote_pin_uninit+0x3c>)
   15b46:	f100 0208 	add.w	r2, r0, #8
{
   15b4a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   15b4c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   15b50:	07db      	lsls	r3, r3, #31
{
   15b52:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   15b54:	d511      	bpl.n	15b7a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   15b56:	f7ff ffcd 	bl	15af4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   15b5a:	4620      	mov	r0, r4
   15b5c:	f7ff fdec 	bl	15738 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15b60:	a801      	add	r0, sp, #4
   15b62:	9401      	str	r4, [sp, #4]
   15b64:	f7ff fd88 	bl	15678 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   15b68:	9b01      	ldr	r3, [sp, #4]
   15b6a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15b6e:	2202      	movs	r2, #2
   15b70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   15b74:	4803      	ldr	r0, [pc, #12]	; (15b84 <nrfx_gpiote_pin_uninit+0x40>)
}
   15b76:	b002      	add	sp, #8
   15b78:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   15b7a:	4803      	ldr	r0, [pc, #12]	; (15b88 <nrfx_gpiote_pin_uninit+0x44>)
   15b7c:	e7fb      	b.n	15b76 <nrfx_gpiote_pin_uninit+0x32>
   15b7e:	bf00      	nop
   15b80:	200001ec 	.word	0x200001ec
   15b84:	0bad0000 	.word	0x0bad0000
   15b88:	0bad0004 	.word	0x0bad0004

00015b8c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   15b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b90:	4b64      	ldr	r3, [pc, #400]	; (15d24 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   15b92:	4865      	ldr	r0, [pc, #404]	; (15d28 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   15b94:	4965      	ldr	r1, [pc, #404]	; (15d2c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   15b96:	2600      	movs	r6, #0
{
   15b98:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   15b9a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15b9c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15b9e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   15ba0:	b135      	cbz	r5, 15bb0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   15ba2:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   15ba6:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15ba8:	bf1e      	ittt	ne
   15baa:	601c      	strne	r4, [r3, #0]
   15bac:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   15bae:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   15bb0:	3304      	adds	r3, #4
   15bb2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   15bb4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   15bb8:	d1f1      	bne.n	15b9e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15bba:	f8df 816c 	ldr.w	r8, [pc, #364]	; 15d28 <nrfx_gpiote_irq_handler+0x19c>
   15bbe:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   15bc2:	2b00      	cmp	r3, #0
   15bc4:	f000 8091 	beq.w	15cea <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   15bc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   15bcc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   15bd0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   15bd2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   15bd6:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   15bda:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   15bdc:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   15be0:	2700      	movs	r7, #0
            while (latch[i])
   15be2:	f10d 0910 	add.w	r9, sp, #16
   15be6:	017b      	lsls	r3, r7, #5
   15be8:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   15bea:	f04f 0a01 	mov.w	sl, #1
   15bee:	e049      	b.n	15c84 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   15bf0:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   15bf2:	4a4f      	ldr	r2, [pc, #316]	; (15d30 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   15bf4:	fa94 f4a4 	rbit	r4, r4
   15bf8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   15bfc:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   15bfe:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   15c02:	08e0      	lsrs	r0, r4, #3
   15c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   15c08:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   15c0a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   15c0e:	fa0a fc02 	lsl.w	ip, sl, r2
   15c12:	f819 2000 	ldrb.w	r2, [r9, r0]
   15c16:	ea22 020c 	bic.w	r2, r2, ip
   15c1a:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15c1e:	a803      	add	r0, sp, #12
   15c20:	f3c3 0582 	ubfx	r5, r3, #2, #3
   15c24:	0899      	lsrs	r1, r3, #2
   15c26:	f7ff fd27 	bl	15678 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   15c2a:	9a03      	ldr	r2, [sp, #12]
   15c2c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   15c30:	074b      	lsls	r3, r1, #29
   15c32:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   15c36:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   15c38:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   15c3c:	d529      	bpl.n	15c92 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   15c3e:	4620      	mov	r0, r4
   15c40:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   15c42:	b2d5      	uxtb	r5, r2
   15c44:	f7ff fd30 	bl	156a8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15c48:	a803      	add	r0, sp, #12
   15c4a:	9403      	str	r4, [sp, #12]
   15c4c:	f7ff fd14 	bl	15678 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   15c50:	9b03      	ldr	r3, [sp, #12]
   15c52:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15c56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   15c5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   15c5e:	429d      	cmp	r5, r3
   15c60:	d107      	bne.n	15c72 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   15c62:	2100      	movs	r1, #0
   15c64:	4620      	mov	r0, r4
   15c66:	f005 f89d 	bl	1ada4 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   15c6a:	4629      	mov	r1, r5
   15c6c:	4620      	mov	r0, r4
   15c6e:	f005 f899 	bl	1ada4 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15c72:	a803      	add	r0, sp, #12
   15c74:	9403      	str	r4, [sp, #12]
   15c76:	f7ff fcff 	bl	15678 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   15c7a:	9b03      	ldr	r3, [sp, #12]
   15c7c:	fa0a f303 	lsl.w	r3, sl, r3
   15c80:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   15c84:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   15c88:	2c00      	cmp	r4, #0
   15c8a:	d1b1      	bne.n	15bf0 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   15c8c:	b9cf      	cbnz	r7, 15cc2 <nrfx_gpiote_irq_handler+0x136>
   15c8e:	2701      	movs	r7, #1
   15c90:	e7a9      	b.n	15be6 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   15c92:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   15c94:	bf0c      	ite	eq
   15c96:	2103      	moveq	r1, #3
   15c98:	2102      	movne	r1, #2
   15c9a:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   15c9c:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   15c9e:	f005 f881 	bl	1ada4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   15ca2:	2d03      	cmp	r5, #3
   15ca4:	d004      	beq.n	15cb0 <nrfx_gpiote_irq_handler+0x124>
   15ca6:	9a01      	ldr	r2, [sp, #4]
   15ca8:	2a02      	cmp	r2, #2
   15caa:	d106      	bne.n	15cba <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   15cac:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   15cae:	d1e0      	bne.n	15c72 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   15cb0:	4659      	mov	r1, fp
   15cb2:	4620      	mov	r0, r4
   15cb4:	f7ff fcf8 	bl	156a8 <call_handler>
   15cb8:	e7db      	b.n	15c72 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   15cba:	2a03      	cmp	r2, #3
   15cbc:	d1d9      	bne.n	15c72 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   15cbe:	2d02      	cmp	r5, #2
   15cc0:	e7f5      	b.n	15cae <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15cc2:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   15cc6:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   15cca:	491a      	ldr	r1, [pc, #104]	; (15d34 <nrfx_gpiote_irq_handler+0x1a8>)
   15ccc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   15cd0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   15cd4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   15cd6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   15cda:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   15cde:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   15ce0:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   15ce4:	4313      	orrs	r3, r2
   15ce6:	f47f af7b 	bne.w	15be0 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   15cea:	2401      	movs	r4, #1
    while (mask)
   15cec:	b916      	cbnz	r6, 15cf4 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   15cee:	b007      	add	sp, #28
   15cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   15cf4:	fa96 f3a6 	rbit	r3, r6
   15cf8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   15cfc:	fa04 f203 	lsl.w	r2, r4, r3
   15d00:	009b      	lsls	r3, r3, #2
   15d02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15d06:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   15d0a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15d0e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   15d12:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   15d16:	f3c0 2005 	ubfx	r0, r0, #8, #6
   15d1a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   15d1e:	f7ff fcc3 	bl	156a8 <call_handler>
   15d22:	e7e3      	b.n	15cec <nrfx_gpiote_irq_handler+0x160>
   15d24:	40006100 	.word	0x40006100
   15d28:	40006000 	.word	0x40006000
   15d2c:	40006120 	.word	0x40006120
   15d30:	200001ec 	.word	0x200001ec
   15d34:	50000300 	.word	0x50000300

00015d38 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   15d38:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   15d3a:	4c18      	ldr	r4, [pc, #96]	; (15d9c <nrfx_power_init+0x64>)
   15d3c:	7823      	ldrb	r3, [r4, #0]
   15d3e:	bb53      	cbnz	r3, 15d96 <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   15d40:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   15d42:	0791      	lsls	r1, r2, #30
   15d44:	f3c2 0340 	ubfx	r3, r2, #1, #1
   15d48:	d511      	bpl.n	15d6e <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   15d4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   15d4e:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
   15d52:	2908      	cmp	r1, #8
   15d54:	d11d      	bne.n	15d92 <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   15d56:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   15d5a:	2b05      	cmp	r3, #5
   15d5c:	d819      	bhi.n	15d92 <nrfx_power_init+0x5a>
   15d5e:	4910      	ldr	r1, [pc, #64]	; (15da0 <nrfx_power_init+0x68>)
   15d60:	5cc9      	ldrb	r1, [r1, r3]
   15d62:	2301      	movs	r3, #1
   15d64:	b119      	cbz	r1, 15d6e <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   15d66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   15d6a:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   15d6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   15d72:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   15d76:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   15d7a:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   15d7c:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
   15d80:	f7fc feb6 	bl	12af0 <arch_irq_is_enabled>
   15d84:	b908      	cbnz	r0, 15d8a <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   15d86:	f7fc fe8f 	bl	12aa8 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   15d8a:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   15d8c:	4805      	ldr	r0, [pc, #20]	; (15da4 <nrfx_power_init+0x6c>)
    m_initialized = true;
   15d8e:	7023      	strb	r3, [r4, #0]
}
   15d90:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   15d92:	2301      	movs	r3, #1
   15d94:	e7eb      	b.n	15d6e <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   15d96:	4804      	ldr	r0, [pc, #16]	; (15da8 <nrfx_power_init+0x70>)
   15d98:	e7fa      	b.n	15d90 <nrfx_power_init+0x58>
   15d9a:	bf00      	nop
   15d9c:	200019fe 	.word	0x200019fe
   15da0:	0001dbe8 	.word	0x0001dbe8
   15da4:	0bad0000 	.word	0x0bad0000
   15da8:	0bad000c 	.word	0x0bad000c

00015dac <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   15dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15db0:	f44f 7260 	mov.w	r2, #896	; 0x380
   15db4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   15db8:	4b01      	ldr	r3, [pc, #4]	; (15dc0 <nrfx_power_usbevt_uninit+0x14>)
   15dba:	2200      	movs	r2, #0
   15dbc:	601a      	str	r2, [r3, #0]
}
   15dbe:	4770      	bx	lr
   15dc0:	200016b8 	.word	0x200016b8

00015dc4 <nrfx_power_usbevt_init>:
{
   15dc4:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   15dc6:	f7ff fff1 	bl	15dac <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   15dca:	6803      	ldr	r3, [r0, #0]
   15dcc:	b10b      	cbz	r3, 15dd2 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   15dce:	4a01      	ldr	r2, [pc, #4]	; (15dd4 <nrfx_power_usbevt_init+0x10>)
   15dd0:	6013      	str	r3, [r2, #0]
}
   15dd2:	bd08      	pop	{r3, pc}
   15dd4:	200016b8 	.word	0x200016b8

00015dd8 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   15dd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   15ddc:	b510      	push	{r4, lr}
   15dde:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   15de2:	0762      	lsls	r2, r4, #29
   15de4:	d507      	bpl.n	15df6 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   15de6:	f44f 7084 	mov.w	r0, #264	; 0x108
   15dea:	f004 ffea 	bl	1adc2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   15dee:	b110      	cbz	r0, 15df6 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   15df0:	4b1e      	ldr	r3, [pc, #120]	; (15e6c <nrfx_power_irq_handler+0x94>)
   15df2:	681b      	ldr	r3, [r3, #0]
   15df4:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   15df6:	06a3      	lsls	r3, r4, #26
   15df8:	d508      	bpl.n	15e0c <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   15dfa:	f44f 708a 	mov.w	r0, #276	; 0x114
   15dfe:	f004 ffe0 	bl	1adc2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   15e02:	b118      	cbz	r0, 15e0c <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   15e04:	4b1a      	ldr	r3, [pc, #104]	; (15e70 <nrfx_power_irq_handler+0x98>)
   15e06:	2000      	movs	r0, #0
   15e08:	681b      	ldr	r3, [r3, #0]
   15e0a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   15e0c:	0660      	lsls	r0, r4, #25
   15e0e:	d508      	bpl.n	15e22 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   15e10:	f44f 708c 	mov.w	r0, #280	; 0x118
   15e14:	f004 ffd5 	bl	1adc2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   15e18:	b118      	cbz	r0, 15e22 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   15e1a:	4b15      	ldr	r3, [pc, #84]	; (15e70 <nrfx_power_irq_handler+0x98>)
   15e1c:	2001      	movs	r0, #1
   15e1e:	681b      	ldr	r3, [r3, #0]
   15e20:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   15e22:	0621      	lsls	r1, r4, #24
   15e24:	d508      	bpl.n	15e38 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   15e26:	f44f 708e 	mov.w	r0, #284	; 0x11c
   15e2a:	f004 ffca 	bl	1adc2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   15e2e:	b118      	cbz	r0, 15e38 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   15e30:	4b10      	ldr	r3, [pc, #64]	; (15e74 <nrfx_power_irq_handler+0x9c>)
   15e32:	2000      	movs	r0, #0
   15e34:	681b      	ldr	r3, [r3, #0]
   15e36:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   15e38:	05e2      	lsls	r2, r4, #23
   15e3a:	d508      	bpl.n	15e4e <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   15e3c:	f44f 7090 	mov.w	r0, #288	; 0x120
   15e40:	f004 ffbf 	bl	1adc2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   15e44:	b118      	cbz	r0, 15e4e <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   15e46:	4b0b      	ldr	r3, [pc, #44]	; (15e74 <nrfx_power_irq_handler+0x9c>)
   15e48:	2001      	movs	r0, #1
   15e4a:	681b      	ldr	r3, [r3, #0]
   15e4c:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   15e4e:	05a3      	lsls	r3, r4, #22
   15e50:	d50a      	bpl.n	15e68 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   15e52:	f44f 7092 	mov.w	r0, #292	; 0x124
   15e56:	f004 ffb4 	bl	1adc2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   15e5a:	b128      	cbz	r0, 15e68 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   15e5c:	4b05      	ldr	r3, [pc, #20]	; (15e74 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   15e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   15e62:	681b      	ldr	r3, [r3, #0]
   15e64:	2002      	movs	r0, #2
   15e66:	4718      	bx	r3
}
   15e68:	bd10      	pop	{r4, pc}
   15e6a:	bf00      	nop
   15e6c:	200016b0 	.word	0x200016b0
   15e70:	200016b4 	.word	0x200016b4
   15e74:	200016b8 	.word	0x200016b8

00015e78 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   15e78:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   15e7a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   15e7e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   15e80:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   15e82:	6002      	str	r2, [r0, #0]
}
   15e84:	4802      	ldr	r0, [pc, #8]	; (15e90 <nrf_gpio_pin_port_decode+0x18>)
   15e86:	bf18      	it	ne
   15e88:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   15e8c:	4770      	bx	lr
   15e8e:	bf00      	nop
   15e90:	50000300 	.word	0x50000300

00015e94 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   15e94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   15e98:	4e5c      	ldr	r6, [pc, #368]	; (1600c <nrfx_spim_init+0x178>)
{
   15e9a:	460c      	mov	r4, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   15e9c:	7901      	ldrb	r1, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   15e9e:	ea4f 1941 	mov.w	r9, r1, lsl #5
   15ea2:	eb06 1141 	add.w	r1, r6, r1, lsl #5
{
   15ea6:	4607      	mov	r7, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   15ea8:	7f0d      	ldrb	r5, [r1, #28]
   15eaa:	2d00      	cmp	r5, #0
   15eac:	f040 80ac 	bne.w	16008 <nrfx_spim_init+0x174>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   15eb0:	f8d0 8000 	ldr.w	r8, [r0]
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   15eb4:	7be5      	ldrb	r5, [r4, #15]
    p_cb->p_context = p_context;
   15eb6:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   15eb8:	7f8b      	ldrb	r3, [r1, #30]
    p_cb->handler = handler;
   15eba:	f846 2009 	str.w	r2, [r6, r9]
    p_cb->ss_active_high = p_config->ss_active_high;
   15ebe:	7922      	ldrb	r2, [r4, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   15ec0:	f365 0300 	bfi	r3, r5, #0, #1
    p_cb->ss_active_high = p_config->ss_active_high;
   15ec4:	f362 0341 	bfi	r3, r2, #1, #1
   15ec8:	778b      	strb	r3, [r1, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
   15eca:	78e3      	ldrb	r3, [r4, #3]
   15ecc:	77cb      	strb	r3, [r1, #31]

    configure_pins(p_instance, p_config);
   15ece:	f8d0 a000 	ldr.w	sl, [r0]
    if (!p_config->skip_gpio_cfg)
   15ed2:	2d00      	cmp	r5, #0
   15ed4:	d154      	bne.n	15f80 <nrfx_spim_init+0xec>
                    : NRF_GPIO_PIN_S0S1;
   15ed6:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   15ed8:	7b21      	ldrb	r1, [r4, #12]
   15eda:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   15edc:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
   15ee0:	bf08      	it	eq
   15ee2:	2503      	moveq	r5, #3
        nrf_gpio_pin_write(p_config->sck_pin,
   15ee4:	2901      	cmp	r1, #1
   15ee6:	bf94      	ite	ls
   15ee8:	2100      	movls	r1, #0
   15eea:	2101      	movhi	r1, #1
   15eec:	f004 ff98 	bl	1ae20 <nrf_gpio_pin_write>
        nrf_gpio_cfg(p_config->sck_pin,
   15ef0:	7823      	ldrb	r3, [r4, #0]
   15ef2:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15ef4:	a801      	add	r0, sp, #4
   15ef6:	f7ff ffbf 	bl	15e78 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   15efa:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   15efc:	022d      	lsls	r5, r5, #8
    reg->PIN_CNF[pin_number] = cnf;
   15efe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15f02:	f045 0201 	orr.w	r2, r5, #1
    reg->PIN_CNF[pin_number] = cnf;
   15f06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   15f0a:	7863      	ldrb	r3, [r4, #1]
   15f0c:	2bff      	cmp	r3, #255	; 0xff
   15f0e:	d014      	beq.n	15f3a <nrfx_spim_init+0xa6>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15f10:	a801      	add	r0, sp, #4
            nrf_gpio_pin_write(p_config->mosi_pin, 0);
   15f12:	9301      	str	r3, [sp, #4]
   15f14:	f7ff ffb0 	bl	15e78 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   15f18:	9a01      	ldr	r2, [sp, #4]
   15f1a:	2301      	movs	r3, #1
   15f1c:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   15f1e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
            nrf_gpio_cfg(p_config->mosi_pin,
   15f22:	7863      	ldrb	r3, [r4, #1]
   15f24:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15f26:	a801      	add	r0, sp, #4
   15f28:	f7ff ffa6 	bl	15e78 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   15f2c:	9b01      	ldr	r3, [sp, #4]
   15f2e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15f32:	f045 0203 	orr.w	r2, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
   15f36:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   15f3a:	78a3      	ldrb	r3, [r4, #2]
   15f3c:	2bff      	cmp	r3, #255	; 0xff
   15f3e:	d00b      	beq.n	15f58 <nrfx_spim_init+0xc4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15f40:	a801      	add	r0, sp, #4
            nrf_gpio_cfg(p_config->miso_pin,
   15f42:	7ba1      	ldrb	r1, [r4, #14]
   15f44:	9301      	str	r3, [sp, #4]
   15f46:	f7ff ff97 	bl	15e78 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   15f4a:	9b01      	ldr	r3, [sp, #4]
   15f4c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15f50:	ea45 0181 	orr.w	r1, r5, r1, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   15f54:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   15f58:	78e0      	ldrb	r0, [r4, #3]
   15f5a:	28ff      	cmp	r0, #255	; 0xff
   15f5c:	d010      	beq.n	15f80 <nrfx_spim_init+0xec>
                               p_config->ss_active_high ? 0 : 1);
   15f5e:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
   15f60:	f081 0101 	eor.w	r1, r1, #1
   15f64:	f004 ff5c 	bl	1ae20 <nrf_gpio_pin_write>
            nrf_gpio_cfg(p_config->ss_pin,
   15f68:	78e3      	ldrb	r3, [r4, #3]
   15f6a:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15f6c:	a801      	add	r0, sp, #4
   15f6e:	f7ff ff83 	bl	15e78 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   15f72:	9b01      	ldr	r3, [sp, #4]
   15f74:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15f78:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
   15f7c:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   15f80:	7c23      	ldrb	r3, [r4, #16]
   15f82:	b993      	cbnz	r3, 15faa <nrfx_spim_init+0x116>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   15f84:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   15f86:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   15f88:	2bff      	cmp	r3, #255	; 0xff
   15f8a:	bf18      	it	ne
   15f8c:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   15f8e:	78a3      	ldrb	r3, [r4, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   15f90:	f8ca 1508 	str.w	r1, [sl, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   15f94:	bf08      	it	eq
   15f96:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   15f9a:	2bff      	cmp	r3, #255	; 0xff
   15f9c:	bf08      	it	eq
   15f9e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    p_reg->PSEL.MOSI = mosi_pin;
   15fa2:	f8ca 250c 	str.w	r2, [sl, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   15fa6:	f8ca 3510 	str.w	r3, [sl, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   15faa:	68a3      	ldr	r3, [r4, #8]
   15fac:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   15fb0:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   15fb2:	7b22      	ldrb	r2, [r4, #12]
   15fb4:	3b00      	subs	r3, #0
   15fb6:	bf18      	it	ne
   15fb8:	2301      	movne	r3, #1
    switch (spi_mode)
   15fba:	2a02      	cmp	r2, #2
   15fbc:	d01e      	beq.n	15ffc <nrfx_spim_init+0x168>
   15fbe:	2a03      	cmp	r2, #3
   15fc0:	d01f      	beq.n	16002 <nrfx_spim_init+0x16e>
   15fc2:	2a01      	cmp	r2, #1
   15fc4:	d101      	bne.n	15fca <nrfx_spim_init+0x136>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   15fc6:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   15fca:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   15fce:	79a3      	ldrb	r3, [r4, #6]
   15fd0:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   15fd4:	2307      	movs	r3, #7
   15fd6:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   15fda:	f856 3009 	ldr.w	r3, [r6, r9]
   15fde:	b123      	cbz	r3, 15fea <nrfx_spim_init+0x156>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   15fe0:	6838      	ldr	r0, [r7, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   15fe2:	f340 3007 	sbfx	r0, r0, #12, #8
   15fe6:	f7fc fd5f 	bl	12aa8 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   15fea:	444e      	add	r6, r9
   15fec:	2300      	movs	r3, #0
   15fee:	7773      	strb	r3, [r6, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   15ff0:	4807      	ldr	r0, [pc, #28]	; (16010 <nrfx_spim_init+0x17c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   15ff2:	2301      	movs	r3, #1
   15ff4:	7733      	strb	r3, [r6, #28]
}
   15ff6:	b002      	add	sp, #8
   15ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   15ffc:	f043 0304 	orr.w	r3, r3, #4
        break;
   16000:	e7e3      	b.n	15fca <nrfx_spim_init+0x136>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   16002:	f043 0306 	orr.w	r3, r3, #6
        break;
   16006:	e7e0      	b.n	15fca <nrfx_spim_init+0x136>
        return err_code;
   16008:	4802      	ldr	r0, [pc, #8]	; (16014 <nrfx_spim_init+0x180>)
   1600a:	e7f4      	b.n	15ff6 <nrfx_spim_init+0x162>
   1600c:	200016bc 	.word	0x200016bc
   16010:	0bad0000 	.word	0x0bad0000
   16014:	0bad0005 	.word	0x0bad0005

00016018 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   16018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1601a:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   1601c:	4c20      	ldr	r4, [pc, #128]	; (160a0 <nrfx_spim_uninit+0x88>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   1601e:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   16020:	015e      	lsls	r6, r3, #5
   16022:	eb04 1743 	add.w	r7, r4, r3, lsl #5
   16026:	59a3      	ldr	r3, [r4, r6]
   16028:	b1b3      	cbz	r3, 16058 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1602a:	f345 3007 	sbfx	r0, r5, #12, #8
   1602e:	f7fc fd4b 	bl	12ac8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   16032:	4b1c      	ldr	r3, [pc, #112]	; (160a4 <nrfx_spim_uninit+0x8c>)
   16034:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   16038:	7f7b      	ldrb	r3, [r7, #29]
   1603a:	b16b      	cbz	r3, 16058 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1603c:	2301      	movs	r3, #1
   1603e:	616b      	str	r3, [r5, #20]
   16040:	2764      	movs	r7, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16042:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   16046:	b923      	cbnz	r3, 16052 <nrfx_spim_uninit+0x3a>
   16048:	2001      	movs	r0, #1
   1604a:	f004 fe23 	bl	1ac94 <nrfx_busy_wait>
   1604e:	3f01      	subs	r7, #1
   16050:	d1f7      	bne.n	16042 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
   16052:	19a3      	adds	r3, r4, r6
   16054:	2200      	movs	r2, #0
   16056:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   16058:	2300      	movs	r3, #0
   1605a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   1605e:	19a3      	adds	r3, r4, r6
   16060:	7f9b      	ldrb	r3, [r3, #30]
   16062:	07d8      	lsls	r0, r3, #31
   16064:	d417      	bmi.n	16096 <nrfx_spim_uninit+0x7e>
    return p_reg->PSEL.SCK;
   16066:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   1606a:	1c41      	adds	r1, r0, #1
   1606c:	d001      	beq.n	16072 <nrfx_spim_uninit+0x5a>
    nrf_gpio_cfg_default(pin);
   1606e:	f004 fec9 	bl	1ae04 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
   16072:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   16076:	1c42      	adds	r2, r0, #1
   16078:	d001      	beq.n	1607e <nrfx_spim_uninit+0x66>
    nrf_gpio_cfg_default(pin);
   1607a:	f004 fec3 	bl	1ae04 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
   1607e:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   16082:	1c43      	adds	r3, r0, #1
   16084:	d001      	beq.n	1608a <nrfx_spim_uninit+0x72>
    nrf_gpio_cfg_default(pin);
   16086:	f004 febd 	bl	1ae04 <nrf_gpio_cfg_default>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1608a:	19a3      	adds	r3, r4, r6
   1608c:	7fd8      	ldrb	r0, [r3, #31]
   1608e:	28ff      	cmp	r0, #255	; 0xff
   16090:	d001      	beq.n	16096 <nrfx_spim_uninit+0x7e>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   16092:	f004 feb7 	bl	1ae04 <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   16096:	4434      	add	r4, r6
   16098:	2300      	movs	r3, #0
   1609a:	7723      	strb	r3, [r4, #28]
}
   1609c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1609e:	bf00      	nop
   160a0:	200016bc 	.word	0x200016bc
   160a4:	00080152 	.word	0x00080152

000160a8 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   160a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   160ac:	4f36      	ldr	r7, [pc, #216]	; (16188 <nrfx_spim_xfer+0xe0>)
   160ae:	7903      	ldrb	r3, [r0, #4]
   160b0:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
   160b4:	4614      	mov	r4, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   160b6:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   160ba:	4681      	mov	r9, r0
   160bc:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
   160be:	015e      	lsls	r6, r3, #5
   160c0:	2a00      	cmp	r2, #0
   160c2:	d15f      	bne.n	16184 <nrfx_spim_xfer+0xdc>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   160c4:	59ba      	ldr	r2, [r7, r6]
   160c6:	b12a      	cbz	r2, 160d4 <nrfx_spim_xfer+0x2c>
   160c8:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   160cc:	bf04      	itt	eq
   160ce:	2201      	moveq	r2, #1
   160d0:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   160d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   160d8:	eb07 0c06 	add.w	ip, r7, r6
   160dc:	f10c 0c0c 	add.w	ip, ip, #12
   160e0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   160e4:	2101      	movs	r1, #1
   160e6:	4640      	mov	r0, r8
   160e8:	f004 feb0 	bl	1ae4c <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   160ec:	6829      	ldr	r1, [r5, #0]
   160ee:	b121      	cbz	r1, 160fa <nrfx_spim_xfer+0x52>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   160f0:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   160f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   160f8:	d106      	bne.n	16108 <nrfx_spim_xfer+0x60>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   160fa:	68aa      	ldr	r2, [r5, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   160fc:	b152      	cbz	r2, 16114 <nrfx_spim_xfer+0x6c>
   160fe:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   16102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   16106:	d005      	beq.n	16114 <nrfx_spim_xfer+0x6c>
        p_cb->transfer_in_progress = false;
   16108:	443e      	add	r6, r7
   1610a:	2300      	movs	r3, #0
        return err_code;
   1610c:	481f      	ldr	r0, [pc, #124]	; (1618c <nrfx_spim_xfer+0xe4>)
        p_cb->transfer_in_progress = false;
   1610e:	7773      	strb	r3, [r6, #29]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
   16110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   16114:	f8d9 3000 	ldr.w	r3, [r9]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   16118:	6868      	ldr	r0, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1611a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   1611e:	68e9      	ldr	r1, [r5, #12]
    p_reg->TXD.MAXCNT = length;
   16120:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   16124:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16128:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   1612a:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1612e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   16132:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   16136:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   1613a:	bf18      	it	ne
   1613c:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   1613e:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   16142:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   16146:	bf18      	it	ne
   16148:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   1614a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1614e:	f014 0208 	ands.w	r2, r4, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16152:	bf04      	itt	eq
   16154:	2101      	moveq	r1, #1
   16156:	6119      	streq	r1, [r3, #16]
    if (!p_cb->handler)
   16158:	59b9      	ldr	r1, [r7, r6]
   1615a:	b949      	cbnz	r1, 16170 <nrfx_spim_xfer+0xc8>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1615c:	b912      	cbnz	r2, 16164 <nrfx_spim_xfer+0xbc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1615e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   16162:	e7fb      	b.n	1615c <nrfx_spim_xfer+0xb4>
        set_ss_pin_state(p_cb, false);
   16164:	2100      	movs	r1, #0
   16166:	4640      	mov	r0, r8
   16168:	f004 fe70 	bl	1ae4c <set_ss_pin_state>
    return err_code;
   1616c:	4808      	ldr	r0, [pc, #32]	; (16190 <nrfx_spim_xfer+0xe8>)
}
   1616e:	e7cf      	b.n	16110 <nrfx_spim_xfer+0x68>
    if (!enable)
   16170:	f014 0f04 	tst.w	r4, #4
   16174:	f04f 0240 	mov.w	r2, #64	; 0x40
    p_reg->INTENCLR = mask;
   16178:	bf14      	ite	ne
   1617a:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   1617e:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   16182:	e7f3      	b.n	1616c <nrfx_spim_xfer+0xc4>
        return err_code;
   16184:	4803      	ldr	r0, [pc, #12]	; (16194 <nrfx_spim_xfer+0xec>)
   16186:	e7c3      	b.n	16110 <nrfx_spim_xfer+0x68>
   16188:	200016bc 	.word	0x200016bc
   1618c:	0bad000a 	.word	0x0bad000a
   16190:	0bad0000 	.word	0x0bad0000
   16194:	0bad000b 	.word	0x0bad000b

00016198 <nrfx_spim_2_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16198:	4b0c      	ldr	r3, [pc, #48]	; (161cc <nrfx_spim_2_irq_handler+0x34>)
   1619a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
}
#endif

#if NRFX_CHECK(NRFX_SPIM2_ENABLED)
void nrfx_spim_2_irq_handler(void)
{
   1619e:	b570      	push	{r4, r5, r6, lr}
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   161a0:	b192      	cbz	r2, 161c8 <nrfx_spim_2_irq_handler+0x30>
    set_ss_pin_state(p_cb, false);
   161a2:	4c0b      	ldr	r4, [pc, #44]	; (161d0 <nrfx_spim_2_irq_handler+0x38>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   161a4:	2500      	movs	r5, #0
   161a6:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   161aa:	4629      	mov	r1, r5
   161ac:	4620      	mov	r0, r4
   161ae:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   161b2:	f004 fe4b 	bl	1ae4c <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   161b6:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   161ba:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   161bc:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   161be:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM2, &m_cb[NRFX_SPIM2_INST_IDX]);
}
   161c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   161c6:	4718      	bx	r3
}
   161c8:	bd70      	pop	{r4, r5, r6, pc}
   161ca:	bf00      	nop
   161cc:	40023000 	.word	0x40023000
   161d0:	200016bc 	.word	0x200016bc

000161d4 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   161d4:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE bool nrf_twim_event_check(NRF_TWIM_Type const * p_reg,
                                            nrf_twim_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   161d6:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   161da:	b087      	sub	sp, #28
   161dc:	4604      	mov	r4, r0
   161de:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   161e0:	b1f3      	cbz	r3, 16220 <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   161e2:	2300      	movs	r3, #0
   161e4:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   161e8:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   161ec:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   161f0:	b9b3      	cbnz	r3, 16220 <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   161f2:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_int_disable(NRF_TWIM_Type * p_reg,
                                            uint32_t mask)
{
    p_reg->INTENCLR = mask;
   161f4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   161f8:	2302      	movs	r3, #2
   161fa:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   161fc:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
   161fe:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16202:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   16206:	b11b      	cbz	r3, 16210 <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   16208:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1620c:	059f      	lsls	r7, r3, #22
   1620e:	d402      	bmi.n	16216 <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16210:	2301      	movs	r3, #1
   16212:	6223      	str	r3, [r4, #32]
   16214:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
   16216:	2301      	movs	r3, #1
   16218:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
   1621c:	b007      	add	sp, #28
   1621e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16220:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   16224:	2b00      	cmp	r3, #0
   16226:	d044      	beq.n	162b2 <twim_irq_handler+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16228:	2300      	movs	r3, #0
   1622a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1622e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   16232:	6a2b      	ldr	r3, [r5, #32]
   16234:	065e      	lsls	r6, r3, #25
   16236:	d40a      	bmi.n	1624e <twim_irq_handler+0x7a>
   16238:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1623c:	b93b      	cbnz	r3, 1624e <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   1623e:	4629      	mov	r1, r5
   16240:	4620      	mov	r0, r4
   16242:	f004 fe0f 	bl	1ae64 <xfer_completeness_check>
   16246:	f080 0001 	eor.w	r0, r0, #1
   1624a:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   1624e:	6a2b      	ldr	r3, [r5, #32]
   16250:	f013 0c04 	ands.w	ip, r3, #4
   16254:	d13e      	bne.n	162d4 <twim_irq_handler+0x100>
            event.xfer_desc = p_cb->xfer_desc;
   16256:	f105 070c 	add.w	r7, r5, #12
   1625a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1625c:	ae01      	add	r6, sp, #4
   1625e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            if (!p_cb->repeated || p_cb->error)
   16260:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
   16264:	683b      	ldr	r3, [r7, #0]
   16266:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
   1626a:	6033      	str	r3, [r6, #0]
   1626c:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   16270:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
   16274:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   16278:	f1be 0f00 	cmp.w	lr, #0
   1627c:	d002      	beq.n	16284 <twim_irq_handler+0xb0>
   1627e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   16282:	b33b      	cbz	r3, 162d4 <twim_irq_handler+0x100>
    p_reg->SHORTS = mask;
   16284:	2300      	movs	r3, #0
   16286:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
   1628a:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   1628c:	4b2e      	ldr	r3, [pc, #184]	; (16348 <twim_irq_handler+0x174>)
   1628e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   16292:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   16296:	2b00      	cmp	r3, #0
   16298:	ea4f 3214 	mov.w	r2, r4, lsr #12
   1629c:	db1a      	blt.n	162d4 <twim_irq_handler+0x100>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1629e:	f002 011f 	and.w	r1, r2, #31
   162a2:	095b      	lsrs	r3, r3, #5
   162a4:	2201      	movs	r2, #1
   162a6:	408a      	lsls	r2, r1
   162a8:	3360      	adds	r3, #96	; 0x60
   162aa:	4928      	ldr	r1, [pc, #160]	; (1634c <twim_irq_handler+0x178>)
   162ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   162b0:	e010      	b.n	162d4 <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   162b2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   162b6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   162ba:	7b2b      	ldrb	r3, [r5, #12]
   162bc:	bb23      	cbnz	r3, 16308 <twim_irq_handler+0x134>
            event.xfer_desc = p_cb->xfer_desc;
   162be:	f105 070c 	add.w	r7, r5, #12
   162c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   162c4:	ae01      	add	r6, sp, #4
   162c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   162c8:	683b      	ldr	r3, [r7, #0]
   162ca:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   162cc:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   162d0:	2b00      	cmp	r3, #0
   162d2:	d0d8      	beq.n	16286 <twim_irq_handler+0xb2>
    uint32_t error_source = p_reg->ERRORSRC;
   162d4:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   162d8:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   162dc:	0798      	lsls	r0, r3, #30
   162de:	d525      	bpl.n	1632c <twim_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   162e0:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   162e2:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   162e6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   162ea:	b90b      	cbnz	r3, 162f0 <twim_irq_handler+0x11c>
        p_cb->busy = false;
   162ec:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   162f0:	6a2b      	ldr	r3, [r5, #32]
   162f2:	075b      	lsls	r3, r3, #29
   162f4:	d503      	bpl.n	162fe <twim_irq_handler+0x12a>
   162f6:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   162fa:	2b00      	cmp	r3, #0
   162fc:	d08e      	beq.n	1621c <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
   162fe:	e9d5 3100 	ldrd	r3, r1, [r5]
   16302:	4668      	mov	r0, sp
   16304:	4798      	blx	r3
   16306:	e789      	b.n	1621c <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
   16308:	f44f 7300 	mov.w	r3, #512	; 0x200
   1630c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   16310:	f240 2302 	movw	r3, #514	; 0x202
   16314:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   16316:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   1631a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1631e:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   16320:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16324:	2301      	movs	r3, #1
   16326:	60a3      	str	r3, [r4, #8]
   16328:	6223      	str	r3, [r4, #32]
            return;
   1632a:	e777      	b.n	1621c <twim_irq_handler+0x48>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   1632c:	0759      	lsls	r1, r3, #29
   1632e:	d501      	bpl.n	16334 <twim_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   16330:	2302      	movs	r3, #2
   16332:	e7d6      	b.n	162e2 <twim_irq_handler+0x10e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   16334:	07da      	lsls	r2, r3, #31
   16336:	d501      	bpl.n	1633c <twim_irq_handler+0x168>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   16338:	2303      	movs	r3, #3
   1633a:	e7d2      	b.n	162e2 <twim_irq_handler+0x10e>
    else if (p_cb->error)
   1633c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   16340:	2b00      	cmp	r3, #0
   16342:	d0ce      	beq.n	162e2 <twim_irq_handler+0x10e>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   16344:	2304      	movs	r3, #4
   16346:	e7cc      	b.n	162e2 <twim_irq_handler+0x10e>
   16348:	019c0202 	.word	0x019c0202
   1634c:	e000e100 	.word	0xe000e100

00016350 <nrfx_twim_init>:
{
   16350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   16354:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   16356:	4d2b      	ldr	r5, [pc, #172]	; (16404 <nrfx_twim_init+0xb4>)
   16358:	f04f 0c34 	mov.w	ip, #52	; 0x34
   1635c:	fb0c fc06 	mul.w	ip, ip, r6
   16360:	eb05 040c 	add.w	r4, r5, ip
   16364:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   16368:	2f00      	cmp	r7, #0
   1636a:	d149      	bne.n	16400 <nrfx_twim_init+0xb0>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1636c:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
   1636e:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   16370:	7b4b      	ldrb	r3, [r1, #13]
   16372:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   16376:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->handler         = event_handler;
   16378:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->int_mask        = 0;
   1637c:	60a7      	str	r7, [r4, #8]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1637e:	f891 c00f 	ldrb.w	ip, [r1, #15]
    p_cb->repeated        = false;
   16382:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   16386:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1638a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1638e:	b1cb      	cbz	r3, 163c4 <nrfx_twim_init+0x74>
   16390:	f1bc 0f00 	cmp.w	ip, #0
   16394:	d105      	bne.n	163a2 <nrfx_twim_init+0x52>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   16396:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   1639a:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1639e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   163a2:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   163a4:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   163a8:	b11a      	cbz	r2, 163b2 <nrfx_twim_init+0x62>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   163aa:	f340 3007 	sbfx	r0, r0, #12, #8
   163ae:	f7fc fb7b 	bl	12aa8 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   163b2:	2334      	movs	r3, #52	; 0x34
   163b4:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
   163b8:	4813      	ldr	r0, [pc, #76]	; (16408 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   163ba:	2301      	movs	r3, #1
   163bc:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   163c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
   163c4:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
   163c6:	4b11      	ldr	r3, [pc, #68]	; (1640c <nrfx_twim_init+0xbc>)
    *p_pin = pin_number & 0x1F;
   163c8:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
   163cc:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   163ce:	2c01      	cmp	r4, #1
   163d0:	bf18      	it	ne
   163d2:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   163d6:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
        case 1: return NRF_P1;
   163da:	bf08      	it	eq
   163dc:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
   163de:	f240 6e0c 	movw	lr, #1548	; 0x60c
   163e2:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
   163e6:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
   163e8:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
   163ec:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   163ee:	2c01      	cmp	r4, #1
   163f0:	bf18      	it	ne
   163f2:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   163f6:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
   163fa:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
   163fe:	e7c7      	b.n	16390 <nrfx_twim_init+0x40>
        return err_code;
   16400:	4803      	ldr	r0, [pc, #12]	; (16410 <nrfx_twim_init+0xc0>)
   16402:	e7dd      	b.n	163c0 <nrfx_twim_init+0x70>
   16404:	200016dc 	.word	0x200016dc
   16408:	0bad0000 	.word	0x0bad0000
   1640c:	50000300 	.word	0x50000300
   16410:	0bad0005 	.word	0x0bad0005

00016414 <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
   16414:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   16416:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   16418:	2106      	movs	r1, #6
   1641a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1641e:	4b04      	ldr	r3, [pc, #16]	; (16430 <nrfx_twim_enable+0x1c>)
   16420:	2134      	movs	r1, #52	; 0x34
   16422:	fb01 3302 	mla	r3, r1, r2, r3
   16426:	2202      	movs	r2, #2
   16428:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
   1642c:	4770      	bx	lr
   1642e:	bf00      	nop
   16430:	200016dc 	.word	0x200016dc

00016434 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   16434:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
   16436:	4b0c      	ldr	r3, [pc, #48]	; (16468 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   16438:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   1643a:	2034      	movs	r0, #52	; 0x34
   1643c:	fb00 3301 	mla	r3, r0, r1, r3
   16440:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   16442:	480a      	ldr	r0, [pc, #40]	; (1646c <nrfx_twim_disable+0x38>)
   16444:	6099      	str	r1, [r3, #8]
   16446:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1644a:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   1644e:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   16452:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   16456:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1645a:	2201      	movs	r2, #1
   1645c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   16460:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
   16464:	4770      	bx	lr
   16466:	bf00      	nop
   16468:	200016dc 	.word	0x200016dc
   1646c:	019c0202 	.word	0x019c0202

00016470 <nrfx_twim_uninit>:
{
   16470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   16472:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
   16474:	4d1e      	ldr	r5, [pc, #120]	; (164f0 <nrfx_twim_uninit+0x80>)
   16476:	2334      	movs	r3, #52	; 0x34
   16478:	4373      	muls	r3, r6
{
   1647a:	4604      	mov	r4, r0
    if (p_cb->handler)
   1647c:	58eb      	ldr	r3, [r5, r3]
   1647e:	b123      	cbz	r3, 1648a <nrfx_twim_uninit+0x1a>
   16480:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
   16482:	f340 3007 	sbfx	r0, r0, #12, #8
   16486:	f7fc fb1f 	bl	12ac8 <arch_irq_disable>
    nrfx_twim_disable(p_instance);
   1648a:	4620      	mov	r0, r4
   1648c:	f7ff ffd2 	bl	16434 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   16490:	2334      	movs	r3, #52	; 0x34
   16492:	fb03 5306 	mla	r3, r3, r6, r5
   16496:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
   1649a:	bb0a      	cbnz	r2, 164e0 <nrfx_twim_uninit+0x70>
   1649c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   164a0:	b9f3      	cbnz	r3, 164e0 <nrfx_twim_uninit+0x70>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
   164a2:	6824      	ldr	r4, [r4, #0]
        case 1: return NRF_P1;
   164a4:	4b13      	ldr	r3, [pc, #76]	; (164f4 <nrfx_twim_uninit+0x84>)
    return p_reg->PSEL.SCL;
   164a6:	f8d4 2508 	ldr.w	r2, [r4, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   164aa:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   164ae:	0952      	lsrs	r2, r2, #5
        case 1: return NRF_P1;
   164b0:	2a01      	cmp	r2, #1
   164b2:	bf18      	it	ne
   164b4:	f04f 47a0 	movne.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   164b8:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   164bc:	bf08      	it	eq
   164be:	461f      	moveq	r7, r3
    reg->PIN_CNF[pin_number] = cnf;
   164c0:	2002      	movs	r0, #2
   164c2:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
    return p_reg->PSEL.SDA;
   164c6:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   164ca:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   164ce:	0952      	lsrs	r2, r2, #5
        case 1: return NRF_P1;
   164d0:	2a01      	cmp	r2, #1
   164d2:	bf18      	it	ne
   164d4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   164d8:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   164dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   164e0:	2334      	movs	r3, #52	; 0x34
   164e2:	fb03 5506 	mla	r5, r3, r6, r5
   164e6:	2300      	movs	r3, #0
   164e8:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   164ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   164ee:	bf00      	nop
   164f0:	200016dc 	.word	0x200016dc
   164f4:	50000300 	.word	0x50000300

000164f8 <nrfx_twim_xfer>:
{
   164f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   164fc:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 167d0 <nrfx_twim_xfer+0x2d8>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   16500:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   16504:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   16506:	2334      	movs	r3, #52	; 0x34
   16508:	fb03 c30e 	mla	r3, r3, lr, ip
{
   1650c:	4617      	mov	r7, r2
    p_cb->error = false;
   1650e:	2200      	movs	r2, #0
   16510:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   16514:	684b      	ldr	r3, [r1, #4]
{
   16516:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   16518:	b14b      	cbz	r3, 1652e <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1651a:	68cb      	ldr	r3, [r1, #12]
   1651c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   16520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   16524:	d003      	beq.n	1652e <nrfx_twim_xfer+0x36>
        return err_code;
   16526:	4eab      	ldr	r6, [pc, #684]	; (167d4 <nrfx_twim_xfer+0x2dc>)
}
   16528:	4630      	mov	r0, r6
   1652a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   1652e:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   16530:	4ba9      	ldr	r3, [pc, #676]	; (167d8 <nrfx_twim_xfer+0x2e0>)
   16532:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   16536:	fb06 c60e 	mla	r6, r6, lr, ip
   1653a:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   1653e:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   16542:	b123      	cbz	r3, 1654e <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   16544:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   16546:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   1654a:	4ea4      	ldr	r6, [pc, #656]	; (167dc <nrfx_twim_xfer+0x2e4>)
   1654c:	e7ec      	b.n	16528 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   1654e:	f017 0f14 	tst.w	r7, #20
   16552:	bf0c      	ite	eq
   16554:	2301      	moveq	r3, #1
   16556:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   16558:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   1655c:	46a9      	mov	r9, r5
   1655e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   16562:	f106 080c 	add.w	r8, r6, #12
   16566:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   1656a:	f8d9 3000 	ldr.w	r3, [r9]
   1656e:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   16572:	f3c7 1300 	ubfx	r3, r7, #4, #1
   16576:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   1657a:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
   1657c:	786b      	ldrb	r3, [r5, #1]
   1657e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16582:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   16586:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1658a:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   1658e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16592:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   16596:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   1659a:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   1659e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   165a2:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   165a6:	bf18      	it	ne
   165a8:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   165aa:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   165ae:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   165b2:	bf18      	it	ne
   165b4:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   165b6:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   165ba:	782a      	ldrb	r2, [r5, #0]
   165bc:	2a03      	cmp	r2, #3
   165be:	f200 80b5 	bhi.w	1672c <nrfx_twim_xfer+0x234>
   165c2:	e8df f002 	tbb	[pc, r2]
   165c6:	a084      	.short	0xa084
   165c8:	0269      	.short	0x0269
   165ca:	692b      	ldr	r3, [r5, #16]
   165cc:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   165d0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   165d4:	d1a7      	bne.n	16526 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   165d6:	f44f 7180 	mov.w	r1, #256	; 0x100
   165da:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   165de:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   165e0:	6869      	ldr	r1, [r5, #4]
   165e2:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   165e6:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   165ea:	2100      	movs	r1, #0
   165ec:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   165f0:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   165f4:	2001      	movs	r0, #1
   165f6:	6220      	str	r0, [r4, #32]
   165f8:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   165fa:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   165fe:	2800      	cmp	r0, #0
   16600:	d0fb      	beq.n	165fa <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16602:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   16606:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1660a:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1660c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   16610:	2334      	movs	r3, #52	; 0x34
   16612:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
   16616:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
   1661a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1661e:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   16620:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   16622:	4e6f      	ldr	r6, [pc, #444]	; (167e0 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   16624:	0739      	lsls	r1, r7, #28
   16626:	d406      	bmi.n	16636 <nrfx_twim_xfer+0x13e>
   16628:	2a03      	cmp	r2, #3
   1662a:	d004      	beq.n	16636 <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1662c:	2201      	movs	r2, #1
   1662e:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   16630:	686b      	ldr	r3, [r5, #4]
   16632:	b903      	cbnz	r3, 16636 <nrfx_twim_xfer+0x13e>
   16634:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   16636:	2334      	movs	r3, #52	; 0x34
   16638:	fb03 f30e 	mul.w	r3, r3, lr
   1663c:	eb0c 0103 	add.w	r1, ip, r3
   16640:	f85c 2003 	ldr.w	r2, [ip, r3]
   16644:	2a00      	cmp	r2, #0
   16646:	d174      	bne.n	16732 <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
   16648:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1664a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1664e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   16652:	2800      	cmp	r0, #0
   16654:	f040 8088 	bne.w	16768 <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   16658:	3b00      	subs	r3, #0
   1665a:	bf18      	it	ne
   1665c:	2301      	movne	r3, #1
   1665e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   16662:	2800      	cmp	r0, #0
   16664:	f000 8086 	beq.w	16774 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16668:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1666c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16670:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   16674:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   16678:	b115      	cbz	r5, 16680 <nrfx_twim_xfer+0x188>
   1667a:	f410 7f00 	tst.w	r0, #512	; 0x200
   1667e:	d104      	bne.n	1668a <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16680:	6221      	str	r1, [r4, #32]
   16682:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   16684:	2d00      	cmp	r5, #0
   16686:	d0e0      	beq.n	1664a <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
   16688:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1668a:	05c0      	lsls	r0, r0, #23
   1668c:	d572      	bpl.n	16774 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1668e:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   16692:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
   16696:	e7d8      	b.n	1664a <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   16698:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1669a:	68e9      	ldr	r1, [r5, #12]
   1669c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   166a0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   166a4:	692b      	ldr	r3, [r5, #16]
   166a6:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   166aa:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   166ae:	f47f af3a 	bne.w	16526 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   166b2:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   166b4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   166b8:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   166bc:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   166c0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   166c4:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   166c6:	fb03 c30e 	mla	r3, r3, lr, ip
   166ca:	2102      	movs	r1, #2
   166cc:	e012      	b.n	166f4 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   166ce:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   166d0:	68e9      	ldr	r1, [r5, #12]
   166d2:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   166d6:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
   166da:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   166de:	f04f 0334 	mov.w	r3, #52	; 0x34
   166e2:	d00b      	beq.n	166fc <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
   166e4:	f44f 7180 	mov.w	r1, #256	; 0x100
   166e8:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   166ec:	fb03 c30e 	mla	r3, r3, lr, ip
   166f0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   166f4:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   166f6:	2301      	movs	r3, #1
   166f8:	6223      	str	r3, [r4, #32]
   166fa:	e791      	b.n	16620 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
   166fc:	f44f 7100 	mov.w	r1, #512	; 0x200
   16700:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
   16704:	e7df      	b.n	166c6 <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   16706:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   16708:	68e9      	ldr	r1, [r5, #12]
   1670a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1670e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   16712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16716:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1671a:	2334      	movs	r3, #52	; 0x34
   1671c:	fb03 c30e 	mla	r3, r3, lr, ip
   16720:	2102      	movs	r1, #2
   16722:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16724:	2301      	movs	r3, #1
   16726:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   16728:	2300      	movs	r3, #0
   1672a:	e77a      	b.n	16622 <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
   1672c:	4e2d      	ldr	r6, [pc, #180]	; (167e4 <nrfx_twim_xfer+0x2ec>)
   1672e:	2308      	movs	r3, #8
   16730:	e778      	b.n	16624 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   16732:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
   16734:	bf44      	itt	mi
   16736:	2300      	movmi	r3, #0
   16738:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   1673a:	067b      	lsls	r3, r7, #25
   1673c:	d406      	bmi.n	1674c <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   1673e:	2334      	movs	r3, #52	; 0x34
   16740:	fb03 c30e 	mla	r3, r3, lr, ip
   16744:	689a      	ldr	r2, [r3, #8]
   16746:	f042 0202 	orr.w	r2, r2, #2
   1674a:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   1674c:	2334      	movs	r3, #52	; 0x34
   1674e:	fb03 cc0e 	mla	ip, r3, lr, ip
   16752:	f8dc 3008 	ldr.w	r3, [ip, #8]
   16756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1675a:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1675e:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
   16762:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   16766:	e6df      	b.n	16528 <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16768:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1676c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   16770:	2301      	movs	r3, #1
   16772:	e774      	b.n	1665e <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
   16774:	2b00      	cmp	r3, #0
   16776:	f43f af68 	beq.w	1664a <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
   1677a:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   1677c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   16780:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   16784:	fb01 c20e 	mla	r2, r1, lr, ip
   16788:	2000      	movs	r0, #0
   1678a:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   1678e:	b18b      	cbz	r3, 167b4 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   16790:	4a15      	ldr	r2, [pc, #84]	; (167e8 <nrfx_twim_xfer+0x2f0>)
   16792:	4e16      	ldr	r6, [pc, #88]	; (167ec <nrfx_twim_xfer+0x2f4>)
   16794:	f013 0f01 	tst.w	r3, #1
   16798:	bf18      	it	ne
   1679a:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1679c:	f013 0f02 	tst.w	r3, #2
   167a0:	f102 0201 	add.w	r2, r2, #1
   167a4:	bf18      	it	ne
   167a6:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   167a8:	f013 0f04 	tst.w	r3, #4
   167ac:	4b10      	ldr	r3, [pc, #64]	; (167f0 <nrfx_twim_xfer+0x2f8>)
   167ae:	bf18      	it	ne
   167b0:	461e      	movne	r6, r3
   167b2:	e6b9      	b.n	16528 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   167b4:	067b      	lsls	r3, r7, #25
   167b6:	f53f aeb7 	bmi.w	16528 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   167ba:	fb0e c101 	mla	r1, lr, r1, ip
   167be:	4620      	mov	r0, r4
   167c0:	f004 fb50 	bl	1ae64 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   167c4:	4b09      	ldr	r3, [pc, #36]	; (167ec <nrfx_twim_xfer+0x2f4>)
   167c6:	2800      	cmp	r0, #0
   167c8:	bf08      	it	eq
   167ca:	461e      	moveq	r6, r3
   167cc:	e6ac      	b.n	16528 <nrfx_twim_xfer+0x30>
   167ce:	bf00      	nop
   167d0:	200016dc 	.word	0x200016dc
   167d4:	0bad000a 	.word	0x0bad000a
   167d8:	019c0202 	.word	0x019c0202
   167dc:	0bad000b 	.word	0x0bad000b
   167e0:	0bad0000 	.word	0x0bad0000
   167e4:	0bad0004 	.word	0x0bad0004
   167e8:	0bae0000 	.word	0x0bae0000
   167ec:	0bad0001 	.word	0x0bad0001
   167f0:	0bae0002 	.word	0x0bae0002

000167f4 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
   167f4:	4901      	ldr	r1, [pc, #4]	; (167fc <nrfx_twim_0_irq_handler+0x8>)
   167f6:	4802      	ldr	r0, [pc, #8]	; (16800 <nrfx_twim_0_irq_handler+0xc>)
   167f8:	f7ff bcec 	b.w	161d4 <twim_irq_handler>
   167fc:	200016dc 	.word	0x200016dc
   16800:	40003000 	.word	0x40003000

00016804 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
   16804:	4902      	ldr	r1, [pc, #8]	; (16810 <nrfx_twim_1_irq_handler+0xc>)
   16806:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   1680a:	f7ff bce3 	b.w	161d4 <twim_irq_handler>
   1680e:	bf00      	nop
   16810:	20001710 	.word	0x20001710

00016814 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   16814:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   16818:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1681c:	2a08      	cmp	r2, #8
   1681e:	d106      	bne.n	1682e <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   16820:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   16824:	2b05      	cmp	r3, #5
   16826:	d804      	bhi.n	16832 <nrf52_errata_187+0x1e>
   16828:	4a03      	ldr	r2, [pc, #12]	; (16838 <nrf52_errata_187+0x24>)
   1682a:	5cd0      	ldrb	r0, [r2, r3]
   1682c:	4770      	bx	lr
        return false;
   1682e:	2000      	movs	r0, #0
   16830:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   16832:	2001      	movs	r0, #1
}
   16834:	4770      	bx	lr
   16836:	bf00      	nop
   16838:	0001dbee 	.word	0x0001dbee

0001683c <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1683c:	4b05      	ldr	r3, [pc, #20]	; (16854 <ep_state_access+0x18>)
   1683e:	f010 0f80 	tst.w	r0, #128	; 0x80
   16842:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   16846:	bf08      	it	eq
   16848:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   1684a:	f000 000f 	and.w	r0, r0, #15
}
   1684e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   16852:	4770      	bx	lr
   16854:	200018b4 	.word	0x200018b4

00016858 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   16858:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   1685a:	f004 fb33 	bl	1aec4 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   1685e:	b118      	cbz	r0, 16868 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   16860:	4b03      	ldr	r3, [pc, #12]	; (16870 <usbd_dma_pending_clear+0x18>)
   16862:	2200      	movs	r2, #0
   16864:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
   16868:	4b02      	ldr	r3, [pc, #8]	; (16874 <usbd_dma_pending_clear+0x1c>)
   1686a:	2200      	movs	r2, #0
   1686c:	701a      	strb	r2, [r3, #0]
}
   1686e:	bd08      	pop	{r3, pc}
   16870:	40027000 	.word	0x40027000
   16874:	20001a00 	.word	0x20001a00

00016878 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   16878:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   1687a:	4a09      	ldr	r2, [pc, #36]	; (168a0 <ev_usbreset_handler+0x28>)
   1687c:	2300      	movs	r3, #0
   1687e:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   16880:	4a08      	ldr	r2, [pc, #32]	; (168a4 <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
   16882:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   16886:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   16888:	f88d 3007 	strb.w	r3, [sp, #7]
   1688c:	2301      	movs	r3, #1
   1688e:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   16892:	4b05      	ldr	r3, [pc, #20]	; (168a8 <ev_usbreset_handler+0x30>)
   16894:	a801      	add	r0, sp, #4
   16896:	681b      	ldr	r3, [r3, #0]
   16898:	4798      	blx	r3
}
   1689a:	b003      	add	sp, #12
   1689c:	f85d fb04 	ldr.w	pc, [sp], #4
   168a0:	200019ff 	.word	0x200019ff
   168a4:	20001a02 	.word	0x20001a02
   168a8:	20001944 	.word	0x20001944

000168ac <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   168ac:	4b21      	ldr	r3, [pc, #132]	; (16934 <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   168ae:	b513      	push	{r0, r1, r4, lr}
   168b0:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   168b4:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   168b8:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   168ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   168be:	d50e      	bpl.n	168de <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   168c0:	4b1d      	ldr	r3, [pc, #116]	; (16938 <ev_usbevent_handler+0x8c>)
   168c2:	2201      	movs	r2, #1
   168c4:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   168c6:	2300      	movs	r3, #0
   168c8:	f8ad 3005 	strh.w	r3, [sp, #5]
   168cc:	f88d 3007 	strb.w	r3, [sp, #7]
   168d0:	2302      	movs	r3, #2
   168d2:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   168d6:	4b19      	ldr	r3, [pc, #100]	; (1693c <ev_usbevent_handler+0x90>)
   168d8:	a801      	add	r0, sp, #4
   168da:	681b      	ldr	r3, [r3, #0]
   168dc:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   168de:	05a2      	lsls	r2, r4, #22
   168e0:	d50d      	bpl.n	168fe <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   168e2:	4a15      	ldr	r2, [pc, #84]	; (16938 <ev_usbevent_handler+0x8c>)
   168e4:	2300      	movs	r3, #0
   168e6:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   168e8:	f8ad 3005 	strh.w	r3, [sp, #5]
   168ec:	f88d 3007 	strb.w	r3, [sp, #7]
   168f0:	2303      	movs	r3, #3
   168f2:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   168f6:	4b11      	ldr	r3, [pc, #68]	; (1693c <ev_usbevent_handler+0x90>)
   168f8:	a801      	add	r0, sp, #4
   168fa:	681b      	ldr	r3, [r3, #0]
   168fc:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   168fe:	0563      	lsls	r3, r4, #21
   16900:	d515      	bpl.n	1692e <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   16902:	4a0d      	ldr	r2, [pc, #52]	; (16938 <ev_usbevent_handler+0x8c>)
   16904:	7813      	ldrb	r3, [r2, #0]
   16906:	b193      	cbz	r3, 1692e <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   16908:	2300      	movs	r3, #0
   1690a:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   1690c:	4a09      	ldr	r2, [pc, #36]	; (16934 <ev_usbevent_handler+0x88>)
   1690e:	2101      	movs	r1, #1
   16910:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   16914:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   16916:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   16918:	f8ad 3005 	strh.w	r3, [sp, #5]
   1691c:	f88d 3007 	strb.w	r3, [sp, #7]
   16920:	2304      	movs	r3, #4
   16922:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   16926:	4b05      	ldr	r3, [pc, #20]	; (1693c <ev_usbevent_handler+0x90>)
   16928:	a801      	add	r0, sp, #4
   1692a:	681b      	ldr	r3, [r3, #0]
   1692c:	4798      	blx	r3
        }
    }
}
   1692e:	b002      	add	sp, #8
   16930:	bd10      	pop	{r4, pc}
   16932:	bf00      	nop
   16934:	40027000 	.word	0x40027000
   16938:	200019ff 	.word	0x200019ff
   1693c:	20001944 	.word	0x20001944

00016940 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   16940:	f04f 0320 	mov.w	r3, #32
   16944:	f3ef 8011 	mrs	r0, BASEPRI
   16948:	f383 8812 	msr	BASEPRI_MAX, r3
   1694c:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   16950:	4b0a      	ldr	r3, [pc, #40]	; (1697c <usbd_errata_187_211_begin+0x3c>)
   16952:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   16956:	2203      	movs	r2, #3
   16958:	b961      	cbnz	r1, 16974 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1695a:	f249 3175 	movw	r1, #37749	; 0x9375
   1695e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   16962:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   16966:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   1696a:	f380 8811 	msr	BASEPRI, r0
   1696e:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   16972:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   16974:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   16978:	e7f7      	b.n	1696a <usbd_errata_187_211_begin+0x2a>
   1697a:	bf00      	nop
   1697c:	4006e000 	.word	0x4006e000

00016980 <usbd_errata_187_211_end>:
	__asm__ volatile(
   16980:	f04f 0320 	mov.w	r3, #32
   16984:	f3ef 8011 	mrs	r0, BASEPRI
   16988:	f383 8812 	msr	BASEPRI_MAX, r3
   1698c:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   16990:	4b0a      	ldr	r3, [pc, #40]	; (169bc <usbd_errata_187_211_end+0x3c>)
   16992:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   16996:	b961      	cbnz	r1, 169b2 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   16998:	f249 3275 	movw	r2, #37749	; 0x9375
   1699c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   169a0:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   169a4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   169a8:	f380 8811 	msr	BASEPRI, r0
   169ac:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   169b0:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   169b2:	2200      	movs	r2, #0
   169b4:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   169b8:	e7f6      	b.n	169a8 <usbd_errata_187_211_end+0x28>
   169ba:	bf00      	nop
   169bc:	4006e000 	.word	0x4006e000

000169c0 <nrfx_usbd_feeder_flash>:
{
   169c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   169c2:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   169c4:	4f0b      	ldr	r7, [pc, #44]	; (169f4 <nrfx_usbd_feeder_flash+0x34>)
   169c6:	4295      	cmp	r5, r2
   169c8:	bf28      	it	cs
   169ca:	4615      	movcs	r5, r2
{
   169cc:	460c      	mov	r4, r1
   169ce:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   169d0:	462a      	mov	r2, r5
   169d2:	6809      	ldr	r1, [r1, #0]
   169d4:	4638      	mov	r0, r7
   169d6:	f003 fae4 	bl	19fa2 <memcpy>
    p_transfer->size -= tx_size;
   169da:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   169dc:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
   169de:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   169e0:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   169e4:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
   169e6:	6060      	str	r0, [r4, #4]
}
   169e8:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   169ea:	6022      	str	r2, [r4, #0]
}
   169ec:	bf18      	it	ne
   169ee:	2001      	movne	r0, #1
   169f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   169f2:	bf00      	nop
   169f4:	20001948 	.word	0x20001948

000169f8 <nrfx_usbd_feeder_flash_zlp>:
{
   169f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   169fa:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
   169fc:	4294      	cmp	r4, r2
   169fe:	bf28      	it	cs
   16a00:	4614      	movcs	r4, r2
{
   16a02:	4606      	mov	r6, r0
   16a04:	460d      	mov	r5, r1
    if (tx_size != 0)
   16a06:	b18c      	cbz	r4, 16a2c <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   16a08:	4f09      	ldr	r7, [pc, #36]	; (16a30 <nrfx_usbd_feeder_flash_zlp+0x38>)
   16a0a:	6809      	ldr	r1, [r1, #0]
   16a0c:	4622      	mov	r2, r4
   16a0e:	4638      	mov	r0, r7
   16a10:	f003 fac7 	bl	19fa2 <memcpy>
        p_next->p_data.tx = p_buffer;
   16a14:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
   16a16:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
   16a18:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   16a1a:	1b1b      	subs	r3, r3, r4
   16a1c:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   16a1e:	682b      	ldr	r3, [r5, #0]
}
   16a20:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   16a22:	4423      	add	r3, r4
   16a24:	602b      	str	r3, [r5, #0]
}
   16a26:	bf18      	it	ne
   16a28:	2001      	movne	r0, #1
   16a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
   16a2c:	6004      	str	r4, [r0, #0]
   16a2e:	e7f2      	b.n	16a16 <nrfx_usbd_feeder_flash_zlp+0x1e>
   16a30:	20001948 	.word	0x20001948

00016a34 <ev_sof_handler>:
{
   16a34:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   16a36:	2300      	movs	r3, #0
   16a38:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   16a3c:	4b0b      	ldr	r3, [pc, #44]	; (16a6c <ev_sof_handler+0x38>)
   16a3e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   16a42:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   16a46:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   16a4a:	4a09      	ldr	r2, [pc, #36]	; (16a70 <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   16a4c:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   16a4e:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   16a50:	bf0c      	ite	eq
   16a52:	f44f 7180 	moveq.w	r1, #256	; 0x100
   16a56:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
   16a5a:	430b      	orrs	r3, r1
   16a5c:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   16a5e:	4b05      	ldr	r3, [pc, #20]	; (16a74 <ev_sof_handler+0x40>)
   16a60:	a801      	add	r0, sp, #4
   16a62:	681b      	ldr	r3, [r3, #0]
   16a64:	4798      	blx	r3
}
   16a66:	b003      	add	sp, #12
   16a68:	f85d fb04 	ldr.w	pc, [sp], #4
   16a6c:	40027000 	.word	0x40027000
   16a70:	20001820 	.word	0x20001820
   16a74:	20001944 	.word	0x20001944

00016a78 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16a78:	4b06      	ldr	r3, [pc, #24]	; (16a94 <atomic_and.constprop.0.isra.0+0x1c>)
   16a7a:	f3bf 8f5b 	dmb	ish
   16a7e:	e853 2f00 	ldrex	r2, [r3]
   16a82:	4002      	ands	r2, r0
   16a84:	e843 2100 	strex	r1, r2, [r3]
   16a88:	2900      	cmp	r1, #0
   16a8a:	d1f8      	bne.n	16a7e <atomic_and.constprop.0.isra.0+0x6>
   16a8c:	f3bf 8f5b 	dmb	ish
}
   16a90:	4770      	bx	lr
   16a92:	bf00      	nop
   16a94:	200017b0 	.word	0x200017b0

00016a98 <nrf_usbd_ep0in_dma_handler>:
{
   16a98:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   16a9a:	f7ff fedd 	bl	16858 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   16a9e:	4b08      	ldr	r3, [pc, #32]	; (16ac0 <nrf_usbd_ep0in_dma_handler+0x28>)
   16aa0:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   16aa4:	2a03      	cmp	r2, #3
   16aa6:	d105      	bne.n	16ab4 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   16aa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   16aac:	f06f 0001 	mvn.w	r0, #1
   16ab0:	f7ff bfe2 	b.w	16a78 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   16ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   16ab8:	2b00      	cmp	r3, #0
   16aba:	d0f5      	beq.n	16aa8 <nrf_usbd_ep0in_dma_handler+0x10>
}
   16abc:	bd08      	pop	{r3, pc}
   16abe:	bf00      	nop
   16ac0:	20001824 	.word	0x20001824

00016ac4 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   16ac4:	2201      	movs	r2, #1
{
   16ac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   16ac8:	fa02 f501 	lsl.w	r5, r2, r1
   16acc:	491c      	ldr	r1, [pc, #112]	; (16b40 <usbd_ep_data_handler+0x7c>)
   16ace:	4e1d      	ldr	r6, [pc, #116]	; (16b44 <usbd_ep_data_handler+0x80>)
   16ad0:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   16ad2:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   16ad6:	ea43 0305 	orr.w	r3, r3, r5
{
   16ada:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   16adc:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   16ade:	d024      	beq.n	16b2a <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   16ae0:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   16ae4:	4b18      	ldr	r3, [pc, #96]	; (16b48 <usbd_ep_data_handler+0x84>)
   16ae6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   16aea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16aee:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   16af2:	681a      	ldr	r2, [r3, #0]
    if (ret)
   16af4:	b132      	cbz	r2, 16b04 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   16af6:	2200      	movs	r2, #0
   16af8:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   16afa:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   16afc:	681b      	ldr	r3, [r3, #0]
   16afe:	d011      	beq.n	16b24 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   16b00:	f004 fa30 	bl	1af64 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   16b04:	6831      	ldr	r1, [r6, #0]
   16b06:	4029      	ands	r1, r5
   16b08:	d10a      	bne.n	16b20 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   16b0a:	2306      	movs	r3, #6
   16b0c:	f88d 3004 	strb.w	r3, [sp, #4]
   16b10:	f88d 4006 	strb.w	r4, [sp, #6]
   16b14:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
   16b18:	4b0c      	ldr	r3, [pc, #48]	; (16b4c <usbd_ep_data_handler+0x88>)
   16b1a:	a801      	add	r0, sp, #4
   16b1c:	681b      	ldr	r3, [r3, #0]
   16b1e:	4798      	blx	r3
}
   16b20:	b002      	add	sp, #8
   16b22:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   16b24:	f7ff ffb8 	bl	16a98 <nrf_usbd_ep0in_dma_handler>
   16b28:	e7ec      	b.n	16b04 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   16b2a:	6833      	ldr	r3, [r6, #0]
   16b2c:	421d      	tst	r5, r3
   16b2e:	d1f7      	bne.n	16b20 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   16b30:	2306      	movs	r3, #6
   16b32:	f88d 3004 	strb.w	r3, [sp, #4]
   16b36:	f88d 0006 	strb.w	r0, [sp, #6]
   16b3a:	f88d 2007 	strb.w	r2, [sp, #7]
   16b3e:	e7eb      	b.n	16b18 <usbd_ep_data_handler+0x54>
   16b40:	20001820 	.word	0x20001820
   16b44:	200017b0 	.word	0x200017b0
   16b48:	0001dacc 	.word	0x0001dacc
   16b4c:	20001944 	.word	0x20001944

00016b50 <ev_setup_data_handler>:
{
   16b50:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   16b52:	4b05      	ldr	r3, [pc, #20]	; (16b68 <ev_setup_data_handler+0x18>)
   16b54:	781a      	ldrb	r2, [r3, #0]
   16b56:	4610      	mov	r0, r2
   16b58:	f004 f9fa 	bl	1af50 <ep2bit>
}
   16b5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   16b60:	4601      	mov	r1, r0
   16b62:	4610      	mov	r0, r2
   16b64:	f7ff bfae 	b.w	16ac4 <usbd_ep_data_handler>
   16b68:	20001a02 	.word	0x20001a02

00016b6c <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   16b6c:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   16b6e:	f7ff fe73 	bl	16858 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   16b72:	4b0c      	ldr	r3, [pc, #48]	; (16ba4 <ev_dma_epout8_handler+0x38>)
   16b74:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   16b78:	2a03      	cmp	r2, #3
   16b7a:	d010      	beq.n	16b9e <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   16b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   16b80:	b96b      	cbnz	r3, 16b9e <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   16b82:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   16b86:	f7ff ff77 	bl	16a78 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   16b8a:	2306      	movs	r3, #6
   16b8c:	f88d 3004 	strb.w	r3, [sp, #4]
   16b90:	2308      	movs	r3, #8
   16b92:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   16b96:	4b04      	ldr	r3, [pc, #16]	; (16ba8 <ev_dma_epout8_handler+0x3c>)
   16b98:	a801      	add	r0, sp, #4
   16b9a:	681b      	ldr	r3, [r3, #0]
   16b9c:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   16b9e:	b003      	add	sp, #12
   16ba0:	f85d fb04 	ldr.w	pc, [sp], #4
   16ba4:	20001824 	.word	0x20001824
   16ba8:	20001944 	.word	0x20001944

00016bac <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   16bac:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   16bae:	f7ff fe53 	bl	16858 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   16bb2:	4b10      	ldr	r3, [pc, #64]	; (16bf4 <ev_dma_epin8_handler+0x48>)
   16bb4:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   16bb8:	2a03      	cmp	r2, #3
   16bba:	d106      	bne.n	16bca <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   16bbc:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   16bc0:	b003      	add	sp, #12
   16bc2:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   16bc6:	f7ff bf57 	b.w	16a78 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   16bca:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   16bce:	b96b      	cbnz	r3, 16bec <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   16bd0:	f46f 7080 	mvn.w	r0, #256	; 0x100
   16bd4:	f7ff ff50 	bl	16a78 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   16bd8:	2306      	movs	r3, #6
   16bda:	f88d 3004 	strb.w	r3, [sp, #4]
   16bde:	2388      	movs	r3, #136	; 0x88
   16be0:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   16be4:	4b04      	ldr	r3, [pc, #16]	; (16bf8 <ev_dma_epin8_handler+0x4c>)
   16be6:	a801      	add	r0, sp, #4
   16be8:	681b      	ldr	r3, [r3, #0]
   16bea:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   16bec:	b003      	add	sp, #12
   16bee:	f85d fb04 	ldr.w	pc, [sp], #4
   16bf2:	bf00      	nop
   16bf4:	20001824 	.word	0x20001824
   16bf8:	20001944 	.word	0x20001944

00016bfc <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   16bfc:	4a02      	ldr	r2, [pc, #8]	; (16c08 <nrfx_usbd_uninit+0xc>)
   16bfe:	2300      	movs	r3, #0
   16c00:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   16c02:	4a02      	ldr	r2, [pc, #8]	; (16c0c <nrfx_usbd_uninit+0x10>)
   16c04:	7013      	strb	r3, [r2, #0]
    return;
}
   16c06:	4770      	bx	lr
   16c08:	20001944 	.word	0x20001944
   16c0c:	20001a01 	.word	0x20001a01

00016c10 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   16c10:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   16c12:	4b48      	ldr	r3, [pc, #288]	; (16d34 <nrfx_usbd_enable+0x124>)
   16c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
   16c18:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   16c1c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   16c20:	f7ff fdf8 	bl	16814 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   16c24:	b108      	cbz	r0, 16c2a <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   16c26:	f7ff fe8b 	bl	16940 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   16c2a:	f004 f94b 	bl	1aec4 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   16c2e:	b1c8      	cbz	r0, 16c64 <nrfx_usbd_enable+0x54>
	__asm__ volatile(
   16c30:	f04f 0320 	mov.w	r3, #32
   16c34:	f3ef 8011 	mrs	r0, BASEPRI
   16c38:	f383 8812 	msr	BASEPRI_MAX, r3
   16c3c:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   16c40:	4b3d      	ldr	r3, [pc, #244]	; (16d38 <nrfx_usbd_enable+0x128>)
   16c42:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   16c46:	22c0      	movs	r2, #192	; 0xc0
   16c48:	2900      	cmp	r1, #0
   16c4a:	d16a      	bne.n	16d22 <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   16c4c:	f249 3175 	movw	r1, #37749	; 0x9375
   16c50:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   16c54:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   16c58:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   16c5c:	f380 8811 	msr	BASEPRI, r0
   16c60:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   16c64:	4b33      	ldr	r3, [pc, #204]	; (16d34 <nrfx_usbd_enable+0x124>)
   16c66:	2201      	movs	r2, #1
   16c68:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   16c6c:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   16c70:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   16c74:	0512      	lsls	r2, r2, #20
   16c76:	d5fb      	bpl.n	16c70 <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
   16c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
   16c7c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   16c80:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   16c84:	f004 f91e 	bl	1aec4 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   16c88:	b1c0      	cbz	r0, 16cbc <nrfx_usbd_enable+0xac>
	__asm__ volatile(
   16c8a:	f04f 0320 	mov.w	r3, #32
   16c8e:	f3ef 8011 	mrs	r0, BASEPRI
   16c92:	f383 8812 	msr	BASEPRI_MAX, r3
   16c96:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   16c9a:	4b27      	ldr	r3, [pc, #156]	; (16d38 <nrfx_usbd_enable+0x128>)
   16c9c:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   16ca0:	2900      	cmp	r1, #0
   16ca2:	d141      	bne.n	16d28 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   16ca4:	f249 3275 	movw	r2, #37749	; 0x9375
   16ca8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   16cac:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   16cb0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   16cb4:	f380 8811 	msr	BASEPRI, r0
   16cb8:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   16cbc:	f7ff fdaa 	bl	16814 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   16cc0:	b130      	cbz	r0, 16cd0 <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
   16cc2:	f7ff fe5d 	bl	16980 <usbd_errata_187_211_end>
   16cc6:	f7ff fda5 	bl	16814 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   16cca:	b108      	cbz	r0, 16cd0 <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
   16ccc:	f7ff fe38 	bl	16940 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   16cd0:	f004 f8f8 	bl	1aec4 <nrf52_errata_166>
   16cd4:	4b17      	ldr	r3, [pc, #92]	; (16d34 <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
   16cd6:	b150      	cbz	r0, 16cee <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   16cd8:	f240 72e3 	movw	r2, #2019	; 0x7e3
   16cdc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   16ce0:	2240      	movs	r2, #64	; 0x40
   16ce2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   16ce6:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   16cea:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   16cee:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   16cf0:	2280      	movs	r2, #128	; 0x80
   16cf2:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   16cf6:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   16cfa:	4b10      	ldr	r3, [pc, #64]	; (16d3c <nrfx_usbd_enable+0x12c>)
   16cfc:	f240 12ff 	movw	r2, #511	; 0x1ff
   16d00:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   16d02:	4b0f      	ldr	r3, [pc, #60]	; (16d40 <nrfx_usbd_enable+0x130>)
   16d04:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   16d06:	f7ff fda7 	bl	16858 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   16d0a:	4b0e      	ldr	r3, [pc, #56]	; (16d44 <nrfx_usbd_enable+0x134>)
   16d0c:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   16d0e:	4b0e      	ldr	r3, [pc, #56]	; (16d48 <nrfx_usbd_enable+0x138>)
   16d10:	2202      	movs	r2, #2
   16d12:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   16d14:	f7ff fd7e 	bl	16814 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   16d18:	b150      	cbz	r0, 16d30 <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   16d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   16d1e:	f7ff be2f 	b.w	16980 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   16d22:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   16d26:	e799      	b.n	16c5c <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   16d28:	2200      	movs	r2, #0
   16d2a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   16d2e:	e7c1      	b.n	16cb4 <nrfx_usbd_enable+0xa4>
}
   16d30:	bd08      	pop	{r3, pc}
   16d32:	bf00      	nop
   16d34:	40027000 	.word	0x40027000
   16d38:	4006e000 	.word	0x4006e000
   16d3c:	20001820 	.word	0x20001820
   16d40:	200017b0 	.word	0x200017b0
   16d44:	20001a02 	.word	0x20001a02
   16d48:	20001a01 	.word	0x20001a01

00016d4c <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   16d4c:	4b0a      	ldr	r3, [pc, #40]	; (16d78 <nrfx_usbd_start+0x2c>)
   16d4e:	2200      	movs	r2, #0
{
   16d50:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   16d52:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   16d54:	4a09      	ldr	r2, [pc, #36]	; (16d7c <nrfx_usbd_start+0x30>)
   16d56:	4b0a      	ldr	r3, [pc, #40]	; (16d80 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   16d58:	4c0a      	ldr	r4, [pc, #40]	; (16d84 <nrfx_usbd_start+0x38>)
   16d5a:	2800      	cmp	r0, #0
   16d5c:	bf18      	it	ne
   16d5e:	4613      	movne	r3, r2
   16d60:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   16d64:	2027      	movs	r0, #39	; 0x27
   16d66:	f7fb fe9f 	bl	12aa8 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   16d6a:	2301      	movs	r3, #1
   16d6c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   16d70:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   16d74:	bd10      	pop	{r4, pc}
   16d76:	bf00      	nop
   16d78:	200019ff 	.word	0x200019ff
   16d7c:	01e01407 	.word	0x01e01407
   16d80:	01c01407 	.word	0x01c01407
   16d84:	40027000 	.word	0x40027000

00016d88 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   16d88:	4b03      	ldr	r3, [pc, #12]	; (16d98 <nrfx_usbd_is_enabled+0x10>)
   16d8a:	7818      	ldrb	r0, [r3, #0]
}
   16d8c:	2801      	cmp	r0, #1
   16d8e:	bf94      	ite	ls
   16d90:	2000      	movls	r0, #0
   16d92:	2001      	movhi	r0, #1
   16d94:	4770      	bx	lr
   16d96:	bf00      	nop
   16d98:	20001a01 	.word	0x20001a01

00016d9c <nrfx_usbd_init>:
{
   16d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   16da0:	4b1d      	ldr	r3, [pc, #116]	; (16e18 <nrfx_usbd_init+0x7c>)
   16da2:	781c      	ldrb	r4, [r3, #0]
   16da4:	2c00      	cmp	r4, #0
   16da6:	d135      	bne.n	16e14 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
   16da8:	4a1c      	ldr	r2, [pc, #112]	; (16e1c <nrfx_usbd_init+0x80>)
   16daa:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   16dac:	2201      	movs	r2, #1
   16dae:	701a      	strb	r2, [r3, #0]
   16db0:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   16db2:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   16db6:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   16db8:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   16dbc:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   16dc0:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   16dc2:	bf14      	ite	ne
   16dc4:	4641      	movne	r1, r8
   16dc6:	2140      	moveq	r1, #64	; 0x40
   16dc8:	4630      	mov	r0, r6
   16dca:	f004 f8fb 	bl	1afc4 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   16dce:	4630      	mov	r0, r6
   16dd0:	f7ff fd34 	bl	1683c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   16dd4:	3501      	adds	r5, #1
   16dd6:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
   16dd8:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
   16dda:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
   16ddc:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   16dde:	d1eb      	bne.n	16db8 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   16de0:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
   16de2:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   16de4:	f240 16ff 	movw	r6, #511	; 0x1ff
   16de8:	4620      	mov	r0, r4
   16dea:	f004 f8eb 	bl	1afc4 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   16dee:	4620      	mov	r0, r4
   16df0:	f7ff fd24 	bl	1683c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   16df4:	3401      	adds	r4, #1
   16df6:	b2e4      	uxtb	r4, r4
   16df8:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   16dfa:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   16dfc:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   16dfe:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   16e00:	d102      	bne.n	16e08 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
   16e02:	4807      	ldr	r0, [pc, #28]	; (16e20 <nrfx_usbd_init+0x84>)
}
   16e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   16e08:	f014 0f08 	tst.w	r4, #8
   16e0c:	bf14      	ite	ne
   16e0e:	4631      	movne	r1, r6
   16e10:	2140      	moveq	r1, #64	; 0x40
   16e12:	e7e9      	b.n	16de8 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
   16e14:	4803      	ldr	r0, [pc, #12]	; (16e24 <nrfx_usbd_init+0x88>)
   16e16:	e7f5      	b.n	16e04 <nrfx_usbd_init+0x68>
   16e18:	20001a01 	.word	0x20001a01
   16e1c:	20001944 	.word	0x20001944
   16e20:	0bad0000 	.word	0x0bad0000
   16e24:	0bad0005 	.word	0x0bad0005

00016e28 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   16e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16e2c:	4605      	mov	r5, r0
	__asm__ volatile(
   16e2e:	f04f 0320 	mov.w	r3, #32
   16e32:	f3ef 8811 	mrs	r8, BASEPRI
   16e36:	f383 8812 	msr	BASEPRI_MAX, r3
   16e3a:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   16e3e:	f010 040f 	ands.w	r4, r0, #15
   16e42:	d103      	bne.n	16e4c <nrfx_usbd_ep_transfer+0x24>
   16e44:	4b27      	ldr	r3, [pc, #156]	; (16ee4 <nrfx_usbd_ep_transfer+0xbc>)
   16e46:	781b      	ldrb	r3, [r3, #0]
   16e48:	4283      	cmp	r3, r0
   16e4a:	d146      	bne.n	16eda <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   16e4c:	4b26      	ldr	r3, [pc, #152]	; (16ee8 <nrfx_usbd_ep_transfer+0xc0>)
   16e4e:	4f27      	ldr	r7, [pc, #156]	; (16eec <nrfx_usbd_ep_transfer+0xc4>)
   16e50:	681a      	ldr	r2, [r3, #0]
   16e52:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
   16e54:	4628      	mov	r0, r5
   16e56:	f004 f87b 	bl	1af50 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   16e5a:	43d2      	mvns	r2, r2
   16e5c:	b292      	uxth	r2, r2
   16e5e:	f04f 0901 	mov.w	r9, #1
   16e62:	4332      	orrs	r2, r6
   16e64:	fa09 f900 	lsl.w	r9, r9, r0
   16e68:	ea12 0f09 	tst.w	r2, r9
   16e6c:	d137      	bne.n	16ede <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   16e6e:	4628      	mov	r0, r5
   16e70:	f7ff fce4 	bl	1683c <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   16e74:	220c      	movs	r2, #12
   16e76:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
   16e78:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   16e7a:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
   16e7c:	d529      	bpl.n	16ed2 <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   16e7e:	4a1c      	ldr	r2, [pc, #112]	; (16ef0 <nrfx_usbd_ep_transfer+0xc8>)
   16e80:	6808      	ldr	r0, [r1, #0]
   16e82:	4414      	add	r4, r2
   16e84:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   16e88:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   16e8a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   16e8e:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   16e92:	d119      	bne.n	16ec8 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   16e94:	b9b2      	cbnz	r2, 16ec4 <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   16e96:	4a17      	ldr	r2, [pc, #92]	; (16ef4 <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   16e98:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
   16e9a:	c907      	ldmia	r1, {r0, r1, r2}
   16e9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
   16ea0:	2200      	movs	r2, #0
   16ea2:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   16ea4:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
   16ea6:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16ea8:	4b13      	ldr	r3, [pc, #76]	; (16ef8 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   16eaa:	4814      	ldr	r0, [pc, #80]	; (16efc <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   16eac:	ea46 0609 	orr.w	r6, r6, r9
   16eb0:	2280      	movs	r2, #128	; 0x80
   16eb2:	603e      	str	r6, [r7, #0]
   16eb4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   16eb8:	f388 8811 	msr	BASEPRI, r8
   16ebc:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   16ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   16ec4:	4a0e      	ldr	r2, [pc, #56]	; (16f00 <nrfx_usbd_ep_transfer+0xd8>)
   16ec6:	e7e7      	b.n	16e98 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   16ec8:	b90a      	cbnz	r2, 16ece <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   16eca:	4a0e      	ldr	r2, [pc, #56]	; (16f04 <nrfx_usbd_ep_transfer+0xdc>)
   16ecc:	e7e4      	b.n	16e98 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   16ece:	4a0e      	ldr	r2, [pc, #56]	; (16f08 <nrfx_usbd_ep_transfer+0xe0>)
   16ed0:	e7e2      	b.n	16e98 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   16ed2:	4a0e      	ldr	r2, [pc, #56]	; (16f0c <nrfx_usbd_ep_transfer+0xe4>)
   16ed4:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   16ed6:	4a0e      	ldr	r2, [pc, #56]	; (16f10 <nrfx_usbd_ep_transfer+0xe8>)
   16ed8:	e7de      	b.n	16e98 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
   16eda:	480e      	ldr	r0, [pc, #56]	; (16f14 <nrfx_usbd_ep_transfer+0xec>)
   16edc:	e7ec      	b.n	16eb8 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
   16ede:	480e      	ldr	r0, [pc, #56]	; (16f18 <nrfx_usbd_ep_transfer+0xf0>)
   16ee0:	e7ea      	b.n	16eb8 <nrfx_usbd_ep_transfer+0x90>
   16ee2:	bf00      	nop
   16ee4:	20001a02 	.word	0x20001a02
   16ee8:	20001820 	.word	0x20001820
   16eec:	200017b0 	.word	0x200017b0
   16ef0:	200017b4 	.word	0x200017b4
   16ef4:	0001af05 	.word	0x0001af05
   16ef8:	e000e100 	.word	0xe000e100
   16efc:	0bad0000 	.word	0x0bad0000
   16f00:	0001af27 	.word	0x0001af27
   16f04:	000169c1 	.word	0x000169c1
   16f08:	000169f9 	.word	0x000169f9
   16f0c:	20001744 	.word	0x20001744
   16f10:	0001aed7 	.word	0x0001aed7
   16f14:	0bad000a 	.word	0x0bad000a
   16f18:	0bad000b 	.word	0x0bad000b

00016f1c <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   16f1c:	f010 0f08 	tst.w	r0, #8
   16f20:	4b07      	ldr	r3, [pc, #28]	; (16f40 <nrfx_usbd_epout_size_get+0x24>)
   16f22:	d006      	beq.n	16f32 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   16f24:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   16f28:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   16f2c:	bf18      	it	ne
   16f2e:	2000      	movne	r0, #0
   16f30:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   16f32:	f000 000f 	and.w	r0, r0, #15
   16f36:	f500 7094 	add.w	r0, r0, #296	; 0x128
   16f3a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   16f3e:	4770      	bx	lr
   16f40:	40027000 	.word	0x40027000

00016f44 <usbd_dmareq_process>:
{
   16f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   16f48:	f8df 815c 	ldr.w	r8, [pc, #348]	; 170a8 <usbd_dmareq_process+0x164>
   16f4c:	f898 3000 	ldrb.w	r3, [r8]
{
   16f50:	b085      	sub	sp, #20
    if (!m_dma_pending)
   16f52:	2b00      	cmp	r3, #0
   16f54:	d16b      	bne.n	1702e <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   16f56:	f8df 9154 	ldr.w	r9, [pc, #340]	; 170ac <usbd_dmareq_process+0x168>
   16f5a:	4e55      	ldr	r6, [pc, #340]	; (170b0 <usbd_dmareq_process+0x16c>)
   16f5c:	f8d9 1000 	ldr.w	r1, [r9]
   16f60:	6833      	ldr	r3, [r6, #0]
   16f62:	4019      	ands	r1, r3
   16f64:	d063      	beq.n	1702e <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   16f66:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
   16f6a:	bf14      	ite	ne
   16f6c:	fa93 f1a3 	rbitne	r1, r3
   16f70:	fa91 f1a1 	rbiteq	r1, r1
   16f74:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   16f78:	290f      	cmp	r1, #15
   16f7a:	bf8a      	itet	hi
   16f7c:	f1a1 0410 	subhi.w	r4, r1, #16
   16f80:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
   16f84:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   16f86:	4620      	mov	r0, r4
   16f88:	f7ff fc58 	bl	1683c <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   16f8c:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
   16f90:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   16f94:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   16f98:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
   16f9c:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   16f9e:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   16fa2:	da47      	bge.n	17034 <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
   16fa4:	6803      	ldr	r3, [r0, #0]
   16fa6:	8982      	ldrh	r2, [r0, #12]
   16fa8:	6841      	ldr	r1, [r0, #4]
   16faa:	a802      	add	r0, sp, #8
   16fac:	4798      	blx	r3
                if (!continue_transfer)
   16fae:	b900      	cbnz	r0, 16fb2 <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
   16fb0:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   16fb2:	f003 ff87 	bl	1aec4 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   16fb6:	b118      	cbz	r0, 16fc0 <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   16fb8:	4b3e      	ldr	r3, [pc, #248]	; (170b4 <usbd_dmareq_process+0x170>)
   16fba:	2282      	movs	r2, #130	; 0x82
   16fbc:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   16fc0:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
   16fc2:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   16fc4:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
   16fc6:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
   16fca:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
   16fcc:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
   16fd0:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
   16fd2:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
   16fd6:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   16fd8:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   16fda:	f004 0008 	and.w	r0, r4, #8
   16fde:	9902      	ldr	r1, [sp, #8]
   16fe0:	4b34      	ldr	r3, [pc, #208]	; (170b4 <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   16fe2:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   16fe6:	da4f      	bge.n	17088 <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
   16fe8:	2800      	cmp	r0, #0
   16fea:	d045      	beq.n	17078 <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
   16fec:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   16ff0:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   16ff4:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   16ff6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   16ffa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16ffe:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   17002:	2201      	movs	r2, #1
   17004:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   17006:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   17008:	4a2b      	ldr	r2, [pc, #172]	; (170b8 <usbd_dmareq_process+0x174>)
   1700a:	4b2c      	ldr	r3, [pc, #176]	; (170bc <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1700c:	4929      	ldr	r1, [pc, #164]	; (170b4 <usbd_dmareq_process+0x170>)
   1700e:	ea13 032a 	ands.w	r3, r3, sl, asr #32
   17012:	bf38      	it	cc
   17014:	4613      	movcc	r3, r2
   17016:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1701a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1701e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   17022:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   17024:	b91a      	cbnz	r2, 1702e <usbd_dmareq_process+0xea>
   17026:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   1702a:	2a00      	cmp	r2, #0
   1702c:	d0f9      	beq.n	17022 <usbd_dmareq_process+0xde>
}
   1702e:	b005      	add	sp, #20
   17030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   17034:	4620      	mov	r0, r4
   17036:	f7ff ff71 	bl	16f1c <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   1703a:	89aa      	ldrh	r2, [r5, #12]
   1703c:	6869      	ldr	r1, [r5, #4]
   1703e:	f8d5 c000 	ldr.w	ip, [r5]
   17042:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   17044:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
   17046:	a802      	add	r0, sp, #8
   17048:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
   1704a:	9a02      	ldr	r2, [sp, #8]
   1704c:	2a00      	cmp	r2, #0
   1704e:	d0ae      	beq.n	16fae <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
   17050:	9a03      	ldr	r2, [sp, #12]
   17052:	4297      	cmp	r7, r2
   17054:	d9ab      	bls.n	16fae <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   17056:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   17058:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   1705a:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   1705c:	f7ff fd0c 	bl	16a78 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   17060:	2306      	movs	r3, #6
   17062:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   17066:	4b16      	ldr	r3, [pc, #88]	; (170c0 <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   17068:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   1706c:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   1706e:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   17072:	a801      	add	r0, sp, #4
   17074:	4798      	blx	r3
                    continue;
   17076:	e771      	b.n	16f5c <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
   17078:	2014      	movs	r0, #20
   1707a:	fb00 3304 	mla	r3, r0, r4, r3
   1707e:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   17082:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   17086:	e7b5      	b.n	16ff4 <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
   17088:	b128      	cbz	r0, 17096 <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
   1708a:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   1708e:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   17092:	2328      	movs	r3, #40	; 0x28
   17094:	e7af      	b.n	16ff6 <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
   17096:	2014      	movs	r0, #20
   17098:	fb00 3304 	mla	r3, r0, r4, r3
   1709c:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   170a0:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   170a4:	e7f5      	b.n	17092 <usbd_dmareq_process+0x14e>
   170a6:	bf00      	nop
   170a8:	20001a00 	.word	0x20001a00
   170ac:	200017b0 	.word	0x200017b0
   170b0:	20001820 	.word	0x20001820
   170b4:	40027000 	.word	0x40027000
   170b8:	0001dade 	.word	0x0001dade
   170bc:	0001dacc 	.word	0x0001dacc
   170c0:	20001944 	.word	0x20001944

000170c4 <ev_epdata_handler>:
{
   170c4:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   170c6:	4b0f      	ldr	r3, [pc, #60]	; (17104 <ev_epdata_handler+0x40>)
   170c8:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   170cc:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   170d0:	2501      	movs	r5, #1
    while (dataepstatus)
   170d2:	b91c      	cbnz	r4, 170dc <ev_epdata_handler+0x18>
}
   170d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   170d8:	f7ff bf34 	b.w	16f44 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   170dc:	fa94 f3a4 	rbit	r3, r4
   170e0:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   170e4:	2b0f      	cmp	r3, #15
   170e6:	bfc8      	it	gt
   170e8:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   170ec:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   170ee:	bfd4      	ite	le
   170f0:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   170f4:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   170f6:	fa05 f303 	lsl.w	r3, r5, r3
   170fa:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   170fe:	f7ff fce1 	bl	16ac4 <usbd_ep_data_handler>
   17102:	e7e6      	b.n	170d2 <ev_epdata_handler+0xe>
   17104:	40027000 	.word	0x40027000

00017108 <nrf_usbd_epout_dma_handler>:
{
   17108:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1710a:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   1710c:	f7ff fba4 	bl	16858 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   17110:	4620      	mov	r0, r4
   17112:	f7ff fb93 	bl	1683c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   17116:	7b83      	ldrb	r3, [r0, #14]
   17118:	2b03      	cmp	r3, #3
   1711a:	d10d      	bne.n	17138 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1711c:	4620      	mov	r0, r4
   1711e:	f003 ff17 	bl	1af50 <ep2bit>
   17122:	2301      	movs	r3, #1
   17124:	fa03 f000 	lsl.w	r0, r3, r0
   17128:	43c0      	mvns	r0, r0
   1712a:	f7ff fca5 	bl	16a78 <atomic_and.constprop.0.isra.0>
}
   1712e:	b003      	add	sp, #12
   17130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   17134:	f7ff bf06 	b.w	16f44 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   17138:	6805      	ldr	r5, [r0, #0]
   1713a:	2d00      	cmp	r5, #0
   1713c:	d1f7      	bne.n	1712e <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1713e:	4620      	mov	r0, r4
   17140:	f003 ff06 	bl	1af50 <ep2bit>
   17144:	2301      	movs	r3, #1
   17146:	fa03 f000 	lsl.w	r0, r3, r0
   1714a:	43c0      	mvns	r0, r0
   1714c:	f7ff fc94 	bl	16a78 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   17150:	2306      	movs	r3, #6
   17152:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   17156:	4b04      	ldr	r3, [pc, #16]	; (17168 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   17158:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   1715c:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1715e:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   17162:	a801      	add	r0, sp, #4
   17164:	4798      	blx	r3
   17166:	e7e2      	b.n	1712e <nrf_usbd_epout_dma_handler+0x26>
   17168:	20001944 	.word	0x20001944

0001716c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   1716c:	4b02      	ldr	r3, [pc, #8]	; (17178 <nrfx_usbd_ep_stall+0xc>)
   1716e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   17172:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   17176:	4770      	bx	lr
   17178:	40027000 	.word	0x40027000

0001717c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   1717c:	0702      	lsls	r2, r0, #28
   1717e:	d413      	bmi.n	171a8 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   17180:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   17184:	f010 0f80 	tst.w	r0, #128	; 0x80
   17188:	4a08      	ldr	r2, [pc, #32]	; (171ac <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   1718a:	bf0b      	itete	eq
   1718c:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   17190:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   17194:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   17198:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   1719c:	bf08      	it	eq
   1719e:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   171a0:	1e43      	subs	r3, r0, #1
   171a2:	4258      	negs	r0, r3
   171a4:	4158      	adcs	r0, r3
   171a6:	4770      	bx	lr
        return false;
   171a8:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   171aa:	4770      	bx	lr
   171ac:	40027000 	.word	0x40027000

000171b0 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   171b0:	4b04      	ldr	r3, [pc, #16]	; (171c4 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   171b2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   171b6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   171ba:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   171be:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   171c2:	4770      	bx	lr
   171c4:	40027000 	.word	0x40027000

000171c8 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   171c8:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   171ca:	2208      	movs	r2, #8
   171cc:	2100      	movs	r1, #0
{
   171ce:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   171d0:	f002 fef2 	bl	19fb8 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   171d4:	4b0e      	ldr	r3, [pc, #56]	; (17210 <nrfx_usbd_setup_get+0x48>)
   171d6:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   171da:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   171dc:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   171e0:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   171e2:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   171e6:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   171ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   171ee:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   171f0:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   171f4:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   171f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   171fc:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   171fe:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   17202:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   17206:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   1720a:	80e3      	strh	r3, [r4, #6]
}
   1720c:	bd10      	pop	{r4, pc}
   1720e:	bf00      	nop
   17210:	40027000 	.word	0x40027000

00017214 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   17214:	4b02      	ldr	r3, [pc, #8]	; (17220 <nrfx_usbd_setup_data_clear+0xc>)
   17216:	2201      	movs	r2, #1
   17218:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1721a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   1721c:	4770      	bx	lr
   1721e:	bf00      	nop
   17220:	40027000 	.word	0x40027000

00017224 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   17224:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   17226:	f7ff fb17 	bl	16858 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1722a:	4b10      	ldr	r3, [pc, #64]	; (1726c <ev_dma_epout0_handler+0x48>)
   1722c:	7b9a      	ldrb	r2, [r3, #14]
   1722e:	2a03      	cmp	r2, #3
   17230:	d106      	bne.n	17240 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   17232:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   17236:	b002      	add	sp, #8
   17238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1723c:	f7ff bc1c 	b.w	16a78 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   17240:	681c      	ldr	r4, [r3, #0]
   17242:	b974      	cbnz	r4, 17262 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   17244:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   17248:	f7ff fc16 	bl	16a78 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1724c:	2306      	movs	r3, #6
   1724e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   17252:	4b07      	ldr	r3, [pc, #28]	; (17270 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   17254:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   17258:	681b      	ldr	r3, [r3, #0]
   1725a:	a801      	add	r0, sp, #4
   1725c:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   1725e:	b002      	add	sp, #8
   17260:	bd10      	pop	{r4, pc}
   17262:	b002      	add	sp, #8
   17264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   17268:	f7ff bfd4 	b.w	17214 <nrfx_usbd_setup_data_clear>
   1726c:	20001824 	.word	0x20001824
   17270:	20001944 	.word	0x20001944

00017274 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   17274:	4b02      	ldr	r3, [pc, #8]	; (17280 <nrfx_usbd_setup_clear+0xc>)
   17276:	2201      	movs	r2, #1
   17278:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1727a:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   1727c:	4770      	bx	lr
   1727e:	bf00      	nop
   17280:	40027000 	.word	0x40027000

00017284 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   17284:	4b02      	ldr	r3, [pc, #8]	; (17290 <nrfx_usbd_setup_stall+0xc>)
   17286:	2201      	movs	r2, #1
   17288:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1728a:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   1728c:	4770      	bx	lr
   1728e:	bf00      	nop
   17290:	40027000 	.word	0x40027000

00017294 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   17294:	4b01      	ldr	r3, [pc, #4]	; (1729c <nrfx_usbd_last_setup_dir_get+0x8>)
   17296:	7818      	ldrb	r0, [r3, #0]
   17298:	4770      	bx	lr
   1729a:	bf00      	nop
   1729c:	20001a02 	.word	0x20001a02

000172a0 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   172a0:	b510      	push	{r4, lr}
   172a2:	4602      	mov	r2, r0
	__asm__ volatile(
   172a4:	f04f 0320 	mov.w	r3, #32
   172a8:	f3ef 8411 	mrs	r4, BASEPRI
   172ac:	f383 8812 	msr	BASEPRI_MAX, r3
   172b0:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   172b4:	f003 fe4c 	bl	1af50 <ep2bit>
   172b8:	490d      	ldr	r1, [pc, #52]	; (172f0 <nrfx_usbd_transfer_out_drop+0x50>)
   172ba:	2301      	movs	r3, #1
   172bc:	fa03 f000 	lsl.w	r0, r3, r0
   172c0:	680b      	ldr	r3, [r1, #0]
   172c2:	ea23 0300 	bic.w	r3, r3, r0
   172c6:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   172c8:	f012 0108 	ands.w	r1, r2, #8
   172cc:	d10a      	bne.n	172e4 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   172ce:	f002 030f 	and.w	r3, r2, #15
   172d2:	009b      	lsls	r3, r3, #2
   172d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   172d8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   172dc:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   172e0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   172e4:	f384 8811 	msr	BASEPRI, r4
   172e8:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   172ec:	bd10      	pop	{r4, pc}
   172ee:	bf00      	nop
   172f0:	20001820 	.word	0x20001820

000172f4 <usbd_ep_abort>:
{
   172f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   172f6:	4601      	mov	r1, r0
	__asm__ volatile(
   172f8:	f04f 0320 	mov.w	r3, #32
   172fc:	f3ef 8511 	mrs	r5, BASEPRI
   17300:	f383 8812 	msr	BASEPRI_MAX, r3
   17304:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   17308:	f7ff fa98 	bl	1683c <ep_state_access>
   1730c:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1730e:	4608      	mov	r0, r1
   17310:	f003 fe1e 	bl	1af50 <ep2bit>
   17314:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   17316:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1731a:	fa02 f200 	lsl.w	r2, r2, r0
   1731e:	482e      	ldr	r0, [pc, #184]	; (173d8 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   17320:	d118      	bne.n	17354 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   17322:	6803      	ldr	r3, [r0, #0]
   17324:	ea32 0403 	bics.w	r4, r2, r3
   17328:	d00a      	beq.n	17340 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   1732a:	4608      	mov	r0, r1
   1732c:	f7ff ffb8 	bl	172a0 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   17330:	2303      	movs	r3, #3
   17332:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   17334:	f385 8811 	msr	BASEPRI, r5
   17338:	f3bf 8f6f 	isb	sy
}
   1733c:	b003      	add	sp, #12
   1733e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   17340:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
   17344:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   17346:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   17348:	4b24      	ldr	r3, [pc, #144]	; (173dc <usbd_ep_abort+0xe8>)
   1734a:	6818      	ldr	r0, [r3, #0]
   1734c:	ea20 0002 	bic.w	r0, r0, r2
   17350:	6018      	str	r0, [r3, #0]
   17352:	e7ed      	b.n	17330 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   17354:	070b      	lsls	r3, r1, #28
   17356:	d415      	bmi.n	17384 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
   17358:	2980      	cmp	r1, #128	; 0x80
   1735a:	4b21      	ldr	r3, [pc, #132]	; (173e0 <usbd_ep_abort+0xec>)
   1735c:	d02f      	beq.n	173be <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   1735e:	f001 040f 	and.w	r4, r1, #15
   17362:	f204 34da 	addw	r4, r4, #986	; 0x3da
   17366:	0064      	lsls	r4, r4, #1
   17368:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1736c:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   17370:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   17374:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   17376:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1737a:	433c      	orrs	r4, r7
   1737c:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   17380:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   17384:	4f15      	ldr	r7, [pc, #84]	; (173dc <usbd_ep_abort+0xe8>)
   17386:	6804      	ldr	r4, [r0, #0]
   17388:	683b      	ldr	r3, [r7, #0]
   1738a:	ea64 0c03 	orn	ip, r4, r3
   1738e:	ea1c 0f02 	tst.w	ip, r2
   17392:	d0cf      	beq.n	17334 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   17394:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   17396:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   1739a:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   1739c:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1739e:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   173a0:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   173a2:	2303      	movs	r3, #3
   173a4:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   173a6:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   173aa:	4b0e      	ldr	r3, [pc, #56]	; (173e4 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   173ac:	f88d 1006 	strb.w	r1, [sp, #6]
   173b0:	2206      	movs	r2, #6
            m_event_handler(&evt);
   173b2:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   173b4:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   173b8:	a801      	add	r0, sp, #4
   173ba:	4798      	blx	r3
   173bc:	e7ba      	b.n	17334 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   173be:	f240 74b4 	movw	r4, #1972	; 0x7b4
   173c2:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   173c6:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   173ca:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   173ce:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   173d0:	f044 0404 	orr.w	r4, r4, #4
   173d4:	e7d1      	b.n	1737a <usbd_ep_abort+0x86>
   173d6:	bf00      	nop
   173d8:	200017b0 	.word	0x200017b0
   173dc:	20001820 	.word	0x20001820
   173e0:	40027000 	.word	0x40027000
   173e4:	20001944 	.word	0x20001944

000173e8 <ev_setup_handler>:
{
   173e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   173ea:	4b17      	ldr	r3, [pc, #92]	; (17448 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   173ec:	4c17      	ldr	r4, [pc, #92]	; (1744c <ev_setup_handler+0x64>)
   173ee:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   173f2:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   173f4:	4e16      	ldr	r6, [pc, #88]	; (17450 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   173f6:	43da      	mvns	r2, r3
   173f8:	4b16      	ldr	r3, [pc, #88]	; (17454 <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
   173fa:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   173fc:	681b      	ldr	r3, [r3, #0]
   173fe:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   17400:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   17402:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   17404:	f003 fda4 	bl	1af50 <ep2bit>
   17408:	2301      	movs	r3, #1
   1740a:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1740c:	4213      	tst	r3, r2
   1740e:	d002      	beq.n	17416 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   17410:	4608      	mov	r0, r1
   17412:	f7ff ff6f 	bl	172f4 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   17416:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
   1741a:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   1741e:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   17420:	f7ff fb2a 	bl	16a78 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   17424:	6823      	ldr	r3, [r4, #0]
   17426:	f043 0301 	orr.w	r3, r3, #1
   1742a:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   1742c:	2300      	movs	r3, #0
   1742e:	f8ad 3005 	strh.w	r3, [sp, #5]
   17432:	f88d 3007 	strb.w	r3, [sp, #7]
   17436:	2305      	movs	r3, #5
   17438:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   1743c:	4b06      	ldr	r3, [pc, #24]	; (17458 <ev_setup_handler+0x70>)
   1743e:	a801      	add	r0, sp, #4
   17440:	681b      	ldr	r3, [r3, #0]
   17442:	4798      	blx	r3
}
   17444:	b002      	add	sp, #8
   17446:	bd70      	pop	{r4, r5, r6, pc}
   17448:	40027000 	.word	0x40027000
   1744c:	20001820 	.word	0x20001820
   17450:	20001a02 	.word	0x20001a02
   17454:	200017b0 	.word	0x200017b0
   17458:	20001944 	.word	0x20001944

0001745c <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   1745c:	4b1b      	ldr	r3, [pc, #108]	; (174cc <nrfx_usbd_irq_handler+0x70>)
   1745e:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   17462:	2300      	movs	r3, #0
{
   17464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
   17468:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   1746a:	461d      	mov	r5, r3
    while (to_process)
   1746c:	b970      	cbnz	r0, 1748c <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   1746e:	4f18      	ldr	r7, [pc, #96]	; (174d0 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   17470:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   17474:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   17478:	f04f 0801 	mov.w	r8, #1
    while (active)
   1747c:	b9bc      	cbnz	r4, 174ae <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   1747e:	f7ff fd61 	bl	16f44 <usbd_dmareq_process>
    if (setup_active)
   17482:	b306      	cbz	r6, 174c6 <nrfx_usbd_irq_handler+0x6a>
}
   17484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   17488:	f7ff bfae 	b.w	173e8 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   1748c:	fa90 f2a0 	rbit	r2, r0
   17490:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   17494:	490f      	ldr	r1, [pc, #60]	; (174d4 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   17496:	0096      	lsls	r6, r2, #2
   17498:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   1749a:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1749e:	680e      	ldr	r6, [r1, #0]
    if (ret)
   174a0:	b116      	cbz	r6, 174a8 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   174a2:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   174a4:	6809      	ldr	r1, [r1, #0]
   174a6:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   174a8:	ea20 0002 	bic.w	r0, r0, r2
   174ac:	e7de      	b.n	1746c <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   174ae:	fa94 f5a4 	rbit	r5, r4
   174b2:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   174b6:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   174ba:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   174be:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   174c0:	ea24 0405 	bic.w	r4, r4, r5
   174c4:	e7da      	b.n	1747c <nrfx_usbd_irq_handler+0x20>
}
   174c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   174ca:	bf00      	nop
   174cc:	40027000 	.word	0x40027000
   174d0:	0001da50 	.word	0x0001da50
   174d4:	40027100 	.word	0x40027100

000174d8 <usbd_ep_abort_all>:
{
   174d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   174da:	4e11      	ldr	r6, [pc, #68]	; (17520 <usbd_ep_abort_all+0x48>)
   174dc:	4b11      	ldr	r3, [pc, #68]	; (17524 <usbd_ep_abort_all+0x4c>)
   174de:	6834      	ldr	r4, [r6, #0]
   174e0:	681b      	ldr	r3, [r3, #0]
   174e2:	0c24      	lsrs	r4, r4, #16
   174e4:	0424      	lsls	r4, r4, #16
   174e6:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   174e8:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   174ea:	b91c      	cbnz	r4, 174f4 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   174ec:	f240 13ff 	movw	r3, #511	; 0x1ff
   174f0:	6033      	str	r3, [r6, #0]
}
   174f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   174f4:	fa94 f5a4 	rbit	r5, r4
   174f8:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   174fc:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   174fe:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   17500:	bfc6      	itte	gt
   17502:	f1a5 0010 	subgt.w	r0, r5, #16
   17506:	b2c0      	uxtbgt	r0, r0
   17508:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   1750c:	0703      	lsls	r3, r0, #28
   1750e:	d401      	bmi.n	17514 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   17510:	f7ff fef0 	bl	172f4 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   17514:	fa07 f505 	lsl.w	r5, r7, r5
   17518:	ea24 0405 	bic.w	r4, r4, r5
   1751c:	e7e5      	b.n	174ea <usbd_ep_abort_all+0x12>
   1751e:	bf00      	nop
   17520:	20001820 	.word	0x20001820
   17524:	200017b0 	.word	0x200017b0

00017528 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17528:	4b0c      	ldr	r3, [pc, #48]	; (1755c <nrfx_usbd_stop+0x34>)
   1752a:	2280      	movs	r2, #128	; 0x80
{
   1752c:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   1752e:	2027      	movs	r0, #39	; 0x27
   17530:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   17534:	f7fb fadc 	bl	12af0 <arch_irq_is_enabled>
   17538:	b170      	cbz	r0, 17558 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   1753a:	4c09      	ldr	r4, [pc, #36]	; (17560 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   1753c:	f7ff ffcc 	bl	174d8 <usbd_ep_abort_all>
   17540:	2300      	movs	r3, #0
   17542:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   17546:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   17548:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1754c:	f7fb fabc 	bl	12ac8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   17550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17554:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   17558:	bd10      	pop	{r4, pc}
   1755a:	bf00      	nop
   1755c:	e000e100 	.word	0xe000e100
   17560:	40027000 	.word	0x40027000

00017564 <nrfx_usbd_disable>:
{
   17564:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   17566:	f7ff ffdf 	bl	17528 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   1756a:	4b08      	ldr	r3, [pc, #32]	; (1758c <nrfx_usbd_disable+0x28>)
   1756c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   17570:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   17574:	2200      	movs	r2, #0
   17576:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   1757a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   1757e:	f7ff f96b 	bl	16858 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   17582:	4b03      	ldr	r3, [pc, #12]	; (17590 <nrfx_usbd_disable+0x2c>)
   17584:	2201      	movs	r2, #1
   17586:	701a      	strb	r2, [r3, #0]
}
   17588:	bd08      	pop	{r3, pc}
   1758a:	bf00      	nop
   1758c:	40027000 	.word	0x40027000
   17590:	20001a01 	.word	0x20001a01

00017594 <nrfx_usbd_suspend>:
{
   17594:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   17596:	f04f 0320 	mov.w	r3, #32
   1759a:	f3ef 8511 	mrs	r5, BASEPRI
   1759e:	f383 8812 	msr	BASEPRI_MAX, r3
   175a2:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   175a6:	4b11      	ldr	r3, [pc, #68]	; (175ec <nrfx_usbd_suspend+0x58>)
   175a8:	781b      	ldrb	r3, [r3, #0]
   175aa:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   175ae:	b933      	cbnz	r3, 175be <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
   175b0:	2400      	movs	r4, #0
	__asm__ volatile(
   175b2:	f385 8811 	msr	BASEPRI, r5
   175b6:	f3bf 8f6f 	isb	sy
}
   175ba:	4620      	mov	r0, r4
   175bc:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   175be:	f7ff ff8b 	bl	174d8 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   175c2:	4b0b      	ldr	r3, [pc, #44]	; (175f0 <nrfx_usbd_suspend+0x5c>)
   175c4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   175c8:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   175cc:	d1f0      	bne.n	175b0 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   175ce:	2101      	movs	r1, #1
   175d0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   175d4:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   175d8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   175dc:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   175de:	bf42      	ittt	mi
   175e0:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   175e4:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   175e8:	4614      	movmi	r4, r2
}
   175ea:	e7e2      	b.n	175b2 <nrfx_usbd_suspend+0x1e>
   175ec:	200019ff 	.word	0x200019ff
   175f0:	40027000 	.word	0x40027000

000175f4 <nrfx_usbd_ep_disable>:
{
   175f4:	b510      	push	{r4, lr}
   175f6:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   175f8:	f7ff fe7c 	bl	172f4 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   175fc:	4a10      	ldr	r2, [pc, #64]	; (17640 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   175fe:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   17602:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   17606:	f04f 0301 	mov.w	r3, #1
   1760a:	bf14      	ite	ne
   1760c:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   17610:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   17614:	fa03 f300 	lsl.w	r3, r3, r0
   17618:	ea6f 0303 	mvn.w	r3, r3
   1761c:	bf15      	itete	ne
   1761e:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   17620:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   17622:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   17626:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   1762a:	bf14      	ite	ne
   1762c:	4b05      	ldrne	r3, [pc, #20]	; (17644 <nrfx_usbd_ep_disable+0x50>)
   1762e:	4b06      	ldreq	r3, [pc, #24]	; (17648 <nrfx_usbd_ep_disable+0x54>)
   17630:	5c1a      	ldrb	r2, [r3, r0]
   17632:	2301      	movs	r3, #1
   17634:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   17636:	4a02      	ldr	r2, [pc, #8]	; (17640 <nrfx_usbd_ep_disable+0x4c>)
   17638:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1763c:	bd10      	pop	{r4, pc}
   1763e:	bf00      	nop
   17640:	40027000 	.word	0x40027000
   17644:	0001dbf4 	.word	0x0001dbf4
   17648:	0001dbfd 	.word	0x0001dbfd

0001764c <nrfx_usbd_ep_enable>:
{
   1764c:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   1764e:	b243      	sxtb	r3, r0
   17650:	2b00      	cmp	r3, #0
   17652:	4b23      	ldr	r3, [pc, #140]	; (176e0 <nrfx_usbd_ep_enable+0x94>)
   17654:	4a23      	ldr	r2, [pc, #140]	; (176e4 <nrfx_usbd_ep_enable+0x98>)
   17656:	bfa8      	it	ge
   17658:	461a      	movge	r2, r3
   1765a:	f000 030f 	and.w	r3, r0, #15
   1765e:	f04f 0401 	mov.w	r4, #1
   17662:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
   17664:	4a20      	ldr	r2, [pc, #128]	; (176e8 <nrfx_usbd_ep_enable+0x9c>)
   17666:	fa04 f101 	lsl.w	r1, r4, r1
{
   1766a:	4605      	mov	r5, r0
   1766c:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   17670:	da0c      	bge.n	1768c <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   17672:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   17676:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   17678:	07c8      	lsls	r0, r1, #31
   1767a:	d406      	bmi.n	1768a <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
   1767c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   17680:	fa04 f303 	lsl.w	r3, r4, r3
   17684:	4303      	orrs	r3, r0
   17686:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   1768a:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   1768c:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
   17690:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   17692:	07c9      	lsls	r1, r1, #31
   17694:	d4f9      	bmi.n	1768a <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
   17696:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
   1769a:	fa04 f103 	lsl.w	r1, r4, r3
   1769e:	4331      	orrs	r1, r6
   176a0:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   176a4:	2b00      	cmp	r3, #0
   176a6:	d0f0      	beq.n	1768a <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
   176a8:	0703      	lsls	r3, r0, #28
   176aa:	d4ee      	bmi.n	1768a <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
   176ac:	f04f 0320 	mov.w	r3, #32
   176b0:	f3ef 8611 	mrs	r6, BASEPRI
   176b4:	f383 8812 	msr	BASEPRI_MAX, r3
   176b8:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   176bc:	f7ff fdf0 	bl	172a0 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   176c0:	4628      	mov	r0, r5
   176c2:	f003 fc45 	bl	1af50 <ep2bit>
   176c6:	4a09      	ldr	r2, [pc, #36]	; (176ec <nrfx_usbd_ep_enable+0xa0>)
   176c8:	6813      	ldr	r3, [r2, #0]
   176ca:	fa04 f000 	lsl.w	r0, r4, r0
   176ce:	ea23 0000 	bic.w	r0, r3, r0
   176d2:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
   176d4:	f386 8811 	msr	BASEPRI, r6
   176d8:	f3bf 8f6f 	isb	sy
}
   176dc:	e7d5      	b.n	1768a <nrfx_usbd_ep_enable+0x3e>
   176de:	bf00      	nop
   176e0:	0001dbfd 	.word	0x0001dbfd
   176e4:	0001dbf4 	.word	0x0001dbf4
   176e8:	40027000 	.word	0x40027000
   176ec:	200017b0 	.word	0x200017b0

000176f0 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   176f0:	0603      	lsls	r3, r0, #24
{
   176f2:	b510      	push	{r4, lr}
   176f4:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   176f6:	d405      	bmi.n	17704 <nrfx_usbd_ep_stall_clear+0x14>
   176f8:	f7ff fd40 	bl	1717c <nrfx_usbd_ep_stall_check>
   176fc:	b110      	cbz	r0, 17704 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   176fe:	4620      	mov	r0, r4
   17700:	f7ff fdce 	bl	172a0 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   17704:	4b01      	ldr	r3, [pc, #4]	; (1770c <nrfx_usbd_ep_stall_clear+0x1c>)
   17706:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   1770a:	bd10      	pop	{r4, pc}
   1770c:	40027000 	.word	0x40027000

00017710 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   17710:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   17712:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   17716:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   17718:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1771a:	6002      	str	r2, [r0, #0]
}
   1771c:	4802      	ldr	r0, [pc, #8]	; (17728 <nrf_gpio_pin_port_decode+0x18>)
   1771e:	bf18      	it	ne
   17720:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   17724:	4770      	bx	lr
   17726:	bf00      	nop
   17728:	50000300 	.word	0x50000300

0001772c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   1772c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1772e:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   17730:	f003 fc7b 	bl	1b02a <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   17734:	4608      	mov	r0, r1
   17736:	f003 fc78 	bl	1b02a <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1773a:	a801      	add	r0, sp, #4
   1773c:	9601      	str	r6, [sp, #4]
   1773e:	f7ff ffe7 	bl	17710 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   17742:	9b01      	ldr	r3, [sp, #4]
   17744:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
   17748:	460c      	mov	r4, r1
   1774a:	f240 610d 	movw	r1, #1549	; 0x60d
   1774e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17752:	a801      	add	r0, sp, #4
   17754:	9401      	str	r4, [sp, #4]
   17756:	f7ff ffdb 	bl	17710 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1775a:	9b01      	ldr	r3, [sp, #4]
   1775c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   17760:	2509      	movs	r5, #9
   17762:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
   17766:	2004      	movs	r0, #4
   17768:	f003 fa94 	bl	1ac94 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1776c:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1776e:	a801      	add	r0, sp, #4
   17770:	9401      	str	r4, [sp, #4]
   17772:	f7ff ffcd 	bl	17710 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   17776:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   17778:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1777c:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   1777e:	07db      	lsls	r3, r3, #31
   17780:	d415      	bmi.n	177ae <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17782:	a801      	add	r0, sp, #4
   17784:	9601      	str	r6, [sp, #4]
   17786:	f7ff ffc3 	bl	17710 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1778a:	9b01      	ldr	r3, [sp, #4]
   1778c:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   17790:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   17794:	2004      	movs	r0, #4
   17796:	f003 fa7d 	bl	1ac94 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   1779a:	4630      	mov	r0, r6
   1779c:	f003 fc45 	bl	1b02a <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
   177a0:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
   177a2:	2004      	movs	r0, #4
   177a4:	f003 fa76 	bl	1ac94 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   177a8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   177ac:	d1df      	bne.n	1776e <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   177ae:	a801      	add	r0, sp, #4
   177b0:	9401      	str	r4, [sp, #4]
   177b2:	f7ff ffad 	bl	17710 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   177b6:	9a01      	ldr	r2, [sp, #4]
   177b8:	2301      	movs	r3, #1
   177ba:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   177bc:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   177c0:	2004      	movs	r0, #4
   177c2:	f003 fa67 	bl	1ac94 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   177c6:	4620      	mov	r0, r4
   177c8:	f003 fc2f 	bl	1b02a <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   177cc:	2004      	movs	r0, #4
   177ce:	f003 fa61 	bl	1ac94 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   177d2:	a801      	add	r0, sp, #4
   177d4:	9401      	str	r4, [sp, #4]
   177d6:	f7ff ff9b 	bl	17710 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   177da:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   177dc:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   177e0:	4803      	ldr	r0, [pc, #12]	; (177f0 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   177e2:	40d3      	lsrs	r3, r2
   177e4:	f003 0301 	and.w	r3, r3, #1
   177e8:	1ac0      	subs	r0, r0, r3
   177ea:	b003      	add	sp, #12
   177ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   177ee:	bf00      	nop
   177f0:	0bad0001 	.word	0x0bad0001

000177f4 <VL53L0X_SetDeviceMode>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
   177f4:	2915      	cmp	r1, #21
   177f6:	d807      	bhi.n	17808 <VL53L0X_SetDeviceMode+0x14>
   177f8:	4b05      	ldr	r3, [pc, #20]	; (17810 <VL53L0X_SetDeviceMode+0x1c>)
   177fa:	2201      	movs	r2, #1
   177fc:	408a      	lsls	r2, r1
   177fe:	4013      	ands	r3, r2
   17800:	b113      	cbz	r3, 17808 <VL53L0X_SetDeviceMode+0x14>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
   17802:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
   17804:	2000      	movs	r0, #0
		break;
   17806:	4770      	bx	lr
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
   17808:	f06f 0007 	mvn.w	r0, #7
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
   1780c:	4770      	bx	lr
   1780e:	bf00      	nop
   17810:	0030000b 	.word	0x0030000b

00017814 <VL53L0X_DataInit>:
{
   17814:	b5f0      	push	{r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
   17816:	2200      	movs	r2, #0
{
   17818:	4605      	mov	r5, r0
   1781a:	b093      	sub	sp, #76	; 0x4c
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
   1781c:	2188      	movs	r1, #136	; 0x88
   1781e:	f002 fead 	bl	1a57c <VL53L0X_WrByte>
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
   17822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17826:	f8a5 2152 	strh.w	r2, [r5, #338]	; 0x152
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
   1782a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1782e:	f8a5 2154 	strh.w	r2, [r5, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
   17832:	4a4c      	ldr	r2, [pc, #304]	; (17964 <VL53L0X_DataInit+0x150>)
   17834:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
   17838:	2300      	movs	r3, #0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
   1783a:	4a4b      	ldr	r2, [pc, #300]	; (17968 <VL53L0X_DataInit+0x154>)
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
   1783c:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
   17840:	f8c5 20d4 	str.w	r2, [r5, #212]	; 0xd4
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
   17844:	622b      	str	r3, [r5, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
   17846:	a902      	add	r1, sp, #8
   17848:	4628      	mov	r0, r5
   1784a:	f003 fd73 	bl	1b334 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
   1784e:	4604      	mov	r4, r0
   17850:	b970      	cbnz	r0, 17870 <VL53L0X_DataInit+0x5c>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
   17852:	f8ad 0008 	strh.w	r0, [sp, #8]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
   17856:	ae02      	add	r6, sp, #8
   17858:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1785a:	f105 0710 	add.w	r7, r5, #16
   1785e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   17860:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   17862:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   17864:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   17866:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   17868:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1786c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
   17870:	4b3e      	ldr	r3, [pc, #248]	; (1796c <VL53L0X_DataInit+0x158>)
   17872:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
   17876:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
   1787a:	2601      	movs	r6, #1
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
   1787c:	f8a5 3138 	strh.w	r3, [r5, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
   17880:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   17884:	f8a5 313c 	strh.w	r3, [r5, #316]	; 0x13c
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
   17888:	4632      	mov	r2, r6
   1788a:	2180      	movs	r1, #128	; 0x80
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
   1788c:	f885 6150 	strb.w	r6, [r5, #336]	; 0x150
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
   17890:	4628      	mov	r0, r5
   17892:	f002 fe73 	bl	1a57c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   17896:	4632      	mov	r2, r6
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
   17898:	4607      	mov	r7, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1789a:	21ff      	movs	r1, #255	; 0xff
   1789c:	4628      	mov	r0, r5
   1789e:	f002 fe6d 	bl	1a57c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   178a2:	2200      	movs	r2, #0
   178a4:	4611      	mov	r1, r2
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   178a6:	4307      	orrs	r7, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   178a8:	4628      	mov	r0, r5
   178aa:	f002 fe67 	bl	1a57c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   178ae:	433c      	orrs	r4, r7
   178b0:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   178b2:	4304      	orrs	r4, r0
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
   178b4:	f10d 0207 	add.w	r2, sp, #7
   178b8:	2191      	movs	r1, #145	; 0x91
   178ba:	4628      	mov	r0, r5
   178bc:	f002 fe8b 	bl	1a5d6 <VL53L0X_RdByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   178c0:	b264      	sxtb	r4, r4
	PALDevDataSet(Dev, StopVariable, StopVariable);
   178c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   178c6:	f885 313a 	strb.w	r3, [r5, #314]	; 0x13a
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
   178ca:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
   178cc:	4632      	mov	r2, r6
   178ce:	2100      	movs	r1, #0
   178d0:	4628      	mov	r0, r5
   178d2:	f002 fe53 	bl	1a57c <VL53L0X_WrByte>
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
   178d6:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
   178d8:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   178da:	2200      	movs	r2, #0
   178dc:	21ff      	movs	r1, #255	; 0xff
   178de:	4628      	mov	r0, r5
   178e0:	f002 fe4c 	bl	1a57c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
   178e4:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   178e6:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
   178e8:	2200      	movs	r2, #0
   178ea:	2180      	movs	r1, #128	; 0x80
   178ec:	4628      	mov	r0, r5
   178ee:	f002 fe45 	bl	1a57c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   178f2:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
   178f4:	4320      	orrs	r0, r4
   178f6:	b240      	sxtb	r0, r0
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
   178f8:	2400      	movs	r4, #0
		if (Status == VL53L0X_ERROR_NONE)
   178fa:	bb88      	cbnz	r0, 17960 <VL53L0X_DataInit+0x14c>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
   178fc:	b2a1      	uxth	r1, r4
   178fe:	2201      	movs	r2, #1
   17900:	4628      	mov	r0, r5
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
   17902:	3401      	adds	r4, #1
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
   17904:	f003 fc56 	bl	1b1b4 <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
   17908:	2c06      	cmp	r4, #6
   1790a:	d1f6      	bne.n	178fa <VL53L0X_DataInit+0xe6>
	if (Status == VL53L0X_ERROR_NONE)
   1790c:	bb40      	cbnz	r0, 17960 <VL53L0X_DataInit+0x14c>
			break;

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
   1790e:	4604      	mov	r4, r0
   17910:	8568      	strh	r0, [r5, #42]	; 0x2a
		Status = VL53L0X_SetLimitCheckEnable(Dev,
   17912:	4602      	mov	r2, r0
   17914:	2104      	movs	r1, #4
   17916:	4628      	mov	r0, r5
   17918:	f003 fc4c 	bl	1b1b4 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
   1791c:	bb00      	cbnz	r0, 17960 <VL53L0X_DataInit+0x14c>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
   1791e:	4602      	mov	r2, r0
   17920:	2105      	movs	r1, #5
   17922:	4628      	mov	r0, r5
   17924:	f003 fc46 	bl	1b1b4 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
   17928:	b9d0      	cbnz	r0, 17960 <VL53L0X_DataInit+0x14c>
	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
   1792a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
   1792e:	636b      	str	r3, [r5, #52]	; 0x34
		Status = VL53L0X_SetLimitCheckValue(Dev,
   17930:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   17934:	2101      	movs	r1, #1
   17936:	4628      	mov	r0, r5
   17938:	f003 fc87 	bl	1b24a <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
   1793c:	b980      	cbnz	r0, 17960 <VL53L0X_DataInit+0x14c>
	if (Temp8 == 0) { /* disabled write only internal value */
   1793e:	f44f 130c 	mov.w	r3, #2293760	; 0x230000
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
   17942:	22ff      	movs	r2, #255	; 0xff
   17944:	e9c5 300f 	strd	r3, r0, [r5, #60]	; 0x3c
   17948:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
   1794c:	2101      	movs	r1, #1
   1794e:	4628      	mov	r0, r5
   17950:	f002 fe14 	bl	1a57c <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
   17954:	2301      	movs	r3, #1
   17956:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
   1795a:	b908      	cbnz	r0, 17960 <VL53L0X_DataInit+0x14c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
   1795c:	f885 4115 	strb.w	r4, [r5, #277]	; 0x115
}
   17960:	b013      	add	sp, #76	; 0x4c
   17962:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17964:	00016b85 	.word	0x00016b85
   17968:	000970a4 	.word	0x000970a4
   1796c:	03840064 	.word	0x03840064

00017970 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
   17970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17972:	4617      	mov	r7, r2
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
   17974:	210e      	movs	r1, #14
   17976:	f10d 0206 	add.w	r2, sp, #6
{
   1797a:	461d      	mov	r5, r3
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
   1797c:	4c0b      	ldr	r4, [pc, #44]	; (179ac <VL53L0X_GetInterruptThresholds+0x3c>)
{
   1797e:	4606      	mov	r6, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
   17980:	f002 fe65 	bl	1a64e <VL53L0X_RdWord>
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
   17984:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   17988:	ea04 4343 	and.w	r3, r4, r3, lsl #17
   1798c:	603b      	str	r3, [r7, #0]

	if (Status == VL53L0X_ERROR_NONE) {
   1798e:	b950      	cbnz	r0, 179a6 <VL53L0X_GetInterruptThresholds+0x36>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
   17990:	f10d 0206 	add.w	r2, sp, #6
   17994:	210c      	movs	r1, #12
   17996:	4630      	mov	r0, r6
   17998:	f002 fe59 	bl	1a64e <VL53L0X_RdWord>
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
   1799c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   179a0:	ea04 4443 	and.w	r4, r4, r3, lsl #17
		*pThresholdHigh =
   179a4:	602c      	str	r4, [r5, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
   179a6:	b003      	add	sp, #12
   179a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   179aa:	bf00      	nop
   179ac:	1ffe0000 	.word	0x1ffe0000

000179b0 <VL53L0X_CheckAndLoadInterruptSettings>:
{
   179b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
   179b2:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
	if ((InterruptConfig ==
   179b6:	3b01      	subs	r3, #1
   179b8:	2b02      	cmp	r3, #2
{
   179ba:	4606      	mov	r6, r0
   179bc:	460f      	mov	r7, r1
	if ((InterruptConfig ==
   179be:	d833      	bhi.n	17a28 <VL53L0X_CheckAndLoadInterruptSettings+0x78>
		Status = VL53L0X_GetInterruptThresholds(Dev,
   179c0:	ab01      	add	r3, sp, #4
   179c2:	466a      	mov	r2, sp
   179c4:	2101      	movs	r1, #1
   179c6:	f7ff ffd3 	bl	17970 <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
   179ca:	9b00      	ldr	r3, [sp, #0]
   179cc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
		Status = VL53L0X_GetInterruptThresholds(Dev,
   179d0:	4605      	mov	r5, r0
		if (((ThresholdLow > 255*65536) ||
   179d2:	d803      	bhi.n	179dc <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
   179d4:	9b01      	ldr	r3, [sp, #4]
   179d6:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
   179da:	d906      	bls.n	179ea <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			(ThresholdHigh > 255*65536)) &&
   179dc:	b92d      	cbnz	r5, 179ea <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			if (StartNotStopFlag != 0) {
   179de:	b13f      	cbz	r7, 179f0 <VL53L0X_CheckAndLoadInterruptSettings+0x40>
				Status = VL53L0X_load_tuning_settings(Dev,
   179e0:	4912      	ldr	r1, [pc, #72]	; (17a2c <VL53L0X_CheckAndLoadInterruptSettings+0x7c>)
   179e2:	4630      	mov	r0, r6
   179e4:	f005 f876 	bl	1cad4 <VL53L0X_load_tuning_settings>
   179e8:	4605      	mov	r5, r0
}
   179ea:	4628      	mov	r0, r5
   179ec:	b003      	add	sp, #12
   179ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
   179f0:	2204      	movs	r2, #4
   179f2:	21ff      	movs	r1, #255	; 0xff
   179f4:	4630      	mov	r0, r6
   179f6:	f002 fdc1 	bl	1a57c <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
   179fa:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
   179fc:	4604      	mov	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
   179fe:	2170      	movs	r1, #112	; 0x70
   17a00:	4630      	mov	r0, r6
   17a02:	f002 fdbb 	bl	1a57c <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   17a06:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
   17a08:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   17a0a:	21ff      	movs	r1, #255	; 0xff
   17a0c:	4630      	mov	r0, r6
   17a0e:	f002 fdb5 	bl	1a57c <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
   17a12:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   17a14:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
   17a16:	462a      	mov	r2, r5
   17a18:	2180      	movs	r1, #128	; 0x80
   17a1a:	4630      	mov	r0, r6
   17a1c:	f002 fdae 	bl	1a57c <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   17a20:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
   17a22:	4320      	orrs	r0, r4
   17a24:	b245      	sxtb	r5, r0
   17a26:	e7e0      	b.n	179ea <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
   17a28:	2500      	movs	r5, #0
   17a2a:	e7de      	b.n	179ea <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
   17a2c:	20000373 	.word	0x20000373

00017a30 <VL53L0X_StaticInit>:
{
   17a30:	b570      	push	{r4, r5, r6, lr}
   17a32:	b094      	sub	sp, #80	; 0x50
   17a34:	4605      	mov	r5, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
   17a36:	2240      	movs	r2, #64	; 0x40
   17a38:	2100      	movs	r1, #0
   17a3a:	a804      	add	r0, sp, #16
   17a3c:	f002 fabc 	bl	19fb8 <memset>
	uint16_t tempword = 0;
   17a40:	2300      	movs	r3, #0
	Status = VL53L0X_get_info_from_device(Dev, 1);
   17a42:	2101      	movs	r1, #1
   17a44:	4628      	mov	r0, r5
	uint16_t tempword = 0;
   17a46:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t tempbyte = 0;
   17a4a:	f88d 3003 	strb.w	r3, [sp, #3]
	uint8_t isApertureSpads = 0;
   17a4e:	f88d 3004 	strb.w	r3, [sp, #4]
	uint32_t refSpadCount = 0;
   17a52:	9302      	str	r3, [sp, #8]
	Status = VL53L0X_get_info_from_device(Dev, 1);
   17a54:	f004 fa7c 	bl	1bf50 <VL53L0X_get_info_from_device>
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
   17a58:	f895 2114 	ldrb.w	r2, [r5, #276]	; 0x114
	if ((ApertureSpads > 1) ||
   17a5c:	2a01      	cmp	r2, #1
   17a5e:	d806      	bhi.n	17a6e <VL53L0X_StaticInit+0x3e>
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
   17a60:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
	if ((ApertureSpads > 1) ||
   17a64:	f040 80ad 	bne.w	17bc2 <VL53L0X_StaticInit+0x192>
		((ApertureSpads == 1) && (count > 32)) ||
   17a68:	2920      	cmp	r1, #32
		((ApertureSpads == 0) && (count > 12)))
   17a6a:	f240 80ac 	bls.w	17bc6 <VL53L0X_StaticInit+0x196>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
   17a6e:	aa01      	add	r2, sp, #4
   17a70:	a902      	add	r1, sp, #8
   17a72:	4628      	mov	r0, r5
   17a74:	f004 f8f2 	bl	1bc5c <VL53L0X_perform_ref_spad_management>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
   17a78:	4604      	mov	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
   17a7a:	2800      	cmp	r0, #0
   17a7c:	f040 809e 	bne.w	17bbc <VL53L0X_StaticInit+0x18c>
		if (UseInternalTuningSettings == 0)
   17a80:	f895 3150 	ldrb.w	r3, [r5, #336]	; 0x150
   17a84:	2b00      	cmp	r3, #0
   17a86:	f040 80a2 	bne.w	17bce <VL53L0X_StaticInit+0x19e>
			pTuningSettingBuffer = PALDevDataGet(Dev,
   17a8a:	f8d5 114c 	ldr.w	r1, [r5, #332]	; 0x14c
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
   17a8e:	4628      	mov	r0, r5
   17a90:	f005 f820 	bl	1cad4 <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
   17a94:	4604      	mov	r4, r0
   17a96:	2800      	cmp	r0, #0
   17a98:	f040 8090 	bne.w	17bbc <VL53L0X_StaticInit+0x18c>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
   17a9c:	4623      	mov	r3, r4
   17a9e:	4621      	mov	r1, r4
   17aa0:	2204      	movs	r2, #4
   17aa2:	4628      	mov	r0, r5
   17aa4:	f003 fddc 	bl	1b660 <VL53L0X_SetGpioConfig.part.0>
	if (Status == VL53L0X_ERROR_NONE) {
   17aa8:	4604      	mov	r4, r0
   17aaa:	2800      	cmp	r0, #0
   17aac:	f040 8086 	bne.w	17bbc <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
   17ab0:	2201      	movs	r2, #1
   17ab2:	21ff      	movs	r1, #255	; 0xff
   17ab4:	4628      	mov	r0, r5
   17ab6:	f002 fd61 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
   17aba:	f10d 0206 	add.w	r2, sp, #6
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
   17abe:	4606      	mov	r6, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
   17ac0:	2184      	movs	r1, #132	; 0x84
   17ac2:	4628      	mov	r0, r5
   17ac4:	f002 fdc3 	bl	1a64e <VL53L0X_RdWord>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   17ac8:	4622      	mov	r2, r4
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
   17aca:	4306      	orrs	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   17acc:	21ff      	movs	r1, #255	; 0xff
   17ace:	4628      	mov	r0, r5
   17ad0:	f002 fd54 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
   17ad4:	b276      	sxtb	r6, r6
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   17ad6:	4330      	orrs	r0, r6
   17ad8:	b244      	sxtb	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
   17ada:	2c00      	cmp	r4, #0
   17adc:	d16e      	bne.n	17bbc <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
   17ade:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   17ae2:	011b      	lsls	r3, r3, #4
   17ae4:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
   17ae8:	a904      	add	r1, sp, #16
   17aea:	4628      	mov	r0, r5
   17aec:	f003 fc22 	bl	1b334 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
   17af0:	4604      	mov	r4, r0
   17af2:	2800      	cmp	r0, #0
   17af4:	d162      	bne.n	17bbc <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
   17af6:	f10d 0103 	add.w	r1, sp, #3
   17afa:	4628      	mov	r0, r5
   17afc:	f003 faa4 	bl	1b048 <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
   17b00:	4604      	mov	r4, r0
   17b02:	2800      	cmp	r0, #0
   17b04:	d15a      	bne.n	17bbc <VL53L0X_StaticInit+0x18c>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
   17b06:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17b0a:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
   17b0e:	ae04      	add	r6, sp, #16
   17b10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   17b12:	f105 0410 	add.w	r4, r5, #16
   17b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17b18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   17b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17b1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   17b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17b20:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   17b24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Status = VL53L0X_RdByte(Dev,
   17b28:	f10d 0203 	add.w	r2, sp, #3
   17b2c:	2101      	movs	r1, #1
   17b2e:	4628      	mov	r0, r5
   17b30:	f002 fd51 	bl	1a5d6 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
   17b34:	4604      	mov	r4, r0
   17b36:	2800      	cmp	r0, #0
   17b38:	d140      	bne.n	17bbc <VL53L0X_StaticInit+0x18c>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
   17b3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17b3e:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		Status = VL53L0X_SetSequenceStepEnable(Dev,
   17b42:	4602      	mov	r2, r0
   17b44:	4601      	mov	r1, r0
   17b46:	4628      	mov	r0, r5
   17b48:	f003 fa90 	bl	1b06c <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
   17b4c:	4604      	mov	r4, r0
   17b4e:	bba8      	cbnz	r0, 17bbc <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
   17b50:	4602      	mov	r2, r0
   17b52:	2102      	movs	r1, #2
   17b54:	4628      	mov	r0, r5
   17b56:	f003 fa89 	bl	1b06c <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
   17b5a:	4604      	mov	r4, r0
   17b5c:	bb70      	cbnz	r0, 17bbc <VL53L0X_StaticInit+0x18c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
   17b5e:	2303      	movs	r3, #3
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
   17b60:	4601      	mov	r1, r0
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
   17b62:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
   17b66:	f10d 0205 	add.w	r2, sp, #5
   17b6a:	4628      	mov	r0, r5
   17b6c:	f004 fecb 	bl	1c906 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
   17b70:	4604      	mov	r4, r0
   17b72:	bb18      	cbnz	r0, 17bbc <VL53L0X_StaticInit+0x18c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
   17b74:	f89d 3005 	ldrb.w	r3, [sp, #5]
   17b78:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
   17b7c:	f10d 0205 	add.w	r2, sp, #5
   17b80:	2101      	movs	r1, #1
   17b82:	4628      	mov	r0, r5
   17b84:	f004 febf 	bl	1c906 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
   17b88:	4604      	mov	r4, r0
   17b8a:	b9b8      	cbnz	r0, 17bbc <VL53L0X_StaticInit+0x18c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
   17b8c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   17b90:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		Status = get_sequence_step_timeout(
   17b94:	aa03      	add	r2, sp, #12
   17b96:	2103      	movs	r1, #3
   17b98:	4628      	mov	r0, r5
   17b9a:	f004 fcad 	bl	1c4f8 <get_sequence_step_timeout>
	if (Status == VL53L0X_ERROR_NONE) {
   17b9e:	4604      	mov	r4, r0
   17ba0:	b960      	cbnz	r0, 17bbc <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
   17ba2:	9b03      	ldr	r3, [sp, #12]
   17ba4:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
		Status = get_sequence_step_timeout(
   17ba8:	aa03      	add	r2, sp, #12
   17baa:	2104      	movs	r1, #4
   17bac:	4628      	mov	r0, r5
   17bae:	f004 fca3 	bl	1c4f8 <get_sequence_step_timeout>
	if (Status == VL53L0X_ERROR_NONE) {
   17bb2:	4604      	mov	r4, r0
   17bb4:	b910      	cbnz	r0, 17bbc <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
   17bb6:	9b03      	ldr	r3, [sp, #12]
   17bb8:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
}
   17bbc:	4620      	mov	r0, r4
   17bbe:	b014      	add	sp, #80	; 0x50
   17bc0:	bd70      	pop	{r4, r5, r6, pc}
		((ApertureSpads == 0) && (count > 12)))
   17bc2:	290c      	cmp	r1, #12
   17bc4:	e751      	b.n	17a6a <VL53L0X_StaticInit+0x3a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
   17bc6:	4628      	mov	r0, r5
   17bc8:	f003 fed5 	bl	1b976 <VL53L0X_set_reference_spads>
   17bcc:	e754      	b.n	17a78 <VL53L0X_StaticInit+0x48>
			pTuningSettingBuffer = DefaultTuningSettings;
   17bce:	4901      	ldr	r1, [pc, #4]	; (17bd4 <VL53L0X_StaticInit+0x1a4>)
   17bd0:	e75d      	b.n	17a8e <VL53L0X_StaticInit+0x5e>
   17bd2:	bf00      	nop
   17bd4:	20000280 	.word	0x20000280

00017bd8 <is_aperture>:
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
   17bd8:	4b03      	ldr	r3, [pc, #12]	; (17be8 <is_aperture+0x10>)
	quadrant = spadIndex >> 6;
   17bda:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
   17bdc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		isAperture = 0;

	return isAperture;
}
   17be0:	3800      	subs	r0, #0
   17be2:	bf18      	it	ne
   17be4:	2001      	movne	r0, #1
   17be6:	4770      	bx	lr
   17be8:	20000268 	.word	0x20000268

00017bec <VL53L0X_calc_timeout_mclks>:
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;

	macro_period_vclks = 2304;
	macro_period_ps = (uint32_t)(macro_period_vclks
   17bec:	4808      	ldr	r0, [pc, #32]	; (17c10 <VL53L0X_calc_timeout_mclks+0x24>)

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
   17bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	macro_period_ps = (uint32_t)(macro_period_vclks
   17bf2:	4342      	muls	r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
   17bf4:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
		+ (macro_period_ns / 2)) / macro_period_ns);
   17bf8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   17bfc:	fbb2 f0f0 	udiv	r0, r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
   17c00:	fbb2 f2f3 	udiv	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
   17c04:	fb03 0001 	mla	r0, r3, r1, r0

    return timeout_period_mclks;
}
   17c08:	fbb0 f0f2 	udiv	r0, r0, r2
   17c0c:	4770      	bx	lr
   17c0e:	bf00      	nop
   17c10:	003a2f00 	.word	0x003a2f00

00017c14 <VL53L0X_calc_timeout_us>:
	macro_period_ps = (uint32_t)(macro_period_vclks
   17c14:	4b06      	ldr	r3, [pc, #24]	; (17c30 <VL53L0X_calc_timeout_us+0x1c>)
   17c16:	435a      	muls	r2, r3
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;
   17c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   17c1c:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
   17c20:	fbb2 f2f0 	udiv	r2, r2, r0

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
   17c24:	434a      	muls	r2, r1
   17c26:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4

	return actual_timeout_period_us;
}
   17c2a:	fbb2 f0f0 	udiv	r0, r2, r0
   17c2e:	4770      	bx	lr
   17c30:	003a2f00 	.word	0x003a2f00

00017c34 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
   17c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
   17c36:	f8b0 5154 	ldrh.w	r5, [r0, #340]	; 0x154

	dmaxCalSignalRateRtn_mcps =
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
   17c3a:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
   17c3e:	4368      	muls	r0, r5

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
   17c40:	3080      	adds	r0, #128	; 0x80
   17c42:	0a00      	lsrs	r0, r0, #8
{
   17c44:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
	SignalAt0mm *= dmaxCalRange_mm;
   17c48:	4345      	muls	r5, r0

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
   17c4a:	4614      	mov	r4, r2
   17c4c:	b152      	cbz	r2, 17c64 <VL53L0X_calc_dmax+0x30>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
   17c4e:	0289      	lsls	r1, r1, #10

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
   17c50:	eb01 0152 	add.w	r1, r1, r2, lsr #1
			(totalCorrSignalRate_mcps/2);

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
   17c54:	fbb1 f4f2 	udiv	r4, r1, r2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
   17c58:	eb04 0444 	add.w	r4, r4, r4, lsl #1

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
   17c5c:	4364      	muls	r4, r4

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
   17c5e:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
   17c62:	0c24      	lsrs	r4, r4, #16
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
   17c64:	f507 4100 	add.w	r1, r7, #32768	; 0x8000
   17c68:	0c09      	lsrs	r1, r1, #16
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
   17c6a:	2006      	movs	r0, #6
	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
   17c6c:	9a06      	ldr	r2, [sp, #24]
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
   17c6e:	3103      	adds	r1, #3
   17c70:	fbb1 f1f0 	udiv	r1, r1, r0
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
   17c74:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3

	if (sigmaEstP2Tmp > 0xffff) {
   17c78:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
   17c7c:	fb03 f202 	mul.w	r2, r3, r2

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
   17c80:	bf38      	it	cc
   17c82:	1cfb      	addcc	r3, r7, #3
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
   17c84:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
   17c88:	bf3e      	ittt	cc
   17c8a:	fbb3 f3f0 	udivcc	r3, r3, r0
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
   17c8e:	ebc3 03c3 	rsbcc	r3, r3, r3, lsl #3

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
   17c92:	f503 4300 	addcc.w	r3, r3, #32768	; 0x8000
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
   17c96:	ea4f 4212 	mov.w	r2, r2, lsr #16
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
   17c9a:	bf34      	ite	cc
   17c9c:	0c1b      	lsrcc	r3, r3, #16
		minSignalNeeded_p3 = 0xfff00000;
   17c9e:	4b1b      	ldrcs	r3, [pc, #108]	; (17d0c <VL53L0X_calc_dmax+0xd8>)
	minSignalNeeded_p2 *= minSignalNeeded_p2;
   17ca0:	fb02 f202 	mul.w	r2, r2, r2

		minSignalNeeded_p3 *= minSignalNeeded_p3;
   17ca4:	bf38      	it	cc
   17ca6:	435b      	mulcc	r3, r3

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
   17ca8:	eb02 0256 	add.w	r2, r2, r6, lsr #1
   17cac:	4413      	add	r3, r2
	minSignalNeeded /= peakVcselDuration_us;
   17cae:	fbb3 f6f6 	udiv	r6, r3, r6

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
   17cb2:	03b6      	lsls	r6, r6, #14

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
	minSignalNeeded /= minSignalNeeded_p4;
   17cb4:	22fe      	movs	r2, #254	; 0xfe
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
   17cb6:	f105 0020 	add.w	r0, r5, #32
	minSignalNeeded += (minSignalNeeded_p4/2);
   17cba:	367f      	adds	r6, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
   17cbc:	fbb6 f6f2 	udiv	r6, r6, r2
	minSignalNeeded *= minSignalNeeded_p1;
   17cc0:	4374      	muls	r4, r6
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
   17cc2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   17cc6:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
   17cca:	0980      	lsrs	r0, r0, #6
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
   17ccc:	fbb4 f4f7 	udiv	r4, r4, r7
	minSignalNeeded <<= 4;
   17cd0:	0124      	lsls	r4, r4, #4
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
   17cd2:	f004 f907 	bl	1bee4 <VL53L0X_isqrt>
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
   17cd6:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
   17cda:	42bc      	cmp	r4, r7
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
   17cdc:	bf28      	it	cs
   17cde:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
   17ce2:	4606      	mov	r6, r0
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
   17ce4:	bf29      	itett	cs
   17ce6:	fbb4 f3f3 	udivcs	r3, r4, r3
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
   17cea:	2000      	movcc	r0, #0
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
   17cec:	18ed      	addcs	r5, r5, r3
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
   17cee:	fbb4 f4f7 	udivcs	r4, r4, r7
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
   17cf2:	bf28      	it	cs
   17cf4:	fbb5 f0f4 	udivcs	r0, r5, r4

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
   17cf8:	f004 f8f4 	bl	1bee4 <VL53L0X_isqrt>

	*pdmax_mm = dmaxDark;
	if (dmaxDark > dmaxAmbient)
   17cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17cfe:	4286      	cmp	r6, r0
   17d00:	bf94      	ite	ls
   17d02:	601e      	strls	r6, [r3, #0]
   17d04:	6018      	strhi	r0, [r3, #0]
		*pdmax_mm = dmaxAmbient;

	LOG_FUNCTION_END(Status);

	return Status;
}
   17d06:	2000      	movs	r0, #0
   17d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17d0a:	bf00      	nop
   17d0c:	fff00000 	.word	0xfff00000

00017d10 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
   17d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d14:	b091      	sub	sp, #68	; 0x44
   17d16:	e9cd 2307 	strd	r2, r3, [sp, #28]
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
   17d1a:	6a03      	ldr	r3, [r0, #32]
   17d1c:	930e      	str	r3, [sp, #56]	; 0x38
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
   17d1e:	690b      	ldr	r3, [r1, #16]
   17d20:	9309      	str	r3, [sp, #36]	; 0x24
{
   17d22:	4605      	mov	r5, r0

	correctedSignalRate_mcps =
   17d24:	68cb      	ldr	r3, [r1, #12]
   17d26:	930b      	str	r3, [sp, #44]	; 0x2c
{
   17d28:	460f      	mov	r7, r1
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
   17d2a:	aa0f      	add	r2, sp, #60	; 0x3c
   17d2c:	f004 ff35 	bl	1cb9a <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
   17d30:	aa0e      	add	r2, sp, #56	; 0x38
   17d32:	4639      	mov	r1, r7
   17d34:	4628      	mov	r0, r5
   17d36:	f004 ff1a 	bl	1cb6e <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
   17d3a:	bb58      	cbnz	r0, 17d94 <VL53L0X_calc_sigma_estimate+0x84>
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
   17d3c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
   17d3e:	f895 b0e0 	ldrb.w	fp, [r5, #224]	; 0xe0
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
   17d42:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   17d46:	9305      	str	r3, [sp, #20]
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
   17d48:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   17d4c:	fb06 f104 	mul.w	r1, r6, r4
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
   17d50:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   17d54:	9104      	str	r1, [sp, #16]
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
   17d56:	990e      	ldr	r1, [sp, #56]	; 0x38
   17d58:	910a      	str	r1, [sp, #40]	; 0x28
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
   17d5a:	9904      	ldr	r1, [sp, #16]
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
   17d5c:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   17d60:	9306      	str	r3, [sp, #24]
		vcselWidth = 3;
   17d62:	f1bb 0f08 	cmp.w	fp, #8
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
   17d66:	f104 0480 	add.w	r4, r4, #128	; 0x80
		vcselWidth = 3;
   17d6a:	bf0c      	ite	eq
   17d6c:	2302      	moveq	r3, #2
   17d6e:	2303      	movne	r3, #3
		totalSignalRate_mcps <<= 8;
   17d70:	f024 0aff 	bic.w	sl, r4, #255	; 0xff
	if (peakSignalRate_kcps == 0) {
   17d74:	0c09      	lsrs	r1, r1, #16
		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
   17d76:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
		totalSignalRate_mcps <<= 8;
   17d7a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 17f1c <VL53L0X_calc_sigma_estimate+0x20c>
   17d7e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
	if (peakSignalRate_kcps == 0) {
   17d82:	910c      	str	r1, [sp, #48]	; 0x30
   17d84:	d109      	bne.n	17d9a <VL53L0X_calc_sigma_estimate+0x8a>
		*pSigmaEstimate = cSigmaEstMax;
   17d86:	9b07      	ldr	r3, [sp, #28]
   17d88:	f8c3 8000 	str.w	r8, [r3]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
   17d8c:	9b08      	ldr	r3, [sp, #32]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
   17d8e:	f8c5 8140 	str.w	r8, [r5, #320]	; 0x140
		*pDmax_mm = 0;
   17d92:	6018      	str	r0, [r3, #0]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
   17d94:	b011      	add	sp, #68	; 0x44
   17d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
   17d9a:	9906      	ldr	r1, [sp, #24]
   17d9c:	930d      	str	r3, [sp, #52]	; 0x34
   17d9e:	4628      	mov	r0, r5
   17da0:	f7ff ff24 	bl	17bec <VL53L0X_calc_timeout_mclks>
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
   17da4:	465a      	mov	r2, fp
   17da6:	9905      	ldr	r1, [sp, #20]
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
   17da8:	4681      	mov	r9, r0
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
   17daa:	4628      	mov	r0, r5
   17dac:	f7ff ff1e 	bl	17bec <VL53L0X_calc_timeout_mclks>
		peakVcselDuration_us = vcselWidth * 2048 *
   17db0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
   17db2:	495b      	ldr	r1, [pc, #364]	; (17f20 <VL53L0X_calc_sigma_estimate+0x210>)
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
   17db4:	4481      	add	r9, r0
		peakVcselDuration_us = vcselWidth * 2048 *
   17db6:	fb03 f909 	mul.w	r9, r3, r9
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
   17dba:	0a20      	lsrs	r0, r4, #8
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
   17dbc:	9c09      	ldr	r4, [sp, #36]	; 0x24
		peakVcselDuration_us *= cPllPeriod_ps;
   17dbe:	f240 6377 	movw	r3, #1655	; 0x677
		peakVcselDuration_us = vcselWidth * 2048 *
   17dc2:	ea4f 29c9 	mov.w	r9, r9, lsl #11
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
   17dc6:	f509 79fa 	add.w	r9, r9, #500	; 0x1f4
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
   17dca:	4374      	muls	r4, r6
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
   17dcc:	fbb9 f9f6 	udiv	r9, r9, r6
		peakVcselDuration_us *= cPllPeriod_ps;
   17dd0:	fb03 f909 	mul.w	r9, r3, r9
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
   17dd4:	400c      	ands	r4, r1
   17dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17dd8:	fbb4 f4f3 	udiv	r4, r4, r3
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
   17ddc:	f509 79fa 	add.w	r9, r9, #500	; 0x1f4
   17de0:	4b50      	ldr	r3, [pc, #320]	; (17f24 <VL53L0X_calc_sigma_estimate+0x214>)
   17de2:	fbb9 f9f6 	udiv	r9, r9, r6
		vcselTotalEventsRtn = totalSignalRate_mcps *
   17de6:	fb09 f000 	mul.w	r0, r9, r0
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
   17dea:	3080      	adds	r0, #128	; 0x80
   17dec:	429c      	cmp	r4, r3
   17dee:	ea4f 2010 	mov.w	r0, r0, lsr #8
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
   17df2:	bf28      	it	cs
   17df4:	461c      	movcs	r4, r3
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
   17df6:	2801      	cmp	r0, #1
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
   17df8:	f44f 7316 	mov.w	r3, #600	; 0x258
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
   17dfc:	bf38      	it	cc
   17dfe:	2001      	movcc	r0, #1
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
   17e00:	435c      	muls	r4, r3
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
   17e02:	230c      	movs	r3, #12
   17e04:	4358      	muls	r0, r3
   17e06:	f004 f86d 	bl	1bee4 <VL53L0X_isqrt>
		if(pRangingMeasurementData->RangeStatus != 0){
   17e0a:	7e3a      	ldrb	r2, [r7, #24]
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
   17e0c:	893b      	ldrh	r3, [r7, #8]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
   17e0e:	ea4f 0b40 	mov.w	fp, r0, lsl #1
		if(pRangingMeasurementData->RangeStatus != 0){
   17e12:	2a00      	cmp	r2, #0
   17e14:	d17e      	bne.n	17f14 <VL53L0X_calc_sigma_estimate+0x204>
		diff1_mcps = (((peakSignalRate_kcps << 16) -
   17e16:	4942      	ldr	r1, [pc, #264]	; (17f20 <VL53L0X_calc_sigma_estimate+0x210>)
   17e18:	9a04      	ldr	r2, [sp, #16]
   17e1a:	400a      	ands	r2, r1
   17e1c:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
   17e20:	4a41      	ldr	r2, [pc, #260]	; (17f28 <VL53L0X_calc_sigma_estimate+0x218>)
   17e22:	4353      	muls	r3, r2
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
   17e24:	f241 225c 	movw	r2, #4700	; 0x125c
   17e28:	fbb3 f3f2 	udiv	r3, r3, r2
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
   17e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17e2e:	4372      	muls	r2, r6
			2 * xTalkCompRate_kcps) + 500)/1000;
   17e30:	f5b2 1f48 	cmp.w	r2, #3276800	; 0x320000
   17e34:	bf28      	it	cs
   17e36:	f44f 1248 	movcs.w	r2, #3276800	; 0x320000
   17e3a:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
   17e3e:	fbb2 f2f6 	udiv	r2, r2, r6
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
   17e42:	fbb1 f6f6 	udiv	r6, r1, r6
		diff1_mcps <<= 8;
   17e46:	0212      	lsls	r2, r2, #8
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
   17e48:	fbb2 f6f6 	udiv	r6, r2, r6
		xTalkCorrection <<= 8;
   17e4c:	0236      	lsls	r6, r6, #8
			pwMult *= ((1 << 16) - xTalkCorrection);
   17e4e:	f5c6 3680 	rsb	r6, r6, #65536	; 0x10000
   17e52:	435e      	muls	r6, r3
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
   17e54:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
   17e58:	0c36      	lsrs	r6, r6, #16
			pwMult += (1 << 16);
   17e5a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
			pwMult >>= 1;
   17e5e:	0876      	lsrs	r6, r6, #1
			pwMult = pwMult * pwMult;
   17e60:	4376      	muls	r6, r6
			pwMult >>= 14;
   17e62:	0bb6      	lsrs	r6, r6, #14
		sqr1 = pwMult * sigmaEstimateP1;
   17e64:	f44f 7048 	mov.w	r0, #800	; 0x320
   17e68:	4370      	muls	r0, r6
		sqr2 = (sqr2 + 0x8000) >> 16;
   17e6a:	f504 4300 	add.w	r3, r4, #32768	; 0x8000
		sqr1 = (sqr1 + 0x8000) >> 16;
   17e6e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
		sqr2 = (sqr2 + 0x8000) >> 16;
   17e72:	0c1b      	lsrs	r3, r3, #16
		sqr2 *= sqr2;
   17e74:	435b      	muls	r3, r3
		sqr1 = (sqr1 + 0x8000) >> 16;
   17e76:	0c00      	lsrs	r0, r0, #16
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
   17e78:	fb00 3000 	mla	r0, r0, r0, r3
   17e7c:	f004 f832 	bl	1bee4 <VL53L0X_isqrt>
		sqrtResult_centi_ns <<= 16;
   17e80:	0400      	lsls	r0, r0, #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
   17e82:	2364      	movs	r3, #100	; 0x64
   17e84:	3032      	adds	r0, #50	; 0x32
   17e86:	fbb0 f0f3 	udiv	r0, r0, r3
		sigmaEstRtn		 += 5000;
   17e8a:	f640 33b5 	movw	r3, #2997	; 0xbb5
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
   17e8e:	fbb0 fbfb 	udiv	fp, r0, fp
		sigmaEstRtn		 += 5000;
   17e92:	f241 3088 	movw	r0, #5000	; 0x1388
   17e96:	fb03 0b0b 	mla	fp, r3, fp, r0
		if (sigmaEstRtn > cSigmaEstRtnMax) {
   17e9a:	4b24      	ldr	r3, [pc, #144]	; (17f2c <VL53L0X_calc_sigma_estimate+0x21c>)
   17e9c:	459b      	cmp	fp, r3
		sigmaEstRtn		 /= 10000;
   17e9e:	bf9c      	itt	ls
   17ea0:	f242 7310 	movwls	r3, #10000	; 0x2710
   17ea4:	fbbb fbf3 	udivls	fp, fp, r3
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
   17ea8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   17eac:	4413      	add	r3, r2
   17eae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
   17eb2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
				finalRangeIntegrationTimeMilliSecs/2)/
   17eb6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
		finalRangeIntegrationTimeMilliSecs =
   17eba:	fbb3 f0f7 	udiv	r0, r3, r7
				finalRangeIntegrationTimeMilliSecs/2)/
   17ebe:	fbb3 f2f2 	udiv	r2, r3, r2
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
   17ec2:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
   17ec6:	fbb2 f0f0 	udiv	r0, r2, r0
			sigmaEstRtn = cSigmaEstRtnMax;
   17eca:	bf88      	it	hi
   17ecc:	f44f 4b70 	movhi.w	fp, #61440	; 0xf000
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
   17ed0:	f004 f808 	bl	1bee4 <VL53L0X_isqrt>
		sigmaEstRef <<= 8;
   17ed4:	0200      	lsls	r0, r0, #8
		sigmaEstRef = (sigmaEstRef + 500)/1000;
   17ed6:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   17eda:	fbb0 f0f7 	udiv	r0, r0, r7
		sqr2 = sigmaEstRef * sigmaEstRef;
   17ede:	4340      	muls	r0, r0
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
   17ee0:	fb0b 000b 	mla	r0, fp, fp, r0
   17ee4:	f003 fffe 	bl	1bee4 <VL53L0X_isqrt>
		sigmaEstimate	 = 1000 * sqrtResult;
   17ee8:	4347      	muls	r7, r0
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
   17eea:	9b07      	ldr	r3, [sp, #28]
		Status = VL53L0X_calc_dmax(
   17eec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17eee:	4547      	cmp	r7, r8
   17ef0:	bf28      	it	cs
   17ef2:	4647      	movcs	r7, r8
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
   17ef4:	601f      	str	r7, [r3, #0]
		Status = VL53L0X_calc_dmax(
   17ef6:	9b08      	ldr	r3, [sp, #32]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
   17ef8:	f8c5 7140 	str.w	r7, [r5, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
   17efc:	e9cd 9302 	strd	r9, r3, [sp, #8]
   17f00:	f44f 7348 	mov.w	r3, #800	; 0x320
   17f04:	9300      	str	r3, [sp, #0]
   17f06:	9401      	str	r4, [sp, #4]
   17f08:	4633      	mov	r3, r6
   17f0a:	4651      	mov	r1, sl
   17f0c:	4628      	mov	r0, r5
   17f0e:	f7ff fe91 	bl	17c34 <VL53L0X_calc_dmax>
   17f12:	e73f      	b.n	17d94 <VL53L0X_calc_sigma_estimate+0x84>
			pwMult = 1 << 16;
   17f14:	f44f 3680 	mov.w	r6, #65536	; 0x10000
   17f18:	e7a4      	b.n	17e64 <VL53L0X_calc_sigma_estimate+0x154>
   17f1a:	bf00      	nop
   17f1c:	028f87ae 	.word	0x028f87ae
   17f20:	ffff0000 	.word	0xffff0000
   17f24:	00666666 	.word	0x00666666
   17f28:	0006999a 	.word	0x0006999a
   17f2c:	249f270f 	.word	0x249f270f

00017f30 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
   17f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f32:	460f      	mov	r7, r1
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
   17f34:	2102      	movs	r1, #2
{
   17f36:	4606      	mov	r6, r0
   17f38:	4614      	mov	r4, r2
	Status = VL53L0X_get_info_from_device(Dev, 2);
   17f3a:	f004 f809 	bl	1bf50 <VL53L0X_get_info_from_device>

	if (Status == VL53L0X_ERROR_NONE) {
   17f3e:	4605      	mov	r5, r0
   17f40:	b940      	cbnz	r0, 17f54 <VL53L0X_check_part_used+0x24>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);

	if (ModuleIdInt == 0) {
   17f42:	f896 30f1 	ldrb.w	r3, [r6, #241]	; 0xf1
		*Revision = 0;
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
   17f46:	f104 0040 	add.w	r0, r4, #64	; 0x40
	if (ModuleIdInt == 0) {
   17f4a:	b92b      	cbnz	r3, 17f58 <VL53L0X_check_part_used+0x28>
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
   17f4c:	4905      	ldr	r1, [pc, #20]	; (17f64 <VL53L0X_check_part_used+0x34>)
		*Revision = 0;
   17f4e:	703d      	strb	r5, [r7, #0]
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
   17f50:	f002 f801 	bl	19f56 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
   17f54:	4628      	mov	r0, r5
   17f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
   17f58:	f896 30f2 	ldrb.w	r3, [r6, #242]	; 0xf2
   17f5c:	703b      	strb	r3, [r7, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
   17f5e:	f106 01f3 	add.w	r1, r6, #243	; 0xf3
   17f62:	e7f5      	b.n	17f50 <VL53L0X_check_part_used+0x20>
   17f64:	0001db61 	.word	0x0001db61

00017f68 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
   17f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17f6a:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
   17f6c:	460a      	mov	r2, r1
   17f6e:	f10d 0107 	add.w	r1, sp, #7
{
   17f72:	4605      	mov	r5, r0
	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
   17f74:	f7ff ffdc 	bl	17f30 <VL53L0X_check_part_used>

	if (Status == VL53L0X_ERROR_NONE) {
   17f78:	bb00      	cbnz	r0, 17fbc <VL53L0X_get_device_info+0x54>
		if (Revision == 0) {
   17f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17f7e:	b9fb      	cbnz	r3, 17fc0 <VL53L0X_get_device_info+0x58>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
   17f80:	4915      	ldr	r1, [pc, #84]	; (17fd8 <VL53L0X_get_device_info+0x70>)
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
   17f82:	4620      	mov	r0, r4
   17f84:	f001 ffe7 	bl	19f56 <strcpy>
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
   17f88:	4914      	ldr	r1, [pc, #80]	; (17fdc <VL53L0X_get_device_info+0x74>)
   17f8a:	f104 0020 	add.w	r0, r4, #32
   17f8e:	f001 ffe2 	bl	19f56 <strcpy>
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
   17f92:	f104 0260 	add.w	r2, r4, #96	; 0x60
   17f96:	21c0      	movs	r1, #192	; 0xc0
   17f98:	4628      	mov	r0, r5
   17f9a:	f002 fb1c 	bl	1a5d6 <VL53L0X_RdByte>
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
   17f9e:	b968      	cbnz	r0, 17fbc <VL53L0X_get_device_info+0x54>
		Status = VL53L0X_RdByte(Dev,
   17fa0:	f10d 0206 	add.w	r2, sp, #6
   17fa4:	21c2      	movs	r1, #194	; 0xc2
   17fa6:	4628      	mov	r0, r5
   17fa8:	f002 fb15 	bl	1a5d6 <VL53L0X_RdByte>
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
   17fac:	2301      	movs	r3, #1
   17fae:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
   17fb2:	f89d 3006 	ldrb.w	r3, [sp, #6]
   17fb6:	091b      	lsrs	r3, r3, #4
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
   17fb8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	}

	return Status;
}
   17fbc:	b003      	add	sp, #12
   17fbe:	bd30      	pop	{r4, r5, pc}
		} else if ((Revision <= 34) && (Revision != 32)) {
   17fc0:	2b22      	cmp	r3, #34	; 0x22
   17fc2:	d803      	bhi.n	17fcc <VL53L0X_get_device_info+0x64>
   17fc4:	2b20      	cmp	r3, #32
   17fc6:	d003      	beq.n	17fd0 <VL53L0X_get_device_info+0x68>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
   17fc8:	4905      	ldr	r1, [pc, #20]	; (17fe0 <VL53L0X_get_device_info+0x78>)
   17fca:	e7da      	b.n	17f82 <VL53L0X_get_device_info+0x1a>
		} else if (Revision < 39) {
   17fcc:	2b26      	cmp	r3, #38	; 0x26
   17fce:	d801      	bhi.n	17fd4 <VL53L0X_get_device_info+0x6c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
   17fd0:	4904      	ldr	r1, [pc, #16]	; (17fe4 <VL53L0X_get_device_info+0x7c>)
   17fd2:	e7d6      	b.n	17f82 <VL53L0X_get_device_info+0x1a>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
   17fd4:	4904      	ldr	r1, [pc, #16]	; (17fe8 <VL53L0X_get_device_info+0x80>)
   17fd6:	e7d4      	b.n	17f82 <VL53L0X_get_device_info+0x1a>
   17fd8:	0001dc06 	.word	0x0001dc06
   17fdc:	0001daf0 	.word	0x0001daf0
   17fe0:	0001dc12 	.word	0x0001dc12
   17fe4:	0001dc1e 	.word	0x0001dc1e
   17fe8:	0001dc2a 	.word	0x0001dc2a

00017fec <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17fec:	4b0e      	ldr	r3, [pc, #56]	; (18028 <z_sys_init_run_level+0x3c>)
{
   17fee:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17ff0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17ff4:	3001      	adds	r0, #1
   17ff6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   17ffa:	42a6      	cmp	r6, r4
   17ffc:	d800      	bhi.n	18000 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   17ffe:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   18000:	e9d4 3500 	ldrd	r3, r5, [r4]
   18004:	4628      	mov	r0, r5
   18006:	4798      	blx	r3
		if (dev != NULL) {
   18008:	b165      	cbz	r5, 18024 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   1800a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   1800c:	b130      	cbz	r0, 1801c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1800e:	2800      	cmp	r0, #0
   18010:	bfb8      	it	lt
   18012:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   18014:	28ff      	cmp	r0, #255	; 0xff
   18016:	bfa8      	it	ge
   18018:	20ff      	movge	r0, #255	; 0xff
   1801a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1801c:	785a      	ldrb	r2, [r3, #1]
   1801e:	f042 0201 	orr.w	r2, r2, #1
   18022:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18024:	3408      	adds	r4, #8
   18026:	e7e8      	b.n	17ffa <z_sys_init_run_level+0xe>
   18028:	0001dab4 	.word	0x0001dab4

0001802c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1802c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1802e:	4605      	mov	r5, r0
   18030:	b910      	cbnz	r0, 18038 <z_impl_device_get_binding+0xc>
		return NULL;
   18032:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   18034:	4620      	mov	r0, r4
   18036:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   18038:	7803      	ldrb	r3, [r0, #0]
   1803a:	2b00      	cmp	r3, #0
   1803c:	d0f9      	beq.n	18032 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1803e:	4c0e      	ldr	r4, [pc, #56]	; (18078 <z_impl_device_get_binding+0x4c>)
   18040:	4e0e      	ldr	r6, [pc, #56]	; (1807c <z_impl_device_get_binding+0x50>)
   18042:	42b4      	cmp	r4, r6
   18044:	d108      	bne.n	18058 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   18046:	4c0c      	ldr	r4, [pc, #48]	; (18078 <z_impl_device_get_binding+0x4c>)
   18048:	42b4      	cmp	r4, r6
   1804a:	d0f2      	beq.n	18032 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1804c:	4620      	mov	r0, r4
   1804e:	f004 fea0 	bl	1cd92 <z_device_is_ready>
   18052:	b950      	cbnz	r0, 1806a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   18054:	3418      	adds	r4, #24
   18056:	e7f7      	b.n	18048 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   18058:	4620      	mov	r0, r4
   1805a:	f004 fe9a 	bl	1cd92 <z_device_is_ready>
   1805e:	b110      	cbz	r0, 18066 <z_impl_device_get_binding+0x3a>
   18060:	6823      	ldr	r3, [r4, #0]
   18062:	42ab      	cmp	r3, r5
   18064:	d0e6      	beq.n	18034 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   18066:	3418      	adds	r4, #24
   18068:	e7eb      	b.n	18042 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1806a:	6821      	ldr	r1, [r4, #0]
   1806c:	4628      	mov	r0, r5
   1806e:	f001 ff8c 	bl	19f8a <strcmp>
   18072:	2800      	cmp	r0, #0
   18074:	d1ee      	bne.n	18054 <z_impl_device_get_binding+0x28>
   18076:	e7dd      	b.n	18034 <z_impl_device_get_binding+0x8>
   18078:	0001d4c0 	.word	0x0001d4c0
   1807c:	0001d5c8 	.word	0x0001d5c8

00018080 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   18080:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   18082:	4b0a      	ldr	r3, [pc, #40]	; (180ac <bg_thread_main+0x2c>)
   18084:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   18086:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   18088:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1808a:	f7ff ffaf 	bl	17fec <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1808e:	f001 f9c9 	bl	19424 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   18092:	2003      	movs	r0, #3
   18094:	f7ff ffaa 	bl	17fec <z_sys_init_run_level>

	z_init_static_threads();
   18098:	f000 f968 	bl	1836c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   1809c:	f7f8 fdec 	bl	10c78 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   180a0:	4a03      	ldr	r2, [pc, #12]	; (180b0 <bg_thread_main+0x30>)
   180a2:	7b13      	ldrb	r3, [r2, #12]
   180a4:	f023 0301 	bic.w	r3, r3, #1
   180a8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   180aa:	bd08      	pop	{r3, pc}
   180ac:	20001a03 	.word	0x20001a03
   180b0:	200008d8 	.word	0x200008d8

000180b4 <z_bss_zero>:
{
   180b4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   180b6:	4803      	ldr	r0, [pc, #12]	; (180c4 <z_bss_zero+0x10>)
   180b8:	4a03      	ldr	r2, [pc, #12]	; (180c8 <z_bss_zero+0x14>)
   180ba:	2100      	movs	r1, #0
   180bc:	1a12      	subs	r2, r2, r0
   180be:	f004 fe99 	bl	1cdf4 <z_early_memset>
}
   180c2:	bd08      	pop	{r3, pc}
   180c4:	200006a0 	.word	0x200006a0
   180c8:	20001a04 	.word	0x20001a04

000180cc <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   180cc:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   180ce:	2300      	movs	r3, #0
{
   180d0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   180d2:	2201      	movs	r2, #1
   180d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   180d8:	4e13      	ldr	r6, [pc, #76]	; (18128 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   180da:	4d14      	ldr	r5, [pc, #80]	; (1812c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   180dc:	9301      	str	r3, [sp, #4]
   180de:	220f      	movs	r2, #15
   180e0:	e9cd 3202 	strd	r3, r2, [sp, #8]
   180e4:	4912      	ldr	r1, [pc, #72]	; (18130 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   180e6:	2318      	movs	r3, #24
   180e8:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   180ec:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   180f0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   180f2:	f44f 70c0 	mov.w	r0, #384	; 0x180
   180f6:	fb00 1104 	mla	r1, r0, r4, r1
   180fa:	4b0e      	ldr	r3, [pc, #56]	; (18134 <z_init_cpu+0x68>)
   180fc:	9500      	str	r5, [sp, #0]
   180fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
   18102:	4630      	mov	r0, r6
   18104:	f000 f8d4 	bl	182b0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18108:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1810a:	480b      	ldr	r0, [pc, #44]	; (18138 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   1810c:	752c      	strb	r4, [r5, #20]
   1810e:	f023 0304 	bic.w	r3, r3, #4
   18112:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   18114:	f44f 6304 	mov.w	r3, #2112	; 0x840
   18118:	fb03 0404 	mla	r4, r3, r4, r0
   1811c:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1811e:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   18120:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   18122:	b006      	add	sp, #24
   18124:	bd70      	pop	{r4, r5, r6, pc}
   18126:	bf00      	nop
   18128:	20000858 	.word	0x20000858
   1812c:	20001988 	.word	0x20001988
   18130:	20002700 	.word	0x20002700
   18134:	00018425 	.word	0x00018425
   18138:	20002880 	.word	0x20002880

0001813c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1813c:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1813e:	4b2d      	ldr	r3, [pc, #180]	; (181f4 <z_cstart+0xb8>)
   18140:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   18142:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   18146:	4d2c      	ldr	r5, [pc, #176]	; (181f8 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   18148:	4e2c      	ldr	r6, [pc, #176]	; (181fc <z_cstart+0xc0>)
   1814a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1814c:	4f2c      	ldr	r7, [pc, #176]	; (18200 <z_cstart+0xc4>)
   1814e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18152:	2400      	movs	r4, #0
   18154:	616b      	str	r3, [r5, #20]
   18156:	23e0      	movs	r3, #224	; 0xe0
   18158:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1815c:	77ec      	strb	r4, [r5, #31]
   1815e:	762c      	strb	r4, [r5, #24]
   18160:	766c      	strb	r4, [r5, #25]
   18162:	76ac      	strb	r4, [r5, #26]
   18164:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   18168:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1816a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1816e:	626b      	str	r3, [r5, #36]	; 0x24
   18170:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   18174:	f7fa fec2 	bl	12efc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   18178:	f7fa fc78 	bl	12a6c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1817c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18180:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   18182:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   18184:	f7fa ff9c 	bl	130c0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   18188:	f7fa ff04 	bl	12f94 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1818c:	f240 1301 	movw	r3, #257	; 0x101
   18190:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   18194:	ab06      	add	r3, sp, #24
   18196:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   18198:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
   1819c:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1819e:	f004 fdf7 	bl	1cd90 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   181a2:	4620      	mov	r0, r4
   181a4:	f7ff ff22 	bl	17fec <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   181a8:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   181aa:	4d16      	ldr	r5, [pc, #88]	; (18204 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   181ac:	f7ff ff1e 	bl	17fec <z_sys_init_run_level>
	z_sched_init();
   181b0:	f000 fe16 	bl	18de0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   181b4:	4b14      	ldr	r3, [pc, #80]	; (18208 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
   181b6:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   181b8:	9305      	str	r3, [sp, #20]
   181ba:	2301      	movs	r3, #1
   181bc:	4913      	ldr	r1, [pc, #76]	; (1820c <z_cstart+0xd0>)
   181be:	9400      	str	r4, [sp, #0]
   181c0:	e9cd 4303 	strd	r4, r3, [sp, #12]
   181c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   181c8:	463b      	mov	r3, r7
   181ca:	e9cd 4401 	strd	r4, r4, [sp, #4]
   181ce:	4628      	mov	r0, r5
   181d0:	f000 f86e 	bl	182b0 <z_setup_new_thread>
   181d4:	7b6a      	ldrb	r2, [r5, #13]
   181d6:	4606      	mov	r6, r0
   181d8:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   181dc:	4628      	mov	r0, r5
   181de:	736a      	strb	r2, [r5, #13]
   181e0:	f004 ff93 	bl	1d10a <z_ready_thread>
	z_init_cpu(0);
   181e4:	4620      	mov	r0, r4
   181e6:	f7ff ff71 	bl	180cc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   181ea:	463a      	mov	r2, r7
   181ec:	4631      	mov	r1, r6
   181ee:	4628      	mov	r0, r5
   181f0:	f7fa fd52 	bl	12c98 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   181f4:	200030c0 	.word	0x200030c0
   181f8:	e000ed00 	.word	0xe000ed00
   181fc:	20001988 	.word	0x20001988
   18200:	00018081 	.word	0x00018081
   18204:	200008d8 	.word	0x200008d8
   18208:	0001dc3f 	.word	0x0001dc3f
   1820c:	200022c0 	.word	0x200022c0

00018210 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   18210:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18212:	4b0e      	ldr	r3, [pc, #56]	; (1824c <init_mem_slab_module+0x3c>)
   18214:	4c0e      	ldr	r4, [pc, #56]	; (18250 <init_mem_slab_module+0x40>)
   18216:	42a3      	cmp	r3, r4
   18218:	d301      	bcc.n	1821e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1821a:	2000      	movs	r0, #0
	return rc;
}
   1821c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1821e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   18222:	ea41 0200 	orr.w	r2, r1, r0
   18226:	f012 0203 	ands.w	r2, r2, #3
   1822a:	d10b      	bne.n	18244 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1822c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1822e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   18230:	42aa      	cmp	r2, r5
   18232:	d101      	bne.n	18238 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18234:	331c      	adds	r3, #28
   18236:	e7ee      	b.n	18216 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   18238:	695e      	ldr	r6, [r3, #20]
   1823a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1823c:	3201      	adds	r2, #1
		slab->free_list = p;
   1823e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   18240:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   18242:	e7f5      	b.n	18230 <init_mem_slab_module+0x20>
	return rc;
   18244:	f06f 0015 	mvn.w	r0, #21
   18248:	e7e8      	b.n	1821c <init_mem_slab_module+0xc>
   1824a:	bf00      	nop
   1824c:	20000590 	.word	0x20000590
   18250:	200005ac 	.word	0x200005ac

00018254 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   18254:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18256:	460c      	mov	r4, r1
	__asm__ volatile(
   18258:	f04f 0520 	mov.w	r5, #32
   1825c:	f3ef 8111 	mrs	r1, BASEPRI
   18260:	f385 8812 	msr	BASEPRI_MAX, r5
   18264:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   18268:	6945      	ldr	r5, [r0, #20]
   1826a:	b15d      	cbz	r5, 18284 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1826c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1826e:	682b      	ldr	r3, [r5, #0]
   18270:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   18272:	6983      	ldr	r3, [r0, #24]
   18274:	3301      	adds	r3, #1
   18276:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   18278:	2000      	movs	r0, #0
	__asm__ volatile(
   1827a:	f381 8811 	msr	BASEPRI, r1
   1827e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   18282:	e011      	b.n	182a8 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   18284:	ea52 0c03 	orrs.w	ip, r2, r3
   18288:	d103      	bne.n	18292 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1828a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1828c:	f06f 000b 	mvn.w	r0, #11
   18290:	e7f3      	b.n	1827a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   18292:	e9cd 2300 	strd	r2, r3, [sp]
   18296:	4602      	mov	r2, r0
   18298:	3008      	adds	r0, #8
   1829a:	f000 fcf7 	bl	18c8c <z_pend_curr>
		if (result == 0) {
   1829e:	b918      	cbnz	r0, 182a8 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   182a0:	4b02      	ldr	r3, [pc, #8]	; (182ac <k_mem_slab_alloc+0x58>)
   182a2:	689b      	ldr	r3, [r3, #8]
   182a4:	695b      	ldr	r3, [r3, #20]
   182a6:	6023      	str	r3, [r4, #0]
}
   182a8:	b003      	add	sp, #12
   182aa:	bd30      	pop	{r4, r5, pc}
   182ac:	20001988 	.word	0x20001988

000182b0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   182b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   182b4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   182b6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   182b8:	2604      	movs	r6, #4
   182ba:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   182bc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   182be:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   182c0:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   182c4:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   182c6:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   182c8:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   182cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   182ce:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   182d0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   182d4:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   182d6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   182da:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
   182de:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   182e0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   182e2:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   182e4:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   182e8:	9202      	str	r2, [sp, #8]
   182ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   182ec:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   182ee:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   182f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   182f2:	9200      	str	r2, [sp, #0]
   182f4:	4642      	mov	r2, r8
{
   182f6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   182f8:	f7fa fc9c 	bl	12c34 <arch_new_thread>
	if (!_current) {
   182fc:	4b04      	ldr	r3, [pc, #16]	; (18310 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   182fe:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   18300:	689b      	ldr	r3, [r3, #8]
   18302:	b103      	cbz	r3, 18306 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   18304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
   18306:	6723      	str	r3, [r4, #112]	; 0x70
}
   18308:	4640      	mov	r0, r8
   1830a:	b004      	add	sp, #16
   1830c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18310:	20001988 	.word	0x20001988

00018314 <z_impl_k_thread_create>:
{
   18314:	b5f0      	push	{r4, r5, r6, r7, lr}
   18316:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18318:	2700      	movs	r7, #0
   1831a:	9705      	str	r7, [sp, #20]
   1831c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1831e:	9704      	str	r7, [sp, #16]
   18320:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   18322:	9703      	str	r7, [sp, #12]
   18324:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   18326:	9702      	str	r7, [sp, #8]
{
   18328:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1832c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1832e:	9701      	str	r7, [sp, #4]
   18330:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   18332:	9700      	str	r7, [sp, #0]
{
   18334:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18336:	f7ff ffbb 	bl	182b0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1833a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1833e:	bf08      	it	eq
   18340:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   18344:	d005      	beq.n	18352 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18346:	ea55 0306 	orrs.w	r3, r5, r6
   1834a:	d105      	bne.n	18358 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1834c:	4620      	mov	r0, r4
   1834e:	f000 fc41 	bl	18bd4 <z_sched_start>
}
   18352:	4620      	mov	r0, r4
   18354:	b007      	add	sp, #28
   18356:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   18358:	4903      	ldr	r1, [pc, #12]	; (18368 <z_impl_k_thread_create+0x54>)
   1835a:	4632      	mov	r2, r6
   1835c:	462b      	mov	r3, r5
   1835e:	f104 0018 	add.w	r0, r4, #24
   18362:	f000 feb9 	bl	190d8 <z_add_timeout>
   18366:	e7f4      	b.n	18352 <z_impl_k_thread_create+0x3e>
   18368:	0001d12b 	.word	0x0001d12b

0001836c <z_init_static_threads>:
{
   1836c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18370:	4c29      	ldr	r4, [pc, #164]	; (18418 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   18372:	4d2a      	ldr	r5, [pc, #168]	; (1841c <z_init_static_threads+0xb0>)
{
   18374:	b087      	sub	sp, #28
   18376:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   18378:	42ae      	cmp	r6, r5
   1837a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1837e:	d30f      	bcc.n	183a0 <z_init_static_threads+0x34>
	k_sched_lock();
   18380:	f000 fb42 	bl	18a08 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   18384:	4c24      	ldr	r4, [pc, #144]	; (18418 <z_init_static_threads+0xac>)
   18386:	f8df 9098 	ldr.w	r9, [pc, #152]	; 18420 <z_init_static_threads+0xb4>
   1838a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1838e:	f240 37e7 	movw	r7, #999	; 0x3e7
   18392:	42ac      	cmp	r4, r5
   18394:	d320      	bcc.n	183d8 <z_init_static_threads+0x6c>
}
   18396:	b007      	add	sp, #28
   18398:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1839c:	f000 bd04 	b.w	18da8 <k_sched_unlock>
		z_setup_new_thread(
   183a0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   183a4:	9305      	str	r3, [sp, #20]
   183a6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   183aa:	9304      	str	r3, [sp, #16]
   183ac:	f854 3c14 	ldr.w	r3, [r4, #-20]
   183b0:	9303      	str	r3, [sp, #12]
   183b2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   183b6:	9302      	str	r3, [sp, #8]
   183b8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   183bc:	9301      	str	r3, [sp, #4]
   183be:	f854 3c20 	ldr.w	r3, [r4, #-32]
   183c2:	9300      	str	r3, [sp, #0]
   183c4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   183c8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   183cc:	f7ff ff70 	bl	182b0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   183d0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   183d4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   183d6:	e7ce      	b.n	18376 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   183d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   183da:	1c5a      	adds	r2, r3, #1
   183dc:	d00d      	beq.n	183fa <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   183de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   183e2:	2100      	movs	r1, #0
   183e4:	4638      	mov	r0, r7
   183e6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   183ea:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   183ee:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   183f2:	d104      	bne.n	183fe <z_init_static_threads+0x92>
	z_sched_start(thread);
   183f4:	4640      	mov	r0, r8
   183f6:	f000 fbed 	bl	18bd4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   183fa:	3430      	adds	r4, #48	; 0x30
   183fc:	e7c9      	b.n	18392 <z_init_static_threads+0x26>
   183fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18402:	2300      	movs	r3, #0
   18404:	f7f8 fa4a 	bl	1089c <__aeabi_uldivmod>
   18408:	4602      	mov	r2, r0
   1840a:	460b      	mov	r3, r1
   1840c:	f108 0018 	add.w	r0, r8, #24
   18410:	4649      	mov	r1, r9
   18412:	f000 fe61 	bl	190d8 <z_add_timeout>
   18416:	e7f0      	b.n	183fa <z_init_static_threads+0x8e>
   18418:	20000558 	.word	0x20000558
   1841c:	20000558 	.word	0x20000558
   18420:	0001d12b 	.word	0x0001d12b

00018424 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   18424:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   18426:	4c0b      	ldr	r4, [pc, #44]	; (18454 <idle+0x30>)
   18428:	4d0b      	ldr	r5, [pc, #44]	; (18458 <idle+0x34>)
	__asm__ volatile(
   1842a:	f04f 0220 	mov.w	r2, #32
   1842e:	f3ef 8311 	mrs	r3, BASEPRI
   18432:	f382 8812 	msr	BASEPRI_MAX, r2
   18436:	f3bf 8f6f 	isb	sy
   1843a:	f004 ff1d 	bl	1d278 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1843e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   18440:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   18442:	b913      	cbnz	r3, 1844a <idle+0x26>
	arch_cpu_idle();
   18444:	f7fa fb18 	bl	12a78 <arch_cpu_idle>
}
   18448:	e7ef      	b.n	1842a <idle+0x6>
   1844a:	f7fa fa49 	bl	128e0 <pm_system_suspend>
   1844e:	2800      	cmp	r0, #0
   18450:	d1eb      	bne.n	1842a <idle+0x6>
   18452:	e7f7      	b.n	18444 <idle+0x20>
   18454:	20001988 	.word	0x20001988
   18458:	20001a03 	.word	0x20001a03

0001845c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1845c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18460:	4604      	mov	r4, r0
   18462:	4617      	mov	r7, r2
   18464:	461e      	mov	r6, r3
   18466:	f04f 0320 	mov.w	r3, #32
   1846a:	f3ef 8811 	mrs	r8, BASEPRI
   1846e:	f383 8812 	msr	BASEPRI_MAX, r3
   18472:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   18476:	68c3      	ldr	r3, [r0, #12]
   18478:	4a32      	ldr	r2, [pc, #200]	; (18544 <z_impl_k_mutex_lock+0xe8>)
   1847a:	b16b      	cbz	r3, 18498 <z_impl_k_mutex_lock+0x3c>
   1847c:	6880      	ldr	r0, [r0, #8]
   1847e:	6891      	ldr	r1, [r2, #8]
   18480:	4288      	cmp	r0, r1
   18482:	d019      	beq.n	184b8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   18484:	ea57 0306 	orrs.w	r3, r7, r6
   18488:	d118      	bne.n	184bc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1848a:	f388 8811 	msr	BASEPRI, r8
   1848e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   18492:	f06f 000f 	mvn.w	r0, #15
   18496:	e00c      	b.n	184b2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   18498:	6891      	ldr	r1, [r2, #8]
   1849a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1849e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   184a0:	3301      	adds	r3, #1
   184a2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   184a4:	6893      	ldr	r3, [r2, #8]
   184a6:	60a3      	str	r3, [r4, #8]
   184a8:	f388 8811 	msr	BASEPRI, r8
   184ac:	f3bf 8f6f 	isb	sy
		return 0;
   184b0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   184b2:	b002      	add	sp, #8
   184b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   184b8:	6921      	ldr	r1, [r4, #16]
   184ba:	e7f0      	b.n	1849e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   184bc:	f991 100e 	ldrsb.w	r1, [r1, #14]
   184c0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   184c4:	4299      	cmp	r1, r3
   184c6:	bfa8      	it	ge
   184c8:	4619      	movge	r1, r3
   184ca:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   184ce:	4291      	cmp	r1, r2
   184d0:	bfb8      	it	lt
   184d2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   184d4:	428b      	cmp	r3, r1
   184d6:	dd2e      	ble.n	18536 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   184d8:	f004 fccb 	bl	1ce72 <adjust_owner_prio.isra.0>
   184dc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   184de:	e9cd 7600 	strd	r7, r6, [sp]
   184e2:	4819      	ldr	r0, [pc, #100]	; (18548 <z_impl_k_mutex_lock+0xec>)
   184e4:	4622      	mov	r2, r4
   184e6:	4641      	mov	r1, r8
   184e8:	f000 fbd0 	bl	18c8c <z_pend_curr>
	if (got_mutex == 0) {
   184ec:	2800      	cmp	r0, #0
   184ee:	d0e0      	beq.n	184b2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   184f0:	f04f 0320 	mov.w	r3, #32
   184f4:	f3ef 8611 	mrs	r6, BASEPRI
   184f8:	f383 8812 	msr	BASEPRI_MAX, r3
   184fc:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   18500:	6823      	ldr	r3, [r4, #0]
   18502:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18504:	429c      	cmp	r4, r3
   18506:	d00a      	beq.n	1851e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   18508:	b14b      	cbz	r3, 1851e <z_impl_k_mutex_lock+0xc2>
   1850a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1850e:	4299      	cmp	r1, r3
   18510:	bfa8      	it	ge
   18512:	4619      	movge	r1, r3
   18514:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   18518:	4299      	cmp	r1, r3
   1851a:	bfb8      	it	lt
   1851c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1851e:	68a0      	ldr	r0, [r4, #8]
   18520:	f004 fca7 	bl	1ce72 <adjust_owner_prio.isra.0>
   18524:	b900      	cbnz	r0, 18528 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   18526:	b145      	cbz	r5, 1853a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   18528:	4807      	ldr	r0, [pc, #28]	; (18548 <z_impl_k_mutex_lock+0xec>)
   1852a:	4631      	mov	r1, r6
   1852c:	f000 fa5a 	bl	189e4 <z_reschedule>
	return -EAGAIN;
   18530:	f06f 000a 	mvn.w	r0, #10
   18534:	e7bd      	b.n	184b2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   18536:	2500      	movs	r5, #0
   18538:	e7d1      	b.n	184de <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   1853a:	f386 8811 	msr	BASEPRI, r6
   1853e:	f3bf 8f6f 	isb	sy
   18542:	e7f5      	b.n	18530 <z_impl_k_mutex_lock+0xd4>
   18544:	20001988 	.word	0x20001988
   18548:	20001a04 	.word	0x20001a04

0001854c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1854c:	6883      	ldr	r3, [r0, #8]
{
   1854e:	b570      	push	{r4, r5, r6, lr}
   18550:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   18552:	b36b      	cbz	r3, 185b0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   18554:	4a19      	ldr	r2, [pc, #100]	; (185bc <z_impl_k_mutex_unlock+0x70>)
   18556:	6892      	ldr	r2, [r2, #8]
   18558:	4293      	cmp	r3, r2
   1855a:	d12c      	bne.n	185b6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1855c:	68c3      	ldr	r3, [r0, #12]
   1855e:	2b01      	cmp	r3, #1
   18560:	d903      	bls.n	1856a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   18562:	3b01      	subs	r3, #1
   18564:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   18566:	2000      	movs	r0, #0
}
   18568:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1856a:	f04f 0320 	mov.w	r3, #32
   1856e:	f3ef 8511 	mrs	r5, BASEPRI
   18572:	f383 8812 	msr	BASEPRI_MAX, r3
   18576:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1857a:	6901      	ldr	r1, [r0, #16]
   1857c:	6880      	ldr	r0, [r0, #8]
   1857e:	f004 fc78 	bl	1ce72 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   18582:	4620      	mov	r0, r4
   18584:	f004 fe1d 	bl	1d1c2 <z_unpend_first_thread>
	mutex->owner = new_owner;
   18588:	2600      	movs	r6, #0
   1858a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1858c:	b150      	cbz	r0, 185a4 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   1858e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   18592:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   18594:	6786      	str	r6, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   18596:	f004 fdb8 	bl	1d10a <z_ready_thread>
		z_reschedule(&lock, key);
   1859a:	4809      	ldr	r0, [pc, #36]	; (185c0 <z_impl_k_mutex_unlock+0x74>)
   1859c:	4629      	mov	r1, r5
   1859e:	f000 fa21 	bl	189e4 <z_reschedule>
   185a2:	e7e0      	b.n	18566 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   185a4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   185a6:	f385 8811 	msr	BASEPRI, r5
   185aa:	f3bf 8f6f 	isb	sy
   185ae:	e7da      	b.n	18566 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   185b0:	f06f 0015 	mvn.w	r0, #21
   185b4:	e7d8      	b.n	18568 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   185b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   185ba:	e7d5      	b.n	18568 <z_impl_k_mutex_unlock+0x1c>
   185bc:	20001988 	.word	0x20001988
   185c0:	20001a04 	.word	0x20001a04

000185c4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   185c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   185c6:	4611      	mov	r1, r2
	__asm__ volatile(
   185c8:	f04f 0220 	mov.w	r2, #32
   185cc:	f3ef 8511 	mrs	r5, BASEPRI
   185d0:	f382 8812 	msr	BASEPRI_MAX, r2
   185d4:	f3bf 8f6f 	isb	sy
   185d8:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   185da:	b19c      	cbz	r4, 18604 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   185dc:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   185de:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   185e0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   185e4:	4294      	cmp	r4, r2
	list->head = node;
   185e6:	6003      	str	r3, [r0, #0]
	list->tail = node;
   185e8:	bf08      	it	eq
   185ea:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   185ec:	2101      	movs	r1, #1
   185ee:	4620      	mov	r0, r4
   185f0:	f004 fcae 	bl	1cf50 <z_queue_node_peek>
   185f4:	4604      	mov	r4, r0
	__asm__ volatile(
   185f6:	f385 8811 	msr	BASEPRI, r5
   185fa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   185fe:	4620      	mov	r0, r4
   18600:	b003      	add	sp, #12
   18602:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18604:	ea51 0203 	orrs.w	r2, r1, r3
   18608:	d0f5      	beq.n	185f6 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1860a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1860e:	e9cd 1300 	strd	r1, r3, [sp]
   18612:	4610      	mov	r0, r2
   18614:	4629      	mov	r1, r5
   18616:	f000 fb39 	bl	18c8c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1861a:	2800      	cmp	r0, #0
   1861c:	d1ef      	bne.n	185fe <z_impl_k_queue_get+0x3a>
   1861e:	4b02      	ldr	r3, [pc, #8]	; (18628 <z_impl_k_queue_get+0x64>)
   18620:	689b      	ldr	r3, [r3, #8]
   18622:	695c      	ldr	r4, [r3, #20]
   18624:	e7eb      	b.n	185fe <z_impl_k_queue_get+0x3a>
   18626:	bf00      	nop
   18628:	20001988 	.word	0x20001988

0001862c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1862c:	b538      	push	{r3, r4, r5, lr}
   1862e:	4604      	mov	r4, r0
	__asm__ volatile(
   18630:	f04f 0320 	mov.w	r3, #32
   18634:	f3ef 8511 	mrs	r5, BASEPRI
   18638:	f383 8812 	msr	BASEPRI_MAX, r3
   1863c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   18640:	f004 fdbf 	bl	1d1c2 <z_unpend_first_thread>

	if (thread != NULL) {
   18644:	b148      	cbz	r0, 1865a <z_impl_k_sem_give+0x2e>
   18646:	2200      	movs	r2, #0
   18648:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1864a:	f004 fd5e 	bl	1d10a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1864e:	4629      	mov	r1, r5
   18650:	4805      	ldr	r0, [pc, #20]	; (18668 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   18652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   18656:	f000 b9c5 	b.w	189e4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1865a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1865e:	429a      	cmp	r2, r3
   18660:	bf18      	it	ne
   18662:	3301      	addne	r3, #1
   18664:	60a3      	str	r3, [r4, #8]
}
   18666:	e7f2      	b.n	1864e <z_impl_k_sem_give+0x22>
   18668:	20001a04 	.word	0x20001a04

0001866c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1866c:	b513      	push	{r0, r1, r4, lr}
   1866e:	f04f 0420 	mov.w	r4, #32
   18672:	f3ef 8111 	mrs	r1, BASEPRI
   18676:	f384 8812 	msr	BASEPRI_MAX, r4
   1867a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1867e:	6884      	ldr	r4, [r0, #8]
   18680:	b144      	cbz	r4, 18694 <z_impl_k_sem_take+0x28>
		sem->count--;
   18682:	3c01      	subs	r4, #1
   18684:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   18686:	f381 8811 	msr	BASEPRI, r1
   1868a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1868e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   18690:	b002      	add	sp, #8
   18692:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18694:	ea52 0403 	orrs.w	r4, r2, r3
   18698:	d106      	bne.n	186a8 <z_impl_k_sem_take+0x3c>
   1869a:	f381 8811 	msr	BASEPRI, r1
   1869e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   186a2:	f06f 000f 	mvn.w	r0, #15
   186a6:	e7f3      	b.n	18690 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   186a8:	e9cd 2300 	strd	r2, r3, [sp]
   186ac:	4602      	mov	r2, r0
   186ae:	4802      	ldr	r0, [pc, #8]	; (186b8 <z_impl_k_sem_take+0x4c>)
   186b0:	f000 faec 	bl	18c8c <z_pend_curr>
	return ret;
   186b4:	e7ec      	b.n	18690 <z_impl_k_sem_take+0x24>
   186b6:	bf00      	nop
   186b8:	20001a04 	.word	0x20001a04

000186bc <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   186bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   186c0:	4e47      	ldr	r6, [pc, #284]	; (187e0 <work_queue_main+0x124>)
   186c2:	b085      	sub	sp, #20
   186c4:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   186c6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   186ca:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   186ce:	f04f 0320 	mov.w	r3, #32
   186d2:	f3ef 8711 	mrs	r7, BASEPRI
   186d6:	f383 8812 	msr	BASEPRI_MAX, r3
   186da:	f3bf 8f6f 	isb	sy
   186de:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   186e2:	b98d      	cbnz	r5, 18708 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   186e4:	2102      	movs	r1, #2
   186e6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   186ea:	f004 fc54 	bl	1cf96 <flag_test_and_clear>
   186ee:	2800      	cmp	r0, #0
   186f0:	d135      	bne.n	1875e <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   186f2:	2300      	movs	r3, #0
   186f4:	e9cd 8900 	strd	r8, r9, [sp]
   186f8:	9302      	str	r3, [sp, #8]
   186fa:	f104 0288 	add.w	r2, r4, #136	; 0x88
   186fe:	4639      	mov	r1, r7
   18700:	4838      	ldr	r0, [pc, #224]	; (187e4 <work_queue_main+0x128>)
   18702:	f000 fc73 	bl	18fec <z_sched_wait>
			continue;
   18706:	e7e2      	b.n	186ce <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18708:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1870c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1870e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18712:	4295      	cmp	r5, r2
   18714:	d101      	bne.n	1871a <work_queue_main+0x5e>
	list->tail = node;
   18716:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1871a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1871e:	f043 0302 	orr.w	r3, r3, #2
   18722:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   18726:	68eb      	ldr	r3, [r5, #12]
   18728:	f023 0304 	bic.w	r3, r3, #4
   1872c:	f043 0301 	orr.w	r3, r3, #1
   18730:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   18732:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   18734:	f387 8811 	msr	BASEPRI, r7
   18738:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1873c:	4628      	mov	r0, r5
   1873e:	4798      	blx	r3
	__asm__ volatile(
   18740:	f04f 0320 	mov.w	r3, #32
   18744:	f3ef 8b11 	mrs	fp, BASEPRI
   18748:	f383 8812 	msr	BASEPRI_MAX, r3
   1874c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   18750:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18752:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   18754:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18758:	d40b      	bmi.n	18772 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   1875a:	60ea      	str	r2, [r5, #12]
   1875c:	e00e      	b.n	1877c <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1875e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   18762:	2200      	movs	r2, #0
   18764:	2101      	movs	r1, #1
   18766:	4628      	mov	r0, r5
   18768:	f004 fd53 	bl	1d212 <z_sched_wake>
   1876c:	2800      	cmp	r0, #0
   1876e:	d1f8      	bne.n	18762 <work_queue_main+0xa6>
   18770:	e7bf      	b.n	186f2 <work_queue_main+0x36>
	return list->head;
   18772:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   18774:	f023 0303 	bic.w	r3, r3, #3
   18778:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1877a:	b970      	cbnz	r0, 1879a <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   1877c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   18780:	f023 0302 	bic.w	r3, r3, #2
   18784:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   18788:	f38b 8811 	msr	BASEPRI, fp
   1878c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   18790:	05d8      	lsls	r0, r3, #23
   18792:	d49c      	bmi.n	186ce <work_queue_main+0x12>
	z_impl_k_yield();
   18794:	f000 fb30 	bl	18df8 <z_impl_k_yield>
}
   18798:	e799      	b.n	186ce <work_queue_main+0x12>
	return node->next;
   1879a:	2700      	movs	r7, #0
   1879c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   187a0:	463b      	mov	r3, r7
		if (wc->work == work) {
   187a2:	6842      	ldr	r2, [r0, #4]
   187a4:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   187a6:	4601      	mov	r1, r0
		if (wc->work == work) {
   187a8:	d10c      	bne.n	187c4 <work_queue_main+0x108>
	return node->next;
   187aa:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   187ac:	b997      	cbnz	r7, 187d4 <work_queue_main+0x118>
   187ae:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   187b0:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   187b2:	4282      	cmp	r2, r0
   187b4:	d100      	bne.n	187b8 <work_queue_main+0xfc>
	list->tail = node;
   187b6:	6071      	str	r1, [r6, #4]
	parent->next = child;
   187b8:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   187bc:	f7ff ff36 	bl	1862c <z_impl_k_sem_give>
}
   187c0:	4639      	mov	r1, r7
   187c2:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   187c4:	f1ba 0f00 	cmp.w	sl, #0
   187c8:	d0d8      	beq.n	1877c <work_queue_main+0xc0>
	return node->next;
   187ca:	4650      	mov	r0, sl
   187cc:	460f      	mov	r7, r1
   187ce:	f8da a000 	ldr.w	sl, [sl]
   187d2:	e7e6      	b.n	187a2 <work_queue_main+0xe6>
	return list->tail;
   187d4:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   187d6:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   187d8:	4290      	cmp	r0, r2
	list->tail = node;
   187da:	bf08      	it	eq
   187dc:	6077      	streq	r7, [r6, #4]
}
   187de:	e7eb      	b.n	187b8 <work_queue_main+0xfc>
   187e0:	200019b0 	.word	0x200019b0
   187e4:	20001a04 	.word	0x20001a04

000187e8 <submit_to_queue_locked>:
{
   187e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   187ea:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   187ec:	079a      	lsls	r2, r3, #30
{
   187ee:	4604      	mov	r4, r0
   187f0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   187f2:	f3c3 0540 	ubfx	r5, r3, #1, #1
   187f6:	d41f      	bmi.n	18838 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   187f8:	075f      	lsls	r7, r3, #29
   187fa:	d41f      	bmi.n	1883c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   187fc:	680a      	ldr	r2, [r1, #0]
   187fe:	b90a      	cbnz	r2, 18804 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   18800:	6882      	ldr	r2, [r0, #8]
   18802:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   18804:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   18806:	bf44      	itt	mi
   18808:	68a3      	ldrmi	r3, [r4, #8]
   1880a:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1880c:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1880e:	bf4c      	ite	mi
   18810:	2502      	movmi	r5, #2
		ret = 1;
   18812:	2501      	movpl	r5, #1
	if (queue == NULL) {
   18814:	b37f      	cbz	r7, 18876 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18816:	4b1b      	ldr	r3, [pc, #108]	; (18884 <submit_to_queue_locked+0x9c>)
   18818:	689b      	ldr	r3, [r3, #8]
   1881a:	42bb      	cmp	r3, r7
   1881c:	d111      	bne.n	18842 <submit_to_queue_locked+0x5a>
   1881e:	f004 fb16 	bl	1ce4e <k_is_in_isr>
   18822:	f080 0001 	eor.w	r0, r0, #1
   18826:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   18828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1882c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1882e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18832:	d523      	bpl.n	1887c <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   18834:	b13a      	cbz	r2, 18846 <submit_to_queue_locked+0x5e>
   18836:	b940      	cbnz	r0, 1884a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   18838:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1883c:	2300      	movs	r3, #0
   1883e:	6033      	str	r3, [r6, #0]
	return ret;
   18840:	e013      	b.n	1886a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18842:	2000      	movs	r0, #0
   18844:	e7f0      	b.n	18828 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   18846:	071b      	lsls	r3, r3, #28
   18848:	d4f6      	bmi.n	18838 <submit_to_queue_locked+0x50>
	parent->next = child;
   1884a:	2300      	movs	r3, #0
   1884c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1884e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   18852:	b963      	cbnz	r3, 1886e <submit_to_queue_locked+0x86>
	list->head = node;
   18854:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   18858:	4638      	mov	r0, r7
   1885a:	f004 fba7 	bl	1cfac <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1885e:	68e3      	ldr	r3, [r4, #12]
   18860:	f043 0304 	orr.w	r3, r3, #4
   18864:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   18866:	6833      	ldr	r3, [r6, #0]
   18868:	60a3      	str	r3, [r4, #8]
}
   1886a:	4628      	mov	r0, r5
   1886c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1886e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18870:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   18874:	e7f0      	b.n	18858 <submit_to_queue_locked+0x70>
		return -EINVAL;
   18876:	f06f 0515 	mvn.w	r5, #21
   1887a:	e7df      	b.n	1883c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1887c:	f06f 0512 	mvn.w	r5, #18
   18880:	e7dc      	b.n	1883c <submit_to_queue_locked+0x54>
   18882:	bf00      	nop
   18884:	20001988 	.word	0x20001988

00018888 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   18888:	b5f0      	push	{r4, r5, r6, r7, lr}
   1888a:	b089      	sub	sp, #36	; 0x24
   1888c:	4604      	mov	r4, r0
	list->head = NULL;
   1888e:	2000      	movs	r0, #0
	list->tail = NULL;
   18890:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   18894:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   18896:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1889a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1889e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   188a2:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   188a6:	b31d      	cbz	r5, 188f0 <k_work_queue_start+0x68>
   188a8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   188aa:	2800      	cmp	r0, #0
   188ac:	f240 1001 	movw	r0, #257	; 0x101
   188b0:	bf08      	it	eq
   188b2:	2001      	moveq	r0, #1
	*flagp = flags;
   188b4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   188b8:	2000      	movs	r0, #0
   188ba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   188be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   188c2:	e9cd 3003 	strd	r3, r0, [sp, #12]
   188c6:	e9cd 0001 	strd	r0, r0, [sp, #4]
   188ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
   188ce:	4b09      	ldr	r3, [pc, #36]	; (188f4 <k_work_queue_start+0x6c>)
   188d0:	9400      	str	r4, [sp, #0]
   188d2:	4620      	mov	r0, r4
   188d4:	f7ff fd1e 	bl	18314 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   188d8:	b125      	cbz	r5, 188e4 <k_work_queue_start+0x5c>
   188da:	6829      	ldr	r1, [r5, #0]
   188dc:	b111      	cbz	r1, 188e4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   188de:	4620      	mov	r0, r4
   188e0:	f004 fabb 	bl	1ce5a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   188e4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   188e6:	b009      	add	sp, #36	; 0x24
   188e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   188ec:	f004 bab8 	b.w	1ce60 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   188f0:	2001      	movs	r0, #1
   188f2:	e7df      	b.n	188b4 <k_work_queue_start+0x2c>
   188f4:	000186bd 	.word	0x000186bd

000188f8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   188f8:	b513      	push	{r0, r1, r4, lr}
   188fa:	9001      	str	r0, [sp, #4]
   188fc:	4608      	mov	r0, r1
	__asm__ volatile(
   188fe:	f04f 0120 	mov.w	r1, #32
   18902:	f3ef 8411 	mrs	r4, BASEPRI
   18906:	f381 8812 	msr	BASEPRI_MAX, r1
   1890a:	f3bf 8f6f 	isb	sy
	return *flagp;
   1890e:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   18910:	f011 0f0e 	tst.w	r1, #14
   18914:	d116      	bne.n	18944 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18916:	ea53 0c02 	orrs.w	ip, r3, r2
   1891a:	d108      	bne.n	1892e <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1891c:	a901      	add	r1, sp, #4
   1891e:	f7ff ff63 	bl	187e8 <submit_to_queue_locked>
	__asm__ volatile(
   18922:	f384 8811 	msr	BASEPRI, r4
   18926:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1892a:	b002      	add	sp, #8
   1892c:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   1892e:	f041 0108 	orr.w	r1, r1, #8
   18932:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   18934:	9901      	ldr	r1, [sp, #4]
   18936:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   18938:	3010      	adds	r0, #16
   1893a:	4903      	ldr	r1, [pc, #12]	; (18948 <k_work_schedule_for_queue+0x50>)
   1893c:	f000 fbcc 	bl	190d8 <z_add_timeout>
	return ret;
   18940:	2001      	movs	r0, #1
   18942:	e7ee      	b.n	18922 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   18944:	2000      	movs	r0, #0
   18946:	e7ec      	b.n	18922 <k_work_schedule_for_queue+0x2a>
   18948:	0001cfbb 	.word	0x0001cfbb

0001894c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1894c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1894e:	4801      	ldr	r0, [pc, #4]	; (18954 <k_work_schedule+0x8>)
   18950:	f7ff bfd2 	b.w	188f8 <k_work_schedule_for_queue>
   18954:	20000960 	.word	0x20000960

00018958 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   18958:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1895a:	4d07      	ldr	r5, [pc, #28]	; (18978 <z_reset_time_slice+0x20>)
   1895c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1895e:	b154      	cbz	r4, 18976 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   18960:	f7fc fc48 	bl	151f4 <sys_clock_elapsed>
   18964:	4b05      	ldr	r3, [pc, #20]	; (1897c <z_reset_time_slice+0x24>)
   18966:	4404      	add	r4, r0
   18968:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1896a:	6828      	ldr	r0, [r5, #0]
   1896c:	2100      	movs	r1, #0
	}
}
   1896e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   18972:	f004 bc91 	b.w	1d298 <z_set_timeout_expiry>
}
   18976:	bd38      	pop	{r3, r4, r5, pc}
   18978:	200019c0 	.word	0x200019c0
   1897c:	20001988 	.word	0x20001988

00018980 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   18980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18982:	4604      	mov	r4, r0
   18984:	460d      	mov	r5, r1
	__asm__ volatile(
   18986:	f04f 0320 	mov.w	r3, #32
   1898a:	f3ef 8711 	mrs	r7, BASEPRI
   1898e:	f383 8812 	msr	BASEPRI_MAX, r3
   18992:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   18996:	4e10      	ldr	r6, [pc, #64]	; (189d8 <k_sched_time_slice_set+0x58>)
   18998:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1899a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1899e:	f240 30e7 	movw	r0, #999	; 0x3e7
   189a2:	6131      	str	r1, [r6, #16]
   189a4:	2300      	movs	r3, #0
   189a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   189aa:	fbe4 010c 	umlal	r0, r1, r4, ip
   189ae:	f7f7 ff75 	bl	1089c <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   189b2:	2c00      	cmp	r4, #0
   189b4:	4b09      	ldr	r3, [pc, #36]	; (189dc <k_sched_time_slice_set+0x5c>)
   189b6:	dc0a      	bgt.n	189ce <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   189b8:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   189ba:	4b09      	ldr	r3, [pc, #36]	; (189e0 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   189bc:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   189be:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   189c0:	f7ff ffca 	bl	18958 <z_reset_time_slice>
	__asm__ volatile(
   189c4:	f387 8811 	msr	BASEPRI, r7
   189c8:	f3bf 8f6f 	isb	sy
	}
}
   189cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   189ce:	2802      	cmp	r0, #2
   189d0:	bfb8      	it	lt
   189d2:	2002      	movlt	r0, #2
   189d4:	e7f0      	b.n	189b8 <k_sched_time_slice_set+0x38>
   189d6:	bf00      	nop
   189d8:	20001988 	.word	0x20001988
   189dc:	200019c0 	.word	0x200019c0
   189e0:	200019bc 	.word	0x200019bc

000189e4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   189e4:	b949      	cbnz	r1, 189fa <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   189e6:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   189ea:	b930      	cbnz	r0, 189fa <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   189ec:	4b05      	ldr	r3, [pc, #20]	; (18a04 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   189ee:	69da      	ldr	r2, [r3, #28]
   189f0:	689b      	ldr	r3, [r3, #8]
   189f2:	429a      	cmp	r2, r3
   189f4:	d001      	beq.n	189fa <z_reschedule+0x16>
	ret = arch_swap(key);
   189f6:	f7fa b8c9 	b.w	12b8c <arch_swap>
   189fa:	f381 8811 	msr	BASEPRI, r1
   189fe:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   18a02:	4770      	bx	lr
   18a04:	20001988 	.word	0x20001988

00018a08 <k_sched_lock>:
	__asm__ volatile(
   18a08:	f04f 0320 	mov.w	r3, #32
   18a0c:	f3ef 8111 	mrs	r1, BASEPRI
   18a10:	f383 8812 	msr	BASEPRI_MAX, r3
   18a14:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   18a18:	4b04      	ldr	r3, [pc, #16]	; (18a2c <k_sched_lock+0x24>)
   18a1a:	689a      	ldr	r2, [r3, #8]
   18a1c:	7bd3      	ldrb	r3, [r2, #15]
   18a1e:	3b01      	subs	r3, #1
   18a20:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   18a22:	f381 8811 	msr	BASEPRI, r1
   18a26:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   18a2a:	4770      	bx	lr
   18a2c:	20001988 	.word	0x20001988

00018a30 <update_cache>:
{
   18a30:	b538      	push	{r3, r4, r5, lr}
   18a32:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   18a34:	480c      	ldr	r0, [pc, #48]	; (18a68 <update_cache+0x38>)
   18a36:	4d0d      	ldr	r5, [pc, #52]	; (18a6c <update_cache+0x3c>)
   18a38:	f004 fb61 	bl	1d0fe <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   18a3c:	4604      	mov	r4, r0
   18a3e:	b900      	cbnz	r0, 18a42 <update_cache+0x12>
   18a40:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   18a42:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   18a44:	b94a      	cbnz	r2, 18a5a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   18a46:	7b5a      	ldrb	r2, [r3, #13]
   18a48:	06d2      	lsls	r2, r2, #27
   18a4a:	d106      	bne.n	18a5a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   18a4c:	69a2      	ldr	r2, [r4, #24]
   18a4e:	b922      	cbnz	r2, 18a5a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   18a50:	89da      	ldrh	r2, [r3, #14]
   18a52:	2a7f      	cmp	r2, #127	; 0x7f
   18a54:	d901      	bls.n	18a5a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   18a56:	61eb      	str	r3, [r5, #28]
}
   18a58:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   18a5a:	429c      	cmp	r4, r3
   18a5c:	d002      	beq.n	18a64 <update_cache+0x34>
			z_reset_time_slice(thread);
   18a5e:	4620      	mov	r0, r4
   18a60:	f7ff ff7a 	bl	18958 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   18a64:	61ec      	str	r4, [r5, #28]
}
   18a66:	e7f7      	b.n	18a58 <update_cache+0x28>
   18a68:	200019a8 	.word	0x200019a8
   18a6c:	20001988 	.word	0x20001988

00018a70 <move_thread_to_end_of_prio_q>:
{
   18a70:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   18a72:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   18a76:	7b43      	ldrb	r3, [r0, #13]
   18a78:	2a00      	cmp	r2, #0
{
   18a7a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   18a7c:	da04      	bge.n	18a88 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18a82:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   18a84:	f004 faef 	bl	1d066 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   18a88:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   18a8a:	4a15      	ldr	r2, [pc, #84]	; (18ae0 <move_thread_to_end_of_prio_q+0x70>)
   18a8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18a90:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   18a92:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18a96:	f102 0520 	add.w	r5, r2, #32
   18a9a:	42ab      	cmp	r3, r5
   18a9c:	d01b      	beq.n	18ad6 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18a9e:	b1d3      	cbz	r3, 18ad6 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   18aa0:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   18aa4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   18aa8:	4286      	cmp	r6, r0
   18aaa:	d00f      	beq.n	18acc <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   18aac:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   18aae:	2800      	cmp	r0, #0
   18ab0:	dd0c      	ble.n	18acc <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   18ab2:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   18ab4:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   18ab8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   18aba:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   18abc:	6890      	ldr	r0, [r2, #8]
   18abe:	1a43      	subs	r3, r0, r1
   18ac0:	4258      	negs	r0, r3
}
   18ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   18ac6:	4158      	adcs	r0, r3
   18ac8:	f7ff bfb2 	b.w	18a30 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18acc:	42a3      	cmp	r3, r4
   18ace:	d002      	beq.n	18ad6 <move_thread_to_end_of_prio_q+0x66>
   18ad0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18ad2:	2b00      	cmp	r3, #0
   18ad4:	d1e6      	bne.n	18aa4 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   18ad6:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   18ada:	6021      	str	r1, [r4, #0]
	list->tail = node;
   18adc:	6251      	str	r1, [r2, #36]	; 0x24
}
   18ade:	e7ed      	b.n	18abc <move_thread_to_end_of_prio_q+0x4c>
   18ae0:	20001988 	.word	0x20001988

00018ae4 <z_time_slice>:
{
   18ae4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18ae6:	f04f 0320 	mov.w	r3, #32
   18aea:	f3ef 8511 	mrs	r5, BASEPRI
   18aee:	f383 8812 	msr	BASEPRI_MAX, r3
   18af2:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   18af6:	4b17      	ldr	r3, [pc, #92]	; (18b54 <z_time_slice+0x70>)
   18af8:	4a17      	ldr	r2, [pc, #92]	; (18b58 <z_time_slice+0x74>)
   18afa:	689c      	ldr	r4, [r3, #8]
   18afc:	6811      	ldr	r1, [r2, #0]
   18afe:	428c      	cmp	r4, r1
   18b00:	d107      	bne.n	18b12 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   18b02:	4620      	mov	r0, r4
   18b04:	f7ff ff28 	bl	18958 <z_reset_time_slice>
	__asm__ volatile(
   18b08:	f385 8811 	msr	BASEPRI, r5
   18b0c:	f3bf 8f6f 	isb	sy
}
   18b10:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   18b12:	2100      	movs	r1, #0
   18b14:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   18b16:	4a11      	ldr	r2, [pc, #68]	; (18b5c <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   18b18:	6812      	ldr	r2, [r2, #0]
   18b1a:	b1c2      	cbz	r2, 18b4e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   18b1c:	89e2      	ldrh	r2, [r4, #14]
   18b1e:	2a7f      	cmp	r2, #127	; 0x7f
   18b20:	d815      	bhi.n	18b4e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   18b22:	7b62      	ldrb	r2, [r4, #13]
   18b24:	06d2      	lsls	r2, r2, #27
   18b26:	d112      	bne.n	18b4e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   18b28:	4a0d      	ldr	r2, [pc, #52]	; (18b60 <z_time_slice+0x7c>)
   18b2a:	f994 100e 	ldrsb.w	r1, [r4, #14]
   18b2e:	6812      	ldr	r2, [r2, #0]
   18b30:	4291      	cmp	r1, r2
   18b32:	db0c      	blt.n	18b4e <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   18b34:	4a0b      	ldr	r2, [pc, #44]	; (18b64 <z_time_slice+0x80>)
   18b36:	4294      	cmp	r4, r2
   18b38:	d009      	beq.n	18b4e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   18b3a:	691a      	ldr	r2, [r3, #16]
   18b3c:	4282      	cmp	r2, r0
   18b3e:	dc03      	bgt.n	18b48 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   18b40:	4620      	mov	r0, r4
   18b42:	f7ff ff95 	bl	18a70 <move_thread_to_end_of_prio_q>
   18b46:	e7dc      	b.n	18b02 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   18b48:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   18b4a:	611a      	str	r2, [r3, #16]
   18b4c:	e7dc      	b.n	18b08 <z_time_slice+0x24>
   18b4e:	2200      	movs	r2, #0
   18b50:	e7fb      	b.n	18b4a <z_time_slice+0x66>
   18b52:	bf00      	nop
   18b54:	20001988 	.word	0x20001988
   18b58:	200019b8 	.word	0x200019b8
   18b5c:	200019c0 	.word	0x200019c0
   18b60:	200019bc 	.word	0x200019bc
   18b64:	20000858 	.word	0x20000858

00018b68 <ready_thread>:
{
   18b68:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   18b6a:	f990 200d 	ldrsb.w	r2, [r0, #13]
   18b6e:	7b43      	ldrb	r3, [r0, #13]
   18b70:	2a00      	cmp	r2, #0
   18b72:	db2a      	blt.n	18bca <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18b74:	06da      	lsls	r2, r3, #27
   18b76:	d128      	bne.n	18bca <ready_thread+0x62>
   18b78:	6982      	ldr	r2, [r0, #24]
   18b7a:	bb32      	cbnz	r2, 18bca <ready_thread+0x62>
	return list->head == list;
   18b7c:	4a14      	ldr	r2, [pc, #80]	; (18bd0 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   18b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18b82:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   18b84:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b88:	f102 0520 	add.w	r5, r2, #32
   18b8c:	42ab      	cmp	r3, r5
   18b8e:	d017      	beq.n	18bc0 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18b90:	b1b3      	cbz	r3, 18bc0 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   18b92:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   18b96:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   18b9a:	428e      	cmp	r6, r1
   18b9c:	d00b      	beq.n	18bb6 <ready_thread+0x4e>
		return b2 - b1;
   18b9e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   18ba0:	2900      	cmp	r1, #0
   18ba2:	dd08      	ble.n	18bb6 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   18ba4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18ba6:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   18baa:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   18bac:	6058      	str	r0, [r3, #4]
}
   18bae:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   18bb0:	2000      	movs	r0, #0
   18bb2:	f7ff bf3d 	b.w	18a30 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18bb6:	42a3      	cmp	r3, r4
   18bb8:	d002      	beq.n	18bc0 <ready_thread+0x58>
   18bba:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18bbc:	2b00      	cmp	r3, #0
   18bbe:	d1ea      	bne.n	18b96 <ready_thread+0x2e>
	node->prev = tail;
   18bc0:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   18bc4:	6020      	str	r0, [r4, #0]
	list->tail = node;
   18bc6:	6250      	str	r0, [r2, #36]	; 0x24
}
   18bc8:	e7f1      	b.n	18bae <ready_thread+0x46>
}
   18bca:	bc70      	pop	{r4, r5, r6}
   18bcc:	4770      	bx	lr
   18bce:	bf00      	nop
   18bd0:	20001988 	.word	0x20001988

00018bd4 <z_sched_start>:
{
   18bd4:	b510      	push	{r4, lr}
	__asm__ volatile(
   18bd6:	f04f 0220 	mov.w	r2, #32
   18bda:	f3ef 8411 	mrs	r4, BASEPRI
   18bde:	f382 8812 	msr	BASEPRI_MAX, r2
   18be2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   18be6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   18be8:	0751      	lsls	r1, r2, #29
   18bea:	d404      	bmi.n	18bf6 <z_sched_start+0x22>
	__asm__ volatile(
   18bec:	f384 8811 	msr	BASEPRI, r4
   18bf0:	f3bf 8f6f 	isb	sy
}
   18bf4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18bf6:	f022 0204 	bic.w	r2, r2, #4
   18bfa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   18bfc:	f7ff ffb4 	bl	18b68 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   18c00:	4621      	mov	r1, r4
   18c02:	4802      	ldr	r0, [pc, #8]	; (18c0c <z_sched_start+0x38>)
}
   18c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   18c08:	f7ff beec 	b.w	189e4 <z_reschedule>
   18c0c:	20001a04 	.word	0x20001a04

00018c10 <unready_thread>:
{
   18c10:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   18c12:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   18c16:	7b43      	ldrb	r3, [r0, #13]
   18c18:	2a00      	cmp	r2, #0
{
   18c1a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   18c1c:	da04      	bge.n	18c28 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18c22:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18c24:	f004 fa1f 	bl	1d066 <sys_dlist_remove>
	update_cache(thread == _current);
   18c28:	4b04      	ldr	r3, [pc, #16]	; (18c3c <unready_thread+0x2c>)
   18c2a:	6898      	ldr	r0, [r3, #8]
   18c2c:	1a43      	subs	r3, r0, r1
   18c2e:	4258      	negs	r0, r3
   18c30:	4158      	adcs	r0, r3
}
   18c32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   18c36:	f7ff befb 	b.w	18a30 <update_cache>
   18c3a:	bf00      	nop
   18c3c:	20001988 	.word	0x20001988

00018c40 <pend>:
{
   18c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c44:	4606      	mov	r6, r0
   18c46:	4615      	mov	r5, r2
   18c48:	461c      	mov	r4, r3
	__asm__ volatile(
   18c4a:	f04f 0320 	mov.w	r3, #32
   18c4e:	f3ef 8711 	mrs	r7, BASEPRI
   18c52:	f383 8812 	msr	BASEPRI_MAX, r3
   18c56:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   18c5a:	f004 fa88 	bl	1d16e <add_to_waitq_locked>
	__asm__ volatile(
   18c5e:	f387 8811 	msr	BASEPRI, r7
   18c62:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18c66:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   18c6a:	bf08      	it	eq
   18c6c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   18c70:	d008      	beq.n	18c84 <pend+0x44>
   18c72:	462a      	mov	r2, r5
   18c74:	4623      	mov	r3, r4
   18c76:	f106 0018 	add.w	r0, r6, #24
   18c7a:	4903      	ldr	r1, [pc, #12]	; (18c88 <pend+0x48>)
}
   18c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18c80:	f000 ba2a 	b.w	190d8 <z_add_timeout>
   18c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18c88:	0001d12b 	.word	0x0001d12b

00018c8c <z_pend_curr>:
{
   18c8c:	b510      	push	{r4, lr}
	pending_current = _current;
   18c8e:	4b07      	ldr	r3, [pc, #28]	; (18cac <z_pend_curr+0x20>)
   18c90:	6898      	ldr	r0, [r3, #8]
   18c92:	4b07      	ldr	r3, [pc, #28]	; (18cb0 <z_pend_curr+0x24>)
{
   18c94:	460c      	mov	r4, r1
	pending_current = _current;
   18c96:	6018      	str	r0, [r3, #0]
{
   18c98:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   18c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18c9e:	f7ff ffcf 	bl	18c40 <pend>
   18ca2:	4620      	mov	r0, r4
}
   18ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18ca8:	f7f9 bf70 	b.w	12b8c <arch_swap>
   18cac:	20001988 	.word	0x20001988
   18cb0:	200019b8 	.word	0x200019b8

00018cb4 <z_set_prio>:
{
   18cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18cb6:	4604      	mov	r4, r0
	__asm__ volatile(
   18cb8:	f04f 0320 	mov.w	r3, #32
   18cbc:	f3ef 8611 	mrs	r6, BASEPRI
   18cc0:	f383 8812 	msr	BASEPRI_MAX, r3
   18cc4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   18cc8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18cca:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   18ccc:	b249      	sxtb	r1, r1
   18cce:	d133      	bne.n	18d38 <z_set_prio+0x84>
		if (need_sched) {
   18cd0:	6982      	ldr	r2, [r0, #24]
   18cd2:	bb8a      	cbnz	r2, 18d38 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18cd8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18cda:	f004 f9c4 	bl	1d066 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   18cde:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   18ce0:	4a17      	ldr	r2, [pc, #92]	; (18d40 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   18ce2:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   18ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18ce8:	7343      	strb	r3, [r0, #13]
   18cea:	4610      	mov	r0, r2
   18cec:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18cf0:	4283      	cmp	r3, r0
   18cf2:	d01b      	beq.n	18d2c <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18cf4:	b1d3      	cbz	r3, 18d2c <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   18cf6:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   18cf8:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   18cfc:	42a9      	cmp	r1, r5
   18cfe:	d010      	beq.n	18d22 <z_set_prio+0x6e>
		return b2 - b1;
   18d00:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   18d02:	2d00      	cmp	r5, #0
   18d04:	dd0d      	ble.n	18d22 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   18d06:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18d08:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   18d0c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18d0e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   18d10:	2001      	movs	r0, #1
   18d12:	f7ff fe8d 	bl	18a30 <update_cache>
   18d16:	2001      	movs	r0, #1
	__asm__ volatile(
   18d18:	f386 8811 	msr	BASEPRI, r6
   18d1c:	f3bf 8f6f 	isb	sy
}
   18d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   18d22:	42bb      	cmp	r3, r7
   18d24:	d002      	beq.n	18d2c <z_set_prio+0x78>
   18d26:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18d28:	2b00      	cmp	r3, #0
   18d2a:	d1e5      	bne.n	18cf8 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   18d2c:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   18d2e:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   18d32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18d34:	6254      	str	r4, [r2, #36]	; 0x24
}
   18d36:	e7eb      	b.n	18d10 <z_set_prio+0x5c>
			thread->base.prio = prio;
   18d38:	73a1      	strb	r1, [r4, #14]
   18d3a:	2000      	movs	r0, #0
   18d3c:	e7ec      	b.n	18d18 <z_set_prio+0x64>
   18d3e:	bf00      	nop
   18d40:	20001988 	.word	0x20001988

00018d44 <z_impl_k_thread_suspend>:
{
   18d44:	b570      	push	{r4, r5, r6, lr}
   18d46:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   18d48:	3018      	adds	r0, #24
   18d4a:	f004 fa7f 	bl	1d24c <z_abort_timeout>
	__asm__ volatile(
   18d4e:	f04f 0320 	mov.w	r3, #32
   18d52:	f3ef 8611 	mrs	r6, BASEPRI
   18d56:	f383 8812 	msr	BASEPRI_MAX, r3
   18d5a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   18d5e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   18d62:	7b63      	ldrb	r3, [r4, #13]
   18d64:	2a00      	cmp	r2, #0
   18d66:	da05      	bge.n	18d74 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18d6c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18d6e:	4620      	mov	r0, r4
   18d70:	f004 f979 	bl	1d066 <sys_dlist_remove>
		update_cache(thread == _current);
   18d74:	4d0b      	ldr	r5, [pc, #44]	; (18da4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18d76:	7b63      	ldrb	r3, [r4, #13]
   18d78:	68a8      	ldr	r0, [r5, #8]
   18d7a:	f043 0310 	orr.w	r3, r3, #16
   18d7e:	7363      	strb	r3, [r4, #13]
   18d80:	1b03      	subs	r3, r0, r4
   18d82:	4258      	negs	r0, r3
   18d84:	4158      	adcs	r0, r3
   18d86:	f7ff fe53 	bl	18a30 <update_cache>
	__asm__ volatile(
   18d8a:	f386 8811 	msr	BASEPRI, r6
   18d8e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   18d92:	68ab      	ldr	r3, [r5, #8]
   18d94:	42a3      	cmp	r3, r4
   18d96:	d103      	bne.n	18da0 <z_impl_k_thread_suspend+0x5c>
}
   18d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   18d9c:	f004 b9a5 	b.w	1d0ea <z_reschedule_unlocked>
}
   18da0:	bd70      	pop	{r4, r5, r6, pc}
   18da2:	bf00      	nop
   18da4:	20001988 	.word	0x20001988

00018da8 <k_sched_unlock>:
{
   18da8:	b510      	push	{r4, lr}
	__asm__ volatile(
   18daa:	f04f 0320 	mov.w	r3, #32
   18dae:	f3ef 8411 	mrs	r4, BASEPRI
   18db2:	f383 8812 	msr	BASEPRI_MAX, r3
   18db6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   18dba:	4b08      	ldr	r3, [pc, #32]	; (18ddc <k_sched_unlock+0x34>)
   18dbc:	689a      	ldr	r2, [r3, #8]
   18dbe:	7bd3      	ldrb	r3, [r2, #15]
   18dc0:	3301      	adds	r3, #1
   18dc2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   18dc4:	2000      	movs	r0, #0
   18dc6:	f7ff fe33 	bl	18a30 <update_cache>
	__asm__ volatile(
   18dca:	f384 8811 	msr	BASEPRI, r4
   18dce:	f3bf 8f6f 	isb	sy
}
   18dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   18dd6:	f004 b988 	b.w	1d0ea <z_reschedule_unlocked>
   18dda:	bf00      	nop
   18ddc:	20001988 	.word	0x20001988

00018de0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   18de0:	4b04      	ldr	r3, [pc, #16]	; (18df4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   18de2:	2100      	movs	r1, #0
   18de4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   18de8:	e9c3 2208 	strd	r2, r2, [r3, #32]
   18dec:	4608      	mov	r0, r1
   18dee:	f7ff bdc7 	b.w	18980 <k_sched_time_slice_set>
   18df2:	bf00      	nop
   18df4:	20001988 	.word	0x20001988

00018df8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   18df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   18dfa:	f04f 0320 	mov.w	r3, #32
   18dfe:	f3ef 8511 	mrs	r5, BASEPRI
   18e02:	f383 8812 	msr	BASEPRI_MAX, r3
   18e06:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   18e0a:	491a      	ldr	r1, [pc, #104]	; (18e74 <z_impl_k_yield+0x7c>)
   18e0c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18e0e:	7b43      	ldrb	r3, [r0, #13]
   18e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18e14:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18e16:	f004 f926 	bl	1d066 <sys_dlist_remove>
	}
	queue_thread(_current);
   18e1a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   18e1c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   18e1e:	4608      	mov	r0, r1
   18e20:	f062 027f 	orn	r2, r2, #127	; 0x7f
   18e24:	735a      	strb	r2, [r3, #13]
   18e26:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18e2a:	4282      	cmp	r2, r0
   18e2c:	d01c      	beq.n	18e68 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18e2e:	b1da      	cbz	r2, 18e68 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   18e30:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   18e32:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   18e36:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   18e3a:	42a6      	cmp	r6, r4
   18e3c:	d00f      	beq.n	18e5e <z_impl_k_yield+0x66>
		return b2 - b1;
   18e3e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   18e40:	2c00      	cmp	r4, #0
   18e42:	dd0c      	ble.n	18e5e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   18e44:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   18e46:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   18e4a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   18e4c:	6053      	str	r3, [r2, #4]
	update_cache(1);
   18e4e:	2001      	movs	r0, #1
   18e50:	f7ff fdee 	bl	18a30 <update_cache>
   18e54:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   18e56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18e5a:	f7f9 be97 	b.w	12b8c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   18e5e:	42ba      	cmp	r2, r7
   18e60:	d002      	beq.n	18e68 <z_impl_k_yield+0x70>
   18e62:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18e64:	2a00      	cmp	r2, #0
   18e66:	d1e6      	bne.n	18e36 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   18e68:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   18e6a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   18e6e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18e70:	624b      	str	r3, [r1, #36]	; 0x24
}
   18e72:	e7ec      	b.n	18e4e <z_impl_k_yield+0x56>
   18e74:	20001988 	.word	0x20001988

00018e78 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   18e78:	ea50 0301 	orrs.w	r3, r0, r1
{
   18e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e80:	4605      	mov	r5, r0
   18e82:	460e      	mov	r6, r1
	if (ticks == 0) {
   18e84:	d103      	bne.n	18e8e <z_tick_sleep+0x16>
	z_impl_k_yield();
   18e86:	f7ff ffb7 	bl	18df8 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   18e8a:	2000      	movs	r0, #0
   18e8c:	e033      	b.n	18ef6 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   18e8e:	f06f 0401 	mvn.w	r4, #1
   18e92:	1a24      	subs	r4, r4, r0
   18e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18e98:	eb63 0301 	sbc.w	r3, r3, r1
   18e9c:	2c01      	cmp	r4, #1
   18e9e:	f173 0300 	sbcs.w	r3, r3, #0
   18ea2:	da02      	bge.n	18eaa <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   18ea4:	f004 fa12 	bl	1d2cc <sys_clock_tick_get_32>
   18ea8:	1944      	adds	r4, r0, r5
   18eaa:	f04f 0320 	mov.w	r3, #32
   18eae:	f3ef 8811 	mrs	r8, BASEPRI
   18eb2:	f383 8812 	msr	BASEPRI_MAX, r3
   18eb6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   18eba:	4f10      	ldr	r7, [pc, #64]	; (18efc <z_tick_sleep+0x84>)
   18ebc:	4b10      	ldr	r3, [pc, #64]	; (18f00 <z_tick_sleep+0x88>)
   18ebe:	68b8      	ldr	r0, [r7, #8]
   18ec0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   18ec2:	f7ff fea5 	bl	18c10 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   18ec6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   18ec8:	490e      	ldr	r1, [pc, #56]	; (18f04 <z_tick_sleep+0x8c>)
   18eca:	462a      	mov	r2, r5
   18ecc:	4633      	mov	r3, r6
   18ece:	3018      	adds	r0, #24
   18ed0:	f000 f902 	bl	190d8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   18ed4:	68ba      	ldr	r2, [r7, #8]
   18ed6:	7b53      	ldrb	r3, [r2, #13]
   18ed8:	f043 0310 	orr.w	r3, r3, #16
   18edc:	7353      	strb	r3, [r2, #13]
   18ede:	4640      	mov	r0, r8
   18ee0:	f7f9 fe54 	bl	12b8c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   18ee4:	f004 f9f2 	bl	1d2cc <sys_clock_tick_get_32>
   18ee8:	1a20      	subs	r0, r4, r0
   18eea:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   18eee:	2801      	cmp	r0, #1
   18ef0:	f173 0300 	sbcs.w	r3, r3, #0
   18ef4:	dbc9      	blt.n	18e8a <z_tick_sleep+0x12>
}
   18ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18efa:	bf00      	nop
   18efc:	20001988 	.word	0x20001988
   18f00:	200019b8 	.word	0x200019b8
   18f04:	0001d12b 	.word	0x0001d12b

00018f08 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18f08:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   18f0c:	bf08      	it	eq
   18f0e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   18f12:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18f14:	d106      	bne.n	18f24 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   18f16:	4b08      	ldr	r3, [pc, #32]	; (18f38 <z_impl_k_sleep+0x30>)
   18f18:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   18f1a:	f7ff ff13 	bl	18d44 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   18f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   18f22:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   18f24:	f7ff ffa8 	bl	18e78 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   18f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18f2c:	fb80 0303 	smull	r0, r3, r0, r3
   18f30:	0bc0      	lsrs	r0, r0, #15
   18f32:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   18f36:	e7f4      	b.n	18f22 <z_impl_k_sleep+0x1a>
   18f38:	20001988 	.word	0x20001988

00018f3c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   18f3c:	4b01      	ldr	r3, [pc, #4]	; (18f44 <z_impl_z_current_get+0x8>)
   18f3e:	6898      	ldr	r0, [r3, #8]
   18f40:	4770      	bx	lr
   18f42:	bf00      	nop
   18f44:	20001988 	.word	0x20001988

00018f48 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   18f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f4c:	4604      	mov	r4, r0
   18f4e:	f04f 0320 	mov.w	r3, #32
   18f52:	f3ef 8611 	mrs	r6, BASEPRI
   18f56:	f383 8812 	msr	BASEPRI_MAX, r3
   18f5a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   18f5e:	7b43      	ldrb	r3, [r0, #13]
   18f60:	071a      	lsls	r2, r3, #28
   18f62:	d505      	bpl.n	18f70 <z_thread_abort+0x28>
	__asm__ volatile(
   18f64:	f386 8811 	msr	BASEPRI, r6
   18f68:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   18f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   18f70:	f023 0220 	bic.w	r2, r3, #32
   18f74:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   18f78:	09d2      	lsrs	r2, r2, #7
   18f7a:	d120      	bne.n	18fbe <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   18f7c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   18f7e:	68a3      	ldr	r3, [r4, #8]
   18f80:	b113      	cbz	r3, 18f88 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   18f82:	4620      	mov	r0, r4
   18f84:	f004 f877 	bl	1d076 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   18f88:	f104 0018 	add.w	r0, r4, #24
   18f8c:	f004 f95e 	bl	1d24c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   18f90:	f104 0758 	add.w	r7, r4, #88	; 0x58
   18f94:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   18f98:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18f9a:	42bd      	cmp	r5, r7
   18f9c:	d000      	beq.n	18fa0 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   18f9e:	b9b5      	cbnz	r5, 18fce <z_thread_abort+0x86>
		update_cache(1);
   18fa0:	2001      	movs	r0, #1
   18fa2:	f7ff fd45 	bl	18a30 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   18fa6:	4b10      	ldr	r3, [pc, #64]	; (18fe8 <z_thread_abort+0xa0>)
   18fa8:	689b      	ldr	r3, [r3, #8]
   18faa:	42a3      	cmp	r3, r4
   18fac:	d1da      	bne.n	18f64 <z_thread_abort+0x1c>
   18fae:	f3ef 8305 	mrs	r3, IPSR
   18fb2:	2b00      	cmp	r3, #0
   18fb4:	d1d6      	bne.n	18f64 <z_thread_abort+0x1c>
   18fb6:	4630      	mov	r0, r6
   18fb8:	f7f9 fde8 	bl	12b8c <arch_swap>
	return ret;
   18fbc:	e7d2      	b.n	18f64 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18fbe:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   18fc2:	f043 0308 	orr.w	r3, r3, #8
   18fc6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18fc8:	f004 f84d 	bl	1d066 <sys_dlist_remove>
}
   18fcc:	e7d7      	b.n	18f7e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   18fce:	4628      	mov	r0, r5
   18fd0:	f004 f851 	bl	1d076 <unpend_thread_no_timeout>
   18fd4:	f105 0018 	add.w	r0, r5, #24
   18fd8:	f004 f938 	bl	1d24c <z_abort_timeout>
   18fdc:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
   18fe0:	4628      	mov	r0, r5
   18fe2:	f7ff fdc1 	bl	18b68 <ready_thread>
   18fe6:	e7d7      	b.n	18f98 <z_thread_abort+0x50>
   18fe8:	20001988 	.word	0x20001988

00018fec <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   18fec:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   18fee:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   18ff2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   18ff4:	e9cd 6700 	strd	r6, r7, [sp]
   18ff8:	f7ff fe48 	bl	18c8c <z_pend_curr>

	if (data != NULL) {
   18ffc:	b11c      	cbz	r4, 19006 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   18ffe:	4b03      	ldr	r3, [pc, #12]	; (1900c <z_sched_wait+0x20>)
   19000:	689b      	ldr	r3, [r3, #8]
   19002:	695b      	ldr	r3, [r3, #20]
   19004:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   19006:	b002      	add	sp, #8
   19008:	bdd0      	pop	{r4, r6, r7, pc}
   1900a:	bf00      	nop
   1900c:	20001988 	.word	0x20001988

00019010 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   19010:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   19012:	4806      	ldr	r0, [pc, #24]	; (1902c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   19014:	4a06      	ldr	r2, [pc, #24]	; (19030 <z_data_copy+0x20>)
   19016:	4907      	ldr	r1, [pc, #28]	; (19034 <z_data_copy+0x24>)
   19018:	1a12      	subs	r2, r2, r0
   1901a:	f003 feed 	bl	1cdf8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1901e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   19022:	4a05      	ldr	r2, [pc, #20]	; (19038 <z_data_copy+0x28>)
   19024:	4905      	ldr	r1, [pc, #20]	; (1903c <z_data_copy+0x2c>)
   19026:	4806      	ldr	r0, [pc, #24]	; (19040 <z_data_copy+0x30>)
   19028:	f003 bee6 	b.w	1cdf8 <z_early_memcpy>
   1902c:	20000000 	.word	0x20000000
   19030:	2000069c 	.word	0x2000069c
   19034:	0001dc98 	.word	0x0001dc98
   19038:	00000000 	.word	0x00000000
   1903c:	0001dc98 	.word	0x0001dc98
   19040:	20000000 	.word	0x20000000

00019044 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   19044:	4b03      	ldr	r3, [pc, #12]	; (19054 <elapsed+0x10>)
   19046:	681b      	ldr	r3, [r3, #0]
   19048:	b90b      	cbnz	r3, 1904e <elapsed+0xa>
   1904a:	f7fc b8d3 	b.w	151f4 <sys_clock_elapsed>
}
   1904e:	2000      	movs	r0, #0
   19050:	4770      	bx	lr
   19052:	bf00      	nop
   19054:	200019c4 	.word	0x200019c4

00019058 <next_timeout>:
	return list->head == list;
   19058:	4b10      	ldr	r3, [pc, #64]	; (1909c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   1905a:	b510      	push	{r4, lr}
   1905c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1905e:	429c      	cmp	r4, r3
   19060:	bf08      	it	eq
   19062:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   19064:	f7ff ffee 	bl	19044 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   19068:	b1a4      	cbz	r4, 19094 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1906a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1906e:	1a1b      	subs	r3, r3, r0
   19070:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   19074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   19078:	f170 0200 	sbcs.w	r2, r0, #0
   1907c:	da0a      	bge.n	19094 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   1907e:	2800      	cmp	r0, #0
   19080:	bfac      	ite	ge
   19082:	4618      	movge	r0, r3
   19084:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   19086:	4b06      	ldr	r3, [pc, #24]	; (190a0 <next_timeout+0x48>)
   19088:	691b      	ldr	r3, [r3, #16]
   1908a:	b113      	cbz	r3, 19092 <next_timeout+0x3a>
   1908c:	4298      	cmp	r0, r3
   1908e:	bfa8      	it	ge
   19090:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   19092:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   19094:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   19098:	e7f5      	b.n	19086 <next_timeout+0x2e>
   1909a:	bf00      	nop
   1909c:	20000278 	.word	0x20000278
   190a0:	20001988 	.word	0x20001988

000190a4 <remove_timeout>:
{
   190a4:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   190a6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   190a8:	b168      	cbz	r0, 190c6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   190aa:	4a0a      	ldr	r2, [pc, #40]	; (190d4 <remove_timeout+0x30>)
   190ac:	6852      	ldr	r2, [r2, #4]
   190ae:	4290      	cmp	r0, r2
   190b0:	d009      	beq.n	190c6 <remove_timeout+0x22>
	if (next(t) != NULL) {
   190b2:	b143      	cbz	r3, 190c6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   190b4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   190b8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   190bc:	1912      	adds	r2, r2, r4
   190be:	eb41 0105 	adc.w	r1, r1, r5
   190c2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   190c6:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   190c8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   190ca:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   190cc:	2300      	movs	r3, #0
	node->prev = NULL;
   190ce:	e9c0 3300 	strd	r3, r3, [r0]
}
   190d2:	bd30      	pop	{r4, r5, pc}
   190d4:	20000278 	.word	0x20000278

000190d8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   190d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   190dc:	bf08      	it	eq
   190de:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   190e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   190e4:	4604      	mov	r4, r0
   190e6:	461f      	mov	r7, r3
   190e8:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   190ea:	d067      	beq.n	191bc <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   190ec:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   190ee:	f04f 0320 	mov.w	r3, #32
   190f2:	f3ef 8611 	mrs	r6, BASEPRI
   190f6:	f383 8812 	msr	BASEPRI_MAX, r3
   190fa:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   190fe:	f06f 0201 	mvn.w	r2, #1
   19102:	1b53      	subs	r3, r2, r5
   19104:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   19108:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1910c:	2b00      	cmp	r3, #0
   1910e:	db1b      	blt.n	19148 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   19110:	4b2b      	ldr	r3, [pc, #172]	; (191c0 <z_add_timeout+0xe8>)
   19112:	e9d3 1300 	ldrd	r1, r3, [r3]
   19116:	1a52      	subs	r2, r2, r1
   19118:	eb6c 0303 	sbc.w	r3, ip, r3
   1911c:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   1911e:	eb63 0307 	sbc.w	r3, r3, r7
   19122:	2d01      	cmp	r5, #1
   19124:	f173 0200 	sbcs.w	r2, r3, #0
   19128:	bfbc      	itt	lt
   1912a:	2501      	movlt	r5, #1
   1912c:	2300      	movlt	r3, #0
   1912e:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   19132:	4824      	ldr	r0, [pc, #144]	; (191c4 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   19134:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19138:	4283      	cmp	r3, r0
   1913a:	d118      	bne.n	1916e <z_add_timeout+0x96>
	node->prev = tail;
   1913c:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   19140:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   19144:	6044      	str	r4, [r0, #4]
}
   19146:	e026      	b.n	19196 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   19148:	f7ff ff7c 	bl	19044 <elapsed>
   1914c:	3501      	adds	r5, #1
   1914e:	f147 0700 	adc.w	r7, r7, #0
   19152:	182d      	adds	r5, r5, r0
   19154:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   19158:	e9c4 5704 	strd	r5, r7, [r4, #16]
   1915c:	e7e9      	b.n	19132 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1915e:	1a52      	subs	r2, r2, r1
   19160:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   19164:	459c      	cmp	ip, r3
   19166:	e9c4 2504 	strd	r2, r5, [r4, #16]
   1916a:	d0e7      	beq.n	1913c <z_add_timeout+0x64>
   1916c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1916e:	2b00      	cmp	r3, #0
   19170:	d0e4      	beq.n	1913c <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   19172:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   19176:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   1917a:	428a      	cmp	r2, r1
   1917c:	eb75 0e07 	sbcs.w	lr, r5, r7
   19180:	daed      	bge.n	1915e <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   19182:	1a8a      	subs	r2, r1, r2
   19184:	eb67 0505 	sbc.w	r5, r7, r5
   19188:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1918c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1918e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   19192:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   19194:	605c      	str	r4, [r3, #4]
	return list->head == list;
   19196:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19198:	4283      	cmp	r3, r0
   1919a:	d00b      	beq.n	191b4 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1919c:	429c      	cmp	r4, r3
   1919e:	d109      	bne.n	191b4 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   191a0:	f7ff ff5a 	bl	19058 <next_timeout>

			if (next_time == 0 ||
   191a4:	b118      	cbz	r0, 191ae <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   191a6:	4b08      	ldr	r3, [pc, #32]	; (191c8 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   191a8:	691b      	ldr	r3, [r3, #16]
   191aa:	4283      	cmp	r3, r0
   191ac:	d002      	beq.n	191b4 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   191ae:	2100      	movs	r1, #0
   191b0:	f7fb ffee 	bl	15190 <sys_clock_set_timeout>
	__asm__ volatile(
   191b4:	f386 8811 	msr	BASEPRI, r6
   191b8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   191bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   191be:	bf00      	nop
   191c0:	20000958 	.word	0x20000958
   191c4:	20000278 	.word	0x20000278
   191c8:	20001988 	.word	0x20001988

000191cc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   191cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   191d0:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   191d2:	f7ff fc87 	bl	18ae4 <z_time_slice>
	__asm__ volatile(
   191d6:	f04f 0320 	mov.w	r3, #32
   191da:	f3ef 8411 	mrs	r4, BASEPRI
   191de:	f383 8812 	msr	BASEPRI_MAX, r3
   191e2:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   191e6:	4e24      	ldr	r6, [pc, #144]	; (19278 <sys_clock_announce+0xac>)
	return list->head == list;
   191e8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1927c <sys_clock_announce+0xb0>
   191ec:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   191ee:	4d24      	ldr	r5, [pc, #144]	; (19280 <sys_clock_announce+0xb4>)
   191f0:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   191f4:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   191f6:	4540      	cmp	r0, r8
		curr_tick += dt;
   191f8:	e9d5 1e00 	ldrd	r1, lr, [r5]
   191fc:	ea4f 77e2 	mov.w	r7, r2, asr #31
   19200:	d00b      	beq.n	1921a <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   19202:	b150      	cbz	r0, 1921a <sys_clock_announce+0x4e>
   19204:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   19208:	429a      	cmp	r2, r3
   1920a:	eb77 090c 	sbcs.w	r9, r7, ip
   1920e:	da16      	bge.n	1923e <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   19210:	1a9b      	subs	r3, r3, r2
   19212:	eb6c 0c07 	sbc.w	ip, ip, r7
   19216:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1921a:	1852      	adds	r2, r2, r1
   1921c:	eb4e 0707 	adc.w	r7, lr, r7
   19220:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   19224:	2500      	movs	r5, #0
   19226:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   19228:	f7ff ff16 	bl	19058 <next_timeout>
   1922c:	4629      	mov	r1, r5
   1922e:	f7fb ffaf 	bl	15190 <sys_clock_set_timeout>
	__asm__ volatile(
   19232:	f384 8811 	msr	BASEPRI, r4
   19236:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1923a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1923e:	1859      	adds	r1, r3, r1
   19240:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   19244:	1ad3      	subs	r3, r2, r3
   19246:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   19248:	2200      	movs	r2, #0
   1924a:	2300      	movs	r3, #0
   1924c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   19250:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   19254:	f7ff ff26 	bl	190a4 <remove_timeout>
   19258:	f384 8811 	msr	BASEPRI, r4
   1925c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   19260:	6883      	ldr	r3, [r0, #8]
   19262:	4798      	blx	r3
	__asm__ volatile(
   19264:	f04f 0320 	mov.w	r3, #32
   19268:	f3ef 8411 	mrs	r4, BASEPRI
   1926c:	f383 8812 	msr	BASEPRI_MAX, r3
   19270:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   19274:	e7bc      	b.n	191f0 <sys_clock_announce+0x24>
   19276:	bf00      	nop
   19278:	200019c4 	.word	0x200019c4
   1927c:	20000278 	.word	0x20000278
   19280:	20000958 	.word	0x20000958

00019284 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   19284:	b510      	push	{r4, lr}
   19286:	f04f 0320 	mov.w	r3, #32
   1928a:	f3ef 8411 	mrs	r4, BASEPRI
   1928e:	f383 8812 	msr	BASEPRI_MAX, r3
   19292:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   19296:	f7fb ffad 	bl	151f4 <sys_clock_elapsed>
   1929a:	4a05      	ldr	r2, [pc, #20]	; (192b0 <sys_clock_tick_get+0x2c>)
   1929c:	e9d2 3100 	ldrd	r3, r1, [r2]
   192a0:	18c0      	adds	r0, r0, r3
   192a2:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   192a6:	f384 8811 	msr	BASEPRI, r4
   192aa:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   192ae:	bd10      	pop	{r4, pc}
   192b0:	20000958 	.word	0x20000958

000192b4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   192b4:	b570      	push	{r4, r5, r6, lr}
   192b6:	4604      	mov	r4, r0
	__asm__ volatile(
   192b8:	f04f 0320 	mov.w	r3, #32
   192bc:	f3ef 8511 	mrs	r5, BASEPRI
   192c0:	f383 8812 	msr	BASEPRI_MAX, r3
   192c4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   192c8:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   192cc:	3301      	adds	r3, #1
   192ce:	f142 0200 	adc.w	r2, r2, #0
   192d2:	2b02      	cmp	r3, #2
   192d4:	f172 0300 	sbcs.w	r3, r2, #0
   192d8:	d304      	bcc.n	192e4 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   192da:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   192de:	4917      	ldr	r1, [pc, #92]	; (1933c <z_timer_expiration_handler+0x88>)
   192e0:	f7ff fefa 	bl	190d8 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   192e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   192e6:	3301      	adds	r3, #1
   192e8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   192ea:	6a23      	ldr	r3, [r4, #32]
   192ec:	b173      	cbz	r3, 1930c <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   192ee:	f385 8811 	msr	BASEPRI, r5
   192f2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   192f6:	6a23      	ldr	r3, [r4, #32]
   192f8:	4620      	mov	r0, r4
   192fa:	4798      	blx	r3
	__asm__ volatile(
   192fc:	f04f 0320 	mov.w	r3, #32
   19300:	f3ef 8511 	mrs	r5, BASEPRI
   19304:	f383 8812 	msr	BASEPRI_MAX, r3
   19308:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1930c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19310:	42a6      	cmp	r6, r4
   19312:	d000      	beq.n	19316 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   19314:	b926      	cbnz	r6, 19320 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   19316:	f385 8811 	msr	BASEPRI, r5
   1931a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1931e:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   19320:	4630      	mov	r0, r6
   19322:	f003 feb2 	bl	1d08a <z_unpend_thread_no_timeout>
   19326:	2300      	movs	r3, #0
   19328:	67b3      	str	r3, [r6, #120]	; 0x78
   1932a:	f385 8811 	msr	BASEPRI, r5
   1932e:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   19332:	4630      	mov	r0, r6
}
   19334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   19338:	f003 bee7 	b.w	1d10a <z_ready_thread>
   1933c:	000192b5 	.word	0x000192b5

00019340 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   19340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19344:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   19346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1934a:	bf08      	it	eq
   1934c:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   19350:	4606      	mov	r6, r0
   19352:	461c      	mov	r4, r3
   19354:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   19358:	4689      	mov	r9, r1
   1935a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1935c:	d03e      	beq.n	193dc <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1935e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   19362:	bf08      	it	eq
   19364:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   19368:	4615      	mov	r5, r2
   1936a:	4607      	mov	r7, r0
   1936c:	d014      	beq.n	19398 <z_impl_k_timer_start+0x58>
   1936e:	ea50 0302 	orrs.w	r3, r0, r2
   19372:	d011      	beq.n	19398 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   19374:	f06f 0301 	mvn.w	r3, #1
   19378:	1a9b      	subs	r3, r3, r2
   1937a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1937e:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   19382:	2b00      	cmp	r3, #0
   19384:	da08      	bge.n	19398 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   19386:	2a02      	cmp	r2, #2
   19388:	f170 0300 	sbcs.w	r3, r0, #0
   1938c:	bfbc      	itt	lt
   1938e:	2502      	movlt	r5, #2
   19390:	2700      	movlt	r7, #0
   19392:	3d01      	subs	r5, #1
   19394:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   19398:	f06f 0301 	mvn.w	r3, #1
   1939c:	1a5b      	subs	r3, r3, r1
   1939e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   193a2:	eb63 0304 	sbc.w	r3, r3, r4
   193a6:	2b00      	cmp	r3, #0
   193a8:	da09      	bge.n	193be <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   193aa:	2901      	cmp	r1, #1
   193ac:	f174 0300 	sbcs.w	r3, r4, #0
   193b0:	bfbc      	itt	lt
   193b2:	2101      	movlt	r1, #1
   193b4:	2400      	movlt	r4, #0
   193b6:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
   193ba:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   193be:	4630      	mov	r0, r6
   193c0:	f003 ff44 	bl	1d24c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   193c4:	2300      	movs	r3, #0
   193c6:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   193c8:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   193cc:	464a      	mov	r2, r9
   193ce:	4643      	mov	r3, r8
   193d0:	4630      	mov	r0, r6
   193d2:	4903      	ldr	r1, [pc, #12]	; (193e0 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   193d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   193d8:	f7ff be7e 	b.w	190d8 <z_add_timeout>
}
   193dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   193e0:	000192b5 	.word	0x000192b5

000193e4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   193e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   193e6:	4606      	mov	r6, r0
   193e8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   193ea:	f003 fd30 	bl	1ce4e <k_is_in_isr>
   193ee:	b978      	cbnz	r0, 19410 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   193f0:	4b0b      	ldr	r3, [pc, #44]	; (19420 <z_thread_aligned_alloc+0x3c>)
   193f2:	689b      	ldr	r3, [r3, #8]
   193f4:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
   193f6:	b17c      	cbz	r4, 19418 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   193f8:	1d2a      	adds	r2, r5, #4
   193fa:	d209      	bcs.n	19410 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   193fc:	2000      	movs	r0, #0
   193fe:	2100      	movs	r1, #0
   19400:	e9cd 0100 	strd	r0, r1, [sp]
   19404:	f046 0104 	orr.w	r1, r6, #4
   19408:	4620      	mov	r0, r4
   1940a:	f003 ffa1 	bl	1d350 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1940e:	b908      	cbnz	r0, 19414 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   19410:	2400      	movs	r4, #0
	}

	return ret;
   19412:	e001      	b.n	19418 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   19414:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   19416:	1d04      	adds	r4, r0, #4
}
   19418:	4620      	mov	r0, r4
   1941a:	b002      	add	sp, #8
   1941c:	bd70      	pop	{r4, r5, r6, pc}
   1941e:	bf00      	nop
   19420:	20001988 	.word	0x20001988

00019424 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   19424:	4a02      	ldr	r2, [pc, #8]	; (19430 <boot_banner+0xc>)
   19426:	4903      	ldr	r1, [pc, #12]	; (19434 <boot_banner+0x10>)
   19428:	4803      	ldr	r0, [pc, #12]	; (19438 <boot_banner+0x14>)
   1942a:	f000 b856 	b.w	194da <printk>
   1942e:	bf00      	nop
   19430:	0001db61 	.word	0x0001db61
   19434:	0001dc44 	.word	0x0001dc44
   19438:	0001dc65 	.word	0x0001dc65

0001943c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1943c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1943e:	4c06      	ldr	r4, [pc, #24]	; (19458 <statics_init+0x1c>)
   19440:	4d06      	ldr	r5, [pc, #24]	; (1945c <statics_init+0x20>)
   19442:	42ac      	cmp	r4, r5
   19444:	d301      	bcc.n	1944a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   19446:	2000      	movs	r0, #0
   19448:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1944a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1944e:	4620      	mov	r0, r4
   19450:	f003 ff76 	bl	1d340 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   19454:	3414      	adds	r4, #20
   19456:	e7f4      	b.n	19442 <statics_init+0x6>
   19458:	200005ac 	.word	0x200005ac
   1945c:	200005ac 	.word	0x200005ac

00019460 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   19460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   19462:	4b09      	ldr	r3, [pc, #36]	; (19488 <k_sys_work_q_init+0x28>)
   19464:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   19466:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   19468:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1946a:	9300      	str	r3, [sp, #0]
   1946c:	4907      	ldr	r1, [pc, #28]	; (1948c <k_sys_work_q_init+0x2c>)
   1946e:	4808      	ldr	r0, [pc, #32]	; (19490 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   19470:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   19474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19478:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1947c:	f7ff fa04 	bl	18888 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   19480:	4620      	mov	r0, r4
   19482:	b004      	add	sp, #16
   19484:	bd10      	pop	{r4, pc}
   19486:	bf00      	nop
   19488:	0001dc8c 	.word	0x0001dc8c
   1948c:	200030c0 	.word	0x200030c0
   19490:	20000960 	.word	0x20000960

00019494 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   19494:	4770      	bx	lr

00019496 <timer_handler>:
	gpio_pin_toggle_dt(&led);
   19496:	f7f7 bbcd 	b.w	10c34 <gpio_pin_toggle_dt.constprop.0.isra.0>

0001949a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1949a:	4603      	mov	r3, r0
   1949c:	b158      	cbz	r0, 194b6 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1949e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   194a0:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   194a4:	2a01      	cmp	r2, #1
   194a6:	d003      	beq.n	194b0 <sys_notify_validate+0x16>
   194a8:	2a03      	cmp	r2, #3
   194aa:	d104      	bne.n	194b6 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   194ac:	6802      	ldr	r2, [r0, #0]
   194ae:	b112      	cbz	r2, 194b6 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   194b0:	2000      	movs	r0, #0
   194b2:	6098      	str	r0, [r3, #8]
   194b4:	4770      	bx	lr
		return -EINVAL;
   194b6:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   194ba:	4770      	bx	lr

000194bc <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   194bc:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   194be:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   194c0:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   194c4:	2a03      	cmp	r2, #3
   194c6:	f04f 0200 	mov.w	r2, #0
{
   194ca:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   194cc:	bf0c      	ite	eq
   194ce:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   194d0:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   194d2:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   194d4:	4770      	bx	lr

000194d6 <arch_printk_char_out>:
}
   194d6:	2000      	movs	r0, #0
   194d8:	4770      	bx	lr

000194da <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   194da:	b40f      	push	{r0, r1, r2, r3}
   194dc:	b507      	push	{r0, r1, r2, lr}
   194de:	a904      	add	r1, sp, #16
   194e0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   194e4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   194e6:	f7f7 fc03 	bl	10cf0 <vprintk>

	va_end(ap);
}
   194ea:	b003      	add	sp, #12
   194ec:	f85d eb04 	ldr.w	lr, [sp], #4
   194f0:	b004      	add	sp, #16
   194f2:	4770      	bx	lr

000194f4 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   194f4:	b510      	push	{r4, lr}
   194f6:	4603      	mov	r3, r0
	return list->head;
   194f8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   194fa:	2200      	movs	r2, #0
   194fc:	b158      	cbz	r0, 19516 <sys_slist_find_and_remove+0x22>
   194fe:	4288      	cmp	r0, r1
   19500:	d10f      	bne.n	19522 <sys_slist_find_and_remove+0x2e>
	return node->next;
   19502:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   19504:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   19506:	b93a      	cbnz	r2, 19518 <sys_slist_find_and_remove+0x24>
   19508:	42a1      	cmp	r1, r4
	list->head = node;
   1950a:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1950c:	d100      	bne.n	19510 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1950e:	6058      	str	r0, [r3, #4]
	parent->next = child;
   19510:	2300      	movs	r3, #0
   19512:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19514:	2001      	movs	r0, #1
   19516:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   19518:	42a1      	cmp	r1, r4
	parent->next = child;
   1951a:	6010      	str	r0, [r2, #0]
	list->tail = node;
   1951c:	bf08      	it	eq
   1951e:	605a      	streq	r2, [r3, #4]
}
   19520:	e7f6      	b.n	19510 <sys_slist_find_and_remove+0x1c>
	return node->next;
   19522:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19524:	6800      	ldr	r0, [r0, #0]
   19526:	e7e9      	b.n	194fc <sys_slist_find_and_remove+0x8>

00019528 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19528:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1952a:	f013 0307 	ands.w	r3, r3, #7
   1952e:	d105      	bne.n	1953c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   19530:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   19532:	2b00      	cmp	r3, #0
   19534:	bf0c      	ite	eq
   19536:	2000      	moveq	r0, #0
   19538:	2003      	movne	r0, #3
   1953a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1953c:	2b02      	cmp	r3, #2
   1953e:	d105      	bne.n	1954c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   19540:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   19542:	2b00      	cmp	r3, #0
   19544:	bf14      	ite	ne
   19546:	2000      	movne	r0, #0
   19548:	2004      	moveq	r0, #4
   1954a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1954c:	2b01      	cmp	r3, #1
   1954e:	d105      	bne.n	1955c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   19550:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   19552:	2b00      	cmp	r3, #0
   19554:	bf0c      	ite	eq
   19556:	2000      	moveq	r0, #0
   19558:	2005      	movne	r0, #5
   1955a:	4770      	bx	lr
	int evt = EVT_NOP;
   1955c:	2000      	movs	r0, #0
}
   1955e:	4770      	bx	lr

00019560 <notify_one>:
{
   19560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19564:	460d      	mov	r5, r1
   19566:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19568:	4619      	mov	r1, r3
   1956a:	1d28      	adds	r0, r5, #4
{
   1956c:	4690      	mov	r8, r2
   1956e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19570:	f7ff ffa4 	bl	194bc <sys_notify_finalize>
	if (cb) {
   19574:	4604      	mov	r4, r0
   19576:	b138      	cbz	r0, 19588 <notify_one+0x28>
		cb(mgr, cli, state, res);
   19578:	4633      	mov	r3, r6
   1957a:	4642      	mov	r2, r8
   1957c:	4629      	mov	r1, r5
   1957e:	4638      	mov	r0, r7
   19580:	46a4      	mov	ip, r4
}
   19582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   19586:	4760      	bx	ip
}
   19588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001958c <transition_complete>:
{
   1958c:	b410      	push	{r4}
	__asm__ volatile(
   1958e:	f04f 0420 	mov.w	r4, #32
   19592:	f3ef 8211 	mrs	r2, BASEPRI
   19596:	f384 8812 	msr	BASEPRI_MAX, r4
   1959a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1959e:	6141      	str	r1, [r0, #20]
}
   195a0:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   195a2:	2101      	movs	r1, #1
   195a4:	f7f7 bbb2 	b.w	10d0c <process_event>

000195a8 <validate_args>:
{
   195a8:	b510      	push	{r4, lr}
   195aa:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   195ac:	b140      	cbz	r0, 195c0 <validate_args+0x18>
   195ae:	b139      	cbz	r1, 195c0 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   195b0:	1d08      	adds	r0, r1, #4
   195b2:	f7ff ff72 	bl	1949a <sys_notify_validate>
	if ((rv == 0)
   195b6:	b928      	cbnz	r0, 195c4 <validate_args+0x1c>
	    && ((cli->notify.flags
   195b8:	68a3      	ldr	r3, [r4, #8]
   195ba:	f033 0303 	bics.w	r3, r3, #3
   195be:	d001      	beq.n	195c4 <validate_args+0x1c>
		rv = -EINVAL;
   195c0:	f06f 0015 	mvn.w	r0, #21
}
   195c4:	bd10      	pop	{r4, pc}

000195c6 <onoff_manager_init>:
{
   195c6:	b538      	push	{r3, r4, r5, lr}
   195c8:	460c      	mov	r4, r1
	if ((mgr == NULL)
   195ca:	4605      	mov	r5, r0
   195cc:	b158      	cbz	r0, 195e6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   195ce:	b151      	cbz	r1, 195e6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   195d0:	680b      	ldr	r3, [r1, #0]
   195d2:	b143      	cbz	r3, 195e6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   195d4:	684b      	ldr	r3, [r1, #4]
   195d6:	b133      	cbz	r3, 195e6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   195d8:	221c      	movs	r2, #28
   195da:	2100      	movs	r1, #0
   195dc:	f000 fcec 	bl	19fb8 <memset>
   195e0:	612c      	str	r4, [r5, #16]
	return 0;
   195e2:	2000      	movs	r0, #0
}
   195e4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   195e6:	f06f 0015 	mvn.w	r0, #21
   195ea:	e7fb      	b.n	195e4 <onoff_manager_init+0x1e>

000195ec <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   195ec:	b570      	push	{r4, r5, r6, lr}
   195ee:	4604      	mov	r4, r0
   195f0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   195f2:	f7ff ffd9 	bl	195a8 <validate_args>

	if (rv < 0) {
   195f6:	1e05      	subs	r5, r0, #0
   195f8:	db31      	blt.n	1965e <onoff_request+0x72>
   195fa:	f04f 0320 	mov.w	r3, #32
   195fe:	f3ef 8111 	mrs	r1, BASEPRI
   19602:	f383 8812 	msr	BASEPRI_MAX, r3
   19606:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1960a:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1960c:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1960e:	f64f 75ff 	movw	r5, #65535	; 0xffff
   19612:	42ab      	cmp	r3, r5
   19614:	f000 0207 	and.w	r2, r0, #7
   19618:	d02e      	beq.n	19678 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1961a:	2a02      	cmp	r2, #2
   1961c:	d10e      	bne.n	1963c <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1961e:	3301      	adds	r3, #1
   19620:	8363      	strh	r3, [r4, #26]
	rv = state;
   19622:	4615      	mov	r5, r2
		notify = true;
   19624:	2301      	movs	r3, #1
	__asm__ volatile(
   19626:	f381 8811 	msr	BASEPRI, r1
   1962a:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1962e:	b1b3      	cbz	r3, 1965e <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   19630:	2300      	movs	r3, #0
   19632:	4631      	mov	r1, r6
   19634:	4620      	mov	r0, r4
   19636:	f7ff ff93 	bl	19560 <notify_one>
   1963a:	e010      	b.n	1965e <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1963c:	0783      	lsls	r3, r0, #30
   1963e:	d001      	beq.n	19644 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   19640:	2a06      	cmp	r2, #6
   19642:	d10e      	bne.n	19662 <onoff_request+0x76>
	parent->next = child;
   19644:	2300      	movs	r3, #0
   19646:	6033      	str	r3, [r6, #0]
	return list->tail;
   19648:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1964a:	b993      	cbnz	r3, 19672 <onoff_request+0x86>
	list->head = node;
   1964c:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   19650:	4615      	mov	r5, r2
   19652:	b962      	cbnz	r2, 1966e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   19654:	460a      	mov	r2, r1
   19656:	4620      	mov	r0, r4
   19658:	2102      	movs	r1, #2
   1965a:	f7f7 fb57 	bl	10d0c <process_event>
		}
	}

	return rv;
}
   1965e:	4628      	mov	r0, r5
   19660:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   19662:	2a05      	cmp	r2, #5
   19664:	bf0c      	ite	eq
   19666:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1966a:	f06f 0504 	mvnne.w	r5, #4
   1966e:	2300      	movs	r3, #0
   19670:	e7d9      	b.n	19626 <onoff_request+0x3a>
	parent->next = child;
   19672:	601e      	str	r6, [r3, #0]
	list->tail = node;
   19674:	6066      	str	r6, [r4, #4]
}
   19676:	e7eb      	b.n	19650 <onoff_request+0x64>
		rv = -EAGAIN;
   19678:	f06f 050a 	mvn.w	r5, #10
   1967c:	e7f7      	b.n	1966e <onoff_request+0x82>

0001967e <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1967e:	b510      	push	{r4, lr}
	__asm__ volatile(
   19680:	f04f 0320 	mov.w	r3, #32
   19684:	f3ef 8211 	mrs	r2, BASEPRI
   19688:	f383 8812 	msr	BASEPRI_MAX, r3
   1968c:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19690:	8b04      	ldrh	r4, [r0, #24]
   19692:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   19696:	2c02      	cmp	r4, #2
   19698:	d00a      	beq.n	196b0 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1969a:	2c01      	cmp	r4, #1
   1969c:	bf0c      	ite	eq
   1969e:	f06f 0004 	mvneq.w	r0, #4
   196a2:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   196a6:	f382 8811 	msr	BASEPRI, r2
   196aa:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   196ae:	e008      	b.n	196c2 <onoff_release+0x44>
	mgr->refs -= 1U;
   196b0:	8b43      	ldrh	r3, [r0, #26]
   196b2:	3b01      	subs	r3, #1
   196b4:	b29b      	uxth	r3, r3
   196b6:	8343      	strh	r3, [r0, #26]
	if (stop) {
   196b8:	b923      	cbnz	r3, 196c4 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   196ba:	4621      	mov	r1, r4
   196bc:	f7f7 fb26 	bl	10d0c <process_event>
	int rv = state;
   196c0:	4620      	mov	r0, r4
}
   196c2:	bd10      	pop	{r4, pc}
	int rv = state;
   196c4:	4620      	mov	r0, r4
   196c6:	e7ee      	b.n	196a6 <onoff_release+0x28>

000196c8 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   196c8:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   196ca:	b1b0      	cbz	r0, 196fa <onoff_cancel+0x32>
   196cc:	b1a9      	cbz	r1, 196fa <onoff_cancel+0x32>
	__asm__ volatile(
   196ce:	f04f 0220 	mov.w	r2, #32
   196d2:	f3ef 8511 	mrs	r5, BASEPRI
   196d6:	f382 8812 	msr	BASEPRI_MAX, r2
   196da:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   196de:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   196e0:	f7ff ff08 	bl	194f4 <sys_slist_find_and_remove>
   196e4:	b130      	cbz	r0, 196f4 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   196e6:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   196ea:	f385 8811 	msr	BASEPRI, r5
   196ee:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   196f2:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   196f4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   196f8:	e7f7      	b.n	196ea <onoff_cancel+0x22>
		return -EINVAL;
   196fa:	f06f 0015 	mvn.w	r0, #21
   196fe:	e7f8      	b.n	196f2 <onoff_cancel+0x2a>

00019700 <onoff_sync_lock>:
	__asm__ volatile(
   19700:	f04f 0220 	mov.w	r2, #32
   19704:	f3ef 8311 	mrs	r3, BASEPRI
   19708:	f382 8812 	msr	BASEPRI_MAX, r2
   1970c:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
   19710:	6800      	ldr	r0, [r0, #0]
	*keyp = k_spin_lock(&srv->lock);
   19712:	600b      	str	r3, [r1, #0]
}
   19714:	4770      	bx	lr

00019716 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
   19716:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
   19718:	6804      	ldr	r4, [r0, #0]
   1971a:	2c00      	cmp	r4, #0
		srv->count = 0;
   1971c:	bfbc      	itt	lt
   1971e:	2400      	movlt	r4, #0
   19720:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
   19722:	2b00      	cmp	r3, #0
{
   19724:	460d      	mov	r5, r1
   19726:	4611      	mov	r1, r2
   19728:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
   1972c:	da0c      	bge.n	19748 <onoff_sync_finalize+0x32>
		srv->count = res;
   1972e:	6003      	str	r3, [r0, #0]
		state = ONOFF_STATE_ERROR;
   19730:	2201      	movs	r2, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
   19732:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
   19734:	f385 8811 	msr	BASEPRI, r5
   19738:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
   1973c:	b111      	cbz	r1, 19744 <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
   1973e:	2000      	movs	r0, #0
   19740:	f7ff ff0e 	bl	19560 <notify_one>
	}

	return rv;
}
   19744:	4620      	mov	r0, r4
   19746:	bd38      	pop	{r3, r4, r5, pc}
		srv->count += 1;
   19748:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
   1974a:	b11a      	cbz	r2, 19754 <onoff_sync_finalize+0x3e>
		srv->count += 1;
   1974c:	3401      	adds	r4, #1
		srv->count -= 1;
   1974e:	6004      	str	r4, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
   19750:	2202      	movs	r2, #2
   19752:	e7ee      	b.n	19732 <onoff_sync_finalize+0x1c>
		srv->count -= 1;
   19754:	3c01      	subs	r4, #1
   19756:	e7fa      	b.n	1974e <onoff_sync_finalize+0x38>

00019758 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   19758:	4604      	mov	r4, r0
   1975a:	b508      	push	{r3, lr}
   1975c:	4608      	mov	r0, r1
   1975e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   19760:	461a      	mov	r2, r3
   19762:	47a0      	blx	r4
	return z_impl_z_current_get();
   19764:	f7ff fbea 	bl	18f3c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   19768:	f7f9 fbfe 	bl	12f68 <z_impl_k_thread_abort>

0001976c <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1976c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   19770:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   19772:	0840      	lsrs	r0, r0, #1
   19774:	4770      	bx	lr

00019776 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   19776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19778:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1977a:	f7ff fff7 	bl	1976c <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1977e:	fab0 f080 	clz	r0, r0
   19782:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   19786:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   1978a:	00ca      	lsls	r2, r1, #3
   1978c:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   19790:	1d17      	adds	r7, r2, #4
{
   19792:	460c      	mov	r4, r1
   19794:	3206      	adds	r2, #6
   19796:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   19798:	b956      	cbnz	r6, 197b0 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1979a:	2101      	movs	r1, #1
   1979c:	fa01 f000 	lsl.w	r0, r1, r0
   197a0:	68d9      	ldr	r1, [r3, #12]
   197a2:	4301      	orrs	r1, r0
   197a4:	60d9      	str	r1, [r3, #12]
		b->next = c;
   197a6:	f8cc 4010 	str.w	r4, [ip, #16]
   197aa:	53dd      	strh	r5, [r3, r7]
   197ac:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   197ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   197b0:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   197b2:	3104      	adds	r1, #4
   197b4:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   197b6:	53d8      	strh	r0, [r3, r7]
   197b8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   197bc:	529e      	strh	r6, [r3, r2]
   197be:	80c5      	strh	r5, [r0, #6]
   197c0:	525d      	strh	r5, [r3, r1]
   197c2:	e7f4      	b.n	197ae <free_list_add+0x38>

000197c4 <free_list_remove_bidx>:
{
   197c4:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   197c6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   197ca:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   197cc:	4299      	cmp	r1, r3
   197ce:	f102 0104 	add.w	r1, r2, #4
   197d2:	d10a      	bne.n	197ea <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   197d4:	2301      	movs	r3, #1
   197d6:	fa03 f202 	lsl.w	r2, r3, r2
   197da:	68c3      	ldr	r3, [r0, #12]
   197dc:	ea23 0302 	bic.w	r3, r3, r2
   197e0:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   197e2:	2300      	movs	r3, #0
   197e4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   197e8:	bd10      	pop	{r4, pc}
   197ea:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   197ec:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   197f0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   197f4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   197f8:	80cb      	strh	r3, [r1, #6]
   197fa:	8082      	strh	r2, [r0, #4]
}
   197fc:	e7f4      	b.n	197e8 <free_list_remove_bidx+0x24>

000197fe <free_list_remove>:
{
   197fe:	b508      	push	{r3, lr}
   19800:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   19802:	f7ff ffb3 	bl	1976c <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   19806:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1980a:	f1c2 021f 	rsb	r2, r2, #31
   1980e:	4618      	mov	r0, r3
}
   19810:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   19814:	f7ff bfd6 	b.w	197c4 <free_list_remove_bidx>

00019818 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   19818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1981c:	fab1 f581 	clz	r5, r1
   19820:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   19824:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   19828:	4603      	mov	r3, r0
	if (b->next) {
   1982a:	693a      	ldr	r2, [r7, #16]
{
   1982c:	460e      	mov	r6, r1
	if (b->next) {
   1982e:	b1c2      	cbz	r2, 19862 <alloc_chunk+0x4a>
   19830:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   19834:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   19836:	4618      	mov	r0, r3
   19838:	4621      	mov	r1, r4
   1983a:	f7ff ff97 	bl	1976c <chunk_size>
   1983e:	42b0      	cmp	r0, r6
   19840:	d306      	bcc.n	19850 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   19842:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   19844:	4618      	mov	r0, r3
   19846:	f7ff ffbd 	bl	197c4 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1984a:	4620      	mov	r0, r4
   1984c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   19850:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   19854:	f1b8 0801 	subs.w	r8, r8, #1
   19858:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   1985a:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   1985c:	d001      	beq.n	19862 <alloc_chunk+0x4a>
   1985e:	4282      	cmp	r2, r0
   19860:	d1e8      	bne.n	19834 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   19862:	f1c5 0220 	rsb	r2, r5, #32
   19866:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1986a:	4094      	lsls	r4, r2
   1986c:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1986e:	4014      	ands	r4, r2
   19870:	d0eb      	beq.n	1984a <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   19872:	fa94 f2a4 	rbit	r2, r4
   19876:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1987a:	1d11      	adds	r1, r2, #4
   1987c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   19880:	4621      	mov	r1, r4
   19882:	e7df      	b.n	19844 <alloc_chunk+0x2c>

00019884 <merge_chunks>:
{
   19884:	b538      	push	{r3, r4, r5, lr}
   19886:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   19888:	f7ff ff70 	bl	1976c <chunk_size>
{
   1988c:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1988e:	4604      	mov	r4, r0
   19890:	4611      	mov	r1, r2
   19892:	4618      	mov	r0, r3
   19894:	f7ff ff6a 	bl	1976c <chunk_size>
		((uint16_t *)cmem)[f] = val;
   19898:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1989c:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1989e:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   198a0:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   198a2:	4618      	mov	r0, r3
   198a4:	f7ff ff62 	bl	1976c <chunk_size>
	void *cmem = &buf[c];
   198a8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   198aa:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   198ae:	bd38      	pop	{r3, r4, r5, pc}

000198b0 <split_chunks>:
{
   198b0:	b538      	push	{r3, r4, r5, lr}
   198b2:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   198b4:	f7ff ff5a 	bl	1976c <chunk_size>
{
   198b8:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   198ba:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   198bc:	1a51      	subs	r1, r2, r1
   198be:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   198c2:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   198c4:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   198c6:	8060      	strh	r0, [r4, #2]
   198c8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   198cc:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   198ce:	8044      	strh	r4, [r0, #2]
   198d0:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   198d4:	4618      	mov	r0, r3
   198d6:	4611      	mov	r1, r2
   198d8:	f7ff ff48 	bl	1976c <chunk_size>
	void *cmem = &buf[c];
   198dc:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   198de:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   198e2:	bd38      	pop	{r3, r4, r5, pc}

000198e4 <free_chunk>:
{
   198e4:	b538      	push	{r3, r4, r5, lr}
   198e6:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   198e8:	f7ff ff40 	bl	1976c <chunk_size>
   198ec:	460c      	mov	r4, r1
   198ee:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   198f0:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   198f4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   198f6:	07da      	lsls	r2, r3, #31
   198f8:	d40a      	bmi.n	19910 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   198fa:	4628      	mov	r0, r5
   198fc:	f7ff ff7f 	bl	197fe <free_list_remove>
	return c + chunk_size(h, c);
   19900:	4621      	mov	r1, r4
   19902:	4628      	mov	r0, r5
   19904:	f7ff ff32 	bl	1976c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   19908:	1822      	adds	r2, r4, r0
   1990a:	4628      	mov	r0, r5
   1990c:	f7ff ffba 	bl	19884 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   19910:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   19914:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   19916:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1991a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1991c:	07db      	lsls	r3, r3, #31
   1991e:	d40c      	bmi.n	1993a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   19920:	4628      	mov	r0, r5
   19922:	f7ff ff6c 	bl	197fe <free_list_remove>
		return ((uint16_t *)cmem)[f];
   19926:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1992a:	4622      	mov	r2, r4
   1992c:	1a61      	subs	r1, r4, r1
   1992e:	4628      	mov	r0, r5
   19930:	f7ff ffa8 	bl	19884 <merge_chunks>
   19934:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   19938:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1993a:	4621      	mov	r1, r4
   1993c:	4628      	mov	r0, r5
}
   1993e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   19942:	f7ff bf18 	b.w	19776 <free_list_add>

00019946 <sys_heap_free>:
	if (mem == NULL) {
   19946:	b161      	cbz	r1, 19962 <sys_heap_free+0x1c>
   19948:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1994a:	3904      	subs	r1, #4
   1994c:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1994e:	f021 0307 	bic.w	r3, r1, #7
   19952:	4403      	add	r3, r0
	free_chunk(h, c);
   19954:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19956:	885a      	ldrh	r2, [r3, #2]
   19958:	f022 0201 	bic.w	r2, r2, #1
   1995c:	805a      	strh	r2, [r3, #2]
   1995e:	f7ff bfc1 	b.w	198e4 <free_chunk>
}
   19962:	4770      	bx	lr

00019964 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   19964:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   19966:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   19968:	b909      	cbnz	r1, 1996e <sys_heap_alloc+0xa>
		return NULL;
   1996a:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1996c:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1996e:	68ab      	ldr	r3, [r5, #8]
   19970:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   19974:	d9f9      	bls.n	1996a <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19976:	310b      	adds	r1, #11
   19978:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1997a:	4621      	mov	r1, r4
   1997c:	4628      	mov	r0, r5
   1997e:	f7ff ff4b 	bl	19818 <alloc_chunk>
	if (c == 0U) {
   19982:	4606      	mov	r6, r0
   19984:	2800      	cmp	r0, #0
   19986:	d0f0      	beq.n	1996a <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   19988:	4601      	mov	r1, r0
   1998a:	4628      	mov	r0, r5
   1998c:	f7ff feee 	bl	1976c <chunk_size>
   19990:	42a0      	cmp	r0, r4
   19992:	d907      	bls.n	199a4 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   19994:	1932      	adds	r2, r6, r4
   19996:	4628      	mov	r0, r5
   19998:	f7ff ff8a 	bl	198b0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1999c:	4611      	mov	r1, r2
   1999e:	4628      	mov	r0, r5
   199a0:	f7ff fee9 	bl	19776 <free_list_add>
	void *cmem = &buf[c];
   199a4:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   199a8:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   199aa:	8853      	ldrh	r3, [r2, #2]
   199ac:	f043 0301 	orr.w	r3, r3, #1
   199b0:	8053      	strh	r3, [r2, #2]
   199b2:	3004      	adds	r0, #4
	return mem;
   199b4:	e7da      	b.n	1996c <sys_heap_alloc+0x8>

000199b6 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   199b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   199ba:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   199bc:	424a      	negs	r2, r1
   199be:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   199c2:	ea31 0202 	bics.w	r2, r1, r2
{
   199c6:	4603      	mov	r3, r0
	if (align != rew) {
   199c8:	d00a      	beq.n	199e0 <sys_heap_aligned_alloc+0x2a>
		return false;
   199ca:	2f04      	cmp	r7, #4
   199cc:	463a      	mov	r2, r7
   199ce:	46b9      	mov	r9, r7
   199d0:	bf28      	it	cs
   199d2:	2204      	movcs	r2, #4
		align -= rew;
   199d4:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   199d6:	b974      	cbnz	r4, 199f6 <sys_heap_aligned_alloc+0x40>
		return NULL;
   199d8:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   199da:	4628      	mov	r0, r5
   199dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   199e0:	2904      	cmp	r1, #4
   199e2:	d804      	bhi.n	199ee <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   199e4:	4621      	mov	r1, r4
}
   199e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   199ea:	f7ff bfbb 	b.w	19964 <sys_heap_alloc>
		rew = 0;
   199ee:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   199f2:	2204      	movs	r2, #4
   199f4:	e7ef      	b.n	199d6 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   199f6:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   199f8:	68b3      	ldr	r3, [r6, #8]
   199fa:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   199fe:	d9eb      	bls.n	199d8 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19a00:	f104 010b 	add.w	r1, r4, #11
   19a04:	4439      	add	r1, r7
   19a06:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   19a08:	08c9      	lsrs	r1, r1, #3
   19a0a:	4630      	mov	r0, r6
   19a0c:	f7ff ff04 	bl	19818 <alloc_chunk>
	if (c0 == 0) {
   19a10:	4680      	mov	r8, r0
   19a12:	2800      	cmp	r0, #0
   19a14:	d0e0      	beq.n	199d8 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   19a16:	f109 0504 	add.w	r5, r9, #4
   19a1a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   19a1e:	1e7b      	subs	r3, r7, #1
   19a20:	4435      	add	r5, r6
   19a22:	441d      	add	r5, r3
   19a24:	427f      	negs	r7, r7
   19a26:	403d      	ands	r5, r7
   19a28:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   19a2c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19a2e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   19a30:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19a32:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   19a34:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   19a38:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   19a3a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19a3e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   19a42:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   19a46:	d208      	bcs.n	19a5a <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   19a48:	4601      	mov	r1, r0
   19a4a:	463a      	mov	r2, r7
   19a4c:	4630      	mov	r0, r6
   19a4e:	f7ff ff2f 	bl	198b0 <split_chunks>
		free_list_add(h, c0);
   19a52:	4641      	mov	r1, r8
   19a54:	4630      	mov	r0, r6
   19a56:	f7ff fe8e 	bl	19776 <free_list_add>
	return c + chunk_size(h, c);
   19a5a:	4639      	mov	r1, r7
   19a5c:	4630      	mov	r0, r6
   19a5e:	f7ff fe85 	bl	1976c <chunk_size>
   19a62:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   19a64:	4284      	cmp	r4, r0
   19a66:	d207      	bcs.n	19a78 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   19a68:	4630      	mov	r0, r6
   19a6a:	4622      	mov	r2, r4
   19a6c:	f7ff ff20 	bl	198b0 <split_chunks>
		free_list_add(h, c_end);
   19a70:	4621      	mov	r1, r4
   19a72:	4630      	mov	r0, r6
   19a74:	f7ff fe7f 	bl	19776 <free_list_add>
	void *cmem = &buf[c];
   19a78:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19a7c:	8873      	ldrh	r3, [r6, #2]
   19a7e:	f043 0301 	orr.w	r3, r3, #1
   19a82:	8073      	strh	r3, [r6, #2]
   19a84:	e7a9      	b.n	199da <sys_heap_aligned_alloc+0x24>

00019a86 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   19a86:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   19a88:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   19a8a:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   19a8c:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   19a90:	f021 0107 	bic.w	r1, r1, #7
{
   19a94:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   19a96:	1acd      	subs	r5, r1, r3
   19a98:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   19a9a:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   19a9c:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   19aa0:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   19aa4:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19aa6:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   19aa8:	2600      	movs	r6, #0
   19aaa:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   19aac:	f1c0 0020 	rsb	r0, r0, #32
   19ab0:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   19ab4:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   19ab6:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   19ab8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   19abc:	4284      	cmp	r4, r0
   19abe:	d118      	bne.n	19af2 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19ac0:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19ac2:	f040 0001 	orr.w	r0, r0, #1
   19ac6:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   19ac8:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   19acc:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19ace:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   19ad0:	801e      	strh	r6, [r3, #0]
   19ad2:	8067      	strh	r7, [r4, #2]
   19ad4:	195c      	adds	r4, r3, r5
   19ad6:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   19ada:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   19ade:	8066      	strh	r6, [r4, #2]
   19ae0:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19ae2:	8850      	ldrh	r0, [r2, #2]
   19ae4:	f040 0001 	orr.w	r0, r0, #1
   19ae8:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   19aea:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   19aec:	4618      	mov	r0, r3
   19aee:	f7ff be42 	b.w	19776 <free_list_add>
		h->buckets[i].next = 0;
   19af2:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   19af6:	e7e1      	b.n	19abc <sys_heap_init+0x36>

00019af8 <encode_uint>:
{
   19af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19afc:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   19afe:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   19b00:	2b6f      	cmp	r3, #111	; 0x6f
{
   19b02:	4680      	mov	r8, r0
   19b04:	460f      	mov	r7, r1
   19b06:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   19b08:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   19b0c:	d029      	beq.n	19b62 <encode_uint+0x6a>
   19b0e:	d824      	bhi.n	19b5a <encode_uint+0x62>
		return 16;
   19b10:	2b58      	cmp	r3, #88	; 0x58
   19b12:	bf14      	ite	ne
   19b14:	260a      	movne	r6, #10
   19b16:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   19b18:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   19b1c:	4632      	mov	r2, r6
   19b1e:	2300      	movs	r3, #0
   19b20:	4640      	mov	r0, r8
   19b22:	4639      	mov	r1, r7
   19b24:	f7f6 feba 	bl	1089c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19b28:	2a09      	cmp	r2, #9
   19b2a:	b2d4      	uxtb	r4, r2
   19b2c:	d81e      	bhi.n	19b6c <encode_uint+0x74>
   19b2e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   19b30:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19b32:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   19b34:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19b38:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   19b3c:	d301      	bcc.n	19b42 <encode_uint+0x4a>
   19b3e:	45d1      	cmp	r9, sl
   19b40:	d811      	bhi.n	19b66 <encode_uint+0x6e>
	if (conv->flag_hash) {
   19b42:	782b      	ldrb	r3, [r5, #0]
   19b44:	069b      	lsls	r3, r3, #26
   19b46:	d505      	bpl.n	19b54 <encode_uint+0x5c>
		if (radix == 8) {
   19b48:	2e08      	cmp	r6, #8
   19b4a:	d115      	bne.n	19b78 <encode_uint+0x80>
			conv->altform_0 = true;
   19b4c:	78ab      	ldrb	r3, [r5, #2]
   19b4e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   19b52:	70ab      	strb	r3, [r5, #2]
}
   19b54:	4648      	mov	r0, r9
   19b56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   19b5a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   19b5e:	2b70      	cmp	r3, #112	; 0x70
   19b60:	e7d7      	b.n	19b12 <encode_uint+0x1a>
	switch (specifier) {
   19b62:	2608      	movs	r6, #8
   19b64:	e7d8      	b.n	19b18 <encode_uint+0x20>
		value /= radix;
   19b66:	4680      	mov	r8, r0
   19b68:	460f      	mov	r7, r1
   19b6a:	e7d7      	b.n	19b1c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19b6c:	f1bb 0f19 	cmp.w	fp, #25
   19b70:	bf94      	ite	ls
   19b72:	3437      	addls	r4, #55	; 0x37
   19b74:	3457      	addhi	r4, #87	; 0x57
   19b76:	e7db      	b.n	19b30 <encode_uint+0x38>
		} else if (radix == 16) {
   19b78:	2e10      	cmp	r6, #16
   19b7a:	d1eb      	bne.n	19b54 <encode_uint+0x5c>
			conv->altform_0c = true;
   19b7c:	78ab      	ldrb	r3, [r5, #2]
   19b7e:	f043 0310 	orr.w	r3, r3, #16
   19b82:	e7e6      	b.n	19b52 <encode_uint+0x5a>

00019b84 <outs>:
{
   19b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b88:	4607      	mov	r7, r0
   19b8a:	4688      	mov	r8, r1
   19b8c:	4615      	mov	r5, r2
   19b8e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   19b90:	4614      	mov	r4, r2
   19b92:	42b4      	cmp	r4, r6
   19b94:	eba4 0005 	sub.w	r0, r4, r5
   19b98:	d302      	bcc.n	19ba0 <outs+0x1c>
   19b9a:	b93e      	cbnz	r6, 19bac <outs+0x28>
   19b9c:	7823      	ldrb	r3, [r4, #0]
   19b9e:	b12b      	cbz	r3, 19bac <outs+0x28>
		int rc = out((int)*sp++, ctx);
   19ba0:	f814 0b01 	ldrb.w	r0, [r4], #1
   19ba4:	4641      	mov	r1, r8
   19ba6:	47b8      	blx	r7
		if (rc < 0) {
   19ba8:	2800      	cmp	r0, #0
   19baa:	daf2      	bge.n	19b92 <outs+0xe>
}
   19bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019bb0 <ring_buf_put_claim>:

#include <sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   19bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
	wrap_size = buf->put_head - base;
   19bb2:	6846      	ldr	r6, [r0, #4]
	base = buf->put_base;
   19bb4:	68c7      	ldr	r7, [r0, #12]
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
   19bb6:	6945      	ldr	r5, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
   19bb8:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
   19bba:	eba6 0c07 	sub.w	ip, r6, r7
   19bbe:	1b75      	subs	r5, r6, r5
	if (unlikely(wrap_size >= buf->size)) {
   19bc0:	4563      	cmp	r3, ip
{
   19bc2:	4604      	mov	r4, r0
   19bc4:	eba3 0005 	sub.w	r0, r3, r5
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
   19bc8:	bf9c      	itt	ls
   19bca:	ebac 0c03 	subls.w	ip, ip, r3
		base += buf->size;
   19bce:	18ff      	addls	r7, r7, r3
	}
	wrap_size = buf->size - wrap_size;

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
   19bd0:	4282      	cmp	r2, r0
   19bd2:	bf28      	it	cs
   19bd4:	4602      	movcs	r2, r0
	wrap_size = buf->size - wrap_size;
   19bd6:	eba3 000c 	sub.w	r0, r3, ip
	size = MIN(size, wrap_size);
   19bda:	4290      	cmp	r0, r2

	*data = &buf->buffer[buf->put_head - base];
   19bdc:	6823      	ldr	r3, [r4, #0]
	size = MIN(size, wrap_size);
   19bde:	bf28      	it	cs
   19be0:	4610      	movcs	r0, r2
	*data = &buf->buffer[buf->put_head - base];
   19be2:	1bf7      	subs	r7, r6, r7
   19be4:	441f      	add	r7, r3
	buf->put_head += size;
   19be6:	4406      	add	r6, r0
	*data = &buf->buffer[buf->put_head - base];
   19be8:	600f      	str	r7, [r1, #0]
	buf->put_head += size;
   19bea:	6066      	str	r6, [r4, #4]

	return size;
}
   19bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019bee <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
   19bee:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   19bf2:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
   19bf4:	428a      	cmp	r2, r1
   19bf6:	d30b      	bcc.n	19c10 <ring_buf_put_finish+0x22>
		return -EINVAL;
	}

	buf->put_tail += size;
   19bf8:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
   19bfa:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
   19bfc:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
   19bfe:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
   19c02:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
   19c04:	428a      	cmp	r2, r1
   19c06:	d801      	bhi.n	19c0c <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
   19c08:	4413      	add	r3, r2
   19c0a:	60c3      	str	r3, [r0, #12]
	}

	return 0;
   19c0c:	2000      	movs	r0, #0
}
   19c0e:	4770      	bx	lr
		return -EINVAL;
   19c10:	f06f 0015 	mvn.w	r0, #21
   19c14:	4770      	bx	lr

00019c16 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   19c16:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19c1a:	4680      	mov	r8, r0
   19c1c:	460e      	mov	r6, r1
   19c1e:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   19c20:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   19c22:	462a      	mov	r2, r5
   19c24:	a901      	add	r1, sp, #4
   19c26:	4640      	mov	r0, r8
   19c28:	f7ff ffc2 	bl	19bb0 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   19c2c:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
   19c2e:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   19c30:	4602      	mov	r2, r0
   19c32:	9801      	ldr	r0, [sp, #4]
   19c34:	f000 f9b5 	bl	19fa2 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   19c38:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   19c3a:	4427      	add	r7, r4
		data += partial_size;
   19c3c:	4426      	add	r6, r4
	} while (size && partial_size);
   19c3e:	d001      	beq.n	19c44 <ring_buf_put+0x2e>
   19c40:	2c00      	cmp	r4, #0
   19c42:	d1ee      	bne.n	19c22 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   19c44:	4639      	mov	r1, r7
   19c46:	4640      	mov	r0, r8
   19c48:	f7ff ffd1 	bl	19bee <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   19c4c:	4638      	mov	r0, r7
   19c4e:	b002      	add	sp, #8
   19c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019c54 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   19c54:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
   19c56:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
   19c58:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
   19c5a:	69c3      	ldr	r3, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
   19c5c:	6887      	ldr	r7, [r0, #8]
	wrap_size = buf->get_head - base;
   19c5e:	eba5 0c06 	sub.w	ip, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
   19c62:	4563      	cmp	r3, ip
{
   19c64:	4604      	mov	r4, r0
   19c66:	eba7 0005 	sub.w	r0, r7, r5
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
   19c6a:	bf9c      	itt	ls
   19c6c:	ebac 0c03 	subls.w	ip, ip, r3
		base += buf->size;
   19c70:	18f6      	addls	r6, r6, r3
	}
	wrap_size = buf->size - wrap_size;

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
   19c72:	4290      	cmp	r0, r2
   19c74:	bf28      	it	cs
   19c76:	4610      	movcs	r0, r2
   19c78:	4607      	mov	r7, r0
	wrap_size = buf->size - wrap_size;
   19c7a:	eba3 000c 	sub.w	r0, r3, ip
	size = MIN(size, wrap_size);
   19c7e:	42b8      	cmp	r0, r7

	*data = &buf->buffer[buf->get_head - base];
   19c80:	6823      	ldr	r3, [r4, #0]
	size = MIN(size, wrap_size);
   19c82:	bf28      	it	cs
   19c84:	4638      	movcs	r0, r7
	*data = &buf->buffer[buf->get_head - base];
   19c86:	1bae      	subs	r6, r5, r6
   19c88:	441e      	add	r6, r3
	buf->get_head += size;
   19c8a:	4405      	add	r5, r0
	*data = &buf->buffer[buf->get_head - base];
   19c8c:	600e      	str	r6, [r1, #0]
	buf->get_head += size;
   19c8e:	6125      	str	r5, [r4, #16]

	return size;
}
   19c90:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019c92 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
   19c92:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   19c96:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
   19c98:	428a      	cmp	r2, r1
   19c9a:	d30b      	bcc.n	19cb4 <ring_buf_get_finish+0x22>
		return -EINVAL;
	}

	buf->get_tail += size;
   19c9c:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
   19c9e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
   19ca2:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
   19ca6:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
   19ca8:	428a      	cmp	r2, r1
   19caa:	d801      	bhi.n	19cb0 <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
   19cac:	4413      	add	r3, r2
   19cae:	6183      	str	r3, [r0, #24]
	}

	return 0;
   19cb0:	2000      	movs	r0, #0
}
   19cb2:	4770      	bx	lr
		return -EINVAL;
   19cb4:	f06f 0015 	mvn.w	r0, #21
   19cb8:	4770      	bx	lr

00019cba <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   19cba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19cbe:	4680      	mov	r8, r0
   19cc0:	460d      	mov	r5, r1
   19cc2:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   19cc4:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   19cc6:	4632      	mov	r2, r6
   19cc8:	a901      	add	r1, sp, #4
   19cca:	4640      	mov	r0, r8
   19ccc:	f7ff ffc2 	bl	19c54 <ring_buf_get_claim>
   19cd0:	4604      	mov	r4, r0
		if (data) {
   19cd2:	b12d      	cbz	r5, 19ce0 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   19cd4:	4602      	mov	r2, r0
   19cd6:	9901      	ldr	r1, [sp, #4]
   19cd8:	4628      	mov	r0, r5
   19cda:	f000 f962 	bl	19fa2 <memcpy>
			data += partial_size;
   19cde:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   19ce0:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   19ce2:	4427      	add	r7, r4
	} while (size && partial_size);
   19ce4:	d001      	beq.n	19cea <ring_buf_get+0x30>
   19ce6:	2c00      	cmp	r4, #0
   19ce8:	d1ed      	bne.n	19cc6 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   19cea:	4639      	mov	r1, r7
   19cec:	4640      	mov	r0, r8
   19cee:	f7ff ffd0 	bl	19c92 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   19cf2:	4638      	mov	r0, r7
   19cf4:	b002      	add	sp, #8
   19cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019cfa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_BOSSA_DEVICE_NAME, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_BOSSA_LEGACY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   19cfa:	4770      	bx	lr

00019cfc <usb_write>:
{
   19cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19d00:	4606      	mov	r6, r0
   19d02:	460f      	mov	r7, r1
   19d04:	4690      	mov	r8, r2
   19d06:	4699      	mov	r9, r3
   19d08:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   19d0a:	464b      	mov	r3, r9
   19d0c:	4642      	mov	r2, r8
   19d0e:	4639      	mov	r1, r7
   19d10:	4630      	mov	r0, r6
   19d12:	f7f9 fec1 	bl	13a98 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   19d16:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   19d1a:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   19d1c:	d103      	bne.n	19d26 <usb_write+0x2a>
	z_impl_k_yield();
   19d1e:	f7ff f86b 	bl	18df8 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   19d22:	3d01      	subs	r5, #1
   19d24:	d1f1      	bne.n	19d0a <usb_write+0xe>
}
   19d26:	4620      	mov	r0, r4
   19d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019d2c <usb_get_dev_data_by_cfg>:
	return list->head;
   19d2c:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   19d2e:	b140      	cbz	r0, 19d42 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   19d30:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   19d34:	685b      	ldr	r3, [r3, #4]
   19d36:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   19d38:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   19d3c:	d001      	beq.n	19d42 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   19d3e:	6840      	ldr	r0, [r0, #4]
   19d40:	e7f5      	b.n	19d2e <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   19d42:	4770      	bx	lr

00019d44 <usb_get_dev_data_by_iface>:
	return list->head;
   19d44:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   19d46:	b150      	cbz	r0, 19d5e <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   19d48:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   19d4c:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   19d4e:	685b      	ldr	r3, [r3, #4]
   19d50:	789b      	ldrb	r3, [r3, #2]
   19d52:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   19d54:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   19d58:	d001      	beq.n	19d5e <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   19d5a:	6840      	ldr	r0, [r0, #4]
   19d5c:	e7f3      	b.n	19d46 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   19d5e:	4770      	bx	lr

00019d60 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   19d60:	b530      	push	{r4, r5, lr}
	return list->head;
   19d62:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   19d64:	b188      	cbz	r0, 19d8a <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   19d66:	f850 3c04 	ldr.w	r3, [r0, #-4]
   19d6a:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   19d6c:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   19d6e:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   19d70:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   19d72:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   19d74:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   19d76:	b2dc      	uxtb	r4, r3
   19d78:	42a5      	cmp	r5, r4
   19d7a:	d801      	bhi.n	19d80 <usb_get_dev_data_by_ep+0x20>
	return node->next;
   19d7c:	6840      	ldr	r0, [r0, #4]
   19d7e:	e7f1      	b.n	19d64 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   19d80:	3301      	adds	r3, #1
   19d82:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   19d86:	428c      	cmp	r4, r1
   19d88:	d1f5      	bne.n	19d76 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   19d8a:	bd30      	pop	{r4, r5, pc}

00019d8c <usb_transfer_is_busy>:
{
   19d8c:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   19d8e:	f7f8 f999 	bl	120c4 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   19d92:	b128      	cbz	r0, 19da0 <usb_transfer_is_busy+0x14>
   19d94:	6840      	ldr	r0, [r0, #4]
   19d96:	f110 0f10 	cmn.w	r0, #16
   19d9a:	bf14      	ite	ne
   19d9c:	2000      	movne	r0, #0
   19d9e:	2001      	moveq	r0, #1
}
   19da0:	bd08      	pop	{r3, pc}

00019da2 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   19da2:	1c4b      	adds	r3, r1, #1
   19da4:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   19da6:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   19da8:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   19daa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   19dae:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   19db0:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   19db4:	4770      	bx	lr

00019db6 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   19db6:	e950 3102 	ldrd	r3, r1, [r0, #-8]
   19dba:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   19dbc:	4718      	bx	r3

00019dbe <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
   19dbe:	6903      	ldr	r3, [r0, #16]
   19dc0:	2200      	movs	r2, #0
   19dc2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   19dc6:	4770      	bx	lr

00019dc8 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   19dc8:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   19dca:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
   19dce:	b108      	cbz	r0, 19dd4 <cdc_acm_irq_tx_ready+0xc>
		return 1;
   19dd0:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
}
   19dd4:	4770      	bx	lr

00019dd6 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
   19dd6:	6903      	ldr	r3, [r0, #16]
   19dd8:	2200      	movs	r2, #0
   19dda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
   19dde:	4770      	bx	lr

00019de0 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
   19de0:	6903      	ldr	r3, [r0, #16]
}
   19de2:	f893 002d 	ldrb.w	r0, [r3, #45]	; 0x2d
   19de6:	4770      	bx	lr

00019de8 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   19de8:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   19dea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   19dee:	b112      	cbz	r2, 19df6 <cdc_acm_irq_is_pending+0xe>
   19df0:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   19df4:	b92a      	cbnz	r2, 19e02 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   19df6:	f893 002d 	ldrb.w	r0, [r3, #45]	; 0x2d
   19dfa:	b118      	cbz	r0, 19e04 <cdc_acm_irq_is_pending+0x1c>
		return 0;
   19dfc:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
   19e00:	4770      	bx	lr
		return 1;
   19e02:	2001      	movs	r0, #1
}
   19e04:	4770      	bx	lr

00019e06 <cdc_acm_irq_update>:
}
   19e06:	2001      	movs	r0, #1
   19e08:	4770      	bx	lr

00019e0a <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   19e0a:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
   19e0c:	e9c3 1200 	strd	r1, r2, [r3]
}
   19e10:	4770      	bx	lr

00019e12 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
   19e12:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   19e14:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   19e16:	d007      	beq.n	19e28 <cdc_acm_line_ctrl_get+0x16>
   19e18:	2904      	cmp	r1, #4
   19e1a:	d00a      	beq.n	19e32 <cdc_acm_line_ctrl_get+0x20>
   19e1c:	2901      	cmp	r1, #1
   19e1e:	d10d      	bne.n	19e3c <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   19e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
		*val = (dev_data->line_state &
   19e22:	6013      	str	r3, [r2, #0]
		return 0;
   19e24:	2000      	movs	r0, #0
   19e26:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   19e28:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
   19e2c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   19e30:	e7f7      	b.n	19e22 <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   19e32:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
   19e36:	f003 0301 	and.w	r3, r3, #1
   19e3a:	e7f2      	b.n	19e22 <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
   19e3c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   19e40:	4770      	bx	lr

00019e42 <cdc_acm_fifo_read>:
{
   19e42:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   19e44:	6904      	ldr	r4, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   19e46:	6f20      	ldr	r0, [r4, #112]	; 0x70
   19e48:	f7ff ff37 	bl	19cba <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   19e4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   19e4e:	691a      	ldr	r2, [r3, #16]
   19e50:	689b      	ldr	r3, [r3, #8]
   19e52:	429a      	cmp	r2, r3
		dev_data->rx_ready = false;
   19e54:	bf04      	itt	eq
   19e56:	2300      	moveq	r3, #0
   19e58:	f884 302d 	strbeq.w	r3, [r4, #45]	; 0x2d
}
   19e5c:	bd10      	pop	{r4, pc}

00019e5e <cdc_acm_poll_in>:
{
   19e5e:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   19e60:	2201      	movs	r2, #1
   19e62:	f7ff ffee 	bl	19e42 <cdc_acm_fifo_read>
}
   19e66:	3801      	subs	r0, #1
   19e68:	bf18      	it	ne
   19e6a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   19e6e:	bd08      	pop	{r3, pc}

00019e70 <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
   19e70:	2940      	cmp	r1, #64	; 0x40
{
   19e72:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   19e74:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   19e76:	d042      	beq.n	19efe <cdc_acm_line_ctrl_set+0x8e>
   19e78:	d813      	bhi.n	19ea2 <cdc_acm_line_ctrl_set+0x32>
   19e7a:	2910      	cmp	r1, #16
   19e7c:	d032      	beq.n	19ee4 <cdc_acm_line_ctrl_set+0x74>
   19e7e:	d806      	bhi.n	19e8e <cdc_acm_line_ctrl_set+0x1e>
   19e80:	2901      	cmp	r1, #1
   19e82:	d01e      	beq.n	19ec2 <cdc_acm_line_ctrl_set+0x52>
   19e84:	2908      	cmp	r1, #8
   19e86:	d01f      	beq.n	19ec8 <cdc_acm_line_ctrl_set+0x58>
   19e88:	f06f 0012 	mvn.w	r0, #18
}
   19e8c:	bd08      	pop	{r3, pc}
	switch (ctrl) {
   19e8e:	2920      	cmp	r1, #32
   19e90:	d1fa      	bne.n	19e88 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   19e92:	f893 1080 	ldrb.w	r1, [r3, #128]	; 0x80
   19e96:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
   19e9a:	b342      	cbz	r2, 19eee <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   19e9c:	f041 0104 	orr.w	r1, r1, #4
   19ea0:	e025      	b.n	19eee <cdc_acm_line_ctrl_set+0x7e>
	switch (ctrl) {
   19ea2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   19ea6:	d033      	beq.n	19f10 <cdc_acm_line_ctrl_set+0xa0>
   19ea8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   19eac:	d039      	beq.n	19f22 <cdc_acm_line_ctrl_set+0xb2>
   19eae:	2980      	cmp	r1, #128	; 0x80
   19eb0:	d1ea      	bne.n	19e88 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   19eb2:	f893 1080 	ldrb.w	r1, [r3, #128]	; 0x80
   19eb6:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
   19eba:	b1c2      	cbz	r2, 19eee <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   19ebc:	f041 0110 	orr.w	r1, r1, #16
   19ec0:	e015      	b.n	19eee <cdc_acm_line_ctrl_set+0x7e>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   19ec2:	679a      	str	r2, [r3, #120]	; 0x78
		return 0;
   19ec4:	2000      	movs	r0, #0
   19ec6:	e7e1      	b.n	19e8c <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   19ec8:	f893 1080 	ldrb.w	r1, [r3, #128]	; 0x80
   19ecc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
   19ed0:	b92a      	cbnz	r2, 19ede <cdc_acm_line_ctrl_set+0x6e>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   19ed2:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   19ed6:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
   19ed8:	f7f8 fc3a 	bl	12750 <cdc_acm_send_notification.isra.0>
   19edc:	e7f2      	b.n	19ec4 <cdc_acm_line_ctrl_set+0x54>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   19ede:	f041 0101 	orr.w	r1, r1, #1
   19ee2:	e7f6      	b.n	19ed2 <cdc_acm_line_ctrl_set+0x62>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   19ee4:	f893 1080 	ldrb.w	r1, [r3, #128]	; 0x80
   19ee8:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
   19eec:	b922      	cbnz	r2, 19ef8 <cdc_acm_line_ctrl_set+0x88>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   19eee:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
		cdc_acm_send_notification(dev, dev_data->serial_state);
   19ef2:	f893 1080 	ldrb.w	r1, [r3, #128]	; 0x80
   19ef6:	e7ef      	b.n	19ed8 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   19ef8:	f041 0102 	orr.w	r1, r1, #2
   19efc:	e7f7      	b.n	19eee <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   19efe:	f893 1080 	ldrb.w	r1, [r3, #128]	; 0x80
   19f02:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
   19f06:	2a00      	cmp	r2, #0
   19f08:	d0f1      	beq.n	19eee <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   19f0a:	f041 0108 	orr.w	r1, r1, #8
   19f0e:	e7ee      	b.n	19eee <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   19f10:	f893 1080 	ldrb.w	r1, [r3, #128]	; 0x80
   19f14:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
   19f18:	2a00      	cmp	r2, #0
   19f1a:	d0e8      	beq.n	19eee <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   19f1c:	f041 0120 	orr.w	r1, r1, #32
   19f20:	e7e5      	b.n	19eee <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   19f22:	f893 1080 	ldrb.w	r1, [r3, #128]	; 0x80
   19f26:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
   19f2a:	2a00      	cmp	r2, #0
   19f2c:	d0df      	beq.n	19eee <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   19f2e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   19f32:	e7dc      	b.n	19eee <cdc_acm_line_ctrl_set+0x7e>

00019f34 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   19f34:	f002 bf43 	b.w	1cdbe <z_fatal_error>

00019f38 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   19f38:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   19f3a:	6800      	ldr	r0, [r0, #0]
   19f3c:	f002 bf3f 	b.w	1cdbe <z_fatal_error>

00019f40 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   19f40:	2100      	movs	r1, #0
   19f42:	2001      	movs	r0, #1
   19f44:	f7ff bff6 	b.w	19f34 <z_arm_fatal_error>

00019f48 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   19f48:	b508      	push	{r3, lr}
	handler();
   19f4a:	f7f8 fdf7 	bl	12b3c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   19f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   19f52:	f7f8 bed7 	b.w	12d04 <z_arm_exc_exit>

00019f56 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   19f56:	3901      	subs	r1, #1
   19f58:	4603      	mov	r3, r0
   19f5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   19f5e:	b90a      	cbnz	r2, 19f64 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   19f60:	701a      	strb	r2, [r3, #0]

	return dest;
}
   19f62:	4770      	bx	lr
		*d = *s;
   19f64:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   19f68:	e7f7      	b.n	19f5a <strcpy+0x4>

00019f6a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   19f6a:	4603      	mov	r3, r0
	size_t n = 0;
   19f6c:	2000      	movs	r0, #0

	while (*s != '\0') {
   19f6e:	5c1a      	ldrb	r2, [r3, r0]
   19f70:	b902      	cbnz	r2, 19f74 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   19f72:	4770      	bx	lr
		n++;
   19f74:	3001      	adds	r0, #1
   19f76:	e7fa      	b.n	19f6e <strlen+0x4>

00019f78 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   19f78:	4603      	mov	r3, r0
	size_t n = 0;
   19f7a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   19f7c:	5c1a      	ldrb	r2, [r3, r0]
   19f7e:	b10a      	cbz	r2, 19f84 <strnlen+0xc>
   19f80:	4288      	cmp	r0, r1
   19f82:	d100      	bne.n	19f86 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   19f84:	4770      	bx	lr
		n++;
   19f86:	3001      	adds	r0, #1
   19f88:	e7f8      	b.n	19f7c <strnlen+0x4>

00019f8a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   19f8a:	1e43      	subs	r3, r0, #1
   19f8c:	3901      	subs	r1, #1
   19f8e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19f92:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   19f96:	4282      	cmp	r2, r0
   19f98:	d101      	bne.n	19f9e <strcmp+0x14>
   19f9a:	2a00      	cmp	r2, #0
   19f9c:	d1f7      	bne.n	19f8e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   19f9e:	1a10      	subs	r0, r2, r0
   19fa0:	4770      	bx	lr

00019fa2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   19fa2:	b510      	push	{r4, lr}
   19fa4:	1e43      	subs	r3, r0, #1
   19fa6:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   19fa8:	4291      	cmp	r1, r2
   19faa:	d100      	bne.n	19fae <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   19fac:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   19fae:	f811 4b01 	ldrb.w	r4, [r1], #1
   19fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   19fb6:	e7f7      	b.n	19fa8 <memcpy+0x6>

00019fb8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   19fb8:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   19fba:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   19fbc:	4603      	mov	r3, r0
	while (n > 0) {
   19fbe:	4293      	cmp	r3, r2
   19fc0:	d100      	bne.n	19fc4 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   19fc2:	4770      	bx	lr
		*(d_byte++) = c_byte;
   19fc4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   19fc8:	e7f9      	b.n	19fbe <memset+0x6>

00019fca <_stdout_hook_default>:
}
   19fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19fce:	4770      	bx	lr

00019fd0 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   19fd0:	2806      	cmp	r0, #6
   19fd2:	d108      	bne.n	19fe6 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   19fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19fd8:	2201      	movs	r2, #1
   19fda:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   19fde:	f3bf 8f4f 	dsb	sy
        __WFE();
   19fe2:	bf20      	wfe
    while (true)
   19fe4:	e7fd      	b.n	19fe2 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   19fe6:	4770      	bx	lr

00019fe8 <pm_state_exit_post_ops>:
   19fe8:	2300      	movs	r3, #0
   19fea:	f383 8811 	msr	BASEPRI, r3
   19fee:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   19ff2:	4770      	bx	lr

00019ff4 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   19ff4:	6903      	ldr	r3, [r0, #16]
{
   19ff6:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   19ff8:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   19ffc:	2300      	movs	r3, #0
   19ffe:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   1a000:	7f83      	ldrb	r3, [r0, #30]
{
   1a002:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   1a004:	b113      	cbz	r3, 1a00c <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1a006:	7a40      	ldrb	r0, [r0, #9]
   1a008:	f001 f80d 	bl	1b026 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   1a00c:	2301      	movs	r3, #1
   1a00e:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   1a010:	2300      	movs	r3, #0
   1a012:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   1a014:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   1a016:	77a3      	strb	r3, [r4, #30]
}
   1a018:	bd10      	pop	{r4, pc}

0001a01a <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1a01a:	f7fe ba1f 	b.w	1845c <z_impl_k_mutex_lock>

0001a01e <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1a01e:	f7fe ba95 	b.w	1854c <z_impl_k_mutex_unlock>

0001a022 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   1a022:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   1a024:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   1a026:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   1a02a:	b921      	cbnz	r1, 1a036 <usb_dc_ep_check_cap+0x14>
   1a02c:	1e10      	subs	r0, r2, #0
   1a02e:	bf18      	it	ne
   1a030:	2001      	movne	r0, #1
   1a032:	4240      	negs	r0, r0
   1a034:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   1a036:	2a08      	cmp	r2, #8
   1a038:	d806      	bhi.n	1a048 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   1a03a:	2901      	cmp	r1, #1
   1a03c:	d107      	bne.n	1a04e <usb_dc_ep_check_cap+0x2c>
   1a03e:	f083 0008 	eor.w	r0, r3, #8
   1a042:	f340 00c0 	sbfx	r0, r0, #3, #1
   1a046:	4770      	bx	lr
		return -1;
   1a048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a04c:	4770      	bx	lr
	return 0;
   1a04e:	2000      	movs	r0, #0
}
   1a050:	4770      	bx	lr

0001a052 <usb_dc_ep_read>:
{
   1a052:	b570      	push	{r4, r5, r6, lr}
   1a054:	4604      	mov	r4, r0
   1a056:	460e      	mov	r6, r1
   1a058:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   1a05a:	f7f9 fd95 	bl	13b88 <usb_dc_ep_read_wait>
	if (ret) {
   1a05e:	b930      	cbnz	r0, 1a06e <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   1a060:	b906      	cbnz	r6, 1a064 <usb_dc_ep_read+0x12>
   1a062:	b125      	cbz	r5, 1a06e <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   1a064:	4620      	mov	r0, r4
}
   1a066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   1a06a:	f7f9 bdd5 	b.w	13c18 <usb_dc_ep_read_continue>
}
   1a06e:	bd70      	pop	{r4, r5, r6, pc}

0001a070 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1a070:	6903      	ldr	r3, [r0, #16]
   1a072:	b2c9      	uxtb	r1, r1
   1a074:	220c      	movs	r2, #12
   1a076:	fb01 3302 	mla	r3, r1, r2, r3
   1a07a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1a07c:	f000 0007 	and.w	r0, r0, #7
   1a080:	4770      	bx	lr

0001a082 <set_on_state>:
	__asm__ volatile(
   1a082:	f04f 0320 	mov.w	r3, #32
   1a086:	f3ef 8211 	mrs	r2, BASEPRI
   1a08a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a08e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1a092:	6803      	ldr	r3, [r0, #0]
   1a094:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a098:	f043 0302 	orr.w	r3, r3, #2
   1a09c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1a09e:	f382 8811 	msr	BASEPRI, r2
   1a0a2:	f3bf 8f6f 	isb	sy
}
   1a0a6:	4770      	bx	lr

0001a0a8 <stop>:
{
   1a0a8:	4603      	mov	r3, r0
   1a0aa:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   1a0ac:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1a0ae:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1a0b0:	f04f 0420 	mov.w	r4, #32
   1a0b4:	f3ef 8611 	mrs	r6, BASEPRI
   1a0b8:	f384 8812 	msr	BASEPRI_MAX, r4
   1a0bc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1a0c0:	250c      	movs	r5, #12
   1a0c2:	fb05 0401 	mla	r4, r5, r1, r0
   1a0c6:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1a0c8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1a0cc:	d001      	beq.n	1a0d2 <stop+0x2a>
   1a0ce:	42a2      	cmp	r2, r4
   1a0d0:	d110      	bne.n	1a0f4 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1a0d2:	fb05 0001 	mla	r0, r5, r1, r0
   1a0d6:	2201      	movs	r2, #1
   1a0d8:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   1a0da:	2000      	movs	r0, #0
	__asm__ volatile(
   1a0dc:	f386 8811 	msr	BASEPRI, r6
   1a0e0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1a0e4:	b928      	cbnz	r0, 1a0f2 <stop+0x4a>
	get_sub_config(dev, type)->stop();
   1a0e6:	685b      	ldr	r3, [r3, #4]
   1a0e8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1a0ec:	684b      	ldr	r3, [r1, #4]
   1a0ee:	4798      	blx	r3
	return 0;
   1a0f0:	2000      	movs	r0, #0
}
   1a0f2:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   1a0f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a0f8:	e7f0      	b.n	1a0dc <stop+0x34>

0001a0fa <api_stop>:
	return stop(dev, subsys, CTX_API);
   1a0fa:	2280      	movs	r2, #128	; 0x80
   1a0fc:	f7ff bfd4 	b.w	1a0a8 <stop>

0001a100 <async_start>:
{
   1a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a102:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1a104:	6904      	ldr	r4, [r0, #16]
{
   1a106:	4605      	mov	r5, r0
   1a108:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1a10a:	f04f 0020 	mov.w	r0, #32
   1a10e:	f3ef 8c11 	mrs	ip, BASEPRI
   1a112:	f380 8812 	msr	BASEPRI_MAX, r0
   1a116:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1a11a:	260c      	movs	r6, #12
   1a11c:	fb06 4601 	mla	r6, r6, r1, r4
   1a120:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1a122:	f000 0e07 	and.w	lr, r0, #7
   1a126:	f1be 0f01 	cmp.w	lr, #1
   1a12a:	d111      	bne.n	1a150 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1a12c:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   1a12e:	2600      	movs	r6, #0
	__asm__ volatile(
   1a130:	f38c 8811 	msr	BASEPRI, ip
   1a134:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1a138:	b946      	cbnz	r6, 1a14c <async_start+0x4c>
	subdata->cb = cb;
   1a13a:	200c      	movs	r0, #12
   1a13c:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   1a140:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1a144:	686b      	ldr	r3, [r5, #4]
   1a146:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   1a14a:	4798      	blx	r3
}
   1a14c:	4630      	mov	r0, r6
   1a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1a150:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1a154:	4287      	cmp	r7, r0
   1a156:	bf14      	ite	ne
   1a158:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   1a15c:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   1a160:	e7e6      	b.n	1a130 <async_start+0x30>

0001a162 <api_start>:
{
   1a162:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1a164:	2480      	movs	r4, #128	; 0x80
   1a166:	9400      	str	r4, [sp, #0]
   1a168:	f7ff ffca 	bl	1a100 <async_start>
}
   1a16c:	b002      	add	sp, #8
   1a16e:	bd10      	pop	{r4, pc}

0001a170 <onoff_started_callback>:
	return &data->mgr[type];
   1a170:	6900      	ldr	r0, [r0, #16]
{
   1a172:	b410      	push	{r4}
	return &data->mgr[type];
   1a174:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1a176:	241c      	movs	r4, #28
   1a178:	fb03 0004 	mla	r0, r3, r4, r0
   1a17c:	2100      	movs	r1, #0
}
   1a17e:	bc10      	pop	{r4}
	notify(mgr, 0);
   1a180:	4710      	bx	r2

0001a182 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1a182:	2000      	movs	r0, #0
   1a184:	f000 bd88 	b.w	1ac98 <nrfx_clock_start>

0001a188 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1a188:	2000      	movs	r0, #0
   1a18a:	f000 bdc2 	b.w	1ad12 <nrfx_clock_stop>

0001a18e <blocking_start_callback>:
{
   1a18e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1a190:	f7fe ba4c 	b.w	1862c <z_impl_k_sem_give>

0001a194 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a194:	6843      	ldr	r3, [r0, #4]
   1a196:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1a198:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1a19c:	600b      	str	r3, [r1, #0]
}
   1a19e:	2000      	movs	r0, #0
   1a1a0:	4770      	bx	lr

0001a1a2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a1a2:	6843      	ldr	r3, [r0, #4]
   1a1a4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1a1a6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1a1aa:	4042      	eors	r2, r0
   1a1ac:	400a      	ands	r2, r1
   1a1ae:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1a1b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1a1b4:	2000      	movs	r0, #0
   1a1b6:	4770      	bx	lr

0001a1b8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a1b8:	6843      	ldr	r3, [r0, #4]
   1a1ba:	685b      	ldr	r3, [r3, #4]
}
   1a1bc:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1a1be:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1a1c2:	4770      	bx	lr

0001a1c4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a1c4:	6843      	ldr	r3, [r0, #4]
   1a1c6:	685b      	ldr	r3, [r3, #4]
}
   1a1c8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1a1ca:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1a1ce:	4770      	bx	lr

0001a1d0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a1d0:	6843      	ldr	r3, [r0, #4]
   1a1d2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1a1d4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1a1d8:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1a1da:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1a1de:	2000      	movs	r0, #0
   1a1e0:	4770      	bx	lr

0001a1e2 <gpio_nrfx_manage_callback>:
	return port->data;
   1a1e2:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1a1e4:	6858      	ldr	r0, [r3, #4]
{
   1a1e6:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1a1e8:	b158      	cbz	r0, 1a202 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a1ea:	2400      	movs	r4, #0
   1a1ec:	4281      	cmp	r1, r0
   1a1ee:	d112      	bne.n	1a216 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   1a1f0:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   1a1f2:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   1a1f4:	b954      	cbnz	r4, 1a20c <gpio_nrfx_manage_callback+0x2a>
   1a1f6:	428d      	cmp	r5, r1
	list->head = node;
   1a1f8:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1a1fa:	d100      	bne.n	1a1fe <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1a1fc:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1a1fe:	2000      	movs	r0, #0
   1a200:	6008      	str	r0, [r1, #0]
	if (set) {
   1a202:	b96a      	cbnz	r2, 1a220 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   1a204:	2000      	movs	r0, #0
}
   1a206:	bd30      	pop	{r4, r5, pc}
   1a208:	4628      	mov	r0, r5
   1a20a:	e7ef      	b.n	1a1ec <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   1a20c:	428d      	cmp	r5, r1
	parent->next = child;
   1a20e:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1a210:	bf08      	it	eq
   1a212:	609c      	streq	r4, [r3, #8]
}
   1a214:	e7f3      	b.n	1a1fe <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   1a216:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a218:	4604      	mov	r4, r0
   1a21a:	2d00      	cmp	r5, #0
   1a21c:	d1f4      	bne.n	1a208 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1a21e:	b13a      	cbz	r2, 1a230 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   1a220:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   1a222:	685a      	ldr	r2, [r3, #4]
   1a224:	600a      	str	r2, [r1, #0]
	list->head = node;
   1a226:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1a228:	2800      	cmp	r0, #0
   1a22a:	d1eb      	bne.n	1a204 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1a22c:	6099      	str	r1, [r3, #8]
}
   1a22e:	e7ea      	b.n	1a206 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1a230:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1a234:	e7e7      	b.n	1a206 <gpio_nrfx_manage_callback+0x24>

0001a236 <i2c_nrfx_twim_configure>:
{
   1a236:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   1a238:	07cb      	lsls	r3, r1, #31
{
   1a23a:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
   1a23c:	d41d      	bmi.n	1a27a <i2c_nrfx_twim_configure+0x44>
	switch (I2C_SPEED_GET(i2c_config)) {
   1a23e:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1a242:	2901      	cmp	r1, #1
   1a244:	d016      	beq.n	1a274 <i2c_nrfx_twim_configure+0x3e>
   1a246:	2902      	cmp	r1, #2
   1a248:	d117      	bne.n	1a27a <i2c_nrfx_twim_configure+0x44>
   1a24a:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1a24e:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
   1a250:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1a252:	4293      	cmp	r3, r2
   1a254:	d014      	beq.n	1a280 <i2c_nrfx_twim_configure+0x4a>
		dev_data->twim_config.frequency = frequency;
   1a256:	62ab      	str	r3, [r5, #40]	; 0x28
	if (dev_data->twim_initialized) {
   1a258:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1a25c:	b12b      	cbz	r3, 1a26a <i2c_nrfx_twim_configure+0x34>
		nrfx_twim_uninit(&dev_config->twim);
   1a25e:	6860      	ldr	r0, [r4, #4]
   1a260:	f7fc f906 	bl	16470 <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
   1a264:	2300      	movs	r3, #0
   1a266:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
		return init_twim(dev);
   1a26a:	4620      	mov	r0, r4
}
   1a26c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
   1a270:	f7fa b848 	b.w	14304 <init_twim>
		frequency = NRF_TWIM_FREQ_100K;
   1a274:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
   1a278:	e7e9      	b.n	1a24e <i2c_nrfx_twim_configure+0x18>
	switch (I2C_SPEED_GET(i2c_config)) {
   1a27a:	f06f 0015 	mvn.w	r0, #21
}
   1a27e:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1a280:	2000      	movs	r0, #0
   1a282:	e7fc      	b.n	1a27e <i2c_nrfx_twim_configure+0x48>

0001a284 <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   1a284:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   1a286:	2100      	movs	r1, #0
   1a288:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   1a28a:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1a28c:	f000 fc57 	bl	1ab3e <pinctrl_lookup_state>
	if (ret < 0) {
   1a290:	2800      	cmp	r0, #0
   1a292:	db05      	blt.n	1a2a0 <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
   1a294:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1a296:	6822      	ldr	r2, [r4, #0]
   1a298:	7919      	ldrb	r1, [r3, #4]
   1a29a:	6818      	ldr	r0, [r3, #0]
   1a29c:	f000 fc6c 	bl	1ab78 <pinctrl_configure_pins>
}
   1a2a0:	b002      	add	sp, #8
   1a2a2:	bd10      	pop	{r4, pc}

0001a2a4 <twim_1_init>:
#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   1a2a4:	b510      	push	{r4, lr}
   1a2a6:	4604      	mov	r4, r0
   1a2a8:	2200      	movs	r2, #0
   1a2aa:	2101      	movs	r1, #1
   1a2ac:	2004      	movs	r0, #4
   1a2ae:	f7f8 fc2d 	bl	12b0c <z_arm_irq_priority_set>
   1a2b2:	6863      	ldr	r3, [r4, #4]
   1a2b4:	68d8      	ldr	r0, [r3, #12]
   1a2b6:	f7ff ffe5 	bl	1a284 <pinctrl_apply_state.constprop.0>
   1a2ba:	2800      	cmp	r0, #0
   1a2bc:	db04      	blt.n	1a2c8 <twim_1_init+0x24>
   1a2be:	4620      	mov	r0, r4
   1a2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a2c4:	f7fa b81e 	b.w	14304 <init_twim>
   1a2c8:	bd10      	pop	{r4, pc}

0001a2ca <twim_0_init>:
I2C_NRFX_TWIM_DEVICE(0);
   1a2ca:	b510      	push	{r4, lr}
   1a2cc:	4604      	mov	r4, r0
   1a2ce:	2200      	movs	r2, #0
   1a2d0:	2101      	movs	r1, #1
   1a2d2:	2003      	movs	r0, #3
   1a2d4:	f7f8 fc1a 	bl	12b0c <z_arm_irq_priority_set>
   1a2d8:	6863      	ldr	r3, [r4, #4]
   1a2da:	68d8      	ldr	r0, [r3, #12]
   1a2dc:	f7ff ffd2 	bl	1a284 <pinctrl_apply_state.constprop.0>
   1a2e0:	2800      	cmp	r0, #0
   1a2e2:	db04      	blt.n	1a2ee <twim_0_init+0x24>
   1a2e4:	4620      	mov	r0, r4
   1a2e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a2ea:	f7fa b80b 	b.w	14304 <init_twim>
   1a2ee:	bd10      	pop	{r4, pc}

0001a2f0 <vl53l0x_channel_get>:
			       enum sensor_channel chan,
			       struct sensor_value *val)
{
	struct vl53l0x_data *drv_data = dev->data;

	if (chan == SENSOR_CHAN_PROX) {
   1a2f0:	290f      	cmp	r1, #15
	struct vl53l0x_data *drv_data = dev->data;
   1a2f2:	6903      	ldr	r3, [r0, #16]
	if (chan == SENSOR_CHAN_PROX) {
   1a2f4:	d109      	bne.n	1a30a <vl53l0x_channel_get+0x1a>
		if (drv_data->RangingMeasurementData.RangeMilliMeter <=
   1a2f6:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
   1a2fa:	2b64      	cmp	r3, #100	; 0x64
   1a2fc:	bf8c      	ite	hi
   1a2fe:	2300      	movhi	r3, #0
   1a300:	2301      	movls	r3, #1
		    CONFIG_VL53L0X_PROXIMITY_THRESHOLD) {
			val->val1 = 1;
		} else {
			val->val1 = 0;
		}
		val->val2 = 0;
   1a302:	2000      	movs	r0, #0
   1a304:	6013      	str	r3, [r2, #0]
   1a306:	6050      	str	r0, [r2, #4]
   1a308:	4770      	bx	lr
	} else if (chan == SENSOR_CHAN_DISTANCE) {
   1a30a:	291a      	cmp	r1, #26
   1a30c:	d10d      	bne.n	1a32a <vl53l0x_channel_get+0x3a>
		val->val1 = drv_data->RangingMeasurementData.RangeMilliMeter / 1000;
   1a30e:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
   1a312:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1a316:	fbb3 f0f1 	udiv	r0, r3, r1
		val->val2 = (drv_data->RangingMeasurementData.RangeMilliMeter % 1000) * 1000;
   1a31a:	fb01 3310 	mls	r3, r1, r0, r3
   1a31e:	b29b      	uxth	r3, r3
   1a320:	434b      	muls	r3, r1
		val->val1 = drv_data->RangingMeasurementData.RangeMilliMeter / 1000;
   1a322:	6010      	str	r0, [r2, #0]
		val->val2 = (drv_data->RangingMeasurementData.RangeMilliMeter % 1000) * 1000;
   1a324:	6053      	str	r3, [r2, #4]
	} else {
		return -ENOTSUP;
	}

	return 0;
   1a326:	2000      	movs	r0, #0
   1a328:	4770      	bx	lr
		return -ENOTSUP;
   1a32a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1a32e:	4770      	bx	lr

0001a330 <vl53l0x_start>:
{
   1a330:	b570      	push	{r4, r5, r6, lr}
	const struct vl53l0x_config *const config = dev->config;
   1a332:	6843      	ldr	r3, [r0, #4]
	struct vl53l0x_data *drv_data = dev->data;
   1a334:	6904      	ldr	r4, [r0, #16]
{
   1a336:	b09c      	sub	sp, #112	; 0x70
   1a338:	4605      	mov	r5, r0
	if (config->xshut.port) {
   1a33a:	6898      	ldr	r0, [r3, #8]
	uint16_t vl53l0x_id = 0U;
   1a33c:	2200      	movs	r2, #0
   1a33e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (config->xshut.port) {
   1a342:	b180      	cbz	r0, 1a366 <vl53l0x_start+0x36>

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1a344:	7b1b      	ldrb	r3, [r3, #12]
   1a346:	2101      	movs	r1, #1
   1a348:	4099      	lsls	r1, r3
   1a34a:	6903      	ldr	r3, [r0, #16]
   1a34c:	681b      	ldr	r3, [r3, #0]
   1a34e:	4219      	tst	r1, r3
	return api->port_set_bits_raw(port, pins);
   1a350:	6883      	ldr	r3, [r0, #8]
   1a352:	bf0c      	ite	eq
   1a354:	68db      	ldreq	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1a356:	691b      	ldrne	r3, [r3, #16]
   1a358:	4798      	blx	r3
		if (r < 0) {
   1a35a:	2800      	cmp	r0, #0
   1a35c:	db70      	blt.n	1a440 <vl53l0x_start+0x110>
	return z_impl_k_sleep(timeout);
   1a35e:	2042      	movs	r0, #66	; 0x42
   1a360:	2100      	movs	r1, #0
   1a362:	f7fe fdd1 	bl	18f08 <z_impl_k_sleep>
	(void)memset(&vl53l0x_dev_info, 0, sizeof(VL53L0X_DeviceInfo_t));
   1a366:	2263      	movs	r2, #99	; 0x63
   1a368:	2100      	movs	r1, #0
   1a36a:	a803      	add	r0, sp, #12
	ret = VL53L0X_GetDeviceInfo(&drv_data->vl53l0x, &vl53l0x_dev_info);
   1a36c:	1d26      	adds	r6, r4, #4
	(void)memset(&vl53l0x_dev_info, 0, sizeof(VL53L0X_DeviceInfo_t));
   1a36e:	f7ff fe23 	bl	19fb8 <memset>
	ret = VL53L0X_GetDeviceInfo(&drv_data->vl53l0x, &vl53l0x_dev_info);
   1a372:	a903      	add	r1, sp, #12
   1a374:	4630      	mov	r0, r6
   1a376:	f000 fe65 	bl	1b044 <VL53L0X_GetDeviceInfo>
	if (ret < 0) {
   1a37a:	2800      	cmp	r0, #0
   1a37c:	db63      	blt.n	1a446 <vl53l0x_start+0x116>
	ret = VL53L0X_RdWord(&drv_data->vl53l0x,
   1a37e:	f10d 0206 	add.w	r2, sp, #6
   1a382:	21c0      	movs	r1, #192	; 0xc0
   1a384:	4630      	mov	r0, r6
   1a386:	f000 f962 	bl	1a64e <VL53L0X_RdWord>
	if ((ret < 0) || (vl53l0x_id != VL53L0X_CHIP_ID)) {
   1a38a:	2800      	cmp	r0, #0
   1a38c:	da03      	bge.n	1a396 <vl53l0x_start+0x66>
		return -ENOTSUP;
   1a38e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1a392:	b01c      	add	sp, #112	; 0x70
   1a394:	bd70      	pop	{r4, r5, r6, pc}
	if ((ret < 0) || (vl53l0x_id != VL53L0X_CHIP_ID)) {
   1a396:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1a39a:	f64e 63aa 	movw	r3, #61098	; 0xeeaa
   1a39e:	429a      	cmp	r2, r3
   1a3a0:	d1f5      	bne.n	1a38e <vl53l0x_start+0x5e>
	ret = VL53L0X_DataInit(&drv_data->vl53l0x);
   1a3a2:	4630      	mov	r0, r6
   1a3a4:	f7fd fa36 	bl	17814 <VL53L0X_DataInit>
	if (ret < 0) {
   1a3a8:	2800      	cmp	r0, #0
   1a3aa:	dbf0      	blt.n	1a38e <vl53l0x_start+0x5e>
	ret = VL53L0X_StaticInit(&drv_data->vl53l0x);
   1a3ac:	692d      	ldr	r5, [r5, #16]
   1a3ae:	3504      	adds	r5, #4
   1a3b0:	4628      	mov	r0, r5
   1a3b2:	f7fd fb3d 	bl	17a30 <VL53L0X_StaticInit>
	if (ret) {
   1a3b6:	bbe8      	cbnz	r0, 1a434 <vl53l0x_start+0x104>
	ret = VL53L0X_PerformRefCalibration(&drv_data->vl53l0x,
   1a3b8:	aa01      	add	r2, sp, #4
   1a3ba:	f10d 0103 	add.w	r1, sp, #3
   1a3be:	4628      	mov	r0, r5
   1a3c0:	f000 fff3 	bl	1b3aa <VL53L0X_PerformRefCalibration>
	if (ret) {
   1a3c4:	bbb0      	cbnz	r0, 1a434 <vl53l0x_start+0x104>
	ret = VL53L0X_PerformRefSpadManagement(&drv_data->vl53l0x,
   1a3c6:	f10d 0205 	add.w	r2, sp, #5
   1a3ca:	a902      	add	r1, sp, #8
   1a3cc:	4628      	mov	r0, r5
   1a3ce:	f001 fa03 	bl	1b7d8 <VL53L0X_PerformRefSpadManagement>
	if (ret) {
   1a3d2:	bb78      	cbnz	r0, 1a434 <vl53l0x_start+0x104>
	ret = VL53L0X_SetDeviceMode(&drv_data->vl53l0x,
   1a3d4:	4601      	mov	r1, r0
   1a3d6:	4628      	mov	r0, r5
   1a3d8:	f7fd fa0c 	bl	177f4 <VL53L0X_SetDeviceMode>
	if (ret) {
   1a3dc:	bb50      	cbnz	r0, 1a434 <vl53l0x_start+0x104>
	ret = VL53L0X_SetLimitCheckEnable(&drv_data->vl53l0x,
   1a3de:	4601      	mov	r1, r0
   1a3e0:	2201      	movs	r2, #1
   1a3e2:	4628      	mov	r0, r5
   1a3e4:	f000 fee6 	bl	1b1b4 <VL53L0X_SetLimitCheckEnable>
	if (ret) {
   1a3e8:	bb20      	cbnz	r0, 1a434 <vl53l0x_start+0x104>
	ret = VL53L0X_SetLimitCheckEnable(&drv_data->vl53l0x,
   1a3ea:	2201      	movs	r2, #1
   1a3ec:	4611      	mov	r1, r2
   1a3ee:	4628      	mov	r0, r5
   1a3f0:	f000 fee0 	bl	1b1b4 <VL53L0X_SetLimitCheckEnable>
	if (ret) {
   1a3f4:	b9f0      	cbnz	r0, 1a434 <vl53l0x_start+0x104>
	ret = VL53L0X_SetLimitCheckValue(&drv_data->vl53l0x,
   1a3f6:	f641 1299 	movw	r2, #6553	; 0x1999
   1a3fa:	2101      	movs	r1, #1
   1a3fc:	4628      	mov	r0, r5
   1a3fe:	f000 ff24 	bl	1b24a <VL53L0X_SetLimitCheckValue>
	if (ret) {
   1a402:	b9b8      	cbnz	r0, 1a434 <vl53l0x_start+0x104>
	ret = VL53L0X_SetLimitCheckValue(&drv_data->vl53l0x,
   1a404:	4601      	mov	r1, r0
   1a406:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
   1a40a:	4628      	mov	r0, r5
   1a40c:	f000 ff1d 	bl	1b24a <VL53L0X_SetLimitCheckValue>
	if (ret) {
   1a410:	b980      	cbnz	r0, 1a434 <vl53l0x_start+0x104>
	ret = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&drv_data->vl53l0x,
   1a412:	f248 01e8 	movw	r1, #33000	; 0x80e8
   1a416:	4628      	mov	r0, r5
   1a418:	f000 fe22 	bl	1b060 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	if (ret) {
   1a41c:	b950      	cbnz	r0, 1a434 <vl53l0x_start+0x104>
	ret = VL53L0X_SetVcselPulsePeriod(&drv_data->vl53l0x,
   1a41e:	4601      	mov	r1, r0
   1a420:	2212      	movs	r2, #18
   1a422:	4628      	mov	r0, r5
   1a424:	f000 fe1e 	bl	1b064 <VL53L0X_SetVcselPulsePeriod>
	if (ret) {
   1a428:	b920      	cbnz	r0, 1a434 <vl53l0x_start+0x104>
	ret = VL53L0X_SetVcselPulsePeriod(&drv_data->vl53l0x,
   1a42a:	220e      	movs	r2, #14
   1a42c:	2101      	movs	r1, #1
   1a42e:	4628      	mov	r0, r5
   1a430:	f000 fe18 	bl	1b064 <VL53L0X_SetVcselPulsePeriod>
	if (ret < 0) {
   1a434:	2800      	cmp	r0, #0
   1a436:	dbaa      	blt.n	1a38e <vl53l0x_start+0x5e>
	drv_data->started = true;
   1a438:	2301      	movs	r3, #1
   1a43a:	7023      	strb	r3, [r4, #0]
	return 0;
   1a43c:	2000      	movs	r0, #0
   1a43e:	e7a8      	b.n	1a392 <vl53l0x_start+0x62>
			return -EIO;
   1a440:	f06f 0004 	mvn.w	r0, #4
   1a444:	e7a5      	b.n	1a392 <vl53l0x_start+0x62>
		return -ENODEV;
   1a446:	f06f 0012 	mvn.w	r0, #18
   1a44a:	e7a2      	b.n	1a392 <vl53l0x_start+0x62>

0001a44c <vl53l0x_sample_fetch>:
{
   1a44c:	b510      	push	{r4, lr}
	struct vl53l0x_data *drv_data = dev->data;
   1a44e:	6904      	ldr	r4, [r0, #16]
	if (!drv_data->started) {
   1a450:	7823      	ldrb	r3, [r4, #0]
   1a452:	b153      	cbz	r3, 1a46a <vl53l0x_sample_fetch+0x1e>
	ret = VL53L0X_PerformSingleRangingMeasurement(&drv_data->vl53l0x,
   1a454:	f504 71b4 	add.w	r1, r4, #360	; 0x168
   1a458:	1d20      	adds	r0, r4, #4
   1a45a:	f001 f8ed 	bl	1b638 <VL53L0X_PerformSingleRangingMeasurement>
		return -EINVAL;
   1a45e:	2800      	cmp	r0, #0
   1a460:	bfac      	ite	ge
   1a462:	2000      	movge	r0, #0
   1a464:	f06f 0015 	mvnlt.w	r0, #21
}
   1a468:	bd10      	pop	{r4, pc}
		r = vl53l0x_start(dev);
   1a46a:	f7ff ff61 	bl	1a330 <vl53l0x_start>
		if (r < 0) {
   1a46e:	2800      	cmp	r0, #0
   1a470:	daf0      	bge.n	1a454 <vl53l0x_sample_fetch+0x8>
   1a472:	e7f9      	b.n	1a468 <vl53l0x_sample_fetch+0x1c>

0001a474 <vl53l0x_init>:
};

static int vl53l0x_init(const struct device *dev)
{
	int r;
	struct vl53l0x_data *drv_data = dev->data;
   1a474:	6902      	ldr	r2, [r0, #16]
{
   1a476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct vl53l0x_config *const config = dev->config;

	/* Initialize the HAL peripheral with the default sensor address,
	 * ie. the address on power up
	 */
	drv_data->vl53l0x.I2cDevAddr = VL53L0X_INITIAL_ADDR;
   1a478:	2129      	movs	r1, #41	; 0x29
	const struct vl53l0x_config *const config = dev->config;
   1a47a:	6843      	ldr	r3, [r0, #4]
	drv_data->vl53l0x.I2cDevAddr = VL53L0X_INITIAL_ADDR;
   1a47c:	f882 1160 	strb.w	r1, [r2, #352]	; 0x160
	drv_data->vl53l0x.i2c = config->i2c.bus;
   1a480:	6819      	ldr	r1, [r3, #0]
   1a482:	f8c2 1164 	str.w	r1, [r2, #356]	; 0x164
	if (!config->xshut.port) {
		LOG_ERR("[%s] Missing XSHUT gpio spec", dev->name);
		return -ENOTSUP;
	}
#else
	if (config->i2c.addr != VL53L0X_INITIAL_ADDR) {
   1a486:	889a      	ldrh	r2, [r3, #4]
   1a488:	2a29      	cmp	r2, #41	; 0x29
{
   1a48a:	4604      	mov	r4, r0
	if (config->i2c.addr != VL53L0X_INITIAL_ADDR) {
   1a48c:	d11a      	bne.n	1a4c4 <vl53l0x_init+0x50>
			dev->name, VL53L0X_INITIAL_ADDR);
		return -ENOTSUP;
	}
#endif

	if (config->xshut.port) {
   1a48e:	6898      	ldr	r0, [r3, #8]
   1a490:	b198      	cbz	r0, 1a4ba <vl53l0x_init+0x46>
				  spec->dt_flags | extra_flags);
   1a492:	89df      	ldrh	r7, [r3, #14]
	return gpio_pin_configure(spec->port,
   1a494:	7b19      	ldrb	r1, [r3, #12]
   1a496:	f447 3200 	orr.w	r2, r7, #131072	; 0x20000
	struct gpio_driver_data *data =
   1a49a:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
   1a49c:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a4a0:	2301      	movs	r3, #1
   1a4a2:	fa03 f501 	lsl.w	r5, r3, r1
   1a4a6:	6833      	ldr	r3, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1a4a8:	f017 0f01 	tst.w	r7, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a4ac:	bf14      	ite	ne
   1a4ae:	432b      	orrne	r3, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1a4b0:	43ab      	biceq	r3, r5
   1a4b2:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
   1a4b4:	f8dc 3000 	ldr.w	r3, [ip]
   1a4b8:	4798      	blx	r3
		LOG_ERR("[%s] Unable to shutdown sensor", dev->name);
		return -EIO;
	}
	LOG_DBG("[%s] Shutdown", dev->name);
#else
	r = vl53l0x_start(dev);
   1a4ba:	4620      	mov	r0, r4
	}
#endif

	LOG_DBG("[%s] Initialized", dev->name);
	return 0;
}
   1a4bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	r = vl53l0x_start(dev);
   1a4c0:	f7ff bf36 	b.w	1a330 <vl53l0x_start>
}
   1a4c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a4ca <i2c_burst_read>:
static inline int i2c_burst_read(const struct device *dev,
				 uint16_t dev_addr,
				 uint8_t start_addr,
				 uint8_t *buf,
				 uint32_t num_bytes)
{
   1a4ca:	b510      	push	{r4, lr}
   1a4cc:	b088      	sub	sp, #32
   1a4ce:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1a4d2:	f10d 0207 	add.w	r2, sp, #7
   1a4d6:	9202      	str	r2, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
   1a4d8:	9305      	str	r3, [sp, #20]
	msg[0].len = num_write;
   1a4da:	2201      	movs	r2, #1
	msg[1].len = num_read;
   1a4dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	msg[0].len = num_write;
   1a4de:	9203      	str	r2, [sp, #12]
	msg[1].len = num_read;
   1a4e0:	9306      	str	r3, [sp, #24]
	msg[0].flags = I2C_MSG_WRITE;
   1a4e2:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1a4e4:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   1a4e6:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1a4ea:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1a4ee:	6883      	ldr	r3, [r0, #8]
   1a4f0:	2202      	movs	r2, #2
   1a4f2:	689c      	ldr	r4, [r3, #8]
   1a4f4:	460b      	mov	r3, r1
   1a4f6:	a902      	add	r1, sp, #8
   1a4f8:	47a0      	blx	r4
	return i2c_write_read(dev, dev_addr,
			      &start_addr, sizeof(start_addr),
			      buf, num_bytes);
}
   1a4fa:	b008      	add	sp, #32
   1a4fc:	bd10      	pop	{r4, pc}

0001a4fe <i2c_write>:
{
   1a4fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   1a500:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1a504:	2202      	movs	r2, #2
   1a506:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1a50a:	6882      	ldr	r2, [r0, #8]
   1a50c:	a901      	add	r1, sp, #4
   1a50e:	6894      	ldr	r4, [r2, #8]
   1a510:	2201      	movs	r2, #1
   1a512:	47a0      	blx	r4
}
   1a514:	b004      	add	sp, #16
   1a516:	bd10      	pop	{r4, pc}

0001a518 <VL53L0X_WriteMulti>:

LOG_MODULE_DECLARE(VL53L0X, CONFIG_SENSOR_LOG_LEVEL);

VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata,
				 uint32_t count)
{
   1a518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a51a:	460e      	mov	r6, r1

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	int32_t status_int = 0;
	uint8_t I2CBuffer[count+1];
   1a51c:	1c5d      	adds	r5, r3, #1
{
   1a51e:	4611      	mov	r1, r2
   1a520:	461a      	mov	r2, r3
	uint8_t I2CBuffer[count+1];
   1a522:	3308      	adds	r3, #8
   1a524:	f023 0307 	bic.w	r3, r3, #7
{
   1a528:	af00      	add	r7, sp, #0
	uint8_t I2CBuffer[count+1];
   1a52a:	ebad 0d03 	sub.w	sp, sp, r3
{
   1a52e:	4604      	mov	r4, r0

	I2CBuffer[0] = index;
   1a530:	4668      	mov	r0, sp
   1a532:	f800 6b01 	strb.w	r6, [r0], #1
	memcpy(&I2CBuffer[1], pdata, count);
   1a536:	f7ff fd34 	bl	19fa2 <memcpy>

	status_int = i2c_write(Dev->i2c, I2CBuffer, count+1, Dev->I2cDevAddr);
   1a53a:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   1a53e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
   1a542:	462a      	mov	r2, r5
   1a544:	4669      	mov	r1, sp
   1a546:	f7ff ffda 	bl	1a4fe <i2c_write>

	if (status_int < 0) {
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
   1a54a:	2800      	cmp	r0, #0
		LOG_ERR("Failed to write");
	}

	return Status;
}
   1a54c:	bfb4      	ite	lt
   1a54e:	f06f 0013 	mvnlt.w	r0, #19
   1a552:	2000      	movge	r0, #0
   1a554:	46bd      	mov	sp, r7
   1a556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a558 <VL53L0X_ReadMulti>:

VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata,
				uint32_t count)
{
   1a558:	b507      	push	{r0, r1, r2, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	int32_t status_int;

	status_int = i2c_burst_read(Dev->i2c, Dev->I2cDevAddr, index, pdata,
   1a55a:	9300      	str	r3, [sp, #0]
   1a55c:	4613      	mov	r3, r2
   1a55e:	460a      	mov	r2, r1
   1a560:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
   1a564:	f8d0 0160 	ldr.w	r0, [r0, #352]	; 0x160
   1a568:	f7ff ffaf 	bl	1a4ca <i2c_burst_read>
				    count);
	if (status_int < 0) {
		LOG_ERR("Failed to read");
		return -EIO;
   1a56c:	2800      	cmp	r0, #0
	}

	return Status;
}
   1a56e:	bfb4      	ite	lt
   1a570:	f06f 0004 	mvnlt.w	r0, #4
   1a574:	2000      	movge	r0, #0
   1a576:	b003      	add	sp, #12
   1a578:	f85d fb04 	ldr.w	pc, [sp], #4

0001a57c <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data)
{
   1a57c:	b507      	push	{r0, r1, r2, lr}
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};

	return i2c_write(dev, tx_buf, 2, dev_addr);
   1a57e:	f890 315c 	ldrb.w	r3, [r0, #348]	; 0x15c
	uint8_t tx_buf[2] = {reg_addr, value};
   1a582:	f88d 1004 	strb.w	r1, [sp, #4]
   1a586:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1a58a:	a901      	add	r1, sp, #4
   1a58c:	2202      	movs	r2, #2
   1a58e:	f8d0 0160 	ldr.w	r0, [r0, #352]	; 0x160
   1a592:	f7ff ffb4 	bl	1a4fe <i2c_write>
	int32_t status_int;

	status_int = i2c_reg_write_byte(Dev->i2c, Dev->I2cDevAddr, index, data);

	if (status_int < 0) {
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
   1a596:	2800      	cmp	r0, #0
		LOG_ERR("i2c_reg_write_byte failed (%d)", Status);
	}

	return Status;
}
   1a598:	bfb4      	ite	lt
   1a59a:	f06f 0013 	mvnlt.w	r0, #19
   1a59e:	2000      	movge	r0, #0
   1a5a0:	b003      	add	sp, #12
   1a5a2:	f85d fb04 	ldr.w	pc, [sp], #4

0001a5a6 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data)
{
   1a5a6:	b507      	push	{r0, r1, r2, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	int32_t status_int;
	uint8_t I2CBuffer[3];

	I2CBuffer[0] = index;
	I2CBuffer[1] = data >> 8;
   1a5a8:	0a13      	lsrs	r3, r2, #8
	I2CBuffer[0] = index;
   1a5aa:	f88d 1004 	strb.w	r1, [sp, #4]
	I2CBuffer[1] = data >> 8;
   1a5ae:	f88d 3005 	strb.w	r3, [sp, #5]
	I2CBuffer[2] = data & 0x00FF;
   1a5b2:	f88d 2006 	strb.w	r2, [sp, #6]

	status_int = i2c_write(Dev->i2c, I2CBuffer, 3, Dev->I2cDevAddr);
   1a5b6:	f890 315c 	ldrb.w	r3, [r0, #348]	; 0x15c
   1a5ba:	f8d0 0160 	ldr.w	r0, [r0, #352]	; 0x160
   1a5be:	2203      	movs	r2, #3
   1a5c0:	a901      	add	r1, sp, #4
   1a5c2:	f7ff ff9c 	bl	1a4fe <i2c_write>
	if (status_int < 0) {
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
   1a5c6:	2800      	cmp	r0, #0
		LOG_ERR("i2c_write failed (%d)", Status);
	}

	return Status;
}
   1a5c8:	bfb4      	ite	lt
   1a5ca:	f06f 0013 	mvnlt.w	r0, #19
   1a5ce:	2000      	movge	r0, #0
   1a5d0:	b003      	add	sp, #12
   1a5d2:	f85d fb04 	ldr.w	pc, [sp], #4

0001a5d6 <VL53L0X_RdByte>:

	return Status;
}

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data)
{
   1a5d6:	b510      	push	{r4, lr}
   1a5d8:	b088      	sub	sp, #32
   1a5da:	4603      	mov	r3, r0
   1a5dc:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1a5e0:	f10d 0107 	add.w	r1, sp, #7
   1a5e4:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   1a5e6:	2101      	movs	r1, #1
	msg[1].len = num_read;
   1a5e8:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   1a5ec:	2400      	movs	r4, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1a5ee:	2207      	movs	r2, #7
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	int32_t status_int;

	status_int = i2c_reg_read_byte(Dev->i2c, Dev->I2cDevAddr, index, data);
   1a5f0:	f8d0 0160 	ldr.w	r0, [r0, #352]	; 0x160
   1a5f4:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
	msg[0].len = num_write;
   1a5f8:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1a5fa:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1a5fe:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1a602:	6882      	ldr	r2, [r0, #8]
   1a604:	a902      	add	r1, sp, #8
   1a606:	6894      	ldr	r4, [r2, #8]
   1a608:	2202      	movs	r2, #2
   1a60a:	47a0      	blx	r4
	if (status_int < 0) {
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
   1a60c:	2800      	cmp	r0, #0
		LOG_ERR("i2c_reg_read_byte failed (%d)", Status);
	}

	return Status;
}
   1a60e:	bfb4      	ite	lt
   1a610:	f06f 0013 	mvnlt.w	r0, #19
   1a614:	2000      	movge	r0, #0
   1a616:	b008      	add	sp, #32
   1a618:	bd10      	pop	{r4, pc}

0001a61a <VL53L0X_UpdateByte>:
{
   1a61a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a61c:	4615      	mov	r5, r2
	status_int = VL53L0X_RdByte(Dev, index, &data);
   1a61e:	f10d 0207 	add.w	r2, sp, #7
{
   1a622:	4606      	mov	r6, r0
   1a624:	460f      	mov	r7, r1
   1a626:	461c      	mov	r4, r3
	status_int = VL53L0X_RdByte(Dev, index, &data);
   1a628:	f7ff ffd5 	bl	1a5d6 <VL53L0X_RdByte>
	if (status_int < 0) {
   1a62c:	2800      	cmp	r0, #0
   1a62e:	db0a      	blt.n	1a646 <VL53L0X_UpdateByte+0x2c>
		data = (data & AndData) | OrData;
   1a630:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1a634:	402a      	ands	r2, r5
   1a636:	4322      	orrs	r2, r4
		status_int = VL53L0X_WrByte(Dev, index, data);
   1a638:	4639      	mov	r1, r7
   1a63a:	4630      	mov	r0, r6
		data = (data & AndData) | OrData;
   1a63c:	f88d 2007 	strb.w	r2, [sp, #7]
		status_int = VL53L0X_WrByte(Dev, index, data);
   1a640:	f7ff ff9c 	bl	1a57c <VL53L0X_WrByte>
		if (status_int != 0) {
   1a644:	b108      	cbz	r0, 1a64a <VL53L0X_UpdateByte+0x30>
			Status = VL53L0X_ERROR_CONTROL_INTERFACE;
   1a646:	f06f 0013 	mvn.w	r0, #19
}
   1a64a:	b003      	add	sp, #12
   1a64c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a64e <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data)
{
   1a64e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	int32_t status_int;
	uint8_t buf[2];

	status_int = i2c_burst_read(Dev->i2c, Dev->I2cDevAddr, index, buf, 2);
   1a650:	2302      	movs	r3, #2
   1a652:	9300      	str	r3, [sp, #0]
{
   1a654:	4614      	mov	r4, r2
	status_int = i2c_burst_read(Dev->i2c, Dev->I2cDevAddr, index, buf, 2);
   1a656:	ab03      	add	r3, sp, #12
   1a658:	460a      	mov	r2, r1
   1a65a:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
   1a65e:	f8d0 0160 	ldr.w	r0, [r0, #352]	; 0x160
   1a662:	f7ff ff32 	bl	1a4ca <i2c_burst_read>
	if (status_int < 0) {
   1a666:	2800      	cmp	r0, #0
		LOG_ERR("i2c_burst_read failed");
		return -EIO;
	}
	*data = ((uint16_t)buf[0]<<8) + (uint16_t)buf[1];
   1a668:	bfa1      	itttt	ge
   1a66a:	f89d 300d 	ldrbge.w	r3, [sp, #13]
   1a66e:	f89d 200c 	ldrbge.w	r2, [sp, #12]

	return Status;
   1a672:	2000      	movge	r0, #0
	*data = ((uint16_t)buf[0]<<8) + (uint16_t)buf[1];
   1a674:	eb03 2302 	addge.w	r3, r3, r2, lsl #8
		return -EIO;
   1a678:	bfb4      	ite	lt
   1a67a:	f06f 0004 	mvnlt.w	r0, #4
	*data = ((uint16_t)buf[0]<<8) + (uint16_t)buf[1];
   1a67e:	8023      	strhge	r3, [r4, #0]
}
   1a680:	b004      	add	sp, #16
   1a682:	bd10      	pop	{r4, pc}

0001a684 <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data)
{
   1a684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	int32_t status_int;
	uint8_t buf[4];

	status_int = i2c_burst_read(Dev->i2c, Dev->I2cDevAddr, index, buf, 4);
   1a686:	2304      	movs	r3, #4
   1a688:	9300      	str	r3, [sp, #0]
{
   1a68a:	4614      	mov	r4, r2
	status_int = i2c_burst_read(Dev->i2c, Dev->I2cDevAddr, index, buf, 4);
   1a68c:	ab03      	add	r3, sp, #12
   1a68e:	460a      	mov	r2, r1
   1a690:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
   1a694:	f8d0 0160 	ldr.w	r0, [r0, #352]	; 0x160
   1a698:	f7ff ff17 	bl	1a4ca <i2c_burst_read>
	if (status_int < 0) {
   1a69c:	2800      	cmp	r0, #0
   1a69e:	db11      	blt.n	1a6c4 <VL53L0X_RdDWord+0x40>
		LOG_ERR("i2c_burst_read failed");
		return -EIO;
	}
	*data = ((uint32_t)buf[0]<<24) + ((uint32_t)buf[1]<<16) +
   1a6a0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1a6a4:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1a6a8:	041b      	lsls	r3, r3, #16
   1a6aa:	eb03 6302 	add.w	r3, r3, r2, lsl #24
		((uint32_t)buf[2]<<8) + (uint32_t)buf[3];
   1a6ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1a6b2:	4413      	add	r3, r2
   1a6b4:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1a6b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	*data = ((uint32_t)buf[0]<<24) + ((uint32_t)buf[1]<<16) +
   1a6bc:	6023      	str	r3, [r4, #0]

	return Status;
   1a6be:	2000      	movs	r0, #0
}
   1a6c0:	b004      	add	sp, #16
   1a6c2:	bd10      	pop	{r4, pc}
		return -EIO;
   1a6c4:	f06f 0004 	mvn.w	r0, #4
   1a6c8:	e7fa      	b.n	1a6c0 <VL53L0X_RdDWord+0x3c>

0001a6ca <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev)
{
   1a6ca:	b508      	push	{r3, lr}
   1a6cc:	2100      	movs	r1, #0
   1a6ce:	2042      	movs	r0, #66	; 0x42
   1a6d0:	f7fe fc1a 	bl	18f08 <z_impl_k_sleep>
	k_sleep(K_MSEC(2));
	return VL53L0X_ERROR_NONE;
}
   1a6d4:	2000      	movs	r0, #0
   1a6d6:	bd08      	pop	{r3, pc}

0001a6d8 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   1a6d8:	b530      	push	{r4, r5, lr}
   1a6da:	4604      	mov	r4, r0
	while (*count) {
   1a6dc:	6808      	ldr	r0, [r1, #0]
   1a6de:	b908      	cbnz	r0, 1a6e4 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   1a6e0:	6010      	str	r0, [r2, #0]
	return NULL;
   1a6e2:	e004      	b.n	1a6ee <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
   1a6e4:	6823      	ldr	r3, [r4, #0]
   1a6e6:	685d      	ldr	r5, [r3, #4]
   1a6e8:	b115      	cbz	r5, 1a6f0 <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
   1a6ea:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
   1a6ec:	6015      	str	r5, [r2, #0]
}
   1a6ee:	bd30      	pop	{r4, r5, pc}
		++(*current);
   1a6f0:	3308      	adds	r3, #8
		--(*count);
   1a6f2:	3801      	subs	r0, #1
		++(*current);
   1a6f4:	6023      	str	r3, [r4, #0]
		--(*count);
   1a6f6:	6008      	str	r0, [r1, #0]
   1a6f8:	e7f0      	b.n	1a6dc <spi_context_get_next_buf.constprop.0+0x4>

0001a6fa <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1a6fa:	4603      	mov	r3, r0
   1a6fc:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1a6fe:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1a700:	7919      	ldrb	r1, [r3, #4]
   1a702:	2301      	movs	r3, #1
   1a704:	fa03 f101 	lsl.w	r1, r3, r1
   1a708:	6903      	ldr	r3, [r0, #16]
   1a70a:	681b      	ldr	r3, [r3, #0]
   1a70c:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1a70e:	bf18      	it	ne
   1a710:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1a714:	b112      	cbz	r2, 1a71c <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   1a716:	6883      	ldr	r3, [r0, #8]
   1a718:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1a71a:	4718      	bx	r3
   1a71c:	6883      	ldr	r3, [r0, #8]
   1a71e:	691b      	ldr	r3, [r3, #16]
   1a720:	e7fb      	b.n	1a71a <gpio_pin_set_dt.isra.0+0x20>

0001a722 <_spi_context_cs_control>:
{
   1a722:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1a724:	6803      	ldr	r3, [r0, #0]
{
   1a726:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1a728:	b1e3      	cbz	r3, 1a764 <_spi_context_cs_control+0x42>
   1a72a:	6898      	ldr	r0, [r3, #8]
   1a72c:	b1d0      	cbz	r0, 1a764 <_spi_context_cs_control+0x42>
   1a72e:	6805      	ldr	r5, [r0, #0]
   1a730:	b1c5      	cbz	r5, 1a764 <_spi_context_cs_control+0x42>
		if (on) {
   1a732:	b149      	cbz	r1, 1a748 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   1a734:	2101      	movs	r1, #1
   1a736:	f7ff ffe0 	bl	1a6fa <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   1a73a:	6823      	ldr	r3, [r4, #0]
   1a73c:	689b      	ldr	r3, [r3, #8]
   1a73e:	6898      	ldr	r0, [r3, #8]
}
   1a740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1a744:	f002 bdc6 	b.w	1d2d4 <z_impl_k_busy_wait>
			if (!force_off &&
   1a748:	b912      	cbnz	r2, 1a750 <_spi_context_cs_control+0x2e>
   1a74a:	889b      	ldrh	r3, [r3, #4]
   1a74c:	04db      	lsls	r3, r3, #19
   1a74e:	d409      	bmi.n	1a764 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   1a750:	6880      	ldr	r0, [r0, #8]
   1a752:	f002 fdbf 	bl	1d2d4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1a756:	6823      	ldr	r3, [r4, #0]
   1a758:	2100      	movs	r1, #0
   1a75a:	6898      	ldr	r0, [r3, #8]
}
   1a75c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1a760:	f7ff bfcb 	b.w	1a6fa <gpio_pin_set_dt.isra.0>
}
   1a764:	bd38      	pop	{r3, r4, r5, pc}

0001a766 <spi_context_unlock_unconditionally>:
{
   1a766:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   1a768:	2201      	movs	r2, #1
   1a76a:	2100      	movs	r1, #0
{
   1a76c:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   1a76e:	f7ff ffd8 	bl	1a722 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   1a772:	69a3      	ldr	r3, [r4, #24]
   1a774:	b933      	cbnz	r3, 1a784 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   1a776:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1a778:	f104 0010 	add.w	r0, r4, #16
}
   1a77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a780:	f7fd bf54 	b.w	1862c <z_impl_k_sem_give>
   1a784:	bd10      	pop	{r4, pc}

0001a786 <spi_nrfx_release>:
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
	struct spi_nrfx_data *dev_data = dev->data;
   1a786:	6900      	ldr	r0, [r0, #16]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1a788:	6803      	ldr	r3, [r0, #0]
   1a78a:	428b      	cmp	r3, r1
{
   1a78c:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1a78e:	d106      	bne.n	1a79e <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
   1a790:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
   1a794:	b934      	cbnz	r4, 1a7a4 <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1a796:	f7ff ffe6 	bl	1a766 <spi_context_unlock_unconditionally>

	return 0;
   1a79a:	4620      	mov	r0, r4
}
   1a79c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1a79e:	f06f 0015 	mvn.w	r0, #21
   1a7a2:	e7fb      	b.n	1a79c <spi_nrfx_release+0x16>
		return -EBUSY;
   1a7a4:	f06f 000f 	mvn.w	r0, #15
   1a7a8:	e7f8      	b.n	1a79c <spi_nrfx_release+0x16>

0001a7aa <spi_2_init>:
#ifdef CONFIG_SPI_1_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(1);
#endif

#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
   1a7aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a7ae:	4604      	mov	r4, r0
   1a7b0:	6905      	ldr	r5, [r0, #16]
   1a7b2:	2200      	movs	r2, #0
   1a7b4:	2101      	movs	r1, #1
   1a7b6:	2023      	movs	r0, #35	; 0x23
   1a7b8:	f7f8 f9a8 	bl	12b0c <z_arm_irq_priority_set>
   1a7bc:	6863      	ldr	r3, [r4, #4]
   1a7be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	ret = pinctrl_lookup_state(config, id, &state);
   1a7c0:	aa01      	add	r2, sp, #4
   1a7c2:	2100      	movs	r1, #0
   1a7c4:	4620      	mov	r0, r4
   1a7c6:	f000 f9ba 	bl	1ab3e <pinctrl_lookup_state>
	if (ret < 0) {
   1a7ca:	2800      	cmp	r0, #0
   1a7cc:	db41      	blt.n	1a852 <spi_2_init+0xa8>
	return pinctrl_apply_state_direct(config, state);
   1a7ce:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1a7d0:	6822      	ldr	r2, [r4, #0]
   1a7d2:	7919      	ldrb	r1, [r3, #4]
   1a7d4:	6818      	ldr	r0, [r3, #0]
   1a7d6:	f000 f9cf 	bl	1ab78 <pinctrl_configure_pins>
   1a7da:	2800      	cmp	r0, #0
   1a7dc:	db39      	blt.n	1a852 <spi_2_init+0xa8>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1a7de:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a7e0:	2601      	movs	r6, #1
   1a7e2:	3408      	adds	r4, #8
   1a7e4:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1a7e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1a7ec:	f1a4 0208 	sub.w	r2, r4, #8
   1a7f0:	4293      	cmp	r3, r2
   1a7f2:	d804      	bhi.n	1a7fe <spi_2_init+0x54>
   1a7f4:	4628      	mov	r0, r5
   1a7f6:	f7ff ffb6 	bl	1a766 <spi_context_unlock_unconditionally>
   1a7fa:	2000      	movs	r0, #0
   1a7fc:	e029      	b.n	1a852 <spi_2_init+0xa8>
		if (!device_is_ready(cs_gpio->port)) {
   1a7fe:	f854 0c08 	ldr.w	r0, [r4, #-8]
   1a802:	f002 fac6 	bl	1cd92 <z_device_is_ready>
   1a806:	b338      	cbz	r0, 1a858 <spi_2_init+0xae>
	return gpio_pin_configure(spec->port,
   1a808:	f854 0c08 	ldr.w	r0, [r4, #-8]
   1a80c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
   1a810:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
   1a814:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   1a818:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a81c:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1a820:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   1a822:	bf54      	ite	pl
   1a824:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1a828:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1a82c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a830:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1a834:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a836:	bf4c      	ite	mi
   1a838:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1a83c:	ea27 070e 	bicpl.w	r7, r7, lr
	return api->pin_configure(port, pin, flags);
   1a840:	f8d8 3000 	ldr.w	r3, [r8]
   1a844:	f8cc 7000 	str.w	r7, [ip]
   1a848:	4798      	blx	r3
		if (ret < 0) {
   1a84a:	2800      	cmp	r0, #0
   1a84c:	f104 0408 	add.w	r4, r4, #8
   1a850:	dac8      	bge.n	1a7e4 <spi_2_init+0x3a>
   1a852:	b002      	add	sp, #8
   1a854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
   1a858:	f06f 0012 	mvn.w	r0, #18
   1a85c:	e7f9      	b.n	1a852 <spi_2_init+0xa8>

0001a85e <event_handler>:
{
   1a85e:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1a860:	7803      	ldrb	r3, [r0, #0]
{
   1a862:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1a864:	2b00      	cmp	r3, #0
   1a866:	d13d      	bne.n	1a8e4 <event_handler+0x86>
	if (!ctx->tx_len) {
   1a868:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1a86a:	b19b      	cbz	r3, 1a894 <event_handler+0x36>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1a86c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (len > ctx->tx_len) {
   1a86e:	429a      	cmp	r2, r3
   1a870:	d810      	bhi.n	1a894 <event_handler+0x36>
	ctx->tx_len -= len;
   1a872:	1a9b      	subs	r3, r3, r2
   1a874:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
   1a876:	bb4b      	cbnz	r3, 1a8cc <event_handler+0x6e>
		++ctx->current_tx;
   1a878:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   1a87a:	3308      	adds	r3, #8
   1a87c:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
   1a87e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   1a880:	3b01      	subs	r3, #1
   1a882:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
   1a884:	f101 0248 	add.w	r2, r1, #72	; 0x48
   1a888:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a88c:	3138      	adds	r1, #56	; 0x38
   1a88e:	f7ff ff23 	bl	1a6d8 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1a892:	6460      	str	r0, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
   1a894:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1a896:	b1a3      	cbz	r3, 1a8c2 <event_handler+0x64>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1a898:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->rx_len) {
   1a89a:	429a      	cmp	r2, r3
   1a89c:	d811      	bhi.n	1a8c2 <event_handler+0x64>
	ctx->rx_len -= len;
   1a89e:	1a9b      	subs	r3, r3, r2
   1a8a0:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
   1a8a2:	b9cb      	cbnz	r3, 1a8d8 <event_handler+0x7a>
		++ctx->current_rx;
   1a8a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1a8a6:	3308      	adds	r3, #8
   1a8a8:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
   1a8aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1a8ac:	3b01      	subs	r3, #1
   1a8ae:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
   1a8b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
   1a8b4:	f104 0140 	add.w	r1, r4, #64	; 0x40
   1a8b8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1a8bc:	f7ff ff0c 	bl	1a6d8 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1a8c0:	64e0      	str	r0, [r4, #76]	; 0x4c
		transfer_next_chunk(dev_data->dev);
   1a8c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
   1a8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1a8c8:	f7f9 be26 	b.w	14518 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   1a8cc:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   1a8ce:	2b00      	cmp	r3, #0
   1a8d0:	d0e0      	beq.n	1a894 <event_handler+0x36>
		ctx->tx_buf += dfs * len;
   1a8d2:	4413      	add	r3, r2
   1a8d4:	644b      	str	r3, [r1, #68]	; 0x44
   1a8d6:	e7dd      	b.n	1a894 <event_handler+0x36>
	} else if (ctx->rx_buf) {
   1a8d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1a8da:	2b00      	cmp	r3, #0
   1a8dc:	d0f1      	beq.n	1a8c2 <event_handler+0x64>
		ctx->rx_buf += dfs * len;
   1a8de:	4413      	add	r3, r2
   1a8e0:	64e3      	str	r3, [r4, #76]	; 0x4c
   1a8e2:	e7ee      	b.n	1a8c2 <event_handler+0x64>
}
   1a8e4:	bd10      	pop	{r4, pc}

0001a8e6 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   1a8e6:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   1a8e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a8ec:	2908      	cmp	r1, #8
   1a8ee:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1a8f0:	6e52      	ldr	r2, [r2, #100]	; 0x64
	struct nrf_uid dev_id;
	uint32_t deviceid[2];

	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
   1a8f2:	bf28      	it	cs
   1a8f4:	2108      	movcs	r1, #8
   1a8f6:	ba12      	rev	r2, r2
   1a8f8:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   1a8fa:	ba1b      	rev	r3, r3
   1a8fc:	460c      	mov	r4, r1

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   1a8fe:	460a      	mov	r2, r1
   1a900:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   1a902:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   1a904:	f7ff fb4d 	bl	19fa2 <memcpy>

	return length;
}
   1a908:	4620      	mov	r0, r4
   1a90a:	b002      	add	sp, #8
   1a90c:	bd10      	pop	{r4, pc}

0001a90e <gpio_pin_set_dt>:
{
   1a90e:	4603      	mov	r3, r0
   1a910:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   1a912:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1a914:	7919      	ldrb	r1, [r3, #4]
   1a916:	2301      	movs	r3, #1
   1a918:	fa03 f101 	lsl.w	r1, r3, r1
   1a91c:	6903      	ldr	r3, [r0, #16]
   1a91e:	681b      	ldr	r3, [r3, #0]
   1a920:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1a922:	bf18      	it	ne
   1a924:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1a928:	b112      	cbz	r2, 1a930 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   1a92a:	6883      	ldr	r3, [r0, #8]
   1a92c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1a92e:	4718      	bx	r3
   1a930:	6883      	ldr	r3, [r0, #8]
   1a932:	691b      	ldr	r3, [r3, #16]
   1a934:	e7fb      	b.n	1a92e <gpio_pin_set_dt+0x20>

0001a936 <disable_onoff>:
	return onoff_release(&data->mgr);
   1a936:	6900      	ldr	r0, [r0, #16]
   1a938:	3004      	adds	r0, #4
   1a93a:	f7fe bea0 	b.w	1967e <onoff_release>

0001a93e <enable_onoff>:
	return onoff_request(&data->mgr, cli);
   1a93e:	6900      	ldr	r0, [r0, #16]
   1a940:	3004      	adds	r0, #4
   1a942:	f7fe be53 	b.w	195ec <onoff_request>

0001a946 <disable_sync>:

	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
}

static int disable_sync(const struct device *dev)
{
   1a946:	b530      	push	{r4, r5, lr}
	struct driver_data_sync *data = dev->data;
	const struct driver_config *cfg = dev->config;
	k_spinlock_key_t key;
	int rc = onoff_sync_lock(&data->srv, &key);
   1a948:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
   1a94a:	6845      	ldr	r5, [r0, #4]
{
   1a94c:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
   1a94e:	a903      	add	r1, sp, #12
   1a950:	4620      	mov	r0, r4
   1a952:	f7fe fed5 	bl	19700 <onoff_sync_lock>

	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1a956:	7d29      	ldrb	r1, [r5, #20]
   1a958:	f011 0101 	ands.w	r1, r1, #1
	int rc = onoff_sync_lock(&data->srv, &key);
   1a95c:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1a95e:	d114      	bne.n	1a98a <disable_sync+0x44>
		rc = 0;
	} else if (rc == 1) {
   1a960:	2801      	cmp	r0, #1
   1a962:	d10c      	bne.n	1a97e <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1a964:	f105 000c 	add.w	r0, r5, #12
   1a968:	f7ff ffd1 	bl	1a90e <gpio_pin_set_dt>
   1a96c:	4603      	mov	r3, r0
	} else if (rc == 0) {
		rc = -EINVAL;
	} /* else rc > 0, leave it on */

	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
   1a96e:	2200      	movs	r2, #0
   1a970:	9903      	ldr	r1, [sp, #12]
   1a972:	9200      	str	r2, [sp, #0]
   1a974:	4620      	mov	r0, r4
   1a976:	f7fe fece 	bl	19716 <onoff_sync_finalize>
}
   1a97a:	b005      	add	sp, #20
   1a97c:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
   1a97e:	2800      	cmp	r0, #0
   1a980:	bf14      	ite	ne
   1a982:	4603      	movne	r3, r0
   1a984:	f06f 0315 	mvneq.w	r3, #21
   1a988:	e7f1      	b.n	1a96e <disable_sync+0x28>
		rc = 0;
   1a98a:	2300      	movs	r3, #0
   1a98c:	e7ef      	b.n	1a96e <disable_sync+0x28>

0001a98e <enable_sync>:
{
   1a98e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
   1a990:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
   1a992:	6846      	ldr	r6, [r0, #4]
{
   1a994:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
   1a996:	4628      	mov	r0, r5
   1a998:	a903      	add	r1, sp, #12
   1a99a:	f7fe feb1 	bl	19700 <onoff_sync_lock>
	if ((rc == 0)
   1a99e:	4603      	mov	r3, r0
   1a9a0:	b940      	cbnz	r0, 1a9b4 <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
   1a9a2:	7d32      	ldrb	r2, [r6, #20]
   1a9a4:	07d2      	lsls	r2, r2, #31
   1a9a6:	d405      	bmi.n	1a9b4 <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1a9a8:	2101      	movs	r1, #1
   1a9aa:	f106 000c 	add.w	r0, r6, #12
   1a9ae:	f7ff ffae 	bl	1a90e <gpio_pin_set_dt>
   1a9b2:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
   1a9b4:	2201      	movs	r2, #1
   1a9b6:	9200      	str	r2, [sp, #0]
   1a9b8:	9903      	ldr	r1, [sp, #12]
   1a9ba:	4622      	mov	r2, r4
   1a9bc:	4628      	mov	r0, r5
   1a9be:	f7fe feaa 	bl	19716 <onoff_sync_finalize>
}
   1a9c2:	b004      	add	sp, #16
   1a9c4:	bd70      	pop	{r4, r5, r6, pc}

0001a9c6 <common_init.isra.0>:
static int common_init(const struct device *dev)
   1a9c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a9c8:	4605      	mov	r5, r0
	if (!device_is_ready(cfg->enable.port)) {
   1a9ca:	68c0      	ldr	r0, [r0, #12]
   1a9cc:	f002 f9e1 	bl	1cd92 <z_device_is_ready>
   1a9d0:	b340      	cbz	r0, 1aa24 <common_init.isra.0+0x5e>
	if (on) {
   1a9d2:	7d2c      	ldrb	r4, [r5, #20]
				  spec->dt_flags | extra_flags);
   1a9d4:	8a6b      	ldrh	r3, [r5, #18]
	return gpio_pin_configure(spec->port,
   1a9d6:	68e8      	ldr	r0, [r5, #12]
   1a9d8:	7c29      	ldrb	r1, [r5, #16]
   1a9da:	f014 0403 	ands.w	r4, r4, #3
		flags = GPIO_OUTPUT_ACTIVE;
   1a9de:	bf16      	itet	ne
   1a9e0:	f44f 12d0 	movne.w	r2, #1703936	; 0x1a0000
		flags = GPIO_OUTPUT_INACTIVE;
   1a9e4:	f44f 12b0 	moveq.w	r2, #1441792	; 0x160000
		delay_us = cfg->startup_delay_us;
   1a9e8:	686c      	ldrne	r4, [r5, #4]
   1a9ea:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
   1a9ec:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
   1a9ee:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a9f2:	683d      	ldr	r5, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1a9f4:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1a9f6:	bf48      	it	mi
   1a9f8:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a9fc:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1a9fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1aa02:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1aa04:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1aa06:	bf4c      	ite	mi
   1aa08:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1aa0a:	43b5      	bicpl	r5, r6
   1aa0c:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
   1aa0e:	f8dc 3000 	ldr.w	r3, [ip]
   1aa12:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
   1aa14:	4605      	mov	r5, r0
   1aa16:	b918      	cbnz	r0, 1aa20 <common_init.isra.0+0x5a>
   1aa18:	b114      	cbz	r4, 1aa20 <common_init.isra.0+0x5a>
	z_impl_k_busy_wait(usec_to_wait);
   1aa1a:	4620      	mov	r0, r4
   1aa1c:	f002 fc5a 	bl	1d2d4 <z_impl_k_busy_wait>
}
   1aa20:	4628      	mov	r0, r5
   1aa22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   1aa24:	f06f 0512 	mvn.w	r5, #18
   1aa28:	e7fa      	b.n	1aa20 <common_init.isra.0+0x5a>

0001aa2a <regulator_fixed_init_sync>:
};

static int regulator_fixed_init_sync(const struct device *dev)
{
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
   1aa2a:	6840      	ldr	r0, [r0, #4]
   1aa2c:	f7ff bfcb 	b.w	1a9c6 <common_init.isra.0>

0001aa30 <onoff_worker>:
{
   1aa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (data->task == WORK_TASK_ENABLE) {
   1aa34:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	const struct driver_config *cfg = data->dev->config;
   1aa38:	f850 3c20 	ldr.w	r3, [r0, #-32]
	onoff_notify_fn notify = data->notify;
   1aa3c:	6b07      	ldr	r7, [r0, #48]	; 0x30
	const struct driver_config *cfg = data->dev->config;
   1aa3e:	685d      	ldr	r5, [r3, #4]
	if (data->task == WORK_TASK_ENABLE) {
   1aa40:	2901      	cmp	r1, #1
{
   1aa42:	4604      	mov	r4, r0
	struct driver_data_onoff *data
   1aa44:	f1a0 0620 	sub.w	r6, r0, #32
	if (data->task == WORK_TASK_ENABLE) {
   1aa48:	d10f      	bne.n	1aa6a <onoff_worker+0x3a>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1aa4a:	f105 000c 	add.w	r0, r5, #12
   1aa4e:	f7ff ff5e 	bl	1a90e <gpio_pin_set_dt>
		delay_us = cfg->startup_delay_us;
   1aa52:	686a      	ldr	r2, [r5, #4]
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1aa54:	4603      	mov	r3, r0
	data->notify = NULL;
   1aa56:	2100      	movs	r1, #0
   1aa58:	6321      	str	r1, [r4, #48]	; 0x30
	data->task = WORK_TASK_UNDEFINED;
   1aa5a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	finalize_transition(data, notify, delay_us, rc);
   1aa5e:	4630      	mov	r0, r6
   1aa60:	4639      	mov	r1, r7
}
   1aa62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1aa66:	f7f9 bf03 	b.w	14870 <finalize_transition>
	} else if (data->task == WORK_TASK_DISABLE) {
   1aa6a:	2902      	cmp	r1, #2
   1aa6c:	d107      	bne.n	1aa7e <onoff_worker+0x4e>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1aa6e:	2100      	movs	r1, #0
   1aa70:	f105 000c 	add.w	r0, r5, #12
   1aa74:	f7ff ff4b 	bl	1a90e <gpio_pin_set_dt>
		delay_us = cfg->off_on_delay_us;
   1aa78:	68aa      	ldr	r2, [r5, #8]
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1aa7a:	4603      	mov	r3, r0
		delay_us = cfg->off_on_delay_us;
   1aa7c:	e7eb      	b.n	1aa56 <onoff_worker+0x26>
	int rc = 0;
   1aa7e:	2300      	movs	r3, #0
	uint32_t delay_us = 0;
   1aa80:	461a      	mov	r2, r3
   1aa82:	e7e8      	b.n	1aa56 <onoff_worker+0x26>

0001aa84 <stop>:
{
   1aa84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   1aa88:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   1aa8c:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   1aa8e:	1f06      	subs	r6, r0, #4
	const struct driver_config *cfg = data->dev->config;
   1aa90:	6858      	ldr	r0, [r3, #4]
{
   1aa92:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1aa94:	7d01      	ldrb	r1, [r0, #20]
   1aa96:	f011 0101 	ands.w	r1, r1, #1
   1aa9a:	d113      	bne.n	1aac4 <stop+0x40>
	uint32_t delay_us = cfg->off_on_delay_us;
   1aa9c:	6887      	ldr	r7, [r0, #8]
	rc = gpio_pin_set_dt(&cfg->enable, false);
   1aa9e:	300c      	adds	r0, #12
   1aaa0:	f7ff ff35 	bl	1a90e <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   1aaa4:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, false);
   1aaa8:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   1aaaa:	d10d      	bne.n	1aac8 <stop+0x44>
		data->task = WORK_TASK_DISABLE;
   1aaac:	2302      	movs	r3, #2
   1aaae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
   1aab2:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1aab4:	f104 001c 	add.w	r0, r4, #28
   1aab8:	2200      	movs	r2, #0
}
   1aaba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1aabe:	2300      	movs	r3, #0
   1aac0:	f7fd bf44 	b.w	1894c <k_work_schedule>
	int rc = 0;
   1aac4:	2300      	movs	r3, #0
		delay_us = 0;
   1aac6:	461f      	mov	r7, r3
	finalize_transition(data, notify, delay_us, rc);
   1aac8:	463a      	mov	r2, r7
   1aaca:	4629      	mov	r1, r5
   1aacc:	4630      	mov	r0, r6
}
   1aace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1aad2:	f7f9 becd 	b.w	14870 <finalize_transition>

0001aad6 <start>:
{
   1aad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   1aada:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   1aade:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   1aae0:	1f07      	subs	r7, r0, #4
	const struct driver_config *cfg = data->dev->config;
   1aae2:	6858      	ldr	r0, [r3, #4]
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1aae4:	7d03      	ldrb	r3, [r0, #20]
   1aae6:	07db      	lsls	r3, r3, #31
{
   1aae8:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1aaea:	d414      	bmi.n	1ab16 <start+0x40>
	uint32_t delay_us = cfg->startup_delay_us;
   1aaec:	6846      	ldr	r6, [r0, #4]
	rc = gpio_pin_set_dt(&cfg->enable, true);
   1aaee:	2101      	movs	r1, #1
   1aaf0:	300c      	adds	r0, #12
   1aaf2:	f7ff ff0c 	bl	1a90e <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   1aaf6:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, true);
   1aafa:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   1aafc:	d10d      	bne.n	1ab1a <start+0x44>
		data->task = WORK_TASK_ENABLE;
   1aafe:	2301      	movs	r3, #1
   1ab00:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
   1ab04:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1ab06:	f104 001c 	add.w	r0, r4, #28
   1ab0a:	2200      	movs	r2, #0
}
   1ab0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1ab10:	2300      	movs	r3, #0
   1ab12:	f7fd bf1b 	b.w	1894c <k_work_schedule>
	int rc = 0;
   1ab16:	2300      	movs	r3, #0
		delay_us = 0;
   1ab18:	461e      	mov	r6, r3
	finalize_transition(data, notify, delay_us, rc);
   1ab1a:	4632      	mov	r2, r6
   1ab1c:	4629      	mov	r1, r5
   1ab1e:	4638      	mov	r0, r7
}
   1ab20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1ab24:	f7f9 bea4 	b.w	14870 <finalize_transition>

0001ab28 <uart_nrfx_config_get>:
	*cfg = data->uart_config;
   1ab28:	6902      	ldr	r2, [r0, #16]
{
   1ab2a:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   1ab2c:	e892 0003 	ldmia.w	r2, {r0, r1}
   1ab30:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1ab34:	2000      	movs	r0, #0
   1ab36:	4770      	bx	lr

0001ab38 <uart_nrfx_irq_update>:
}
   1ab38:	2001      	movs	r0, #1
   1ab3a:	4770      	bx	lr

0001ab3c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1ab3c:	4770      	bx	lr

0001ab3e <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1ab3e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   1ab40:	6843      	ldr	r3, [r0, #4]
   1ab42:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1ab44:	7a03      	ldrb	r3, [r0, #8]
   1ab46:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   1ab4a:	3b01      	subs	r3, #1
   1ab4c:	00db      	lsls	r3, r3, #3
   1ab4e:	6845      	ldr	r5, [r0, #4]
   1ab50:	6814      	ldr	r4, [r2, #0]
   1ab52:	441d      	add	r5, r3
   1ab54:	42ac      	cmp	r4, r5
   1ab56:	d902      	bls.n	1ab5e <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   1ab58:	f06f 0001 	mvn.w	r0, #1
}
   1ab5c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   1ab5e:	7965      	ldrb	r5, [r4, #5]
   1ab60:	428d      	cmp	r5, r1
   1ab62:	d002      	beq.n	1ab6a <pinctrl_lookup_state+0x2c>
		(*state)++;
   1ab64:	3408      	adds	r4, #8
   1ab66:	6014      	str	r4, [r2, #0]
   1ab68:	e7f1      	b.n	1ab4e <pinctrl_lookup_state+0x10>
			return 0;
   1ab6a:	2000      	movs	r0, #0
   1ab6c:	e7f6      	b.n	1ab5c <pinctrl_lookup_state+0x1e>

0001ab6e <nrf_gpio_pin_write>:
    if (value == 0)
   1ab6e:	b909      	cbnz	r1, 1ab74 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   1ab70:	f7fa bb4a 	b.w	15208 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   1ab74:	f7fa bb7a 	b.w	1526c <nrf_gpio_pin_set>

0001ab78 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1ab78:	b570      	push	{r4, r5, r6, lr}
   1ab7a:	4615      	mov	r5, r2
   1ab7c:	4604      	mov	r4, r0
   1ab7e:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1ab82:	42a6      	cmp	r6, r4
   1ab84:	d101      	bne.n	1ab8a <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   1ab86:	2000      	movs	r0, #0
}
   1ab88:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   1ab8a:	6823      	ldr	r3, [r4, #0]
   1ab8c:	0c1a      	lsrs	r2, r3, #16
   1ab8e:	2a19      	cmp	r2, #25
   1ab90:	d873      	bhi.n	1ac7a <pinctrl_configure_pins+0x102>
   1ab92:	e8df f002 	tbb	[pc, r2]
   1ab96:	180d      	.short	0x180d
   1ab98:	34243e1f 	.word	0x34243e1f
   1ab9c:	7272723e 	.word	0x7272723e
   1aba0:	72484372 	.word	0x72484372
   1aba4:	72727272 	.word	0x72727272
   1aba8:	524d7272 	.word	0x524d7272
   1abac:	6d686357 	.word	0x6d686357
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   1abb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1abb4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   1abb8:	6820      	ldr	r0, [r4, #0]
   1abba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1abbe:	f7fa fb55 	bl	1526c <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   1abc2:	2201      	movs	r2, #1
   1abc4:	e004      	b.n	1abd0 <pinctrl_configure_pins+0x58>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   1abc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1abca:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1abce:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   1abd0:	4611      	mov	r1, r2
   1abd2:	e00f      	b.n	1abf4 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   1abd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1abd8:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   1abdc:	e7ec      	b.n	1abb8 <pinctrl_configure_pins+0x40>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   1abde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1abe2:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   1abe6:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   1abe8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1abec:	f7fa fb0c 	bl	15208 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   1abf0:	2200      	movs	r2, #0
   1abf2:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   1abf4:	6820      	ldr	r0, [r4, #0]
   1abf6:	f7fa fb17 	bl	15228 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1abfa:	3404      	adds	r4, #4
   1abfc:	e7c1      	b.n	1ab82 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   1abfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ac02:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   1ac06:	6820      	ldr	r0, [r4, #0]
   1ac08:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1ac0c:	f7fa fafc 	bl	15208 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   1ac10:	e7d7      	b.n	1abc2 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   1ac12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ac16:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1ac1a:	e7d8      	b.n	1abce <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   1ac1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ac20:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1ac24:	e7d3      	b.n	1abce <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   1ac26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ac2a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1ac2e:	e7ce      	b.n	1abce <pinctrl_configure_pins+0x56>
			NRF_PSEL_PDM(reg, CLK) = NRF_GET_PIN(pins[i]);
   1ac30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ac34:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
   1ac38:	e7e5      	b.n	1ac06 <pinctrl_configure_pins+0x8e>
			NRF_PSEL_PDM(reg, DIN) = NRF_GET_PIN(pins[i]);
   1ac3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ac3e:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
   1ac42:	e7c4      	b.n	1abce <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   1ac44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ac48:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   1ac4c:	6820      	ldr	r0, [r4, #0]
   1ac4e:	f3c0 3140 	ubfx	r1, r0, #13, #1
   1ac52:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1ac56:	f7ff ff8a 	bl	1ab6e <nrf_gpio_pin_write>
   1ac5a:	e7b2      	b.n	1abc2 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   1ac5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ac60:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   1ac64:	e7f2      	b.n	1ac4c <pinctrl_configure_pins+0xd4>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   1ac66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ac6a:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   1ac6e:	e7ed      	b.n	1ac4c <pinctrl_configure_pins+0xd4>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   1ac70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ac74:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   1ac78:	e7e8      	b.n	1ac4c <pinctrl_configure_pins+0xd4>
		switch (NRF_GET_FUN(pins[i])) {
   1ac7a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ac7e:	e783      	b.n	1ab88 <pinctrl_configure_pins+0x10>

0001ac80 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ac80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1ac84:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   1ac88:	f1a0 0308 	sub.w	r3, r0, #8
   1ac8c:	4258      	negs	r0, r3
   1ac8e:	4158      	adcs	r0, r3
   1ac90:	4770      	bx	lr

0001ac92 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1ac92:	4700      	bx	r0

0001ac94 <nrfx_busy_wait>:
   1ac94:	f002 bb1e 	b.w	1d2d4 <z_impl_k_busy_wait>

0001ac98 <nrfx_clock_start>:
{
   1ac98:	b508      	push	{r3, lr}
    switch (domain)
   1ac9a:	b110      	cbz	r0, 1aca2 <nrfx_clock_start+0xa>
   1ac9c:	2801      	cmp	r0, #1
   1ac9e:	d02d      	beq.n	1acfc <nrfx_clock_start+0x64>
}
   1aca0:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1aca2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1aca6:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1acaa:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   1acae:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   1acb2:	d10b      	bne.n	1accc <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1acb4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1acb8:	07c9      	lsls	r1, r1, #31
   1acba:	d510      	bpl.n	1acde <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1acbc:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
   1acc0:	079b      	lsls	r3, r3, #30
   1acc2:	d408      	bmi.n	1acd6 <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
   1acc4:	2302      	movs	r3, #2
   1acc6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   1acca:	e7e9      	b.n	1aca0 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1accc:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1acd0:	2b01      	cmp	r3, #1
   1acd2:	d004      	beq.n	1acde <nrfx_clock_start+0x46>
    if (!is_correct_clk)
   1acd4:	b11b      	cbz	r3, 1acde <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1acd6:	2000      	movs	r0, #0
   1acd8:	f7fa fc24 	bl	15524 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1acdc:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
   1acde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1ace2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ace6:	2300      	movs	r3, #0
   1ace8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1acec:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1acf0:	2302      	movs	r3, #2
   1acf2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1acf6:	2301      	movs	r3, #1
   1acf8:	6093      	str	r3, [r2, #8]
}
   1acfa:	e7d1      	b.n	1aca0 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1acfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ad00:	2200      	movs	r2, #0
   1ad02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ad06:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1ad0a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ad0e:	6018      	str	r0, [r3, #0]
}
   1ad10:	e7c6      	b.n	1aca0 <nrfx_clock_start+0x8>

0001ad12 <nrfx_clock_stop>:
    clock_stop(domain);
   1ad12:	f7fa bc07 	b.w	15524 <clock_stop>

0001ad16 <nrf_gpio_reconfigure>:
{
   1ad16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ad18:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ad1a:	a801      	add	r0, sp, #4
{
   1ad1c:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   1ad20:	4617      	mov	r7, r2
   1ad22:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ad24:	f7fa fca8 	bl	15678 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1ad28:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1ad2a:	2f00      	cmp	r7, #0
   1ad2c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1ad30:	bf14      	ite	ne
   1ad32:	2302      	movne	r3, #2
   1ad34:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1ad36:	2900      	cmp	r1, #0
   1ad38:	bf18      	it	ne
   1ad3a:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1ad3e:	2d00      	cmp	r5, #0
   1ad40:	bf14      	ite	ne
   1ad42:	f04f 0c0c 	movne.w	ip, #12
   1ad46:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1ad4a:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1ad4c:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1ad50:	bf14      	ite	ne
   1ad52:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   1ad56:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1ad5a:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1ad5c:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1ad60:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1ad64:	bf14      	ite	ne
   1ad66:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   1ad6a:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1ad6e:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   1ad72:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1ad76:	b101      	cbz	r1, 1ad7a <nrf_gpio_reconfigure+0x64>
   1ad78:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1ad7a:	b10f      	cbz	r7, 1ad80 <nrf_gpio_reconfigure+0x6a>
   1ad7c:	783f      	ldrb	r7, [r7, #0]
   1ad7e:	007f      	lsls	r7, r7, #1
   1ad80:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1ad82:	b10d      	cbz	r5, 1ad88 <nrf_gpio_reconfigure+0x72>
   1ad84:	782d      	ldrb	r5, [r5, #0]
   1ad86:	00ad      	lsls	r5, r5, #2
   1ad88:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1ad8a:	b10c      	cbz	r4, 1ad90 <nrf_gpio_reconfigure+0x7a>
   1ad8c:	7822      	ldrb	r2, [r4, #0]
   1ad8e:	0214      	lsls	r4, r2, #8
   1ad90:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1ad92:	b10e      	cbz	r6, 1ad98 <nrf_gpio_reconfigure+0x82>
   1ad94:	7836      	ldrb	r6, [r6, #0]
   1ad96:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1ad98:	432c      	orrs	r4, r5
   1ad9a:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   1ad9c:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   1ada0:	b003      	add	sp, #12
   1ada2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ada4 <nrf_gpio_cfg_sense_set>:
{
   1ada4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1ada6:	f10d 030f 	add.w	r3, sp, #15
   1adaa:	9301      	str	r3, [sp, #4]
   1adac:	2300      	movs	r3, #0
{
   1adae:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1adb2:	9300      	str	r3, [sp, #0]
   1adb4:	461a      	mov	r2, r3
   1adb6:	4619      	mov	r1, r3
   1adb8:	f7ff ffad 	bl	1ad16 <nrf_gpio_reconfigure>
}
   1adbc:	b005      	add	sp, #20
   1adbe:	f85d fb04 	ldr.w	pc, [sp], #4

0001adc2 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1adc2:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1adc6:	681a      	ldr	r2, [r3, #0]
   1adc8:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1adca:	bf1f      	itttt	ne
   1adcc:	2200      	movne	r2, #0
   1adce:	601a      	strne	r2, [r3, #0]
   1add0:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1add2:	2001      	movne	r0, #1
   1add4:	bf08      	it	eq
   1add6:	2000      	moveq	r0, #0
}
   1add8:	4770      	bx	lr

0001adda <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   1adda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1adde:	f44f 7260 	mov.w	r2, #896	; 0x380
   1ade2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1ade6:	4770      	bx	lr

0001ade8 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   1ade8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1adec:	f44f 7260 	mov.w	r2, #896	; 0x380
   1adf0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1adf4:	4770      	bx	lr

0001adf6 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   1adf6:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   1adf8:	f7fa ffee 	bl	15dd8 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   1adfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   1ae00:	f7fa bc06 	b.w	15610 <nrfx_clock_irq_handler>

0001ae04 <nrf_gpio_cfg_default>:
{
   1ae04:	b507      	push	{r0, r1, r2, lr}
   1ae06:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ae08:	a801      	add	r0, sp, #4
   1ae0a:	f7fb f835 	bl	15e78 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1ae0e:	9b01      	ldr	r3, [sp, #4]
   1ae10:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ae14:	2202      	movs	r2, #2
   1ae16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   1ae1a:	b003      	add	sp, #12
   1ae1c:	f85d fb04 	ldr.w	pc, [sp], #4

0001ae20 <nrf_gpio_pin_write>:
{
   1ae20:	b507      	push	{r0, r1, r2, lr}
   1ae22:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ae24:	a801      	add	r0, sp, #4
    if (value == 0)
   1ae26:	b949      	cbnz	r1, 1ae3c <nrf_gpio_pin_write+0x1c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ae28:	f7fb f826 	bl	15e78 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1ae2c:	9a01      	ldr	r2, [sp, #4]
   1ae2e:	2301      	movs	r3, #1
   1ae30:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1ae32:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   1ae36:	b003      	add	sp, #12
   1ae38:	f85d fb04 	ldr.w	pc, [sp], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ae3c:	f7fb f81c 	bl	15e78 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ae40:	9a01      	ldr	r2, [sp, #4]
   1ae42:	2301      	movs	r3, #1
   1ae44:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1ae46:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   1ae4a:	e7f4      	b.n	1ae36 <nrf_gpio_pin_write+0x16>

0001ae4c <set_ss_pin_state>:
{
   1ae4c:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1ae4e:	7fc0      	ldrb	r0, [r0, #31]
   1ae50:	28ff      	cmp	r0, #255	; 0xff
   1ae52:	d006      	beq.n	1ae62 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
   1ae54:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
   1ae56:	079b      	lsls	r3, r3, #30
   1ae58:	bf58      	it	pl
   1ae5a:	f081 0101 	eorpl.w	r1, r1, #1
   1ae5e:	f7ff bfdf 	b.w	1ae20 <nrf_gpio_pin_write>
}
   1ae62:	4770      	bx	lr

0001ae64 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   1ae64:	7b0a      	ldrb	r2, [r1, #12]
{
   1ae66:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   1ae68:	2a03      	cmp	r2, #3
   1ae6a:	d829      	bhi.n	1aec0 <xfer_completeness_check+0x5c>
   1ae6c:	e8df f002 	tbb	[pc, r2]
   1ae70:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1ae74:	688a      	ldr	r2, [r1, #8]
   1ae76:	0350      	lsls	r0, r2, #13
   1ae78:	d504      	bpl.n	1ae84 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   1ae7a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   1ae7e:	6908      	ldr	r0, [r1, #16]
   1ae80:	4290      	cmp	r0, r2
   1ae82:	d107      	bne.n	1ae94 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1ae84:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1ae86:	0352      	lsls	r2, r2, #13
   1ae88:	d41a      	bmi.n	1aec0 <xfer_completeness_check+0x5c>
   1ae8a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1ae8e:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1ae90:	4291      	cmp	r1, r2
   1ae92:	d015      	beq.n	1aec0 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1ae94:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1ae96:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1ae98:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1ae9c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1aea0:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   1aea2:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1aea6:	6908      	ldr	r0, [r1, #16]
   1aea8:	4290      	cmp	r0, r2
   1aeaa:	d1f3      	bne.n	1ae94 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   1aeac:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1aeb0:	e7ed      	b.n	1ae8e <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   1aeb2:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1aeb6:	6909      	ldr	r1, [r1, #16]
   1aeb8:	e7ea      	b.n	1ae90 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   1aeba:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1aebe:	e7fa      	b.n	1aeb6 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   1aec0:	2001      	movs	r0, #1
}
   1aec2:	4770      	bx	lr

0001aec4 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1aec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1aec8:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   1aecc:	f1a0 0308 	sub.w	r3, r0, #8
   1aed0:	4258      	negs	r0, r3
   1aed2:	4158      	adcs	r0, r3
   1aed4:	4770      	bx	lr

0001aed6 <nrfx_usbd_consumer>:
{
   1aed6:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   1aed8:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   1aeda:	680d      	ldr	r5, [r1, #0]
   1aedc:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   1aede:	bf97      	itett	ls
   1aee0:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   1aee4:	2100      	movhi	r1, #0
        size -= data_size;
   1aee6:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   1aee8:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   1aeea:	bf8e      	itee	hi
   1aeec:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   1aef0:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   1aef2:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   1aef4:	429a      	cmp	r2, r3
   1aef6:	d103      	bne.n	1af00 <nrfx_usbd_consumer+0x2a>
   1aef8:	1e20      	subs	r0, r4, #0
   1aefa:	bf18      	it	ne
   1aefc:	2001      	movne	r0, #1
}
   1aefe:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   1af00:	2000      	movs	r0, #0
   1af02:	e7fc      	b.n	1aefe <nrfx_usbd_consumer+0x28>

0001af04 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   1af04:	684b      	ldr	r3, [r1, #4]
{
   1af06:	b510      	push	{r4, lr}
   1af08:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   1af0a:	680c      	ldr	r4, [r1, #0]
   1af0c:	bf28      	it	cs
   1af0e:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   1af10:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   1af14:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   1af16:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   1af18:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   1af1a:	441a      	add	r2, r3
}
   1af1c:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   1af1e:	600a      	str	r2, [r1, #0]
}
   1af20:	bf18      	it	ne
   1af22:	2001      	movne	r0, #1
   1af24:	bd10      	pop	{r4, pc}

0001af26 <nrfx_usbd_feeder_ram_zlp>:
{
   1af26:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   1af28:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   1af2a:	680b      	ldr	r3, [r1, #0]
   1af2c:	42a2      	cmp	r2, r4
   1af2e:	bf28      	it	cs
   1af30:	4622      	movcs	r2, r4
   1af32:	2a00      	cmp	r2, #0
   1af34:	bf14      	ite	ne
   1af36:	461d      	movne	r5, r3
   1af38:	2500      	moveq	r5, #0
    p_next->size = tx_size;
   1af3a:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   1af3e:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   1af42:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
   1af44:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   1af46:	600a      	str	r2, [r1, #0]
}
   1af48:	bf14      	ite	ne
   1af4a:	2001      	movne	r0, #1
   1af4c:	2000      	moveq	r0, #0
   1af4e:	bd30      	pop	{r4, r5, pc}

0001af50 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   1af50:	f010 0f80 	tst.w	r0, #128	; 0x80
   1af54:	bf14      	ite	ne
   1af56:	2300      	movne	r3, #0
   1af58:	2310      	moveq	r3, #16
   1af5a:	f000 000f 	and.w	r0, r0, #15
}
   1af5e:	4418      	add	r0, r3
   1af60:	4770      	bx	lr

0001af62 <ev_started_handler>:
}
   1af62:	4770      	bx	lr

0001af64 <nrf_usbd_epin_dma_handler>:
{
   1af64:	b508      	push	{r3, lr}
   1af66:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
   1af68:	f7fb fc76 	bl	16858 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   1af6c:	4608      	mov	r0, r1
   1af6e:	f7fb fc65 	bl	1683c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1af72:	7b83      	ldrb	r3, [r0, #14]
   1af74:	2b03      	cmp	r3, #3
   1af76:	d10a      	bne.n	1af8e <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1af78:	4608      	mov	r0, r1
   1af7a:	f7ff ffe9 	bl	1af50 <ep2bit>
   1af7e:	2301      	movs	r3, #1
   1af80:	fa03 f000 	lsl.w	r0, r3, r0
   1af84:	43c0      	mvns	r0, r0
}
   1af86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1af8a:	f7fb bd75 	b.w	16a78 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   1af8e:	6803      	ldr	r3, [r0, #0]
   1af90:	2b00      	cmp	r3, #0
   1af92:	d0f1      	beq.n	1af78 <nrf_usbd_epin_dma_handler+0x14>
}
   1af94:	bd08      	pop	{r3, pc}

0001af96 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   1af96:	2087      	movs	r0, #135	; 0x87
   1af98:	f7ff bfe4 	b.w	1af64 <nrf_usbd_epin_dma_handler>

0001af9c <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   1af9c:	2086      	movs	r0, #134	; 0x86
   1af9e:	f7ff bfe1 	b.w	1af64 <nrf_usbd_epin_dma_handler>

0001afa2 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   1afa2:	2085      	movs	r0, #133	; 0x85
   1afa4:	f7ff bfde 	b.w	1af64 <nrf_usbd_epin_dma_handler>

0001afa8 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   1afa8:	2084      	movs	r0, #132	; 0x84
   1afaa:	f7ff bfdb 	b.w	1af64 <nrf_usbd_epin_dma_handler>

0001afae <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   1afae:	2083      	movs	r0, #131	; 0x83
   1afb0:	f7ff bfd8 	b.w	1af64 <nrf_usbd_epin_dma_handler>

0001afb4 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   1afb4:	2082      	movs	r0, #130	; 0x82
   1afb6:	f7ff bfd5 	b.w	1af64 <nrf_usbd_epin_dma_handler>

0001afba <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   1afba:	2081      	movs	r0, #129	; 0x81
   1afbc:	f7ff bfd2 	b.w	1af64 <nrf_usbd_epin_dma_handler>

0001afc0 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   1afc0:	f7fb bd6a 	b.w	16a98 <nrf_usbd_ep0in_dma_handler>

0001afc4 <nrfx_usbd_ep_max_packet_size_set>:
{
   1afc4:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   1afc6:	f7fb fc39 	bl	1683c <ep_state_access>
    p_state->max_packet_size = size;
   1afca:	8181      	strh	r1, [r0, #12]
}
   1afcc:	bd08      	pop	{r3, pc}

0001afce <nrfx_usbd_ep_status_get>:
{
   1afce:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   1afd0:	f7fb fc34 	bl	1683c <ep_state_access>
	__asm__ volatile(
   1afd4:	f04f 0220 	mov.w	r2, #32
   1afd8:	f3ef 8311 	mrs	r3, BASEPRI
   1afdc:	f382 8812 	msr	BASEPRI_MAX, r2
   1afe0:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   1afe4:	6882      	ldr	r2, [r0, #8]
   1afe6:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   1afe8:	6802      	ldr	r2, [r0, #0]
   1afea:	b92a      	cbnz	r2, 1aff8 <nrfx_usbd_ep_status_get+0x2a>
   1afec:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   1afee:	f383 8811 	msr	BASEPRI, r3
   1aff2:	f3bf 8f6f 	isb	sy
}
   1aff6:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   1aff8:	2004      	movs	r0, #4
   1affa:	e7f8      	b.n	1afee <nrfx_usbd_ep_status_get+0x20>

0001affc <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   1affc:	2007      	movs	r0, #7
   1affe:	f7fc b883 	b.w	17108 <nrf_usbd_epout_dma_handler>

0001b002 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   1b002:	2006      	movs	r0, #6
   1b004:	f7fc b880 	b.w	17108 <nrf_usbd_epout_dma_handler>

0001b008 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   1b008:	2005      	movs	r0, #5
   1b00a:	f7fc b87d 	b.w	17108 <nrf_usbd_epout_dma_handler>

0001b00e <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   1b00e:	2004      	movs	r0, #4
   1b010:	f7fc b87a 	b.w	17108 <nrf_usbd_epout_dma_handler>

0001b014 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   1b014:	2003      	movs	r0, #3
   1b016:	f7fc b877 	b.w	17108 <nrf_usbd_epout_dma_handler>

0001b01a <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   1b01a:	2002      	movs	r0, #2
   1b01c:	f7fc b874 	b.w	17108 <nrf_usbd_epout_dma_handler>

0001b020 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   1b020:	2001      	movs	r0, #1
   1b022:	f7fc b871 	b.w	17108 <nrf_usbd_epout_dma_handler>

0001b026 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   1b026:	f7fc b965 	b.w	172f4 <usbd_ep_abort>

0001b02a <nrf_gpio_pin_set>:
{
   1b02a:	b507      	push	{r0, r1, r2, lr}
   1b02c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b02e:	a801      	add	r0, sp, #4
   1b030:	f7fc fb6e 	bl	17710 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1b034:	9a01      	ldr	r2, [sp, #4]
   1b036:	2301      	movs	r3, #1
   1b038:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1b03a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   1b03e:	b003      	add	sp, #12
   1b040:	f85d fb04 	ldr.w	pc, [sp], #4

0001b044 <VL53L0X_GetDeviceInfo>:
	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
   1b044:	f7fc bf90 	b.w	17f68 <VL53L0X_get_device_info>

0001b048 <VL53L0X_GetFractionEnable>:
{
   1b048:	b510      	push	{r4, lr}
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
   1b04a:	460a      	mov	r2, r1
{
   1b04c:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
   1b04e:	2109      	movs	r1, #9
   1b050:	f7ff fac1 	bl	1a5d6 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE)
   1b054:	b918      	cbnz	r0, 1b05e <VL53L0X_GetFractionEnable+0x16>
		*pEnabled = (*pEnabled & 1);
   1b056:	7823      	ldrb	r3, [r4, #0]
   1b058:	f003 0301 	and.w	r3, r3, #1
   1b05c:	7023      	strb	r3, [r4, #0]
}
   1b05e:	bd10      	pop	{r4, pc}

0001b060 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
   1b060:	f001 bc6b 	b.w	1c93a <VL53L0X_set_measurement_timing_budget_micro_seconds>

0001b064 <VL53L0X_SetVcselPulsePeriod>:
	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
   1b064:	f001 bb50 	b.w	1c708 <VL53L0X_set_vcsel_pulse_period>

0001b068 <VL53L0X_GetVcselPulsePeriod>:
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
   1b068:	f001 bc4d 	b.w	1c906 <VL53L0X_get_vcsel_pulse_period>

0001b06c <VL53L0X_SetSequenceStepEnable>:
{
   1b06c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t SequenceConfig = 0;
   1b06e:	2300      	movs	r3, #0
{
   1b070:	460c      	mov	r4, r1
   1b072:	4617      	mov	r7, r2
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
   1b074:	2101      	movs	r1, #1
   1b076:	f10d 0207 	add.w	r2, sp, #7
{
   1b07a:	4606      	mov	r6, r0
	uint8_t SequenceConfig = 0;
   1b07c:	f88d 3007 	strb.w	r3, [sp, #7]
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
   1b080:	f7ff faa9 	bl	1a5d6 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
   1b084:	4605      	mov	r5, r0
   1b086:	b9d8      	cbnz	r0, 1b0c0 <VL53L0X_SetSequenceStepEnable+0x54>
		if (SequenceStepEnabled == 1) {
   1b088:	2f01      	cmp	r7, #1
	SequenceConfigNew = SequenceConfig;
   1b08a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (SequenceStepEnabled == 1) {
   1b08e:	d126      	bne.n	1b0de <VL53L0X_SetSequenceStepEnable+0x72>
			switch (SequenceStepId) {
   1b090:	2c04      	cmp	r4, #4
   1b092:	d83a      	bhi.n	1b10a <VL53L0X_SetSequenceStepEnable+0x9e>
   1b094:	e8df f004 	tbb	[pc, r4]
   1b098:	1d1a1703 	.word	0x1d1a1703
   1b09c:	20          	.byte	0x20
   1b09d:	00          	.byte	0x00
				SequenceConfigNew |= 0x10;
   1b09e:	f043 0410 	orr.w	r4, r3, #16
	if (SequenceConfigNew != SequenceConfig) {
   1b0a2:	42a3      	cmp	r3, r4
   1b0a4:	d00c      	beq.n	1b0c0 <VL53L0X_SetSequenceStepEnable+0x54>
			Status = VL53L0X_WrByte(Dev,
   1b0a6:	4622      	mov	r2, r4
   1b0a8:	2101      	movs	r1, #1
   1b0aa:	4630      	mov	r0, r6
   1b0ac:	f7ff fa66 	bl	1a57c <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
   1b0b0:	4605      	mov	r5, r0
   1b0b2:	b928      	cbnz	r0, 1b0c0 <VL53L0X_SetSequenceStepEnable+0x54>
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
   1b0b4:	6971      	ldr	r1, [r6, #20]
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
   1b0b6:	f886 4130 	strb.w	r4, [r6, #304]	; 0x130
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
   1b0ba:	4630      	mov	r0, r6
   1b0bc:	f7ff ffd0 	bl	1b060 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
}
   1b0c0:	4628      	mov	r0, r5
   1b0c2:	b003      	add	sp, #12
   1b0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew |= 0x28;
   1b0c6:	f043 0428 	orr.w	r4, r3, #40	; 0x28
				break;
   1b0ca:	e7ea      	b.n	1b0a2 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x04;
   1b0cc:	f043 0404 	orr.w	r4, r3, #4
				break;
   1b0d0:	e7e7      	b.n	1b0a2 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x40;
   1b0d2:	f043 0440 	orr.w	r4, r3, #64	; 0x40
				break;
   1b0d6:	e7e4      	b.n	1b0a2 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x80;
   1b0d8:	f043 0480 	orr.w	r4, r3, #128	; 0x80
				break;
   1b0dc:	e7e1      	b.n	1b0a2 <VL53L0X_SetSequenceStepEnable+0x36>
			switch (SequenceStepId) {
   1b0de:	2c04      	cmp	r4, #4
   1b0e0:	d813      	bhi.n	1b10a <VL53L0X_SetSequenceStepEnable+0x9e>
   1b0e2:	e8df f004 	tbb	[pc, r4]
   1b0e6:	0603      	.short	0x0603
   1b0e8:	0c09      	.short	0x0c09
   1b0ea:	0f          	.byte	0x0f
   1b0eb:	00          	.byte	0x00
				SequenceConfigNew &= 0xef;
   1b0ec:	f003 04ef 	and.w	r4, r3, #239	; 0xef
				break;
   1b0f0:	e7d7      	b.n	1b0a2 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xd7;
   1b0f2:	f003 04d7 	and.w	r4, r3, #215	; 0xd7
				break;
   1b0f6:	e7d4      	b.n	1b0a2 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xfb;
   1b0f8:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
				break;
   1b0fc:	e7d1      	b.n	1b0a2 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xbf;
   1b0fe:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
				break;
   1b102:	e7ce      	b.n	1b0a2 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0x7f;
   1b104:	f003 047f 	and.w	r4, r3, #127	; 0x7f
				break;
   1b108:	e7cb      	b.n	1b0a2 <VL53L0X_SetSequenceStepEnable+0x36>
			switch (SequenceStepId) {
   1b10a:	f06f 0503 	mvn.w	r5, #3
   1b10e:	e7d7      	b.n	1b0c0 <VL53L0X_SetSequenceStepEnable+0x54>

0001b110 <VL53L0X_GetSequenceStepEnables>:
{
   1b110:	b513      	push	{r0, r1, r4, lr}
	uint8_t SequenceConfig = 0;
   1b112:	2300      	movs	r3, #0
{
   1b114:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
   1b116:	f10d 0207 	add.w	r2, sp, #7
   1b11a:	2101      	movs	r1, #1
	uint8_t SequenceConfig = 0;
   1b11c:	f88d 3007 	strb.w	r3, [sp, #7]
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
   1b120:	f7ff fa59 	bl	1a5d6 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
   1b124:	b978      	cbnz	r0, 1b146 <VL53L0X_GetSequenceStepEnables+0x36>
		Status = sequence_step_enabled(Dev,
   1b126:	f89d 3007 	ldrb.w	r3, [sp, #7]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
   1b12a:	f3c3 1200 	ubfx	r2, r3, #4, #1
   1b12e:	7022      	strb	r2, [r4, #0]
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
   1b130:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   1b134:	70a2      	strb	r2, [r4, #2]
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
   1b136:	f3c3 0280 	ubfx	r2, r3, #2, #1
   1b13a:	7062      	strb	r2, [r4, #1]
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
   1b13c:	f3c3 1280 	ubfx	r2, r3, #6, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
   1b140:	09db      	lsrs	r3, r3, #7
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
   1b142:	70e2      	strb	r2, [r4, #3]
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
   1b144:	7123      	strb	r3, [r4, #4]
}
   1b146:	b002      	add	sp, #8
   1b148:	bd10      	pop	{r4, pc}

0001b14a <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
{
   1b14a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b14c:	460d      	mov	r5, r1
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
   1b14e:	f10d 0202 	add.w	r2, sp, #2
   1b152:	21f8      	movs	r1, #248	; 0xf8
{
   1b154:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
   1b156:	f7ff fa7a 	bl	1a64e <VL53L0X_RdWord>
	if (Status == VL53L0X_ERROR_NONE) {
   1b15a:	b970      	cbnz	r0, 1b17a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		Status = VL53L0X_RdDWord(Dev,
   1b15c:	aa01      	add	r2, sp, #4
   1b15e:	2104      	movs	r1, #4
   1b160:	4620      	mov	r0, r4
   1b162:	f7ff fa8f 	bl	1a684 <VL53L0X_RdDWord>
	if (Status == VL53L0X_ERROR_NONE) {
   1b166:	b940      	cbnz	r0, 1b17a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		if (osc_calibrate_val != 0) {
   1b168:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1b16c:	b11a      	cbz	r2, 1b176 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x2c>
				IMPeriodMilliSeconds / osc_calibrate_val;
   1b16e:	9b01      	ldr	r3, [sp, #4]
   1b170:	fbb3 f3f2 	udiv	r3, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
   1b174:	602b      	str	r3, [r5, #0]
		VL53L0X_SETPARAMETERFIELD(Dev,
   1b176:	682b      	ldr	r3, [r5, #0]
   1b178:	61a3      	str	r3, [r4, #24]
}
   1b17a:	b003      	add	sp, #12
   1b17c:	bd30      	pop	{r4, r5, pc}

0001b17e <VL53L0X_GetXTalkCompensationEnable>:
	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
   1b17e:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;
   1b180:	700b      	strb	r3, [r1, #0]
}
   1b182:	2000      	movs	r0, #0
   1b184:	4770      	bx	lr

0001b186 <VL53L0X_GetXTalkCompensationRateMegaCps>:
{
   1b186:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b188:	460d      	mov	r5, r1
	Status = VL53L0X_RdWord(Dev,
   1b18a:	f10d 0206 	add.w	r2, sp, #6
   1b18e:	2120      	movs	r1, #32
{
   1b190:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev,
   1b192:	f7ff fa5c 	bl	1a64e <VL53L0X_RdWord>
	if (Status == VL53L0X_ERROR_NONE) {
   1b196:	b928      	cbnz	r0, 1b1a4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>
		if (Value == 0) {
   1b198:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b19c:	b923      	cbnz	r3, 1b1a8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>
			VL53L0X_GETPARAMETERFIELD(Dev,
   1b19e:	6a23      	ldr	r3, [r4, #32]
			*pXTalkCompensationRateMegaCps = TempFix1616;
   1b1a0:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
   1b1a2:	7720      	strb	r0, [r4, #28]
}
   1b1a4:	b003      	add	sp, #12
   1b1a6:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
   1b1a8:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
   1b1aa:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
   1b1ac:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
   1b1ae:	2301      	movs	r3, #1
   1b1b0:	7723      	strb	r3, [r4, #28]
   1b1b2:	e7f7      	b.n	1b1a4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>

0001b1b4 <VL53L0X_SetLimitCheckEnable>:
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
   1b1b4:	2905      	cmp	r1, #5
{
   1b1b6:	b570      	push	{r4, r5, r6, lr}
   1b1b8:	4604      	mov	r4, r0
   1b1ba:	460e      	mov	r6, r1
   1b1bc:	4615      	mov	r5, r2
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
   1b1be:	d835      	bhi.n	1b22c <VL53L0X_SetLimitCheckEnable+0x78>
		if (LimitCheckEnable == 0) {
   1b1c0:	b162      	cbz	r2, 1b1dc <VL53L0X_SetLimitCheckEnable+0x28>
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
   1b1c2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
			LimitCheckEnableInt = 1;
   1b1c6:	2101      	movs	r1, #1
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
   1b1c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
			LimitCheckDisable = 0;
   1b1ca:	2300      	movs	r3, #0
		switch (LimitCheckId) {
   1b1cc:	1e70      	subs	r0, r6, #1
   1b1ce:	2804      	cmp	r0, #4
   1b1d0:	d807      	bhi.n	1b1e2 <VL53L0X_SetLimitCheckEnable+0x2e>
   1b1d2:	e8df f000 	tbb	[pc, r0]
   1b1d6:	170e      	.short	0x170e
   1b1d8:	1d1a      	.short	0x1d1a
   1b1da:	24          	.byte	0x24
   1b1db:	00          	.byte	0x00
			LimitCheckEnableInt = 0;
   1b1dc:	4611      	mov	r1, r2
			LimitCheckDisable = 1;
   1b1de:	2301      	movs	r3, #1
   1b1e0:	e7f4      	b.n	1b1cc <VL53L0X_SetLimitCheckEnable+0x18>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
   1b1e2:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
		if (LimitCheckEnable == 0) {
   1b1e6:	4434      	add	r4, r6
   1b1e8:	b9e5      	cbnz	r5, 1b224 <VL53L0X_SetLimitCheckEnable+0x70>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
   1b1ea:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
   1b1ee:	2000      	movs	r0, #0
   1b1f0:	e007      	b.n	1b202 <VL53L0X_SetLimitCheckEnable+0x4e>
			Status = VL53L0X_WrWord(Dev,
   1b1f2:	f3c2 224f 	ubfx	r2, r2, #9, #16
   1b1f6:	2144      	movs	r1, #68	; 0x44
   1b1f8:	4620      	mov	r0, r4
   1b1fa:	f7ff f9d4 	bl	1a5a6 <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
   1b1fe:	2800      	cmp	r0, #0
   1b200:	d0f1      	beq.n	1b1e6 <VL53L0X_SetLimitCheckEnable+0x32>
}
   1b202:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
   1b204:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	if (Status == VL53L0X_ERROR_NONE) {
   1b208:	e7ed      	b.n	1b1e6 <VL53L0X_SetLimitCheckEnable+0x32>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
   1b20a:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
	if (Status == VL53L0X_ERROR_NONE) {
   1b20e:	e7ea      	b.n	1b1e6 <VL53L0X_SetLimitCheckEnable+0x32>
			Status = VL53L0X_UpdateByte(Dev,
   1b210:	005b      	lsls	r3, r3, #1
   1b212:	22fe      	movs	r2, #254	; 0xfe
			Status = VL53L0X_UpdateByte(Dev,
   1b214:	2160      	movs	r1, #96	; 0x60
   1b216:	4620      	mov	r0, r4
   1b218:	f7ff f9ff 	bl	1a61a <VL53L0X_UpdateByte>
			break;
   1b21c:	e7ef      	b.n	1b1fe <VL53L0X_SetLimitCheckEnable+0x4a>
			Status = VL53L0X_UpdateByte(Dev,
   1b21e:	011b      	lsls	r3, r3, #4
   1b220:	22ef      	movs	r2, #239	; 0xef
   1b222:	e7f7      	b.n	1b214 <VL53L0X_SetLimitCheckEnable+0x60>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
   1b224:	2301      	movs	r3, #1
   1b226:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   1b22a:	e7e0      	b.n	1b1ee <VL53L0X_SetLimitCheckEnable+0x3a>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
   1b22c:	f06f 0003 	mvn.w	r0, #3
   1b230:	e7e7      	b.n	1b202 <VL53L0X_SetLimitCheckEnable+0x4e>

0001b232 <VL53L0X_GetLimitCheckEnable>:
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
   1b232:	2905      	cmp	r1, #5
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
   1b234:	bf96      	itet	ls
   1b236:	1840      	addls	r0, r0, r1
		*pLimitCheckEnable = 0;
   1b238:	2300      	movhi	r3, #0
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
   1b23a:	f890 3028 	ldrbls.w	r3, [r0, #40]	; 0x28
		*pLimitCheckEnable = Temp8;
   1b23e:	7013      	strb	r3, [r2, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
   1b240:	bf94      	ite	ls
   1b242:	2000      	movls	r0, #0
		Status = VL53L0X_ERROR_INVALID_PARAMS;
   1b244:	f06f 0003 	mvnhi.w	r0, #3
}
   1b248:	4770      	bx	lr

0001b24a <VL53L0X_SetLimitCheckValue>:
{
   1b24a:	b570      	push	{r4, r5, r6, lr}
	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
   1b24c:	1843      	adds	r3, r0, r1
{
   1b24e:	4604      	mov	r4, r0
	if (Temp8 == 0) { /* disabled write only internal value */
   1b250:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
{
   1b254:	460e      	mov	r6, r1
   1b256:	4615      	mov	r5, r2
	if (Temp8 == 0) { /* disabled write only internal value */
   1b258:	b918      	cbnz	r0, 1b262 <VL53L0X_SetLimitCheckValue+0x18>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
   1b25a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
   1b25e:	6362      	str	r2, [r4, #52]	; 0x34
}
   1b260:	bd70      	pop	{r4, r5, r6, pc}
		switch (LimitCheckId) {
   1b262:	2905      	cmp	r1, #5
   1b264:	d81b      	bhi.n	1b29e <VL53L0X_SetLimitCheckValue+0x54>
   1b266:	e8df f001 	tbb	[pc, r1]
   1b26a:	0903      	.short	0x0903
   1b26c:	16161412 	.word	0x16161412
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
   1b270:	6362      	str	r2, [r4, #52]	; 0x34
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
   1b272:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   1b276:	2000      	movs	r0, #0
   1b278:	6365      	str	r5, [r4, #52]	; 0x34
   1b27a:	e7f1      	b.n	1b260 <VL53L0X_SetLimitCheckValue+0x16>
			Status = VL53L0X_WrWord(Dev,
   1b27c:	f3c2 224f 	ubfx	r2, r2, #9, #16
   1b280:	2144      	movs	r1, #68	; 0x44
			Status = VL53L0X_WrWord(Dev,
   1b282:	4620      	mov	r0, r4
   1b284:	f7ff f98f 	bl	1a5a6 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
   1b288:	2800      	cmp	r0, #0
   1b28a:	d1e9      	bne.n	1b260 <VL53L0X_SetLimitCheckValue+0x16>
   1b28c:	e7f1      	b.n	1b272 <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
   1b28e:	63e2      	str	r2, [r4, #60]	; 0x3c
		if (Status == VL53L0X_ERROR_NONE) {
   1b290:	e7ef      	b.n	1b272 <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
   1b292:	6422      	str	r2, [r4, #64]	; 0x40
		if (Status == VL53L0X_ERROR_NONE) {
   1b294:	e7ed      	b.n	1b272 <VL53L0X_SetLimitCheckValue+0x28>
			Status = VL53L0X_WrWord(Dev,
   1b296:	f3c2 224f 	ubfx	r2, r2, #9, #16
   1b29a:	2164      	movs	r1, #100	; 0x64
   1b29c:	e7f1      	b.n	1b282 <VL53L0X_SetLimitCheckValue+0x38>
		switch (LimitCheckId) {
   1b29e:	f06f 0003 	mvn.w	r0, #3
   1b2a2:	e7dd      	b.n	1b260 <VL53L0X_SetLimitCheckValue+0x16>

0001b2a4 <VL53L0X_GetLimitCheckValue>:
{
   1b2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b2a6:	4604      	mov	r4, r0
   1b2a8:	4615      	mov	r5, r2
	switch (LimitCheckId) {
   1b2aa:	2905      	cmp	r1, #5
   1b2ac:	d82c      	bhi.n	1b308 <VL53L0X_GetLimitCheckValue+0x64>
   1b2ae:	e8df f001 	tbb	[pc, r1]
   1b2b2:	0703      	.short	0x0703
   1b2b4:	1b1b1917 	.word	0x1b1b1917
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
   1b2b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
			*pLimitCheckValue = TempFix1616;
   1b2ba:	602b      	str	r3, [r5, #0]
   1b2bc:	2000      	movs	r0, #0
   1b2be:	e021      	b.n	1b304 <VL53L0X_GetLimitCheckValue+0x60>
		Status = VL53L0X_RdWord(Dev,
   1b2c0:	f10d 0206 	add.w	r2, sp, #6
   1b2c4:	2144      	movs	r1, #68	; 0x44
   1b2c6:	f7ff f9c2 	bl	1a64e <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
   1b2ca:	b9d8      	cbnz	r0, 1b304 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
   1b2cc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			if (TempFix1616 == 0) {
   1b2d0:	0253      	lsls	r3, r2, #9
   1b2d2:	b19a      	cbz	r2, 1b2fc <VL53L0X_GetLimitCheckValue+0x58>
				*pLimitCheckValue = TempFix1616;
   1b2d4:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
   1b2d6:	63a3      	str	r3, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
   1b2d8:	2301      	movs	r3, #1
   1b2da:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   1b2de:	e011      	b.n	1b304 <VL53L0X_GetLimitCheckValue+0x60>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
   1b2e0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		if (EnableZeroValue == 1) {
   1b2e2:	e7ea      	b.n	1b2ba <VL53L0X_GetLimitCheckValue+0x16>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
   1b2e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (EnableZeroValue == 1) {
   1b2e6:	e7e8      	b.n	1b2ba <VL53L0X_GetLimitCheckValue+0x16>
		Status = VL53L0X_RdWord(Dev,
   1b2e8:	f10d 0206 	add.w	r2, sp, #6
   1b2ec:	2164      	movs	r1, #100	; 0x64
   1b2ee:	f7ff f9ae 	bl	1a64e <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
   1b2f2:	b938      	cbnz	r0, 1b304 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
   1b2f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b2f8:	025b      	lsls	r3, r3, #9
		if (EnableZeroValue == 1) {
   1b2fa:	e7de      	b.n	1b2ba <VL53L0X_GetLimitCheckValue+0x16>
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
   1b2fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				*pLimitCheckValue = TempFix1616;
   1b2fe:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
   1b300:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
   1b304:	b003      	add	sp, #12
   1b306:	bd30      	pop	{r4, r5, pc}
	switch (LimitCheckId) {
   1b308:	f06f 0003 	mvn.w	r0, #3
   1b30c:	e7fa      	b.n	1b304 <VL53L0X_GetLimitCheckValue+0x60>

0001b30e <VL53L0X_GetWrapAroundCheckEnable>:
{
   1b30e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b310:	460d      	mov	r5, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
   1b312:	f10d 0207 	add.w	r2, sp, #7
   1b316:	2101      	movs	r1, #1
{
   1b318:	4604      	mov	r4, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
   1b31a:	f7ff f95c 	bl	1a5d6 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
   1b31e:	b938      	cbnz	r0, 1b330 <VL53L0X_GetWrapAroundCheckEnable+0x22>
		PALDevDataSet(Dev, SequenceConfig, data);
   1b320:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b324:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
			*pWrapAroundCheckEnable = 0x01;
   1b328:	09db      	lsrs	r3, r3, #7
   1b32a:	702b      	strb	r3, [r5, #0]
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
   1b32c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
   1b330:	b003      	add	sp, #12
   1b332:	bd30      	pop	{r4, r5, pc}

0001b334 <VL53L0X_GetDeviceParameters>:
{
   1b334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
   1b338:	7c03      	ldrb	r3, [r0, #16]
{
   1b33a:	460c      	mov	r4, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
   1b33c:	f801 3b08 	strb.w	r3, [r1], #8
{
   1b340:	4605      	mov	r5, r0
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
   1b342:	f7ff ff02 	bl	1b14a <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
   1b346:	bb40      	cbnz	r0, 1b39a <VL53L0X_GetDeviceParameters+0x66>
		pDeviceParameters->XTalkCompensationEnable = 0;
   1b348:	7320      	strb	r0, [r4, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
   1b34a:	f104 0110 	add.w	r1, r4, #16
   1b34e:	4628      	mov	r0, r5
   1b350:	f7ff ff19 	bl	1b186 <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
   1b354:	bb08      	cbnz	r0, 1b39a <VL53L0X_GetDeviceParameters+0x66>
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
   1b356:	f104 0114 	add.w	r1, r4, #20
   1b35a:	4628      	mov	r0, r5
   1b35c:	f000 fa3e 	bl	1b7dc <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
   1b360:	b9d8      	cbnz	r0, 1b39a <VL53L0X_GetDeviceParameters+0x66>
   1b362:	f104 0724 	add.w	r7, r4, #36	; 0x24
   1b366:	f105 0928 	add.w	r9, r5, #40	; 0x28
   1b36a:	f104 0818 	add.w	r8, r4, #24
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
   1b36e:	4606      	mov	r6, r0
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
   1b370:	463a      	mov	r2, r7
   1b372:	b2b1      	uxth	r1, r6
   1b374:	4628      	mov	r0, r5
   1b376:	f7ff ff95 	bl	1b2a4 <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
   1b37a:	b970      	cbnz	r0, 1b39a <VL53L0X_GetDeviceParameters+0x66>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
   1b37c:	3601      	adds	r6, #1
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
   1b37e:	f819 3b01 	ldrb.w	r3, [r9], #1
		*pLimitCheckEnable = Temp8;
   1b382:	f808 3b01 	strb.w	r3, [r8], #1
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
   1b386:	2e06      	cmp	r6, #6
   1b388:	f107 0704 	add.w	r7, r7, #4
   1b38c:	d1f0      	bne.n	1b370 <VL53L0X_GetDeviceParameters+0x3c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
   1b38e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1b392:	4628      	mov	r0, r5
   1b394:	f7ff ffbb 	bl	1b30e <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
   1b398:	b108      	cbz	r0, 1b39e <VL53L0X_GetDeviceParameters+0x6a>
}
   1b39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
   1b39e:	1d21      	adds	r1, r4, #4
   1b3a0:	4628      	mov	r0, r5
}
   1b3a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
   1b3a6:	f001 bb30 	b.w	1ca0a <VL53L0X_get_measurement_timing_budget_micro_seconds>

0001b3aa <VL53L0X_PerformRefCalibration>:
	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
   1b3aa:	2301      	movs	r3, #1
   1b3ac:	f000 bc3b 	b.w	1bc26 <VL53L0X_perform_ref_calibration>

0001b3b0 <VL53L0X_GetRangingMeasurementData>:
{
   1b3b0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   1b3b4:	b08e      	sub	sp, #56	; 0x38
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
   1b3b6:	230c      	movs	r3, #12
{
   1b3b8:	460c      	mov	r4, r1
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
   1b3ba:	aa04      	add	r2, sp, #16
   1b3bc:	2114      	movs	r1, #20
{
   1b3be:	4605      	mov	r5, r0
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
   1b3c0:	f7ff f8ca 	bl	1a558 <VL53L0X_ReadMulti>
   1b3c4:	4603      	mov	r3, r0
   1b3c6:	4684      	mov	ip, r0
	if (Status == VL53L0X_ERROR_NONE) {
   1b3c8:	2800      	cmp	r0, #0
   1b3ca:	d16e      	bne.n	1b4aa <VL53L0X_GetRangingMeasurementData+0xfa>
		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
   1b3cc:	75a0      	strb	r0, [r4, #22]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
   1b3ce:	f89d 201a 	ldrb.w	r2, [sp, #26]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
   1b3d2:	6020      	str	r0, [r4, #0]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
   1b3d4:	f89d 001b 	ldrb.w	r0, [sp, #27]
		pRangingMeasurementData->MeasurementTimeUsec = 0;
   1b3d8:	6063      	str	r3, [r4, #4]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
   1b3da:	eb00 2002 	add.w	r0, r0, r2, lsl #8
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
   1b3de:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1b3e2:	f89d 2017 	ldrb.w	r2, [sp, #23]
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
   1b3e6:	f89d 1018 	ldrb.w	r1, [sp, #24]
		LinearityCorrectiveGain = PALDevDataGet(Dev,
   1b3ea:	f8b5 6152 	ldrh.w	r6, [r5, #338]	; 0x152
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
   1b3ee:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
   1b3f2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1b3f6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
   1b3fa:	b29b      	uxth	r3, r3
   1b3fc:	025b      	lsls	r3, r3, #9
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
   1b3fe:	f89d 1012 	ldrb.w	r1, [sp, #18]
		pRangingMeasurementData->AmbientRateRtnMegaCps =
   1b402:	6123      	str	r3, [r4, #16]
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
   1b404:	f89d 3013 	ldrb.w	r3, [sp, #19]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
   1b408:	b292      	uxth	r2, r2
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
   1b40a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
   1b40e:	0252      	lsls	r2, r2, #9
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
   1b410:	b29b      	uxth	r3, r3
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
   1b412:	60e2      	str	r2, [r4, #12]
		pRangingMeasurementData->EffectiveSpadRtnCount =
   1b414:	82a3      	strh	r3, [r4, #20]
		if (LinearityCorrectiveGain != 1000) {
   1b416:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
		DeviceRangeStatus = localBuffer[0];
   1b41a:	f89d 1010 	ldrb.w	r1, [sp, #16]
		RangeFractionalEnable = PALDevDataGet(Dev,
   1b41e:	f895 7131 	ldrb.w	r7, [r5, #305]	; 0x131
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
   1b422:	b280      	uxth	r0, r0
		if (LinearityCorrectiveGain != 1000) {
   1b424:	d00d      	beq.n	1b442 <VL53L0X_GetRangingMeasurementData+0x92>
			if (XTalkCompensationEnable) {
   1b426:	f895 c01c 	ldrb.w	ip, [r5, #28]
				* tmpuint16 + 500) / 1000);
   1b42a:	4370      	muls	r0, r6
   1b42c:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   1b430:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1b434:	fbb0 f0f6 	udiv	r0, r0, r6
			VL53L0X_GETPARAMETERFIELD(Dev,
   1b438:	6a2e      	ldr	r6, [r5, #32]
			if (XTalkCompensationEnable) {
   1b43a:	f1bc 0f00 	cmp.w	ip, #0
   1b43e:	d138      	bne.n	1b4b2 <VL53L0X_GetRangingMeasurementData+0x102>
					XtalkRangeMilliMeter =
   1b440:	b280      	uxth	r0, r0
		if (RangeFractionalEnable) {
   1b442:	2f00      	cmp	r7, #0
   1b444:	d03f      	beq.n	1b4c6 <VL53L0X_GetRangingMeasurementData+0x116>
				(uint16_t)((tmpuint16) >> 2);
   1b446:	0886      	lsrs	r6, r0, #2
			pRangingMeasurementData->RangeMilliMeter =
   1b448:	8126      	strh	r6, [r4, #8]
				(uint8_t)((tmpuint16 & 0x03) << 6);
   1b44a:	0180      	lsls	r0, r0, #6
			pRangingMeasurementData->RangeFractionalPart = 0;
   1b44c:	75e0      	strb	r0, [r4, #23]
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
   1b44e:	f10d 000f 	add.w	r0, sp, #15
   1b452:	e9cd 4000 	strd	r4, r0, [sp]
   1b456:	4628      	mov	r0, r5
   1b458:	f001 fbad 	bl	1cbb6 <VL53L0X_get_pal_range_status>
		if (Status == VL53L0X_ERROR_NONE)
   1b45c:	4684      	mov	ip, r0
   1b45e:	bb20      	cbnz	r0, 1b4aa <VL53L0X_GetRangingMeasurementData+0xfa>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
   1b460:	f89d e00f 	ldrb.w	lr, [sp, #15]
   1b464:	f884 e018 	strb.w	lr, [r4, #24]
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
   1b468:	f105 0650 	add.w	r6, r5, #80	; 0x50
   1b46c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1b46e:	af07      	add	r7, sp, #28
   1b470:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1b472:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
			pRangingMeasurementData->RangeFractionalPart;
   1b476:	7de3      	ldrb	r3, [r4, #23]
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
   1b478:	e887 0007 	stmia.w	r7, {r0, r1, r2}
			pRangingMeasurementData->AmbientRateRtnMegaCps;
   1b47c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
			pRangingMeasurementData->EffectiveSpadRtnCount;
   1b480:	8aa2      	ldrh	r2, [r4, #20]
		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
   1b482:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   1b486:	e9d4 4901 	ldrd	r4, r9, [r4, #4]
   1b48a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1b48e:	e9cd 4908 	strd	r4, r9, [sp, #32]
   1b492:	ac07      	add	r4, sp, #28
   1b494:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1b498:	f88d e034 	strb.w	lr, [sp, #52]	; 0x34
   1b49c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1b49e:	3550      	adds	r5, #80	; 0x50
   1b4a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1b4a2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   1b4a6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
}
   1b4aa:	4660      	mov	r0, ip
   1b4ac:	b00e      	add	sp, #56	; 0x38
   1b4ae:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
					* EffectiveSpadRtnCount) >> 8))
   1b4b2:	b2b6      	uxth	r6, r6
   1b4b4:	435e      	muls	r6, r3
				if ((SignalRate
   1b4b6:	ebb2 2f26 	cmp.w	r2, r6, asr #8
					* EffectiveSpadRtnCount) >> 8))
   1b4ba:	ea4f 2c26 	mov.w	ip, r6, asr #8
				if ((SignalRate
   1b4be:	d105      	bne.n	1b4cc <VL53L0X_GetRangingMeasurementData+0x11c>
					if (RangeFractionalEnable)
   1b4c0:	b95f      	cbnz	r7, 1b4da <VL53L0X_GetRangingMeasurementData+0x12a>
						XtalkRangeMilliMeter = 8888
   1b4c2:	f648 20e0 	movw	r0, #35552	; 0x8ae0
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
   1b4c6:	8120      	strh	r0, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
   1b4c8:	2000      	movs	r0, #0
   1b4ca:	e7bf      	b.n	1b44c <VL53L0X_GetRangingMeasurementData+0x9c>
					(tmpuint16 * SignalRate)
   1b4cc:	b280      	uxth	r0, r0
   1b4ce:	4350      	muls	r0, r2
						- ((XTalkCompensationRateMegaCps
   1b4d0:	eba2 060c 	sub.w	r6, r2, ip
						/ (SignalRate
   1b4d4:	fbb0 f0f6 	udiv	r0, r0, r6
   1b4d8:	e7b2      	b.n	1b440 <VL53L0X_GetRangingMeasurementData+0x90>
						XtalkRangeMilliMeter = 8888;
   1b4da:	f242 20b8 	movw	r0, #8888	; 0x22b8
   1b4de:	e7b2      	b.n	1b446 <VL53L0X_GetRangingMeasurementData+0x96>

0001b4e0 <VL53L0X_StartMeasurement>:
{
   1b4e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b4e2:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
   1b4e4:	2201      	movs	r2, #1
   1b4e6:	2180      	movs	r1, #128	; 0x80
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
   1b4e8:	7c05      	ldrb	r5, [r0, #16]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
   1b4ea:	f7ff f847 	bl	1a57c <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1b4ee:	2201      	movs	r2, #1
   1b4f0:	21ff      	movs	r1, #255	; 0xff
   1b4f2:	4620      	mov	r0, r4
   1b4f4:	f7ff f842 	bl	1a57c <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
   1b4f8:	2200      	movs	r2, #0
   1b4fa:	4611      	mov	r1, r2
   1b4fc:	4620      	mov	r0, r4
   1b4fe:	f7ff f83d 	bl	1a57c <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
   1b502:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
   1b506:	2191      	movs	r1, #145	; 0x91
   1b508:	4620      	mov	r0, r4
   1b50a:	f7ff f837 	bl	1a57c <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
   1b50e:	2201      	movs	r2, #1
   1b510:	2100      	movs	r1, #0
   1b512:	4620      	mov	r0, r4
   1b514:	f7ff f832 	bl	1a57c <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
   1b518:	2200      	movs	r2, #0
   1b51a:	21ff      	movs	r1, #255	; 0xff
   1b51c:	4620      	mov	r0, r4
   1b51e:	f7ff f82d 	bl	1a57c <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
   1b522:	2200      	movs	r2, #0
   1b524:	2180      	movs	r1, #128	; 0x80
   1b526:	4620      	mov	r0, r4
   1b528:	f7ff f828 	bl	1a57c <VL53L0X_WrByte>
	switch (DeviceMode) {
   1b52c:	2d01      	cmp	r5, #1
   1b52e:	d029      	beq.n	1b584 <VL53L0X_StartMeasurement+0xa4>
   1b530:	2d03      	cmp	r5, #3
   1b532:	d037      	beq.n	1b5a4 <VL53L0X_StartMeasurement+0xc4>
   1b534:	2d00      	cmp	r5, #0
   1b536:	d13c      	bne.n	1b5b2 <VL53L0X_StartMeasurement+0xd2>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
   1b538:	2201      	movs	r2, #1
   1b53a:	4629      	mov	r1, r5
   1b53c:	4620      	mov	r0, r4
   1b53e:	f7ff f81d 	bl	1a57c <VL53L0X_WrByte>
		Byte = StartStopByte;
   1b542:	2301      	movs	r3, #1
   1b544:	f88d 3007 	strb.w	r3, [sp, #7]
		if (Status == VL53L0X_ERROR_NONE) {
   1b548:	b1a0      	cbz	r0, 1b574 <VL53L0X_StartMeasurement+0x94>
}
   1b54a:	b003      	add	sp, #12
   1b54c:	bd30      	pop	{r4, r5, pc}
					Status = VL53L0X_RdByte(Dev,
   1b54e:	4601      	mov	r1, r0
   1b550:	f10d 0207 	add.w	r2, sp, #7
   1b554:	4620      	mov	r0, r4
   1b556:	f7ff f83e 	bl	1a5d6 <VL53L0X_RdByte>
			} while (((Byte & StartStopByte) == StartStopByte)
   1b55a:	f89d 3007 	ldrb.w	r3, [sp, #7]
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
   1b55e:	07db      	lsls	r3, r3, #31
				LoopNb = LoopNb + 1;
   1b560:	f105 0501 	add.w	r5, r5, #1
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
   1b564:	d508      	bpl.n	1b578 <VL53L0X_StartMeasurement+0x98>
				&& (Status == VL53L0X_ERROR_NONE)
   1b566:	b938      	cbnz	r0, 1b578 <VL53L0X_StartMeasurement+0x98>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
   1b568:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
   1b56c:	d1ef      	bne.n	1b54e <VL53L0X_StartMeasurement+0x6e>
				Status = VL53L0X_ERROR_TIME_OUT;
   1b56e:	f06f 0006 	mvn.w	r0, #6
   1b572:	e7ea      	b.n	1b54a <VL53L0X_StartMeasurement+0x6a>
			LoopNb = 0;
   1b574:	4605      	mov	r5, r0
   1b576:	e7f0      	b.n	1b55a <VL53L0X_StartMeasurement+0x7a>
				Status = VL53L0X_ERROR_TIME_OUT;
   1b578:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
   1b57c:	bf08      	it	eq
   1b57e:	f06f 0006 	mvneq.w	r0, #6
   1b582:	e7e2      	b.n	1b54a <VL53L0X_StartMeasurement+0x6a>
		if (Status == VL53L0X_ERROR_NONE)
   1b584:	b918      	cbnz	r0, 1b58e <VL53L0X_StartMeasurement+0xae>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
   1b586:	4629      	mov	r1, r5
   1b588:	4620      	mov	r0, r4
   1b58a:	f7fc fa11 	bl	179b0 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
   1b58e:	2202      	movs	r2, #2
		Status = VL53L0X_WrByte(Dev,
   1b590:	2100      	movs	r1, #0
   1b592:	4620      	mov	r0, r4
   1b594:	f7fe fff2 	bl	1a57c <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
   1b598:	2800      	cmp	r0, #0
   1b59a:	d1d6      	bne.n	1b54a <VL53L0X_StartMeasurement+0x6a>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
   1b59c:	2304      	movs	r3, #4
   1b59e:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
   1b5a2:	e7d2      	b.n	1b54a <VL53L0X_StartMeasurement+0x6a>
		if (Status == VL53L0X_ERROR_NONE)
   1b5a4:	b918      	cbnz	r0, 1b5ae <VL53L0X_StartMeasurement+0xce>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
   1b5a6:	2101      	movs	r1, #1
   1b5a8:	4620      	mov	r0, r4
   1b5aa:	f7fc fa01 	bl	179b0 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
   1b5ae:	2204      	movs	r2, #4
   1b5b0:	e7ee      	b.n	1b590 <VL53L0X_StartMeasurement+0xb0>
	switch (DeviceMode) {
   1b5b2:	f06f 0007 	mvn.w	r0, #7
   1b5b6:	e7c8      	b.n	1b54a <VL53L0X_StartMeasurement+0x6a>

0001b5b8 <VL53L0X_PerformSingleMeasurement>:
{
   1b5b8:	b538      	push	{r3, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
   1b5ba:	7c05      	ldrb	r5, [r0, #16]
{
   1b5bc:	4604      	mov	r4, r0
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
   1b5be:	b125      	cbz	r5, 1b5ca <VL53L0X_PerformSingleMeasurement+0x12>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
   1b5c0:	4620      	mov	r0, r4
   1b5c2:	f000 fc74 	bl	1beae <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE
   1b5c6:	b128      	cbz	r0, 1b5d4 <VL53L0X_PerformSingleMeasurement+0x1c>
}
   1b5c8:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L0X_StartMeasurement(Dev);
   1b5ca:	f7ff ff89 	bl	1b4e0 <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
   1b5ce:	2800      	cmp	r0, #0
   1b5d0:	d0f6      	beq.n	1b5c0 <VL53L0X_PerformSingleMeasurement+0x8>
   1b5d2:	e7f9      	b.n	1b5c8 <VL53L0X_PerformSingleMeasurement+0x10>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
   1b5d4:	2d00      	cmp	r5, #0
   1b5d6:	d1f7      	bne.n	1b5c8 <VL53L0X_PerformSingleMeasurement+0x10>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
   1b5d8:	2303      	movs	r3, #3
   1b5da:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
   1b5de:	e7f3      	b.n	1b5c8 <VL53L0X_PerformSingleMeasurement+0x10>

0001b5e0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
   1b5e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b5e2:	4606      	mov	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
   1b5e4:	2500      	movs	r5, #0
	do {
		Status = VL53L0X_WrByte(Dev,
   1b5e6:	2201      	movs	r2, #1
   1b5e8:	210b      	movs	r1, #11
   1b5ea:	4630      	mov	r0, r6
   1b5ec:	f7fe ffc6 	bl	1a57c <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
   1b5f0:	2200      	movs	r2, #0
		Status = VL53L0X_WrByte(Dev,
   1b5f2:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev,
   1b5f4:	210b      	movs	r1, #11
   1b5f6:	4630      	mov	r0, r6
   1b5f8:	f7fe ffc0 	bl	1a57c <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
   1b5fc:	f10d 0207 	add.w	r2, sp, #7
		Status |= VL53L0X_WrByte(Dev,
   1b600:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev,
   1b602:	2113      	movs	r1, #19
   1b604:	4630      	mov	r0, r6
   1b606:	f7fe ffe6 	bl	1a5d6 <VL53L0X_RdByte>
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
   1b60a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		Status |= VL53L0X_WrByte(Dev,
   1b60e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev,
   1b610:	4304      	orrs	r4, r0
		LoopCount++;
   1b612:	3501      	adds	r5, #1
			&& (Status == VL53L0X_ERROR_NONE));
   1b614:	075b      	lsls	r3, r3, #29
		Status |= VL53L0X_RdByte(Dev,
   1b616:	b260      	sxtb	r0, r4
		LoopCount++;
   1b618:	b2ed      	uxtb	r5, r5
			&& (Status == VL53L0X_ERROR_NONE));
   1b61a:	d005      	beq.n	1b628 <VL53L0X_ClearInterruptMask+0x48>
			&& (LoopCount < 3)
   1b61c:	2d03      	cmp	r5, #3
   1b61e:	d008      	beq.n	1b632 <VL53L0X_ClearInterruptMask+0x52>
			&& (Status == VL53L0X_ERROR_NONE));
   1b620:	2800      	cmp	r0, #0
   1b622:	d0e0      	beq.n	1b5e6 <VL53L0X_ClearInterruptMask+0x6>
	if (LoopCount >= 3)
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;

	LOG_FUNCTION_END(Status);
	return Status;
}
   1b624:	b002      	add	sp, #8
   1b626:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
   1b628:	2d03      	cmp	r5, #3
   1b62a:	bf08      	it	eq
   1b62c:	f06f 000b 	mvneq.w	r0, #11
   1b630:	e7f8      	b.n	1b624 <VL53L0X_ClearInterruptMask+0x44>
   1b632:	f06f 000b 	mvn.w	r0, #11
   1b636:	e7f5      	b.n	1b624 <VL53L0X_ClearInterruptMask+0x44>

0001b638 <VL53L0X_PerformSingleRangingMeasurement>:
{
   1b638:	b538      	push	{r3, r4, r5, lr}
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
   1b63a:	2300      	movs	r3, #0
   1b63c:	7403      	strb	r3, [r0, #16]
{
   1b63e:	4604      	mov	r4, r0
   1b640:	460d      	mov	r5, r1
		Status = VL53L0X_PerformSingleMeasurement(Dev);
   1b642:	f7ff ffb9 	bl	1b5b8 <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
   1b646:	b950      	cbnz	r0, 1b65e <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
   1b648:	4629      	mov	r1, r5
   1b64a:	4620      	mov	r0, r4
   1b64c:	f7ff feb0 	bl	1b3b0 <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
   1b650:	b928      	cbnz	r0, 1b65e <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
   1b652:	4601      	mov	r1, r0
   1b654:	4620      	mov	r0, r4
}
   1b656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
   1b65a:	f7ff bfc1 	b.w	1b5e0 <VL53L0X_ClearInterruptMask>
}
   1b65e:	bd38      	pop	{r3, r4, r5, pc}

0001b660 <VL53L0X_SetGpioConfig.part.0>:
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
   1b660:	2915      	cmp	r1, #21
VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
   1b662:	b570      	push	{r4, r5, r6, lr}
   1b664:	4605      	mov	r5, r0
   1b666:	4614      	mov	r4, r2
   1b668:	461e      	mov	r6, r3
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
   1b66a:	d167      	bne.n	1b73c <VL53L0X_SetGpioConfig.part.0+0xdc>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
   1b66c:	2201      	movs	r2, #1
   1b66e:	21ff      	movs	r1, #255	; 0xff
   1b670:	f7fe ff84 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1b674:	2200      	movs	r2, #0
   1b676:	4611      	mov	r1, r2
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
   1b678:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1b67a:	4628      	mov	r0, r5
   1b67c:	f7fe ff7e 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
   1b680:	2200      	movs	r2, #0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1b682:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
   1b684:	21ff      	movs	r1, #255	; 0xff
   1b686:	4628      	mov	r0, r5
   1b688:	f7fe ff78 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1b68c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
   1b68e:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
   1b690:	2201      	movs	r2, #1
   1b692:	2180      	movs	r1, #128	; 0x80
   1b694:	4628      	mov	r0, r5
   1b696:	f7fe ff71 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
   1b69a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
   1b69c:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
   1b69e:	2202      	movs	r2, #2
   1b6a0:	2185      	movs	r1, #133	; 0x85
   1b6a2:	4628      	mov	r0, r5
   1b6a4:	f7fe ff6a 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
   1b6a8:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
   1b6aa:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
   1b6ac:	2204      	movs	r2, #4
   1b6ae:	21ff      	movs	r1, #255	; 0xff
   1b6b0:	4628      	mov	r0, r5
   1b6b2:	f7fe ff63 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
   1b6b6:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
   1b6b8:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
   1b6ba:	2200      	movs	r2, #0
   1b6bc:	21cd      	movs	r1, #205	; 0xcd
   1b6be:	4628      	mov	r0, r5
   1b6c0:	f7fe ff5c 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
   1b6c4:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
   1b6c6:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
   1b6c8:	2211      	movs	r2, #17
   1b6ca:	21cc      	movs	r1, #204	; 0xcc
   1b6cc:	4628      	mov	r0, r5
   1b6ce:	f7fe ff55 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
   1b6d2:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
   1b6d4:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
   1b6d6:	2207      	movs	r2, #7
   1b6d8:	21ff      	movs	r1, #255	; 0xff
   1b6da:	4628      	mov	r0, r5
   1b6dc:	f7fe ff4e 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
   1b6e0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
   1b6e2:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
   1b6e4:	2200      	movs	r2, #0
   1b6e6:	21be      	movs	r1, #190	; 0xbe
   1b6e8:	4628      	mov	r0, r5
   1b6ea:	f7fe ff47 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
   1b6ee:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
   1b6f0:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
   1b6f2:	2206      	movs	r2, #6
   1b6f4:	21ff      	movs	r1, #255	; 0xff
   1b6f6:	4628      	mov	r0, r5
   1b6f8:	f7fe ff40 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
   1b6fc:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
   1b6fe:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
   1b700:	2209      	movs	r2, #9
   1b702:	21cc      	movs	r1, #204	; 0xcc
   1b704:	4628      	mov	r0, r5
   1b706:	f7fe ff39 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
   1b70a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
   1b70c:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
   1b70e:	2200      	movs	r2, #0
   1b710:	21ff      	movs	r1, #255	; 0xff
   1b712:	4628      	mov	r0, r5
   1b714:	f7fe ff32 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
   1b718:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
   1b71a:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
   1b71c:	2201      	movs	r2, #1
   1b71e:	21ff      	movs	r1, #255	; 0xff
   1b720:	4628      	mov	r0, r5
   1b722:	f7fe ff2b 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
   1b726:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1b728:	2200      	movs	r2, #0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
   1b72a:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1b72c:	4611      	mov	r1, r2
   1b72e:	4628      	mov	r0, r5
   1b730:	f7fe ff24 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
   1b734:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1b736:	4320      	orrs	r0, r4
   1b738:	b240      	sxtb	r0, r0
}
   1b73a:	bd70      	pop	{r4, r5, r6, pc}
			switch (Functionality) {
   1b73c:	2a04      	cmp	r2, #4
   1b73e:	d817      	bhi.n	1b770 <VL53L0X_SetGpioConfig.part.0+0x110>
			Status = VL53L0X_WrByte(Dev,
   1b740:	210a      	movs	r1, #10
   1b742:	f7fe ff1b 	bl	1a57c <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
   1b746:	2800      	cmp	r0, #0
   1b748:	d1f7      	bne.n	1b73a <VL53L0X_SetGpioConfig.part.0+0xda>
				data = (uint8_t)(1 << 4);
   1b74a:	2e00      	cmp	r6, #0
			Status = VL53L0X_UpdateByte(Dev,
   1b74c:	bf0c      	ite	eq
   1b74e:	4633      	moveq	r3, r6
   1b750:	2310      	movne	r3, #16
   1b752:	22ef      	movs	r2, #239	; 0xef
   1b754:	2184      	movs	r1, #132	; 0x84
   1b756:	4628      	mov	r0, r5
   1b758:	f7fe ff5f 	bl	1a61a <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
   1b75c:	2800      	cmp	r0, #0
   1b75e:	d1ec      	bne.n	1b73a <VL53L0X_SetGpioConfig.part.0+0xda>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
   1b760:	f885 40da 	strb.w	r4, [r5, #218]	; 0xda
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
   1b764:	4601      	mov	r1, r0
   1b766:	4628      	mov	r0, r5
}
   1b768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
   1b76c:	f7ff bf38 	b.w	1b5e0 <VL53L0X_ClearInterruptMask>
				Status =
   1b770:	f06f 000a 	mvn.w	r0, #10
   1b774:	e7e1      	b.n	1b73a <VL53L0X_SetGpioConfig.part.0+0xda>

0001b776 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
   1b776:	b513      	push	{r0, r1, r4, lr}
   1b778:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
   1b77a:	f10d 0207 	add.w	r2, sp, #7
   1b77e:	2113      	movs	r1, #19
   1b780:	f7fe ff29 	bl	1a5d6 <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
   1b784:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if (Byte & 0x18)
		Status = VL53L0X_ERROR_RANGE_ERROR;
   1b788:	f013 0f18 	tst.w	r3, #24
	*pInterruptMaskStatus = Byte & 0x07;
   1b78c:	f003 0207 	and.w	r2, r3, #7

	LOG_FUNCTION_END(Status);
	return Status;
}
   1b790:	bf18      	it	ne
   1b792:	f06f 0005 	mvnne.w	r0, #5
	*pInterruptMaskStatus = Byte & 0x07;
   1b796:	6022      	str	r2, [r4, #0]
}
   1b798:	b002      	add	sp, #8
   1b79a:	bd10      	pop	{r4, pc}

0001b79c <VL53L0X_GetMeasurementDataReady>:
{
   1b79c:	b513      	push	{r0, r1, r4, lr}
	if (InterruptConfig ==
   1b79e:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
   1b7a2:	2b04      	cmp	r3, #4
{
   1b7a4:	460c      	mov	r4, r1
	if (InterruptConfig ==
   1b7a6:	d10b      	bne.n	1b7c0 <VL53L0X_GetMeasurementDataReady+0x24>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
   1b7a8:	a901      	add	r1, sp, #4
   1b7aa:	f7ff ffe4 	bl	1b776 <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
   1b7ae:	9b01      	ldr	r3, [sp, #4]
   1b7b0:	2b04      	cmp	r3, #4
   1b7b2:	d101      	bne.n	1b7b8 <VL53L0X_GetMeasurementDataReady+0x1c>
				*pMeasurementDataReady = 1;
   1b7b4:	2301      	movs	r3, #1
   1b7b6:	e000      	b.n	1b7ba <VL53L0X_GetMeasurementDataReady+0x1e>
			*pMeasurementDataReady = 0;
   1b7b8:	2300      	movs	r3, #0
   1b7ba:	7023      	strb	r3, [r4, #0]
}
   1b7bc:	b002      	add	sp, #8
   1b7be:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
   1b7c0:	aa01      	add	r2, sp, #4
   1b7c2:	2114      	movs	r1, #20
   1b7c4:	f7fe ff07 	bl	1a5d6 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
   1b7c8:	2800      	cmp	r0, #0
   1b7ca:	d1f7      	bne.n	1b7bc <VL53L0X_GetMeasurementDataReady+0x20>
			if (SysRangeStatusRegister & 0x01)
   1b7cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1b7d0:	07db      	lsls	r3, r3, #31
   1b7d2:	d4ef      	bmi.n	1b7b4 <VL53L0X_GetMeasurementDataReady+0x18>
				*pMeasurementDataReady = 0;
   1b7d4:	7020      	strb	r0, [r4, #0]
   1b7d6:	e7f1      	b.n	1b7bc <VL53L0X_GetMeasurementDataReady+0x20>

0001b7d8 <VL53L0X_PerformRefSpadManagement>:
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
   1b7d8:	f000 ba40 	b.w	1bc5c <VL53L0X_perform_ref_spad_management>

0001b7dc <VL53L0X_get_offset_calibration_data_micro_meter>:
{
   1b7dc:	b513      	push	{r0, r1, r4, lr}
   1b7de:	460c      	mov	r4, r1
	Status = VL53L0X_RdWord(Dev,
   1b7e0:	f10d 0206 	add.w	r2, sp, #6
   1b7e4:	2128      	movs	r1, #40	; 0x28
   1b7e6:	f7fe ff32 	bl	1a64e <VL53L0X_RdWord>
	if (Status == VL53L0X_ERROR_NONE) {
   1b7ea:	b978      	cbnz	r0, 1b80c <VL53L0X_get_offset_calibration_data_micro_meter+0x30>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
   1b7ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1b7f0:	f3c2 030b 	ubfx	r3, r2, #0, #12
		if (RangeOffsetRegister > cMaxOffset)
   1b7f4:	f412 6f00 	tst.w	r2, #2048	; 0x800
				(int16_t)(RangeOffsetRegister - cOffsetRange)
   1b7f8:	bf18      	it	ne
   1b7fa:	f5a3 5380 	subne.w	r3, r3, #4096	; 0x1000
   1b7fe:	f04f 02fa 	mov.w	r2, #250	; 0xfa
					* 250;
   1b802:	bf14      	ite	ne
   1b804:	fb13 f302 	smulbbne	r3, r3, r2
				(int16_t)RangeOffsetRegister * 250;
   1b808:	4353      	muleq	r3, r2
			*pOffsetCalibrationDataMicroMeter =
   1b80a:	6023      	str	r3, [r4, #0]
}
   1b80c:	b002      	add	sp, #8
   1b80e:	bd10      	pop	{r4, pc}

0001b810 <get_next_good_spad>:
{
   1b810:	b5f0      	push	{r4, r5, r6, r7, lr}
	startIndex = curr / cSpadsPerByte;
   1b812:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
	*next = -1;
   1b816:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1b81a:	601c      	str	r4, [r3, #0]
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
   1b81c:	4666      	mov	r6, ip
	fineOffset = curr % cSpadsPerByte;
   1b81e:	f002 0407 	and.w	r4, r2, #7
	uint8_t success = 0;
   1b822:	2700      	movs	r7, #0
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
   1b824:	428e      	cmp	r6, r1
   1b826:	d200      	bcs.n	1b82a <get_next_good_spad+0x1a>
   1b828:	b107      	cbz	r7, 1b82c <get_next_good_spad+0x1c>
}
   1b82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dataByte = goodSpadArray[coarseIndex];
   1b82c:	5d82      	ldrb	r2, [r0, r6]
		if (coarseIndex == startIndex) {
   1b82e:	4566      	cmp	r6, ip
			dataByte >>= fineOffset;
   1b830:	bf03      	ittte	eq
   1b832:	4122      	asreq	r2, r4
   1b834:	b2d2      	uxtbeq	r2, r2
			fineIndex = fineOffset;
   1b836:	4625      	moveq	r5, r4
		fineIndex = 0;
   1b838:	463d      	movne	r5, r7
			if ((dataByte & 0x1) == 1) {
   1b83a:	f012 0701 	ands.w	r7, r2, #1
   1b83e:	d004      	beq.n	1b84a <get_next_good_spad+0x3a>
				*next = coarseIndex * cSpadsPerByte + fineIndex;
   1b840:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   1b844:	601d      	str	r5, [r3, #0]
				coarseIndex++) {
   1b846:	3601      	adds	r6, #1
   1b848:	e7ec      	b.n	1b824 <get_next_good_spad+0x14>
			fineIndex++;
   1b84a:	3501      	adds	r5, #1
		while (fineIndex < cSpadsPerByte) {
   1b84c:	2d08      	cmp	r5, #8
			dataByte >>= 1;
   1b84e:	ea4f 0252 	mov.w	r2, r2, lsr #1
		while (fineIndex < cSpadsPerByte) {
   1b852:	d1f2      	bne.n	1b83a <get_next_good_spad+0x2a>
   1b854:	e7f7      	b.n	1b846 <get_next_good_spad+0x36>

0001b856 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
   1b856:	b530      	push	{r4, r5, lr}
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
   1b858:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
	coarseIndex = spadIndex / cSpadsPerByte;
   1b85c:	ea4f 04d2 	mov.w	r4, r2, lsr #3
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
   1b860:	bf88      	it	hi
   1b862:	2301      	movhi	r3, #1
	fineIndex = spadIndex % cSpadsPerByte;
   1b864:	f002 0507 	and.w	r5, r2, #7
		spadArray[coarseIndex] |= (1 << fineIndex);
   1b868:	bf81      	itttt	hi
   1b86a:	fa03 f205 	lslhi.w	r2, r3, r5
   1b86e:	5d03      	ldrbhi	r3, [r0, r4]
   1b870:	4313      	orrhi	r3, r2
   1b872:	5503      	strbhi	r3, [r0, r4]
		status = VL53L0X_ERROR_REF_SPAD_INIT;
   1b874:	bf94      	ite	ls
   1b876:	f06f 0031 	mvnls.w	r0, #49	; 0x31
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
   1b87a:	2000      	movhi	r0, #0

	return status;
}
   1b87c:	bd30      	pop	{r4, r5, pc}

0001b87e <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
   1b87e:	460a      	mov	r2, r1
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
   1b880:	2306      	movs	r3, #6
   1b882:	21b0      	movs	r1, #176	; 0xb0
   1b884:	f7fe be48 	b.w	1a518 <VL53L0X_WriteMulti>

0001b888 <get_ref_spad_map>:
				refSpadArray, 6);
	return status;
}

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
   1b888:	460a      	mov	r2, r1
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
   1b88a:	2306      	movs	r3, #6
   1b88c:	21b0      	movs	r1, #176	; 0xb0
   1b88e:	f7fe be63 	b.w	1a558 <VL53L0X_ReadMulti>

0001b892 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
   1b892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b896:	b085      	sub	sp, #20
   1b898:	4680      	mov	r8, r0
   1b89a:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1b89c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
   1b89e:	9601      	str	r6, [sp, #4]
{
   1b8a0:	468a      	mov	sl, r1
   1b8a2:	4693      	mov	fp, r2
   1b8a4:	461c      	mov	r4, r3
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
   1b8a6:	f04f 0900 	mov.w	r9, #0
   1b8aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b8ac:	4599      	cmp	r9, r3
   1b8ae:	d113      	bne.n	1b8d8 <enable_ref_spads+0x46>
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
   1b8b0:	2000      	movs	r0, #0
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
   1b8b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b8b4:	601e      	str	r6, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
   1b8b6:	b960      	cbnz	r0, 1b8d2 <enable_ref_spads+0x40>
		status = set_ref_spad_map(Dev, spadArray);
   1b8b8:	4621      	mov	r1, r4
   1b8ba:	4640      	mov	r0, r8
   1b8bc:	f7ff ffdf 	bl	1b87e <set_ref_spad_map>


	if (status == VL53L0X_ERROR_NONE) {
   1b8c0:	b938      	cbnz	r0, 1b8d2 <enable_ref_spads+0x40>
		status = get_ref_spad_map(Dev, checkSpadArray);
   1b8c2:	a902      	add	r1, sp, #8
   1b8c4:	4640      	mov	r0, r8
   1b8c6:	f7ff ffdf 	bl	1b888 <get_ref_spad_map>

		i = 0;

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
   1b8ca:	4425      	add	r5, r4
   1b8cc:	ab02      	add	r3, sp, #8
   1b8ce:	42ac      	cmp	r4, r5
   1b8d0:	d11c      	bne.n	1b90c <enable_ref_spads+0x7a>
			}
			i++;
		}
	}
	return status;
}
   1b8d2:	b005      	add	sp, #20
   1b8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		get_next_good_spad(goodSpadArray, size, currentSpad,
   1b8d8:	ab01      	add	r3, sp, #4
   1b8da:	4632      	mov	r2, r6
   1b8dc:	4629      	mov	r1, r5
   1b8de:	4658      	mov	r0, fp
   1b8e0:	f7ff ff96 	bl	1b810 <get_next_good_spad>
		if (nextGoodSpad == -1) {
   1b8e4:	9f01      	ldr	r7, [sp, #4]
   1b8e6:	1c7b      	adds	r3, r7, #1
   1b8e8:	d00d      	beq.n	1b906 <enable_ref_spads+0x74>
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
   1b8ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b8ec:	18f8      	adds	r0, r7, r3
   1b8ee:	f7fc f973 	bl	17bd8 <is_aperture>
   1b8f2:	4550      	cmp	r0, sl
   1b8f4:	d107      	bne.n	1b906 <enable_ref_spads+0x74>
		enable_spad_bit(spadArray, size, currentSpad);
   1b8f6:	463a      	mov	r2, r7
   1b8f8:	4620      	mov	r0, r4
   1b8fa:	f7ff ffac 	bl	1b856 <enable_spad_bit>
		currentSpad++;
   1b8fe:	1c7e      	adds	r6, r7, #1
	for (index = 0; index < spadCount; index++) {
   1b900:	f109 0901 	add.w	r9, r9, #1
   1b904:	e7d1      	b.n	1b8aa <enable_ref_spads+0x18>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
   1b906:	f06f 0031 	mvn.w	r0, #49	; 0x31
   1b90a:	e7d2      	b.n	1b8b2 <enable_ref_spads+0x20>
			if (spadArray[i] != checkSpadArray[i]) {
   1b90c:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b910:	f813 2b01 	ldrb.w	r2, [r3], #1
   1b914:	4291      	cmp	r1, r2
   1b916:	d0da      	beq.n	1b8ce <enable_ref_spads+0x3c>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
   1b918:	f06f 0031 	mvn.w	r0, #49	; 0x31
   1b91c:	e7d9      	b.n	1b8d2 <enable_ref_spads+0x40>

0001b91e <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
   1b91e:	b570      	push	{r4, r5, r6, lr}

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
   1b920:	22c0      	movs	r2, #192	; 0xc0
{
   1b922:	b088      	sub	sp, #32
   1b924:	460e      	mov	r6, r1
		status = VL53L0X_WrByte(Dev,
   1b926:	2101      	movs	r1, #1
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
   1b928:	f890 4130 	ldrb.w	r4, [r0, #304]	; 0x130
{
   1b92c:	4605      	mov	r5, r0
		status = VL53L0X_WrByte(Dev,
   1b92e:	f7fe fe25 	bl	1a57c <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
   1b932:	b9f0      	cbnz	r0, 1b972 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
   1b934:	a901      	add	r1, sp, #4
   1b936:	4628      	mov	r0, r5
   1b938:	f7ff fe7e 	bl	1b638 <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
   1b93c:	b9c8      	cbnz	r0, 1b972 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1b93e:	2201      	movs	r2, #1
   1b940:	21ff      	movs	r1, #255	; 0xff
   1b942:	4628      	mov	r0, r5
   1b944:	f7fe fe1a 	bl	1a57c <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
   1b948:	b998      	cbnz	r0, 1b972 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_RdWord(Dev,
   1b94a:	4632      	mov	r2, r6
   1b94c:	21b6      	movs	r1, #182	; 0xb6
   1b94e:	4628      	mov	r0, r5
   1b950:	f7fe fe7d 	bl	1a64e <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
   1b954:	b968      	cbnz	r0, 1b972 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
   1b956:	4602      	mov	r2, r0
   1b958:	21ff      	movs	r1, #255	; 0xff
   1b95a:	4628      	mov	r0, r5
   1b95c:	f7fe fe0e 	bl	1a57c <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
   1b960:	b938      	cbnz	r0, 1b972 <perform_ref_signal_measurement+0x54>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
   1b962:	4622      	mov	r2, r4
   1b964:	2101      	movs	r1, #1
   1b966:	4628      	mov	r0, r5
   1b968:	f7fe fe08 	bl	1a57c <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
   1b96c:	b908      	cbnz	r0, 1b972 <perform_ref_signal_measurement+0x54>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
   1b96e:	f885 4130 	strb.w	r4, [r5, #304]	; 0x130
	}

	return status;
}
   1b972:	b008      	add	sp, #32
   1b974:	bd70      	pop	{r4, r5, r6, pc}

0001b976 <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
   1b976:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b978:	460f      	mov	r7, r1
   1b97a:	b089      	sub	sp, #36	; 0x24
   1b97c:	4616      	mov	r6, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1b97e:	21ff      	movs	r1, #255	; 0xff
   1b980:	2201      	movs	r2, #1
{
   1b982:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1b984:	f7fe fdfa 	bl	1a57c <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
   1b988:	4602      	mov	r2, r0
   1b98a:	b9a8      	cbnz	r0, 1b9b8 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
   1b98c:	214f      	movs	r1, #79	; 0x4f
   1b98e:	4620      	mov	r0, r4
   1b990:	f7fe fdf4 	bl	1a57c <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
   1b994:	b980      	cbnz	r0, 1b9b8 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
   1b996:	222c      	movs	r2, #44	; 0x2c
   1b998:	214e      	movs	r1, #78	; 0x4e
   1b99a:	4620      	mov	r0, r4
   1b99c:	f7fe fdee 	bl	1a57c <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
   1b9a0:	4602      	mov	r2, r0
   1b9a2:	b948      	cbnz	r0, 1b9b8 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
   1b9a4:	21ff      	movs	r1, #255	; 0xff
   1b9a6:	4620      	mov	r0, r4
   1b9a8:	f7fe fde8 	bl	1a57c <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
   1b9ac:	b920      	cbnz	r0, 1b9b8 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
   1b9ae:	22b4      	movs	r2, #180	; 0xb4
   1b9b0:	21b6      	movs	r1, #182	; 0xb6
   1b9b2:	4620      	mov	r0, r4
   1b9b4:	f7fe fde2 	bl	1a57c <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
   1b9b8:	2500      	movs	r5, #0
   1b9ba:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1b9be:	f8a4 5128 	strh.w	r5, [r4, #296]	; 0x128

	if (isApertureSpads) {
   1b9c2:	b9de      	cbnz	r6, 1b9fc <VL53L0X_set_reference_spads+0x86>
	uint32_t currentSpadIndex = 0;
   1b9c4:	4635      	mov	r5, r6
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
   1b9c6:	ab07      	add	r3, sp, #28
   1b9c8:	22b4      	movs	r2, #180	; 0xb4
   1b9ca:	e9cd 7303 	strd	r7, r3, [sp, #12]
   1b9ce:	2306      	movs	r3, #6
   1b9d0:	e9cd 3200 	strd	r3, r2, [sp]
   1b9d4:	9502      	str	r5, [sp, #8]
   1b9d6:	f504 7392 	add.w	r3, r4, #292	; 0x124
   1b9da:	f504 7295 	add.w	r2, r4, #298	; 0x12a
   1b9de:	4631      	mov	r1, r6
   1b9e0:	4620      	mov	r0, r4
   1b9e2:	f7ff ff56 	bl	1b892 <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
   1b9e6:	b930      	cbnz	r0, 1b9f6 <VL53L0X_set_reference_spads+0x80>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
   1b9e8:	2301      	movs	r3, #1
   1b9ea:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
   1b9ee:	f884 7113 	strb.w	r7, [r4, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
   1b9f2:	f884 6114 	strb.w	r6, [r4, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
   1b9f6:	b009      	add	sp, #36	; 0x24
   1b9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			currentSpadIndex++;
   1b9fa:	3501      	adds	r5, #1
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
   1b9fc:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
   1ba00:	f7fc f8ea 	bl	17bd8 <is_aperture>
   1ba04:	2800      	cmp	r0, #0
   1ba06:	d1de      	bne.n	1b9c6 <VL53L0X_set_reference_spads+0x50>
   1ba08:	2d2c      	cmp	r5, #44	; 0x2c
   1ba0a:	d1f6      	bne.n	1b9fa <VL53L0X_set_reference_spads+0x84>
   1ba0c:	e7db      	b.n	1b9c6 <VL53L0X_set_reference_spads+0x50>

0001ba0e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
   1ba0e:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
   1ba10:	f041 0201 	orr.w	r2, r1, #1
   1ba14:	2100      	movs	r1, #0
{
   1ba16:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
   1ba18:	f7fe fdb0 	bl	1a57c <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
   1ba1c:	b978      	cbnz	r0, 1ba3e <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
   1ba1e:	4620      	mov	r0, r4
   1ba20:	f000 fa45 	bl	1beae <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
   1ba24:	b958      	cbnz	r0, 1ba3e <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
   1ba26:	4601      	mov	r1, r0
   1ba28:	4620      	mov	r0, r4
   1ba2a:	f7ff fdd9 	bl	1b5e0 <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
   1ba2e:	b930      	cbnz	r0, 1ba3e <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
   1ba30:	4602      	mov	r2, r0
   1ba32:	4601      	mov	r1, r0
   1ba34:	4620      	mov	r0, r4

	return Status;
}
   1ba36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
   1ba3a:	f7fe bd9f 	b.w	1a57c <VL53L0X_WrByte>
}
   1ba3e:	bd10      	pop	{r4, pc}

0001ba40 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
   1ba40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
   1ba44:	f04f 0b00 	mov.w	fp, #0
{
   1ba48:	4688      	mov	r8, r1
   1ba4a:	4617      	mov	r7, r2

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1ba4c:	21ff      	movs	r1, #255	; 0xff
   1ba4e:	2201      	movs	r2, #1
{
   1ba50:	4605      	mov	r5, r0
   1ba52:	461e      	mov	r6, r3
   1ba54:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   1ba58:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
	uint8_t PhaseCalint = 0;
   1ba5c:	f88d b007 	strb.w	fp, [sp, #7]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1ba60:	f7fe fd8c 	bl	1a57c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1ba64:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1ba66:	4604      	mov	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1ba68:	4659      	mov	r1, fp
   1ba6a:	4628      	mov	r0, r5
   1ba6c:	f7fe fd86 	bl	1a57c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   1ba70:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1ba72:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   1ba74:	21ff      	movs	r1, #255	; 0xff
   1ba76:	4628      	mov	r0, r5
   1ba78:	f7fe fd80 	bl	1a57c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1ba7c:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   1ba7e:	4304      	orrs	r4, r0
   1ba80:	b264      	sxtb	r4, r4

	if (read_not_write) {
   1ba82:	f1b8 0f00 	cmp.w	r8, #0
   1ba86:	d032      	beq.n	1baee <VL53L0X_ref_calibration_io+0xae>
		if (vhv_enable)
   1ba88:	f1ba 0f00 	cmp.w	sl, #0
   1ba8c:	d006      	beq.n	1ba9c <VL53L0X_ref_calibration_io+0x5c>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
   1ba8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ba90:	21cb      	movs	r1, #203	; 0xcb
   1ba92:	4628      	mov	r0, r5
   1ba94:	f7fe fd9f 	bl	1a5d6 <VL53L0X_RdByte>
   1ba98:	4304      	orrs	r4, r0
   1ba9a:	b264      	sxtb	r4, r4
		if (phase_enable)
   1ba9c:	f1b9 0f00 	cmp.w	r9, #0
   1baa0:	d007      	beq.n	1bab2 <VL53L0X_ref_calibration_io+0x72>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
   1baa2:	f10d 0207 	add.w	r2, sp, #7
   1baa6:	21ee      	movs	r1, #238	; 0xee
   1baa8:	4628      	mov	r0, r5
   1baaa:	f7fe fd94 	bl	1a5d6 <VL53L0X_RdByte>
	} else {
		if (vhv_enable)
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
   1baae:	4304      	orrs	r4, r0
   1bab0:	b264      	sxtb	r4, r4
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1bab2:	2201      	movs	r2, #1
   1bab4:	21ff      	movs	r1, #255	; 0xff
   1bab6:	4628      	mov	r0, r5
   1bab8:	f7fe fd60 	bl	1a57c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
   1babc:	2201      	movs	r2, #1
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1babe:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
   1bac0:	2100      	movs	r1, #0
   1bac2:	4628      	mov	r0, r5
   1bac4:	f7fe fd5a 	bl	1a57c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1bac8:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
   1baca:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   1bacc:	2200      	movs	r2, #0
   1bace:	21ff      	movs	r1, #255	; 0xff
   1bad0:	4628      	mov	r0, r5
   1bad2:	f7fe fd53 	bl	1a57c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
   1bad6:	b264      	sxtb	r4, r4

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
   1bad8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1badc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   1bade:	4320      	orrs	r0, r4
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
   1bae0:	f023 0310 	bic.w	r3, r3, #16

	return Status;
}
   1bae4:	b240      	sxtb	r0, r0
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
   1bae6:	7013      	strb	r3, [r2, #0]
}
   1bae8:	b003      	add	sp, #12
   1baea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (vhv_enable)
   1baee:	f1ba 0f00 	cmp.w	sl, #0
   1baf2:	d006      	beq.n	1bb02 <VL53L0X_ref_calibration_io+0xc2>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
   1baf4:	463a      	mov	r2, r7
   1baf6:	21cb      	movs	r1, #203	; 0xcb
   1baf8:	4628      	mov	r0, r5
   1bafa:	f7fe fd3f 	bl	1a57c <VL53L0X_WrByte>
   1bafe:	4304      	orrs	r4, r0
   1bb00:	b264      	sxtb	r4, r4
		if (phase_enable)
   1bb02:	f1b9 0f00 	cmp.w	r9, #0
   1bb06:	d0d4      	beq.n	1bab2 <VL53L0X_ref_calibration_io+0x72>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
   1bb08:	4633      	mov	r3, r6
   1bb0a:	2280      	movs	r2, #128	; 0x80
   1bb0c:	21ee      	movs	r1, #238	; 0xee
   1bb0e:	4628      	mov	r0, r5
   1bb10:	f7fe fd83 	bl	1a61a <VL53L0X_UpdateByte>
   1bb14:	e7cb      	b.n	1baae <VL53L0X_ref_calibration_io+0x6e>

0001bb16 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
   1bb16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bb1a:	b087      	sub	sp, #28
   1bb1c:	4691      	mov	r9, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
   1bb1e:	2200      	movs	r2, #0
{
   1bb20:	4605      	mov	r5, r0
   1bb22:	4688      	mov	r8, r1
	uint8_t PhaseCalInt = 0;
   1bb24:	f88d 2017 	strb.w	r2, [sp, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
   1bb28:	461e      	mov	r6, r3
   1bb2a:	b31b      	cbz	r3, 1bb74 <VL53L0X_perform_vhv_calibration+0x5e>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
   1bb2c:	f890 7130 	ldrb.w	r7, [r0, #304]	; 0x130

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
   1bb30:	2201      	movs	r2, #1
   1bb32:	4611      	mov	r1, r2
   1bb34:	4628      	mov	r0, r5
   1bb36:	f7fe fd21 	bl	1a57c <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
   1bb3a:	4604      	mov	r4, r0
   1bb3c:	bb58      	cbnz	r0, 1bb96 <VL53L0X_perform_vhv_calibration+0x80>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
   1bb3e:	2140      	movs	r1, #64	; 0x40
   1bb40:	4628      	mov	r0, r5
   1bb42:	f7ff ff64 	bl	1ba0e <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
   1bb46:	4604      	mov	r4, r0
   1bb48:	bb28      	cbnz	r0, 1bb96 <VL53L0X_perform_vhv_calibration+0x80>
   1bb4a:	f1b9 0f01 	cmp.w	r9, #1
   1bb4e:	d113      	bne.n	1bb78 <VL53L0X_perform_vhv_calibration+0x62>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
   1bb50:	f10d 0317 	add.w	r3, sp, #23
   1bb54:	e9cd 9002 	strd	r9, r0, [sp, #8]
   1bb58:	e9cd 8300 	strd	r8, r3, [sp]
   1bb5c:	4602      	mov	r2, r0
   1bb5e:	4603      	mov	r3, r0
   1bb60:	4649      	mov	r1, r9
   1bb62:	4628      	mov	r0, r5
   1bb64:	f7ff ff6c 	bl	1ba40 <VL53L0X_ref_calibration_io>
			1, 0);
	} else
		*pVhvSettings = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
   1bb68:	b140      	cbz	r0, 1bb7c <VL53L0X_perform_vhv_calibration+0x66>
		*pVhvSettings = 0;
   1bb6a:	4604      	mov	r4, r0
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
   1bb6c:	4620      	mov	r0, r4
   1bb6e:	b007      	add	sp, #28
   1bb70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t SequenceConfig = 0;
   1bb74:	461f      	mov	r7, r3
   1bb76:	e7db      	b.n	1bb30 <VL53L0X_perform_vhv_calibration+0x1a>
		*pVhvSettings = 0;
   1bb78:	f888 0000 	strb.w	r0, [r8]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
   1bb7c:	2e00      	cmp	r6, #0
   1bb7e:	d0f5      	beq.n	1bb6c <VL53L0X_perform_vhv_calibration+0x56>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
   1bb80:	463a      	mov	r2, r7
   1bb82:	2101      	movs	r1, #1
   1bb84:	4628      	mov	r0, r5
   1bb86:	f7fe fcf9 	bl	1a57c <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
   1bb8a:	4604      	mov	r4, r0
   1bb8c:	2800      	cmp	r0, #0
   1bb8e:	d1ed      	bne.n	1bb6c <VL53L0X_perform_vhv_calibration+0x56>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
   1bb90:	f885 7130 	strb.w	r7, [r5, #304]	; 0x130
   1bb94:	e7ea      	b.n	1bb6c <VL53L0X_perform_vhv_calibration+0x56>
		*pVhvSettings = 0;
   1bb96:	2300      	movs	r3, #0
   1bb98:	f888 3000 	strb.w	r3, [r8]
   1bb9c:	4620      	mov	r0, r4
   1bb9e:	e7e4      	b.n	1bb6a <VL53L0X_perform_vhv_calibration+0x54>

0001bba0 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
   1bba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bba4:	4605      	mov	r5, r0
   1bba6:	b087      	sub	sp, #28
   1bba8:	4688      	mov	r8, r1
   1bbaa:	4691      	mov	r9, r2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
   1bbac:	461e      	mov	r6, r3
   1bbae:	b323      	cbz	r3, 1bbfa <VL53L0X_perform_phase_calibration+0x5a>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
   1bbb0:	f890 7130 	ldrb.w	r7, [r0, #304]	; 0x130

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
   1bbb4:	2202      	movs	r2, #2
   1bbb6:	2101      	movs	r1, #1
   1bbb8:	4628      	mov	r0, r5
   1bbba:	f7fe fcdf 	bl	1a57c <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
   1bbbe:	4604      	mov	r4, r0
   1bbc0:	bb60      	cbnz	r0, 1bc1c <VL53L0X_perform_phase_calibration+0x7c>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
   1bbc2:	4601      	mov	r1, r0
   1bbc4:	4628      	mov	r0, r5
   1bbc6:	f7ff ff22 	bl	1ba0e <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
   1bbca:	4604      	mov	r4, r0
   1bbcc:	bb30      	cbnz	r0, 1bc1c <VL53L0X_perform_phase_calibration+0x7c>
   1bbce:	f1b9 0f01 	cmp.w	r9, #1
   1bbd2:	d114      	bne.n	1bbfe <VL53L0X_perform_phase_calibration+0x5e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
   1bbd4:	f10d 0317 	add.w	r3, sp, #23
   1bbd8:	e9cd 0902 	strd	r0, r9, [sp, #8]
   1bbdc:	9300      	str	r3, [sp, #0]
   1bbde:	4602      	mov	r2, r0
   1bbe0:	4603      	mov	r3, r0
   1bbe2:	f8cd 8004 	str.w	r8, [sp, #4]
   1bbe6:	4649      	mov	r1, r9
   1bbe8:	4628      	mov	r0, r5
   1bbea:	f7ff ff29 	bl	1ba40 <VL53L0X_ref_calibration_io>
			0, 1);
	} else
		*pPhaseCal = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
   1bbee:	b140      	cbz	r0, 1bc02 <VL53L0X_perform_phase_calibration+0x62>
		*pPhaseCal = 0;
   1bbf0:	4604      	mov	r4, r0
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
   1bbf2:	4620      	mov	r0, r4
   1bbf4:	b007      	add	sp, #28
   1bbf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t SequenceConfig = 0;
   1bbfa:	461f      	mov	r7, r3
   1bbfc:	e7da      	b.n	1bbb4 <VL53L0X_perform_phase_calibration+0x14>
		*pPhaseCal = 0;
   1bbfe:	f888 0000 	strb.w	r0, [r8]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
   1bc02:	2e00      	cmp	r6, #0
   1bc04:	d0f5      	beq.n	1bbf2 <VL53L0X_perform_phase_calibration+0x52>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
   1bc06:	463a      	mov	r2, r7
   1bc08:	2101      	movs	r1, #1
   1bc0a:	4628      	mov	r0, r5
   1bc0c:	f7fe fcb6 	bl	1a57c <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
   1bc10:	4604      	mov	r4, r0
   1bc12:	2800      	cmp	r0, #0
   1bc14:	d1ed      	bne.n	1bbf2 <VL53L0X_perform_phase_calibration+0x52>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
   1bc16:	f885 7130 	strb.w	r7, [r5, #304]	; 0x130
   1bc1a:	e7ea      	b.n	1bbf2 <VL53L0X_perform_phase_calibration+0x52>
		*pPhaseCal = 0;
   1bc1c:	2300      	movs	r3, #0
   1bc1e:	f888 3000 	strb.w	r3, [r8]
   1bc22:	4620      	mov	r0, r4
   1bc24:	e7e4      	b.n	1bbf0 <VL53L0X_perform_phase_calibration+0x50>

0001bc26 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
   1bc26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc28:	461d      	mov	r5, r3
   1bc2a:	4616      	mov	r6, r2

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
   1bc2c:	2300      	movs	r3, #0
   1bc2e:	462a      	mov	r2, r5
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
   1bc30:	f890 7130 	ldrb.w	r7, [r0, #304]	; 0x130
{
   1bc34:	4604      	mov	r4, r0
	Status = VL53L0X_perform_vhv_calibration(
   1bc36:	f7ff ff6e 	bl	1bb16 <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
   1bc3a:	b970      	cbnz	r0, 1bc5a <VL53L0X_perform_ref_calibration+0x34>
		Status = VL53L0X_perform_phase_calibration(
   1bc3c:	4603      	mov	r3, r0
   1bc3e:	462a      	mov	r2, r5
   1bc40:	4631      	mov	r1, r6
   1bc42:	4620      	mov	r0, r4
   1bc44:	f7ff ffac 	bl	1bba0 <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
   1bc48:	b938      	cbnz	r0, 1bc5a <VL53L0X_perform_ref_calibration+0x34>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
   1bc4a:	463a      	mov	r2, r7
   1bc4c:	2101      	movs	r1, #1
   1bc4e:	4620      	mov	r0, r4
   1bc50:	f7fe fc94 	bl	1a57c <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
   1bc54:	b908      	cbnz	r0, 1bc5a <VL53L0X_perform_ref_calibration+0x34>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
   1bc56:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130

	}

	return Status;
}
   1bc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bc5c <VL53L0X_perform_ref_spad_management>:
{
   1bc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t lastSpadIndex = 0;
   1bc60:	2300      	movs	r3, #0
{
   1bc62:	b093      	sub	sp, #76	; 0x4c
   1bc64:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
   1bc68:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1bc6c:	f8a0 3128 	strh.w	r3, [r0, #296]	; 0x128
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1bc70:	2201      	movs	r2, #1
   1bc72:	21ff      	movs	r1, #255	; 0xff
	int32_t nextGoodSpad = 0;
   1bc74:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
   1bc78:	f8b0 913c 	ldrh.w	r9, [r0, #316]	; 0x13c
	uint8_t VhvSettings = 0;
   1bc7c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
{
   1bc80:	4605      	mov	r5, r0
	uint8_t PhaseCal = 0;
   1bc82:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1bc86:	f7fe fc79 	bl	1a57c <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
   1bc8a:	4604      	mov	r4, r0
   1bc8c:	2800      	cmp	r0, #0
   1bc8e:	f040 80e1 	bne.w	1be54 <VL53L0X_perform_ref_spad_management+0x1f8>
		Status = VL53L0X_WrByte(Dev,
   1bc92:	4602      	mov	r2, r0
   1bc94:	214f      	movs	r1, #79	; 0x4f
   1bc96:	4628      	mov	r0, r5
   1bc98:	f7fe fc70 	bl	1a57c <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
   1bc9c:	4604      	mov	r4, r0
   1bc9e:	2800      	cmp	r0, #0
   1bca0:	f040 80d8 	bne.w	1be54 <VL53L0X_perform_ref_spad_management+0x1f8>
		Status = VL53L0X_WrByte(Dev,
   1bca4:	222c      	movs	r2, #44	; 0x2c
   1bca6:	214e      	movs	r1, #78	; 0x4e
   1bca8:	4628      	mov	r0, r5
   1bcaa:	f7fe fc67 	bl	1a57c <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
   1bcae:	4604      	mov	r4, r0
   1bcb0:	2800      	cmp	r0, #0
   1bcb2:	f040 80cf 	bne.w	1be54 <VL53L0X_perform_ref_spad_management+0x1f8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
   1bcb6:	4602      	mov	r2, r0
   1bcb8:	21ff      	movs	r1, #255	; 0xff
   1bcba:	4628      	mov	r0, r5
   1bcbc:	f7fe fc5e 	bl	1a57c <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
   1bcc0:	4604      	mov	r4, r0
   1bcc2:	2800      	cmp	r0, #0
   1bcc4:	f040 80c6 	bne.w	1be54 <VL53L0X_perform_ref_spad_management+0x1f8>
		Status = VL53L0X_WrByte(Dev,
   1bcc8:	22b4      	movs	r2, #180	; 0xb4
   1bcca:	21b6      	movs	r1, #182	; 0xb6
   1bccc:	4628      	mov	r0, r5
   1bcce:	f7fe fc55 	bl	1a57c <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
   1bcd2:	4604      	mov	r4, r0
   1bcd4:	2800      	cmp	r0, #0
   1bcd6:	f040 80bd 	bne.w	1be54 <VL53L0X_perform_ref_spad_management+0x1f8>
		Status = VL53L0X_WrByte(Dev,
   1bcda:	4602      	mov	r2, r0
   1bcdc:	2180      	movs	r1, #128	; 0x80
   1bcde:	4628      	mov	r0, r5
   1bce0:	f7fe fc4c 	bl	1a57c <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
   1bce4:	4604      	mov	r4, r0
   1bce6:	2800      	cmp	r0, #0
   1bce8:	f040 80b4 	bne.w	1be54 <VL53L0X_perform_ref_spad_management+0x1f8>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
   1bcec:	4603      	mov	r3, r0
   1bcee:	f10d 0235 	add.w	r2, sp, #53	; 0x35
   1bcf2:	a90d      	add	r1, sp, #52	; 0x34
   1bcf4:	4628      	mov	r0, r5
   1bcf6:	f7ff ff96 	bl	1bc26 <VL53L0X_perform_ref_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
   1bcfa:	4604      	mov	r4, r0
   1bcfc:	2800      	cmp	r0, #0
   1bcfe:	f040 80a9 	bne.w	1be54 <VL53L0X_perform_ref_spad_management+0x1f8>
		Status = enable_ref_spads(Dev,
   1bd02:	2303      	movs	r3, #3
   1bd04:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1bd08:	21b4      	movs	r1, #180	; 0xb4
   1bd0a:	2306      	movs	r3, #6
					Dev->Data.SpadData.RefGoodSpadMap,
   1bd0c:	f505 7a95 	add.w	sl, r5, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
   1bd10:	f505 7892 	add.w	r8, r5, #292	; 0x124
		Status = enable_ref_spads(Dev,
   1bd14:	ae0e      	add	r6, sp, #56	; 0x38
   1bd16:	e9cd 3100 	strd	r3, r1, [sp]
		lastSpadIndex = currentSpadIndex;
   1bd1a:	900e      	str	r0, [sp, #56]	; 0x38
		Status = enable_ref_spads(Dev,
   1bd1c:	4601      	mov	r1, r0
   1bd1e:	9604      	str	r6, [sp, #16]
   1bd20:	4643      	mov	r3, r8
   1bd22:	4652      	mov	r2, sl
   1bd24:	4628      	mov	r0, r5
   1bd26:	f7ff fdb4 	bl	1b892 <enable_ref_spads>
	if (Status == VL53L0X_ERROR_NONE) {
   1bd2a:	4604      	mov	r4, r0
   1bd2c:	2800      	cmp	r0, #0
   1bd2e:	f040 8091 	bne.w	1be54 <VL53L0X_perform_ref_spad_management+0x1f8>
		Status = perform_ref_signal_measurement(Dev,
   1bd32:	f10d 0136 	add.w	r1, sp, #54	; 0x36
   1bd36:	4628      	mov	r0, r5
		currentSpadIndex = lastSpadIndex;
   1bd38:	9f0e      	ldr	r7, [sp, #56]	; 0x38
		Status = perform_ref_signal_measurement(Dev,
   1bd3a:	f7ff fdf0 	bl	1b91e <perform_ref_signal_measurement>
		if ((Status == VL53L0X_ERROR_NONE) &&
   1bd3e:	4604      	mov	r4, r0
   1bd40:	2800      	cmp	r0, #0
   1bd42:	f040 8087 	bne.w	1be54 <VL53L0X_perform_ref_spad_management+0x1f8>
   1bd46:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   1bd4a:	454b      	cmp	r3, r9
   1bd4c:	f240 80a8 	bls.w	1bea0 <VL53L0X_perform_ref_spad_management+0x244>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
   1bd50:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
   1bd54:	f8a5 0128 	strh.w	r0, [r5, #296]	; 0x128
			while ((is_aperture(startSelect + currentSpadIndex)
   1bd58:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
   1bd5c:	f7fb ff3c 	bl	17bd8 <is_aperture>
   1bd60:	b188      	cbz	r0, 1bd86 <VL53L0X_perform_ref_spad_management+0x12a>
			Status = enable_ref_spads(Dev,
   1bd62:	2306      	movs	r3, #6
   1bd64:	22b4      	movs	r2, #180	; 0xb4
   1bd66:	f04f 0b03 	mov.w	fp, #3
   1bd6a:	e9cd 3200 	strd	r3, r2, [sp]
   1bd6e:	e9cd 7b02 	strd	r7, fp, [sp, #8]
   1bd72:	9604      	str	r6, [sp, #16]
   1bd74:	4643      	mov	r3, r8
   1bd76:	4652      	mov	r2, sl
   1bd78:	2101      	movs	r1, #1
   1bd7a:	4628      	mov	r0, r5
   1bd7c:	f7ff fd89 	bl	1b892 <enable_ref_spads>
			if (Status == VL53L0X_ERROR_NONE) {
   1bd80:	b128      	cbz	r0, 1bd8e <VL53L0X_perform_ref_spad_management+0x132>
   1bd82:	4604      	mov	r4, r0
	return Status;
   1bd84:	e066      	b.n	1be54 <VL53L0X_perform_ref_spad_management+0x1f8>
				== 0) && (currentSpadIndex < maxSpadCount)) {
   1bd86:	2f2b      	cmp	r7, #43	; 0x2b
   1bd88:	d8eb      	bhi.n	1bd62 <VL53L0X_perform_ref_spad_management+0x106>
				currentSpadIndex++;
   1bd8a:	3701      	adds	r7, #1
   1bd8c:	e7e4      	b.n	1bd58 <VL53L0X_perform_ref_spad_management+0xfc>
				Status = perform_ref_signal_measurement(Dev,
   1bd8e:	f10d 0136 	add.w	r1, sp, #54	; 0x36
   1bd92:	4628      	mov	r0, r5
				currentSpadIndex = lastSpadIndex;
   1bd94:	9f0e      	ldr	r7, [sp, #56]	; 0x38
				Status = perform_ref_signal_measurement(Dev,
   1bd96:	f7ff fdc2 	bl	1b91e <perform_ref_signal_measurement>
				if ((Status == VL53L0X_ERROR_NONE) &&
   1bd9a:	4606      	mov	r6, r0
   1bd9c:	2800      	cmp	r0, #0
   1bd9e:	d17a      	bne.n	1be96 <VL53L0X_perform_ref_spad_management+0x23a>
   1bda0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   1bda4:	454b      	cmp	r3, r9
   1bda6:	d97e      	bls.n	1bea6 <VL53L0X_perform_ref_spad_management+0x24a>
					isApertureSpads_int = 1;
   1bda8:	2601      	movs	r6, #1
			needAptSpads = 0;
   1bdaa:	9607      	str	r6, [sp, #28]
	if ((Status == VL53L0X_ERROR_NONE) &&
   1bdac:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   1bdb0:	454b      	cmp	r3, r9
   1bdb2:	d25f      	bcs.n	1be74 <VL53L0X_perform_ref_spad_management+0x218>
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
   1bdb4:	2206      	movs	r2, #6
   1bdb6:	4641      	mov	r1, r8
   1bdb8:	a810      	add	r0, sp, #64	; 0x40
		isApertureSpads_int = needAptSpads;
   1bdba:	f89d 601c 	ldrb.w	r6, [sp, #28]
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
   1bdbe:	f7fe f8f0 	bl	19fa2 <memcpy>
		lastSignalRateDiff = abs(peakSignalRateRef -
   1bdc2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   1bdc6:	eba3 0309 	sub.w	r3, r3, r9
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
   1bdca:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
   1bdce:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
   1bdd2:	9209      	str	r2, [sp, #36]	; 0x24
		refSpadCount_int	= minimumSpadCount;
   1bdd4:	f04f 0b03 	mov.w	fp, #3
			get_next_good_spad(
   1bdd8:	ab0f      	add	r3, sp, #60	; 0x3c
   1bdda:	463a      	mov	r2, r7
   1bddc:	2106      	movs	r1, #6
   1bdde:	4650      	mov	r0, sl
   1bde0:	f7ff fd16 	bl	1b810 <get_next_good_spad>
			if (nextGoodSpad == -1) {
   1bde4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1bde6:	1c7b      	adds	r3, r7, #1
   1bde8:	d057      	beq.n	1be9a <VL53L0X_perform_ref_spad_management+0x23e>
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
   1bdea:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
   1bdee:	f7fb fef3 	bl	17bd8 <is_aperture>
   1bdf2:	9b07      	ldr	r3, [sp, #28]
   1bdf4:	4298      	cmp	r0, r3
   1bdf6:	d13d      	bne.n	1be74 <VL53L0X_perform_ref_spad_management+0x218>
			(refSpadCount_int)++;
   1bdf8:	f10b 0301 	add.w	r3, fp, #1
			Status = enable_spad_bit(
   1bdfc:	463a      	mov	r2, r7
   1bdfe:	4640      	mov	r0, r8
			(refSpadCount_int)++;
   1be00:	9308      	str	r3, [sp, #32]
			Status = enable_spad_bit(
   1be02:	f7ff fd28 	bl	1b856 <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
   1be06:	2800      	cmp	r0, #0
   1be08:	d1bb      	bne.n	1bd82 <VL53L0X_perform_ref_spad_management+0x126>
				Status = set_ref_spad_map(Dev,
   1be0a:	4641      	mov	r1, r8
   1be0c:	4628      	mov	r0, r5
   1be0e:	f7ff fd36 	bl	1b87e <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
   1be12:	2800      	cmp	r0, #0
   1be14:	d1b5      	bne.n	1bd82 <VL53L0X_perform_ref_spad_management+0x126>
			Status = perform_ref_signal_measurement(Dev,
   1be16:	f10d 0136 	add.w	r1, sp, #54	; 0x36
   1be1a:	4628      	mov	r0, r5
   1be1c:	f7ff fd7f 	bl	1b91e <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
   1be20:	2800      	cmp	r0, #0
   1be22:	d1ae      	bne.n	1bd82 <VL53L0X_perform_ref_spad_management+0x126>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
   1be24:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   1be28:	eba2 0309 	sub.w	r3, r2, r9
   1be2c:	2b00      	cmp	r3, #0
   1be2e:	bfb8      	it	lt
   1be30:	425b      	neglt	r3, r3
			if (peakSignalRateRef > targetRefRate) {
   1be32:	454a      	cmp	r2, r9
   1be34:	d912      	bls.n	1be5c <VL53L0X_perform_ref_spad_management+0x200>
				if (signalRateDiff > lastSignalRateDiff) {
   1be36:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1be38:	4293      	cmp	r3, r2
   1be3a:	d919      	bls.n	1be70 <VL53L0X_perform_ref_spad_management+0x214>
					Status = set_ref_spad_map(Dev,
   1be3c:	a910      	add	r1, sp, #64	; 0x40
   1be3e:	4628      	mov	r0, r5
   1be40:	f7ff fd1d 	bl	1b87e <set_ref_spad_map>
					memcpy(
   1be44:	2206      	movs	r2, #6
					Status = set_ref_spad_map(Dev,
   1be46:	4607      	mov	r7, r0
					memcpy(
   1be48:	a910      	add	r1, sp, #64	; 0x40
   1be4a:	4640      	mov	r0, r8
   1be4c:	f7fe f8a9 	bl	19fa2 <memcpy>
	if (Status == VL53L0X_ERROR_NONE) {
   1be50:	b187      	cbz	r7, 1be74 <VL53L0X_perform_ref_spad_management+0x218>
   1be52:	463c      	mov	r4, r7
}
   1be54:	4620      	mov	r0, r4
   1be56:	b013      	add	sp, #76	; 0x4c
   1be58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				memcpy(lastSpadArray,
   1be5c:	2206      	movs	r2, #6
   1be5e:	4641      	mov	r1, r8
   1be60:	a810      	add	r0, sp, #64	; 0x40
   1be62:	9309      	str	r3, [sp, #36]	; 0x24
				currentSpadIndex++;
   1be64:	3701      	adds	r7, #1
				memcpy(lastSpadArray,
   1be66:	f7fe f89c 	bl	19fa2 <memcpy>
			(refSpadCount_int)++;
   1be6a:	f8dd b020 	ldr.w	fp, [sp, #32]
   1be6e:	e7b3      	b.n	1bdd8 <VL53L0X_perform_ref_spad_management+0x17c>
   1be70:	f8dd b020 	ldr.w	fp, [sp, #32]
		*refSpadCount = refSpadCount_int;
   1be74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1be76:	f8c3 b000 	str.w	fp, [r3]
		*isApertureSpads = isApertureSpads_int;
   1be7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1be7c:	701e      	strb	r6, [r3, #0]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
   1be7e:	2301      	movs	r3, #1
   1be80:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
   1be84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1be86:	681b      	ldr	r3, [r3, #0]
   1be88:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
   1be8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1be8e:	781b      	ldrb	r3, [r3, #0]
   1be90:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
   1be94:	e7de      	b.n	1be54 <VL53L0X_perform_ref_spad_management+0x1f8>
   1be96:	4604      	mov	r4, r0
   1be98:	e7dc      	b.n	1be54 <VL53L0X_perform_ref_spad_management+0x1f8>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
   1be9a:	f06f 0431 	mvn.w	r4, #49	; 0x31
   1be9e:	e7d9      	b.n	1be54 <VL53L0X_perform_ref_spad_management+0x1f8>
	uint8_t	 isApertureSpads_int = 0;
   1bea0:	2600      	movs	r6, #0
	uint32_t refSpadCount_int = 0;
   1bea2:	46b3      	mov	fp, r6
   1bea4:	e781      	b.n	1bdaa <VL53L0X_perform_ref_spad_management+0x14e>
			needAptSpads = 1;
   1bea6:	2301      	movs	r3, #1
	uint32_t refSpadCount_int = 0;
   1bea8:	4683      	mov	fp, r0
			needAptSpads = 1;
   1beaa:	9307      	str	r3, [sp, #28]
   1beac:	e77e      	b.n	1bdac <VL53L0X_perform_ref_spad_management+0x150>

0001beae <VL53L0X_measurement_poll_for_completion>:
{
   1beae:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t NewDataReady = 0;
   1beb0:	2300      	movs	r3, #0
{
   1beb2:	4604      	mov	r4, r0
	uint8_t NewDataReady = 0;
   1beb4:	f88d 3007 	strb.w	r3, [sp, #7]
   1beb8:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
   1bebc:	f10d 0107 	add.w	r1, sp, #7
   1bec0:	4620      	mov	r0, r4
   1bec2:	f7ff fc6b 	bl	1b79c <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
   1bec6:	b958      	cbnz	r0, 1bee0 <VL53L0X_measurement_poll_for_completion+0x32>
		if (NewDataReady == 1)
   1bec8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1becc:	2b01      	cmp	r3, #1
   1bece:	d007      	beq.n	1bee0 <VL53L0X_measurement_poll_for_completion+0x32>
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
   1bed0:	3d01      	subs	r5, #1
   1bed2:	d003      	beq.n	1bedc <VL53L0X_measurement_poll_for_completion+0x2e>
		VL53L0X_PollingDelay(Dev);
   1bed4:	4620      	mov	r0, r4
   1bed6:	f7fe fbf8 	bl	1a6ca <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
   1beda:	e7ef      	b.n	1bebc <VL53L0X_measurement_poll_for_completion+0xe>
			Status = VL53L0X_ERROR_TIME_OUT;
   1bedc:	f06f 0006 	mvn.w	r0, #6
}
   1bee0:	b003      	add	sp, #12
   1bee2:	bd30      	pop	{r4, r5, pc}

0001bee4 <VL53L0X_isqrt>:
{
   1bee4:	4602      	mov	r2, r0
	uint32_t  bit = 1 << 30;
   1bee6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	while (bit > num)
   1beea:	4293      	cmp	r3, r2
   1beec:	d802      	bhi.n	1bef4 <VL53L0X_isqrt+0x10>
	uint32_t  res = 0;
   1beee:	2000      	movs	r0, #0
	while (bit != 0) {
   1bef0:	b913      	cbnz	r3, 1bef8 <VL53L0X_isqrt+0x14>
}
   1bef2:	4770      	bx	lr
		bit >>= 2;
   1bef4:	089b      	lsrs	r3, r3, #2
   1bef6:	e7f8      	b.n	1beea <VL53L0X_isqrt+0x6>
		if (num >= res + bit) {
   1bef8:	18c1      	adds	r1, r0, r3
   1befa:	4291      	cmp	r1, r2
			res = (res >> 1) + bit;
   1befc:	ea4f 0050 	mov.w	r0, r0, lsr #1
   1bf00:	bf9c      	itt	ls
   1bf02:	18c0      	addls	r0, r0, r3
			num -= res + bit;
   1bf04:	1a52      	subls	r2, r2, r1
		bit >>= 2;
   1bf06:	089b      	lsrs	r3, r3, #2
   1bf08:	e7f2      	b.n	1bef0 <VL53L0X_isqrt+0xc>

0001bf0a <VL53L0X_device_read_strobe>:
{
   1bf0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
   1bf0c:	2200      	movs	r2, #0
   1bf0e:	2183      	movs	r1, #131	; 0x83
{
   1bf10:	4605      	mov	r5, r0
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
   1bf12:	f7fe fb33 	bl	1a57c <VL53L0X_WrByte>
   1bf16:	4604      	mov	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
   1bf18:	b988      	cbnz	r0, 1bf3e <VL53L0X_device_read_strobe+0x34>
   1bf1a:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
   1bf1e:	f10d 0207 	add.w	r2, sp, #7
   1bf22:	2183      	movs	r1, #131	; 0x83
   1bf24:	4628      	mov	r0, r5
   1bf26:	f7fe fb56 	bl	1a5d6 <VL53L0X_RdByte>
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
   1bf2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bf2e:	4303      	orrs	r3, r0
   1bf30:	b2db      	uxtb	r3, r3
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
   1bf32:	4604      	mov	r4, r0
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
   1bf34:	b91b      	cbnz	r3, 1bf3e <VL53L0X_device_read_strobe+0x34>
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
   1bf36:	3e01      	subs	r6, #1
   1bf38:	d1f1      	bne.n	1bf1e <VL53L0X_device_read_strobe+0x14>
			Status = VL53L0X_ERROR_TIME_OUT;
   1bf3a:	f06f 0406 	mvn.w	r4, #6
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
   1bf3e:	2201      	movs	r2, #1
   1bf40:	2183      	movs	r1, #131	; 0x83
   1bf42:	4628      	mov	r0, r5
   1bf44:	f7fe fb1a 	bl	1a57c <VL53L0X_WrByte>
   1bf48:	4320      	orrs	r0, r4
}
   1bf4a:	b240      	sxtb	r0, r0
   1bf4c:	b002      	add	sp, #8
   1bf4e:	bd70      	pop	{r4, r5, r6, pc}

0001bf50 <VL53L0X_get_info_from_device>:
{
   1bf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
   1bf54:	f890 60f0 	ldrb.w	r6, [r0, #240]	; 0xf0
{
   1bf58:	b091      	sub	sp, #68	; 0x44
	uint32_t PartUIDUpper = 0;
   1bf5a:	f04f 0900 	mov.w	r9, #0
	if (ReadDataFromDeviceDone != 7) {
   1bf5e:	2e07      	cmp	r6, #7
	uint32_t PartUIDLower = 0;
   1bf60:	e9cd 9907 	strd	r9, r9, [sp, #28]
{
   1bf64:	4604      	mov	r4, r0
   1bf66:	460f      	mov	r7, r1
	if (ReadDataFromDeviceDone != 7) {
   1bf68:	f000 82af 	beq.w	1c4ca <VL53L0X_get_info_from_device+0x57a>
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
   1bf6c:	2201      	movs	r2, #1
   1bf6e:	2180      	movs	r1, #128	; 0x80
   1bf70:	f7fe fb04 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1bf74:	2201      	movs	r2, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
   1bf76:	4680      	mov	r8, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1bf78:	21ff      	movs	r1, #255	; 0xff
   1bf7a:	4620      	mov	r0, r4
   1bf7c:	f7fe fafe 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1bf80:	464a      	mov	r2, r9
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1bf82:	ea48 0800 	orr.w	r8, r8, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1bf86:	4649      	mov	r1, r9
   1bf88:	4620      	mov	r0, r4
   1bf8a:	f7fe faf7 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1bf8e:	fa4f f888 	sxtb.w	r8, r8
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1bf92:	ea48 0800 	orr.w	r8, r8, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
   1bf96:	2206      	movs	r2, #6
   1bf98:	21ff      	movs	r1, #255	; 0xff
   1bf9a:	4620      	mov	r0, r4
   1bf9c:	f7fe faee 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
   1bfa0:	fa4f f888 	sxtb.w	r8, r8
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
   1bfa4:	ea48 0800 	orr.w	r8, r8, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
   1bfa8:	f10d 0215 	add.w	r2, sp, #21
   1bfac:	2183      	movs	r1, #131	; 0x83
   1bfae:	4620      	mov	r0, r4
   1bfb0:	f7fe fb11 	bl	1a5d6 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
   1bfb4:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
   1bfb8:	fa4f f888 	sxtb.w	r8, r8
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
   1bfbc:	ea48 0800 	orr.w	r8, r8, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
   1bfc0:	f042 0204 	orr.w	r2, r2, #4
   1bfc4:	2183      	movs	r1, #131	; 0x83
   1bfc6:	4620      	mov	r0, r4
   1bfc8:	f7fe fad8 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
   1bfcc:	fa4f f888 	sxtb.w	r8, r8
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
   1bfd0:	ea48 0800 	orr.w	r8, r8, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
   1bfd4:	2207      	movs	r2, #7
   1bfd6:	21ff      	movs	r1, #255	; 0xff
   1bfd8:	4620      	mov	r0, r4
   1bfda:	f7fe facf 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
   1bfde:	fa4f f888 	sxtb.w	r8, r8
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
   1bfe2:	2201      	movs	r2, #1
   1bfe4:	2181      	movs	r1, #129	; 0x81
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
   1bfe6:	ea48 0800 	orr.w	r8, r8, r0
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
   1bfea:	4620      	mov	r0, r4
   1bfec:	f7fe fac6 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
   1bff0:	fa4f f888 	sxtb.w	r8, r8
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
   1bff4:	ea48 0800 	orr.w	r8, r8, r0
		Status |= VL53L0X_PollingDelay(Dev);
   1bff8:	4620      	mov	r0, r4
   1bffa:	f7fe fb66 	bl	1a6ca <VL53L0X_PollingDelay>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
   1bffe:	fa4f f888 	sxtb.w	r8, r8
		Status |= VL53L0X_PollingDelay(Dev);
   1c002:	ea48 0800 	orr.w	r8, r8, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
   1c006:	2201      	movs	r2, #1
   1c008:	2180      	movs	r1, #128	; 0x80
   1c00a:	4620      	mov	r0, r4
   1c00c:	f7fe fab6 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_PollingDelay(Dev);
   1c010:	fa4f f888 	sxtb.w	r8, r8
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
   1c014:	ea48 0500 	orr.w	r5, r8, r0
		if (((option & 1) == 1) &&
   1c018:	f017 0b01 	ands.w	fp, r7, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
   1c01c:	b26d      	sxtb	r5, r5
		if (((option & 1) == 1) &&
   1c01e:	f000 8227 	beq.w	1c470 <VL53L0X_get_info_from_device+0x520>
   1c022:	07f2      	lsls	r2, r6, #31
   1c024:	f100 8227 	bmi.w	1c476 <VL53L0X_get_info_from_device+0x526>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
   1c028:	226b      	movs	r2, #107	; 0x6b
   1c02a:	2194      	movs	r1, #148	; 0x94
   1c02c:	4620      	mov	r0, r4
   1c02e:	f7fe faa5 	bl	1a57c <VL53L0X_WrByte>
   1c032:	4680      	mov	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
   1c034:	4620      	mov	r0, r4
   1c036:	f7ff ff68 	bl	1bf0a <VL53L0X_device_read_strobe>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c03a:	aa06      	add	r2, sp, #24
			Status |= VL53L0X_device_read_strobe(Dev);
   1c03c:	ea48 0800 	orr.w	r8, r8, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c040:	2190      	movs	r1, #144	; 0x90
   1c042:	4620      	mov	r0, r4
   1c044:	f7fe fb1e 	bl	1a684 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
   1c048:	ea45 0508 	orr.w	r5, r5, r8
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
   1c04c:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
   1c04e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
   1c050:	2224      	movs	r2, #36	; 0x24
   1c052:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c054:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
   1c056:	4620      	mov	r0, r4
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
   1c058:	f3c3 2a06 	ubfx	sl, r3, #8, #7
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
   1c05c:	f3c3 39c0 	ubfx	r9, r3, #15, #1
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
   1c060:	f7fe fa8c 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c064:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
   1c066:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
   1c068:	4620      	mov	r0, r4
   1c06a:	f7ff ff4e 	bl	1bf0a <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
   1c06e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
   1c070:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c072:	aa06      	add	r2, sp, #24
   1c074:	2190      	movs	r1, #144	; 0x90
   1c076:	4620      	mov	r0, r4
   1c078:	f7fe fb04 	bl	1a684 <VL53L0X_RdDWord>
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
   1c07c:	9b06      	ldr	r3, [sp, #24]
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
   1c07e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
   1c082:	0e1a      	lsrs	r2, r3, #24
   1c084:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
   1c088:	0c1a      	lsrs	r2, r3, #16
   1c08a:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
			Status |= VL53L0X_device_read_strobe(Dev);
   1c08e:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
   1c090:	0a1a      	lsrs	r2, r3, #8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
   1c092:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c094:	4305      	orrs	r5, r0
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
   1c096:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
   1c09a:	4620      	mov	r0, r4
   1c09c:	2225      	movs	r2, #37	; 0x25
   1c09e:	f7fe fa6d 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c0a2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
   1c0a4:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
   1c0a6:	4620      	mov	r0, r4
   1c0a8:	f7ff ff2f 	bl	1bf0a <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
   1c0ac:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
   1c0ae:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c0b0:	aa06      	add	r2, sp, #24
   1c0b2:	2190      	movs	r1, #144	; 0x90
   1c0b4:	4620      	mov	r0, r4
   1c0b6:	f7fe fae5 	bl	1a684 <VL53L0X_RdDWord>
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
   1c0ba:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
   1c0bc:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
   1c0be:	0e1a      	lsrs	r2, r3, #24
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c0c0:	4305      	orrs	r5, r0
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
   1c0c2:	0c1b      	lsrs	r3, r3, #16
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c0c4:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
   1c0c6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
   1c0ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
		if (((option & 2) == 2) &&
   1c0ce:	f017 0302 	ands.w	r3, r7, #2
   1c0d2:	9302      	str	r3, [sp, #8]
   1c0d4:	f000 80db 	beq.w	1c28e <VL53L0X_get_info_from_device+0x33e>
   1c0d8:	f016 0802 	ands.w	r8, r6, #2
   1c0dc:	f040 80d7 	bne.w	1c28e <VL53L0X_get_info_from_device+0x33e>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
   1c0e0:	2202      	movs	r2, #2
   1c0e2:	2194      	movs	r1, #148	; 0x94
   1c0e4:	4620      	mov	r0, r4
   1c0e6:	f7fe fa49 	bl	1a57c <VL53L0X_WrByte>
   1c0ea:	9001      	str	r0, [sp, #4]
			Status |= VL53L0X_device_read_strobe(Dev);
   1c0ec:	4620      	mov	r0, r4
   1c0ee:	f7ff ff0c 	bl	1bf0a <VL53L0X_device_read_strobe>
   1c0f2:	9b01      	ldr	r3, [sp, #4]
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
   1c0f4:	f10d 0216 	add.w	r2, sp, #22
			Status |= VL53L0X_device_read_strobe(Dev);
   1c0f8:	4303      	orrs	r3, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
   1c0fa:	2190      	movs	r1, #144	; 0x90
   1c0fc:	4620      	mov	r0, r4
			Status |= VL53L0X_device_read_strobe(Dev);
   1c0fe:	431d      	orrs	r5, r3
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
   1c100:	f7fe fa69 	bl	1a5d6 <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
   1c104:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
   1c106:	227b      	movs	r2, #123	; 0x7b
   1c108:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
   1c10a:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
   1c10c:	4620      	mov	r0, r4
   1c10e:	f7fe fa35 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
   1c112:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
   1c114:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
   1c116:	4620      	mov	r0, r4
   1c118:	f7ff fef7 	bl	1bf0a <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
   1c11c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
   1c11e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
   1c120:	f10d 0217 	add.w	r2, sp, #23
   1c124:	2190      	movs	r1, #144	; 0x90
   1c126:	4620      	mov	r0, r4
   1c128:	f7fe fa55 	bl	1a5d6 <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
   1c12c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
   1c12e:	2277      	movs	r2, #119	; 0x77
   1c130:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
   1c132:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
   1c134:	4620      	mov	r0, r4
   1c136:	f7fe fa21 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
   1c13a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
   1c13c:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
   1c13e:	4620      	mov	r0, r4
   1c140:	f7ff fee3 	bl	1bf0a <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
   1c144:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
   1c146:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c148:	aa06      	add	r2, sp, #24
   1c14a:	2190      	movs	r1, #144	; 0x90
   1c14c:	4620      	mov	r0, r4
   1c14e:	f7fe fa99 	bl	1a684 <VL53L0X_RdDWord>
			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
   1c152:	9b06      	ldr	r3, [sp, #24]
   1c154:	0e5a      	lsrs	r2, r3, #25
   1c156:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
   1c15a:	f3c3 4286 	ubfx	r2, r3, #18, #7
   1c15e:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
   1c162:	f3c3 22c6 	ubfx	r2, r3, #11, #7
   1c166:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
			Status |= VL53L0X_device_read_strobe(Dev);
   1c16a:	b26d      	sxtb	r5, r5
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
   1c16c:	f3c3 1206 	ubfx	r2, r3, #4, #7
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
   1c170:	00db      	lsls	r3, r3, #3
   1c172:	f003 0378 	and.w	r3, r3, #120	; 0x78
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
   1c176:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c178:	4305      	orrs	r5, r0
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
   1c17a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
   1c17e:	4620      	mov	r0, r4
   1c180:	2278      	movs	r2, #120	; 0x78
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
   1c182:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
   1c186:	f7fe f9f9 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c18a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
   1c18c:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
   1c18e:	4620      	mov	r0, r4
   1c190:	f7ff febb 	bl	1bf0a <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
   1c194:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
   1c196:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c198:	aa06      	add	r2, sp, #24
   1c19a:	2190      	movs	r1, #144	; 0x90
   1c19c:	4620      	mov	r0, r4
   1c19e:	f7fe fa71 	bl	1a684 <VL53L0X_RdDWord>
					((TmpDWord >> 29) & 0x07f));
   1c1a2:	9b06      	ldr	r3, [sp, #24]
			ProductId[4] = (char)(byte +
   1c1a4:	f89d 2015 	ldrb.w	r2, [sp, #21]
   1c1a8:	eb02 7253 	add.w	r2, r2, r3, lsr #29
   1c1ac:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
   1c1b0:	f3c3 5286 	ubfx	r2, r3, #22, #7
   1c1b4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
   1c1b8:	f3c3 32c6 	ubfx	r2, r3, #15, #7
   1c1bc:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
   1c1c0:	f3c3 2206 	ubfx	r2, r3, #8, #7
   1c1c4:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			Status |= VL53L0X_device_read_strobe(Dev);
   1c1c8:	b26d      	sxtb	r5, r5
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
   1c1ca:	f3c3 0246 	ubfx	r2, r3, #1, #7
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
   1c1ce:	019b      	lsls	r3, r3, #6
   1c1d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
   1c1d4:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c1d6:	4305      	orrs	r5, r0
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
   1c1d8:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
   1c1dc:	4620      	mov	r0, r4
   1c1de:	2279      	movs	r2, #121	; 0x79
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
   1c1e0:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
   1c1e4:	f7fe f9ca 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c1e8:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
   1c1ea:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
   1c1ec:	4620      	mov	r0, r4
   1c1ee:	f7ff fe8c 	bl	1bf0a <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
   1c1f2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
   1c1f4:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c1f6:	aa06      	add	r2, sp, #24
   1c1f8:	2190      	movs	r1, #144	; 0x90
   1c1fa:	4620      	mov	r0, r4
   1c1fc:	f7fe fa42 	bl	1a684 <VL53L0X_RdDWord>
					((TmpDWord >> 26) & 0x07f));
   1c200:	9b06      	ldr	r3, [sp, #24]
			ProductId[9] = (char)(byte +
   1c202:	f89d 2015 	ldrb.w	r2, [sp, #21]
   1c206:	eb02 6293 	add.w	r2, r2, r3, lsr #26
   1c20a:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
   1c20e:	f3c3 42c6 	ubfx	r2, r3, #19, #7
   1c212:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
   1c216:	f3c3 3206 	ubfx	r2, r3, #12, #7
   1c21a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
			Status |= VL53L0X_device_read_strobe(Dev);
   1c21e:	b26d      	sxtb	r5, r5
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
   1c220:	f3c3 1246 	ubfx	r2, r3, #5, #7
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
   1c224:	009b      	lsls	r3, r3, #2
   1c226:	f003 037c 	and.w	r3, r3, #124	; 0x7c
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
   1c22a:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c22c:	4305      	orrs	r5, r0
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
   1c22e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
   1c232:	4620      	mov	r0, r4
   1c234:	227a      	movs	r2, #122	; 0x7a
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
   1c236:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
   1c23a:	f7fe f99f 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c23e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
   1c240:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
   1c242:	4620      	mov	r0, r4
   1c244:	f7ff fe61 	bl	1bf0a <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
   1c248:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
   1c24a:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c24c:	aa06      	add	r2, sp, #24
   1c24e:	2190      	movs	r1, #144	; 0x90
   1c250:	4620      	mov	r0, r4
   1c252:	f7fe fa17 	bl	1a684 <VL53L0X_RdDWord>
					((TmpDWord >> 30) & 0x07f));
   1c256:	9b06      	ldr	r3, [sp, #24]
			ProductId[13] = (char)(byte +
   1c258:	f89d 2015 	ldrb.w	r2, [sp, #21]
			ProductId[18] = '\0';
   1c25c:	f88d 803e 	strb.w	r8, [sp, #62]	; 0x3e
			ProductId[13] = (char)(byte +
   1c260:	eb02 7293 	add.w	r2, r2, r3, lsr #30
   1c264:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
   1c268:	f3c3 52c6 	ubfx	r2, r3, #23, #7
			Status |= VL53L0X_device_read_strobe(Dev);
   1c26c:	b26d      	sxtb	r5, r5
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
   1c26e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
   1c272:	f3c3 4206 	ubfx	r2, r3, #16, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c276:	4305      	orrs	r5, r0
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
   1c278:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
   1c27c:	f3c3 2246 	ubfx	r2, r3, #9, #7
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
   1c280:	f3c3 0386 	ubfx	r3, r3, #2, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c284:	b26d      	sxtb	r5, r5
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
   1c286:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
   1c28a:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
		if (((option & 4) == 4) &&
   1c28e:	f017 0304 	ands.w	r3, r7, #4
   1c292:	9301      	str	r3, [sp, #4]
   1c294:	f000 80f1 	beq.w	1c47a <VL53L0X_get_info_from_device+0x52a>
   1c298:	0773      	lsls	r3, r6, #29
   1c29a:	f100 80ee 	bmi.w	1c47a <VL53L0X_get_info_from_device+0x52a>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
   1c29e:	227b      	movs	r2, #123	; 0x7b
   1c2a0:	2194      	movs	r1, #148	; 0x94
   1c2a2:	4620      	mov	r0, r4
   1c2a4:	f7fe f96a 	bl	1a57c <VL53L0X_WrByte>
   1c2a8:	4680      	mov	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
   1c2aa:	4620      	mov	r0, r4
   1c2ac:	f7ff fe2d 	bl	1bf0a <VL53L0X_device_read_strobe>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
   1c2b0:	aa07      	add	r2, sp, #28
			Status |= VL53L0X_device_read_strobe(Dev);
   1c2b2:	ea48 0800 	orr.w	r8, r8, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
   1c2b6:	2190      	movs	r1, #144	; 0x90
   1c2b8:	4620      	mov	r0, r4
   1c2ba:	f7fe f9e3 	bl	1a684 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
   1c2be:	ea45 0508 	orr.w	r5, r5, r8
   1c2c2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
   1c2c4:	227c      	movs	r2, #124	; 0x7c
   1c2c6:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
   1c2c8:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
   1c2ca:	4620      	mov	r0, r4
   1c2cc:	f7fe f956 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
   1c2d0:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
   1c2d2:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
   1c2d4:	4620      	mov	r0, r4
   1c2d6:	f7ff fe18 	bl	1bf0a <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
   1c2da:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
   1c2dc:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
   1c2de:	aa08      	add	r2, sp, #32
   1c2e0:	2190      	movs	r1, #144	; 0x90
   1c2e2:	4620      	mov	r0, r4
   1c2e4:	f7fe f9ce 	bl	1a684 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
   1c2e8:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
   1c2ea:	2273      	movs	r2, #115	; 0x73
   1c2ec:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
   1c2ee:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
   1c2f0:	4620      	mov	r0, r4
   1c2f2:	f7fe f943 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
   1c2f6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
   1c2f8:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
   1c2fa:	4620      	mov	r0, r4
   1c2fc:	f7ff fe05 	bl	1bf0a <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
   1c300:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
   1c302:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c304:	aa06      	add	r2, sp, #24
   1c306:	2190      	movs	r1, #144	; 0x90
   1c308:	4620      	mov	r0, r4
   1c30a:	f7fe f9bb 	bl	1a684 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
   1c30e:	b26d      	sxtb	r5, r5
				0x0000000ff) << 8;
   1c310:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
   1c312:	2274      	movs	r2, #116	; 0x74
   1c314:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c316:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
   1c318:	4620      	mov	r0, r4
				0x0000000ff) << 8;
   1c31a:	ea4f 2803 	mov.w	r8, r3, lsl #8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
   1c31e:	f7fe f92d 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c322:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
   1c324:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
   1c326:	4620      	mov	r0, r4
   1c328:	f7ff fdef 	bl	1bf0a <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
   1c32c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
   1c32e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c330:	aa06      	add	r2, sp, #24
   1c332:	2190      	movs	r1, #144	; 0x90
   1c334:	4620      	mov	r0, r4
   1c336:	f7fe f9a5 	bl	1a684 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
   1c33a:	b26d      	sxtb	r5, r5
				0xff000000) >> 24);
   1c33c:	f89d 301b 	ldrb.w	r3, [sp, #27]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
   1c340:	2275      	movs	r2, #117	; 0x75
   1c342:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c344:	4305      	orrs	r5, r0
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
   1c346:	fa1f f888 	uxth.w	r8, r8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
   1c34a:	4620      	mov	r0, r4
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
   1c34c:	ea43 0808 	orr.w	r8, r3, r8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
   1c350:	f7fe f914 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c354:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
   1c356:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
   1c358:	4620      	mov	r0, r4
   1c35a:	f7ff fdd6 	bl	1bf0a <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
   1c35e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
   1c360:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c362:	aa06      	add	r2, sp, #24
   1c364:	2190      	movs	r1, #144	; 0x90
   1c366:	4620      	mov	r0, r4
   1c368:	f7fe f98c 	bl	1a684 <VL53L0X_RdDWord>
							<< 8;
   1c36c:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
   1c36e:	b26d      	sxtb	r5, r5
							<< 8;
   1c370:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
   1c372:	b29b      	uxth	r3, r3
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
   1c374:	2276      	movs	r2, #118	; 0x76
   1c376:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c378:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
   1c37a:	4620      	mov	r0, r4
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
   1c37c:	9303      	str	r3, [sp, #12]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
   1c37e:	f7fe f8fd 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c382:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
   1c384:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
   1c386:	4620      	mov	r0, r4
   1c388:	f7ff fdbf 	bl	1bf0a <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
   1c38c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
   1c38e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c390:	aa06      	add	r2, sp, #24
   1c392:	2190      	movs	r1, #144	; 0x90
   1c394:	4620      	mov	r0, r4
   1c396:	f7fe f975 	bl	1a684 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
   1c39a:	b26d      	sxtb	r5, r5
							>> 24);
   1c39c:	f89d 201b 	ldrb.w	r2, [sp, #27]
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
   1c3a0:	9b03      	ldr	r3, [sp, #12]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
   1c3a2:	4305      	orrs	r5, r0
   1c3a4:	b26d      	sxtb	r5, r5
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
   1c3a6:	4313      	orrs	r3, r2
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
   1c3a8:	2200      	movs	r2, #0
   1c3aa:	2181      	movs	r1, #129	; 0x81
   1c3ac:	4620      	mov	r0, r4
   1c3ae:	9303      	str	r3, [sp, #12]
   1c3b0:	f7fe f8e4 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
   1c3b4:	2206      	movs	r2, #6
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
   1c3b6:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
   1c3b8:	21ff      	movs	r1, #255	; 0xff
   1c3ba:	4620      	mov	r0, r4
   1c3bc:	f7fe f8de 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
   1c3c0:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
   1c3c2:	4305      	orrs	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
   1c3c4:	f10d 0215 	add.w	r2, sp, #21
   1c3c8:	2183      	movs	r1, #131	; 0x83
   1c3ca:	4620      	mov	r0, r4
   1c3cc:	f7fe f903 	bl	1a5d6 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
   1c3d0:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
   1c3d4:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
   1c3d6:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
   1c3d8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   1c3dc:	2183      	movs	r1, #131	; 0x83
   1c3de:	4620      	mov	r0, r4
   1c3e0:	f7fe f8cc 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
   1c3e4:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
   1c3e6:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1c3e8:	2201      	movs	r2, #1
   1c3ea:	21ff      	movs	r1, #255	; 0xff
   1c3ec:	4620      	mov	r0, r4
   1c3ee:	f7fe f8c5 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
   1c3f2:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1c3f4:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
   1c3f6:	2201      	movs	r2, #1
   1c3f8:	2100      	movs	r1, #0
   1c3fa:	4620      	mov	r0, r4
   1c3fc:	f7fe f8be 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1c400:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
   1c402:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   1c404:	2200      	movs	r2, #0
   1c406:	21ff      	movs	r1, #255	; 0xff
   1c408:	4620      	mov	r0, r4
   1c40a:	f7fe f8b7 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
   1c40e:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   1c410:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
   1c412:	2200      	movs	r2, #0
   1c414:	2180      	movs	r1, #128	; 0x80
   1c416:	4620      	mov	r0, r4
   1c418:	f7fe f8b0 	bl	1a57c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
   1c41c:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
   1c41e:	4305      	orrs	r5, r0
   1c420:	b26d      	sxtb	r5, r5
	if ((Status == VL53L0X_ERROR_NONE) &&
   1c422:	9b03      	ldr	r3, [sp, #12]
   1c424:	bb05      	cbnz	r5, 1c468 <VL53L0X_get_info_from_device+0x518>
		if (((option & 1) == 1) &&
   1c426:	f1bb 0f00 	cmp.w	fp, #0
   1c42a:	d12a      	bne.n	1c482 <VL53L0X_get_info_from_device+0x532>
		if (((option & 2) == 2) &&
   1c42c:	9a02      	ldr	r2, [sp, #8]
   1c42e:	2a00      	cmp	r2, #0
   1c430:	d139      	bne.n	1c4a6 <VL53L0X_get_info_from_device+0x556>
		if (((option & 4) == 4) &&
   1c432:	9a01      	ldr	r2, [sp, #4]
   1c434:	b1aa      	cbz	r2, 1c462 <VL53L0X_get_info_from_device+0x512>
   1c436:	0772      	lsls	r2, r6, #29
   1c438:	d413      	bmi.n	1c462 <VL53L0X_get_info_from_device+0x512>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
   1c43a:	9a07      	ldr	r2, [sp, #28]
   1c43c:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
   1c440:	9a08      	ldr	r2, [sp, #32]
   1c442:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
			SignalRateMeasFixed400mmFix =
   1c446:	ea4f 2248 	mov.w	r2, r8, lsl #9
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
   1c44a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
			if (DistMeasFixed1104_400_mm != 0) {
   1c44e:	b13b      	cbz	r3, 1c460 <VL53L0X_get_info_from_device+0x510>
					OffsetFixed1104_mm =
   1c450:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
						* 1000) >> 4;
   1c454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c458:	4353      	muls	r3, r2
   1c45a:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
   1c45c:	425b      	negs	r3, r3
   1c45e:	b21b      	sxth	r3, r3
			PALDevDataSet(Dev,
   1c460:	60e3      	str	r3, [r4, #12]
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
   1c462:	433e      	orrs	r6, r7
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
   1c464:	f884 60f0 	strb.w	r6, [r4, #240]	; 0xf0
}
   1c468:	4628      	mov	r0, r5
   1c46a:	b011      	add	sp, #68	; 0x44
   1c46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ReferenceSpadType = 0;
   1c470:	46d9      	mov	r9, fp
	uint8_t ReferenceSpadCount = 0;
   1c472:	46da      	mov	sl, fp
   1c474:	e62b      	b.n	1c0ce <VL53L0X_get_info_from_device+0x17e>
   1c476:	46ca      	mov	sl, r9
   1c478:	e629      	b.n	1c0ce <VL53L0X_get_info_from_device+0x17e>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
   1c47a:	f04f 0800 	mov.w	r8, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
   1c47e:	4643      	mov	r3, r8
   1c480:	e792      	b.n	1c3a8 <VL53L0X_get_info_from_device+0x458>
		if (((option & 1) == 1) &&
   1c482:	07f0      	lsls	r0, r6, #31
   1c484:	d4d2      	bmi.n	1c42c <VL53L0X_get_info_from_device+0x4dc>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
   1c486:	f884 a113 	strb.w	sl, [r4, #275]	; 0x113
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
   1c48a:	f884 9114 	strb.w	r9, [r4, #276]	; 0x114
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
   1c48e:	a909      	add	r1, sp, #36	; 0x24
   1c490:	f504 7295 	add.w	r2, r4, #298	; 0x12a
   1c494:	f504 7098 	add.w	r0, r4, #304	; 0x130
					NvmRefGoodSpadMap[i];
   1c498:	f811 cb01 	ldrb.w	ip, [r1], #1
				Dev->Data.SpadData.RefGoodSpadMap[i] =
   1c49c:	f802 cb01 	strb.w	ip, [r2], #1
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
   1c4a0:	4290      	cmp	r0, r2
   1c4a2:	d1f9      	bne.n	1c498 <VL53L0X_get_info_from_device+0x548>
   1c4a4:	e7c2      	b.n	1c42c <VL53L0X_get_info_from_device+0x4dc>
		if (((option & 2) == 2) &&
   1c4a6:	07b1      	lsls	r1, r6, #30
   1c4a8:	d4c3      	bmi.n	1c432 <VL53L0X_get_info_from_device+0x4e2>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
   1c4aa:	f89d 2016 	ldrb.w	r2, [sp, #22]
   1c4ae:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
   1c4b2:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1c4b6:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
   1c4ba:	a90b      	add	r1, sp, #44	; 0x2c
   1c4bc:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
   1c4c0:	9302      	str	r3, [sp, #8]
   1c4c2:	f7fd fd48 	bl	19f56 <strcpy>
   1c4c6:	9b02      	ldr	r3, [sp, #8]
   1c4c8:	e7b3      	b.n	1c432 <VL53L0X_get_info_from_device+0x4e2>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
   1c4ca:	464d      	mov	r5, r9
   1c4cc:	e7cc      	b.n	1c468 <VL53L0X_get_info_from_device+0x518>

0001c4ce <VL53L0X_encode_timeout>:
	if (timeout_macro_clks > 0) {
   1c4ce:	b150      	cbz	r0, 1c4e6 <VL53L0X_encode_timeout+0x18>
		ls_byte = timeout_macro_clks - 1;
   1c4d0:	3801      	subs	r0, #1
		while ((ls_byte & 0xFFFFFF00) > 0) {
   1c4d2:	2300      	movs	r3, #0
   1c4d4:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
   1c4d8:	b29a      	uxth	r2, r3
   1c4da:	f103 0301 	add.w	r3, r3, #1
   1c4de:	d103      	bne.n	1c4e8 <VL53L0X_encode_timeout+0x1a>
		encoded_timeout = (ms_byte << 8)
   1c4e0:	eb00 2002 	add.w	r0, r0, r2, lsl #8
   1c4e4:	b280      	uxth	r0, r0
}
   1c4e6:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
   1c4e8:	0840      	lsrs	r0, r0, #1
			ms_byte++;
   1c4ea:	e7f3      	b.n	1c4d4 <VL53L0X_encode_timeout+0x6>

0001c4ec <VL53L0X_decode_timeout>:
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
   1c4ec:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
   1c4ee:	0a00      	lsrs	r0, r0, #8
   1c4f0:	fa03 f000 	lsl.w	r0, r3, r0
}
   1c4f4:	3001      	adds	r0, #1
   1c4f6:	4770      	bx	lr

0001c4f8 <get_sequence_step_timeout>:
{
   1c4f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
   1c4fc:	2902      	cmp	r1, #2
	uint8_t EncodedTimeOutByte = 0;
   1c4fe:	f04f 0500 	mov.w	r5, #0
{
   1c502:	4607      	mov	r7, r0
   1c504:	4616      	mov	r6, r2
	uint8_t EncodedTimeOutByte = 0;
   1c506:	f88d 5003 	strb.w	r5, [sp, #3]
	uint16_t PreRangeEncodedTimeOut = 0;
   1c50a:	f8ad 5004 	strh.w	r5, [sp, #4]
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
   1c50e:	d81c      	bhi.n	1c54a <get_sequence_step_timeout+0x52>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
   1c510:	f10d 0202 	add.w	r2, sp, #2
   1c514:	4629      	mov	r1, r5
   1c516:	f7fe fda7 	bl	1b068 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
   1c51a:	4604      	mov	r4, r0
   1c51c:	b930      	cbnz	r0, 1c52c <get_sequence_step_timeout+0x34>
			Status = VL53L0X_RdByte(Dev,
   1c51e:	f10d 0203 	add.w	r2, sp, #3
   1c522:	2146      	movs	r1, #70	; 0x46
   1c524:	4638      	mov	r0, r7
   1c526:	f7fe f856 	bl	1a5d6 <VL53L0X_RdByte>
   1c52a:	4604      	mov	r4, r0
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
   1c52c:	f89d 0003 	ldrb.w	r0, [sp, #3]
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
   1c530:	f7ff ffdc 	bl	1c4ec <VL53L0X_decode_timeout>
			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
   1c534:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1c538:	b281      	uxth	r1, r0
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
   1c53a:	4638      	mov	r0, r7
   1c53c:	f7fb fb6a 	bl	17c14 <VL53L0X_calc_timeout_us>
	*pTimeOutMicroSecs = TimeoutMicroSeconds;
   1c540:	6030      	str	r0, [r6, #0]
}
   1c542:	4620      	mov	r0, r4
   1c544:	b004      	add	sp, #16
   1c546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
   1c54a:	2903      	cmp	r1, #3
   1c54c:	d118      	bne.n	1c580 <get_sequence_step_timeout+0x88>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
   1c54e:	f10d 0202 	add.w	r2, sp, #2
   1c552:	4629      	mov	r1, r5
   1c554:	f7fe fd88 	bl	1b068 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
   1c558:	4604      	mov	r4, r0
   1c55a:	2800      	cmp	r0, #0
   1c55c:	d149      	bne.n	1c5f2 <get_sequence_step_timeout+0xfa>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
   1c55e:	4601      	mov	r1, r0
   1c560:	f10d 0202 	add.w	r2, sp, #2
   1c564:	4638      	mov	r0, r7
   1c566:	f7fe fd7f 	bl	1b068 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
   1c56a:	4604      	mov	r4, r0
   1c56c:	b928      	cbnz	r0, 1c57a <get_sequence_step_timeout+0x82>
				Status = VL53L0X_RdWord(Dev,
   1c56e:	aa01      	add	r2, sp, #4
   1c570:	2151      	movs	r1, #81	; 0x51
   1c572:	4638      	mov	r0, r7
   1c574:	f7fe f86b 	bl	1a64e <VL53L0X_RdWord>
   1c578:	4604      	mov	r4, r0
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
   1c57a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1c57e:	e7d7      	b.n	1c530 <get_sequence_step_timeout+0x38>
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
   1c580:	2904      	cmp	r1, #4
   1c582:	d138      	bne.n	1c5f6 <get_sequence_step_timeout+0xfe>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
   1c584:	a902      	add	r1, sp, #8
   1c586:	f7fe fdc3 	bl	1b110 <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
   1c58a:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1c58e:	b1a8      	cbz	r0, 1c5bc <get_sequence_step_timeout+0xc4>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
   1c590:	f10d 0202 	add.w	r2, sp, #2
   1c594:	4629      	mov	r1, r5
   1c596:	4638      	mov	r0, r7
   1c598:	f7fe fd66 	bl	1b068 <VL53L0X_GetVcselPulsePeriod>
   1c59c:	4604      	mov	r4, r0
			if (Status == VL53L0X_ERROR_NONE) {
   1c59e:	b958      	cbnz	r0, 1c5b8 <get_sequence_step_timeout+0xc0>
				Status = VL53L0X_RdWord(Dev,
   1c5a0:	aa01      	add	r2, sp, #4
   1c5a2:	2151      	movs	r1, #81	; 0x51
   1c5a4:	4638      	mov	r0, r7
   1c5a6:	f7fe f852 	bl	1a64e <VL53L0X_RdWord>
   1c5aa:	4604      	mov	r4, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
   1c5ac:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1c5b0:	f7ff ff9c 	bl	1c4ec <VL53L0X_decode_timeout>
   1c5b4:	b285      	uxth	r5, r0
		if (Status == VL53L0X_ERROR_NONE) {
   1c5b6:	b114      	cbz	r4, 1c5be <get_sequence_step_timeout+0xc6>
	uint16_t FinalRangeTimeOutMClks = 0;
   1c5b8:	2000      	movs	r0, #0
   1c5ba:	e015      	b.n	1c5e8 <get_sequence_step_timeout+0xf0>
		PreRangeTimeOutMClks = 0;
   1c5bc:	4605      	mov	r5, r0
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
   1c5be:	f10d 0202 	add.w	r2, sp, #2
   1c5c2:	2101      	movs	r1, #1
   1c5c4:	4638      	mov	r0, r7
   1c5c6:	f7fe fd4f 	bl	1b068 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
   1c5ca:	4604      	mov	r4, r0
   1c5cc:	2800      	cmp	r0, #0
   1c5ce:	d1f3      	bne.n	1c5b8 <get_sequence_step_timeout+0xc0>
			Status = VL53L0X_RdWord(Dev,
   1c5d0:	f10d 0206 	add.w	r2, sp, #6
   1c5d4:	2171      	movs	r1, #113	; 0x71
   1c5d6:	4638      	mov	r0, r7
   1c5d8:	f7fe f839 	bl	1a64e <VL53L0X_RdWord>
   1c5dc:	4604      	mov	r4, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
   1c5de:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1c5e2:	f7ff ff83 	bl	1c4ec <VL53L0X_decode_timeout>
   1c5e6:	b280      	uxth	r0, r0
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
   1c5e8:	1b45      	subs	r5, r0, r5
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
   1c5ea:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1c5ee:	b2a9      	uxth	r1, r5
   1c5f0:	e7a3      	b.n	1c53a <get_sequence_step_timeout+0x42>
	uint32_t TimeoutMicroSeconds = 0;
   1c5f2:	4628      	mov	r0, r5
   1c5f4:	e7a4      	b.n	1c540 <get_sequence_step_timeout+0x48>
   1c5f6:	4628      	mov	r0, r5
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
   1c5f8:	462c      	mov	r4, r5
   1c5fa:	e7a1      	b.n	1c540 <get_sequence_step_timeout+0x48>

0001c5fc <set_sequence_step_timeout>:
{
   1c5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
   1c5fe:	2902      	cmp	r1, #2
{
   1c600:	b085      	sub	sp, #20
   1c602:	4605      	mov	r5, r0
   1c604:	4616      	mov	r6, r2
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
   1c606:	d81e      	bhi.n	1c646 <set_sequence_step_timeout+0x4a>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
   1c608:	f10d 0205 	add.w	r2, sp, #5
   1c60c:	2100      	movs	r1, #0
   1c60e:	f7fe fd2b 	bl	1b068 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
   1c612:	4604      	mov	r4, r0
   1c614:	b9a0      	cbnz	r0, 1c640 <set_sequence_step_timeout+0x44>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
   1c616:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1c61a:	4631      	mov	r1, r6
   1c61c:	4628      	mov	r0, r5
   1c61e:	f7fb fae5 	bl	17bec <VL53L0X_calc_timeout_mclks>
			if (MsrcRangeTimeOutMClks > 256)
   1c622:	b283      	uxth	r3, r0
   1c624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				MsrcEncodedTimeOut =
   1c628:	bf9a      	itte	ls
   1c62a:	f100 32ff 	addls.w	r2, r0, #4294967295	; 0xffffffff
   1c62e:	b2d2      	uxtbls	r2, r2
				MsrcEncodedTimeOut = 255;
   1c630:	22ff      	movhi	r2, #255	; 0xff
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
   1c632:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			Status = VL53L0X_WrByte(Dev,
   1c636:	2146      	movs	r1, #70	; 0x46
   1c638:	4628      	mov	r0, r5
   1c63a:	f7fd ff9f 	bl	1a57c <VL53L0X_WrByte>
   1c63e:	4604      	mov	r4, r0
}
   1c640:	4620      	mov	r0, r4
   1c642:	b005      	add	sp, #20
   1c644:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
   1c646:	2903      	cmp	r1, #3
   1c648:	d11f      	bne.n	1c68a <set_sequence_step_timeout+0x8e>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
   1c64a:	f10d 0205 	add.w	r2, sp, #5
   1c64e:	2100      	movs	r1, #0
   1c650:	f7fe fd0a 	bl	1b068 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_calc_timeout_mclks(Dev,
   1c654:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1c658:	4631      	mov	r1, r6
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
   1c65a:	4604      	mov	r4, r0
					VL53L0X_calc_timeout_mclks(Dev,
   1c65c:	4628      	mov	r0, r5
   1c65e:	f7fb fac5 	bl	17bec <VL53L0X_calc_timeout_mclks>
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
   1c662:	b280      	uxth	r0, r0
   1c664:	f7ff ff33 	bl	1c4ce <VL53L0X_encode_timeout>
   1c668:	4602      	mov	r2, r0
   1c66a:	f8ad 0006 	strh.w	r0, [sp, #6]
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
   1c66e:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
			if (Status == VL53L0X_ERROR_NONE) {
   1c672:	2c00      	cmp	r4, #0
   1c674:	d1e4      	bne.n	1c640 <set_sequence_step_timeout+0x44>
				Status = VL53L0X_WrWord(Dev,
   1c676:	2151      	movs	r1, #81	; 0x51
   1c678:	4628      	mov	r0, r5
   1c67a:	f7fd ff94 	bl	1a5a6 <VL53L0X_WrWord>
			if (Status == VL53L0X_ERROR_NONE) {
   1c67e:	4604      	mov	r4, r0
   1c680:	2800      	cmp	r0, #0
   1c682:	d1dd      	bne.n	1c640 <set_sequence_step_timeout+0x44>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
   1c684:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
   1c688:	e7da      	b.n	1c640 <set_sequence_step_timeout+0x44>
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
   1c68a:	2904      	cmp	r1, #4
   1c68c:	d139      	bne.n	1c702 <set_sequence_step_timeout+0x106>
			VL53L0X_GetSequenceStepEnables(Dev,
   1c68e:	a902      	add	r1, sp, #8
   1c690:	f7fe fd3e 	bl	1b110 <VL53L0X_GetSequenceStepEnables>
			if (SchedulerSequenceSteps.PreRangeOn) {
   1c694:	f89d 700b 	ldrb.w	r7, [sp, #11]
   1c698:	b1b7      	cbz	r7, 1c6c8 <set_sequence_step_timeout+0xcc>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
   1c69a:	f10d 0205 	add.w	r2, sp, #5
   1c69e:	2100      	movs	r1, #0
   1c6a0:	4628      	mov	r0, r5
   1c6a2:	f7fe fce1 	bl	1b068 <VL53L0X_GetVcselPulsePeriod>
				if (Status == VL53L0X_ERROR_NONE) {
   1c6a6:	4604      	mov	r4, r0
   1c6a8:	2800      	cmp	r0, #0
   1c6aa:	d1c9      	bne.n	1c640 <set_sequence_step_timeout+0x44>
					Status = VL53L0X_RdWord(Dev, 0x51,
   1c6ac:	f10d 0206 	add.w	r2, sp, #6
   1c6b0:	2151      	movs	r1, #81	; 0x51
   1c6b2:	4628      	mov	r0, r5
   1c6b4:	f7fd ffcb 	bl	1a64e <VL53L0X_RdWord>
   1c6b8:	4604      	mov	r4, r0
						VL53L0X_decode_timeout(
   1c6ba:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1c6be:	f7ff ff15 	bl	1c4ec <VL53L0X_decode_timeout>
					PreRangeTimeOutMClks =
   1c6c2:	b287      	uxth	r7, r0
			if (Status == VL53L0X_ERROR_NONE) {
   1c6c4:	2c00      	cmp	r4, #0
   1c6c6:	d1bb      	bne.n	1c640 <set_sequence_step_timeout+0x44>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
   1c6c8:	f10d 0205 	add.w	r2, sp, #5
   1c6cc:	2101      	movs	r1, #1
   1c6ce:	4628      	mov	r0, r5
   1c6d0:	f7fe fcca 	bl	1b068 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
   1c6d4:	4604      	mov	r4, r0
   1c6d6:	2800      	cmp	r0, #0
   1c6d8:	d1b2      	bne.n	1c640 <set_sequence_step_timeout+0x44>
					VL53L0X_calc_timeout_mclks(Dev,
   1c6da:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1c6de:	4631      	mov	r1, r6
   1c6e0:	4628      	mov	r0, r5
   1c6e2:	f7fb fa83 	bl	17bec <VL53L0X_calc_timeout_mclks>
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
   1c6e6:	4438      	add	r0, r7
   1c6e8:	f7ff fef1 	bl	1c4ce <VL53L0X_encode_timeout>
					Status = VL53L0X_WrWord(Dev, 0x71,
   1c6ec:	2171      	movs	r1, #113	; 0x71
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
   1c6ee:	4602      	mov	r2, r0
					Status = VL53L0X_WrWord(Dev, 0x71,
   1c6f0:	4628      	mov	r0, r5
   1c6f2:	f7fd ff58 	bl	1a5a6 <VL53L0X_WrWord>
				if (Status == VL53L0X_ERROR_NONE) {
   1c6f6:	4604      	mov	r4, r0
   1c6f8:	2800      	cmp	r0, #0
   1c6fa:	d1a1      	bne.n	1c640 <set_sequence_step_timeout+0x44>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
   1c6fc:	f8c5 60dc 	str.w	r6, [r5, #220]	; 0xdc
   1c700:	e79e      	b.n	1c640 <set_sequence_step_timeout+0x44>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
   1c702:	f06f 0403 	mvn.w	r4, #3
   1c706:	e79b      	b.n	1c640 <set_sequence_step_timeout+0x44>

0001c708 <VL53L0X_set_vcsel_pulse_period>:
{
   1c708:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint8_t PhaseCalInt = 0;
   1c70c:	2300      	movs	r3, #0
	if ((VCSELPulsePeriodPCLK % 2) != 0) {
   1c70e:	f012 0801 	ands.w	r8, r2, #1
{
   1c712:	4605      	mov	r5, r0
   1c714:	460f      	mov	r7, r1
   1c716:	4616      	mov	r6, r2
	uint8_t PhaseCalInt = 0;
   1c718:	f88d 3003 	strb.w	r3, [sp, #3]
	if ((VCSELPulsePeriodPCLK % 2) != 0) {
   1c71c:	d104      	bne.n	1c728 <VL53L0X_set_vcsel_pulse_period+0x20>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
   1c71e:	b931      	cbnz	r1, 1c72e <VL53L0X_set_vcsel_pulse_period+0x26>
   1c720:	f1a2 030c 	sub.w	r3, r2, #12
   1c724:	2b06      	cmp	r3, #6
   1c726:	d954      	bls.n	1c7d2 <VL53L0X_set_vcsel_pulse_period+0xca>
   1c728:	f06f 0003 	mvn.w	r0, #3
   1c72c:	e05e      	b.n	1c7ec <VL53L0X_set_vcsel_pulse_period+0xe4>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
   1c72e:	2901      	cmp	r1, #1
   1c730:	d01b      	beq.n	1c76a <VL53L0X_set_vcsel_pulse_period+0x62>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
   1c732:	0874      	lsrs	r4, r6, #1
   1c734:	3c01      	subs	r4, #1
   1c736:	b2e4      	uxtb	r4, r4
		switch (VcselPeriodType) {
   1c738:	2f00      	cmp	r7, #0
   1c73a:	f000 80b4 	beq.w	1c8a6 <VL53L0X_set_vcsel_pulse_period+0x19e>
   1c73e:	2f01      	cmp	r7, #1
   1c740:	d1f2      	bne.n	1c728 <VL53L0X_set_vcsel_pulse_period+0x20>
			Status = get_sequence_step_timeout(Dev,
   1c742:	aa01      	add	r2, sp, #4
   1c744:	2104      	movs	r1, #4
   1c746:	4628      	mov	r0, r5
   1c748:	f7ff fed6 	bl	1c4f8 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
   1c74c:	b950      	cbnz	r0, 1c764 <VL53L0X_set_vcsel_pulse_period+0x5c>
				Status = VL53L0X_WrByte(Dev,
   1c74e:	4622      	mov	r2, r4
   1c750:	2170      	movs	r1, #112	; 0x70
   1c752:	4628      	mov	r0, r5
   1c754:	f7fd ff12 	bl	1a57c <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
   1c758:	b920      	cbnz	r0, 1c764 <VL53L0X_set_vcsel_pulse_period+0x5c>
				Status = set_sequence_step_timeout(Dev,
   1c75a:	9a01      	ldr	r2, [sp, #4]
   1c75c:	2104      	movs	r1, #4
   1c75e:	4628      	mov	r0, r5
   1c760:	f7ff ff4c 	bl	1c5fc <set_sequence_step_timeout>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
   1c764:	f885 60e0 	strb.w	r6, [r5, #224]	; 0xe0
			break;
   1c768:	e0bc      	b.n	1c8e4 <VL53L0X_set_vcsel_pulse_period+0x1dc>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
   1c76a:	f1a2 0308 	sub.w	r3, r2, #8
   1c76e:	2b06      	cmp	r3, #6
   1c770:	d8da      	bhi.n	1c728 <VL53L0X_set_vcsel_pulse_period+0x20>
		if (VCSELPulsePeriodPCLK == 8) {
   1c772:	2a08      	cmp	r2, #8
   1c774:	d149      	bne.n	1c80a <VL53L0X_set_vcsel_pulse_period+0x102>
			Status = VL53L0X_WrByte(Dev,
   1c776:	2210      	movs	r2, #16
   1c778:	2148      	movs	r1, #72	; 0x48
   1c77a:	f7fd feff 	bl	1a57c <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
   1c77e:	4632      	mov	r2, r6
   1c780:	2147      	movs	r1, #71	; 0x47
   1c782:	4628      	mov	r0, r5
   1c784:	f7fd fefa 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
   1c788:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
   1c78a:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
   1c78c:	2132      	movs	r1, #50	; 0x32
   1c78e:	4628      	mov	r0, r5
   1c790:	f7fd fef4 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
   1c794:	220c      	movs	r2, #12
			Status |= VL53L0X_WrByte(Dev,
   1c796:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
   1c798:	2130      	movs	r1, #48	; 0x30
   1c79a:	4628      	mov	r0, r5
   1c79c:	f7fd feee 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
   1c7a0:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
   1c7a2:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
   1c7a4:	463a      	mov	r2, r7
   1c7a6:	21ff      	movs	r1, #255	; 0xff
   1c7a8:	4628      	mov	r0, r5
   1c7aa:	f7fd fee7 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
   1c7ae:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
   1c7b0:	4304      	orrs	r4, r0
   1c7b2:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
   1c7b4:	2230      	movs	r2, #48	; 0x30
			Status |= VL53L0X_WrByte(Dev,
   1c7b6:	2130      	movs	r1, #48	; 0x30
   1c7b8:	4628      	mov	r0, r5
   1c7ba:	f7fd fedf 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
   1c7be:	4642      	mov	r2, r8
			Status |= VL53L0X_WrByte(Dev,
   1c7c0:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
   1c7c2:	21ff      	movs	r1, #255	; 0xff
   1c7c4:	4628      	mov	r0, r5
   1c7c6:	f7fd fed9 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
   1c7ca:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
   1c7cc:	4320      	orrs	r0, r4
   1c7ce:	b240      	sxtb	r0, r0
   1c7d0:	e00a      	b.n	1c7e8 <VL53L0X_set_vcsel_pulse_period+0xe0>
		if (VCSELPulsePeriodPCLK == 12) {
   1c7d2:	2a0c      	cmp	r2, #12
   1c7d4:	d10d      	bne.n	1c7f2 <VL53L0X_set_vcsel_pulse_period+0xea>
			Status = VL53L0X_WrByte(Dev,
   1c7d6:	2218      	movs	r2, #24
			Status = VL53L0X_WrByte(Dev,
   1c7d8:	2157      	movs	r1, #87	; 0x57
   1c7da:	f7fd fecf 	bl	1a57c <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
   1c7de:	2208      	movs	r2, #8
   1c7e0:	2156      	movs	r1, #86	; 0x56
   1c7e2:	4628      	mov	r0, r5
   1c7e4:	f7fd feca 	bl	1a57c <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE) {
   1c7e8:	2800      	cmp	r0, #0
   1c7ea:	d0a2      	beq.n	1c732 <VL53L0X_set_vcsel_pulse_period+0x2a>
}
   1c7ec:	b004      	add	sp, #16
   1c7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (VCSELPulsePeriodPCLK == 14) {
   1c7f2:	2a0e      	cmp	r2, #14
   1c7f4:	d101      	bne.n	1c7fa <VL53L0X_set_vcsel_pulse_period+0xf2>
			Status = VL53L0X_WrByte(Dev,
   1c7f6:	2230      	movs	r2, #48	; 0x30
   1c7f8:	e7ee      	b.n	1c7d8 <VL53L0X_set_vcsel_pulse_period+0xd0>
		} else if (VCSELPulsePeriodPCLK == 16) {
   1c7fa:	2a10      	cmp	r2, #16
   1c7fc:	d101      	bne.n	1c802 <VL53L0X_set_vcsel_pulse_period+0xfa>
			Status = VL53L0X_WrByte(Dev,
   1c7fe:	2240      	movs	r2, #64	; 0x40
   1c800:	e7ea      	b.n	1c7d8 <VL53L0X_set_vcsel_pulse_period+0xd0>
		} else if (VCSELPulsePeriodPCLK == 18) {
   1c802:	2a12      	cmp	r2, #18
   1c804:	d195      	bne.n	1c732 <VL53L0X_set_vcsel_pulse_period+0x2a>
			Status = VL53L0X_WrByte(Dev,
   1c806:	2250      	movs	r2, #80	; 0x50
   1c808:	e7e6      	b.n	1c7d8 <VL53L0X_set_vcsel_pulse_period+0xd0>
		} else if (VCSELPulsePeriodPCLK == 10) {
   1c80a:	2a0a      	cmp	r2, #10
   1c80c:	d120      	bne.n	1c850 <VL53L0X_set_vcsel_pulse_period+0x148>
			Status = VL53L0X_WrByte(Dev,
   1c80e:	2228      	movs	r2, #40	; 0x28
   1c810:	2148      	movs	r1, #72	; 0x48
   1c812:	f7fd feb3 	bl	1a57c <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
   1c816:	2208      	movs	r2, #8
   1c818:	2147      	movs	r1, #71	; 0x47
   1c81a:	4628      	mov	r0, r5
   1c81c:	f7fd feae 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
   1c820:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
   1c822:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
   1c824:	2132      	movs	r1, #50	; 0x32
   1c826:	4628      	mov	r0, r5
   1c828:	f7fd fea8 	bl	1a57c <VL53L0X_WrByte>
   1c82c:	4304      	orrs	r4, r0
   1c82e:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
   1c830:	2209      	movs	r2, #9
			Status |= VL53L0X_WrByte(Dev,
   1c832:	2130      	movs	r1, #48	; 0x30
   1c834:	4628      	mov	r0, r5
   1c836:	f7fd fea1 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
   1c83a:	463a      	mov	r2, r7
			Status |= VL53L0X_WrByte(Dev,
   1c83c:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
   1c83e:	21ff      	movs	r1, #255	; 0xff
   1c840:	4628      	mov	r0, r5
   1c842:	f7fd fe9b 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
   1c846:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
   1c848:	4304      	orrs	r4, r0
   1c84a:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
   1c84c:	2220      	movs	r2, #32
   1c84e:	e7b2      	b.n	1c7b6 <VL53L0X_set_vcsel_pulse_period+0xae>
		} else if (VCSELPulsePeriodPCLK == 12) {
   1c850:	2a0c      	cmp	r2, #12
   1c852:	d112      	bne.n	1c87a <VL53L0X_set_vcsel_pulse_period+0x172>
			Status = VL53L0X_WrByte(Dev,
   1c854:	2238      	movs	r2, #56	; 0x38
   1c856:	2148      	movs	r1, #72	; 0x48
   1c858:	f7fd fe90 	bl	1a57c <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
   1c85c:	2208      	movs	r2, #8
   1c85e:	2147      	movs	r1, #71	; 0x47
   1c860:	4628      	mov	r0, r5
   1c862:	f7fd fe8b 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
   1c866:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
   1c868:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
   1c86a:	2132      	movs	r1, #50	; 0x32
   1c86c:	4628      	mov	r0, r5
   1c86e:	f7fd fe85 	bl	1a57c <VL53L0X_WrByte>
   1c872:	4304      	orrs	r4, r0
   1c874:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
   1c876:	2208      	movs	r2, #8
   1c878:	e7db      	b.n	1c832 <VL53L0X_set_vcsel_pulse_period+0x12a>
		} else if (VCSELPulsePeriodPCLK == 14) {
   1c87a:	2a0e      	cmp	r2, #14
   1c87c:	f47f af59 	bne.w	1c732 <VL53L0X_set_vcsel_pulse_period+0x2a>
			Status = VL53L0X_WrByte(Dev,
   1c880:	2248      	movs	r2, #72	; 0x48
   1c882:	4611      	mov	r1, r2
   1c884:	f7fd fe7a 	bl	1a57c <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
   1c888:	2208      	movs	r2, #8
   1c88a:	2147      	movs	r1, #71	; 0x47
   1c88c:	4628      	mov	r0, r5
   1c88e:	f7fd fe75 	bl	1a57c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
   1c892:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
   1c894:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
   1c896:	2132      	movs	r1, #50	; 0x32
   1c898:	4628      	mov	r0, r5
   1c89a:	f7fd fe6f 	bl	1a57c <VL53L0X_WrByte>
   1c89e:	4304      	orrs	r4, r0
   1c8a0:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
   1c8a2:	2207      	movs	r2, #7
   1c8a4:	e7c5      	b.n	1c832 <VL53L0X_set_vcsel_pulse_period+0x12a>
			Status = get_sequence_step_timeout(Dev,
   1c8a6:	aa02      	add	r2, sp, #8
   1c8a8:	2103      	movs	r1, #3
   1c8aa:	4628      	mov	r0, r5
   1c8ac:	f7ff fe24 	bl	1c4f8 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
   1c8b0:	b9b0      	cbnz	r0, 1c8e0 <VL53L0X_set_vcsel_pulse_period+0x1d8>
				Status = get_sequence_step_timeout(Dev,
   1c8b2:	aa03      	add	r2, sp, #12
   1c8b4:	2102      	movs	r1, #2
   1c8b6:	4628      	mov	r0, r5
   1c8b8:	f7ff fe1e 	bl	1c4f8 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
   1c8bc:	b980      	cbnz	r0, 1c8e0 <VL53L0X_set_vcsel_pulse_period+0x1d8>
				Status = VL53L0X_WrByte(Dev,
   1c8be:	4622      	mov	r2, r4
   1c8c0:	2150      	movs	r1, #80	; 0x50
   1c8c2:	4628      	mov	r0, r5
   1c8c4:	f7fd fe5a 	bl	1a57c <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
   1c8c8:	b950      	cbnz	r0, 1c8e0 <VL53L0X_set_vcsel_pulse_period+0x1d8>
				Status = set_sequence_step_timeout(Dev,
   1c8ca:	9a02      	ldr	r2, [sp, #8]
   1c8cc:	2103      	movs	r1, #3
   1c8ce:	4628      	mov	r0, r5
   1c8d0:	f7ff fe94 	bl	1c5fc <set_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
   1c8d4:	b920      	cbnz	r0, 1c8e0 <VL53L0X_set_vcsel_pulse_period+0x1d8>
				Status = set_sequence_step_timeout(Dev,
   1c8d6:	9a03      	ldr	r2, [sp, #12]
   1c8d8:	2102      	movs	r1, #2
   1c8da:	4628      	mov	r0, r5
   1c8dc:	f7ff fe8e 	bl	1c5fc <set_sequence_step_timeout>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
   1c8e0:	f885 60e8 	strb.w	r6, [r5, #232]	; 0xe8
	if (Status == VL53L0X_ERROR_NONE) {
   1c8e4:	2800      	cmp	r0, #0
   1c8e6:	d181      	bne.n	1c7ec <VL53L0X_set_vcsel_pulse_period+0xe4>
		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
   1c8e8:	6969      	ldr	r1, [r5, #20]
   1c8ea:	4628      	mov	r0, r5
   1c8ec:	f7fe fbb8 	bl	1b060 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L0X_ERROR_NONE)
   1c8f0:	2800      	cmp	r0, #0
   1c8f2:	f47f af7b 	bne.w	1c7ec <VL53L0X_set_vcsel_pulse_period+0xe4>
		Status = VL53L0X_perform_phase_calibration(
   1c8f6:	4602      	mov	r2, r0
   1c8f8:	2301      	movs	r3, #1
   1c8fa:	f10d 0103 	add.w	r1, sp, #3
   1c8fe:	4628      	mov	r0, r5
   1c900:	f7ff f94e 	bl	1bba0 <VL53L0X_perform_phase_calibration>
   1c904:	e772      	b.n	1c7ec <VL53L0X_set_vcsel_pulse_period+0xe4>

0001c906 <VL53L0X_get_vcsel_pulse_period>:
{
   1c906:	b513      	push	{r0, r1, r4, lr}
   1c908:	4614      	mov	r4, r2
	switch (VcselPeriodType) {
   1c90a:	b129      	cbz	r1, 1c918 <VL53L0X_get_vcsel_pulse_period+0x12>
   1c90c:	2901      	cmp	r1, #1
   1c90e:	d010      	beq.n	1c932 <VL53L0X_get_vcsel_pulse_period+0x2c>
   1c910:	f06f 0003 	mvn.w	r0, #3
}
   1c914:	b002      	add	sp, #8
   1c916:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
   1c918:	f10d 0207 	add.w	r2, sp, #7
   1c91c:	2150      	movs	r1, #80	; 0x50
		Status = VL53L0X_RdByte(Dev,
   1c91e:	f7fd fe5a 	bl	1a5d6 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE)
   1c922:	2800      	cmp	r0, #0
   1c924:	d1f6      	bne.n	1c914 <VL53L0X_get_vcsel_pulse_period+0xe>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
   1c926:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c92a:	3301      	adds	r3, #1
   1c92c:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
   1c92e:	7023      	strb	r3, [r4, #0]
   1c930:	e7f0      	b.n	1c914 <VL53L0X_get_vcsel_pulse_period+0xe>
		Status = VL53L0X_RdByte(Dev,
   1c932:	f10d 0207 	add.w	r2, sp, #7
   1c936:	2170      	movs	r1, #112	; 0x70
   1c938:	e7f1      	b.n	1c91e <VL53L0X_get_vcsel_pulse_period+0x18>

0001c93a <VL53L0X_set_measurement_timing_budget_micro_seconds>:
{
   1c93a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
   1c93c:	2300      	movs	r3, #0
{
   1c93e:	b085      	sub	sp, #20
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
   1c940:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   1c944:	e9cd 2300 	strd	r2, r3, [sp]
	if (MeasurementTimingBudgetMicroSeconds
   1c948:	f644 631f 	movw	r3, #19999	; 0x4e1f
   1c94c:	4299      	cmp	r1, r3
{
   1c94e:	4606      	mov	r6, r0
   1c950:	460f      	mov	r7, r1
	if (MeasurementTimingBudgetMicroSeconds
   1c952:	d804      	bhi.n	1c95e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24>
		return Status;
   1c954:	f06f 0503 	mvn.w	r5, #3
}
   1c958:	4628      	mov	r0, r5
   1c95a:	b005      	add	sp, #20
   1c95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
   1c95e:	a902      	add	r1, sp, #8
   1c960:	f7fe fbd6 	bl	1b110 <VL53L0X_GetSequenceStepEnables>
	if (Status == VL53L0X_ERROR_NONE &&
   1c964:	4605      	mov	r5, r0
   1c966:	2800      	cmp	r0, #0
   1c968:	d1f6      	bne.n	1c958 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		SchedulerSequenceSteps.MsrcOn ||
   1c96a:	f89d 2009 	ldrb.w	r2, [sp, #9]
   1c96e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1c972:	4313      	orrs	r3, r2
   1c974:	f89d 200a 	ldrb.w	r2, [sp, #10]
   1c978:	4313      	orrs	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
   1c97a:	f6a7 3436 	subw	r4, r7, #2870	; 0xb36
		SchedulerSequenceSteps.MsrcOn ||
   1c97e:	d01b      	beq.n	1c9b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
		Status = get_sequence_step_timeout(Dev,
   1c980:	466a      	mov	r2, sp
   1c982:	2102      	movs	r1, #2
   1c984:	4630      	mov	r0, r6
   1c986:	f7ff fdb7 	bl	1c4f8 <get_sequence_step_timeout>
		if (Status != VL53L0X_ERROR_NONE)
   1c98a:	2800      	cmp	r0, #0
   1c98c:	d13b      	bne.n	1ca06 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
		if (SchedulerSequenceSteps.TccOn) {
   1c98e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1c992:	b12b      	cbz	r3, 1c9a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x66>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
   1c994:	9b00      	ldr	r3, [sp, #0]
   1c996:	f203 234e 	addw	r3, r3, #590	; 0x24e
			if (SubTimeout <
   1c99a:	429c      	cmp	r4, r3
   1c99c:	d9da      	bls.n	1c954 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
				FinalRangeTimingBudgetMicroSeconds -=
   1c99e:	1ae4      	subs	r4, r4, r3
		if (SchedulerSequenceSteps.DssOn) {
   1c9a0:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1c9a4:	b323      	cbz	r3, 1c9f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xb6>
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
   1c9a6:	9b00      	ldr	r3, [sp, #0]
   1c9a8:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
   1c9ac:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
   1c9b0:	ea4f 0243 	mov.w	r2, r3, lsl #1
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
   1c9b4:	d9ce      	bls.n	1c954 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
   1c9b6:	1aa4      	subs	r4, r4, r2
	if (SchedulerSequenceSteps.PreRangeOn) {
   1c9b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c9bc:	b15b      	cbz	r3, 1c9d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9c>
		Status = get_sequence_step_timeout(Dev,
   1c9be:	aa01      	add	r2, sp, #4
   1c9c0:	2103      	movs	r1, #3
   1c9c2:	4630      	mov	r0, r6
   1c9c4:	f7ff fd98 	bl	1c4f8 <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
   1c9c8:	9b01      	ldr	r3, [sp, #4]
   1c9ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
   1c9ce:	42a3      	cmp	r3, r4
   1c9d0:	d2c0      	bcs.n	1c954 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
	if (Status == VL53L0X_ERROR_NONE &&
   1c9d2:	b9c0      	cbnz	r0, 1ca06 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
   1c9d4:	1ae4      	subs	r4, r4, r3
	if (Status == VL53L0X_ERROR_NONE &&
   1c9d6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c9da:	2b00      	cmp	r3, #0
   1c9dc:	d0bc      	beq.n	1c958 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		Status = set_sequence_step_timeout(Dev,
   1c9de:	f2a4 2226 	subw	r2, r4, #550	; 0x226
   1c9e2:	2104      	movs	r1, #4
   1c9e4:	4630      	mov	r0, r6
   1c9e6:	f7ff fe09 	bl	1c5fc <set_sequence_step_timeout>
		VL53L0X_SETPARAMETERFIELD(Dev,
   1c9ea:	6177      	str	r7, [r6, #20]
		Status = set_sequence_step_timeout(Dev,
   1c9ec:	4605      	mov	r5, r0
		VL53L0X_SETPARAMETERFIELD(Dev,
   1c9ee:	e7b3      	b.n	1c958 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		} else if (SchedulerSequenceSteps.MsrcOn) {
   1c9f0:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1c9f4:	2b00      	cmp	r3, #0
   1c9f6:	d0df      	beq.n	1c9b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
   1c9f8:	9b00      	ldr	r3, [sp, #0]
   1c9fa:	f503 7325 	add.w	r3, r3, #660	; 0x294
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
   1c9fe:	429c      	cmp	r4, r3
   1ca00:	d9a8      	bls.n	1c954 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
   1ca02:	1ae4      	subs	r4, r4, r3
	if (Status != VL53L0X_ERROR_NONE) {
   1ca04:	e7d8      	b.n	1c9b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
   1ca06:	4605      	mov	r5, r0
   1ca08:	e7a6      	b.n	1c958 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>

0001ca0a <VL53L0X_get_measurement_timing_budget_micro_seconds>:
{
   1ca0a:	b570      	push	{r4, r5, r6, lr}
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
   1ca0c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
{
   1ca10:	b086      	sub	sp, #24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
   1ca12:	2300      	movs	r3, #0
   1ca14:	e9cd 2302 	strd	r2, r3, [sp, #8]
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
   1ca18:	f640 3336 	movw	r3, #2870	; 0xb36
   1ca1c:	600b      	str	r3, [r1, #0]
{
   1ca1e:	460c      	mov	r4, r1
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
   1ca20:	a904      	add	r1, sp, #16
{
   1ca22:	4606      	mov	r6, r0
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
   1ca24:	f7fe fb74 	bl	1b110 <VL53L0X_GetSequenceStepEnables>
	if (Status != VL53L0X_ERROR_NONE) {
   1ca28:	4605      	mov	r5, r0
   1ca2a:	2800      	cmp	r0, #0
   1ca2c:	d136      	bne.n	1ca9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		SchedulerSequenceSteps.MsrcOn ||
   1ca2e:	f89d 2011 	ldrb.w	r2, [sp, #17]
   1ca32:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1ca36:	4313      	orrs	r3, r2
   1ca38:	f89d 2012 	ldrb.w	r2, [sp, #18]
   1ca3c:	4313      	orrs	r3, r2
   1ca3e:	d019      	beq.n	1ca74 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		Status = get_sequence_step_timeout(Dev,
   1ca40:	aa02      	add	r2, sp, #8
   1ca42:	2102      	movs	r1, #2
   1ca44:	4630      	mov	r0, r6
   1ca46:	f7ff fd57 	bl	1c4f8 <get_sequence_step_timeout>
		if (Status == VL53L0X_ERROR_NONE) {
   1ca4a:	2800      	cmp	r0, #0
   1ca4c:	d140      	bne.n	1cad0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
			if (SchedulerSequenceSteps.TccOn) {
   1ca4e:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1ca52:	b12b      	cbz	r3, 1ca60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x56>
					MsrcDccTccTimeoutMicroSeconds +
   1ca54:	9b02      	ldr	r3, [sp, #8]
   1ca56:	f203 224e 	addw	r2, r3, #590	; 0x24e
				*pMeasurementTimingBudgetMicroSeconds +=
   1ca5a:	6823      	ldr	r3, [r4, #0]
   1ca5c:	4413      	add	r3, r2
   1ca5e:	6023      	str	r3, [r4, #0]
			if (SchedulerSequenceSteps.DssOn) {
   1ca60:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1ca64:	b1eb      	cbz	r3, 1caa2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x98>
				2 * (MsrcDccTccTimeoutMicroSeconds +
   1ca66:	9b02      	ldr	r3, [sp, #8]
   1ca68:	f203 22b2 	addw	r2, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
   1ca6c:	6823      	ldr	r3, [r4, #0]
   1ca6e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
				*pMeasurementTimingBudgetMicroSeconds +=
   1ca72:	6023      	str	r3, [r4, #0]
		if (SchedulerSequenceSteps.PreRangeOn) {
   1ca74:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1ca78:	b9eb      	cbnz	r3, 1cab6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xac>
		if (SchedulerSequenceSteps.FinalRangeOn) {
   1ca7a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1ca7e:	b15b      	cbz	r3, 1ca98 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8e>
			Status = get_sequence_step_timeout(Dev,
   1ca80:	aa01      	add	r2, sp, #4
   1ca82:	2104      	movs	r1, #4
   1ca84:	4630      	mov	r0, r6
   1ca86:	f7ff fd37 	bl	1c4f8 <get_sequence_step_timeout>
				(FinalRangeTimeoutMicroSeconds +
   1ca8a:	9b01      	ldr	r3, [sp, #4]
   1ca8c:	f203 2226 	addw	r2, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
   1ca90:	6823      	ldr	r3, [r4, #0]
   1ca92:	4413      	add	r3, r2
   1ca94:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
   1ca96:	b9d8      	cbnz	r0, 1cad0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		VL53L0X_SETPARAMETERFIELD(Dev,
   1ca98:	6823      	ldr	r3, [r4, #0]
   1ca9a:	6173      	str	r3, [r6, #20]
}
   1ca9c:	4628      	mov	r0, r5
   1ca9e:	b006      	add	sp, #24
   1caa0:	bd70      	pop	{r4, r5, r6, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
   1caa2:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1caa6:	2b00      	cmp	r3, #0
   1caa8:	d0e4      	beq.n	1ca74 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
					MsrcDccTccTimeoutMicroSeconds +
   1caaa:	9b02      	ldr	r3, [sp, #8]
   1caac:	f503 7225 	add.w	r2, r3, #660	; 0x294
				*pMeasurementTimingBudgetMicroSeconds +=
   1cab0:	6823      	ldr	r3, [r4, #0]
   1cab2:	4413      	add	r3, r2
   1cab4:	e7dd      	b.n	1ca72 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x68>
			Status = get_sequence_step_timeout(Dev,
   1cab6:	aa03      	add	r2, sp, #12
   1cab8:	2103      	movs	r1, #3
   1caba:	4630      	mov	r0, r6
   1cabc:	f7ff fd1c 	bl	1c4f8 <get_sequence_step_timeout>
				PreRangeTimeoutMicroSeconds +
   1cac0:	9b03      	ldr	r3, [sp, #12]
   1cac2:	f503 7225 	add.w	r2, r3, #660	; 0x294
			*pMeasurementTimingBudgetMicroSeconds +=
   1cac6:	6823      	ldr	r3, [r4, #0]
   1cac8:	4413      	add	r3, r2
   1caca:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
   1cacc:	2800      	cmp	r0, #0
   1cace:	d0d4      	beq.n	1ca7a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x70>
   1cad0:	4605      	mov	r5, r0
   1cad2:	e7e3      	b.n	1ca9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>

0001cad4 <VL53L0X_load_tuning_settings>:
{
   1cad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Index = 0;
   1cad6:	2200      	movs	r2, #0
{
   1cad8:	4607      	mov	r7, r0
   1cada:	460e      	mov	r6, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
   1cadc:	4610      	mov	r0, r2
	while ((*(pTuningSettingBuffer + Index) != 0) &&
   1cade:	5cb3      	ldrb	r3, [r6, r2]
   1cae0:	b103      	cbz	r3, 1cae4 <VL53L0X_load_tuning_settings+0x10>
   1cae2:	b108      	cbz	r0, 1cae8 <VL53L0X_load_tuning_settings+0x14>
}
   1cae4:	b003      	add	sp, #12
   1cae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Index++;
   1cae8:	1c55      	adds	r5, r2, #1
		if (NumberOfWrites == 0xFF) {
   1caea:	2bff      	cmp	r3, #255	; 0xff
			SelectParam = *(pTuningSettingBuffer + Index);
   1caec:	5d71      	ldrb	r1, [r6, r5]
		if (NumberOfWrites == 0xFF) {
   1caee:	d128      	bne.n	1cb42 <VL53L0X_load_tuning_settings+0x6e>
			Index++;
   1caf0:	1c95      	adds	r5, r2, #2
				msb = *(pTuningSettingBuffer + Index);
   1caf2:	5d73      	ldrb	r3, [r6, r5]
			switch (SelectParam) {
   1caf4:	2903      	cmp	r1, #3
   1caf6:	d837      	bhi.n	1cb68 <VL53L0X_load_tuning_settings+0x94>
   1caf8:	e8df f001 	tbb	[pc, r1]
   1cafc:	1b130b02 	.word	0x1b130b02
				Index++;
   1cb00:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
   1cb02:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
   1cb04:	78d2      	ldrb	r2, [r2, #3]
   1cb06:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
   1cb0a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
			Status = VL53L0X_ERROR_INVALID_PARAMS;
   1cb0e:	462a      	mov	r2, r5
   1cb10:	e7e5      	b.n	1cade <VL53L0X_load_tuning_settings+0xa>
				Index++;
   1cb12:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
   1cb14:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
   1cb16:	78d2      	ldrb	r2, [r2, #3]
   1cb18:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
   1cb1c:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
				break;
   1cb20:	e7f5      	b.n	1cb0e <VL53L0X_load_tuning_settings+0x3a>
				Index++;
   1cb22:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
   1cb24:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
   1cb26:	78d2      	ldrb	r2, [r2, #3]
   1cb28:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
   1cb2c:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
				break;
   1cb30:	e7ed      	b.n	1cb0e <VL53L0X_load_tuning_settings+0x3a>
				Index++;
   1cb32:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
   1cb34:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
   1cb36:	78d2      	ldrb	r2, [r2, #3]
   1cb38:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, targetRefRate, Temp16);
   1cb3c:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
				break;
   1cb40:	e7e5      	b.n	1cb0e <VL53L0X_load_tuning_settings+0x3a>
		} else if (NumberOfWrites <= 4) {
   1cb42:	2b04      	cmp	r3, #4
   1cb44:	d810      	bhi.n	1cb68 <VL53L0X_load_tuning_settings+0x94>
			Index++;
   1cb46:	f10d 0c04 	add.w	ip, sp, #4
   1cb4a:	1c94      	adds	r4, r2, #2
			for (i = 0; i < NumberOfWrites; i++) {
   1cb4c:	4435      	add	r5, r6
   1cb4e:	4662      	mov	r2, ip
   1cb50:	3001      	adds	r0, #1
				localBuffer[i] = *(pTuningSettingBuffer +
   1cb52:	f815 ef01 	ldrb.w	lr, [r5, #1]!
   1cb56:	f80c eb01 	strb.w	lr, [ip], #1
			for (i = 0; i < NumberOfWrites; i++) {
   1cb5a:	4283      	cmp	r3, r0
   1cb5c:	dcf8      	bgt.n	1cb50 <VL53L0X_load_tuning_settings+0x7c>
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
   1cb5e:	4638      	mov	r0, r7
   1cb60:	18e5      	adds	r5, r4, r3
   1cb62:	f7fd fcd9 	bl	1a518 <VL53L0X_WriteMulti>
   1cb66:	e7d2      	b.n	1cb0e <VL53L0X_load_tuning_settings+0x3a>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
   1cb68:	f06f 0003 	mvn.w	r0, #3
   1cb6c:	e7cf      	b.n	1cb0e <VL53L0X_load_tuning_settings+0x3a>

0001cb6e <VL53L0X_get_total_xtalk_rate>:
{
   1cb6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	*ptotal_xtalk_rate_mcps = 0;
   1cb70:	2300      	movs	r3, #0
{
   1cb72:	460e      	mov	r6, r1
	*ptotal_xtalk_rate_mcps = 0;
   1cb74:	6013      	str	r3, [r2, #0]
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
   1cb76:	f10d 0107 	add.w	r1, sp, #7
{
   1cb7a:	4605      	mov	r5, r0
   1cb7c:	4614      	mov	r4, r2
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
   1cb7e:	f7fe fafe 	bl	1b17e <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
   1cb82:	b940      	cbnz	r0, 1cb96 <VL53L0X_get_total_xtalk_rate+0x28>
		if (xtalkCompEnable) {
   1cb84:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cb88:	b12b      	cbz	r3, 1cb96 <VL53L0X_get_total_xtalk_rate+0x28>
				pRangingMeasurementData->EffectiveSpadRtnCount *
   1cb8a:	8ab3      	ldrh	r3, [r6, #20]
			totalXtalkMegaCps =
   1cb8c:	6a2a      	ldr	r2, [r5, #32]
   1cb8e:	4353      	muls	r3, r2
				(totalXtalkMegaCps + 0x80) >> 8;
   1cb90:	3380      	adds	r3, #128	; 0x80
   1cb92:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
   1cb94:	6023      	str	r3, [r4, #0]
}
   1cb96:	b002      	add	sp, #8
   1cb98:	bd70      	pop	{r4, r5, r6, pc}

0001cb9a <VL53L0X_get_total_signal_rate>:
{
   1cb9a:	b513      	push	{r0, r1, r4, lr}
		pRangingMeasurementData->SignalRateRtnMegaCps;
   1cb9c:	68cb      	ldr	r3, [r1, #12]
	*ptotal_signal_rate_mcps =
   1cb9e:	6013      	str	r3, [r2, #0]
{
   1cba0:	4614      	mov	r4, r2
	Status = VL53L0X_get_total_xtalk_rate(
   1cba2:	aa01      	add	r2, sp, #4
   1cba4:	f7ff ffe3 	bl	1cb6e <VL53L0X_get_total_xtalk_rate>
	if (Status == VL53L0X_ERROR_NONE)
   1cba8:	b918      	cbnz	r0, 1cbb2 <VL53L0X_get_total_signal_rate+0x18>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
   1cbaa:	6823      	ldr	r3, [r4, #0]
   1cbac:	9a01      	ldr	r2, [sp, #4]
   1cbae:	4413      	add	r3, r2
   1cbb0:	6023      	str	r3, [r4, #0]
}
   1cbb2:	b002      	add	sp, #8
   1cbb4:	bd10      	pop	{r4, pc}

0001cbb6 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
   1cbb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbba:	b08b      	sub	sp, #44	; 0x2c
   1cbbc:	4691      	mov	r9, r2
   1cbbe:	469a      	mov	sl, r3
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
   1cbc0:	08ca      	lsrs	r2, r1, #3
	uint8_t SigmaLimitCheckEnable = 0;
   1cbc2:	2300      	movs	r3, #0
	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
   1cbc4:	9201      	str	r2, [sp, #4]
   1cbc6:	f3c1 07c3 	ubfx	r7, r1, #3, #4
	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
   1cbca:	f10d 020e 	add.w	r2, sp, #14
   1cbce:	4619      	mov	r1, r3
{
   1cbd0:	e9dd b814 	ldrd	fp, r8, [sp, #80]	; 0x50
   1cbd4:	4604      	mov	r4, r0
	uint8_t SigmaLimitCheckEnable = 0;
   1cbd6:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
   1cbda:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t SignalRefClipLimitCheckEnable = 0;
   1cbde:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
   1cbe2:	f88d 3011 	strb.w	r3, [sp, #17]
	uint16_t tmpWord = 0;
   1cbe6:	f8ad 3012 	strh.w	r3, [sp, #18]
	uint32_t Dmax_mm = 0;
   1cbea:	9309      	str	r3, [sp, #36]	; 0x24
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
   1cbec:	f7fe fb21 	bl	1b232 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
   1cbf0:	f89d 500e 	ldrb.w	r5, [sp, #14]
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
   1cbf4:	4606      	mov	r6, r0
	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
   1cbf6:	b1dd      	cbz	r5, 1cc30 <VL53L0X_get_pal_range_status+0x7a>
   1cbf8:	2300      	movs	r3, #0
   1cbfa:	2800      	cmp	r0, #0
   1cbfc:	f040 809d 	bne.w	1cd3a <VL53L0X_get_pal_range_status+0x184>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
   1cc00:	ab09      	add	r3, sp, #36	; 0x24
   1cc02:	aa05      	add	r2, sp, #20
   1cc04:	4659      	mov	r1, fp
   1cc06:	4620      	mov	r0, r4
   1cc08:	f7fb f882 	bl	17d10 <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
   1cc0c:	2800      	cmp	r0, #0
   1cc0e:	f040 8096 	bne.w	1cd3e <VL53L0X_get_pal_range_status+0x188>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
   1cc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cc14:	f8ab 300a 	strh.w	r3, [fp, #10]

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
   1cc18:	4601      	mov	r1, r0
   1cc1a:	aa06      	add	r2, sp, #24
   1cc1c:	4620      	mov	r0, r4
   1cc1e:	f7fe fb41 	bl	1b2a4 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
   1cc22:	9d06      	ldr	r5, [sp, #24]
   1cc24:	b125      	cbz	r5, 1cc30 <VL53L0X_get_pal_range_status+0x7a>
	uint8_t SigmaLimitflag = 0;
   1cc26:	9b05      	ldr	r3, [sp, #20]
   1cc28:	429d      	cmp	r5, r3
   1cc2a:	bf2c      	ite	cs
   1cc2c:	2500      	movcs	r5, #0
   1cc2e:	2501      	movcc	r5, #1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
   1cc30:	b920      	cbnz	r0, 1cc3c <VL53L0X_get_pal_range_status+0x86>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
   1cc32:	aa04      	add	r2, sp, #16
   1cc34:	2102      	movs	r1, #2
   1cc36:	4620      	mov	r0, r4
   1cc38:	f7fe fafb 	bl	1b232 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
   1cc3c:	f89d 6010 	ldrb.w	r6, [sp, #16]
   1cc40:	b326      	cbz	r6, 1cc8c <VL53L0X_get_pal_range_status+0xd6>
   1cc42:	2800      	cmp	r0, #0
   1cc44:	d17d      	bne.n	1cd42 <VL53L0X_get_pal_range_status+0x18c>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
   1cc46:	aa07      	add	r2, sp, #28
   1cc48:	2102      	movs	r1, #2
   1cc4a:	4620      	mov	r0, r4
   1cc4c:	f7fe fb2a 	bl	1b2a4 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
   1cc50:	b988      	cbnz	r0, 1cc76 <VL53L0X_get_pal_range_status+0xc0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
   1cc52:	2201      	movs	r2, #1
   1cc54:	21ff      	movs	r1, #255	; 0xff
   1cc56:	4620      	mov	r0, r4
   1cc58:	f7fd fc90 	bl	1a57c <VL53L0X_WrByte>

		if (Status == VL53L0X_ERROR_NONE)
   1cc5c:	b958      	cbnz	r0, 1cc76 <VL53L0X_get_pal_range_status+0xc0>
			Status = VL53L0X_RdWord(Dev,
   1cc5e:	f10d 0212 	add.w	r2, sp, #18
   1cc62:	21b6      	movs	r1, #182	; 0xb6
   1cc64:	4620      	mov	r0, r4
   1cc66:	f7fd fcf2 	bl	1a64e <VL53L0X_RdWord>
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
   1cc6a:	b920      	cbnz	r0, 1cc76 <VL53L0X_get_pal_range_status+0xc0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
   1cc6c:	4602      	mov	r2, r0
   1cc6e:	21ff      	movs	r1, #255	; 0xff
   1cc70:	4620      	mov	r0, r4
   1cc72:	f7fd fc83 	bl	1a57c <VL53L0X_WrByte>

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
   1cc76:	f8bd 6012 	ldrh.w	r6, [sp, #18]
   1cc7a:	0273      	lsls	r3, r6, #9
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);

		if ((SignalRefClipValue > 0) &&
   1cc7c:	9e07      	ldr	r6, [sp, #28]
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
   1cc7e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		if ((SignalRefClipValue > 0) &&
   1cc82:	b11e      	cbz	r6, 1cc8c <VL53L0X_get_pal_range_status+0xd6>
	uint8_t SignalRefClipflag = 0;
   1cc84:	429e      	cmp	r6, r3
   1cc86:	bf2c      	ite	cs
   1cc88:	2600      	movcs	r6, #0
   1cc8a:	2601      	movcc	r6, #1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
   1cc8c:	b928      	cbnz	r0, 1cc9a <VL53L0X_get_pal_range_status+0xe4>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
   1cc8e:	f10d 0211 	add.w	r2, sp, #17
   1cc92:	2103      	movs	r1, #3
   1cc94:	4620      	mov	r0, r4
   1cc96:	f7fe facc 	bl	1b232 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
   1cc9a:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1cc9e:	b193      	cbz	r3, 1ccc6 <VL53L0X_get_pal_range_status+0x110>
   1cca0:	2800      	cmp	r0, #0
   1cca2:	d173      	bne.n	1cd8c <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
   1cca4:	f1ba 0f00 	cmp.w	sl, #0
   1cca8:	d003      	beq.n	1ccb2 <VL53L0X_get_pal_range_status+0xfc>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
   1ccaa:	ea4f 2309 	mov.w	r3, r9, lsl #8
   1ccae:	fbb3 fafa 	udiv	sl, r3, sl
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
   1ccb2:	aa08      	add	r2, sp, #32
   1ccb4:	2103      	movs	r1, #3
   1ccb6:	4620      	mov	r0, r4
   1ccb8:	f7fe faf4 	bl	1b2a4 <VL53L0X_GetLimitCheckValue>
	uint8_t RangeIgnoreThresholdflag = 0;
   1ccbc:	9b08      	ldr	r3, [sp, #32]
   1ccbe:	4553      	cmp	r3, sl
   1ccc0:	bf94      	ite	ls
   1ccc2:	2300      	movls	r3, #0
   1ccc4:	2301      	movhi	r3, #1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
   1ccc6:	b938      	cbnz	r0, 1ccd8 <VL53L0X_get_pal_range_status+0x122>
	if (DeviceRangeStatusInternal == 0 ||
   1ccc8:	f24f 02a1 	movw	r2, #61601	; 0xf0a1
   1cccc:	40fa      	lsrs	r2, r7
		if (NoneFlag == 1) {
   1ccce:	07d2      	lsls	r2, r2, #31
   1ccd0:	d539      	bpl.n	1cd46 <VL53L0X_get_pal_range_status+0x190>
			*pPalRangeStatus = 255;	 /* NONE */
   1ccd2:	22ff      	movs	r2, #255	; 0xff
			*pPalRangeStatus = 3;  /* Min range */
		} else if (DeviceRangeStatusInternal == 4 ||
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
		} else if (SigmaLimitflag == 1) {
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
   1ccd4:	f888 2000 	strb.w	r2, [r8]
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
   1ccd8:	f898 2000 	ldrb.w	r2, [r8]
   1ccdc:	b90a      	cbnz	r2, 1cce2 <VL53L0X_get_pal_range_status+0x12c>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
   1ccde:	f8ab 200a 	strh.w	r2, [fp, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
   1cce2:	f10d 020f 	add.w	r2, sp, #15
   1cce6:	2101      	movs	r1, #1
   1cce8:	4620      	mov	r0, r4
   1ccea:	9301      	str	r3, [sp, #4]
   1ccec:	f7fe faa1 	bl	1b232 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
   1ccf0:	bb00      	cbnz	r0, 1cd34 <VL53L0X_get_pal_range_status+0x17e>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
   1ccf2:	f89d 200e 	ldrb.w	r2, [sp, #14]
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
   1ccf6:	9b01      	ldr	r3, [sp, #4]
			Temp8 = 1;
   1ccf8:	2a00      	cmp	r2, #0
   1ccfa:	bf08      	it	eq
   1ccfc:	2501      	moveq	r5, #1
		if ((DeviceRangeStatusInternal == 4) ||
   1ccfe:	2f04      	cmp	r7, #4
   1cd00:	bf18      	it	ne
   1cd02:	f89d 200f 	ldrbne.w	r2, [sp, #15]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
   1cd06:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
				(SignalRateFinalRangeLimitCheckEnable == 0))
			Temp8 = 1;
   1cd0a:	bf1a      	itte	ne
   1cd0c:	fab2 f282 	clzne	r2, r2
   1cd10:	0952      	lsrne	r2, r2, #5
   1cd12:	2201      	moveq	r2, #1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
   1cd14:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
   1cd18:	f89d 2010 	ldrb.w	r2, [sp, #16]
					(SignalRefClipflag == 1))
			Temp8 = 1;
   1cd1c:	2a00      	cmp	r2, #0
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
   1cd1e:	f89d 2011 	ldrb.w	r2, [sp, #17]
			Temp8 = 1;
   1cd22:	bf08      	it	eq
   1cd24:	2601      	moveq	r6, #1
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
   1cd26:	2a00      	cmp	r2, #0
   1cd28:	bf08      	it	eq
   1cd2a:	2301      	moveq	r3, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
   1cd2c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
   1cd30:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
   1cd34:	b00b      	add	sp, #44	; 0x2c
   1cd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd3a:	461d      	mov	r5, r3
   1cd3c:	e77e      	b.n	1cc3c <VL53L0X_get_pal_range_status+0x86>
   1cd3e:	4635      	mov	r5, r6
   1cd40:	e77c      	b.n	1cc3c <VL53L0X_get_pal_range_status+0x86>
	uint8_t SignalRefClipflag = 0;
   1cd42:	2600      	movs	r6, #0
   1cd44:	e7a9      	b.n	1cc9a <VL53L0X_get_pal_range_status+0xe4>
		} else if (DeviceRangeStatusInternal == 1 ||
   1cd46:	1e7a      	subs	r2, r7, #1
   1cd48:	2a02      	cmp	r2, #2
   1cd4a:	d801      	bhi.n	1cd50 <VL53L0X_get_pal_range_status+0x19a>
			*pPalRangeStatus = 5; /* HW fail */
   1cd4c:	2205      	movs	r2, #5
   1cd4e:	e7c1      	b.n	1ccd4 <VL53L0X_get_pal_range_status+0x11e>
		} else if (DeviceRangeStatusInternal == 6 ||
   1cd50:	2f06      	cmp	r7, #6
   1cd52:	d001      	beq.n	1cd58 <VL53L0X_get_pal_range_status+0x1a2>
   1cd54:	2f09      	cmp	r7, #9
   1cd56:	d101      	bne.n	1cd5c <VL53L0X_get_pal_range_status+0x1a6>
			*pPalRangeStatus = 4;  /* Phase fail */
   1cd58:	2204      	movs	r2, #4
   1cd5a:	e7bb      	b.n	1ccd4 <VL53L0X_get_pal_range_status+0x11e>
		} else if (DeviceRangeStatusInternal == 8 ||
   1cd5c:	9a01      	ldr	r2, [sp, #4]
   1cd5e:	f002 020d 	and.w	r2, r2, #13
   1cd62:	2a08      	cmp	r2, #8
   1cd64:	d001      	beq.n	1cd6a <VL53L0X_get_pal_range_status+0x1b4>
					DeviceRangeStatusInternal == 10 ||
   1cd66:	2e01      	cmp	r6, #1
   1cd68:	d101      	bne.n	1cd6e <VL53L0X_get_pal_range_status+0x1b8>
			*pPalRangeStatus = 3;  /* Min range */
   1cd6a:	2203      	movs	r2, #3
   1cd6c:	e7b2      	b.n	1ccd4 <VL53L0X_get_pal_range_status+0x11e>
		} else if (DeviceRangeStatusInternal == 4 ||
   1cd6e:	2f04      	cmp	r7, #4
   1cd70:	d001      	beq.n	1cd76 <VL53L0X_get_pal_range_status+0x1c0>
   1cd72:	2b01      	cmp	r3, #1
   1cd74:	d101      	bne.n	1cd7a <VL53L0X_get_pal_range_status+0x1c4>
			*pPalRangeStatus = 2;  /* Signal Fail */
   1cd76:	2202      	movs	r2, #2
   1cd78:	e7ac      	b.n	1ccd4 <VL53L0X_get_pal_range_status+0x11e>
		} else if (SigmaLimitflag == 1) {
   1cd7a:	2d01      	cmp	r5, #1
   1cd7c:	d101      	bne.n	1cd82 <VL53L0X_get_pal_range_status+0x1cc>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
   1cd7e:	2201      	movs	r2, #1
   1cd80:	e7a8      	b.n	1ccd4 <VL53L0X_get_pal_range_status+0x11e>
			*pPalRangeStatus = 0; /* Range Valid */
   1cd82:	2300      	movs	r3, #0
   1cd84:	f888 3000 	strb.w	r3, [r8]
   1cd88:	462b      	mov	r3, r5
   1cd8a:	e7a5      	b.n	1ccd8 <VL53L0X_get_pal_range_status+0x122>
	uint8_t RangeIgnoreThresholdflag = 0;
   1cd8c:	2300      	movs	r3, #0
   1cd8e:	e7a3      	b.n	1ccd8 <VL53L0X_get_pal_range_status+0x122>

0001cd90 <z_device_state_init>:
}
   1cd90:	4770      	bx	lr

0001cd92 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1cd92:	b138      	cbz	r0, 1cda4 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1cd94:	68c3      	ldr	r3, [r0, #12]
   1cd96:	8818      	ldrh	r0, [r3, #0]
   1cd98:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1cd9c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1cda0:	4258      	negs	r0, r3
   1cda2:	4158      	adcs	r0, r3
}
   1cda4:	4770      	bx	lr

0001cda6 <arch_system_halt>:
	__asm__ volatile(
   1cda6:	f04f 0220 	mov.w	r2, #32
   1cdaa:	f3ef 8311 	mrs	r3, BASEPRI
   1cdae:	f382 8812 	msr	BASEPRI_MAX, r2
   1cdb2:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   1cdb6:	e7fe      	b.n	1cdb6 <arch_system_halt+0x10>

0001cdb8 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1cdb8:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   1cdba:	f7ff fff4 	bl	1cda6 <arch_system_halt>

0001cdbe <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1cdbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cdc0:	4605      	mov	r5, r0
   1cdc2:	460e      	mov	r6, r1
   1cdc4:	f04f 0320 	mov.w	r3, #32
   1cdc8:	f3ef 8711 	mrs	r7, BASEPRI
   1cdcc:	f383 8812 	msr	BASEPRI_MAX, r3
   1cdd0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1cdd4:	f7fc f8b2 	bl	18f3c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1cdd8:	4631      	mov	r1, r6
   1cdda:	4604      	mov	r4, r0
   1cddc:	4628      	mov	r0, r5
   1cdde:	f7ff ffeb 	bl	1cdb8 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1cde2:	f387 8811 	msr	BASEPRI, r7
   1cde6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1cdea:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1cdec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1cdf0:	f7f6 b8ba 	b.w	12f68 <z_impl_k_thread_abort>

0001cdf4 <z_early_memset>:
	(void) memset(dst, c, n);
   1cdf4:	f7fd b8e0 	b.w	19fb8 <memset>

0001cdf8 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   1cdf8:	f7fd b8d3 	b.w	19fa2 <memcpy>

0001cdfc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1cdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cdfe:	4604      	mov	r4, r0
   1ce00:	460d      	mov	r5, r1
	__asm__ volatile(
   1ce02:	f04f 0320 	mov.w	r3, #32
   1ce06:	f3ef 8611 	mrs	r6, BASEPRI
   1ce0a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce0e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1ce12:	6947      	ldr	r7, [r0, #20]
   1ce14:	b977      	cbnz	r7, 1ce34 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1ce16:	f000 f9d4 	bl	1d1c2 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1ce1a:	b158      	cbz	r0, 1ce34 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1ce1c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1ce1e:	6142      	str	r2, [r0, #20]
   1ce20:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
   1ce22:	f000 f972 	bl	1d10a <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1ce26:	4631      	mov	r1, r6
   1ce28:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1ce2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1ce30:	f7fb bdd8 	b.w	189e4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1ce34:	682b      	ldr	r3, [r5, #0]
   1ce36:	6962      	ldr	r2, [r4, #20]
   1ce38:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1ce3a:	682b      	ldr	r3, [r5, #0]
   1ce3c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1ce3e:	69a3      	ldr	r3, [r4, #24]
   1ce40:	3b01      	subs	r3, #1
   1ce42:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1ce44:	f386 8811 	msr	BASEPRI, r6
   1ce48:	f3bf 8f6f 	isb	sy
}
   1ce4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ce4e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ce4e:	f3ef 8005 	mrs	r0, IPSR
}
   1ce52:	3800      	subs	r0, #0
   1ce54:	bf18      	it	ne
   1ce56:	2001      	movne	r0, #1
   1ce58:	4770      	bx	lr

0001ce5a <z_impl_k_thread_name_set>:
}
   1ce5a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1ce5e:	4770      	bx	lr

0001ce60 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1ce60:	f7fb beb8 	b.w	18bd4 <z_sched_start>

0001ce64 <z_pm_save_idle_exit>:
{
   1ce64:	b508      	push	{r3, lr}
	pm_system_resume();
   1ce66:	f7f5 fcfd 	bl	12864 <pm_system_resume>
}
   1ce6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1ce6e:	f7fd be65 	b.w	1ab3c <sys_clock_idle_exit>

0001ce72 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1ce72:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ce76:	428b      	cmp	r3, r1
   1ce78:	d001      	beq.n	1ce7e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1ce7a:	f7fb bf1b 	b.w	18cb4 <z_set_prio>
}
   1ce7e:	2000      	movs	r0, #0
   1ce80:	4770      	bx	lr

0001ce82 <z_impl_k_mutex_init>:
{
   1ce82:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1ce84:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   1ce86:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
   1ce8a:	e9c3 3300 	strd	r3, r3, [r3]
}
   1ce8e:	4770      	bx	lr

0001ce90 <queue_insert>:
{
   1ce90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ce94:	4699      	mov	r9, r3
   1ce96:	4604      	mov	r4, r0
   1ce98:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1ce9c:	460d      	mov	r5, r1
   1ce9e:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1cea0:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1cea4:	f04f 0220 	mov.w	r2, #32
   1cea8:	f3ef 8611 	mrs	r6, BASEPRI
   1ceac:	f382 8812 	msr	BASEPRI_MAX, r2
   1ceb0:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1ceb4:	b103      	cbz	r3, 1ceb8 <queue_insert+0x28>
	return list->tail;
   1ceb6:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1ceb8:	4638      	mov	r0, r7
   1ceba:	f000 f982 	bl	1d1c2 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1cebe:	b158      	cbz	r0, 1ced8 <queue_insert+0x48>
   1cec0:	2400      	movs	r4, #0
   1cec2:	6784      	str	r4, [r0, #120]	; 0x78
   1cec4:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1cec8:	f000 f91f 	bl	1d10a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1cecc:	4638      	mov	r0, r7
   1cece:	4631      	mov	r1, r6
   1ced0:	f7fb fd88 	bl	189e4 <z_reschedule>
	return 0;
   1ced4:	2000      	movs	r0, #0
   1ced6:	e00c      	b.n	1cef2 <queue_insert+0x62>
	if (alloc) {
   1ced8:	f1b9 0f00 	cmp.w	r9, #0
   1cedc:	d01c      	beq.n	1cf18 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   1cede:	2108      	movs	r1, #8
   1cee0:	f7fc fa80 	bl	193e4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1cee4:	b938      	cbnz	r0, 1cef6 <queue_insert+0x66>
	__asm__ volatile(
   1cee6:	f386 8811 	msr	BASEPRI, r6
   1ceea:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1ceee:	f06f 000b 	mvn.w	r0, #11
}
   1cef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1cef6:	2301      	movs	r3, #1
		anode->data = data;
   1cef8:	f8c0 8004 	str.w	r8, [r0, #4]
   1cefc:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cefe:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cf00:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1cf04:	b965      	cbnz	r5, 1cf20 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cf06:	6823      	ldr	r3, [r4, #0]
   1cf08:	4313      	orrs	r3, r2
   1cf0a:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1cf0c:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1cf0e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1cf10:	2b00      	cmp	r3, #0
   1cf12:	d1db      	bne.n	1cecc <queue_insert+0x3c>
	list->tail = node;
   1cf14:	6060      	str	r0, [r4, #4]
}
   1cf16:	e7d9      	b.n	1cecc <queue_insert+0x3c>
	node->next_and_flags = flags;
   1cf18:	f8c8 9000 	str.w	r9, [r8]
}
   1cf1c:	4640      	mov	r0, r8
   1cf1e:	e7ee      	b.n	1cefe <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1cf20:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1cf22:	f033 0303 	bics.w	r3, r3, #3
   1cf26:	d10b      	bne.n	1cf40 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cf28:	6002      	str	r2, [r0, #0]
	return list->tail;
   1cf2a:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1cf2c:	b912      	cbnz	r2, 1cf34 <queue_insert+0xa4>
	list->head = node;
   1cf2e:	e9c4 0000 	strd	r0, r0, [r4]
}
   1cf32:	e7cb      	b.n	1cecc <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cf34:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cf36:	f003 0303 	and.w	r3, r3, #3
   1cf3a:	4303      	orrs	r3, r0
   1cf3c:	6013      	str	r3, [r2, #0]
   1cf3e:	e7e9      	b.n	1cf14 <queue_insert+0x84>
   1cf40:	4313      	orrs	r3, r2
   1cf42:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cf44:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cf46:	f003 0303 	and.w	r3, r3, #3
   1cf4a:	4318      	orrs	r0, r3
   1cf4c:	6028      	str	r0, [r5, #0]
}
   1cf4e:	e7bd      	b.n	1cecc <queue_insert+0x3c>

0001cf50 <z_queue_node_peek>:
{
   1cf50:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1cf52:	4604      	mov	r4, r0
   1cf54:	b130      	cbz	r0, 1cf64 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cf56:	6802      	ldr	r2, [r0, #0]
   1cf58:	0793      	lsls	r3, r2, #30
   1cf5a:	d003      	beq.n	1cf64 <z_queue_node_peek+0x14>
		ret = anode->data;
   1cf5c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1cf5e:	b109      	cbz	r1, 1cf64 <z_queue_node_peek+0x14>
			k_free(anode);
   1cf60:	f000 f9e7 	bl	1d332 <k_free>
}
   1cf64:	4620      	mov	r0, r4
   1cf66:	bd10      	pop	{r4, pc}

0001cf68 <k_queue_append>:
{
   1cf68:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1cf6a:	2301      	movs	r3, #1
   1cf6c:	9300      	str	r3, [sp, #0]
   1cf6e:	2300      	movs	r3, #0
{
   1cf70:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1cf72:	4619      	mov	r1, r3
   1cf74:	f7ff ff8c 	bl	1ce90 <queue_insert>
}
   1cf78:	b003      	add	sp, #12
   1cf7a:	f85d fb04 	ldr.w	pc, [sp], #4

0001cf7e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1cf7e:	b13a      	cbz	r2, 1cf90 <z_impl_k_sem_init+0x12>
   1cf80:	428a      	cmp	r2, r1
   1cf82:	d305      	bcc.n	1cf90 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   1cf84:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1cf88:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   1cf8c:	2000      	movs	r0, #0
   1cf8e:	4770      	bx	lr
		return -EINVAL;
   1cf90:	f06f 0015 	mvn.w	r0, #21
}
   1cf94:	4770      	bx	lr

0001cf96 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   1cf96:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1cf98:	2301      	movs	r3, #1
   1cf9a:	408b      	lsls	r3, r1
   1cf9c:	ea22 0303 	bic.w	r3, r2, r3
   1cfa0:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1cfa2:	fa22 f001 	lsr.w	r0, r2, r1
}
   1cfa6:	f000 0001 	and.w	r0, r0, #1
   1cfaa:	4770      	bx	lr

0001cfac <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1cfac:	b120      	cbz	r0, 1cfb8 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1cfae:	2200      	movs	r2, #0
   1cfb0:	4611      	mov	r1, r2
   1cfb2:	3088      	adds	r0, #136	; 0x88
   1cfb4:	f000 b92d 	b.w	1d212 <z_sched_wake>
}
   1cfb8:	4770      	bx	lr

0001cfba <work_timeout>:
{
   1cfba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1cfbc:	4604      	mov	r4, r0
	__asm__ volatile(
   1cfbe:	f04f 0320 	mov.w	r3, #32
   1cfc2:	f3ef 8511 	mrs	r5, BASEPRI
   1cfc6:	f383 8812 	msr	BASEPRI_MAX, r3
   1cfca:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1cfce:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1cfd0:	f1a0 0610 	sub.w	r6, r0, #16
   1cfd4:	2103      	movs	r1, #3
   1cfd6:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1cfd8:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1cfda:	f7ff ffdc 	bl	1cf96 <flag_test_and_clear>
   1cfde:	b128      	cbz	r0, 1cfec <work_timeout+0x32>
		queue = dw->queue;
   1cfe0:	69a3      	ldr	r3, [r4, #24]
   1cfe2:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1cfe4:	a901      	add	r1, sp, #4
   1cfe6:	4630      	mov	r0, r6
   1cfe8:	f7fb fbfe 	bl	187e8 <submit_to_queue_locked>
	__asm__ volatile(
   1cfec:	f385 8811 	msr	BASEPRI, r5
   1cff0:	f3bf 8f6f 	isb	sy
}
   1cff4:	b002      	add	sp, #8
   1cff6:	bd70      	pop	{r4, r5, r6, pc}

0001cff8 <k_work_init>:
{
   1cff8:	b538      	push	{r3, r4, r5, lr}
   1cffa:	4604      	mov	r4, r0
   1cffc:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1cffe:	2210      	movs	r2, #16
   1d000:	2100      	movs	r1, #0
   1d002:	f7fc ffd9 	bl	19fb8 <memset>
   1d006:	6065      	str	r5, [r4, #4]
}
   1d008:	bd38      	pop	{r3, r4, r5, pc}

0001d00a <k_work_submit_to_queue>:
{
   1d00a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d00c:	9001      	str	r0, [sp, #4]
   1d00e:	4608      	mov	r0, r1
	__asm__ volatile(
   1d010:	f04f 0320 	mov.w	r3, #32
   1d014:	f3ef 8511 	mrs	r5, BASEPRI
   1d018:	f383 8812 	msr	BASEPRI_MAX, r3
   1d01c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1d020:	a901      	add	r1, sp, #4
   1d022:	f7fb fbe1 	bl	187e8 <submit_to_queue_locked>
   1d026:	4604      	mov	r4, r0
	__asm__ volatile(
   1d028:	f385 8811 	msr	BASEPRI, r5
   1d02c:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
   1d030:	2800      	cmp	r0, #0
   1d032:	dd09      	ble.n	1d048 <k_work_submit_to_queue+0x3e>
	__asm__ volatile(
   1d034:	f04f 0320 	mov.w	r3, #32
   1d038:	f3ef 8011 	mrs	r0, BASEPRI
   1d03c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d040:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1d044:	f000 f845 	bl	1d0d2 <z_reschedule_irqlock>
}
   1d048:	4620      	mov	r0, r4
   1d04a:	b003      	add	sp, #12
   1d04c:	bd30      	pop	{r4, r5, pc}

0001d04e <k_work_init_delayable>:
{
   1d04e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1d050:	2230      	movs	r2, #48	; 0x30
{
   1d052:	4604      	mov	r4, r0
   1d054:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1d056:	2100      	movs	r1, #0
   1d058:	f7fc ffae 	bl	19fb8 <memset>
   1d05c:	f44f 7380 	mov.w	r3, #256	; 0x100
   1d060:	6065      	str	r5, [r4, #4]
   1d062:	60e3      	str	r3, [r4, #12]
}
   1d064:	bd38      	pop	{r3, r4, r5, pc}

0001d066 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1d066:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1d06a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d06c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d06e:	2300      	movs	r3, #0
	node->prev = NULL;
   1d070:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   1d074:	4770      	bx	lr

0001d076 <unpend_thread_no_timeout>:
{
   1d076:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d078:	f7ff fff5 	bl	1d066 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d07c:	7b43      	ldrb	r3, [r0, #13]
   1d07e:	f023 0302 	bic.w	r3, r3, #2
   1d082:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1d084:	2300      	movs	r3, #0
   1d086:	6083      	str	r3, [r0, #8]
}
   1d088:	bd08      	pop	{r3, pc}

0001d08a <z_unpend_thread_no_timeout>:
{
   1d08a:	b508      	push	{r3, lr}
   1d08c:	f04f 0320 	mov.w	r3, #32
   1d090:	f3ef 8111 	mrs	r1, BASEPRI
   1d094:	f383 8812 	msr	BASEPRI_MAX, r3
   1d098:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1d09c:	f7ff ffeb 	bl	1d076 <unpend_thread_no_timeout>
	__asm__ volatile(
   1d0a0:	f381 8811 	msr	BASEPRI, r1
   1d0a4:	f3bf 8f6f 	isb	sy
}
   1d0a8:	bd08      	pop	{r3, pc}

0001d0aa <z_unpend_thread>:
{
   1d0aa:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d0ac:	f04f 0320 	mov.w	r3, #32
   1d0b0:	f3ef 8411 	mrs	r4, BASEPRI
   1d0b4:	f383 8812 	msr	BASEPRI_MAX, r3
   1d0b8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1d0bc:	f7ff ffdb 	bl	1d076 <unpend_thread_no_timeout>
	__asm__ volatile(
   1d0c0:	f384 8811 	msr	BASEPRI, r4
   1d0c4:	f3bf 8f6f 	isb	sy
}
   1d0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d0cc:	3018      	adds	r0, #24
   1d0ce:	f000 b8bd 	b.w	1d24c <z_abort_timeout>

0001d0d2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d0d2:	4603      	mov	r3, r0
   1d0d4:	b920      	cbnz	r0, 1d0e0 <z_reschedule_irqlock+0xe>
   1d0d6:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1d0da:	b90a      	cbnz	r2, 1d0e0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1d0dc:	f7f5 bd56 	b.w	12b8c <arch_swap>
   1d0e0:	f383 8811 	msr	BASEPRI, r3
   1d0e4:	f3bf 8f6f 	isb	sy
}
   1d0e8:	4770      	bx	lr

0001d0ea <z_reschedule_unlocked>:
	__asm__ volatile(
   1d0ea:	f04f 0320 	mov.w	r3, #32
   1d0ee:	f3ef 8011 	mrs	r0, BASEPRI
   1d0f2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d0f6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1d0fa:	f7ff bfea 	b.w	1d0d2 <z_reschedule_irqlock>

0001d0fe <z_priq_dumb_best>:
{
   1d0fe:	4603      	mov	r3, r0
	return list->head == list;
   1d100:	6800      	ldr	r0, [r0, #0]
}
   1d102:	4283      	cmp	r3, r0
   1d104:	bf08      	it	eq
   1d106:	2000      	moveq	r0, #0
   1d108:	4770      	bx	lr

0001d10a <z_ready_thread>:
{
   1d10a:	b510      	push	{r4, lr}
   1d10c:	f04f 0320 	mov.w	r3, #32
   1d110:	f3ef 8411 	mrs	r4, BASEPRI
   1d114:	f383 8812 	msr	BASEPRI_MAX, r3
   1d118:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1d11c:	f7fb fd24 	bl	18b68 <ready_thread>
	__asm__ volatile(
   1d120:	f384 8811 	msr	BASEPRI, r4
   1d124:	f3bf 8f6f 	isb	sy
}
   1d128:	bd10      	pop	{r4, pc}

0001d12a <z_thread_timeout>:
{
   1d12a:	b510      	push	{r4, lr}
   1d12c:	4601      	mov	r1, r0
	__asm__ volatile(
   1d12e:	f04f 0320 	mov.w	r3, #32
   1d132:	f3ef 8411 	mrs	r4, BASEPRI
   1d136:	f383 8812 	msr	BASEPRI_MAX, r3
   1d13a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1d13e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1d142:	f013 0f28 	tst.w	r3, #40	; 0x28
   1d146:	d10d      	bne.n	1d164 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1d148:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1d14c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1d14e:	b10b      	cbz	r3, 1d154 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1d150:	f7ff ff91 	bl	1d076 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1d154:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1d158:	f023 0314 	bic.w	r3, r3, #20
   1d15c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1d160:	f7fb fd02 	bl	18b68 <ready_thread>
	__asm__ volatile(
   1d164:	f384 8811 	msr	BASEPRI, r4
   1d168:	f3bf 8f6f 	isb	sy
}
   1d16c:	bd10      	pop	{r4, pc}

0001d16e <add_to_waitq_locked>:
{
   1d16e:	b538      	push	{r3, r4, r5, lr}
   1d170:	4604      	mov	r4, r0
   1d172:	460d      	mov	r5, r1
	unready_thread(thread);
   1d174:	f7fb fd4c 	bl	18c10 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1d178:	7b63      	ldrb	r3, [r4, #13]
   1d17a:	f043 0302 	orr.w	r3, r3, #2
   1d17e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1d180:	b195      	cbz	r5, 1d1a8 <add_to_waitq_locked+0x3a>
   1d182:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1d184:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d186:	429d      	cmp	r5, r3
   1d188:	d015      	beq.n	1d1b6 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d18a:	b1a3      	cbz	r3, 1d1b6 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   1d18c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1d190:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1d194:	4291      	cmp	r1, r2
   1d196:	d008      	beq.n	1d1aa <add_to_waitq_locked+0x3c>
		return b2 - b1;
   1d198:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d19a:	2a00      	cmp	r2, #0
   1d19c:	dd05      	ble.n	1d1aa <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   1d19e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1d1a0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1d1a4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1d1a6:	605c      	str	r4, [r3, #4]
}
   1d1a8:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1d1aa:	686a      	ldr	r2, [r5, #4]
   1d1ac:	4293      	cmp	r3, r2
   1d1ae:	d002      	beq.n	1d1b6 <add_to_waitq_locked+0x48>
   1d1b0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d1b2:	2b00      	cmp	r3, #0
   1d1b4:	d1ec      	bne.n	1d190 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   1d1b6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1d1b8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1d1bc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d1be:	606c      	str	r4, [r5, #4]
}
   1d1c0:	e7f2      	b.n	1d1a8 <add_to_waitq_locked+0x3a>

0001d1c2 <z_unpend_first_thread>:
{
   1d1c2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1d1c4:	f04f 0320 	mov.w	r3, #32
   1d1c8:	f3ef 8511 	mrs	r5, BASEPRI
   1d1cc:	f383 8812 	msr	BASEPRI_MAX, r3
   1d1d0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1d1d4:	f7ff ff93 	bl	1d0fe <z_priq_dumb_best>
		if (thread != NULL) {
   1d1d8:	4604      	mov	r4, r0
   1d1da:	b120      	cbz	r0, 1d1e6 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1d1dc:	f7ff ff4b 	bl	1d076 <unpend_thread_no_timeout>
   1d1e0:	3018      	adds	r0, #24
   1d1e2:	f000 f833 	bl	1d24c <z_abort_timeout>
	__asm__ volatile(
   1d1e6:	f385 8811 	msr	BASEPRI, r5
   1d1ea:	f3bf 8f6f 	isb	sy
}
   1d1ee:	4620      	mov	r0, r4
   1d1f0:	bd38      	pop	{r3, r4, r5, pc}

0001d1f2 <z_unpend_all>:
{
   1d1f2:	b538      	push	{r3, r4, r5, lr}
   1d1f4:	4605      	mov	r5, r0
	int need_sched = 0;
   1d1f6:	2000      	movs	r0, #0
	return list->head == list;
   1d1f8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d1fa:	42a5      	cmp	r5, r4
   1d1fc:	d000      	beq.n	1d200 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1d1fe:	b904      	cbnz	r4, 1d202 <z_unpend_all+0x10>
}
   1d200:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1d202:	4620      	mov	r0, r4
   1d204:	f7ff ff51 	bl	1d0aa <z_unpend_thread>
		z_ready_thread(thread);
   1d208:	4620      	mov	r0, r4
   1d20a:	f7ff ff7e 	bl	1d10a <z_ready_thread>
		need_sched = 1;
   1d20e:	2001      	movs	r0, #1
   1d210:	e7f2      	b.n	1d1f8 <z_unpend_all+0x6>

0001d212 <z_sched_wake>:
{
   1d212:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1d214:	f04f 0320 	mov.w	r3, #32
   1d218:	f3ef 8511 	mrs	r5, BASEPRI
   1d21c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d220:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1d224:	f7ff ff6b 	bl	1d0fe <z_priq_dumb_best>
		if (thread != NULL) {
   1d228:	4604      	mov	r4, r0
   1d22a:	b150      	cbz	r0, 1d242 <z_sched_wake+0x30>
   1d22c:	6781      	str	r1, [r0, #120]	; 0x78
	thread->base.swap_data = data;
   1d22e:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1d230:	f7ff ff21 	bl	1d076 <unpend_thread_no_timeout>
   1d234:	3018      	adds	r0, #24
   1d236:	f000 f809 	bl	1d24c <z_abort_timeout>
			ready_thread(thread);
   1d23a:	4620      	mov	r0, r4
   1d23c:	f7fb fc94 	bl	18b68 <ready_thread>
			ret = true;
   1d240:	2001      	movs	r0, #1
	__asm__ volatile(
   1d242:	f385 8811 	msr	BASEPRI, r5
   1d246:	f3bf 8f6f 	isb	sy
}
   1d24a:	bd38      	pop	{r3, r4, r5, pc}

0001d24c <z_abort_timeout>:
{
   1d24c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d24e:	f04f 0220 	mov.w	r2, #32
   1d252:	f3ef 8411 	mrs	r4, BASEPRI
   1d256:	f382 8812 	msr	BASEPRI_MAX, r2
   1d25a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1d25e:	6803      	ldr	r3, [r0, #0]
   1d260:	b13b      	cbz	r3, 1d272 <z_abort_timeout+0x26>
			remove_timeout(to);
   1d262:	f7fb ff1f 	bl	190a4 <remove_timeout>
			ret = 0;
   1d266:	2000      	movs	r0, #0
	__asm__ volatile(
   1d268:	f384 8811 	msr	BASEPRI, r4
   1d26c:	f3bf 8f6f 	isb	sy
}
   1d270:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1d272:	f06f 0015 	mvn.w	r0, #21
   1d276:	e7f7      	b.n	1d268 <z_abort_timeout+0x1c>

0001d278 <z_get_next_timeout_expiry>:
{
   1d278:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d27a:	f04f 0320 	mov.w	r3, #32
   1d27e:	f3ef 8411 	mrs	r4, BASEPRI
   1d282:	f383 8812 	msr	BASEPRI_MAX, r3
   1d286:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1d28a:	f7fb fee5 	bl	19058 <next_timeout>
	__asm__ volatile(
   1d28e:	f384 8811 	msr	BASEPRI, r4
   1d292:	f3bf 8f6f 	isb	sy
}
   1d296:	bd10      	pop	{r4, pc}

0001d298 <z_set_timeout_expiry>:
{
   1d298:	b570      	push	{r4, r5, r6, lr}
   1d29a:	4604      	mov	r4, r0
   1d29c:	460d      	mov	r5, r1
	__asm__ volatile(
   1d29e:	f04f 0320 	mov.w	r3, #32
   1d2a2:	f3ef 8611 	mrs	r6, BASEPRI
   1d2a6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d2aa:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1d2ae:	f7fb fed3 	bl	19058 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1d2b2:	2801      	cmp	r0, #1
   1d2b4:	dd05      	ble.n	1d2c2 <z_set_timeout_expiry+0x2a>
   1d2b6:	42a0      	cmp	r0, r4
   1d2b8:	db03      	blt.n	1d2c2 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1d2ba:	4629      	mov	r1, r5
   1d2bc:	4620      	mov	r0, r4
   1d2be:	f7f7 ff67 	bl	15190 <sys_clock_set_timeout>
	__asm__ volatile(
   1d2c2:	f386 8811 	msr	BASEPRI, r6
   1d2c6:	f3bf 8f6f 	isb	sy
}
   1d2ca:	bd70      	pop	{r4, r5, r6, pc}

0001d2cc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1d2cc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1d2ce:	f7fb ffd9 	bl	19284 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1d2d2:	bd08      	pop	{r3, pc}

0001d2d4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1d2d4:	b108      	cbz	r0, 1d2da <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1d2d6:	f7f5 bf3d 	b.w	13154 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1d2da:	4770      	bx	lr

0001d2dc <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d2dc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1d2e0:	bf08      	it	eq
   1d2e2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1d2e6:	b538      	push	{r3, r4, r5, lr}
   1d2e8:	4605      	mov	r5, r0
   1d2ea:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d2ec:	d01d      	beq.n	1d32a <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d2ee:	ea51 0300 	orrs.w	r3, r1, r0
   1d2f2:	d103      	bne.n	1d2fc <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1d2f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1d2f8:	f7fb bfc4 	b.w	19284 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1d2fc:	f06f 0301 	mvn.w	r3, #1
   1d300:	1a18      	subs	r0, r3, r0
   1d302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d306:	eb63 0101 	sbc.w	r1, r3, r1
   1d30a:	2900      	cmp	r1, #0
   1d30c:	da0c      	bge.n	1d328 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   1d30e:	f7fb ffb9 	bl	19284 <sys_clock_tick_get>
   1d312:	2d01      	cmp	r5, #1
   1d314:	4622      	mov	r2, r4
   1d316:	f174 0400 	sbcs.w	r4, r4, #0
   1d31a:	462b      	mov	r3, r5
   1d31c:	bfbc      	itt	lt
   1d31e:	2301      	movlt	r3, #1
   1d320:	2200      	movlt	r2, #0
   1d322:	1818      	adds	r0, r3, r0
   1d324:	eb41 0102 	adc.w	r1, r1, r2
}
   1d328:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1d32a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d32e:	4601      	mov	r1, r0
   1d330:	e7fa      	b.n	1d328 <sys_clock_timeout_end_calc+0x4c>

0001d332 <k_free>:
	if (ptr != NULL) {
   1d332:	b120      	cbz	r0, 1d33e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1d334:	1f01      	subs	r1, r0, #4
   1d336:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1d33a:	f000 b84a 	b.w	1d3d2 <k_heap_free>
}
   1d33e:	4770      	bx	lr

0001d340 <k_heap_init>:
{
   1d340:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1d342:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1d346:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1d34a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1d34c:	f7fc bb9b 	b.w	19a86 <sys_heap_init>

0001d350 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d354:	b085      	sub	sp, #20
   1d356:	4606      	mov	r6, r0
   1d358:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1d35a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   1d35e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1d360:	f7ff ffbc 	bl	1d2dc <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1d364:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1d368:	4605      	mov	r5, r0
   1d36a:	460f      	mov	r7, r1
	__asm__ volatile(
   1d36c:	f04f 0320 	mov.w	r3, #32
   1d370:	f3ef 8411 	mrs	r4, BASEPRI
   1d374:	f383 8812 	msr	BASEPRI_MAX, r3
   1d378:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1d37c:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1d380:	464a      	mov	r2, r9
   1d382:	4641      	mov	r1, r8
   1d384:	4630      	mov	r0, r6
   1d386:	f7fc fb16 	bl	199b6 <sys_heap_aligned_alloc>
   1d38a:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1d38c:	f7fb ff7a 	bl	19284 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1d390:	9b03      	ldr	r3, [sp, #12]
   1d392:	b13b      	cbz	r3, 1d3a4 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1d394:	f384 8811 	msr	BASEPRI, r4
   1d398:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1d39c:	4618      	mov	r0, r3
   1d39e:	b005      	add	sp, #20
   1d3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1d3a4:	1a28      	subs	r0, r5, r0
   1d3a6:	eb67 0101 	sbc.w	r1, r7, r1
   1d3aa:	2801      	cmp	r0, #1
   1d3ac:	f171 0200 	sbcs.w	r2, r1, #0
   1d3b0:	dbf0      	blt.n	1d394 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1d3b2:	e9cd 0100 	strd	r0, r1, [sp]
   1d3b6:	465a      	mov	r2, fp
   1d3b8:	4621      	mov	r1, r4
   1d3ba:	4650      	mov	r0, sl
   1d3bc:	f7fb fc66 	bl	18c8c <z_pend_curr>
	__asm__ volatile(
   1d3c0:	f04f 0320 	mov.w	r3, #32
   1d3c4:	f3ef 8411 	mrs	r4, BASEPRI
   1d3c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3cc:	f3bf 8f6f 	isb	sy
   1d3d0:	e7d6      	b.n	1d380 <k_heap_aligned_alloc+0x30>

0001d3d2 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1d3d2:	b538      	push	{r3, r4, r5, lr}
   1d3d4:	4604      	mov	r4, r0
   1d3d6:	f04f 0320 	mov.w	r3, #32
   1d3da:	f3ef 8511 	mrs	r5, BASEPRI
   1d3de:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3e2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1d3e6:	f7fc faae 	bl	19946 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1d3ea:	f104 000c 	add.w	r0, r4, #12
   1d3ee:	f7ff ff00 	bl	1d1f2 <z_unpend_all>
   1d3f2:	b130      	cbz	r0, 1d402 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1d3f4:	4629      	mov	r1, r5
   1d3f6:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1d3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1d3fe:	f7fb baf1 	b.w	189e4 <z_reschedule>
	__asm__ volatile(
   1d402:	f385 8811 	msr	BASEPRI, r5
   1d406:	f3bf 8f6f 	isb	sy
}
   1d40a:	bd38      	pop	{r3, r4, r5, pc}

0001d40c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1d40c:	f7f7 bf58 	b.w	152c0 <SystemInit>
